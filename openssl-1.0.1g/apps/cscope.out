cscope 15 /usr/home/ashokes/Tool/openssl-1.0.1g/apps               0002224768
	@app_rand.c

112 
	#NON_MAIN


	)

113 
	~"≠ps.h
"

114 #unde‡
NON_MAIN


115 
	~<›ís¶/bio.h
>

116 
	~<›ís¶/ønd.h
>

119 
	g£eded
 = 0;

120 
	gegdsockë
 = 0;

122 
	$≠p_RAND_lﬂd_fûe
(c⁄° *
fûe
, 
BIO
 *
bio_e
, 
d⁄t_w¨n
)

124 
c⁄sidî_øndfûe
 = (
fûe
 =
NULL
);

125 
buf„r
[200];

127 #ifde‡
OPENSSL_SYS_WINDOWS


128 
	`BIO_¥ötf
(
bio_e
,"Loading 'screen' intoÑandom state -");

129 
	`BIO_Êush
(
bio_e
);

130 
	`RAND_s¸ìn
();

131 
	`BIO_¥ötf
(
bio_e
," done\n");

134 i‡(
fûe
 =
NULL
)

135 
fûe
 = 
	`RAND_fûe_«me
(
buf„r
,  buffer);

136 i‡(
	`RAND_egd
(
fûe
) > 0)

140 
egdsockë
 = 1;

143 i‡(
fûe
 =
NULL
 || !
	`RAND_lﬂd_fûe
(file, -1))

145 i‡(
	`RAND_°©us
() == 0)

147 i‡(!
d⁄t_w¨n
)

149 
	`BIO_¥ötf
(
bio_e
,"unableÅoÜoad 'random state'\n");

150 
	`BIO_¥ötf
(
bio_e
,"This meansÅhatÅheÑandomÇumber generator hasÇot been seeded\n");

151 
	`BIO_¥ötf
(
bio_e
,"with muchÑandom data.\n");

152 i‡(
c⁄sidî_øndfûe
)

154 
	`BIO_¥ötf
(
bio_e
,"Consider settingÅhe RANDFILEÉnvironment variableÅoÖointátá fileÅhat\n");

155 
	`BIO_¥ötf
(
bio_e
,"'random' data can be kept in (the file will be overwritten).\n");

161 
£eded
 = 1;

163 
	}
}

165 
	$≠p_RAND_lﬂd_fûes
(*
«me
)

167 *
p
,*
n
;

168 
œ°
;

169 
tŸ
=0;

170 
egd
;

174 
œ°
=0;

175 
p
=
«me
; ((*∞!'\0'Ë&& (*∞!
LIST_SEPARATOR_CHAR
));Ö++);

176 i‡(*
p
 ='\0'Ë
œ°
=1;

177 *
p
='\0';

178 
n
=
«me
;

179 
«me
=
p
+1;

180 i‡(*
n
 == '\0') ;

182 
egd
=
	`RAND_egd
(
n
);

183 i‡(
egd
 > 0)

184 
tŸ
+=
egd
;

186 
tŸ
+=
	`RAND_lﬂd_fûe
(
n
,-1);

187 i‡(
œ°
) ;

189 i‡(
tŸ
 > 512)

190 
	`≠p_RAND_Ælow_wrôe_fûe
();

191 (
tŸ
);

192 
	}
}

194 
	$≠p_RAND_wrôe_fûe
(c⁄° *
fûe
, 
BIO
 *
bio_e
)

196 
buf„r
[200];

198 i‡(
egdsockë
 || !
£eded
)

205 i‡(
fûe
 =
NULL
)

206 
fûe
 = 
	`RAND_fûe_«me
(
buf„r
,  buffer);

207 i‡(
fûe
 =
NULL
 || !
	`RAND_wrôe_fûe
(file))

209 
	`BIO_¥ötf
(
bio_e
,"unableÅo write 'random state'\n");

213 
	}
}

215 
	$≠p_RAND_Ælow_wrôe_fûe
()

217 
£eded
 = 1;

218 
	}
}

	@apps.c

112 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë&& deföed(
OPENSSL_SYS_VMS
)

113 
	#_POSIX_C_SOURCE
 2

	)

118 
	~<°dio.h
>

119 
	~<°dlib.h
>

120 
	~<°rög.h
>

121 #i‡!
deföed
(
OPENSSL_SYSNAME_WIN32
Ë&& !deföed(
NETWARE_CLIB
)

122 
	~<°rögs.h
>

124 
	~<sys/ty≥s.h
>

125 
	~<˘y≥.h
>

126 
	~<î∫o.h
>

127 
	~<as£π.h
>

128 
	~<›ís¶/îr.h
>

129 
	~<›ís¶/x509.h
>

130 
	~<›ís¶/x509v3.h
>

131 
	~<›ís¶/≥m.h
>

132 
	~<›ís¶/pkcs12.h
>

133 
	~<›ís¶/ui.h
>

134 
	~<›ís¶/ß„°ack.h
>

135 #i‚de‡
OPENSSL_NO_ENGINE


136 
	~<›ís¶/ígöe.h
>

138 #i‚de‡
OPENSSL_NO_RSA


139 
	~<›ís¶/rß.h
>

141 
	~<›ís¶/bn.h
>

142 #i‚de‡
OPENSSL_NO_JPAKE


143 
	~<›ís¶/j∑ke.h
>

146 
	#NON_MAIN


	)

147 
	~"≠ps.h
"

148 #unde‡
NON_MAIN


150 #ifde‡
_WIN32


151 
WIN32_ª«me
(c⁄° *
‰om
, c⁄° *
to
);

152 
	#ª«me
(
‰om
,
to
Ë
	`WIN32_ª«me
((‰om),—o))

	)

156 c⁄° *
	m«me
;

157 
	mÊag
;

158 
	mmask
;

159 } 
	tNAME_EX_TBL
;

161 
UI_METHOD
 *
	gui_mëhod
 = 
NULL
;

163 
£t_èbÀ_›ts
(*
Êags
, c⁄° *
¨g
, c⁄° 
NAME_EX_TBL
 *
ö_tbl
);

164 
£t_mu…i_›ts
(*
Êags
, c⁄° *
¨g
, c⁄° 
NAME_EX_TBL
 *
ö_tbl
);

166 #i‡!
deföed
(
OPENSSL_NO_RC4
Ë&& !deföed(
OPENSSL_NO_RSA
)

168 
EVP_PKEY
 *

169 
lﬂd_√tsˇ≥_key
(
BIO
 *
îr
, BIO *
key
, c⁄° *
fûe
,

170 c⁄° *
key_des¸ù
, 
f‹m©
);

173 
≠p_öô
(
mesgwö
);

174 #ifde‡
undef


175 
	$¨gs_‰om_fûe
(*
fûe
, *
¨gc
, **
¨gv
[])

177 
FILE
 *
Â
;

178 
num
,
i
;

179 
Àn
;

180 *
buf
=
NULL
;

181 **
¨g
=
NULL
;

182 *
p
;

184 
Â
=
	`f›í
(
fûe
,"r");

185 i‡(
Â
 =
NULL
)

188 i‡(
	`f£ek
(
Â
,0,
SEEK_END
)==0)

189 
Àn
=
	`·ñl
(
Â
), 
	`ªwöd
(fp);

190 
Àn
=-1;

191 i‡(
Àn
<=0)

193 
	`f˛o£
(
Â
);

197 *
¨gc
=0;

198 *
¨gv
=
NULL
;

200 i‡(
buf
 !
NULL
Ë
	`OPENSSL_‰ì
(buf);

201 
buf
=(*)
	`OPENSSL_mÆloc
(
Àn
+1);

202 i‡(
buf
 =
NULL
) (0);

204 
Àn
=
	`‰ód
(
buf
,1,Àn,
Â
);

205 i‡(
Àn
 <= 1) (0);

206 
buf
[
Àn
]='\0';

208 
i
=0;

209 
p
=
buf
; *p;Ö++)

210 i‡(*
p
 ='\n'Ë
i
++;

211 i‡(
¨g
 !
NULL
Ë
	`OPENSSL_‰ì
(arg);

212 
¨g
=(**)
	`OPENSSL_mÆloc
((*)*(
i
*2));

214 *
¨gv
=
¨g
;

215 
num
=0;

216 
p
=
buf
;

219 i‡(!*
p
) ;

220 i‡(*
p
 == '#')

222 *
p
 && (*p != '\n'))Ö++;

226 *(
¨g
++)=
p
;

227 
num
++;

228 *
p
 && ((*p != ' ') && (*p != '\t') && (*p != '\n')))

229 
p
++;

230 i‡(!*
p
) ;

231 i‡(*
p
 == '\n')

233 *(
p
++)='\0';

237 
p
++;

238 *
p
 && ((*p == ' ') || (*p == '\t') || (*p == '\n')))

239 
p
++;

240 i‡(!*
p
) ;

241 i‡(*
p
 == '\n')

243 
p
++;

246 *(
¨g
++)=
p
++;

247 
num
++;

248 *
p
 && (*p != '\n'))Ö++;

249 i‡(!*
p
) ;

251 *(
p
++)='\0';

253 *
¨gc
=
num
;

255 
	}
}

258 
	$°r2fmt
(*
s
)

260 i‡(
s
 =
NULL
)

261  
FORMAT_UNDEF
;

262 i‡((*
s
 == 'D') || (*s == 'd'))

263 (
FORMAT_ASN1
);

264 i‡((*
s
 == 'T') || (*s == 't'))

265 (
FORMAT_TEXT
);

266 i‡((*
s
 == 'N') || (*s == 'n'))

267 (
FORMAT_NETSCAPE
);

268 i‡((*
s
 == 'S') || (*s == 's'))

269 (
FORMAT_SMIME
);

270 i‡((*
s
 == 'M') || (*s == 'm'))

271 (
FORMAT_MSBLOB
);

272 i‡((*
s
 == '1')

273 || (
	`°rcmp
(
s
,"PKCS12") == 0) || (strcmp(s,"pkcs12") == 0)

274 || (
	`°rcmp
(
s
,"P12") == 0) || (strcmp(s,"p12") == 0))

275 (
FORMAT_PKCS12
);

276 i‡((*
s
 == 'E') || (*s == 'e'))

277 (
FORMAT_ENGINE
);

278 i‡((*
s
 == 'P') || (*s == 'p'))

280 i‡(
s
[1] == 'V' || s[1] == 'v')

281  
FORMAT_PVK
;

283 (
FORMAT_PEM
);

286 (
FORMAT_UNDEF
);

287 
	}
}

289 #i‡
deföed
(
OPENSSL_SYS_MSDOS
Ë|| deföed(
OPENSSL_SYS_WIN32
Ë|| deföed(
OPENSSL_SYS_WIN16
Ë|| deföed(
OPENSSL_SYS_NETWARE
)

290 
	$¥ogøm_«me
(*
ö
, *
out
, 
size
)

292 
i
,
n
;

293 *
p
=
NULL
;

295 
n
=
	`°æí
(
ö
);

297 
i
=
n
-1; i>0; i--)

299 i‡((
ö
[
i
] == '/') || (in[i] == '\\') || (in[i] == ':'))

301 
p
&(
ö
[
i
+1]);

305 i‡(
p
 =
NULL
)

306 
p
=
ö
;

307 
n
=
	`°æí
(
p
);

309 #i‡
	`deföed
(
OPENSSL_SYS_NETWARE
)

311 i‡((
n
 > 4Ë&& (
p
[n-4] == '.') &&

312 ((
p
[
n
-3] == 'n') || (p[n-3] == 'N')) &&

313 ((
p
[
n
-2] == 'l') || (p[n-2] == 'L')) &&

314 ((
p
[
n
-1] == 'm') || (p[n-1] == 'M')))

315 
n
-=4;

318 i‡((
n
 > 4Ë&& (
p
[n-4] == '.') &&

319 ((
p
[
n
-3] == 'e') || (p[n-3] == 'E')) &&

320 ((
p
[
n
-2] == 'x') || (p[n-2] == 'X')) &&

321 ((
p
[
n
-1] == 'e') || (p[n-1] == 'E')))

322 
n
-=4;

325 i‡(
n
 > 
size
-1)

326 
n
=
size
-1;

328 
i
=0; i<
n
; i++)

330 i‡((
p
[
i
] >= 'A') && (p[i] <= 'Z'))

331 
out
[
i
]=
p
[i]-'A'+'a';

333 
out
[
i
]=
p
[i];

335 
out
[
n
]='\0';

336 
	}
}

338 #ifde‡
OPENSSL_SYS_VMS


339 
	$¥ogøm_«me
(*
ö
, *
out
, 
size
)

341 *
p
=
ö
, *
q
;

342 *
ch¨s
=":]>";

344 *
ch¨s
 != '\0')

346 
q
=
	`°ºchr
(
p
,*
ch¨s
);

347 i‡(
q
 > 
p
)

348 
p
 = 
q
 + 1;

349 
ch¨s
++;

352 
q
=
	`°ºchr
(
p
,'.');

353 i‡(
q
 =
NULL
)

354 
q
 = 
p
 + 
	`°æí
(p);

355 
	`°∫˝y
(
out
,
p
,
size
-1);

356 i‡(
q
-
p
 >
size
)

358 
out
[
size
-1]='\0';

362 
out
[
q
-
p
]='\0';

364 
	}
}

366 
	$¥ogøm_«me
(*
ö
, *
out
, 
size
)

368 *
p
;

370 
p
=
	`°ºchr
(
ö
,'/');

371 i‡(
p
 !
NULL
)

372 
p
++;

374 
p
=
ö
;

375 
	`BUF_°æ˝y
(
out
,
p
,
size
);

376 
	}
}

380 
	$ch›up_¨gs
(
ARGS
 *
¨g
, *
buf
, *
¨gc
, **
¨gv
[])

382 
num
,
i
;

383 *
p
;

385 *
¨gc
=0;

386 *
¨gv
=
NULL
;

388 
i
=0;

389 i‡(
¨g
->
cou¡
 == 0)

391 
¨g
->
cou¡
=20;

392 
¨g
->
d©a
=(**)
	`OPENSSL_mÆloc
((*)*¨g->
cou¡
);

394 
i
=0; i<
¨g
->
cou¡
; i++)

395 
¨g
->
d©a
[
i
]=
NULL
;

397 
num
=0;

398 
p
=
buf
;

402 i‡(!*
p
) ;

403 *
p
 && ((*p == ' ') || (*p == '\t') || (*p == '\n')))

404 
p
++;

405 i‡(!*
p
) ;

408 i‡(
num
 >
¨g
->
cou¡
)

410 **
tmp_p
;

411 
éí
 = 
¨g
->
cou¡
 + 20;

412 
tmp_p
 = (**)
	`OPENSSL_ªÆloc
(
¨g
->
d©a
,

413 (*)*
éí
);

414 i‡(
tmp_p
 =
NULL
)

416 
¨g
->
d©a
 = 
tmp_p
;

417 
¨g
->
cou¡
 = 
éí
;

419 
i
 = 
num
; i < 
¨g
->
cou¡
; i++)

420 
¨g
->
d©a
[
i
] = 
NULL
;

422 
¨g
->
d©a
[
num
++]=
p
;

425 i‡((*
p
 == '\'') || (*p == '\"'))

427 
i
*(
p
++);

428 
¨g
->
d©a
[
num
-1]++;

429 *
p
 && (*∞!
i
))

430 
p
++;

431 *
p
='\0';

435 *
p
 && ((*p != ' ') &&

436 (*
p
 != '\t') && (*p != '\n')))

437 
p
++;

439 i‡(*
p
 == '\0')

440 
p
--;

442 *
p
='\0';

444 
p
++;

446 *
¨gc
=
num
;

447 *
¨gv
=
¨g
->
d©a
;

449 
	}
}

451 #i‚de‡
APP_INIT


452 
	$≠p_öô
(
mesgwö
)

455 
	}
}

459 
	$dump_˚π_ãxt
 (
BIO
 *
out
, 
X509
 *
x
)

461 *
p
;

463 
p
=
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
x
),
NULL
,0);

464 
	`BIO_puts
(
out
,"subject=");

465 
	`BIO_puts
(
out
,
p
);

466 
	`OPENSSL_‰ì
(
p
);

468 
p
=
	`X509_NAME_⁄ñöe
(
	`X509_gë_issuî_«me
(
x
),
NULL
,0);

469 
	`BIO_puts
(
out
,"\nissuer=");

470 
	`BIO_puts
(
out
,
p
);

471 
	`BIO_puts
(
out
,"\n");

472 
	`OPENSSL_‰ì
(
p
);

475 
	}
}

477 
	$ui_›í
(
UI
 *
ui
)

479  
	`UI_mëhod_gë_›íî
(
	`UI_O≥nSSL
())(
ui
);

480 
	}
}

481 
	$ui_ªad
(
UI
 *
ui
, 
UI_STRING
 *
uis
)

483 i‡(
	`UI_gë_öput_Êags
(
uis
Ë& 
UI_INPUT_FLAG_DEFAULT_PWD


484 && 
	`UI_gë0_u£r_d©a
(
ui
))

486 
	`UI_gë_°rög_ty≥
(
uis
))

488 
UIT_PROMPT
:

489 
UIT_VERIFY
:

491 c⁄° *
∑ssw‹d
 =

492 ((
PW_CB_DATA
 *)
	`UI_gë0_u£r_d©a
(
ui
))->
∑ssw‹d
;

493 i‡(
∑ssw‹d
 &&Öassword[0] != '\0')

495 
	`UI_£t_ªsu…
(
ui
, 
uis
, 
∑ssw‹d
);

503  
	`UI_mëhod_gë_ªadî
(
	`UI_O≥nSSL
())(
ui
, 
uis
);

504 
	}
}

505 
	$ui_wrôe
(
UI
 *
ui
, 
UI_STRING
 *
uis
)

507 i‡(
	`UI_gë_öput_Êags
(
uis
Ë& 
UI_INPUT_FLAG_DEFAULT_PWD


508 && 
	`UI_gë0_u£r_d©a
(
ui
))

510 
	`UI_gë_°rög_ty≥
(
uis
))

512 
UIT_PROMPT
:

513 
UIT_VERIFY
:

515 c⁄° *
∑ssw‹d
 =

516 ((
PW_CB_DATA
 *)
	`UI_gë0_u£r_d©a
(
ui
))->
∑ssw‹d
;

517 i‡(
∑ssw‹d
 &&Öassword[0] != '\0')

524  
	`UI_mëhod_gë_wrôî
(
	`UI_O≥nSSL
())(
ui
, 
uis
);

525 
	}
}

526 
	$ui_˛o£
(
UI
 *
ui
)

528  
	`UI_mëhod_gë_˛o£r
(
	`UI_O≥nSSL
())(
ui
);

529 
	}
}

530 
	$£tup_ui_mëhod
()

532 
ui_mëhod
 = 
	`UI_¸óã_mëhod
("OpenSSLápplication user interface");

533 
	`UI_mëhod_£t_›íî
(
ui_mëhod
, 
ui_›í
);

534 
	`UI_mëhod_£t_ªadî
(
ui_mëhod
, 
ui_ªad
);

535 
	`UI_mëhod_£t_wrôî
(
ui_mëhod
, 
ui_wrôe
);

536 
	`UI_mëhod_£t_˛o£r
(
ui_mëhod
, 
ui_˛o£
);

538 
	}
}

539 
	$de°roy_ui_mëhod
()

541 if(
ui_mëhod
)

543 
	`UI_de°roy_mëhod
(
ui_mëhod
);

544 
ui_mëhod
 = 
NULL
;

546 
	}
}

547 
	$∑ssw‹d_ˇŒback
(*
buf
, 
bufsiz
, 
vîify
,

548 
PW_CB_DATA
 *
cb_tmp
)

550 
UI
 *
ui
 = 
NULL
;

551 
ªs
 = 0;

552 c⁄° *
¥om±_öfo
 = 
NULL
;

553 c⁄° *
∑ssw‹d
 = 
NULL
;

554 
PW_CB_DATA
 *
cb_d©a
 = (PW_CB_DATA *)
cb_tmp
;

556 i‡(
cb_d©a
)

558 i‡(
cb_d©a
->
∑ssw‹d
)

559 
∑ssw‹d
 = 
cb_d©a
->password;

560 i‡(
cb_d©a
->
¥om±_öfo
)

561 
¥om±_öfo
 = 
cb_d©a
->prompt_info;

564 i‡(
∑ssw‹d
)

566 
ªs
 = 
	`°æí
(
∑ssw‹d
);

567 i‡(
ªs
 > 
bufsiz
)

568 
ªs
 = 
bufsiz
;

569 
	`mem˝y
(
buf
, 
∑ssw‹d
, 
ªs
);

570  
ªs
;

573 
ui
 = 
	`UI_√w_mëhod
(
ui_mëhod
);

574 i‡(
ui
)

576 
ok
 = 0;

577 *
buff
 = 
NULL
;

578 
ui_Êags
 = 0;

579 *
¥om±
 = 
NULL
;

581 
¥om±
 = 
	`UI_c⁄°ru˘_¥om±
(
ui
, "passÖhrase",

582 
¥om±_öfo
);

584 
ui_Êags
 |
UI_INPUT_FLAG_DEFAULT_PWD
;

585 
	`UI_˘æ
(
ui
, 
UI_CTRL_PRINT_ERRORS
, 1, 0, 0);

587 i‡(
ok
 >= 0)

588 
ok
 = 
	`UI_add_öput_°rög
(
ui
,
¥om±
,
ui_Êags
,
buf
,

589 
PW_MIN_LENGTH
,
bufsiz
-1);

590 i‡(
ok
 >0 && 
vîify
)

592 
buff
 = (*)
	`OPENSSL_mÆloc
(
bufsiz
);

593 
ok
 = 
	`UI_add_vîify_°rög
(
ui
,
¥om±
,
ui_Êags
,
buff
,

594 
PW_MIN_LENGTH
,
bufsiz
-1, 
buf
);

596 i‡(
ok
 >= 0)

599 
ok
 = 
	`UI_¥o˚ss
(
ui
);

601 
ok
 < 0 && 
	`UI_˘æ
(
ui
, 
UI_CTRL_IS_REDOABLE
, 0, 0, 0));

603 i‡(
buff
)

605 
	`OPENSSL_˛ón£
(
buff
,()
bufsiz
);

606 
	`OPENSSL_‰ì
(
buff
);

609 i‡(
ok
 >= 0)

610 
ªs
 = 
	`°æí
(
buf
);

611 i‡(
ok
 == -1)

613 
	`BIO_¥ötf
(
bio_îr
, "User interfaceÉrror\n");

614 
	`ERR_¥öt_îr‹s
(
bio_îr
);

615 
	`OPENSSL_˛ón£
(
buf
,()
bufsiz
);

616 
ªs
 = 0;

618 i‡(
ok
 == -2)

620 
	`BIO_¥ötf
(
bio_îr
,"aborted!\n");

621 
	`OPENSSL_˛ón£
(
buf
,()
bufsiz
);

622 
ªs
 = 0;

624 
	`UI_‰ì
(
ui
);

625 
	`OPENSSL_‰ì
(
¥om±
);

627  
ªs
;

628 
	}
}

630 *
≠p_gë_∑ss
(
BIO
 *
îr
, *
¨g
, 
kìpbio
);

632 
	$≠p_∑sswd
(
BIO
 *
îr
, *
¨g1
, *
¨g2
, **
∑ss1
, **
∑ss2
)

634 
ßme
;

635 if(!
¨g2
 || !
¨g1
 || 
	`°rcmp
◊rg1,árg2)Ë
ßme
 = 0;

636 
ßme
 = 1;

637 if(
¨g1
) {

638 *
∑ss1
 = 
	`≠p_gë_∑ss
(
îr
, 
¨g1
, 
ßme
);

639 if(!*
∑ss1
)  0;

640 } if(
∑ss1
Ë*∑ss1 = 
NULL
;

641 if(
¨g2
) {

642 *
∑ss2
 = 
	`≠p_gë_∑ss
(
îr
, 
¨g2
, 
ßme
 ? 2 : 0);

643 if(!*
∑ss2
)  0;

644 } if(
∑ss2
Ë*∑ss2 = 
NULL
;

646 
	}
}

648 *
	$≠p_gë_∑ss
(
BIO
 *
îr
, *
¨g
, 
kìpbio
)

650 *
tmp
, 
çass
[
APP_PASS_LEN
];

651 
BIO
 *
pwdbio
 = 
NULL
;

652 
i
;

653 if(!
	`°∫cmp
(
¨g
, "∑ss:", 5)Ë 
	`BUF_°rdup
(arg + 5);

654 if(!
	`°∫cmp
(
¨g
, "env:", 4)) {

655 
tmp
 = 
	`gëív
(
¨g
 + 4);

656 if(!
tmp
) {

657 
	`BIO_¥ötf
(
îr
, "C™'àªadÉnvú⁄míàv¨übÀ %s\n", 
¨g
 + 4);

658  
NULL
;

660  
	`BUF_°rdup
(
tmp
);

662 if(!
kìpbio
 || !
pwdbio
) {

663 if(!
	`°∫cmp
(
¨g
, "file:", 5)) {

664 
pwdbio
 = 
	`BIO_√w_fûe
(
¨g
 + 5, "r");

665 if(!
pwdbio
) {

666 
	`BIO_¥ötf
(
îr
, "C™'à›í fûê%s\n", 
¨g
 + 5);

667  
NULL
;

669 #i‡!
	`deföed
(
_WIN32
)

678 } if(!
	`°∫cmp
(
¨g
, "fd:", 3)) {

679 
BIO
 *
btmp
;

680 
i
 = 
	`©oi
(
¨g
 + 3);

681 if(
i
 >0Ë
pwdbio
 = 
	`BIO_√w_fd
(i, 
BIO_NOCLOSE
);

682 if((
i
 < 0Ë|| !
pwdbio
) {

683 
	`BIO_¥ötf
(
îr
, "C™'àac˚s†fûêdes¸ùt‹ %s\n", 
¨g
 + 3);

684  
NULL
;

687 
btmp
 = 
	`BIO_√w
(
	`BIO_f_buf„r
());

688 
pwdbio
 = 
	`BIO_push
(
btmp
,Öwdbio);

690 } if(!
	`°rcmp
(
¨g
, "stdin")) {

691 
pwdbio
 = 
	`BIO_√w_Â
(
°dö
, 
BIO_NOCLOSE
);

692 if(!
pwdbio
) {

693 
	`BIO_¥ötf
(
îr
, "Can't open BIO for stdin\n");

694  
NULL
;

697 
	`BIO_¥ötf
(
îr
, "InvÆidÖassw‹dárgumíà\"%s\"\n", 
¨g
);

698  
NULL
;

701 
i
 = 
	`BIO_gës
(
pwdbio
, 
çass
, 
APP_PASS_LEN
);

702 if(
kìpbio
 != 1) {

703 
	`BIO_‰ì_Æl
(
pwdbio
);

704 
pwdbio
 = 
NULL
;

706 if(
i
 <= 0) {

707 
	`BIO_¥ötf
(
îr
, "ErrorÑeadingÖassword from BIO\n");

708  
NULL
;

710 
tmp
 = 
	`°rchr
(
çass
, '\n');

711 if(
tmp
) *tmp = 0;

712  
	`BUF_°rdup
(
çass
);

713 
	}
}

715 
	$add_oid_£˘i⁄
(
BIO
 *
îr
, 
CONF
 *
c⁄f
)

717 *
p
;

718 
	`STACK_OF
(
CONF_VALUE
Ë*
sktmp
;

719 
CONF_VALUE
 *
˙f
;

720 
i
;

721 if(!(
p
=
	`NCONF_gë_°rög
(
c⁄f
,
NULL
,"oid_section")))

723 
	`ERR_˛ór_îr‹
();

726 if(!(
sktmp
 = 
	`NCONF_gë_£˘i⁄
(
c⁄f
, 
p
))) {

727 
	`BIO_¥ötf
(
îr
, "¥obÀmÜﬂdög oid se˘i⁄ %s\n", 
p
);

730 
i
 = 0; i < 
	`sk_CONF_VALUE_num
(
sktmp
); i++) {

731 
˙f
 = 
	`sk_CONF_VALUE_vÆue
(
sktmp
, 
i
);

732 if(
	`OBJ_¸óã
(
˙f
->
vÆue
, cnf->
«me
, cnf->«meË=
NID_undef
) {

733 
	`BIO_¥ötf
(
îr
, "problem creating object %s=%s\n",

734 
˙f
->
«me
, cnf->
vÆue
);

739 
	}
}

741 
lﬂd_pkcs12
(
BIO
 *
îr
, BIO *
ö
, c⁄° *
desc
,

742 
≥m_∑ssw‹d_cb
 *
≥m_cb
, *
cb_d©a
,

743 
EVP_PKEY
 **
pkey
, 
X509
 **
˚π
, 
STACK_OF
(X509Ë**
ˇ
)

745 c⁄° *
	g∑ss
;

746 
	gçass
[
PEM_BUFSIZE
];

747 
	gÀn
, 
	gªt
 = 0;

748 
PKCS12
 *
	gp12
;

749 
	gp12
 = 
d2i_PKCS12_bio
(
ö
, 
NULL
);

750 i‡(
	gp12
 =
NULL
)

752 
BIO_¥ötf
(
îr
, "Eº‹Üﬂdög PKCS12 fûêf‹ %s\n", 
desc
);

753 
	gdõ
;

756 i‡(
PKCS12_vîify_mac
(
p12
, "", 0Ë|| PKCS12_vîify_mac’12, 
NULL
, 0))

757 
	g∑ss
 = "";

760 i‡(!
	g≥m_cb
)

761 
	g≥m_cb
 = (
≥m_∑ssw‹d_cb
 *)
∑ssw‹d_ˇŒback
;

762 
	gÀn
 = 
≥m_cb
(
çass
, 
PEM_BUFSIZE
, 0, 
cb_d©a
);

763 i‡(
	gÀn
 < 0)

765 
BIO_¥ötf
(
îr
, "Passpharse callbackÉrror for %s\n",

766 
desc
);

767 
	gdõ
;

769 i‡(
	gÀn
 < 
	gPEM_BUFSIZE
)

770 
	gçass
[
Àn
] = 0;

771 i‡(!
PKCS12_vîify_mac
(
p12
, 
çass
, 
Àn
))

773 
BIO_¥ötf
(
îr
,

774 "Ma¯vîifyÉº‹ (wr⁄gÖassw‹d?Ëö PKCS12 fûêf‹ %s\n", 
desc
);

775 
	gdõ
;

777 
	g∑ss
 = 
çass
;

779 
	gªt
 = 
PKCS12_∑r£
(
p12
, 
∑ss
, 
pkey
, 
˚π
, 
ˇ
);

780 
	gdõ
:

781 i‡(
p12
)

782 
PKCS12_‰ì
(
p12
);

783  
	gªt
;

786 
X509
 *
	$lﬂd_˚π
(
BIO
 *
îr
, c⁄° *
fûe
, 
f‹m©
,

787 c⁄° *
∑ss
, 
ENGINE
 *
e
, c⁄° *
˚π_des¸ù
)

789 
X509
 *
x
=
NULL
;

790 
BIO
 *
˚π
;

792 i‡((
˚π
=
	`BIO_√w
(
	`BIO_s_fûe
())Ë=
NULL
)

794 
	`ERR_¥öt_îr‹s
(
îr
);

795 
íd
;

798 i‡(
fûe
 =
NULL
)

800 #ifde‡
_IONBF


801 #i‚de‡
OPENSSL_NO_SETVBUF_IONBF


802 
	`£tvbuf
(
°dö
, 
NULL
, 
_IONBF
, 0);

805 
	`BIO_£t_Â
(
˚π
,
°dö
,
BIO_NOCLOSE
);

809 i‡(
	`BIO_ªad_fûíame
(
˚π
,
fûe
) <= 0)

811 
	`BIO_¥ötf
(
îr
, "Error opening %s %s\n",

812 
˚π_des¸ù
, 
fûe
);

813 
	`ERR_¥öt_îr‹s
(
îr
);

814 
íd
;

818 i‡(
f‹m©
 =
FORMAT_ASN1
)

819 
x
=
	`d2i_X509_bio
(
˚π
,
NULL
);

820 i‡(
f‹m©
 =
FORMAT_NETSCAPE
)

822 
NETSCAPE_X509
 *
nx
;

823 
nx
=
	`ASN1_ôem_d2i_bio
(
	`ASN1_ITEM_Ωå
(
NETSCAPE_X509
),
˚π
,
NULL
);

824 i‡(
nx
 =
NULL
)

825 
íd
;

827 i‡((
	`°∫cmp
(
NETSCAPE_CERT_HDR
,(*)
nx
->
hódî
->
d©a
,

828 
nx
->
hódî
->
Àngth
) != 0))

830 
	`NETSCAPE_X509_‰ì
(
nx
);

831 
	`BIO_¥ötf
(
îr
,"ErrorÑeading header on certificate\n");

832 
íd
;

834 
x
=
nx
->
˚π
;

835 
nx
->
˚π
 = 
NULL
;

836 
	`NETSCAPE_X509_‰ì
(
nx
);

838 i‡(
f‹m©
 =
FORMAT_PEM
)

839 
x
=
	`PEM_ªad_bio_X509_AUX
(
˚π
,
NULL
,

840 (
≥m_∑ssw‹d_cb
 *)
∑ssw‹d_ˇŒback
, 
NULL
);

841 i‡(
f‹m©
 =
FORMAT_PKCS12
)

843 i‡(!
	`lﬂd_pkcs12
(
îr
, 
˚π
,
˚π_des¸ù
, 
NULL
, NULL,

844 
NULL
, &
x
, NULL))

845 
íd
;

848 
	`BIO_¥ötf
(
îr
,"bad input format specified for %s\n",

849 
˚π_des¸ù
);

850 
íd
;

852 
íd
:

853 i‡(
x
 =
NULL
)

855 
	`BIO_¥ötf
(
îr
,"unableÅoÜoad certificate\n");

856 
	`ERR_¥öt_îr‹s
(
îr
);

858 i‡(
˚π
 !
NULL
Ë
	`BIO_‰ì
(cert);

859 (
x
);

860 
	}
}

862 
EVP_PKEY
 *
	$lﬂd_key
(
BIO
 *
îr
, c⁄° *
fûe
, 
f‹m©
, 
maybe_°dö
,

863 c⁄° *
∑ss
, 
ENGINE
 *
e
, c⁄° *
key_des¸ù
)

865 
BIO
 *
key
=
NULL
;

866 
EVP_PKEY
 *
pkey
=
NULL
;

867 
PW_CB_DATA
 
cb_d©a
;

869 
cb_d©a
.
∑ssw‹d
 = 
∑ss
;

870 
cb_d©a
.
¥om±_öfo
 = 
fûe
;

872 i‡(
fûe
 =
NULL
 && (!
maybe_°dö
 || 
f‹m©
 =
FORMAT_ENGINE
))

874 
	`BIO_¥ötf
(
îr
,"no keyfile specified\n");

875 
íd
;

877 #i‚de‡
OPENSSL_NO_ENGINE


878 i‡(
f‹m©
 =
FORMAT_ENGINE
)

880 i‡(!
e
)

881 
	`BIO_¥ötf
(
îr
,"noÉngine specified\n");

884 
pkey
 = 
	`ENGINE_lﬂd_¥iv©e_key
(
e
, 
fûe
,

885 
ui_mëhod
, &
cb_d©a
);

886 i‡(!
pkey
)

888 
	`BIO_¥ötf
(
îr
,"ˇ¬ŸÜﬂd %†‰omÉngöe\n",
key_des¸ù
);

889 
	`ERR_¥öt_îr‹s
(
îr
);

892 
íd
;

895 
key
=
	`BIO_√w
(
	`BIO_s_fûe
());

896 i‡(
key
 =
NULL
)

898 
	`ERR_¥öt_îr‹s
(
îr
);

899 
íd
;

901 i‡(
fûe
 =
NULL
 && 
maybe_°dö
)

903 #ifde‡
_IONBF


904 #i‚de‡
OPENSSL_NO_SETVBUF_IONBF


905 
	`£tvbuf
(
°dö
, 
NULL
, 
_IONBF
, 0);

908 
	`BIO_£t_Â
(
key
,
°dö
,
BIO_NOCLOSE
);

911 i‡(
	`BIO_ªad_fûíame
(
key
,
fûe
) <= 0)

913 
	`BIO_¥ötf
(
îr
, "Error opening %s %s\n",

914 
key_des¸ù
, 
fûe
);

915 
	`ERR_¥öt_îr‹s
(
îr
);

916 
íd
;

918 i‡(
f‹m©
 =
FORMAT_ASN1
)

920 
pkey
=
	`d2i_Priv©eKey_bio
(
key
, 
NULL
);

922 i‡(
f‹m©
 =
FORMAT_PEM
)

924 
pkey
=
	`PEM_ªad_bio_Priv©eKey
(
key
,
NULL
,

925 (
≥m_∑ssw‹d_cb
 *)
∑ssw‹d_ˇŒback
, &
cb_d©a
);

927 #i‡!
	`deföed
(
OPENSSL_NO_RC4
Ë&& !deföed(
OPENSSL_NO_RSA
)

928 i‡(
f‹m©
 =
FORMAT_NETSCAPE
 || f‹m© =
FORMAT_IISSGC
)

929 
pkey
 = 
	`lﬂd_√tsˇ≥_key
(
îr
, 
key
, 
fûe
, 
key_des¸ù
, 
f‹m©
);

931 i‡(
f‹m©
 =
FORMAT_PKCS12
)

933 i‡(!
	`lﬂd_pkcs12
(
îr
, 
key
, 
key_des¸ù
,

934 (
≥m_∑ssw‹d_cb
 *)
∑ssw‹d_ˇŒback
, &
cb_d©a
,

935 &
pkey
, 
NULL
, NULL))

936 
íd
;

938 #i‡!
	`deföed
(
OPENSSL_NO_RSA
Ë&& !deföed(
OPENSSL_NO_DSA
Ë&& !deföed (
OPENSSL_NO_RC4
)

939 i‡(
f‹m©
 =
FORMAT_MSBLOB
)

940 
pkey
 = 
	`b2i_Priv©eKey_bio
(
key
);

941 i‡(
f‹m©
 =
FORMAT_PVK
)

942 
pkey
 = 
	`b2i_PVK_bio
(
key
, (
≥m_∑ssw‹d_cb
 *)
∑ssw‹d_ˇŒback
,

943 &
cb_d©a
);

947 
	`BIO_¥ötf
(
îr
,"bad input format specified for key file\n");

948 
íd
;

950 
íd
:

951 i‡(
key
 !
NULL
Ë
	`BIO_‰ì
(key);

952 i‡(
pkey
 =
NULL
)

954 
	`BIO_¥ötf
(
îr
,"u«bÀÅÿlﬂd %s\n", 
key_des¸ù
);

955 
	`ERR_¥öt_îr‹s
(
îr
);

957 (
pkey
);

958 
	}
}

960 
EVP_PKEY
 *
	$lﬂd_pubkey
(
BIO
 *
îr
, c⁄° *
fûe
, 
f‹m©
, 
maybe_°dö
,

961 c⁄° *
∑ss
, 
ENGINE
 *
e
, c⁄° *
key_des¸ù
)

963 
BIO
 *
key
=
NULL
;

964 
EVP_PKEY
 *
pkey
=
NULL
;

965 
PW_CB_DATA
 
cb_d©a
;

967 
cb_d©a
.
∑ssw‹d
 = 
∑ss
;

968 
cb_d©a
.
¥om±_öfo
 = 
fûe
;

970 i‡(
fûe
 =
NULL
 && (!
maybe_°dö
 || 
f‹m©
 =
FORMAT_ENGINE
))

972 
	`BIO_¥ötf
(
îr
,"no keyfile specified\n");

973 
íd
;

975 #i‚de‡
OPENSSL_NO_ENGINE


976 i‡(
f‹m©
 =
FORMAT_ENGINE
)

978 i‡(!
e
)

979 
	`BIO_¥ötf
(
bio_îr
,"noÉngine specified\n");

981 
pkey
 = 
	`ENGINE_lﬂd_public_key
(
e
, 
fûe
,

982 
ui_mëhod
, &
cb_d©a
);

983 
íd
;

986 
key
=
	`BIO_√w
(
	`BIO_s_fûe
());

987 i‡(
key
 =
NULL
)

989 
	`ERR_¥öt_îr‹s
(
îr
);

990 
íd
;

992 i‡(
fûe
 =
NULL
 && 
maybe_°dö
)

994 #ifde‡
_IONBF


995 #i‚de‡
OPENSSL_NO_SETVBUF_IONBF


996 
	`£tvbuf
(
°dö
, 
NULL
, 
_IONBF
, 0);

999 
	`BIO_£t_Â
(
key
,
°dö
,
BIO_NOCLOSE
);

1002 i‡(
	`BIO_ªad_fûíame
(
key
,
fûe
) <= 0)

1004 
	`BIO_¥ötf
(
îr
, "Error opening %s %s\n",

1005 
key_des¸ù
, 
fûe
);

1006 
	`ERR_¥öt_îr‹s
(
îr
);

1007 
íd
;

1009 i‡(
f‹m©
 =
FORMAT_ASN1
)

1011 
pkey
=
	`d2i_PUBKEY_bio
(
key
, 
NULL
);

1013 #i‚de‡
OPENSSL_NO_RSA


1014 i‡(
f‹m©
 =
FORMAT_ASN1RSA
)

1016 
RSA
 *
rß
;

1017 
rß
 = 
	`d2i_RSAPublicKey_bio
(
key
, 
NULL
);

1018 i‡(
rß
)

1020 
pkey
 = 
	`EVP_PKEY_√w
();

1021 i‡(
pkey
)

1022 
	`EVP_PKEY_£t1_RSA
(
pkey
, 
rß
);

1023 
	`RSA_‰ì
(
rß
);

1026 
pkey
 = 
NULL
;

1028 i‡(
f‹m©
 =
FORMAT_PEMRSA
)

1030 
RSA
 *
rß
;

1031 
rß
 = 
	`PEM_ªad_bio_RSAPublicKey
(
key
, 
NULL
,

1032 (
≥m_∑ssw‹d_cb
 *)
∑ssw‹d_ˇŒback
, &
cb_d©a
);

1033 i‡(
rß
)

1035 
pkey
 = 
	`EVP_PKEY_√w
();

1036 i‡(
pkey
)

1037 
	`EVP_PKEY_£t1_RSA
(
pkey
, 
rß
);

1038 
	`RSA_‰ì
(
rß
);

1041 
pkey
 = 
NULL
;

1044 i‡(
f‹m©
 =
FORMAT_PEM
)

1046 
pkey
=
	`PEM_ªad_bio_PUBKEY
(
key
,
NULL
,

1047 (
≥m_∑ssw‹d_cb
 *)
∑ssw‹d_ˇŒback
, &
cb_d©a
);

1049 #i‡!
	`deföed
(
OPENSSL_NO_RC4
Ë&& !deföed(
OPENSSL_NO_RSA
)

1050 i‡(
f‹m©
 =
FORMAT_NETSCAPE
 || f‹m© =
FORMAT_IISSGC
)

1051 
pkey
 = 
	`lﬂd_√tsˇ≥_key
(
îr
, 
key
, 
fûe
, 
key_des¸ù
, 
f‹m©
);

1053 #i‡!
	`deföed
(
OPENSSL_NO_RSA
Ë&& !deföed(
OPENSSL_NO_DSA
)

1054 i‡(
f‹m©
 =
FORMAT_MSBLOB
)

1055 
pkey
 = 
	`b2i_PublicKey_bio
(
key
);

1059 
	`BIO_¥ötf
(
îr
,"bad input format specified for key file\n");

1060 
íd
;

1062 
íd
:

1063 i‡(
key
 !
NULL
Ë
	`BIO_‰ì
(key);

1064 i‡(
pkey
 =
NULL
)

1065 
	`BIO_¥ötf
(
îr
,"u«bÀÅÿlﬂd %s\n", 
key_des¸ù
);

1066 (
pkey
);

1067 
	}
}

1069 #i‡!
deföed
(
OPENSSL_NO_RC4
Ë&& !deföed(
OPENSSL_NO_RSA
)

1070 
EVP_PKEY
 *

1071 
	$lﬂd_√tsˇ≥_key
(
BIO
 *
îr
, BIO *
key
, c⁄° *
fûe
,

1072 c⁄° *
key_des¸ù
, 
f‹m©
)

1074 
EVP_PKEY
 *
pkey
;

1075 
BUF_MEM
 *
buf
;

1076 
RSA
 *
rß
;

1077 c⁄° *
p
;

1078 
size
, 
i
;

1080 
buf
=
	`BUF_MEM_√w
();

1081 
pkey
 = 
	`EVP_PKEY_√w
();

1082 
size
 = 0;

1083 i‡(
buf
 =
NULL
 || 
pkey
 == NULL)

1084 
îr‹
;

1087 i‡(!
	`BUF_MEM_grow_˛ón
(
buf
,
size
+1024*10))

1088 
îr‹
;

1089 
i
 = 
	`BIO_ªad
(
key
, &(
buf
->
d©a
[
size
]), 1024*10);

1090 
size
 +
i
;

1091 i‡(
i
 == 0)

1093 i‡(
i
 < 0)

1095 
	`BIO_¥ötf
(
îr
, "ErrorÑeading %s %s",

1096 
key_des¸ù
, 
fûe
);

1097 
îr‹
;

1100 
p
=(*)
buf
->
d©a
;

1101 
rß
 = 
	`d2i_RSA_NET
(
NULL
,&
p
,()
size
,NULL,

1102 (
f‹m©
 =
FORMAT_IISSGC
 ? 1 : 0));

1103 i‡(
rß
 =
NULL
)

1104 
îr‹
;

1105 
	`BUF_MEM_‰ì
(
buf
);

1106 
	`EVP_PKEY_£t1_RSA
(
pkey
, 
rß
);

1107  
pkey
;

1108 
îr‹
:

1109 
	`BUF_MEM_‰ì
(
buf
);

1110 
	`EVP_PKEY_‰ì
(
pkey
);

1111  
NULL
;

1112 
	}
}

1115 
lﬂd_˚πs_¸ls
(
BIO
 *
îr
, c⁄° *
fûe
, 
f‹m©
,

1116 c⁄° *
∑ss
, 
ENGINE
 *
e
, c⁄° *
desc
,

1117 
STACK_OF
(
X509
Ë**
p˚πs
, STACK_OF(
X509_CRL
Ë**
p¸ls
)

1119 
	gi
;

1120 
BIO
 *
	gbio
;

1121 
STACK_OF
(
X509_INFO
Ë*
	gxis
 = 
NULL
;

1122 
X509_INFO
 *
	gxi
;

1123 
PW_CB_DATA
 
	gcb_d©a
;

1124 
	grv
 = 0;

1126 
	gcb_d©a
.
	g∑ssw‹d
 = 
∑ss
;

1127 
	gcb_d©a
.
	g¥om±_öfo
 = 
fûe
;

1129 i‡(
	gf‹m©
 !
FORMAT_PEM
)

1131 
BIO_¥ötf
(
îr
,"bad i≈uàf‹m© s≥cifõd f‹ %s\n", 
desc
);

1135 i‡(
	gfûe
 =
NULL
)

1136 
bio
 = 
BIO_√w_Â
(
°dö
,
BIO_NOCLOSE
);

1138 
	gbio
 = 
BIO_√w_fûe
(
fûe
, "r");

1140 i‡(
	gbio
 =
NULL
)

1142 
BIO_¥ötf
(
îr
, "Error opening %s %s\n",

1143 
desc
, 
fûe
 ? file : "stdin");

1144 
ERR_¥öt_îr‹s
(
îr
);

1148 
	gxis
 = 
PEM_X509_INFO_ªad_bio
(
bio
, 
NULL
,

1149 (
≥m_∑ssw‹d_cb
 *)
∑ssw‹d_ˇŒback
, &
cb_d©a
);

1151 
BIO_‰ì
(
bio
);

1153 i‡(
	gp˚πs
)

1155 *
	gp˚πs
 = 
sk_X509_√w_nuŒ
();

1156 i‡(!*
	gp˚πs
)

1157 
	gíd
;

1160 i‡(
	gp¸ls
)

1162 *
	gp¸ls
 = 
sk_X509_CRL_√w_nuŒ
();

1163 i‡(!*
	gp¸ls
)

1164 
	gíd
;

1167 
	gi
 = 0; i < 
sk_X509_INFO_num
(
xis
); i++)

1169 
	gxi
 = 
sk_X509_INFO_vÆue
 (
xis
, 
i
);

1170 i‡(
	gxi
->
	gx509
 && 
	gp˚πs
)

1172 i‡(!
sk_X509_push
(*
p˚πs
, 
xi
->
x509
))

1173 
	gíd
;

1174 
	gxi
->
	gx509
 = 
NULL
;

1176 i‡(
	gxi
->
	g¸l
 && 
	gp¸ls
)

1178 i‡(!
sk_X509_CRL_push
(*
p¸ls
, 
xi
->
¸l
))

1179 
	gíd
;

1180 
	gxi
->
	g¸l
 = 
NULL
;

1184 i‡(
	gp˚πs
 && 
sk_X509_num
(*
p˚πs
) > 0)

1185 
	grv
 = 1;

1187 i‡(
	gp¸ls
 && 
sk_X509_CRL_num
(*
p¸ls
) > 0)

1188 
	grv
 = 1;

1190 
	gíd
:

1192 i‡(
xis
)

1193 
sk_X509_INFO_p›_‰ì
(
xis
, 
X509_INFO_‰ì
);

1195 i‡(
	grv
 == 0)

1197 i‡(
p˚πs
)

1199 
sk_X509_p›_‰ì
(*
p˚πs
, 
X509_‰ì
);

1200 *
	gp˚πs
 = 
NULL
;

1202 i‡(
	gp¸ls
)

1204 
sk_X509_CRL_p›_‰ì
(*
p¸ls
, 
X509_CRL_‰ì
);

1205 *
	gp¸ls
 = 
NULL
;

1207 
BIO_¥ötf
(
îr
,"unableÅoÜoad %s\n",

1208 
p˚πs
 ? "certificates" : "CRLs");

1209 
ERR_¥öt_îr‹s
(
îr
);

1211  
	grv
;

1214 
STACK_OF
(
X509
Ë*
	$lﬂd_˚πs
(
BIO
 *
îr
, c⁄° *
fûe
, 
f‹m©
,

1215 c⁄° *
∑ss
, 
ENGINE
 *
e
, c⁄° *
desc
)

1217 
	`STACK_OF
(
X509
Ë*
˚πs
;

1218 i‡(!
	`lﬂd_˚πs_¸ls
(
îr
, 
fûe
, 
f‹m©
, 
∑ss
, 
e
, 
desc
, &
˚πs
, 
NULL
))

1219  
NULL
;

1220  
˚πs
;

1221 
	}
}

1223 
STACK_OF
(
X509_CRL
Ë*
	$lﬂd_¸ls
(
BIO
 *
îr
, c⁄° *
fûe
, 
f‹m©
,

1224 c⁄° *
∑ss
, 
ENGINE
 *
e
, c⁄° *
desc
)

1226 
	`STACK_OF
(
X509_CRL
Ë*
¸ls
;

1227 i‡(!
	`lﬂd_˚πs_¸ls
(
îr
, 
fûe
, 
f‹m©
, 
∑ss
, 
e
, 
desc
, 
NULL
, &
¸ls
))

1228  
NULL
;

1229  
¸ls
;

1230 
	}
}

1232 
	#X509V3_EXT_UNKNOWN_MASK
 (0xfL << 16)

	)

1234 
	#X509V3_EXT_DEFAULT
 0

	)

1236 
	#X509V3_EXT_ERROR_UNKNOWN
 (1L << 16)

	)

1238 
	#X509V3_EXT_PARSE_UNKNOWN
 (2L << 16)

	)

1240 
	#X509V3_EXT_DUMP_UNKNOWN
 (3L << 16)

	)

1242 
	#X509_FLAG_CA
 (
X509_FLAG_NO_ISSUER
 | 
X509_FLAG_NO_PUBKEY
 | \

1243 
X509_FLAG_NO_HEADER
 | 
X509_FLAG_NO_VERSION
)

	)

1245 
	$£t_˚π_ex
(*
Êags
, c⁄° *
¨g
)

1247 c⁄° 
NAME_EX_TBL
 
˚π_tbl
[] = {

1248 { "com∑tibÀ", 
X509_FLAG_COMPAT
, 0xffffffffl},

1249 { "ˇ_deÁu…", 
X509_FLAG_CA
, 0xffffffffl},

1250 { "no_hódî", 
X509_FLAG_NO_HEADER
, 0},

1251 { "no_vîsi⁄", 
X509_FLAG_NO_VERSION
, 0},

1252 { "no_£rül", 
X509_FLAG_NO_SERIAL
, 0},

1253 { "no_sig«me", 
X509_FLAG_NO_SIGNAME
, 0},

1254 { "no_vÆidôy", 
X509_FLAG_NO_VALIDITY
, 0},

1255 { "no_subje˘", 
X509_FLAG_NO_SUBJECT
, 0},

1256 { "no_issuî", 
X509_FLAG_NO_ISSUER
, 0},

1257 { "no_pubkey", 
X509_FLAG_NO_PUBKEY
, 0},

1258 { "no_exãnsi⁄s", 
X509_FLAG_NO_EXTENSIONS
, 0},

1259 { "no_sigdump", 
X509_FLAG_NO_SIGDUMP
, 0},

1260 { "no_aux", 
X509_FLAG_NO_AUX
, 0},

1261 { "no_©åibuãs", 
X509_FLAG_NO_ATTRIBUTES
, 0},

1262 { "ext_deÁu…", 
X509V3_EXT_DEFAULT
, 
X509V3_EXT_UNKNOWN_MASK
},

1263 { "ext_îr‹", 
X509V3_EXT_ERROR_UNKNOWN
, 
X509V3_EXT_UNKNOWN_MASK
},

1264 { "ext_∑r£", 
X509V3_EXT_PARSE_UNKNOWN
, 
X509V3_EXT_UNKNOWN_MASK
},

1265 { "ext_dump", 
X509V3_EXT_DUMP_UNKNOWN
, 
X509V3_EXT_UNKNOWN_MASK
},

1266 { 
NULL
, 0, 0}

1268  
	`£t_mu…i_›ts
(
Êags
, 
¨g
, 
˚π_tbl
);

1269 
	}
}

1271 
	$£t_«me_ex
(*
Êags
, c⁄° *
¨g
)

1273 c⁄° 
NAME_EX_TBL
 
ex_tbl
[] = {

1274 { "esc_2253", 
ASN1_STRFLGS_ESC_2253
, 0},

1275 { "esc_˘æ", 
ASN1_STRFLGS_ESC_CTRL
, 0},

1276 { "esc_msb", 
ASN1_STRFLGS_ESC_MSB
, 0},

1277 { "u£_quŸe", 
ASN1_STRFLGS_ESC_QUOTE
, 0},

1278 { "utf8", 
ASN1_STRFLGS_UTF8_CONVERT
, 0},

1279 { "ign‹e_ty≥", 
ASN1_STRFLGS_IGNORE_TYPE
, 0},

1280 { "show_ty≥", 
ASN1_STRFLGS_SHOW_TYPE
, 0},

1281 { "dump_Æl", 
ASN1_STRFLGS_DUMP_ALL
, 0},

1282 { "dump_no°r", 
ASN1_STRFLGS_DUMP_UNKNOWN
, 0},

1283 { "dump_dî", 
ASN1_STRFLGS_DUMP_DER
, 0},

1284 { "com∑t", 
XN_FLAG_COMPAT
, 0xffffffffL},

1285 { "£p_comma_∂us", 
XN_FLAG_SEP_COMMA_PLUS
, 
XN_FLAG_SEP_MASK
},

1286 { "£p_comma_∂us_•a˚", 
XN_FLAG_SEP_CPLUS_SPC
, 
XN_FLAG_SEP_MASK
},

1287 { "£p_£mi_∂us_•a˚", 
XN_FLAG_SEP_SPLUS_SPC
, 
XN_FLAG_SEP_MASK
},

1288 { "£p_mu…ûöe", 
XN_FLAG_SEP_MULTILINE
, 
XN_FLAG_SEP_MASK
},

1289 { "dn_ªv", 
XN_FLAG_DN_REV
, 0},

1290 { "no‚ame", 
XN_FLAG_FN_NONE
, 
XN_FLAG_FN_MASK
},

1291 { "¢ame", 
XN_FLAG_FN_SN
, 
XN_FLAG_FN_MASK
},

1292 { " ame", 
XN_FLAG_FN_LN
, 
XN_FLAG_FN_MASK
},

1293 { "Æign", 
XN_FLAG_FN_ALIGN
, 0},

1294 { "oid", 
XN_FLAG_FN_OID
, 
XN_FLAG_FN_MASK
},

1295 { "•a˚_eq", 
XN_FLAG_SPC_EQ
, 0},

1296 { "dump_unknown", 
XN_FLAG_DUMP_UNKNOWN_FIELDS
, 0},

1297 { "RFC2253", 
XN_FLAG_RFC2253
, 0xffffffffL},

1298 { "⁄ñöe", 
XN_FLAG_ONELINE
, 0xffffffffL},

1299 { "mu…ûöe", 
XN_FLAG_MULTILINE
, 0xffffffffL},

1300 { "ˇ_deÁu…", 
XN_FLAG_MULTILINE
, 0xffffffffL},

1301 { 
NULL
, 0, 0}

1303  
	`£t_mu…i_›ts
(
Êags
, 
¨g
, 
ex_tbl
);

1304 
	}
}

1306 
	$£t_ext_c›y
(*
c›y_ty≥
, c⁄° *
¨g
)

1308 i‡(!
	`°rˇ£cmp
(
¨g
, "none"))

1309 *
c›y_ty≥
 = 
EXT_COPY_NONE
;

1310 i‡(!
	`°rˇ£cmp
(
¨g
, "copy"))

1311 *
c›y_ty≥
 = 
EXT_COPY_ADD
;

1312 i‡(!
	`°rˇ£cmp
(
¨g
, "copyall"))

1313 *
c›y_ty≥
 = 
EXT_COPY_ALL
;

1317 
	}
}

1319 
	$c›y_exãnsi⁄s
(
X509
 *
x
, 
X509_REQ
 *
ªq
, 
c›y_ty≥
)

1321 
	`STACK_OF
(
X509_EXTENSION
Ë*
exts
 = 
NULL
;

1322 
X509_EXTENSION
 *
ext
, *
tm≥xt
;

1323 
ASN1_OBJECT
 *
obj
;

1324 
i
, 
idx
, 
ªt
 = 0;

1325 i‡(!
x
 || !
ªq
 || (
c›y_ty≥
 =
EXT_COPY_NONE
))

1327 
exts
 = 
	`X509_REQ_gë_exãnsi⁄s
(
ªq
);

1329 
i
 = 0; i < 
	`sk_X509_EXTENSION_num
(
exts
); i++) {

1330 
ext
 = 
	`sk_X509_EXTENSION_vÆue
(
exts
, 
i
);

1331 
obj
 = 
	`X509_EXTENSION_gë_obje˘
(
ext
);

1332 
idx
 = 
	`X509_gë_ext_by_OBJ
(
x
, 
obj
, -1);

1334 i‡(
idx
 != -1) {

1336 i‡(
c›y_ty≥
 =
EXT_COPY_ADD
)

1340 
tm≥xt
 = 
	`X509_gë_ext
(
x
, 
idx
);

1341 
	`X509_dñëe_ext
(
x
, 
idx
);

1342 
	`X509_EXTENSION_‰ì
(
tm≥xt
);

1343 
idx
 = 
	`X509_gë_ext_by_OBJ
(
x
, 
obj
, -1);

1344 } 
idx
 != -1);

1346 i‡(!
	`X509_add_ext
(
x
, 
ext
, -1))

1347 
íd
;

1350 
ªt
 = 1;

1352 
íd
:

1354 
	`sk_X509_EXTENSION_p›_‰ì
(
exts
, 
X509_EXTENSION_‰ì
);

1356  
ªt
;

1357 
	}
}

1362 
	$£t_mu…i_›ts
(*
Êags
, c⁄° *
¨g
, c⁄° 
NAME_EX_TBL
 *
ö_tbl
)

1364 
	`STACK_OF
(
CONF_VALUE
Ë*
vÆs
;

1365 
CONF_VALUE
 *
vÆ
;

1366 
i
, 
ªt
 = 1;

1367 if(!
¨g
)  0;

1368 
vÆs
 = 
	`X509V3_∑r£_li°
(
¨g
);

1369 
i
 = 0; i < 
	`sk_CONF_VALUE_num
(
vÆs
); i++) {

1370 
vÆ
 = 
	`sk_CONF_VALUE_vÆue
(
vÆs
, 
i
);

1371 i‡(!
	`£t_èbÀ_›ts
(
Êags
, 
vÆ
->
«me
, 
ö_tbl
))

1372 
ªt
 = 0;

1374 
	`sk_CONF_VALUE_p›_‰ì
(
vÆs
, 
X509V3_c⁄f_‰ì
);

1375  
ªt
;

1376 
	}
}

1378 
	$£t_èbÀ_›ts
(*
Êags
, c⁄° *
¨g
, c⁄° 
NAME_EX_TBL
 *
ö_tbl
)

1380 
c
;

1381 c⁄° 
NAME_EX_TBL
 *
±bl
;

1382 
c
 = 
¨g
[0];

1384 if(
c
 == '-') {

1385 
c
 = 0;

1386 
¨g
++;

1387 } i‡(
c
 == '+') {

1388 
c
 = 1;

1389 
¨g
++;

1390 } 
c
 = 1;

1392 
±bl
 = 
ö_tbl
;Ötbl->
«me
;Ötbl++) {

1393 if(!
	`°rˇ£cmp
(
¨g
, 
±bl
->
«me
)) {

1394 *
Êags
 &~
±bl
->
mask
;

1395 if(
c
Ë*
Êags
 |
±bl
->
Êag
;

1396 *
Êags
 &~
±bl
->
Êag
;

1401 
	}
}

1403 
	$¥öt_«me
(
BIO
 *
out
, c⁄° *
tôÀ
, 
X509_NAME
 *
nm
, 
lÊags
)

1405 *
buf
;

1406 
mlöe
 = 0;

1407 
ödít
 = 0;

1409 if(
tôÀ
Ë
	`BIO_puts
(
out
,Åitle);

1410 if((
lÊags
 & 
XN_FLAG_SEP_MASK
Ë=
XN_FLAG_SEP_MULTILINE
) {

1411 
mlöe
 = 1;

1412 
ödít
 = 4;

1414 if(
lÊags
 =
XN_FLAG_COMPAT
) {

1415 
buf
 = 
	`X509_NAME_⁄ñöe
(
nm
, 0, 0);

1416 
	`BIO_puts
(
out
, 
buf
);

1417 
	`BIO_puts
(
out
, "\n");

1418 
	`OPENSSL_‰ì
(
buf
);

1420 if(
mlöe
Ë
	`BIO_puts
(
out
, "\n");

1421 
	`X509_NAME_¥öt_ex
(
out
, 
nm
, 
ödít
, 
lÊags
);

1422 
	`BIO_puts
(
out
, "\n");

1424 
	}
}

1426 
X509_STORE
 *
	$£tup_vîify
(
BIO
 *
bp
, *
CAfûe
, *
CA∑th
)

1428 
X509_STORE
 *
°‹e
;

1429 
X509_LOOKUP
 *
lookup
;

1430 if(!(
°‹e
 = 
	`X509_STORE_√w
())Ë
íd
;

1431 
lookup
=
	`X509_STORE_add_lookup
(
°‹e
,
	`X509_LOOKUP_fûe
());

1432 i‡(
lookup
 =
NULL
Ë
íd
;

1433 i‡(
CAfûe
) {

1434 if(!
	`X509_LOOKUP_lﬂd_fûe
(
lookup
,
CAfûe
,
X509_FILETYPE_PEM
)) {

1435 
	`BIO_¥ötf
(
bp
, "Eº‹Üﬂdög fûê%s\n", 
CAfûe
);

1436 
íd
;

1438 } 
	`X509_LOOKUP_lﬂd_fûe
(
lookup
,
NULL
,
X509_FILETYPE_DEFAULT
);

1440 
lookup
=
	`X509_STORE_add_lookup
(
°‹e
,
	`X509_LOOKUP_hash_dú
());

1441 i‡(
lookup
 =
NULL
Ë
íd
;

1442 i‡(
CA∑th
) {

1443 if(!
	`X509_LOOKUP_add_dú
(
lookup
,
CA∑th
,
X509_FILETYPE_PEM
)) {

1444 
	`BIO_¥ötf
(
bp
, "Eº‹Üﬂdög dúe˘‹y %s\n", 
CA∑th
);

1445 
íd
;

1447 } 
	`X509_LOOKUP_add_dú
(
lookup
,
NULL
,
X509_FILETYPE_DEFAULT
);

1449 
	`ERR_˛ór_îr‹
();

1450  
°‹e
;

1451 
íd
:

1452 
	`X509_STORE_‰ì
(
°‹e
);

1453  
NULL
;

1454 
	}
}

1456 #i‚de‡
OPENSSL_NO_ENGINE


1458 
ENGINE
 *
	$åy_lﬂd_ígöe
(
BIO
 *
îr
, c⁄° *
ígöe
, 
debug
)

1460 
ENGINE
 *
e
 = 
	`ENGINE_by_id
("dynamic");

1461 i‡(
e
)

1463 i‡(!
	`ENGINE_˘æ_cmd_°rög
(
e
, "SO_PATH", 
ígöe
, 0)

1464 || !
	`ENGINE_˘æ_cmd_°rög
(
e
, "LOAD", 
NULL
, 0))

1466 
	`ENGINE_‰ì
(
e
);

1467 
e
 = 
NULL
;

1470  
e
;

1471 
	}
}

1473 
ENGINE
 *
	$£tup_ígöe
(
BIO
 *
îr
, c⁄° *
ígöe
, 
debug
)

1475 
ENGINE
 *
e
 = 
NULL
;

1477 i‡(
ígöe
)

1479 if(
	`°rcmp
(
ígöe
, "auto") == 0)

1481 
	`BIO_¥ötf
(
îr
,"enablingáuto ENGINE support\n");

1482 
	`ENGINE_ªgi°î_Æl_com∂ëe
();

1483  
NULL
;

1485 if((
e
 = 
	`ENGINE_by_id
(
ígöe
)Ë=
NULL


1486 && (
e
 = 
	`åy_lﬂd_ígöe
(
îr
, 
ígöe
, 
debug
)Ë=
NULL
)

1488 
	`BIO_¥ötf
(
îr
,"övÆidÉngöê\"%s\"\n", 
ígöe
);

1489 
	`ERR_¥öt_îr‹s
(
îr
);

1490  
NULL
;

1492 i‡(
debug
)

1494 
	`ENGINE_˘æ
(
e
, 
ENGINE_CTRL_SET_LOGSTREAM
,

1495 0, 
îr
, 0);

1497 
	`ENGINE_˘æ_cmd
(
e
, "SET_USER_INTERFACE", 0, 
ui_mëhod
, 0, 1);

1498 if(!
	`ENGINE_£t_deÁu…
(
e
, 
ENGINE_METHOD_ALL
))

1500 
	`BIO_¥ötf
(
îr
,"can't useÅhatÉngine\n");

1501 
	`ERR_¥öt_îr‹s
(
îr
);

1502 
	`ENGINE_‰ì
(
e
);

1503  
NULL
;

1506 
	`BIO_¥ötf
(
îr
,"ígöê\"%s\" së.\n", 
	`ENGINE_gë_id
(
e
));

1509 
	`ENGINE_‰ì
(
e
);

1511  
e
;

1512 
	}
}

1515 
	$lﬂd_c⁄fig
(
BIO
 *
îr
, 
CONF
 *
˙f
)

1517 
lﬂd_c⁄fig_ˇŒed
 = 0;

1518 i‡(
lﬂd_c⁄fig_ˇŒed
)

1520 
lﬂd_c⁄fig_ˇŒed
 = 1;

1521 i‡(!
˙f
)

1522 
˙f
 = 
c⁄fig
;

1523 i‡(!
˙f
)

1526 
	`OPENSSL_lﬂd_buûtö_moduÀs
();

1528 i‡(
	`CONF_moduÀs_lﬂd
(
˙f
, 
NULL
, 0) <= 0)

1530 
	`BIO_¥ötf
(
îr
, "Error configuring OpenSSL\n");

1531 
	`ERR_¥öt_îr‹s
(
îr
);

1535 
	}
}

1537 *
	$make_c⁄fig_«me
()

1539 c⁄° *
t
=
	`X509_gë_deÁu…_˚π_¨ó
();

1540 
size_t
 
Àn
;

1541 *
p
;

1543 
Àn
=
	`°æí
(
t
)+°æí(
OPENSSL_CONF
)+2;

1544 
p
=
	`OPENSSL_mÆloc
(
Àn
);

1545 
	`BUF_°æ˝y
(
p
,
t
,
Àn
);

1546 #i‚de‡
OPENSSL_SYS_VMS


1547 
	`BUF_°æˇt
(
p
,"/",
Àn
);

1549 
	`BUF_°æˇt
(
p
,
OPENSSL_CONF
,
Àn
);

1551  
p
;

1552 
	}
}

1554 
	$ödex_£rül_hash
(c⁄° 
OPENSSL_CSTRING
 *
a
)

1556 c⁄° *
n
;

1558 
n
=
a
[
DB_£rül
];

1559 *
n
 == '0')Ç++;

1560 (
	`lh_°rhash
(
n
));

1561 
	}
}

1563 
	$ödex_£rül_cmp
(c⁄° 
OPENSSL_CSTRING
 *
a
, c⁄° OPENSSL_CSTRING *
b
)

1565 c⁄° *
Ø
,*
bb
;

1567 
Ø
=
a
[
DB_£rül
]; *aa == '0';áa++);

1568 
bb
=
b
[
DB_£rül
]; *bb == '0'; bb++);

1569 (
	`°rcmp
(
Ø
,
bb
));

1570 
	}
}

1572 
	$ödex_«me_quÆ
(**
a
)

1573 { (
a
[0][0] ='V'); 
	}
}

1575 
	$ödex_«me_hash
(c⁄° 
OPENSSL_CSTRING
 *
a
)

1576 { (
	`lh_°rhash
(
a
[
DB_«me
])); 
	}
}

1578 
	$ödex_«me_cmp
(c⁄° 
OPENSSL_CSTRING
 *
a
, c⁄° OPENSSL_CSTRING *
b
)

1579 { (
	`°rcmp
(
a
[
DB_«me
], 
b
[DB_«me])); 
	}
}

1581 
	$IMPLEMENT_LHASH_HASH_FN
(
ödex_£rül
, 
OPENSSL_CSTRING
)

1582 
	$IMPLEMENT_LHASH_COMP_FN
(
ödex_£rül
, 
OPENSSL_CSTRING
)

1583 
	$IMPLEMENT_LHASH_HASH_FN
(
ödex_«me
, 
OPENSSL_CSTRING
)

1584 
	$IMPLEMENT_LHASH_COMP_FN
(
ödex_«me
, 
OPENSSL_CSTRING
)

1586 #unde‡
BSIZE


1587 
	#BSIZE
 256

	)

1589 
BIGNUM
 *
	$lﬂd_£rül
(*
£rülfûe
, 
¸óã
, 
ASN1_INTEGER
 **
ªèi
)

1591 
BIO
 *
ö
=
NULL
;

1592 
BIGNUM
 *
ªt
=
NULL
;

1593 
MS_STATIC
 
buf
[1024];

1594 
ASN1_INTEGER
 *
ai
=
NULL
;

1596 
ai
=
	`ASN1_INTEGER_√w
();

1597 i‡(
ai
 =
NULL
Ë
îr
;

1599 i‡((
ö
=
	`BIO_√w
(
	`BIO_s_fûe
())Ë=
NULL
)

1601 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1602 
îr
;

1605 i‡(
	`BIO_ªad_fûíame
(
ö
,
£rülfûe
) <= 0)

1607 i‡(!
¸óã
)

1609 
	`≥º‹
(
£rülfûe
);

1610 
îr
;

1614 
ªt
=
	`BN_√w
();

1615 i‡(
ªt
 =
NULL
 || !
	`ønd_£rül
‘ë, 
ai
))

1616 
	`BIO_¥ötf
(
bio_îr
, "Out of memory\n");

1621 i‡(!
	`a2i_ASN1_INTEGER
(
ö
,
ai
,
buf
,1024))

1623 
	`BIO_¥ötf
(
bio_îr
,"unableÅoÜoadÇumber from %s\n",

1624 
£rülfûe
);

1625 
îr
;

1627 
ªt
=
	`ASN1_INTEGER_to_BN
(
ai
,
NULL
);

1628 i‡(
ªt
 =
NULL
)

1630 
	`BIO_¥ötf
(
bio_îr
,"error convertingÇumber from binÅo BIGNUM\n");

1631 
îr
;

1635 i‡(
ªt
 && 
ªèi
)

1637 *
ªèi
 = 
ai
;

1638 
ai
 = 
NULL
;

1640 
îr
:

1641 i‡(
ö
 !
NULL
Ë
	`BIO_‰ì
(in);

1642 i‡(
ai
 !
NULL
Ë
	`ASN1_INTEGER_‰ì
(ai);

1643 (
ªt
);

1644 
	}
}

1646 
	$ßve_£rül
(*
£rülfûe
, *
suffix
, 
BIGNUM
 *
£rül
, 
ASN1_INTEGER
 **
ªèi
)

1648 
buf
[1][
BSIZE
];

1649 
BIO
 *
out
 = 
NULL
;

1650 
ªt
=0;

1651 
ASN1_INTEGER
 *
ai
=
NULL
;

1652 
j
;

1654 i‡(
suffix
 =
NULL
)

1655 
j
 = 
	`°æí
(
£rülfûe
);

1657 
j
 = 
	`°æí
(
£rülfûe
Ë+ såÀn(
suffix
) + 1;

1658 i‡(
j
 >
BSIZE
)

1660 
	`BIO_¥ötf
(
bio_îr
,"fileÇameÅooÜong\n");

1661 
îr
;

1664 i‡(
suffix
 =
NULL
)

1665 
	`BUF_°æ˝y
(
buf
[0], 
£rülfûe
, 
BSIZE
);

1668 #i‚de‡
OPENSSL_SYS_VMS


1669 
j
 = 
	`BIO_¢¥ötf
(
buf
[0],  buf[0], "%s.%s", 
£rülfûe
, 
suffix
);

1671 
j
 = 
	`BIO_¢¥ötf
(
buf
[0],  buf[0], "%s-%s", 
£rülfûe
, 
suffix
);

1674 #ifde‡
RL_DEBUG


1675 
	`BIO_¥ötf
(
bio_îr
, "DEBUG: wrôög \"%s\"\n", 
buf
[0]);

1677 
out
=
	`BIO_√w
(
	`BIO_s_fûe
());

1678 i‡(
out
 =
NULL
)

1680 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1681 
îr
;

1683 i‡(
	`BIO_wrôe_fûíame
(
out
,
buf
[0]) <= 0)

1685 
	`≥º‹
(
£rülfûe
);

1686 
îr
;

1689 i‡((
ai
=
	`BN_to_ASN1_INTEGER
(
£rül
,
NULL
)) == NULL)

1691 
	`BIO_¥ötf
(
bio_îr
,"error converting serialÅo ASN.1 format\n");

1692 
îr
;

1694 
	`i2a_ASN1_INTEGER
(
out
,
ai
);

1695 
	`BIO_puts
(
out
,"\n");

1696 
ªt
=1;

1697 i‡(
ªèi
)

1699 *
ªèi
 = 
ai
;

1700 
ai
 = 
NULL
;

1702 
îr
:

1703 i‡(
out
 !
NULL
Ë
	`BIO_‰ì_Æl
(out);

1704 i‡(
ai
 !
NULL
Ë
	`ASN1_INTEGER_‰ì
(ai);

1705 (
ªt
);

1706 
	}
}

1708 
	$rŸ©e_£rül
(*
£rülfûe
, *
√w_suffix
, *
ﬁd_suffix
)

1710 
buf
[5][
BSIZE
];

1711 
i
,
j
;

1713 
i
 = 
	`°æí
(
£rülfûe
Ë+ såÀn(
ﬁd_suffix
);

1714 
j
 = 
	`°æí
(
£rülfûe
Ë+ såÀn(
√w_suffix
);

1715 i‡(
i
 > 
j
) j = i;

1716 i‡(
j
 + 1 >
BSIZE
)

1718 
	`BIO_¥ötf
(
bio_îr
,"fileÇameÅooÜong\n");

1719 
îr
;

1722 #i‚de‡
OPENSSL_SYS_VMS


1723 
j
 = 
	`BIO_¢¥ötf
(
buf
[0],  buf[0], "%s.%s",

1724 
£rülfûe
, 
√w_suffix
);

1726 
j
 = 
	`BIO_¢¥ötf
(
buf
[0],  buf[0], "%s-%s",

1727 
£rülfûe
, 
√w_suffix
);

1729 #i‚de‡
OPENSSL_SYS_VMS


1730 
j
 = 
	`BIO_¢¥ötf
(
buf
[1],  buf[1], "%s.%s",

1731 
£rülfûe
, 
ﬁd_suffix
);

1733 
j
 = 
	`BIO_¢¥ötf
(
buf
[1],  buf[1], "%s-%s",

1734 
£rülfûe
, 
ﬁd_suffix
);

1736 #ifde‡
RL_DEBUG


1737 
	`BIO_¥ötf
(
bio_îr
, "DEBUG:Ñenaming \"%s\"Åo \"%s\"\n",

1738 
£rülfûe
, 
buf
[1]);

1740 i‡(
	`ª«me
(
£rülfûe
,
buf
[1]Ë< 0 && 
î∫o
 !
ENOENT


1741 #ifde‡
ENOTDIR


1742 && 
î∫o
 !
ENOTDIR


1745 
	`BIO_¥ötf
(
bio_îr
,

1747 
£rülfûe
, 
buf
[1]);

1748 
	`≥º‹
("reason");

1749 
îr
;

1751 #ifde‡
RL_DEBUG


1752 
	`BIO_¥ötf
(
bio_îr
, "DEBUG:Ñenaming \"%s\"Åo \"%s\"\n",

1753 
buf
[0],
£rülfûe
);

1755 i‡(
	`ª«me
(
buf
[0],
£rülfûe
) < 0)

1757 
	`BIO_¥ötf
(
bio_îr
,

1759 
buf
[0],
£rülfûe
);

1760 
	`≥º‹
("reason");

1761 
	`ª«me
(
buf
[1],
£rülfûe
);

1762 
îr
;

1765 
îr
:

1767 
	}
}

1769 
	$ønd_£rül
(
BIGNUM
 *
b
, 
ASN1_INTEGER
 *
ai
)

1771 
BIGNUM
 *
btmp
;

1772 
ªt
 = 0;

1773 i‡(
b
)

1774 
btmp
 = 
b
;

1776 
btmp
 = 
	`BN_√w
();

1778 i‡(!
btmp
)

1781 i‡(!
	`BN_p£udo_ønd
(
btmp
, 
SERIAL_RAND_BITS
, 0, 0))

1782 
îr‹
;

1783 i‡(
ai
 && !
	`BN_to_ASN1_INTEGER
(
btmp
,ái))

1784 
îr‹
;

1786 
ªt
 = 1;

1788 
îr‹
:

1790 i‡(!
b
)

1791 
	`BN_‰ì
(
btmp
);

1793  
ªt
;

1794 
	}
}

1796 
CA_DB
 *
	$lﬂd_ödex
(*
dbfûe
, 
DB_ATTR
 *
db_©å
)

1798 
CA_DB
 *
ªtdb
 = 
NULL
;

1799 
TXT_DB
 *
tmpdb
 = 
NULL
;

1800 
BIO
 *
ö
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

1801 
CONF
 *
db©å_c⁄f
 = 
NULL
;

1802 
buf
[1][
BSIZE
];

1803 
îr‹löe
= -1;

1805 i‡(
ö
 =
NULL
)

1807 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1808 
îr
;

1810 i‡(
	`BIO_ªad_fûíame
(
ö
,
dbfûe
) <= 0)

1812 
	`≥º‹
(
dbfûe
);

1813 
	`BIO_¥ötf
(
bio_îr
,"u«bÀÅÿ›í '%s'\n",
dbfûe
);

1814 
îr
;

1816 i‡((
tmpdb
 = 
	`TXT_DB_ªad
(
ö
,
DB_NUMBER
)Ë=
NULL
)

1817 
îr
;

1819 #i‚de‡
OPENSSL_SYS_VMS


1820 
	`BIO_¢¥ötf
(
buf
[0],  buf[0], "%s.©å", 
dbfûe
);

1822 
	`BIO_¢¥ötf
(
buf
[0],  buf[0], "%s-©å", 
dbfûe
);

1824 
db©å_c⁄f
 = 
	`NCONF_√w
(
NULL
);

1825 i‡(
	`NCONF_lﬂd
(
db©å_c⁄f
,
buf
[0],&
îr‹löe
) <= 0)

1827 i‡(
îr‹löe
 > 0)

1829 
	`BIO_¥ötf
(
bio_îr
,

1831 ,
îr‹löe
,
buf
[0]);

1832 
îr
;

1836 
	`NCONF_‰ì
(
db©å_c⁄f
);

1837 
db©å_c⁄f
 = 
NULL
;

1841 i‡((
ªtdb
 = 
	`OPENSSL_mÆloc
((
CA_DB
))Ë=
NULL
)

1843 
	`Ârötf
(
°dîr
, "Out of memory\n");

1844 
îr
;

1847 
ªtdb
->
db
 = 
tmpdb
;

1848 
tmpdb
 = 
NULL
;

1849 i‡(
db_©å
)

1850 
ªtdb
->
©åibuãs
 = *
db_©å
;

1853 
ªtdb
->
©åibuãs
.
unique_subje˘
 = 1;

1856 i‡(
db©å_c⁄f
)

1858 *
p
 = 
	`NCONF_gë_°rög
(
db©å_c⁄f
,
NULL
,"unique_subject");

1859 i‡(
p
)

1861 #ifde‡
RL_DEBUG


1862 
	`BIO_¥ötf
(
bio_îr
, "DEBUG[lﬂd_ödex]: unique_subje˘ = \"%s\"\n", 
p
);

1864 
ªtdb
->
©åibuãs
.
unique_subje˘
 = 
	`∑r£_ye¢o
(
p
,1);

1868 
îr
:

1869 i‡(
db©å_c⁄f
Ë
	`NCONF_‰ì
(dbattr_conf);

1870 i‡(
tmpdb
Ë
	`TXT_DB_‰ì
(tmpdb);

1871 i‡(
ö
Ë
	`BIO_‰ì_Æl
(in);

1872  
ªtdb
;

1873 
	}
}

1875 
	$ödex_ödex
(
CA_DB
 *
db
)

1877 i‡(!
	`TXT_DB_¸óã_ödex
(
db
->db, 
DB_£rül
, 
NULL
,

1878 
	`LHASH_HASH_FN
(
ödex_£rül
),

1879 
	`LHASH_COMP_FN
(
ödex_£rül
)))

1881 
	`BIO_¥ötf
(
bio_îr
,

1883 
db
->db->
îr‹
,db->db->
¨g1
,db->db->
¨g2
);

1887 i‡(
db
->
©åibuãs
.
unique_subje˘


1888 && !
	`TXT_DB_¸óã_ödex
(
db
->db, 
DB_«me
, 
ödex_«me_quÆ
,

1889 
	`LHASH_HASH_FN
(
ödex_«me
),

1890 
	`LHASH_COMP_FN
(
ödex_«me
)))

1892 
	`BIO_¥ötf
(
bio_îr
,"error creatingÇame index:(%ld,%ld,%ld)\n",

1893 
db
->db->
îr‹
,db->db->
¨g1
,db->db->
¨g2
);

1897 
	}
}

1899 
	$ßve_ödex
(c⁄° *
dbfûe
, c⁄° *
suffix
, 
CA_DB
 *
db
)

1901 
buf
[3][
BSIZE
];

1902 
BIO
 *
out
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

1903 
j
;

1905 i‡(
out
 =
NULL
)

1907 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1908 
îr
;

1911 
j
 = 
	`°æí
(
dbfûe
Ë+ såÀn(
suffix
);

1912 i‡(
j
 + 6 >
BSIZE
)

1914 
	`BIO_¥ötf
(
bio_îr
,"fileÇameÅooÜong\n");

1915 
îr
;

1918 #i‚de‡
OPENSSL_SYS_VMS


1919 
j
 = 
	`BIO_¢¥ötf
(
buf
[2],  buf[2], "%s.©å", 
dbfûe
);

1921 
j
 = 
	`BIO_¢¥ötf
(
buf
[2],  buf[2], "%s-©å", 
dbfûe
);

1923 #i‚de‡
OPENSSL_SYS_VMS


1924 
j
 = 
	`BIO_¢¥ötf
(
buf
[1],  buf[1], "%s.©å.%s", 
dbfûe
, 
suffix
);

1926 
j
 = 
	`BIO_¢¥ötf
(
buf
[1],  buf[1], "%s-©å-%s", 
dbfûe
, 
suffix
);

1928 #i‚de‡
OPENSSL_SYS_VMS


1929 
j
 = 
	`BIO_¢¥ötf
(
buf
[0],  buf[0], "%s.%s", 
dbfûe
, 
suffix
);

1931 
j
 = 
	`BIO_¢¥ötf
(
buf
[0],  buf[0], "%s-%s", 
dbfûe
, 
suffix
);

1933 #ifde‡
RL_DEBUG


1934 
	`BIO_¥ötf
(
bio_îr
, "DEBUG: wrôög \"%s\"\n", 
buf
[0]);

1936 i‡(
	`BIO_wrôe_fûíame
(
out
,
buf
[0]) <= 0)

1938 
	`≥º‹
(
dbfûe
);

1939 
	`BIO_¥ötf
(
bio_îr
,"u«bÀÅÿ›í '%s'\n", 
dbfûe
);

1940 
îr
;

1942 
j
=
	`TXT_DB_wrôe
(
out
,
db
->db);

1943 i‡(
j
 <0Ë
îr
;

1945 
	`BIO_‰ì
(
out
);

1947 
out
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

1948 #ifde‡
RL_DEBUG


1949 
	`BIO_¥ötf
(
bio_îr
, "DEBUG: wrôög \"%s\"\n", 
buf
[1]);

1951 i‡(
	`BIO_wrôe_fûíame
(
out
,
buf
[1]) <= 0)

1953 
	`≥º‹
(
buf
[2]);

1954 
	`BIO_¥ötf
(
bio_îr
,"u«bÀÅÿ›í '%s'\n", 
buf
[2]);

1955 
îr
;

1957 
	`BIO_¥ötf
(
out
,"unique_subject = %s\n",

1958 
db
->
©åibuãs
.
unique_subje˘
 ? "yes" : "no");

1959 
	`BIO_‰ì
(
out
);

1962 
îr
:

1964 
	}
}

1966 
	$rŸ©e_ödex
(c⁄° *
dbfûe
, c⁄° *
√w_suffix
, c⁄° *
ﬁd_suffix
)

1968 
buf
[5][
BSIZE
];

1969 
i
,
j
;

1971 
i
 = 
	`°æí
(
dbfûe
Ë+ såÀn(
ﬁd_suffix
);

1972 
j
 = 
	`°æí
(
dbfûe
Ë+ såÀn(
√w_suffix
);

1973 i‡(
i
 > 
j
) j = i;

1974 i‡(
j
 + 6 >
BSIZE
)

1976 
	`BIO_¥ötf
(
bio_îr
,"fileÇameÅooÜong\n");

1977 
îr
;

1980 #i‚de‡
OPENSSL_SYS_VMS


1981 
j
 = 
	`BIO_¢¥ötf
(
buf
[4],  buf[4], "%s.©å", 
dbfûe
);

1983 
j
 = 
	`BIO_¢¥ötf
(
buf
[4],  buf[4], "%s-©å", 
dbfûe
);

1985 #i‚de‡
OPENSSL_SYS_VMS


1986 
j
 = 
	`BIO_¢¥ötf
(
buf
[2],  buf[2], "%s.attr.%s",

1987 
dbfûe
, 
√w_suffix
);

1989 
j
 = 
	`BIO_¢¥ötf
(
buf
[2],  buf[2], "%s-attr-%s",

1990 
dbfûe
, 
√w_suffix
);

1992 #i‚de‡
OPENSSL_SYS_VMS


1993 
j
 = 
	`BIO_¢¥ötf
(
buf
[0],  buf[0], "%s.%s",

1994 
dbfûe
, 
√w_suffix
);

1996 
j
 = 
	`BIO_¢¥ötf
(
buf
[0],  buf[0], "%s-%s",

1997 
dbfûe
, 
√w_suffix
);

1999 #i‚de‡
OPENSSL_SYS_VMS


2000 
j
 = 
	`BIO_¢¥ötf
(
buf
[1],  buf[1], "%s.%s",

2001 
dbfûe
, 
ﬁd_suffix
);

2003 
j
 = 
	`BIO_¢¥ötf
(
buf
[1],  buf[1], "%s-%s",

2004 
dbfûe
, 
ﬁd_suffix
);

2006 #i‚de‡
OPENSSL_SYS_VMS


2007 
j
 = 
	`BIO_¢¥ötf
(
buf
[3],  buf[3], "%s.attr.%s",

2008 
dbfûe
, 
ﬁd_suffix
);

2010 
j
 = 
	`BIO_¢¥ötf
(
buf
[3],  buf[3], "%s-attr-%s",

2011 
dbfûe
, 
ﬁd_suffix
);

2013 #ifde‡
RL_DEBUG


2014 
	`BIO_¥ötf
(
bio_îr
, "DEBUG:Ñenaming \"%s\"Åo \"%s\"\n",

2015 
dbfûe
, 
buf
[1]);

2017 i‡(
	`ª«me
(
dbfûe
,
buf
[1]Ë< 0 && 
î∫o
 !
ENOENT


2018 #ifde‡
ENOTDIR


2019 && 
î∫o
 !
ENOTDIR


2022 
	`BIO_¥ötf
(
bio_îr
,

2024 
dbfûe
, 
buf
[1]);

2025 
	`≥º‹
("reason");

2026 
îr
;

2028 #ifde‡
RL_DEBUG


2029 
	`BIO_¥ötf
(
bio_îr
, "DEBUG:Ñenaming \"%s\"Åo \"%s\"\n",

2030 
buf
[0],
dbfûe
);

2032 i‡(
	`ª«me
(
buf
[0],
dbfûe
) < 0)

2034 
	`BIO_¥ötf
(
bio_îr
,

2036 
buf
[0],
dbfûe
);

2037 
	`≥º‹
("reason");

2038 
	`ª«me
(
buf
[1],
dbfûe
);

2039 
îr
;

2041 #ifde‡
RL_DEBUG


2042 
	`BIO_¥ötf
(
bio_îr
, "DEBUG:Ñenaming \"%s\"Åo \"%s\"\n",

2043 
buf
[4],buf[3]);

2045 i‡(
	`ª«me
(
buf
[4],buf[3]Ë< 0 && 
î∫o
 !
ENOENT


2046 #ifde‡
ENOTDIR


2047 && 
î∫o
 !
ENOTDIR


2050 
	`BIO_¥ötf
(
bio_îr
,

2052 
buf
[4], buf[3]);

2053 
	`≥º‹
("reason");

2054 
	`ª«me
(
dbfûe
,
buf
[0]);

2055 
	`ª«me
(
buf
[1],
dbfûe
);

2056 
îr
;

2058 #ifde‡
RL_DEBUG


2059 
	`BIO_¥ötf
(
bio_îr
, "DEBUG:Ñenaming \"%s\"Åo \"%s\"\n",

2060 
buf
[2],buf[4]);

2062 i‡(
	`ª«me
(
buf
[2],buf[4]) < 0)

2064 
	`BIO_¥ötf
(
bio_îr
,

2066 
buf
[2],buf[4]);

2067 
	`≥º‹
("reason");

2068 
	`ª«me
(
buf
[3],buf[4]);

2069 
	`ª«me
(
dbfûe
,
buf
[0]);

2070 
	`ª«me
(
buf
[1],
dbfûe
);

2071 
îr
;

2074 
îr
:

2076 
	}
}

2078 
	$‰ì_ödex
(
CA_DB
 *
db
)

2080 i‡(
db
)

2082 i‡(
db
->dbË
	`TXT_DB_‰ì
(db->db);

2083 
	`OPENSSL_‰ì
(
db
);

2085 
	}
}

2087 
	$∑r£_ye¢o
(c⁄° *
°r
, 
def
)

2089 
ªt
 = 
def
;

2090 i‡(
°r
)

2092 *
°r
)

2099 
ªt
 = 0;

2106 
ªt
 = 1;

2109 
ªt
 = 
def
;

2113  
ªt
;

2114 
	}
}

2120 
X509_NAME
 *
	$∑r£_«me
(*
subje˘
, 
chty≥
, 
mu…údn
)

2122 
size_t
 
buÊí
 = 
	`°æí
(
subje˘
)+1;

2123 *
buf
 = 
	`OPENSSL_mÆloc
(
buÊí
);

2124 
size_t
 
max_√
 = 
buÊí
 / 2 + 1;

2125 **
√_ty≥s
 = 
	`OPENSSL_mÆloc
(
max_√
 *  (*));

2126 **
√_vÆues
 = 
	`OPENSSL_mÆloc
(
max_√
 *  (*));

2127 *
mvÆ
 = 
	`OPENSSL_mÆloc
 (
max_√
 *  ());

2129 *
•
 = 
subje˘
, *
bp
 = 
buf
;

2130 
i
, 
√_num
 = 0;

2132 
X509_NAME
 *
n
 = 
NULL
;

2133 
nid
;

2135 i‡(!
buf
 || !
√_ty≥s
 || !
√_vÆues
 || !
mvÆ
)

2137 
	`BIO_¥ötf
(
bio_îr
, "mallocÉrror\n");

2138 
îr‹
;

2141 i‡(*
subje˘
 != '/')

2143 
	`BIO_¥ötf
(
bio_îr
, "Subject doesÇot start with '/'.\n");

2144 
îr‹
;

2146 
•
++;

2149 
mvÆ
[
√_num
] = 0;

2151 *
•
)

2154 
√_ty≥s
[
√_num
] = 
bp
;

2155 *
•
)

2157 i‡(*
•
 == '\\')

2159 i‡(*++
•
)

2160 *
bp
++ = *
•
++;

2163 
	`BIO_¥ötf
(
bio_îr
, "escape characterátÉnd of string\n");

2164 
îr‹
;

2167 i‡(*
•
 == '=')

2169 
•
++;

2170 *
bp
++ = '\0';

2174 *
bp
++ = *
•
++;

2176 i‡(!*
•
)

2178 
	`BIO_¥ötf
(
bio_îr
, "íd o‡°rögÉncou¡îed whûê¥o˚ssögÅy≥ o‡subje˘Çamêñemíà#%d\n", 
√_num
);

2179 
îr‹
;

2181 
√_vÆues
[
√_num
] = 
bp
;

2182 *
•
)

2184 i‡(*
•
 == '\\')

2186 i‡(*++
•
)

2187 *
bp
++ = *
•
++;

2190 
	`BIO_¥ötf
(
bio_îr
, "escape characterátÉnd of string\n");

2191 
îr‹
;

2194 i‡(*
•
 == '/')

2196 
•
++;

2198 
mvÆ
[
√_num
+1] = 0;

2201 i‡(*
•
 ='+' && 
mu…údn
)

2204 
•
++;

2205 
mvÆ
[
√_num
+1] = -1;

2209 *
bp
++ = *
•
++;

2211 *
bp
++ = '\0';

2212 
√_num
++;

2215 i‡(!(
n
 = 
	`X509_NAME_√w
()))

2216 
îr‹
;

2218 
i
 = 0; i < 
√_num
; i++)

2220 i‡((
nid
=
	`OBJ_txt2nid
(
√_ty≥s
[
i
])Ë=
NID_undef
)

2222 
	`BIO_¥ötf
(
bio_îr
, "Subje˘ Aâribuã %†ha†nÿknow¿NID, skù≥d\n", 
√_ty≥s
[
i
]);

2226 i‡(!*
√_vÆues
[
i
])

2228 
	`BIO_¥ötf
(
bio_îr
, "NÿvÆuê¥ovided f‹ Subje˘ Aâribuã %s, skù≥d\n", 
√_ty≥s
[
i
]);

2232 i‡(!
	`X509_NAME_add_íåy_by_NID
(
n
, 
nid
, 
chty≥
, (*)
√_vÆues
[
i
], -1,-1,
mvÆ
[i]))

2233 
îr‹
;

2236 
	`OPENSSL_‰ì
(
√_vÆues
);

2237 
	`OPENSSL_‰ì
(
√_ty≥s
);

2238 
	`OPENSSL_‰ì
(
buf
);

2239 
	`OPENSSL_‰ì
(
mvÆ
);

2240  
n
;

2242 
îr‹
:

2243 
	`X509_NAME_‰ì
(
n
);

2244 i‡(
√_vÆues
)

2245 
	`OPENSSL_‰ì
(
√_vÆues
);

2246 i‡(
√_ty≥s
)

2247 
	`OPENSSL_‰ì
(
√_ty≥s
);

2248 i‡(
mvÆ
)

2249 
	`OPENSSL_‰ì
(
mvÆ
);

2250 i‡(
buf
)

2251 
	`OPENSSL_‰ì
(
buf
);

2252  
NULL
;

2253 
	}
}

2255 
	$¨gs_vîify
(***
∑rgs
, *
∑rgc
,

2256 *
bad¨g
, 
BIO
 *
îr
, 
X509_VERIFY_PARAM
 **
pm
)

2258 
ASN1_OBJECT
 *
Ÿmp
 = 
NULL
;

2259 
Êags
 = 0;

2260 
i
;

2261 
puΩo£
 = 0, 
dïth
 = -1;

2262 **
ﬁd¨gs
 = *
∑rgs
;

2263 *
¨g
 = **
∑rgs
, *
¨gn
 = (*pargs)[1];

2264 
time_t
 
©_time
 = 0;

2265 i‡(!
	`°rcmp
(
¨g
, "-policy"))

2267 i‡(!
¨gn
)

2268 *
bad¨g
 = 1;

2271 
Ÿmp
 = 
	`OBJ_txt2obj
(
¨gn
, 0);

2272 i‡(!
Ÿmp
)

2274 
	`BIO_¥ötf
(
îr
, "Invalid Policy \"%s\"\n",

2275 
¨gn
);

2276 *
bad¨g
 = 1;

2279 (*
∑rgs
)++;

2281 i‡(
	`°rcmp
(
¨g
,"-purpose") == 0)

2283 
X509_PURPOSE
 *
x±mp
;

2284 i‡(!
¨gn
)

2285 *
bad¨g
 = 1;

2288 
i
 = 
	`X509_PURPOSE_gë_by_¢ame
(
¨gn
);

2289 if(
i
 < 0)

2291 
	`BIO_¥ötf
(
îr
, "unrecognizedÖurpose\n");

2292 *
bad¨g
 = 1;

2296 
x±mp
 = 
	`X509_PURPOSE_gë0
(
i
);

2297 
puΩo£
 = 
	`X509_PURPOSE_gë_id
(
x±mp
);

2300 (*
∑rgs
)++;

2302 i‡(
	`°rcmp
(
¨g
,"-verify_depth") == 0)

2304 i‡(!
¨gn
)

2305 *
bad¨g
 = 1;

2308 
dïth
 = 
	`©oi
(
¨gn
);

2309 if(
dïth
 < 0)

2311 
	`BIO_¥ötf
(
îr
, "invalid depth\n");

2312 *
bad¨g
 = 1;

2315 (*
∑rgs
)++;

2317 i‡(
	`°rcmp
(
¨g
,"-attime") == 0)

2319 i‡(!
¨gn
)

2320 *
bad¨g
 = 1;

2323 
time°amp
;

2326 i‡(
	`ssˇnf
(
¨gn
, "%li", &
time°amp
) != 1)

2328 
	`BIO_¥ötf
(
bio_îr
,

2330 
¨gn
);

2331 *
bad¨g
 = 1;

2334 
©_time
 = (
time_t
Ë
time°amp
;

2336 (*
∑rgs
)++;

2338 i‡(!
	`°rcmp
(
¨g
, "-ignore_critical"))

2339 
Êags
 |
X509_V_FLAG_IGNORE_CRITICAL
;

2340 i‡(!
	`°rcmp
(
¨g
, "-issuer_checks"))

2341 
Êags
 |
X509_V_FLAG_CB_ISSUER_CHECK
;

2342 i‡(!
	`°rcmp
(
¨g
, "-crl_check"))

2343 
Êags
 |
X509_V_FLAG_CRL_CHECK
;

2344 i‡(!
	`°rcmp
(
¨g
, "-crl_check_all"))

2345 
Êags
 |
X509_V_FLAG_CRL_CHECK
|
X509_V_FLAG_CRL_CHECK_ALL
;

2346 i‡(!
	`°rcmp
(
¨g
, "-policy_check"))

2347 
Êags
 |
X509_V_FLAG_POLICY_CHECK
;

2348 i‡(!
	`°rcmp
(
¨g
, "-explicit_policy"))

2349 
Êags
 |
X509_V_FLAG_EXPLICIT_POLICY
;

2350 i‡(!
	`°rcmp
(
¨g
, "-inhibit_any"))

2351 
Êags
 |
X509_V_FLAG_INHIBIT_ANY
;

2352 i‡(!
	`°rcmp
(
¨g
, "-inhibit_map"))

2353 
Êags
 |
X509_V_FLAG_INHIBIT_MAP
;

2354 i‡(!
	`°rcmp
(
¨g
, "-x509_strict"))

2355 
Êags
 |
X509_V_FLAG_X509_STRICT
;

2356 i‡(!
	`°rcmp
(
¨g
, "-extended_crl"))

2357 
Êags
 |
X509_V_FLAG_EXTENDED_CRL_SUPPORT
;

2358 i‡(!
	`°rcmp
(
¨g
, "-use_deltas"))

2359 
Êags
 |
X509_V_FLAG_USE_DELTAS
;

2360 i‡(!
	`°rcmp
(
¨g
, "-policy_print"))

2361 
Êags
 |
X509_V_FLAG_NOTIFY_POLICY
;

2362 i‡(!
	`°rcmp
(
¨g
, "-check_ss_sig"))

2363 
Êags
 |
X509_V_FLAG_CHECK_SS_SIGNATURE
;

2367 i‡(*
bad¨g
)

2369 i‡(*
pm
)

2370 
	`X509_VERIFY_PARAM_‰ì
(*
pm
);

2371 *
pm
 = 
NULL
;

2372 
íd
;

2375 i‡(!*
pm
 && !(*pm = 
	`X509_VERIFY_PARAM_√w
()))

2377 *
bad¨g
 = 1;

2378 
íd
;

2381 i‡(
Ÿmp
)

2382 
	`X509_VERIFY_PARAM_add0_pﬁicy
(*
pm
, 
Ÿmp
);

2383 i‡(
Êags
)

2384 
	`X509_VERIFY_PARAM_£t_Êags
(*
pm
, 
Êags
);

2386 i‡(
puΩo£
)

2387 
	`X509_VERIFY_PARAM_£t_puΩo£
(*
pm
, 
puΩo£
);

2389 i‡(
dïth
 >= 0)

2390 
	`X509_VERIFY_PARAM_£t_dïth
(*
pm
, 
dïth
);

2392 i‡(
©_time
)

2393 
	`X509_VERIFY_PARAM_£t_time
(*
pm
, 
©_time
);

2395 
íd
:

2397 (*
∑rgs
)++;

2399 i‡(
∑rgc
)

2400 *
∑rgc
 -*
∑rgs
 - 
ﬁd¨gs
;

2404 
	}
}

2410 
	$bio_to_mem
(**
out
, 
maxÀn
, 
BIO
 *
ö
)

2412 
BIO
 *
mem
;

2413 
Àn
, 
ªt
;

2414 
tbuf
[1024];

2415 
mem
 = 
	`BIO_√w
(
	`BIO_s_mem
());

2416 i‡(!
mem
)

2420 i‡((
maxÀn
 != -1) && maxlen < 1024)

2421 
Àn
 = 
maxÀn
;

2423 
Àn
 = 1024;

2424 
Àn
 = 
	`BIO_ªad
(
ö
, 
tbuf
,Üen);

2425 i‡(
Àn
 <= 0)

2427 i‡(
	`BIO_wrôe
(
mem
, 
tbuf
, 
Àn
) !=Üen)

2429 
	`BIO_‰ì
(
mem
);

2432 
maxÀn
 -
Àn
;

2434 i‡(
maxÀn
 == 0)

2437 
ªt
 = 
	`BIO_gë_mem_d©a
(
mem
, (**)
out
);

2438 
	`BIO_£t_Êags
(
mem
, 
BIO_FLAGS_MEM_RDONLY
);

2439 
	`BIO_‰ì
(
mem
);

2440  
ªt
;

2441 
	}
}

2443 
	$pkey_˘æ_°rög
(
EVP_PKEY_CTX
 *
˘x
, *
vÆue
)

2445 
rv
;

2446 *
°mp
, *
vtmp
 = 
NULL
;

2447 
°mp
 = 
	`BUF_°rdup
(
vÆue
);

2448 i‡(!
°mp
)

2450 
vtmp
 = 
	`°rchr
(
°mp
, ':');

2451 i‡(
vtmp
)

2453 *
vtmp
 = 0;

2454 
vtmp
++;

2456 
rv
 = 
	`EVP_PKEY_CTX_˘æ_°r
(
˘x
, 
°mp
, 
vtmp
);

2457 
	`OPENSSL_‰ì
(
°mp
);

2458  
rv
;

2459 
	}
}

2461 
nodes_¥öt
(
BIO
 *
out
, c⁄° *
«me
,

2462 
STACK_OF
(
X509_POLICY_NODE
Ë*
nodes
)

2464 
X509_POLICY_NODE
 *
	gnode
;

2465 
	gi
;

2466 
BIO_¥ötf
(
out
, "%†Pﬁicõs:", 
«me
);

2467 i‡(
	gnodes
)

2469 
BIO_puts
(
out
, "\n");

2470 
	gi
 = 0; i < 
sk_X509_POLICY_NODE_num
(
nodes
); i++)

2472 
	gnode
 = 
sk_X509_POLICY_NODE_vÆue
(
nodes
, 
i
);

2473 
X509_POLICY_NODE_¥öt
(
out
, 
node
, 2);

2477 
BIO_puts
(
out
, " <empty>\n");

2480 
	$pﬁicõs_¥öt
(
BIO
 *
out
, 
X509_STORE_CTX
 *
˘x
)

2482 
X509_POLICY_TREE
 *
åì
;

2483 
ex∂icô_pﬁicy
;

2484 
‰ì_out
 = 0;

2485 i‡(
out
 =
NULL
)

2487 
out
 = 
	`BIO_√w_Â
(
°dîr
, 
BIO_NOCLOSE
);

2488 
‰ì_out
 = 1;

2490 
åì
 = 
	`X509_STORE_CTX_gë0_pﬁicy_åì
(
˘x
);

2491 
ex∂icô_pﬁicy
 = 
	`X509_STORE_CTX_gë_ex∂icô_pﬁicy
(
˘x
);

2493 
	`BIO_¥ötf
(
out
, "RequireÉxplicit Policy: %s\n",

2494 
ex∂icô_pﬁicy
 ? "True" : "False");

2496 
	`nodes_¥öt
(
out
, "Auth‹ôy", 
	`X509_pﬁicy_åì_gë0_pﬁicõs
(
åì
));

2497 
	`nodes_¥öt
(
out
, "U£r", 
	`X509_pﬁicy_åì_gë0_u£r_pﬁicõs
(
åì
));

2498 i‡(
‰ì_out
)

2499 
	`BIO_‰ì
(
out
);

2500 
	}
}

2502 #i‡!
deföed
(
OPENSSL_NO_JPAKE
Ë&& !deföed(
OPENSSL_NO_PSK
)

2504 
JPAKE_CTX
 *
	$j∑ke_öô
(c⁄° *
us
, c⁄° *
them
,

2505 c⁄° *
£¸ë
)

2507 
BIGNUM
 *
p
 = 
NULL
;

2508 
BIGNUM
 *
g
 = 
NULL
;

2509 
BIGNUM
 *
q
 = 
NULL
;

2510 
BIGNUM
 *
bn£¸ë
 = 
	`BN_√w
();

2511 
JPAKE_CTX
 *
˘x
;

2514 
	`BN_hex2bn
(&
p
, "F9E5B365665EA7A05A9C534502780FEE6F1AB5BD4F49947FD036DBD7E905269AF46EF28B0FC07487EE4F5D20FB3C0AF8E700F3A2FA3414970CBED44FEDFF80CE78D800F184BB82435D137AADA2C6C16523247930A63B85661D1FC817A51ACD96168E95898A1F83A79FFB529368AA7833ABD1B0C3AEDDB14D2E1A2F71D99F763F");

2515 
g
 = 
	`BN_√w
();

2516 
	`BN_£t_w‹d
(
g
, 2);

2517 
q
 = 
	`BN_√w
();

2518 
	`BN_rshi·1
(
q
, 
p
);

2520 
	`BN_bö2bn
((c⁄° *)
£¸ë
, 
	`°æí
(£¸ë), 
bn£¸ë
);

2522 
˘x
 = 
	`JPAKE_CTX_√w
(
us
, 
them
, 
p
, 
g
, 
q
, 
bn£¸ë
);

2523 
	`BN_‰ì
(
bn£¸ë
);

2524 
	`BN_‰ì
(
q
);

2525 
	`BN_‰ì
(
g
);

2526 
	`BN_‰ì
(
p
);

2528  
˘x
;

2529 
	}
}

2531 
	$j∑ke_£nd_∑π
(
BIO
 *
c⁄n
, c⁄° 
JPAKE_STEP_PART
 *
p
)

2533 
	`BN_¥öt
(
c⁄n
, 
p
->
gx
);

2534 
	`BIO_puts
(
c⁄n
, "\n");

2535 
	`BN_¥öt
(
c⁄n
, 
p
->
zkpx
.
gr
);

2536 
	`BIO_puts
(
c⁄n
, "\n");

2537 
	`BN_¥öt
(
c⁄n
, 
p
->
zkpx
.
b
);

2538 
	`BIO_puts
(
c⁄n
, "\n");

2539 
	}
}

2541 
	$j∑ke_£nd_°ï1
(
BIO
 *
bc⁄n
, 
JPAKE_CTX
 *
˘x
)

2543 
JPAKE_STEP1
 
s1
;

2545 
	`JPAKE_STEP1_öô
(&
s1
);

2546 
	`JPAKE_STEP1_gíî©e
(&
s1
, 
˘x
);

2547 
	`j∑ke_£nd_∑π
(
bc⁄n
, &
s1
.
p1
);

2548 
	`j∑ke_£nd_∑π
(
bc⁄n
, &
s1
.
p2
);

2549 ()
	`BIO_Êush
(
bc⁄n
);

2550 
	`JPAKE_STEP1_ªÀa£
(&
s1
);

2551 
	}
}

2553 
	$j∑ke_£nd_°ï2
(
BIO
 *
bc⁄n
, 
JPAKE_CTX
 *
˘x
)

2555 
JPAKE_STEP2
 
s2
;

2557 
	`JPAKE_STEP2_öô
(&
s2
);

2558 
	`JPAKE_STEP2_gíî©e
(&
s2
, 
˘x
);

2559 
	`j∑ke_£nd_∑π
(
bc⁄n
, &
s2
);

2560 ()
	`BIO_Êush
(
bc⁄n
);

2561 
	`JPAKE_STEP2_ªÀa£
(&
s2
);

2562 
	}
}

2564 
	$j∑ke_£nd_°ï3a
(
BIO
 *
bc⁄n
, 
JPAKE_CTX
 *
˘x
)

2566 
JPAKE_STEP3A
 
s3a
;

2568 
	`JPAKE_STEP3A_öô
(&
s3a
);

2569 
	`JPAKE_STEP3A_gíî©e
(&
s3a
, 
˘x
);

2570 
	`BIO_wrôe
(
bc⁄n
, 
s3a
.
hhk
,  s3a.hhk);

2571 ()
	`BIO_Êush
(
bc⁄n
);

2572 
	`JPAKE_STEP3A_ªÀa£
(&
s3a
);

2573 
	}
}

2575 
	$j∑ke_£nd_°ï3b
(
BIO
 *
bc⁄n
, 
JPAKE_CTX
 *
˘x
)

2577 
JPAKE_STEP3B
 
s3b
;

2579 
	`JPAKE_STEP3B_öô
(&
s3b
);

2580 
	`JPAKE_STEP3B_gíî©e
(&
s3b
, 
˘x
);

2581 
	`BIO_wrôe
(
bc⁄n
, 
s3b
.
hk
,  s3b.hk);

2582 ()
	`BIO_Êush
(
bc⁄n
);

2583 
	`JPAKE_STEP3B_ªÀa£
(&
s3b
);

2584 
	}
}

2586 
	$ªadbn
(
BIGNUM
 **
bn
, 
BIO
 *
bc⁄n
)

2588 
buf
[10240];

2589 
l
;

2591 
l
 = 
	`BIO_gës
(
bc⁄n
, 
buf
,  buf);

2592 
	`as£π
(
l
 > 0);

2593 
	`as£π
(
buf
[
l
-1] == '\n');

2594 
buf
[
l
-1] = '\0';

2595 
	`BN_hex2bn
(
bn
, 
buf
);

2596 
	}
}

2598 
	$j∑ke_ª˚ive_∑π
(
JPAKE_STEP_PART
 *
p
, 
BIO
 *
bc⁄n
)

2600 
	`ªadbn
(&
p
->
gx
, 
bc⁄n
);

2601 
	`ªadbn
(&
p
->
zkpx
.
gr
, 
bc⁄n
);

2602 
	`ªadbn
(&
p
->
zkpx
.
b
, 
bc⁄n
);

2603 
	}
}

2605 
	$j∑ke_ª˚ive_°ï1
(
JPAKE_CTX
 *
˘x
, 
BIO
 *
bc⁄n
)

2607 
JPAKE_STEP1
 
s1
;

2609 
	`JPAKE_STEP1_öô
(&
s1
);

2610 
	`j∑ke_ª˚ive_∑π
(&
s1
.
p1
, 
bc⁄n
);

2611 
	`j∑ke_ª˚ive_∑π
(&
s1
.
p2
, 
bc⁄n
);

2612 if(!
	`JPAKE_STEP1_¥o˚ss
(
˘x
, &
s1
))

2614 
	`ERR_¥öt_îr‹s
(
bio_îr
);

2615 
	`exô
(1);

2617 
	`JPAKE_STEP1_ªÀa£
(&
s1
);

2618 
	}
}

2620 
	$j∑ke_ª˚ive_°ï2
(
JPAKE_CTX
 *
˘x
, 
BIO
 *
bc⁄n
)

2622 
JPAKE_STEP2
 
s2
;

2624 
	`JPAKE_STEP2_öô
(&
s2
);

2625 
	`j∑ke_ª˚ive_∑π
(&
s2
, 
bc⁄n
);

2626 if(!
	`JPAKE_STEP2_¥o˚ss
(
˘x
, &
s2
))

2628 
	`ERR_¥öt_îr‹s
(
bio_îr
);

2629 
	`exô
(1);

2631 
	`JPAKE_STEP2_ªÀa£
(&
s2
);

2632 
	}
}

2634 
	$j∑ke_ª˚ive_°ï3a
(
JPAKE_CTX
 *
˘x
, 
BIO
 *
bc⁄n
)

2636 
JPAKE_STEP3A
 
s3a
;

2637 
l
;

2639 
	`JPAKE_STEP3A_öô
(&
s3a
);

2640 
l
 = 
	`BIO_ªad
(
bc⁄n
, 
s3a
.
hhk
,  s3a.hhk);

2641 
	`as£π
(
l
 = 
s3a
.
hhk
);

2642 if(!
	`JPAKE_STEP3A_¥o˚ss
(
˘x
, &
s3a
))

2644 
	`ERR_¥öt_îr‹s
(
bio_îr
);

2645 
	`exô
(1);

2647 
	`JPAKE_STEP3A_ªÀa£
(&
s3a
);

2648 
	}
}

2650 
	$j∑ke_ª˚ive_°ï3b
(
JPAKE_CTX
 *
˘x
, 
BIO
 *
bc⁄n
)

2652 
JPAKE_STEP3B
 
s3b
;

2653 
l
;

2655 
	`JPAKE_STEP3B_öô
(&
s3b
);

2656 
l
 = 
	`BIO_ªad
(
bc⁄n
, 
s3b
.
hk
,  s3b.hk);

2657 
	`as£π
(
l
 = 
s3b
.
hk
);

2658 if(!
	`JPAKE_STEP3B_¥o˚ss
(
˘x
, &
s3b
))

2660 
	`ERR_¥öt_îr‹s
(
bio_îr
);

2661 
	`exô
(1);

2663 
	`JPAKE_STEP3B_ªÀa£
(&
s3b
);

2664 
	}
}

2666 
	$j∑ke_˛õ¡_auth
(
BIO
 *
out
, BIO *
c⁄n
, c⁄° *
£¸ë
)

2668 
JPAKE_CTX
 *
˘x
;

2669 
BIO
 *
bc⁄n
;

2671 
	`BIO_puts
(
out
, "Authenticating with JPAKE\n");

2673 
˘x
 = 
	`j∑ke_öô
("˛õ¡", "£rvî", 
£¸ë
);

2675 
bc⁄n
 = 
	`BIO_√w
(
	`BIO_f_buf„r
());

2676 
	`BIO_push
(
bc⁄n
, 
c⁄n
);

2678 
	`j∑ke_£nd_°ï1
(
bc⁄n
, 
˘x
);

2679 
	`j∑ke_ª˚ive_°ï1
(
˘x
, 
bc⁄n
);

2680 
	`j∑ke_£nd_°ï2
(
bc⁄n
, 
˘x
);

2681 
	`j∑ke_ª˚ive_°ï2
(
˘x
, 
bc⁄n
);

2682 
	`j∑ke_£nd_°ï3a
(
bc⁄n
, 
˘x
);

2683 
	`j∑ke_ª˚ive_°ï3b
(
˘x
, 
bc⁄n
);

2685 
	`BIO_puts
(
out
, "JPAKEáuthentication succeeded, setting PSK\n");

2687 
psk_key
 = 
	`BN_bn2hex
(
	`JPAKE_gë_sh¨ed_key
(
˘x
));

2689 
	`BIO_p›
(
bc⁄n
);

2690 
	`BIO_‰ì
(
bc⁄n
);

2692 
	`JPAKE_CTX_‰ì
(
˘x
);

2693 
	}
}

2695 
	$j∑ke_£rvî_auth
(
BIO
 *
out
, BIO *
c⁄n
, c⁄° *
£¸ë
)

2697 
JPAKE_CTX
 *
˘x
;

2698 
BIO
 *
bc⁄n
;

2700 
	`BIO_puts
(
out
, "Authenticating with JPAKE\n");

2702 
˘x
 = 
	`j∑ke_öô
("£rvî", "˛õ¡", 
£¸ë
);

2704 
bc⁄n
 = 
	`BIO_√w
(
	`BIO_f_buf„r
());

2705 
	`BIO_push
(
bc⁄n
, 
c⁄n
);

2707 
	`j∑ke_ª˚ive_°ï1
(
˘x
, 
bc⁄n
);

2708 
	`j∑ke_£nd_°ï1
(
bc⁄n
, 
˘x
);

2709 
	`j∑ke_ª˚ive_°ï2
(
˘x
, 
bc⁄n
);

2710 
	`j∑ke_£nd_°ï2
(
bc⁄n
, 
˘x
);

2711 
	`j∑ke_ª˚ive_°ï3a
(
˘x
, 
bc⁄n
);

2712 
	`j∑ke_£nd_°ï3b
(
bc⁄n
, 
˘x
);

2714 
	`BIO_puts
(
out
, "JPAKEáuthentication succeeded, setting PSK\n");

2716 
psk_key
 = 
	`BN_bn2hex
(
	`JPAKE_gë_sh¨ed_key
(
˘x
));

2718 
	`BIO_p›
(
bc⁄n
);

2719 
	`BIO_‰ì
(
bc⁄n
);

2721 
	`JPAKE_CTX_‰ì
(
˘x
);

2722 
	}
}

2726 #i‡!
deföed
(
OPENSSL_NO_TLSEXT
Ë&& !deföed(
OPENSSL_NO_NEXTPROTONEG
)

2735 *
	$√xt_¥Ÿos_∑r£
(*
ouéí
, c⁄° *
ö
)

2737 
size_t
 
Àn
;

2738 *
out
;

2739 
size_t
 
i
, 
°¨t
 = 0;

2741 
Àn
 = 
	`°æí
(
ö
);

2742 i‡(
Àn
 >= 65535)

2743  
NULL
;

2745 
out
 = 
	`OPENSSL_mÆloc
(
	`°æí
(
ö
) + 1);

2746 i‡(!
out
)

2747  
NULL
;

2749 
i
 = 0; i <
Àn
; ++i)

2751 i‡(
i
 =
Àn
 || 
ö
[i] == ',')

2753 i‡(
i
 - 
°¨t
 > 255)

2755 
	`OPENSSL_‰ì
(
out
);

2756  
NULL
;

2758 
out
[
°¨t
] = 
i
 - start;

2759 
°¨t
 = 
i
 + 1;

2762 
out
[
i
+1] = 
ö
[i];

2765 *
ouéí
 = 
Àn
 + 1;

2766  
out
;

2767 
	}
}

2773 #i‡
deföed
(
_WIN32
)

2774 #ifde‡
fûío


2775 #unde‡
fûío


2776 
	#fûío
(
a
Ë()
	`_fûío
◊)

	)

2779 
	~<wödows.h
>

2780 
	~<tch¨.h
>

2782 
	$WIN32_ª«me
(c⁄° *
‰om
, c⁄° *
to
)

2784 
TCHAR
 *
t‰om
=
NULL
,*
âo
;

2785 
DWORD
 
îr
;

2786 
ªt
=0;

2788 i‡((
TCHAR
) == 1)

2790 
t‰om
 = (
TCHAR
 *)
‰om
;

2791 
âo
 = (
TCHAR
 *)
to
;

2795 
size_t
 
i
,
Êí
=
	`°æí
(
‰om
)+1,
éí
=°æí(
to
)+1;

2796 
t‰om
 = (
TCHAR
 *)
	`mÆloc
((TCHAR)*(
Êí
+
éí
));

2797 i‡(
t‰om
==
NULL
Ë
îr
;

2798 
âo
=
t‰om
+
Êí
;

2799 #i‡!
	`deföed
(
_WIN32_WCE
) || _WIN32_WCE>=101

2800 i‡(!
	`Mu…iByãToWideCh¨
(
CP_ACP
,0,
‰om
,
Êí
,(
WCHAR
 *)
t‰om
,flen))

2802 
i
=0;i<
Êí
;i++Ë
t‰om
[i]=(
TCHAR
)
‰om
[i];

2803 #i‡!
	`deföed
(
_WIN32_WCE
) || _WIN32_WCE>=101

2804 i‡(!
	`Mu…iByãToWideCh¨
(
CP_ACP
,0,
to
, 
éí
,(
WCHAR
 *)
âo
,Ålen))

2806 
i
=0;i<
éí
;i++Ë
âo
[i] =(
TCHAR
)
to
[i];

2809 i‡(
	`MoveFûe
(
t‰om
,
âo
)Ë
ok
;

2810 
îr
=
	`GëLa°Eº‹
();

2811 i‡(
îr
==
ERROR_ALREADY_EXISTS
 ||Éº==
ERROR_FILE_EXISTS
)

2813 i‡(
	`DñëeFûe
(
âo
Ë&& 
	`MoveFûe
(
t‰om
,tto))

2814 
ok
;

2815 
îr
=
	`GëLa°Eº‹
();

2817 i‡(
îr
==
ERROR_FILE_NOT_FOUND
 ||Éº==
ERROR_PATH_NOT_FOUND
)

2818 
î∫o
 = 
ENOENT
;

2819 i‡(
îr
==
ERROR_ACCESS_DENIED
)

2820 
î∫o
 = 
EACCES
;

2822 
î∫o
 = 
EINVAL
;

2823 
îr
:

2824 
ªt
=-1;

2825 
ok
:

2826 i‡(
t‰om
!=
NULL
 &&Å‰om!=(
TCHAR
 *)
‰om
Ë
	`‰ì
(tfrom);

2827  
ªt
;

2828 
	}
}

2832 #i‡
deföed
(
_WIN32
)

2833 
	$≠p_tmöãrvÆ
(
°›
,
u£πime
)

2835 
FILETIME
 
now
;

2836 
ªt
=0;

2837 
ULARGE_INTEGER
 
tm°¨t
;

2838 
w¨nög
=1;

2839 #ifde‡
_WIN32_WINNT


2840 
HANDLE
 
¥oc
=
NULL
;

2842 i‡(
¥oc
==
NULL
)

2844 i‡(
	`check_wö¡
())

2845 
¥oc
 = 
	`O≥nPro˚ss
(
PROCESS_QUERY_INFORMATION
,
FALSE
,

2846 
	`GëCuºítPro˚ssId
());

2847 i‡(
¥oc
==
NULL
Ë¥o¯(
HANDLE
)-1;

2850 i‡(
u£πime
 && 
¥oc
!=(
HANDLE
)-1)

2852 
FILETIME
 
junk
;

2853 
	`GëPro˚ssTimes
(
¥oc
,&
junk
,&junk,&junk,&
now
);

2858 
SYSTEMTIME
 
sy°ime
;

2860 i‡(
u£πime
 && 
w¨nög
)

2862 
	`BIO_¥ötf
(
bio_îr
,"To get meaningfulÑesults,Ñun "

2864 
w¨nög
=0;

2866 
	`GëSy°emTime
(&
sy°ime
);

2867 
	`Sy°emTimeToFûeTime
(&
sy°ime
,&
now
);

2870 i‡(
°›
==
TM_START
)

2872 
tm°¨t
.
u
.
LowP¨t
 = 
now
.
dwLowD©eTime
;

2873 
tm°¨t
.
u
.
HighP¨t
 = 
now
.
dwHighD©eTime
;

2876 
ULARGE_INTEGER
 
tm°›
;

2878 
tm°›
.
u
.
LowP¨t
 = 
now
.
dwLowD©eTime
;

2879 
tm°›
.
u
.
HighP¨t
 = 
now
.
dwHighD©eTime
;

2881 
ªt
 = (
__öt64
)(
tm°›
.
QuadP¨t
 - 
tm°¨t
.QuadPart)*1e-7;

2884  (
ªt
);

2885 
	}
}

2887 #ñi‡
deföed
(
OPENSSL_SYS_NETWARE
)

2888 
	~<time.h
>

2890 
	$≠p_tmöãrvÆ
(
°›
,
u£πime
)

2892 
ªt
=0;

2893 
˛ock_t
 
tm°¨t
;

2894 
w¨nög
=1;

2896 i‡(
u£πime
 && 
w¨nög
)

2898 
	`BIO_¥ötf
(
bio_îr
,"To get meaningfulÑesults,Ñun "

2900 
w¨nög
=0;

2903 i‡(
°›
==
TM_START
Ë
tm°¨t
 = 
	`˛ock
();

2904 
ªt
 = (
	`˛ock
()-
tm°¨t
)/()
CLOCKS_PER_SEC
;

2906  (
ªt
);

2907 
	}
}

2909 #ñi‡
deföed
(
OPENSSL_SYSTEM_VXWORKS
)

2910 
	~<time.h
>

2912 
	$≠p_tmöãrvÆ
(
°›
,
u£πime
)

2914 
ªt
=0;

2915 #ifde‡
CLOCK_REALTIME


2916 
time•ec
 
tm°¨t
;

2917 
time•ec
 
now
;

2919 
tm°¨t
;

2920 
now
;

2922 
w¨nög
=1;

2924 i‡(
u£πime
 && 
w¨nög
)

2926 
	`BIO_¥ötf
(
bio_îr
,"To get meaningfulÑesults,Ñun "

2928 
w¨nög
=0;

2931 #ifde‡
CLOCK_REALTIME


2932 
	`˛ock_gëtime
(
CLOCK_REALTIME
,&
now
);

2933 i‡(
°›
==
TM_START
Ë
tm°¨t
 = 
now
;

2934 
ªt
 = ( (
now
.
tv_£c
+now.
tv_n£c
*1e-9)

2935 - (
tm°¨t
.
tv_£c
+tm°¨t.
tv_n£c
*1e-9) );

2937 
now
 = 
	`tickGë
();

2938 i‡(
°›
==
TM_START
Ë
tm°¨t
 = 
now
;

2939 
ªt
 = (
now
 - 
tm°¨t
)/()
	`sysClkR©eGë
();

2941  (
ªt
);

2942 
	}
}

2944 #ñi‡
deföed
(
OPENSSL_SYSTEM_VMS
)

2945 
	~<time.h
>

2946 
	~<times.h
>

2948 
	$≠p_tmöãrvÆ
(
°›
,
u£πime
)

2950 
˛ock_t
 
tm°¨t
;

2951 
ªt
 = 0;

2952 
˛ock_t
 
now
;

2953 #ifde‡
__TMS


2954 
tms
 
rus
;

2956 
now
 = 
	`times
(&
rus
);

2957 i‡(
u£πime
Ë
now
 = 
rus
.
tms_utime
;

2959 i‡(
u£πime
)

2960 
now
 = 
	`˛ock
();

2962 
timevÆ
 
tv
;

2963 
	`gëtimeofday
(&
tv
,
NULL
);

2964 
now
 = (
˛ock_t
)(

2965 ()
tv
.
tv_£c
*
CLK_TCK
 +

2966 ()
tv
.
tv_u£c
*(1000000/
CLK_TCK
)

2970 i‡(
°›
==
TM_START
Ë
tm°¨t
 = 
now
;

2971 
ªt
 = (
now
 - 
tm°¨t
)/()(
CLK_TCK
);

2973  (
ªt
);

2974 
	}
}

2976 #ñi‡
deföed
(
_SC_CLK_TCK
)

2977 
	~<sys/times.h
>

2979 
	$≠p_tmöãrvÆ
(
°›
,
u£πime
)

2981 
ªt
 = 0;

2982 
tms
 
rus
;

2983 
˛ock_t
 
now
 = 
	`times
(&
rus
);

2984 
˛ock_t
 
tm°¨t
;

2986 i‡(
u£πime
Ë
now
 = 
rus
.
tms_utime
;

2988 i‡(
°›
==
TM_START
Ë
tm°¨t
 = 
now
;

2991 
tck
 = 
	`sysc⁄f
(
_SC_CLK_TCK
);

2992 
ªt
 = (
now
 - 
tm°¨t
)/()
tck
;

2995  (
ªt
);

2996 
	}
}

2999 
	~<sys/time.h
>

3000 
	~<sys/ªsour˚.h
>

3002 
	$≠p_tmöãrvÆ
(
°›
,
u£πime
)

3004 
ªt
 = 0;

3005 
rußge
 
rus
;

3006 
timevÆ
 
now
;

3007 
timevÆ
 
tm°¨t
;

3009 i‡(
u£πime
Ë
	`gërußge
(
RUSAGE_SELF
,&
rus
), 
now
 =Ñus.
ru_utime
;

3010 
	`gëtimeofday
(&
now
,
NULL
);

3012 i‡(
°›
==
TM_START
Ë
tm°¨t
 = 
now
;

3013 
ªt
 = ( (
now
.
tv_£c
+now.
tv_u£c
*1e-6)

3014 - (
tm°¨t
.
tv_£c
+tm°¨t.
tv_u£c
*1e-6) );

3016  
ªt
;

3017 
	}
}

3021 #ifde‡
_WIN32


3022 
	$≠p_isdú
(c⁄° *
«me
)

3024 
HANDLE
 
hLi°
;

3025 
WIN32_FIND_DATA
 
FûeD©a
;

3026 #i‡
	`deföed
(
UNICODE
Ë|| deföed(
_UNICODE
)

3027 
size_t
 
i
, 
Àn_0
 = 
	`°æí
(
«me
)+1;

3029 i‡(
Àn_0
 > (
FûeD©a
.
cFûeName
)/(FileData.cFileName[0]))

3032 #i‡!
	`deföed
(
_WIN32_WCE
) || _WIN32_WCE>=101

3033 i‡(!
	`Mu…iByãToWideCh¨
(
CP_ACP
,0,
«me
,
Àn_0
,
FûeD©a
.
cFûeName
,len_0))

3035 
i
=0;i<
Àn_0
;i++)

3036 
FûeD©a
.
cFûeName
[
i
] = (
WCHAR
)
«me
[i];

3038 
hLi°
 = 
	`FödFú°Fûe
(
FûeD©a
.
cFûeName
,&FileData);

3040 
hLi°
 = 
	`FödFú°Fûe
(
«me
,&
FûeD©a
);

3042 i‡(
hLi°
 =
INVALID_HANDLE_VALUE
)  -1;

3043 
	`FödClo£
(
hLi°
);

3044  ((
FûeD©a
.
dwFûeAâribuãs
&
FILE_ATTRIBUTE_DIRECTORY
)!=0);

3045 
	}
}

3047 
	~<sys/°©.h
>

3048 #i‚de‡
S_ISDIR


3049 #i‡
deföed
(
_S_IFMT
Ë&& deföed(
_S_IFDIR
)

3050 
	#S_ISDIR
(
a
Ë((◊Ë& 
_S_IFMT
Ë=
_S_IFDIR
)

	)

3052 
	#S_ISDIR
(
a
Ë((◊Ë& 
S_IFMT
Ë=
S_IFDIR
)

	)

3056 
	$≠p_isdú
(c⁄° *
«me
)

3058 #i‡
	`deföed
(
S_ISDIR
)

3059 
°©
 
°
;

3061 i‡(
	`°©
(
«me
,&
°
)==0Ë 
	`S_ISDIR
(°.
°_mode
);

3066 
	}
}

3070 #i‡
deföed
(
_WIN32
Ë&& deföed(
STD_INPUT_HANDLE
)

3071 
	$øw_ªad_°dö
(*
buf
,
siz
)

3073 
DWORD
 
n
;

3074 i‡(
	`RódFûe
(
	`GëStdH™dÀ
(
STD_INPUT_HANDLE
),
buf
,
siz
,&
n
,
NULL
))

3075  (
n
);

3077 
	}
}

3079 
	$øw_ªad_°dö
(*
buf
,
siz
)

3080 {  
	`ªad
(
	`fûío
(
°dö
),
buf
,
siz
); 
	}
}

3083 #i‡
deföed
(
_WIN32
Ë&& deföed(
STD_OUTPUT_HANDLE
)

3084 
	$øw_wrôe_°dout
(c⁄° *
buf
,
siz
)

3086 
DWORD
 
n
;

3087 i‡(
	`WrôeFûe
(
	`GëStdH™dÀ
(
STD_OUTPUT_HANDLE
),
buf
,
siz
,&
n
,
NULL
))

3088  (
n
);

3090 
	}
}

3092 
	$øw_wrôe_°dout
(c⁄° *
buf
,
siz
)

3093 {  
	`wrôe
(
	`fûío
(
°dout
),
buf
,
siz
); 
	}
}

	@apps.h

112 #i‚de‡
HEADER_APPS_H


113 
	#HEADER_APPS_H


	)

115 
	~"e_os.h
"

117 
	~<›ís¶/bio.h
>

118 
	~<›ís¶/x509.h
>

119 
	~<›ís¶/lhash.h
>

120 
	~<›ís¶/c⁄f.h
>

121 
	~<›ís¶/txt_db.h
>

122 #i‚de‡
OPENSSL_NO_ENGINE


123 
	~<›ís¶/ígöe.h
>

125 #i‚de‡
OPENSSL_NO_OCSP


126 
	~<›ís¶/oc•.h
>

128 
	~<›ís¶/os¶_typ.h
>

130 
≠p_RAND_lﬂd_fûe
(c⁄° *
fûe
, 
BIO
 *
bio_e
, 
d⁄t_w¨n
);

131 
≠p_RAND_wrôe_fûe
(c⁄° *
fûe
, 
BIO
 *
bio_e
);

134 
≠p_RAND_Ælow_wrôe_fûe
();

135 
≠p_RAND_lﬂd_fûes
(*
fûe
);

140 #i‚de‡
MONOLITH


142 
	#MAIN
(
a
,
v
Ë
	`maö
◊,v)

	)

144 #i‚de‡
NON_MAIN


145 
CONF
 *
	gc⁄fig
=
NULL
;

146 
BIO
 *
	gbio_îr
=
NULL
;

148 
CONF
 *
c⁄fig
;

149 
BIO
 *
bio_îr
;

154 
	#MAIN
(
a
,
v
Ë
	`PROG
◊,v)

	)

155 
CONF
 *
c⁄fig
;

156 *
deÁu…_c⁄fig_fûe
;

157 
BIO
 *
bio_îr
;

161 #i‚de‡
OPENSSL_SYS_NETWARE


162 
	~<sig«l.h
>

165 #ifde‡
SIGPIPE


166 
	#do_pùe_sig
(Ë
	`sig«l
(
SIGPIPE
,
SIG_IGN
)

	)

168 
	#do_pùe_sig
()

	)

171 #ifde‡
OPENSSL_NO_COMP


172 
	#zlib_˛ónup
()

	)

174 
	#zlib_˛ónup
(Ë
	`COMP_zlib_˛ónup
()

	)

177 #i‡
deföed
(
MONOLITH
Ë&& !deföed(
OPENSSL_C
)

178 
	#≠ps_°¨tup
() \

179 
	`do_pùe_sig
()

	)

180 
	#≠ps_shutdown
()

	)

182 #i‚de‡
OPENSSL_NO_ENGINE


183 
	#≠ps_°¨tup
() \

184 dÿ{ 
	`do_pùe_sig
(); 
	`CRYPTO_mÆloc_öô
(); \

185 
	`ERR_lﬂd_¸y±o_°rögs
(); 
	`O≥nSSL_add_Æl_Æg‹ôhms
(); \

186 
	`ENGINE_lﬂd_buûtö_ígöes
(); 
	`£tup_ui_mëhod
(); } 0)

	)

187 
	#≠ps_shutdown
() \

188 dÿ{ 
	`CONF_moduÀs_u∆ﬂd
(1); 
	`de°roy_ui_mëhod
(); \

189 
	`OBJ_˛ónup
(); 
	`EVP_˛ónup
(); 
	`ENGINE_˛ónup
(); \

190 
	`CRYPTO_˛ónup_Æl_ex_d©a
(); 
	`ERR_ªmove_thªad_°©e
(
NULL
); \

191 
	`RAND_˛ónup
(); \

192 
	`ERR_‰ì_°rögs
(); 
	`zlib_˛ónup
();} 0)

	)

194 
	#≠ps_°¨tup
() \

195 dÿ{ 
	`do_pùe_sig
(); 
	`CRYPTO_mÆloc_öô
(); \

196 
	`ERR_lﬂd_¸y±o_°rögs
(); 
	`O≥nSSL_add_Æl_Æg‹ôhms
(); \

197 
	`£tup_ui_mëhod
(); } 0)

	)

198 
	#≠ps_shutdown
() \

199 dÿ{ 
	`CONF_moduÀs_u∆ﬂd
(1); 
	`de°roy_ui_mëhod
(); \

200 
	`OBJ_˛ónup
(); 
	`EVP_˛ónup
(); \

201 
	`CRYPTO_˛ónup_Æl_ex_d©a
(); 
	`ERR_ªmove_thªad_°©e
(
NULL
); \

202 
	`RAND_˛ónup
(); \

203 
	`ERR_‰ì_°rögs
(); 
	`zlib_˛ónup
(); } 0)

	)

207 #ifde‡
OPENSSL_SYSNAME_WIN32


208 
	#›ís¶_fd£t
(
a
,
b
Ë
	`FD_SET
((Ô, b)

	)

210 
	#›ís¶_fd£t
(
a
,
b
Ë
	`FD_SET
◊, b)

	)

214 
	s¨gs_°


216 **
	md©a
;

217 
	mcou¡
;

218 } 
	tARGS
;

220 
	#PW_MIN_LENGTH
 4

	)

221 
	spw_cb_d©a


223 c⁄° *
	m∑ssw‹d
;

224 c⁄° *
	m¥om±_öfo
;

225 } 
	tPW_CB_DATA
;

227 
∑ssw‹d_ˇŒback
(*
buf
, 
bufsiz
, 
vîify
,

228 
PW_CB_DATA
 *
cb_d©a
);

230 
£tup_ui_mëhod
();

231 
de°roy_ui_mëhod
();

233 
should_ªåy
(
i
);

234 
¨gs_‰om_fûe
(*
fûe
, *
¨gc
, **
¨gv
[]);

235 
°r2fmt
(*
s
);

236 
¥ogøm_«me
(*
ö
,*
out
,
size
);

237 
ch›up_¨gs
(
ARGS
 *
¨g
,*
buf
, *
¨gc
, **
¨gv
[]);

238 #ifde‡
HEADER_X509_H


239 
dump_˚π_ãxt
(
BIO
 *
out
, 
X509
 *
x
);

240 
¥öt_«me
(
BIO
 *
out
, c⁄° *
tôÀ
, 
X509_NAME
 *
nm
, 
lÊags
);

242 
£t_˚π_ex
(*
Êags
, c⁄° *
¨g
);

243 
£t_«me_ex
(*
Êags
, c⁄° *
¨g
);

244 
£t_ext_c›y
(*
c›y_ty≥
, c⁄° *
¨g
);

245 
c›y_exãnsi⁄s
(
X509
 *
x
, 
X509_REQ
 *
ªq
, 
c›y_ty≥
);

246 
≠p_∑sswd
(
BIO
 *
îr
, *
¨g1
, *
¨g2
, **
∑ss1
, **
∑ss2
);

247 
add_oid_£˘i⁄
(
BIO
 *
îr
, 
CONF
 *
c⁄f
);

248 
X509
 *
lﬂd_˚π
(
BIO
 *
îr
, c⁄° *
fûe
, 
f‹m©
,

249 c⁄° *
∑ss
, 
ENGINE
 *
e
, c⁄° *
˚π_des¸ù
);

250 
EVP_PKEY
 *
lﬂd_key
(
BIO
 *
îr
, c⁄° *
fûe
, 
f‹m©
, 
maybe_°dö
,

251 c⁄° *
∑ss
, 
ENGINE
 *
e
, c⁄° *
key_des¸ù
);

252 
EVP_PKEY
 *
lﬂd_pubkey
(
BIO
 *
îr
, c⁄° *
fûe
, 
f‹m©
, 
maybe_°dö
,

253 c⁄° *
∑ss
, 
ENGINE
 *
e
, c⁄° *
key_des¸ù
);

254 
STACK_OF
(
X509
Ë*
lﬂd_˚πs
(
BIO
 *
îr
, c⁄° *
fûe
, 
f‹m©
,

255 c⁄° *
∑ss
, 
ENGINE
 *
e
, c⁄° *
˚π_des¸ù
);

256 
STACK_OF
(
X509_CRL
Ë*
lﬂd_¸ls
(
BIO
 *
îr
, c⁄° *
fûe
, 
f‹m©
,

257 c⁄° *
∑ss
, 
ENGINE
 *
e
, c⁄° *
˚π_des¸ù
);

258 
X509_STORE
 *
£tup_vîify
(
BIO
 *
bp
, *
CAfûe
, *
CA∑th
);

259 #i‚de‡
OPENSSL_NO_ENGINE


260 
ENGINE
 *
£tup_ígöe
(
BIO
 *
îr
, c⁄° *
ígöe
, 
debug
);

263 #i‚de‡
OPENSSL_NO_OCSP


264 
OCSP_RESPONSE
 *
¥o˚ss_ª•⁄dî
(
BIO
 *
îr
, 
OCSP_REQUEST
 *
ªq
,

265 *
ho°
, *
∑th
, *
p‹t
, 
u£_s¶
,

266 
STACK_OF
(
CONF_VALUE
Ë*
hódîs
,

267 
ªq_timeout
);

270 
lﬂd_c⁄fig
(
BIO
 *
îr
, 
CONF
 *
˙f
);

271 *
make_c⁄fig_«me
();

274 
u≈ack_ªvöfo
(
ASN1_TIME
 **
¥evtm
, *
¥ós⁄
, 
ASN1_OBJECT
 **
phﬁd
,

275 
ASN1_GENERALIZEDTIME
 **
pövtm
, c⁄° *
°r
);

277 
	#DB_ty≥
 0

	)

278 
	#DB_exp_d©e
 1

	)

279 
	#DB_ªv_d©e
 2

	)

280 
	#DB_£rül
 3

	)

281 
	#DB_fûe
 4

	)

282 
	#DB_«me
 5

	)

283 
	#DB_NUMBER
 6

	)

285 
	#DB_TYPE_REV
 'R'

	)

286 
	#DB_TYPE_EXP
 'E'

	)

287 
	#DB_TYPE_VAL
 'V'

	)

289 
	sdb_©å_°


291 
	munique_subje˘
;

292 } 
	tDB_ATTR
;

293 
	sˇ_db_°


295 
DB_ATTR
 
	m©åibuãs
;

296 
TXT_DB
 *
	mdb
;

297 } 
	tCA_DB
;

299 
BIGNUM
 *
lﬂd_£rül
(*
£rülfûe
, 
¸óã
, 
ASN1_INTEGER
 **
ªèi
);

300 
ßve_£rül
(*
£rülfûe
, *
suffix
, 
BIGNUM
 *
£rül
, 
ASN1_INTEGER
 **
ªèi
);

301 
rŸ©e_£rül
(*
£rülfûe
, *
√w_suffix
, *
ﬁd_suffix
);

302 
ønd_£rül
(
BIGNUM
 *
b
, 
ASN1_INTEGER
 *
ai
);

303 
CA_DB
 *
lﬂd_ödex
(*
dbfûe
, 
DB_ATTR
 *
db©å
);

304 
ödex_ödex
(
CA_DB
 *
db
);

305 
ßve_ödex
(c⁄° *
dbfûe
, c⁄° *
suffix
, 
CA_DB
 *
db
);

306 
rŸ©e_ödex
(c⁄° *
dbfûe
, c⁄° *
√w_suffix
, c⁄° *
ﬁd_suffix
);

307 
‰ì_ödex
(
CA_DB
 *
db
);

308 
	#ödex_«me_cmp_noc⁄°
(
a
, 
b
) \

309 
	`ödex_«me_cmp
((c⁄° 
OPENSSL_CSTRING
 *)
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, 
a
), \

310 (c⁄° 
OPENSSL_CSTRING
 *)
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, 
b
))

	)

311 
ödex_«me_cmp
(c⁄° 
OPENSSL_CSTRING
 *
a
, c⁄° OPENSSL_CSTRING *
b
);

312 
∑r£_ye¢o
(c⁄° *
°r
, 
def
);

314 
X509_NAME
 *
∑r£_«me
(*
°r
, 
chty≥
, 
mu…údn
);

315 
¨gs_vîify
(***
∑rgs
, *
∑rgc
,

316 *
bad¨g
, 
BIO
 *
îr
, 
X509_VERIFY_PARAM
 **
pm
);

317 
pﬁicõs_¥öt
(
BIO
 *
out
, 
X509_STORE_CTX
 *
˘x
);

318 
bio_to_mem
(**
out
, 
maxÀn
, 
BIO
 *
ö
);

319 
pkey_˘æ_°rög
(
EVP_PKEY_CTX
 *
˘x
, *
vÆue
);

320 
öô_gí_°r
(
BIO
 *
îr
, 
EVP_PKEY_CTX
 **
p˘x
,

321 c⁄° *
Æg«me
, 
ENGINE
 *
e
, 
do_∑øm
);

322 
do_X509_sign
(
BIO
 *
îr
, 
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
,

323 
STACK_OF
(
OPENSSL_STRING
Ë*
sig›ts
);

324 
do_X509_REQ_sign
(
BIO
 *
îr
, 
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
,

325 
STACK_OF
(
OPENSSL_STRING
Ë*
sig›ts
);

326 
do_X509_CRL_sign
(
BIO
 *
îr
, 
X509_CRL
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
,

327 
STACK_OF
(
OPENSSL_STRING
Ë*
sig›ts
);

328 #i‚de‡
OPENSSL_NO_PSK


329 *
psk_key
;

331 #i‚de‡
OPENSSL_NO_JPAKE


332 
j∑ke_˛õ¡_auth
(
BIO
 *
out
, BIO *
c⁄n
, c⁄° *
£¸ë
);

333 
j∑ke_£rvî_auth
(
BIO
 *
out
, BIO *
c⁄n
, c⁄° *
£¸ë
);

336 #i‡!
deföed
(
OPENSSL_NO_TLSEXT
Ë&& !deföed(
OPENSSL_NO_NEXTPROTONEG
)

337 *
√xt_¥Ÿos_∑r£
(*
ouéí
, c⁄° *
ö
);

340 
	#FORMAT_UNDEF
 0

	)

341 
	#FORMAT_ASN1
 1

	)

342 
	#FORMAT_TEXT
 2

	)

343 
	#FORMAT_PEM
 3

	)

344 
	#FORMAT_NETSCAPE
 4

	)

345 
	#FORMAT_PKCS12
 5

	)

346 
	#FORMAT_SMIME
 6

	)

347 
	#FORMAT_ENGINE
 7

	)

348 
	#FORMAT_IISSGC
 8

	)

350 
	#FORMAT_PEMRSA
 9

	)

351 
	#FORMAT_ASN1RSA
 10

	)

352 
	#FORMAT_MSBLOB
 11

	)

353 
	#FORMAT_PVK
 12

	)

355 
	#EXT_COPY_NONE
 0

	)

356 
	#EXT_COPY_ADD
 1

	)

357 
	#EXT_COPY_ALL
 2

	)

359 
	#NETSCAPE_CERT_HDR
 "˚πifiˇã"

	)

361 
	#APP_PASS_LEN
 1024

	)

363 
	#SERIAL_RAND_BITS
 64

	)

365 
≠p_isdú
(const *);

366 
øw_ªad_°dö
(*,);

367 
øw_wrôe_°dout
(const *,);

369 
	#TM_START
 0

	)

370 
	#TM_STOP
 1

	)

371 
≠p_tmöãrvÆ
 (
°›
,
u£πime
);

373 
	#OPENSSL_NO_SSL_INTERN


	)

	@ashoke_client.c

1 
	~<uni°d.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<gë›t.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<√töë/ö.h
>

8 
	~<sys/sockë.h
>

9 
	~<sig«l.h
>

11 
	~"›ís¶/x509.h
"

12 
	~"›ís¶/s¶.h
"

13 
	~"›ís¶/îr.h
"

14 
	~"›ís¶/≥m.h
"

15 
	~"›ís¶/ønd.h
"

16 
	~"›ís¶/oc•.h
"

17 
	~"›ís¶/bn.h
"

20 *
›èrg
;

21 
›töd
;

22 
›t›t
;

23 
›ãº
;

24 
›åe£t
;

25 *
›èrg
;

26 
SSL_CIPHER
 
s¶3_cùhîs
[];

29 
	#SPACE2
 " "

	)

30 
	#SPACE4
 " "

	)

31 
	#SPACE6
 " "

	)

32 
	#SPACE8
 " "

	)

34 
	#REQUEST
 "GET /ödex.htm»HTTP/1.1 \r\nHo°: 10.102.28.61\r\nC⁄√˘i⁄: kìp-Æive\r\n\r\n"

	)

35 
	#REQLEN
 
	`°æí
(
REQUEST
)

	)

37 
	#ENDTOKEN
 "I AM DONE\n"

	)

38 
	#ENDTOKLEN
 
	`°æí
(
ENDTOKEN
)

	)

40 c⁄° 
SSL_METHOD
 *
	gv30Mëhod
 = 
NULL
;

41 c⁄° 
SSL_METHOD
 *
	gv31Mëhod
 = 
NULL
;

42 c⁄° 
SSL_METHOD
 *
	gv32Mëhod
 = 
NULL
;

43 c⁄° 
SSL_METHOD
 *
	gv33Mëhod
 = 
NULL
;

47 
	g¥ötOuçut
 = 0;

48 *
	gIP
 = 
NULL
;

49 *
	gBINDIP
 = 
NULL
;

50 
	gPORT
 = 0;

51 
X509
 *
	gCît
 = 
NULL
;

52 
EVP_PKEY
 *
	gKey
 = 
NULL
;

53 
SSL_SESSION
 *
	gªu£SESS
 = 
NULL
;

54 
	gEndTokí
[32];

55 
	gvîsi⁄Fûãr
 = -1;

56 
	gªu£Cou¡
 = 0;

57 
	gª√gCou¡
 = 0;

58 
	glogOuçut
 = 0;

59 
	gtoutm£c
 = 1000;

60 
	gôîCou¡
 = 1;

61 *
	gcùhîFûãr
 = 
NULL
;

62 *
	gcùhîSkùFûãr
[] =

63 {"CAMELLIA","-DSS-","SRP-","PSK-","SEED-","GOST","ECDSA",
NULL
};

65 *
	gvîs
[] = {"s¶3","és1","és11","és12",
NULL
};

66 
	gvîI¡
[] = {0x0300,0x0301,0x0302,0x0303,-1};

68 
	tVERCIPH
[16][32];

69 
VERCIPH
 
	gvîsi⁄Ex˛ude
[4] =

79 *
	gCIPHERS
[] = {

123 
F‹EachMëhod
(c⁄° 
SSL_METHOD
 *);

124 
F‹EachCùhî
(c⁄° 
SSL_METHOD
 *,c⁄° 
SSL_CIPHER
 *);

125 *
FaûMesßge
();

126 
PrötSumm¨y
(,const *, *,*);

127 
MakeSockë
(*,);

128 
AœrmH™dÀr
();

129 
checkSkùFûãr
(const *);

130 
födVîI¡
(*);

131 
checkVîsi⁄Cùhî
(
vî
,c⁄° *
˙ame
);

135 
	gªcBound¨y
 = 0;

137 
ã°_îr‹_öj
;

139 
	$maö
(
¨gc
,**
¨gv
)

141 
BIO
 *
ö
 = 
NULL
;

142 
RSA
 *
rß
 = 
NULL
;

143 
ch
;

144 *
˚π
=
NULL
,*
key
=NULL;

145 *
logfûe
 = 
NULL
;

146 
FILE
 *
fout
 = 
NULL
;

149 
›ti⁄
 
l⁄g›ts
[] = {

150 {"ù", 
ªquúed_¨gumít
, 
NULL
,'a'},

151 {"p‹t", 
ªquúed_¨gumít
, 
NULL
,'b'},

152 {"˚π", 
›ti⁄Æ_¨gumít
, 
NULL
,'c'},

153 {"key", 
›ti⁄Æ_¨gumít
, 
NULL
,'d'},

154 {"vîsi⁄", 
›ti⁄Æ_¨gumít
, 
NULL
,'e'},

155 {"cùhî", 
›ti⁄Æ_¨gumít
, 
NULL
,'f'},

156 {"ªu£", 
›ti⁄Æ_¨gumít
, 
NULL
,'g'},

157 {"ª√g", 
›ti⁄Æ_¨gumít
, 
NULL
,'h'},

158 {"timeout", 
›ti⁄Æ_¨gumít
, 
NULL
,'i'},

159 {"ckv", 
›ti⁄Æ_¨gumít
, 
NULL
,'j'},

160 {"¥öt", 
›ti⁄Æ_¨gumít
, 
NULL
,'k'},

161 {"log", 
›ti⁄Æ_¨gumít
, 
NULL
,'l'},

162 {"ôî", 
›ti⁄Æ_¨gumít
, 
NULL
,'m'},

163 {"îr", 
›ti⁄Æ_¨gumít
, 
NULL
,'n'},

167 
›töd
 = 0;

170 (
ch
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "a:b:c:d:e:f:ghi:j:kl:", 
l⁄g›ts
, 
NULL
)) != -1)

172 
ch
)

174 'a': 
IP
 = 
›èrg
;;

175 'b': 
PORT
 = 
	`©oi
(
›èrg
);;

176 'c': 
˚π
 = 
›èrg
;;

177 'd': 
key
 = 
›èrg
;;

178 'e': 
vîsi⁄Fûãr
 = 
	`födVîI¡
(
›èrg
);;

179 'f': 
cùhîFûãr
 = 
›èrg
;;

180 'g': 
ªu£Cou¡
 = 
	`©oi
(
›èrg
);;

181 'h': 
ª√gCou¡
 = 1;;

182 'i': 
toutm£c
 = 
	`©oi
(
›èrg
);;

183 'j': 
ªcBound¨y
 = 
	`©oi
(
›èrg
);;

184 'k': 
¥ötOuçut
 = 1;;

185 'l': 
logOuçut
 = 1;
logfûe
 = 
›èrg
;;

186 'm': 
ôîCou¡
 = 
	`©oi
(
›èrg
);;

187 'n': 
ã°_îr‹_öj
 |(1 << 
	`©oi
(
›èrg
));;

191 if(
ôîCou¡
 <= 0)

193 
	`¥ötf
("Bad iteration count\n");

194 
	`exô
(0);

197 if(
logOuçut
)

199 
fout
 = 
	`‰e›í
(
logfûe
,"w",
°dout
);

200 if(!
fout
)

202 
	`¥ötf
("FaûedÅÿ›íÜogifûê%s\n",
logfûe
);

203 
	`exô
(0);

207 if((
ªcBound¨y
 < 0) || (recBoundary > 2))

209 
	`¥ötf
("Bad ckv\n");

210 
	`exô
(0);

213 if(
˚π
)

215 
ö
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

216 
	`BIO_ªad_fûíame
(
ö
,
˚π
);

217 
Cît
 = 
	`PEM_ªad_bio_X509
(
ö
,
NULL
,NULL,NULL);

218 
	`BIO_£t_˛o£
(
ö
,
BIO_CLOSE
);

220 
ö
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

221 
	`BIO_ªad_fûíame
(
ö
,
key
);

222 
rß
 = 
	`PEM_ªad_bio_RSAPriv©eKey
(
ö
,
NULL
,NULL,NULL);

223 
Key
 = 
	`EVP_PKEY_√w
();

224 
	`EVP_PKEY_£t1_RSA
(
Key
,
rß
);

225 
	`BIO_£t_˛o£
(
ö
,
BIO_CLOSE
);

228 
	`bzîo
(
EndTokí
,(EndToken));

229 
	`£tbuf
(
°dout
,
NULL
);

230 
	`SSL_libøry_öô
();

232 
v30Mëhod
 = 
	`SSLv3_˛õ¡_mëhod
();

233 
v31Mëhod
 = 
	`TLSv1_˛õ¡_mëhod
();

234 
v32Mëhod
 = 
	`TLSv1_1_˛õ¡_mëhod
();

235 
v33Mëhod
 = 
	`TLSv1_2_˛õ¡_mëhod
();

237 
	`¥ötf
("\n\nIP: %† P‹t: %d\n",
IP
,
PORT
);

238 
	`¥ötf
("-------------------------------------\n");

240 
ôîCou¡
--)

242 
	`F‹EachMëhod
(
v30Mëhod
);

243 
	`F‹EachMëhod
(
v31Mëhod
);

244 
	`F‹EachMëhod
(
v32Mëhod
);

245 
	`F‹EachMëhod
(
v33Mëhod
);

247 
	}
}

250 
	$F‹EachMëhod
(c⁄° 
SSL_METHOD
 *
M
)

252 
i
;

253 
numC
 = 
M
->
	`num_cùhîs
();

254 c⁄° 
SSL_CIPHER
 *
C
 = 
NULL
;

256 if((
vîsi⁄Fûãr
 >0Ë&& (
M
->
vîsi⁄
 != versionFilter) )

259 
i
=0;i<
numC
;i++)

261 
C
 = 
M
->
	`gë_cùhî
(
i
);

262 if(
C
)

263 
	`F‹EachCùhî
(
M
,
C
);

265 
	}
}

268 
	$F‹EachCùhî
(c⁄° 
SSL_METHOD
 *
M
,c⁄° 
SSL_CIPHER
 *
C
)

270 
ªC⁄√˘
 = 
ªu£Cou¡
;

271 
ªNeg
 = 
ª√gCou¡
;

272 
Rë
 = 0;

273 
SSL_CTX
 *
CTX
 = 
	`SSL_CTX_√w
(
M
);

274 
SSL
 *
c⁄
 = 
NULL
;

275 
SSL_SESSION
 *
ªu£SESS
 = 
NULL
;

276 
ecode
 = 0;

277 
sd
 = 0;

278 
rBuf
[8092];

279 
debugLo›
 = 0;

281 if(!
	`AŒowCùhî
(
C
->
«me
,
M
->
vîsi⁄
))

284 if(
	`checkVîsi⁄Cùhî
(
M
->
vîsi⁄
 & 0xFF,
C
->
«me
))

287 
CTX
->
cùhî_li°
 = 
	`sk_SSL_CIPHER_√w_nuŒ
();

288 
	`sk_SSL_CIPHER_push
(
CTX
->
cùhî_li°
,
C
);

289 
CTX
->
cùhî_li°_by_id
 = 
	`sk_SSL_CIPHER_dup
(CTX->
cùhî_li°
);

291 if(
Cît
)

292 
	`SSL_CTX_u£_˚πifiˇã
(
CTX
,
Cît
);

293 if(
Key
)

294 
	`SSL_CTX_u£_Priv©eKey
(
CTX
,
Key
);

300 
sd
;

301 
BIO
 *
sbio
;

303 
c⁄
 = 
	`SSL_√w
(
CTX
);

305 if(
ªcBound¨y
 == 1)

306 
	`SSL_£t_buf_cc
(
c⁄
);

307 if(
ªcBound¨y
 == 2)

308 
	`SSL_£t_buf_cke
(
c⁄
);

310 if((
sd
 = 
	`MakeSockë
(
IP
,
PORT
)) < 0)

312 
Rë
 = -1;

313 
íd
;

316 
sbio
 = 
	`BIO_√w_sockë
(
sd
,
BIO_NOCLOSE
);

317 
	`SSL_£t_bio
(
c⁄
,
sbio
,sbio);

319 if(
ªu£SESS
)

320 
	`SSL_£t_£ssi⁄
(
c⁄
,
ªu£SESS
);

322 
	`SSL_£t_c⁄√˘_°©e
(
c⁄
);

324 
ecode
 = 
	`SSL_c⁄√˘
(
c⁄
);

325 if(
ecode
 < 0)

327 if(
ªu£SESS
)

328 
Rë
 = -4;

330 
Rë
 = -2;

332 
íd
;

336 
ecode
 = 
	`SSL_wrôe
(
c⁄
,
REQUEST
,
REQLEN
);

337 if(
ecode
 !
REQLEN
)

339 if(
ªu£SESS
)

340 
Rë
 = -5;

342 
Rë
 = -8;

343 
íd
;

346 
	`bzîo
(
EndTokí
,(EndToken));

348 
debugLo›
 = 0;

351 
debugLo›
++;

352 
	`bzîo
(
rBuf
,8092);

353 
ecode
 = 
	`SSL_ªad
(
c⁄
,
rBuf
,8090);

354 if(
ecode
 <= 0)

359 if(
¥ötOuçut
)

361 
	`¥ötf
("%s",
rBuf
);

362 
	`fÊush
(
°dout
);

365 
rBuf
[
ecode
] = 0;

366 if(
ecode
 >
ENDTOKLEN
)

367 
	`°r˝y
(
EndTokí
,
rBuf
+
ecode
-
ENDTOKLEN
);

369 
	`°r˝y
(
EndTokí
+
	`°æí
(EndTokí),
rBuf
);

371 
	`bzîo
(
rBuf
,8092);

374 if(!
¥ötOuçut
 && (
	`°rcmp
(
EndTokí
,
ENDTOKEN
) != 0))

376 if(
ªu£SESS
)

377 
Rë
 = -5;

379 
Rë
 = -3;

380 
íd
;

383 if(!
ªu£SESS
)

384 
ªu£SESS
 = 
	`SSL_gë1_£ssi⁄
(
c⁄
);

388 if–(
ªC⁄√˘
 <0Ë&& (
ªNeg
 <= 0) )

391 if(
ªC⁄√˘
 <= 0)

393 
ªu£SESS
 = 
NULL
;

394 if(
ªNeg
 > 0)

396 
	`SSL_ª√gŸüã
(
c⁄
);

398 if(
	`SSL_wrôe
(
c⁄
,
REQUEST
,
REQLEN
) != REQLEN)

400 
Rë
 = -7;

401 
íd
;

403 
	`bzîo
(
EndTokí
,(EndToken));

407 
	`bzîo
(
rBuf
,8092);

408 
ecode
 = 
	`SSL_ªad
(
c⁄
,
rBuf
,8090);

409 if(
ecode
 <= 0)

414 
rBuf
[
ecode
] = 0;

415 if(
ecode
 >
ENDTOKLEN
)

416 
	`°r˝y
(
EndTokí
,
rBuf
+
ecode
-
ENDTOKLEN
);

418 
	`°r˝y
(
EndTokí
+
	`°æí
(EndTokí),
rBuf
);

420 
	`bzîo
(
rBuf
,8092);

423 if(
	`°rcmp
(
EndTokí
,
ENDTOKEN
) != 0)

425 
Rë
 = -7;

426 
íd
;

434 
ªC⁄√˘
--;

439 
íd
:

440 
	`PrötSumm¨y
(
M
->
vîsi⁄
,
C
->
«me
,
NULL
,
	`FaûMesßge
(
Rë
));

441 
sd
 = 
	`BIO_gë_fd
(
c⁄
->
wbio
,
NULL
);

442 
	`˛o£
(
sd
);

443 
	`SSL_shutdown
(
c⁄
);

444 
	`BIO_‰ì
(
c⁄
->
wbio
);

445 
	}
}

448 
	$checkVîsi⁄Cùhî
(
vî
,c⁄° *
˙ame
)

450 
i
;

451 *
±r
;

452 
VERCIPH
 *
«me
;

453 
«me
 = &
vîsi⁄Ex˛ude
[
vî
];

455 
i
=0;
«me
[0][i][0];i++)

457 
±r
 = 
«me
[0][
i
];

458 if(
	`°r°r
(
˙ame
,
±r
))

463 
	}
}

466 *
	$FaûMesßge
(
ÁûCode
)

468 
ÁûCode
)

481 
	}
}

484 
	$PrötSumm¨y
(
vîsi⁄
,c⁄° *
cùhî
, *
›ti⁄s
,*
ªsu…
)

486 
	`¥ötf
("%04x%s%32s%s%32s\n",
vîsi⁄
,
SPACE4
,
cùhî
,SPACE4,
ªsu…
);

487 
	`fÊush
(
°dout
);

488 
	}
}

491 
	$MakeSockë
(*
ù
,
p‹t
)

493 
ªt
;

494 
sd
;

495 
sockaddr_ö
 
addr
;

496 
timevÆ
 
tV
;

498 
sd
 = 
	`sockë
(
PF_INET
,
SOCK_STREAM
,6);

499 
	`bzîo
(&
addr
,(addr));

500 
addr
.
sö_Ámûy
 = 
PF_INET
;

501 
addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

502 
addr
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
ù
);

503 
addr
.
sö_Àn
 = (addr);

505 
	`bzîo
(&
tV
,(tV));

507 if(
toutm£c
 >= 1000)

509 
tV
.
tv_£c
 = 
toutm£c
/1000;

511 
tV
.
tv_u£c
 = (
toutm£c
 % 1000) * 1000;

513 
	`£tsock›t
(
sd
,
SOL_SOCKET
,
SO_RCVTIMEO
,&
tV
,(tV));

515 
	`sig«l
(
SIGALRM
,
AœrmH™dÀr
);

516 
	`Æ¨m
(1);

518 
ªt
 = 
	`c⁄√˘
(
sd
,(
sockaddr
 *)&
addr
,(addr));

520 
	`Æ¨m
(0);

521 if(
ªt
 < 0)

523  
sd
;

524 
	}
}

526 
	$AœrmH™dÀr
(
s
)

528 
	}
}

531 
	$AŒowCùhî
(*
cùhî
, 
vî
)

533 
limô
 = ((
vî
 & 0xFF) < 3) ? 22 : 28;

534 
i
;

535 
limô
 = (
CIPHERS
)/(CIPHERS[0]);

537 if(
cùhîFûãr
 && 
	`°rcmp
(cùhîFûãr,
cùhî
))

540 
i
=0;i<
limô
;i++)

541 if(
	`°rcmp
(
cùhî
,
CIPHERS
[
i
])==0)

544 
	}
}

546 
	$checkSkùFûãr
(c⁄° *
cùhî
)

548 
ªt
 = 0;

549 
i
;

551 
cùhîSkùFûãr
[
i
])

553 if(
	`°r°r
(
cùhî
,
cùhîSkùFûãr
[
i
]) )

555 
ªt
 = 1;

558 
i
++;

561  
ªt
;

562 
	}
}

565 
	$födVîI¡
(*
v
)

567 
i
;

568 
i
=0;
vîs
[i];i++)

570 if(
	`°rcmp
(
vîs
[
i
],
v
) == 0)

571  
vîI¡
[
i
];

574 
	}
}

	@asn1pars.c

63 
	~<°dio.h
>

64 
	~<°dlib.h
>

65 
	~<°rög.h
>

66 
	~"≠ps.h
"

67 
	~<›ís¶/îr.h
>

68 
	~<›ís¶/evp.h
>

69 
	~<›ís¶/x509.h
>

70 
	~<›ís¶/≥m.h
>

80 #unde‡
PROG


81 
	#PROG
 
a¢1∑r£_maö


	)

83 
MAIN
(, **);

85 
do_gíî©e
(
BIO
 *
bio
, *
gí°r
, *
gíc⁄f
, 
BUF_MEM
 *
buf
);

87 
	$MAIN
(
¨gc
, **
¨gv
)

89 
i
,
bad›s
=0,
off£t
=0,
ªt
=1,
j
;

90 
Àngth
=0;

91 
num
,
tm∂í
;

92 
BIO
 *
ö
=
NULL
,*
out
=NULL,*
b64
=NULL, *
dîout
 = NULL;

93 
öf‹m©
,
ödít
=0, 
noout
 = 0, 
dump
 = 0;

94 *
öfûe
=
NULL
,*
°r
=NULL,*
¥og
,*
oidfûe
=NULL, *
dîfûe
=NULL;

95 *
gí°r
=
NULL
, *
gíc⁄f
=NULL;

96 *
tmpbuf
;

97 c⁄° *
˘mpbuf
;

98 
BUF_MEM
 *
buf
=
NULL
;

99 
	`STACK_OF
(
OPENSSL_STRING
Ë*
osk
=
NULL
;

100 
ASN1_TYPE
 *
©
=
NULL
;

102 
öf‹m©
=
FORMAT_PEM
;

104 
	`≠ps_°¨tup
();

106 i‡(
bio_îr
 =
NULL
)

107 i‡((
bio_îr
=
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

108 
	`BIO_£t_Â
(
bio_îr
,
°dîr
,
BIO_NOCLOSE
|
BIO_FP_TEXT
);

110 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

111 
íd
;

113 
¥og
=
¨gv
[0];

114 
¨gc
--;

115 
¨gv
++;

116 i‡((
osk
=
	`sk_OPENSSL_STRING_√w_nuŒ
()Ë=
NULL
)

118 
	`BIO_¥ötf
(
bio_îr
,"Memoryállocation failure\n");

119 
íd
;

121 
¨gc
 >= 1)

123 i‡(
	`°rcmp
(*
¨gv
,"-inform") == 0)

125 i‡(--
¨gc
 < 1Ë
bad
;

126 
öf‹m©
=
	`°r2fmt
(*(++
¨gv
));

128 i‡(
	`°rcmp
(*
¨gv
,"-in") == 0)

130 i‡(--
¨gc
 < 1Ë
bad
;

131 
öfûe
*(++
¨gv
);

133 i‡(
	`°rcmp
(*
¨gv
,"-out") == 0)

135 i‡(--
¨gc
 < 1Ë
bad
;

136 
dîfûe
*(++
¨gv
);

138 i‡(
	`°rcmp
(*
¨gv
,"-i") == 0)

140 
ödít
=1;

142 i‡(
	`°rcmp
(*
¨gv
,"-noout"Ë=0Ë
noout
 = 1;

143 i‡(
	`°rcmp
(*
¨gv
,"-oid") == 0)

145 i‡(--
¨gc
 < 1Ë
bad
;

146 
oidfûe
*(++
¨gv
);

148 i‡(
	`°rcmp
(*
¨gv
,"-offset") == 0)

150 i‡(--
¨gc
 < 1Ë
bad
;

151 
off£t

	`©oi
(*(++
¨gv
));

153 i‡(
	`°rcmp
(*
¨gv
,"-length") == 0)

155 i‡(--
¨gc
 < 1Ë
bad
;

156 
Àngth

	`©oi
(*(++
¨gv
));

157 i‡(
Àngth
 =0Ë
bad
;

159 i‡(
	`°rcmp
(*
¨gv
,"-dump") == 0)

161 
dump
= -1;

163 i‡(
	`°rcmp
(*
¨gv
,"-dlimit") == 0)

165 i‡(--
¨gc
 < 1Ë
bad
;

166 
dump

	`©oi
(*(++
¨gv
));

167 i‡(
dump
 <0Ë
bad
;

169 i‡(
	`°rcmp
(*
¨gv
,"-strparse") == 0)

171 i‡(--
¨gc
 < 1Ë
bad
;

172 
	`sk_OPENSSL_STRING_push
(
osk
,*(++
¨gv
));

174 i‡(
	`°rcmp
(*
¨gv
,"-genstr") == 0)

176 i‡(--
¨gc
 < 1Ë
bad
;

177 
gí°r
*(++
¨gv
);

179 i‡(
	`°rcmp
(*
¨gv
,"-genconf") == 0)

181 i‡(--
¨gc
 < 1Ë
bad
;

182 
gíc⁄f
*(++
¨gv
);

186 
	`BIO_¥ötf
(
bio_îr
,"unknow¿›ti⁄ %s\n",*
¨gv
);

187 
bad›s
=1;

190 
¨gc
--;

191 
¨gv
++;

194 i‡(
bad›s
)

196 
bad
:

197 
	`BIO_¥ötf
(
bio_îr
,"%†[›ti⁄s] <öfûe\n",
¥og
);

198 
	`BIO_¥ötf
(
bio_îr
,"where optionsáre\n");

199 
	`BIO_¥ötf
(
bio_îr
," -informárg input format - one of DER PEM\n");

200 
	`BIO_¥ötf
(
bio_îr
," -inárg input file\n");

201 
	`BIO_¥ötf
(
bio_îr
," -outárg output file (output format isálways DER\n");

202 
	`BIO_¥ötf
(
bio_îr
," -nooutárg don'tÖroduceány output\n");

203 
	`BIO_¥ötf
(
bio_îr
," -offsetárg offset into file\n");

204 
	`BIO_¥ötf
(
bio_îr
," -lengthárgÜength of section in file\n");

205 
	`BIO_¥ötf
(
bio_îr
," -i indentÉntries\n");

206 
	`BIO_¥ötf
(
bio_îr
," -dump dump unknown data in hex form\n");

207 
	`BIO_¥ötf
(
bio_îr
," -dlimitárg dumpÅhe firstárg bytes of unknown data in hex form\n");

208 
	`BIO_¥ötf
(
bio_îr
," -oid file file ofÉxtra oid definitions\n");

209 
	`BIO_¥ötf
(
bio_îr
," -strparse offset\n");

210 
	`BIO_¥ötf
(
bio_îr
,"á series ofÅhese can be usedÅo 'dig' into multiple\n");

211 
	`BIO_¥ötf
(
bio_îr
," ASN1 blob wrappings\n");

212 
	`BIO_¥ötf
(
bio_îr
," -genstr str stringÅo generate ASN1 structure from\n");

213 
	`BIO_¥ötf
(
bio_îr
," -genconf file fileÅo generate ASN1 structure from\n");

214 
íd
;

217 
	`ERR_lﬂd_¸y±o_°rögs
();

219 
ö
=
	`BIO_√w
(
	`BIO_s_fûe
());

220 
out
=
	`BIO_√w
(
	`BIO_s_fûe
());

221 i‡((
ö
 =
NULL
Ë|| (
out
 == NULL))

223 
	`ERR_¥öt_îr‹s
(
bio_îr
);

224 
íd
;

226 
	`BIO_£t_Â
(
out
,
°dout
,
BIO_NOCLOSE
|
BIO_FP_TEXT
);

227 #ifde‡
OPENSSL_SYS_VMS


229 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

230 
out
 = 
	`BIO_push
(
tmpbio
, out);

234 i‡(
oidfûe
 !
NULL
)

236 i‡(
	`BIO_ªad_fûíame
(
ö
,
oidfûe
) <= 0)

238 
	`BIO_¥ötf
(
bio_îr
,"¥obÀm†›íög %s\n",
oidfûe
);

239 
	`ERR_¥öt_îr‹s
(
bio_îr
);

240 
íd
;

242 
	`OBJ_¸óã_obje˘s
(
ö
);

245 i‡(
öfûe
 =
NULL
)

246 
	`BIO_£t_Â
(
ö
,
°dö
,
BIO_NOCLOSE
);

249 i‡(
	`BIO_ªad_fûíame
(
ö
,
öfûe
) <= 0)

251 
	`≥º‹
(
öfûe
);

252 
íd
;

256 i‡(
dîfûe
) {

257 if(!(
dîout
 = 
	`BIO_√w_fûe
(
dîfûe
, "wb"))) {

258 
	`BIO_¥ötf
(
bio_îr
,"¥obÀm†›íög %s\n",
dîfûe
);

259 
	`ERR_¥öt_îr‹s
(
bio_îr
);

260 
íd
;

264 i‡((
buf
=
	`BUF_MEM_√w
()Ë=
NULL
Ë
íd
;

265 i‡(!
	`BUF_MEM_grow
(
buf
,
BUFSIZ
*8)Ë
íd
;

267 i‡(
gí°r
 || 
gíc⁄f
)

269 
num
 = 
	`do_gíî©e
(
bio_îr
, 
gí°r
, 
gíc⁄f
, 
buf
);

270 i‡(
num
 < 0)

272 
	`ERR_¥öt_îr‹s
(
bio_îr
);

273 
íd
;

280 i‡(
öf‹m©
 =
FORMAT_PEM
)

282 
BIO
 *
tmp
;

284 i‡((
b64
=
	`BIO_√w
(
	`BIO_f_ba£64
())Ë=
NULL
)

285 
íd
;

286 
	`BIO_push
(
b64
,
ö
);

287 
tmp
=
ö
;

288 
ö
=
b64
;

289 
b64
=
tmp
;

292 
num
=0;

295 i‡(!
	`BUF_MEM_grow
(
buf
,()
num
+
BUFSIZ
)Ë
íd
;

296 
i
=
	`BIO_ªad
(
ö
,&(
buf
->
d©a
[
num
]),
BUFSIZ
);

297 i‡(
i
 <= 0) ;

298 
num
+=
i
;

301 
°r
=
buf
->
d©a
;

305 i‡(
	`sk_OPENSSL_STRING_num
(
osk
))

307 
tmpbuf
=(*)
°r
;

308 
tm∂í
=
num
;

309 
i
=0; i<
	`sk_OPENSSL_STRING_num
(
osk
); i++)

311 
ASN1_TYPE
 *
©mp
;

312 
typ
;

313 
j
=
	`©oi
(
	`sk_OPENSSL_STRING_vÆue
(
osk
,
i
));

314 i‡(
j
 == 0)

316 
	`BIO_¥ötf
(
bio_îr
,"'%s' i†™ invÆidÇumbî\n",
	`sk_OPENSSL_STRING_vÆue
(
osk
,
i
));

319 
tmpbuf
+=
j
;

320 
tm∂í
-=
j
;

321 
©mp
 = 
©
;

322 
˘mpbuf
 = 
tmpbuf
;

323 
©
 = 
	`d2i_ASN1_TYPE
(
NULL
,&
˘mpbuf
,
tm∂í
);

324 
	`ASN1_TYPE_‰ì
(
©mp
);

325 if(!
©
)

327 
	`BIO_¥ötf
(
bio_îr
,"ErrorÖarsing structure\n");

328 
	`ERR_¥öt_îr‹s
(
bio_îr
);

329 
íd
;

331 
typ
 = 
	`ASN1_TYPE_gë
(
©
);

332 i‡((
typ
 =
V_ASN1_OBJECT
)

333 || (
typ
 =
V_ASN1_NULL
))

335 
	`BIO_¥ötf
(
bio_îr
, "Can'tÖarse %sÅype\n",

336 
typ
 =
V_ASN1_NULL
 ? "NULL" : "OBJECT");

337 
	`ERR_¥öt_îr‹s
(
bio_îr
);

338 
íd
;

341 
tmpbuf
=
©
->
vÆue
.
a¢1_°rög
->
d©a
;

342 
tm∂í
=
©
->
vÆue
.
a¢1_°rög
->
Àngth
;

344 
°r
=(*)
tmpbuf
;

345 
num
=
tm∂í
;

348 i‡(
off£t
 >
num
)

350 
	`BIO_¥ötf
(
bio_îr
, "Error: offsetÅooÜarge\n");

351 
íd
;

354 
num
 -
off£t
;

356 i‡((
Àngth
 =0Ë|| ((Óígth > 
num
))Üength=()num;

357 if(
dîout
) {

358 if(
	`BIO_wrôe
(
dîout
, 
°r
 + 
off£t
, 
Àngth
) != ()length) {

359 
	`BIO_¥ötf
(
bio_îr
, "Error writing output\n");

360 
	`ERR_¥öt_îr‹s
(
bio_îr
);

361 
íd
;

364 i‡(!
noout
 &&

365 !
	`ASN1_∑r£_dump
(
out
,(*)&(
°r
[
off£t
]),
Àngth
,

366 
ödít
,
dump
))

368 
	`ERR_¥öt_îr‹s
(
bio_îr
);

369 
íd
;

371 
ªt
=0;

372 
íd
:

373 
	`BIO_‰ì
(
dîout
);

374 i‡(
ö
 !
NULL
Ë
	`BIO_‰ì
(in);

375 i‡(
out
 !
NULL
Ë
	`BIO_‰ì_Æl
(out);

376 i‡(
b64
 !
NULL
Ë
	`BIO_‰ì
(b64);

377 i‡(
ªt
 != 0)

378 
	`ERR_¥öt_îr‹s
(
bio_îr
);

379 i‡(
buf
 !
NULL
Ë
	`BUF_MEM_‰ì
(buf);

380 i‡(
©
 !
NULL
Ë
	`ASN1_TYPE_‰ì
(at);

381 i‡(
osk
 !
NULL
Ë
	`sk_OPENSSL_STRING_‰ì
(osk);

382 
	`OBJ_˛ónup
();

383 
	`≠ps_shutdown
();

384 
	`OPENSSL_EXIT
(
ªt
);

385 
	}
}

387 
	$do_gíî©e
(
BIO
 *
bio
, *
gí°r
, *
gíc⁄f
, 
BUF_MEM
 *
buf
)

389 
CONF
 *
˙f
 = 
NULL
;

390 
Àn
;

391 
îæöe
;

392 *
p
;

393 
ASN1_TYPE
 *
©yp
 = 
NULL
;

395 i‡(
gíc⁄f
)

397 
˙f
 = 
	`NCONF_√w
(
NULL
);

398 i‡(!
	`NCONF_lﬂd
(
˙f
, 
gíc⁄f
, &
îæöe
))

399 
c⁄„º
;

400 i‡(!
gí°r
)

401 
gí°r
 = 
	`NCONF_gë_°rög
(
˙f
, "default", "asn1");

402 i‡(!
gí°r
)

404 
	`BIO_¥ötf
(
bio
, "C™'àföd 'a¢1' i¿'%s'\n", 
gíc⁄f
);

405 
îr
;

409 
©yp
 = 
	`ASN1_gíî©e_nc⁄f
(
gí°r
, 
˙f
);

410 
	`NCONF_‰ì
(
˙f
);

411 
˙f
 = 
NULL
;

413 i‡(!
©yp
)

416 
Àn
 = 
	`i2d_ASN1_TYPE
(
©yp
, 
NULL
);

418 i‡(
Àn
 <= 0)

419 
îr
;

421 i‡(!
	`BUF_MEM_grow
(
buf
,
Àn
))

422 
îr
;

424 
p
=(*)
buf
->
d©a
;

426 
	`i2d_ASN1_TYPE
(
©yp
, &
p
);

428 
	`ASN1_TYPE_‰ì
(
©yp
);

429  
Àn
;

431 
c⁄„º
:

433 i‡(
îæöe
 > 0)

434 
	`BIO_¥ötf
(
bio
, "Error onÜine %ld of config file '%s'\n",

435 
îæöe
, 
gíc⁄f
);

437 
	`BIO_¥ötf
(
bio
, "Eº‹Üﬂdög c⁄fig fûê'%s'\n", 
gíc⁄f
);

439 
îr
:

440 
	`NCONF_‰ì
(
˙f
);

441 
	`ASN1_TYPE_‰ì
(
©yp
);

445 
	}
}

	@bnt.c

1 
	~"›ís¶/bn.h
"

4 
	$maö
()

6 
D
[] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b};

7 
BIGNUM
 *
a
,*
b
;

8 
buf
[256];

9 
i
,
j
,
k
,
l
;

11 
a
 = 
	`BN_bö2bn
(
D
,(D),
NULL
);

12 
	`BN_add_w‹d
(
a
,0x100);

13 
l
 = 
	`BN_bn2bö
(
a
,
buf
);

14 
i
=0;i<
l
;i++)

15 
	`¥ötf
("%02x ",
buf
[
i
]);

16 
	`¥ötf
("\n\n");

17 
	}
}

	@ca.c

61 
	~<°dio.h
>

62 
	~<°dlib.h
>

63 
	~<°rög.h
>

64 
	~<˘y≥.h
>

65 
	~<sys/ty≥s.h
>

66 
	~<›ís¶/c⁄f.h
>

67 
	~<›ís¶/bio.h
>

68 
	~<›ís¶/îr.h
>

69 
	~<›ís¶/bn.h
>

70 
	~<›ís¶/txt_db.h
>

71 
	~<›ís¶/evp.h
>

72 
	~<›ís¶/x509.h
>

73 
	~<›ís¶/x509v3.h
>

74 
	~<›ís¶/obje˘s.h
>

75 
	~<›ís¶/oc•.h
>

76 
	~<›ís¶/≥m.h
>

78 #i‚de‡
W_OK


79 #ifde‡
OPENSSL_SYS_VMS


80 #i‡
deföed
(
__DECC
)

81 
	~<uni°d.h
>

83 
	~<unixlib.h
>

85 #ñi‡!
deföed
(
OPENSSL_SYS_VXWORKS
Ë&& !deföed(
OPENSSL_SYS_WINDOWS
Ë&& !deföed(
OPENSSL_SYS_NETWARE
)

86 
	~<sys/fûe.h
>

90 
	~"≠ps.h
"

92 #i‚de‡
W_OK


93 
	#F_OK
 0

	)

94 
	#X_OK
 1

	)

95 
	#W_OK
 2

	)

96 
	#R_OK
 4

	)

99 #unde‡
PROG


100 
	#PROG
 
ˇ_maö


	)

102 
	#BASE_SECTION
 "ˇ"

	)

103 
	#CONFIG_FILE
 "›ís¶.˙f"

	)

105 
	#ENV_DEFAULT_CA
 "deÁu…_ˇ"

	)

107 
	#STRING_MASK
 "°rög_mask"

	)

108 
	#UTF8_IN
 "utf8"

	)

110 
	#ENV_DIR
 "dú"

	)

111 
	#ENV_CERTS
 "˚πs"

	)

112 
	#ENV_CRL_DIR
 "¸l_dú"

	)

113 
	#ENV_CA_DB
 "CA_DB"

	)

114 
	#ENV_NEW_CERTS_DIR
 "√w_˚πs_dú"

	)

115 
	#ENV_CERTIFICATE
 "˚πifiˇã"

	)

116 
	#ENV_SERIAL
 "£rül"

	)

117 
	#ENV_CRLNUMBER
 "¸ umbî"

	)

118 
	#ENV_CRL
 "¸l"

	)

119 
	#ENV_PRIVATE_KEY
 "¥iv©e_key"

	)

120 
	#ENV_RANDFILE
 "RANDFILE"

	)

121 
	#ENV_DEFAULT_DAYS
 "deÁu…_days"

	)

122 
	#ENV_DEFAULT_STARTDATE
 "deÁu…_°¨td©e"

	)

123 
	#ENV_DEFAULT_ENDDATE
 "deÁu…_ídd©e"

	)

124 
	#ENV_DEFAULT_CRL_DAYS
 "deÁu…_¸l_days"

	)

125 
	#ENV_DEFAULT_CRL_HOURS
 "deÁu…_¸l_hours"

	)

126 
	#ENV_DEFAULT_MD
 "deÁu…_md"

	)

127 
	#ENV_DEFAULT_EMAIL_DN
 "emaû_ö_dn"

	)

128 
	#ENV_PRESERVE
 "¥e£rve"

	)

129 
	#ENV_POLICY
 "pﬁicy"

	)

130 
	#ENV_EXTENSIONS
 "x509_exãnsi⁄s"

	)

131 
	#ENV_CRLEXT
 "¸l_exãnsi⁄s"

	)

132 
	#ENV_MSIE_HACK
 "msõ_hack"

	)

133 
	#ENV_NAMEOPT
 "«me_›t"

	)

134 
	#ENV_CERTOPT
 "˚π_›t"

	)

135 
	#ENV_EXTCOPY
 "c›y_exãnsi⁄s"

	)

136 
	#ENV_UNIQUE_SUBJECT
 "unique_subje˘"

	)

138 
	#ENV_DATABASE
 "d©aba£"

	)

142 
	#REV_NONE
 0

	)

143 
	#REV_CRL_REASON
 1

	)

144 
	#REV_HOLD
 2

	)

145 
	#REV_KEY_COMPROMISE
 3

	)

146 
	#REV_CA_COMPROMISE
 4

	)

148 c⁄° *
	gˇ_ußge
[]={

184 #i‚de‡
OPENSSL_NO_ENGINE


189 
NULL


192 #ifde‡
EFENCE


193 
EF_PROTECT_FREE
;

194 
EF_PROTECT_BELOW
;

195 
EF_ALIGNMENT
;

198 
lookup_Áû
(c⁄° *
«me
, c⁄° *
èg
);

199 
˚πify
(
X509
 **
xªt
, *
öfûe
,
EVP_PKEY
 *
pkey
,X509 *
x509
,

200 c⁄° 
EVP_MD
 *
dg°
,
STACK_OF
(
OPENSSL_STRING
Ë*
sig›ts
,

201 
STACK_OF
(
CONF_VALUE
Ë*
pﬁicy
,
CA_DB
 *
db
,

202 
BIGNUM
 *
£rül
, *
subj
,
chty≥
, 
mu…údn
, 
emaû_dn
, *
°¨td©e
,

203 *
ídd©e
, 
days
, 
b©ch
, *
ext_£˘
, 
CONF
 *
c⁄f
,

204 
vîbo£
, 
˚π›t
, 
«me›t
,

205 
deÁu…_›
, 
ext_c›y
, 
£lfsign
);

206 
˚πify_˚π
(
X509
 **
xªt
, *
öfûe
,
EVP_PKEY
 *
pkey
,X509 *
x509
,

207 c⁄° 
EVP_MD
 *
dg°
,
STACK_OF
(
OPENSSL_STRING
Ë*
sig›ts
,

208 
STACK_OF
(
CONF_VALUE
Ë*
pﬁicy
,

209 
CA_DB
 *
db
, 
BIGNUM
 *
£rül
, *
subj
,
chty≥
, 
mu…údn
, 
emaû_dn
,

210 *
°¨td©e
, *
ídd©e
, 
days
, 
b©ch
,

211 *
ext_£˘
, 
CONF
 *
c⁄f
,
vîbo£
, 
˚π›t
,

212 
«me›t
, 
deÁu…_›
, 
ext_c›y
,

213 
ENGINE
 *
e
);

214 
˚πify_•kac
(
X509
 **
xªt
, *
öfûe
,
EVP_PKEY
 *
pkey
,X509 *
x509
,

215 c⁄° 
EVP_MD
 *
dg°
,
STACK_OF
(
OPENSSL_STRING
Ë*
sig›ts
,

216 
STACK_OF
(
CONF_VALUE
Ë*
pﬁicy
,

217 
CA_DB
 *
db
, 
BIGNUM
 *
£rül
,*
subj
,
chty≥
, 
mu…údn
, 
emaû_dn
,

218 *
°¨td©e
, *
ídd©e
, 
days
, *
ext_£˘
,

219 
CONF
 *
c⁄f
, 
vîbo£
, 
˚π›t
,

220 
«me›t
, 
deÁu…_›
, 
ext_c›y
);

221 
wrôe_√w_˚πifiˇã
(
BIO
 *
bp
, 
X509
 *
x
, 
ouçut_dî
, 
nŸext
);

222 
do_body
(
X509
 **
xªt
, 
EVP_PKEY
 *
pkey
, X509 *
x509
, c⁄° 
EVP_MD
 *
dg°
,

223 
STACK_OF
(
OPENSSL_STRING
Ë*
sig›ts
,

224 
STACK_OF
(
CONF_VALUE
Ë*
pﬁicy
, 
CA_DB
 *
db
, 
BIGNUM
 *
£rül
,*
subj
,
chty≥
, 
mu…údn
,

225 
emaû_dn
, *
°¨td©e
, *
ídd©e
, 
days
, 
b©ch
,

226 
vîbo£
, 
X509_REQ
 *
ªq
, *
ext_£˘
, 
CONF
 *
c⁄f
,

227 
˚π›t
, 
«me›t
, 
deÁu…_›
,

228 
ext_c›y
, 
£lfsign
);

229 
do_ªvoke
(
X509
 *
x509
, 
CA_DB
 *
db
, 
ext
, *
extvÆ
);

230 
gë_˚πifiˇã_°©us
(c⁄° *
£r_°©us
, 
CA_DB
 *
db
);

231 
do_upd©edb
(
CA_DB
 *
db
);

232 
check_time_f‹m©
(c⁄° *
°r
);

233 *
make_ªvoˇti⁄_°r
(
ªv_ty≥
, *
ªv_¨g
);

234 
make_ªvoked
(
X509_REVOKED
 *
ªv
, c⁄° *
°r
);

235 
ﬁd_íåy_¥öt
(
BIO
 *
bp
, 
ASN1_OBJECT
 *
obj
, 
ASN1_STRING
 *
°r
);

236 
CONF
 *
	gc⁄f
=
NULL
;

237 
CONF
 *
	gextc⁄f
=
NULL
;

238 *
	g£˘i⁄
=
NULL
;

240 
	g¥e£rve
=0;

241 
	gmsõ_hack
=0;

244 
MAIN
(, **);

246 
	$MAIN
(
¨gc
, **
¨gv
)

248 
ENGINE
 *
e
 = 
NULL
;

249 *
key
=
NULL
,*
∑sßrgö
=NULL;

250 
¸óã_£r
 = 0;

251 
‰ì_key
 = 0;

252 
tŸÆ
=0;

253 
tŸÆ_d⁄e
=0;

254 
bad›s
=0;

255 
ªt
=1;

256 
emaû_dn
=1;

257 
ªq
=0;

258 
vîbo£
=0;

259 
gí¸l
=0;

260 
d‹evoke
=0;

261 
doupd©edb
=0;

262 
¸ldays
=0;

263 
¸lhours
=0;

264 
¸l£c
=0;

265 
îr‹löe
= -1;

266 *
c⁄figfûe
=
NULL
;

267 *
md
=
NULL
;

268 *
pﬁicy
=
NULL
;

269 *
keyfûe
=
NULL
;

270 *
˚πfûe
=
NULL
;

271 
keyf‹m
=
FORMAT_PEM
;

272 *
öfûe
=
NULL
;

273 *
•kac_fûe
=
NULL
;

274 *
ss_˚π_fûe
=
NULL
;

275 *
£r_°©us
=
NULL
;

276 
EVP_PKEY
 *
pkey
=
NULL
;

277 
ouçut_dî
 = 0;

278 *
outfûe
=
NULL
;

279 *
outdú
=
NULL
;

280 *
£rülfûe
=
NULL
;

281 *
¸ umbîfûe
=
NULL
;

282 *
exãnsi⁄s
=
NULL
;

283 *
extfûe
=
NULL
;

284 *
subj
=
NULL
;

285 
chty≥
 = 
MBSTRING_ASC
;

286 
mu…údn
 = 0;

287 *
tmp_emaû_dn
=
NULL
;

288 *
¸l_ext
=
NULL
;

289 
ªv_ty≥
 = 
REV_NONE
;

290 *
ªv_¨g
 = 
NULL
;

291 
BIGNUM
 *
£rül
=
NULL
;

292 
BIGNUM
 *
¸ umbî
=
NULL
;

293 *
°¨td©e
=
NULL
;

294 *
ídd©e
=
NULL
;

295 
days
=0;

296 
b©ch
=0;

297 
nŸext
=0;

298 
«me›t
 = 0, 
˚π›t
 = 0;

299 
deÁu…_›
 = 1;

300 
ext_c›y
 = 
EXT_COPY_NONE
;

301 
£lfsign
 = 0;

302 
X509
 *
x509
=
NULL
, *
x509p
 = NULL;

303 
X509
 *
x
=
NULL
;

304 
BIO
 *
ö
=
NULL
,*
out
=NULL,*
Sout
=NULL,*
Cout
=NULL;

305 *
dbfûe
=
NULL
;

306 
CA_DB
 *
db
=
NULL
;

307 
X509_CRL
 *
¸l
=
NULL
;

308 
X509_REVOKED
 *
r
=
NULL
;

309 
ASN1_TIME
 *
tm±m
;

310 
ASN1_INTEGER
 *
tmp£r
;

311 *
f
;

312 c⁄° *
p
;

313 * c⁄° *
µ
;

314 
i
,
j
;

315 c⁄° 
EVP_MD
 *
dg°
=
NULL
;

316 
	`STACK_OF
(
CONF_VALUE
Ë*
©åibs
=
NULL
;

317 
	`STACK_OF
(
X509
Ë*
˚π_sk
=
NULL
;

318 
	`STACK_OF
(
OPENSSL_STRING
Ë*
sig›ts
 = 
NULL
;

319 #unde‡
BSIZE


320 
	#BSIZE
 256

	)

321 
MS_STATIC
 
buf
[3][
BSIZE
];

322 *
øndfûe
=
NULL
;

323 #i‚de‡
OPENSSL_NO_ENGINE


324 *
ígöe
 = 
NULL
;

326 *
to‰ì
=
NULL
;

327 
DB_ATTR
 
db_©å
;

329 #ifde‡
EFENCE


330 
EF_PROTECT_FREE
=1;

331 
EF_PROTECT_BELOW
=1;

332 
EF_ALIGNMENT
=0;

335 
	`≠ps_°¨tup
();

337 
c⁄f
 = 
NULL
;

338 
key
 = 
NULL
;

339 
£˘i⁄
 = 
NULL
;

341 
¥e£rve
=0;

342 
msõ_hack
=0;

343 i‡(
bio_îr
 =
NULL
)

344 i‡((
bio_îr
=
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

345 
	`BIO_£t_Â
(
bio_îr
,
°dîr
,
BIO_NOCLOSE
|
BIO_FP_TEXT
);

347 
¨gc
--;

348 
¨gv
++;

349 
¨gc
 >= 1)

351 i‡(
	`°rcmp
(*
¨gv
,"-verbose") == 0)

352 
vîbo£
=1;

353 i‡(
	`°rcmp
(*
¨gv
,"-config") == 0)

355 i‡(--
¨gc
 < 1Ë
bad
;

356 
c⁄figfûe
*(++
¨gv
);

358 i‡(
	`°rcmp
(*
¨gv
,"-name") == 0)

360 i‡(--
¨gc
 < 1Ë
bad
;

361 
£˘i⁄
*(++
¨gv
);

363 i‡(
	`°rcmp
(*
¨gv
,"-subj") == 0)

365 i‡(--
¨gc
 < 1Ë
bad
;

366 
subj
*(++
¨gv
);

369 i‡(
	`°rcmp
(*
¨gv
,"-utf8") == 0)

370 
chty≥
 = 
MBSTRING_UTF8
;

371 i‡(
	`°rcmp
(*
¨gv
,"-create_serial") == 0)

372 
¸óã_£r
 = 1;

373 i‡(
	`°rcmp
(*
¨gv
,"-multivalue-rdn") == 0)

374 
mu…údn
=1;

375 i‡(
	`°rcmp
(*
¨gv
,"-startdate") == 0)

377 i‡(--
¨gc
 < 1Ë
bad
;

378 
°¨td©e
*(++
¨gv
);

380 i‡(
	`°rcmp
(*
¨gv
,"-enddate") == 0)

382 i‡(--
¨gc
 < 1Ë
bad
;

383 
ídd©e
*(++
¨gv
);

385 i‡(
	`°rcmp
(*
¨gv
,"-days") == 0)

387 i‡(--
¨gc
 < 1Ë
bad
;

388 
days
=
	`©oi
(*(++
¨gv
));

390 i‡(
	`°rcmp
(*
¨gv
,"-md") == 0)

392 i‡(--
¨gc
 < 1Ë
bad
;

393 
md
*(++
¨gv
);

395 i‡(
	`°rcmp
(*
¨gv
,"-policy") == 0)

397 i‡(--
¨gc
 < 1Ë
bad
;

398 
pﬁicy
*(++
¨gv
);

400 i‡(
	`°rcmp
(*
¨gv
,"-keyfile") == 0)

402 i‡(--
¨gc
 < 1Ë
bad
;

403 
keyfûe
*(++
¨gv
);

405 i‡(
	`°rcmp
(*
¨gv
,"-keyform") == 0)

407 i‡(--
¨gc
 < 1Ë
bad
;

408 
keyf‹m
=
	`°r2fmt
(*(++
¨gv
));

410 i‡(
	`°rcmp
(*
¨gv
,"-passin") == 0)

412 i‡(--
¨gc
 < 1Ë
bad
;

413 
∑sßrgö
*(++
¨gv
);

415 i‡(
	`°rcmp
(*
¨gv
,"-key") == 0)

417 i‡(--
¨gc
 < 1Ë
bad
;

418 
key
*(++
¨gv
);

420 i‡(
	`°rcmp
(*
¨gv
,"-cert") == 0)

422 i‡(--
¨gc
 < 1Ë
bad
;

423 
˚πfûe
*(++
¨gv
);

425 i‡(
	`°rcmp
(*
¨gv
,"-selfsign") == 0)

426 
£lfsign
=1;

427 i‡(
	`°rcmp
(*
¨gv
,"-in") == 0)

429 i‡(--
¨gc
 < 1Ë
bad
;

430 
öfûe
*(++
¨gv
);

431 
ªq
=1;

433 i‡(
	`°rcmp
(*
¨gv
,"-out") == 0)

435 i‡(--
¨gc
 < 1Ë
bad
;

436 
outfûe
*(++
¨gv
);

438 i‡(
	`°rcmp
(*
¨gv
,"-outdir") == 0)

440 i‡(--
¨gc
 < 1Ë
bad
;

441 
outdú
*(++
¨gv
);

443 i‡(
	`°rcmp
(*
¨gv
,"-sigopt") == 0)

445 i‡(--
¨gc
 < 1)

446 
bad
;

447 i‡(!
sig›ts
)

448 
sig›ts
 = 
	`sk_OPENSSL_STRING_√w_nuŒ
();

449 i‡(!
sig›ts
 || !
	`sk_OPENSSL_STRING_push
(sig›ts, *(++
¨gv
)))

450 
bad
;

452 i‡(
	`°rcmp
(*
¨gv
,"-notext") == 0)

453 
nŸext
=1;

454 i‡(
	`°rcmp
(*
¨gv
,"-batch") == 0)

455 
b©ch
=1;

456 i‡(
	`°rcmp
(*
¨gv
,"-preserveDN") == 0)

457 
¥e£rve
=1;

458 i‡(
	`°rcmp
(*
¨gv
,"-noemailDN") == 0)

459 
emaû_dn
=0;

460 i‡(
	`°rcmp
(*
¨gv
,"-gencrl") == 0)

461 
gí¸l
=1;

462 i‡(
	`°rcmp
(*
¨gv
,"-msie_hack") == 0)

463 
msõ_hack
=1;

464 i‡(
	`°rcmp
(*
¨gv
,"-crldays") == 0)

466 i‡(--
¨gc
 < 1Ë
bad
;

467 
¸ldays

	`©ﬁ
(*(++
¨gv
));

469 i‡(
	`°rcmp
(*
¨gv
,"-crlhours") == 0)

471 i‡(--
¨gc
 < 1Ë
bad
;

472 
¸lhours

	`©ﬁ
(*(++
¨gv
));

474 i‡(
	`°rcmp
(*
¨gv
,"-crlsec") == 0)

476 i‡(--
¨gc
 < 1Ë
bad
;

477 
¸l£c
 = 
	`©ﬁ
(*(++
¨gv
));

479 i‡(
	`°rcmp
(*
¨gv
,"-infiles") == 0)

481 
¨gc
--;

482 
¨gv
++;

483 
ªq
=1;

486 i‡(
	`°rcmp
(*
¨gv
, "-ss_cert") == 0)

488 i‡(--
¨gc
 < 1Ë
bad
;

489 
ss_˚π_fûe
 = *(++
¨gv
);

490 
ªq
=1;

492 i‡(
	`°rcmp
(*
¨gv
, "-spkac") == 0)

494 i‡(--
¨gc
 < 1Ë
bad
;

495 
•kac_fûe
 = *(++
¨gv
);

496 
ªq
=1;

498 i‡(
	`°rcmp
(*
¨gv
,"-revoke") == 0)

500 i‡(--
¨gc
 < 1Ë
bad
;

501 
öfûe
*(++
¨gv
);

502 
d‹evoke
=1;

504 i‡(
	`°rcmp
(*
¨gv
,"-extensions") == 0)

506 i‡(--
¨gc
 < 1Ë
bad
;

507 
exãnsi⁄s
*(++
¨gv
);

509 i‡(
	`°rcmp
(*
¨gv
,"-extfile") == 0)

511 i‡(--
¨gc
 < 1Ë
bad
;

512 
extfûe
*(++
¨gv
);

514 i‡(
	`°rcmp
(*
¨gv
,"-status") == 0)

516 i‡(--
¨gc
 < 1Ë
bad
;

517 
£r_°©us
*(++
¨gv
);

519 i‡(
	`°rcmp
(*
¨gv
,"-updatedb") == 0)

521 
doupd©edb
=1;

523 i‡(
	`°rcmp
(*
¨gv
,"-crlexts") == 0)

525 i‡(--
¨gc
 < 1Ë
bad
;

526 
¸l_ext
*(++
¨gv
);

528 i‡(
	`°rcmp
(*
¨gv
,"-crl_reason") == 0)

530 i‡(--
¨gc
 < 1Ë
bad
;

531 
ªv_¨g
 = *(++
¨gv
);

532 
ªv_ty≥
 = 
REV_CRL_REASON
;

534 i‡(
	`°rcmp
(*
¨gv
,"-crl_hold") == 0)

536 i‡(--
¨gc
 < 1Ë
bad
;

537 
ªv_¨g
 = *(++
¨gv
);

538 
ªv_ty≥
 = 
REV_HOLD
;

540 i‡(
	`°rcmp
(*
¨gv
,"-crl_compromise") == 0)

542 i‡(--
¨gc
 < 1Ë
bad
;

543 
ªv_¨g
 = *(++
¨gv
);

544 
ªv_ty≥
 = 
REV_KEY_COMPROMISE
;

546 i‡(
	`°rcmp
(*
¨gv
,"-crl_CA_compromise") == 0)

548 i‡(--
¨gc
 < 1Ë
bad
;

549 
ªv_¨g
 = *(++
¨gv
);

550 
ªv_ty≥
 = 
REV_CA_COMPROMISE
;

552 #i‚de‡
OPENSSL_NO_ENGINE


553 i‡(
	`°rcmp
(*
¨gv
,"-engine") == 0)

555 i‡(--
¨gc
 < 1Ë
bad
;

556 
ígöe
*(++
¨gv
);

561 
bad
:

562 
	`BIO_¥ötf
(
bio_îr
,"unknow¿›ti⁄ %s\n",*
¨gv
);

563 
bad›s
=1;

566 
¨gc
--;

567 
¨gv
++;

570 i‡(
bad›s
)

572 c⁄° **
µ2
;

574 
µ2
=
ˇ_ußge
; (*µ2 !
NULL
);Öp2++)

575 
	`BIO_¥ötf
(
bio_îr
,"%s",*
µ2
);

576 
îr
;

579 
	`ERR_lﬂd_¸y±o_°rögs
();

582 
to‰ì
=
NULL
;

583 i‡(
c⁄figfûe
 =
NULL
Ëc⁄figfûê
	`gëív
("OPENSSL_CONF");

584 i‡(
c⁄figfûe
 =
NULL
Ëc⁄figfûê
	`gëív
("SSLEAY_CONF");

585 i‡(
c⁄figfûe
 =
NULL
)

587 c⁄° *
s
=
	`X509_gë_deÁu…_˚π_¨ó
();

588 
size_t
 
Àn
;

590 #ifde‡
OPENSSL_SYS_VMS


591 
Àn
 = 
	`°æí
(
s
)+(
CONFIG_FILE
);

592 
to‰ì
=
	`OPENSSL_mÆloc
(
Àn
);

593 
	`°r˝y
(
to‰ì
,
s
);

595 
Àn
 = 
	`°æí
(
s
)+(
CONFIG_FILE
)+1;

596 
to‰ì
=
	`OPENSSL_mÆloc
(
Àn
);

597 
	`BUF_°æ˝y
(
to‰ì
,
s
,
Àn
);

598 
	`BUF_°æˇt
(
to‰ì
,"/",
Àn
);

600 
	`BUF_°æˇt
(
to‰ì
,
CONFIG_FILE
,
Àn
);

601 
c⁄figfûe
=
to‰ì
;

604 
	`BIO_¥ötf
(
bio_îr
,"Usög c⁄figuøti⁄ from %s\n",
c⁄figfûe
);

605 
c⁄f
 = 
	`NCONF_√w
(
NULL
);

606 i‡(
	`NCONF_lﬂd
(
c⁄f
,
c⁄figfûe
,&
îr‹löe
) <= 0)

608 i‡(
îr‹löe
 <= 0)

609 
	`BIO_¥ötf
(
bio_îr
,"errorÜoadingÅhe config file '%s'\n",

610 
c⁄figfûe
);

612 
	`BIO_¥ötf
(
bio_îr
,"error onÜine %ld of config file '%s'\n"

613 ,
îr‹löe
,
c⁄figfûe
);

614 
îr
;

616 if(
to‰ì
)

618 
	`OPENSSL_‰ì
(
to‰ì
);

619 
to‰ì
 = 
NULL
;

622 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
c⁄f
))

623 
îr
;

625 #i‚de‡
OPENSSL_NO_ENGINE


626 
e
 = 
	`£tup_ígöe
(
bio_îr
, 
ígöe
, 0);

630 i‡(
£˘i⁄
 =
NULL
)

632 
£˘i⁄
=
	`NCONF_gë_°rög
(
c⁄f
,
BASE_SECTION
,
ENV_DEFAULT_CA
);

633 i‡(
£˘i⁄
 =
NULL
)

635 
	`lookup_Áû
(
BASE_SECTION
,
ENV_DEFAULT_CA
);

636 
îr
;

640 i‡(
c⁄f
 !
NULL
)

642 
p
=
	`NCONF_gë_°rög
(
c⁄f
,
NULL
,"oid_file");

643 i‡(
p
 =
NULL
)

644 
	`ERR_˛ór_îr‹
();

645 i‡(
p
 !
NULL
)

647 
BIO
 *
oid_bio
;

649 
oid_bio
=
	`BIO_√w_fûe
(
p
,"r");

650 i‡(
oid_bio
 =
NULL
)

656 
	`ERR_˛ór_îr‹
();

660 
	`OBJ_¸óã_obje˘s
(
oid_bio
);

661 
	`BIO_‰ì
(
oid_bio
);

664 i‡(!
	`add_oid_£˘i⁄
(
bio_îr
,
c⁄f
))

666 
	`ERR_¥öt_îr‹s
(
bio_îr
);

667 
îr
;

671 
øndfûe
 = 
	`NCONF_gë_°rög
(
c⁄f
, 
BASE_SECTION
, "RANDFILE");

672 i‡(
øndfûe
 =
NULL
)

673 
	`ERR_˛ór_îr‹
();

674 
	`≠p_RAND_lﬂd_fûe
(
øndfûe
, 
bio_îr
, 0);

676 
f
 = 
	`NCONF_gë_°rög
(
c⁄f
, 
£˘i⁄
, 
STRING_MASK
);

677 i‡(!
f
)

678 
	`ERR_˛ór_îr‹
();

680 if(
f
 && !
	`ASN1_STRING_£t_deÁu…_mask_asc
(f)) {

681 
	`BIO_¥ötf
(
bio_îr
, "InvÆid globÆ såög mask sëtög %s\n", 
f
);

682 
îr
;

685 i‡(
chty≥
 !
MBSTRING_UTF8
){

686 
f
 = 
	`NCONF_gë_°rög
(
c⁄f
, 
£˘i⁄
, 
UTF8_IN
);

687 i‡(!
f
)

688 
	`ERR_˛ór_îr‹
();

689 i‡(!
	`°rcmp
(
f
, "yes"))

690 
chty≥
 = 
MBSTRING_UTF8
;

693 
db_©å
.
unique_subje˘
 = 1;

694 
p
 = 
	`NCONF_gë_°rög
(
c⁄f
, 
£˘i⁄
, 
ENV_UNIQUE_SUBJECT
);

695 i‡(
p
)

697 #ifde‡
RL_DEBUG


698 
	`BIO_¥ötf
(
bio_îr
, "DEBUG: unique_subje˘ = \"%s\"\n", 
p
);

700 
db_©å
.
unique_subje˘
 = 
	`∑r£_ye¢o
(
p
,1);

703 
	`ERR_˛ór_îr‹
();

704 #ifde‡
RL_DEBUG


705 i‡(!
p
)

706 
	`BIO_¥ötf
(
bio_îr
, "DEBUG: unique_subje˘ undeföed\n", 
p
);

708 #ifde‡
RL_DEBUG


709 
	`BIO_¥ötf
(
bio_îr
, "DEBUG: configured unique_subject is %d\n",

710 
db_©å
.
unique_subje˘
);

713 
ö
=
	`BIO_√w
(
	`BIO_s_fûe
());

714 
out
=
	`BIO_√w
(
	`BIO_s_fûe
());

715 
Sout
=
	`BIO_√w
(
	`BIO_s_fûe
());

716 
Cout
=
	`BIO_√w
(
	`BIO_s_fûe
());

717 i‡((
ö
 =
NULL
Ë|| (
out
 =NULLË|| (
Sout
 =NULLË|| (
Cout
 == NULL))

719 
	`ERR_¥öt_îr‹s
(
bio_îr
);

720 
îr
;

725 i‡(
£r_°©us
)

727 i‡((
dbfûe
=
	`NCONF_gë_°rög
(
c⁄f
,
£˘i⁄
,
ENV_DATABASE
)Ë=
NULL
)

729 
	`lookup_Áû
(
£˘i⁄
,
ENV_DATABASE
);

730 
îr
;

732 
db
 = 
	`lﬂd_ödex
(
dbfûe
,&
db_©å
);

733 i‡(
db
 =
NULL
Ë
îr
;

735 i‡(!
	`ödex_ödex
(
db
)Ë
îr
;

737 i‡(
	`gë_˚πifiˇã_°©us
(
£r_°©us
,
db
) != 1)

738 
	`BIO_¥ötf
(
bio_îr
,"Error verifying serial %s!\n",

739 
£r_°©us
);

740 
îr
;

746 i‡((
keyfûe
 =
NULL
Ë&& ((keyfûe=
	`NCONF_gë_°rög
(
c⁄f
,

747 
£˘i⁄
,
ENV_PRIVATE_KEY
)Ë=
NULL
))

749 
	`lookup_Áû
(
£˘i⁄
,
ENV_PRIVATE_KEY
);

750 
îr
;

752 i‡(!
key
)

754 
‰ì_key
 = 1;

755 i‡(!
	`≠p_∑sswd
(
bio_îr
, 
∑sßrgö
, 
NULL
, &
key
, NULL))

757 
	`BIO_¥ötf
(
bio_îr
,"Error gettingÖassword\n");

758 
îr
;

761 
pkey
 = 
	`lﬂd_key
(
bio_îr
, 
keyfûe
, 
keyf‹m
, 0, 
key
, 
e
,

763 i‡(
key
Ë
	`OPENSSL_˛ón£
(key,
	`°æí
(key));

764 i‡(
pkey
 =
NULL
)

767 
îr
;

772 i‡(!
£lfsign
 || 
•kac_fûe
 || 
ss_˚π_fûe
 || 
gí¸l
)

774 i‡((
˚πfûe
 =
NULL
)

775 && ((
˚πfûe
=
	`NCONF_gë_°rög
(
c⁄f
,

776 
£˘i⁄
,
ENV_CERTIFICATE
)Ë=
NULL
))

778 
	`lookup_Áû
(
£˘i⁄
,
ENV_CERTIFICATE
);

779 
îr
;

781 
x509
=
	`lﬂd_˚π
(
bio_îr
, 
˚πfûe
, 
FORMAT_PEM
, 
NULL
, 
e
,

783 i‡(
x509
 =
NULL
)

784 
îr
;

786 i‡(!
	`X509_check_¥iv©e_key
(
x509
,
pkey
))

788 
	`BIO_¥ötf
(
bio_îr
,"CA certificateánd CAÖrivate key doÇot match\n");

789 
îr
;

792 i‡(!
£lfsign
Ë
x509p
 = 
x509
;

794 
f
=
	`NCONF_gë_°rög
(
c⁄f
,
BASE_SECTION
,
ENV_PRESERVE
);

795 i‡(
f
 =
NULL
)

796 
	`ERR_˛ór_îr‹
();

797 i‡((
f
 !
NULL
) && ((*f == 'y') || (*f == 'Y')))

798 
¥e£rve
=1;

799 
f
=
	`NCONF_gë_°rög
(
c⁄f
,
BASE_SECTION
,
ENV_MSIE_HACK
);

800 i‡(
f
 =
NULL
)

801 
	`ERR_˛ór_îr‹
();

802 i‡((
f
 !
NULL
) && ((*f == 'y') || (*f == 'Y')))

803 
msõ_hack
=1;

805 
f
=
	`NCONF_gë_°rög
(
c⁄f
,
£˘i⁄
,
ENV_NAMEOPT
);

807 i‡(
f
)

809 i‡(!
	`£t_«me_ex
(&
«me›t
, 
f
))

811 
	`BIO_¥ötf
(
bio_îr
, "InvÆidÇamê›ti⁄s: \"%s\"\n", 
f
);

812 
îr
;

814 
deÁu…_›
 = 0;

817 
	`ERR_˛ór_îr‹
();

819 
f
=
	`NCONF_gë_°rög
(
c⁄f
,
£˘i⁄
,
ENV_CERTOPT
);

821 i‡(
f
)

823 i‡(!
	`£t_˚π_ex
(&
˚π›t
, 
f
))

825 
	`BIO_¥ötf
(
bio_îr
, "InvÆid cîtifiˇã o±i⁄s: \"%s\"\n", 
f
);

826 
îr
;

828 
deÁu…_›
 = 0;

831 
	`ERR_˛ór_îr‹
();

833 
f
=
	`NCONF_gë_°rög
(
c⁄f
,
£˘i⁄
,
ENV_EXTCOPY
);

835 i‡(
f
)

837 i‡(!
	`£t_ext_c›y
(&
ext_c›y
, 
f
))

839 
	`BIO_¥ötf
(
bio_îr
, "InvÆidÉxãnsi⁄ c›y o±i⁄: \"%s\"\n", 
f
);

840 
îr
;

844 
	`ERR_˛ór_îr‹
();

848 i‡((
outdú
 =
NULL
Ë&& (
ªq
))

851 i‡((
outdú
=
	`NCONF_gë_°rög
(
c⁄f
,
£˘i⁄
,
ENV_NEW_CERTS_DIR
))

852 =
NULL
)

854 
	`BIO_¥ötf
(
bio_îr
,"thereÇeedsÅo be definedá directory forÇew certificateÅo beÖlaced in\n");

855 
îr
;

857 #i‚de‡
OPENSSL_SYS_VMS


868 #i‚de‡
_WIN32


869 i‡(
	`ac˚ss
(
outdú
,
R_OK
|
W_OK
|
X_OK
) != 0)

871 i‡(
	`_ac˚ss
(
outdú
,
R_OK
|
W_OK
|
X_OK
) != 0)

874 
	`BIO_¥ötf
(
bio_îr
,"Iám u«bÀÅÿac˚s†thê%†dúe˘‹y\n",
outdú
);

875 
	`≥º‹
(
outdú
);

876 
îr
;

879 i‡(
	`≠p_isdú
(
outdú
)<=0)

881 
	`BIO_¥ötf
(
bio_îr
,"%†√edÅÿbê®dúe˘‹y\n",
outdú
);

882 
	`≥º‹
(
outdú
);

883 
îr
;

890 i‡((
dbfûe
=
	`NCONF_gë_°rög
(
c⁄f
,
£˘i⁄
,
ENV_DATABASE
)Ë=
NULL
)

892 
	`lookup_Áû
(
£˘i⁄
,
ENV_DATABASE
);

893 
îr
;

895 
db
 = 
	`lﬂd_ödex
(
dbfûe
, &
db_©å
);

896 i‡(
db
 =
NULL
Ë
îr
;

899 
i
=0; i<
	`sk_OPENSSL_PSTRING_num
(
db
->db->
d©a
); i++)

901 
µ
=
	`sk_OPENSSL_PSTRING_vÆue
(
db
->db->
d©a
,
i
);

902 i‡((
µ
[
DB_ty≥
][0] !
DB_TYPE_REV
) &&

903 (
µ
[
DB_ªv_d©e
][0] != '\0'))

905 
	`BIO_¥ötf
(
bio_îr
,"íåy %d:ÇŸÑevoked yë, buàha†®ªvoˇti⁄ d©e\n",
i
+1);

906 
îr
;

908 i‡((
µ
[
DB_ty≥
][0] =
DB_TYPE_REV
) &&

909 !
	`make_ªvoked
(
NULL
, 
µ
[
DB_ªv_d©e
]))

911 
	`BIO_¥ötf
(
bio_îr
," i¿íåy %d\n", 
i
+1);

912 
îr
;

914 i‡(!
	`check_time_f‹m©
((*)
µ
[
DB_exp_d©e
]))

916 
	`BIO_¥ötf
(
bio_îr
,"íåy %d: invÆidÉxpúy d©e\n",
i
+1);

917 
îr
;

919 
p
=
µ
[
DB_£rül
];

920 
j
=
	`°æí
(
p
);

921 i‡(*
p
 == '-')

923 
p
++;

924 
j
--;

926 i‡((
j
&1) || (j < 2))

928 
	`BIO_¥ötf
(
bio_îr
,"íåy %d: bad sîü»numbîÜígth (%d)\n",
i
+1,
j
);

929 
îr
;

931 *
p
)

933 i‡(!–((*
p
 >= '0') && (*p <= '9')) ||

934 ((*
p
 >= 'A') && (*p <= 'F')) ||

935 ((*
p
 >= 'a') && (*p <= 'f'))) )

937 
	`BIO_¥ötf
(
bio_îr
,"íåy %d: bad sîü»numbî ch¨a˘îs, ch¨Öo†%ld, ch¨ i†'%c'\n",
i
+1,()(
p
-
µ
[
DB_£rül
]),*p);

938 
îr
;

940 
p
++;

943 i‡(
vîbo£
)

945 
	`BIO_£t_Â
(
out
,
°dout
,
BIO_NOCLOSE
|
BIO_FP_TEXT
);

946 #ifde‡
OPENSSL_SYS_VMS


948 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

949 
out
 = 
	`BIO_push
(
tmpbio
, out);

952 
	`TXT_DB_wrôe
(
out
,
db
->db);

953 
	`BIO_¥ötf
(
bio_îr
,"%dÉntriesÜoaded fromÅhe database\n",

954 
	`sk_OPENSSL_PSTRING_num
(
db
->db->
d©a
));

955 
	`BIO_¥ötf
(
bio_îr
,"generating index\n");

958 i‡(!
	`ödex_ödex
(
db
)Ë
îr
;

962 i‡(
doupd©edb
)

964 i‡(
vîbo£
)

965 
	`BIO_¥ötf
(
bio_îr
, "Updating %s ...\n",

966 
dbfûe
);

968 
i
 = 
	`do_upd©edb
(
db
);

969 i‡(
i
 == -1)

971 
	`BIO_¥ötf
(
bio_îr
,"Malloc failure\n");

972 
îr
;

974 i‡(
i
 == 0)

976 i‡(
vîbo£
Ë
	`BIO_¥ötf
(
bio_îr
,

981 i‡(!
	`ßve_ödex
(
dbfûe
,"√w",
db
)Ë
îr
;

983 i‡(!
	`rŸ©e_ödex
(
dbfûe
,"√w","ﬁd")Ë
îr
;

985 i‡(
vîbo£
Ë
	`BIO_¥ötf
(
bio_îr
,

986 "D⁄e. %dÉ¡rõ†m¨kedá†expúed\n",
i
);

992 i‡(
extfûe
)

994 
extc⁄f
 = 
	`NCONF_√w
(
NULL
);

995 i‡(
	`NCONF_lﬂd
(
extc⁄f
,
extfûe
,&
îr‹löe
) <= 0)

997 i‡(
îr‹löe
 <= 0)

998 
	`BIO_¥ötf
(
bio_îr
, "ERROR:ÜoadingÅhe config file '%s'\n",

999 
extfûe
);

1001 
	`BIO_¥ötf
(
bio_îr
, "ERROR: onÜine %ld of config file '%s'\n",

1002 
îr‹löe
,
extfûe
);

1003 
ªt
 = 1;

1004 
îr
;

1007 i‡(
vîbo£
)

1008 
	`BIO_¥ötf
(
bio_îr
, "Suc˚ssfuŒyÜﬂdedÉxãnsi⁄†fûê%s\n", 
extfûe
);

1011 i‡(!
exãnsi⁄s
 && !”xãnsi⁄†
	`NCONF_gë_°rög
(
extc⁄f
, "default", "extensions")))

1012 
exãnsi⁄s
 = "default";

1016 i‡(
ªq
 || 
gí¸l
)

1018 i‡(
outfûe
 !
NULL
)

1020 i‡(
	`BIO_wrôe_fûíame
(
Sout
,
outfûe
) <= 0)

1022 
	`≥º‹
(
outfûe
);

1023 
îr
;

1028 
	`BIO_£t_Â
(
Sout
,
°dout
,
BIO_NOCLOSE
|
BIO_FP_TEXT
);

1029 #ifde‡
OPENSSL_SYS_VMS


1031 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

1032 
Sout
 = 
	`BIO_push
(
tmpbio
, Sout);

1038 i‡((
md
 =
NULL
Ë&& ((md=
	`NCONF_gë_°rög
(
c⁄f
,

1039 
£˘i⁄
,
ENV_DEFAULT_MD
)Ë=
NULL
))

1041 
	`lookup_Áû
(
£˘i⁄
,
ENV_DEFAULT_MD
);

1042 
îr
;

1045 i‡(!
	`°rcmp
(
md
, "default"))

1047 
def_nid
;

1048 i‡(
	`EVP_PKEY_gë_deÁu…_dige°_nid
(
pkey
, &
def_nid
) <= 0)

1050 
	`BIO_puts
(
bio_îr
,"no default digest\n");

1051 
îr
;

1053 
md
 = (*)
	`OBJ_nid2¢
(
def_nid
);

1056 i‡((
dg°
=
	`EVP_gë_dige°by«me
(
md
)Ë=
NULL
)

1058 
	`BIO_¥ötf
(
bio_îr
,"%†i†™ unsuµ‹ãd mesßgêdige°Åy≥\n",
md
);

1059 
îr
;

1062 i‡(
ªq
)

1064 i‡((
emaû_dn
 =1Ë&& ((
tmp_emaû_dn
=
	`NCONF_gë_°rög
(
c⁄f
,

1065 
£˘i⁄
,
ENV_DEFAULT_EMAIL_DN
)Ë!
NULL
 ))

1067 if(
	`°rcmp
(
tmp_emaû_dn
,"no") == 0)

1068 
emaû_dn
=0;

1070 i‡(
vîbo£
)

1071 
	`BIO_¥ötf
(
bio_îr
,"message digest is %s\n",

1072 
	`OBJ_nid2 
(
dg°
->
ty≥
));

1073 i‡((
pﬁicy
 =
NULL
Ë&& (’ﬁicy=
	`NCONF_gë_°rög
(
c⁄f
,

1074 
£˘i⁄
,
ENV_POLICY
)Ë=
NULL
))

1076 
	`lookup_Áû
(
£˘i⁄
,
ENV_POLICY
);

1077 
îr
;

1079 i‡(
vîbo£
)

1080 
	`BIO_¥ötf
(
bio_îr
,"pﬁicy i†%s\n",
pﬁicy
);

1082 i‡((
£rülfûe
=
	`NCONF_gë_°rög
(
c⁄f
,
£˘i⁄
,
ENV_SERIAL
))

1083 =
NULL
)

1085 
	`lookup_Áû
(
£˘i⁄
,
ENV_SERIAL
);

1086 
îr
;

1089 i‡(!
extc⁄f
)

1093 i‡(!
exãnsi⁄s
)

1095 
exãnsi⁄s
=
	`NCONF_gë_°rög
(
c⁄f
,
£˘i⁄
,

1096 
ENV_EXTENSIONS
);

1097 i‡(!
exãnsi⁄s
)

1098 
	`ERR_˛ór_îr‹
();

1100 i‡(
exãnsi⁄s
)

1103 
X509V3_CTX
 
˘x
;

1104 
	`X509V3_£t_˘x_ã°
(&
˘x
);

1105 
	`X509V3_£t_nc⁄f
(&
˘x
, 
c⁄f
);

1106 i‡(!
	`X509V3_EXT_add_nc⁄f
(
c⁄f
, &
˘x
, 
exãnsi⁄s
,

1107 
NULL
))

1109 
	`BIO_¥ötf
(
bio_îr
,

1111 
exãnsi⁄s
);

1112 
ªt
 = 1;

1113 
îr
;

1118 i‡(
°¨td©e
 =
NULL
)

1120 
°¨td©e
=
	`NCONF_gë_°rög
(
c⁄f
,
£˘i⁄
,

1121 
ENV_DEFAULT_STARTDATE
);

1122 i‡(
°¨td©e
 =
NULL
)

1123 
	`ERR_˛ór_îr‹
();

1125 i‡(
°¨td©e
 && !
	`ASN1_TIME_£t_°rög
(
NULL
, startdate))

1127 
	`BIO_¥ötf
(
bio_îr
,"start date is invalid, it should be YYMMDDHHMMSSZ or YYYYMMDDHHMMSSZ\n");

1128 
îr
;

1130 i‡(
°¨td©e
 =
NULL
) startdate="today";

1132 i‡(
ídd©e
 =
NULL
)

1134 
ídd©e
=
	`NCONF_gë_°rög
(
c⁄f
,
£˘i⁄
,

1135 
ENV_DEFAULT_ENDDATE
);

1136 i‡(
ídd©e
 =
NULL
)

1137 
	`ERR_˛ór_îr‹
();

1139 i‡(
ídd©e
 && !
	`ASN1_TIME_£t_°rög
(
NULL
,Énddate))

1141 
	`BIO_¥ötf
(
bio_îr
,"end date is invalid, it should be YYMMDDHHMMSSZ or YYYYMMDDHHMMSSZ\n");

1142 
îr
;

1145 i‡(
days
 == 0)

1147 if(!
	`NCONF_gë_numbî
(
c⁄f
,
£˘i⁄
, 
ENV_DEFAULT_DAYS
, &
days
))

1148 
days
 = 0;

1150 i‡(!
ídd©e
 && (
days
 == 0))

1152 
	`BIO_¥ötf
(
bio_îr
,"cannotÜookup how many daysÅo certify for\n");

1153 
îr
;

1156 i‡((
£rül
=
	`lﬂd_£rül
(
£rülfûe
, 
¸óã_£r
, 
NULL
)) == NULL)

1158 
	`BIO_¥ötf
(
bio_îr
,"error whileÜoading serialÇumber\n");

1159 
îr
;

1161 i‡(
vîbo£
)

1163 i‡(
	`BN_is_zîo
(
£rül
))

1164 
	`BIO_¥ötf
(
bio_îr
,"next serialÇumber is 00\n");

1167 i‡((
f
=
	`BN_bn2hex
(
£rül
)Ë=
NULL
Ë
îr
;

1168 
	`BIO_¥ötf
(
bio_îr
,"√xà£rü»numbî i†%s\n",
f
);

1169 
	`OPENSSL_‰ì
(
f
);

1173 i‡((
©åibs
=
	`NCONF_gë_£˘i⁄
(
c⁄f
,
pﬁicy
)Ë=
NULL
)

1175 
	`BIO_¥ötf
(
bio_îr
,"u«bÀÅÿföd '£˘i⁄' f‹ %s\n",
pﬁicy
);

1176 
îr
;

1179 i‡((
˚π_sk
=
	`sk_X509_√w_nuŒ
()Ë=
NULL
)

1181 
	`BIO_¥ötf
(
bio_îr
,"Memoryállocation failure\n");

1182 
îr
;

1184 i‡(
•kac_fûe
 !
NULL
)

1186 
tŸÆ
++;

1187 
j
=
	`˚πify_•kac
(&
x
,
•kac_fûe
,
pkey
,
x509
,
dg°
,
sig›ts
,

1188 
©åibs
,
db
, 
£rül
,
subj
,
chty≥
,
mu…údn
,

1189 
emaû_dn
,
°¨td©e
,
ídd©e
,
days
,
exãnsi⁄s
,

1190 
c⁄f
,
vîbo£
,
˚π›t
,
«me›t
,
deÁu…_›
,
ext_c›y
);

1191 i‡(
j
 < 0Ë
îr
;

1192 i‡(
j
 > 0)

1194 
tŸÆ_d⁄e
++;

1195 
	`BIO_¥ötf
(
bio_îr
,"\n");

1196 i‡(!
	`BN_add_w‹d
(
£rül
,1)Ë
îr
;

1197 i‡(!
	`sk_X509_push
(
˚π_sk
,
x
))

1199 
	`BIO_¥ötf
(
bio_îr
,"Memoryállocation failure\n");

1200 
îr
;

1202 i‡(
outfûe
)

1204 
ouçut_dî
 = 1;

1205 
b©ch
 = 1;

1209 i‡(
ss_˚π_fûe
 !
NULL
)

1211 
tŸÆ
++;

1212 
j
=
	`˚πify_˚π
(&
x
,
ss_˚π_fûe
,
pkey
,
x509
,
dg°
,
sig›ts
,

1213 
©åibs
,

1214 
db
,
£rül
,
subj
,
chty≥
,
mu…údn
,
emaû_dn
,
°¨td©e
,
ídd©e
,
days
,
b©ch
,

1215 
exãnsi⁄s
,
c⁄f
,
vîbo£
, 
˚π›t
, 
«me›t
,

1216 
deÁu…_›
, 
ext_c›y
, 
e
);

1217 i‡(
j
 < 0Ë
îr
;

1218 i‡(
j
 > 0)

1220 
tŸÆ_d⁄e
++;

1221 
	`BIO_¥ötf
(
bio_îr
,"\n");

1222 i‡(!
	`BN_add_w‹d
(
£rül
,1)Ë
îr
;

1223 i‡(!
	`sk_X509_push
(
˚π_sk
,
x
))

1225 
	`BIO_¥ötf
(
bio_îr
,"Memoryállocation failure\n");

1226 
îr
;

1230 i‡(
öfûe
 !
NULL
)

1232 
tŸÆ
++;

1233 
j
=
	`˚πify
(&
x
,
öfûe
,
pkey
,
x509p
,
dg°
,
sig›ts
, 
©åibs
,
db
,

1234 
£rül
,
subj
,
chty≥
,
mu…údn
,
emaû_dn
,
°¨td©e
,
ídd©e
,
days
,
b©ch
,

1235 
exãnsi⁄s
,
c⁄f
,
vîbo£
, 
˚π›t
, 
«me›t
,

1236 
deÁu…_›
, 
ext_c›y
, 
£lfsign
);

1237 i‡(
j
 < 0Ë
îr
;

1238 i‡(
j
 > 0)

1240 
tŸÆ_d⁄e
++;

1241 
	`BIO_¥ötf
(
bio_îr
,"\n");

1242 i‡(!
	`BN_add_w‹d
(
£rül
,1)Ë
îr
;

1243 i‡(!
	`sk_X509_push
(
˚π_sk
,
x
))

1245 
	`BIO_¥ötf
(
bio_îr
,"Memoryállocation failure\n");

1246 
îr
;

1250 
i
=0; i<
¨gc
; i++)

1252 
tŸÆ
++;

1253 
j
=
	`˚πify
(&
x
,
¨gv
[
i
],
pkey
,
x509p
,
dg°
,
sig›ts
,
©åibs
,
db
,

1254 
£rül
,
subj
,
chty≥
,
mu…údn
,
emaû_dn
,
°¨td©e
,
ídd©e
,
days
,
b©ch
,

1255 
exãnsi⁄s
,
c⁄f
,
vîbo£
, 
˚π›t
, 
«me›t
,

1256 
deÁu…_›
, 
ext_c›y
, 
£lfsign
);

1257 i‡(
j
 < 0Ë
îr
;

1258 i‡(
j
 > 0)

1260 
tŸÆ_d⁄e
++;

1261 
	`BIO_¥ötf
(
bio_îr
,"\n");

1262 i‡(!
	`BN_add_w‹d
(
£rül
,1)Ë
îr
;

1263 i‡(!
	`sk_X509_push
(
˚π_sk
,
x
))

1265 
	`BIO_¥ötf
(
bio_îr
,"Memoryállocation failure\n");

1266 
îr
;

1274 i‡(
	`sk_X509_num
(
˚π_sk
) > 0)

1276 i‡(!
b©ch
)

1278 
	`BIO_¥ötf
(
bio_îr
,"\n%d ouào‡%d cîtifiˇãÑeque°†˚πifõd, commô? [y/n]",
tŸÆ_d⁄e
,
tŸÆ
);

1279 ()
	`BIO_Êush
(
bio_îr
);

1280 
buf
[0][0]='\0';

1281 i‡(!
	`fgës
(
buf
[0],10,
°dö
))

1283 
	`BIO_¥ötf
(
bio_îr
,"CERTIFICATION CANCELED: I/OÉrror\n");

1284 
ªt
=0;

1285 
îr
;

1287 i‡((
buf
[0][0] != 'y') && (buf[0][0] != 'Y'))

1289 
	`BIO_¥ötf
(
bio_îr
,"CERTIFICATION CANCELED\n");

1290 
ªt
=0;

1291 
îr
;

1295 
	`BIO_¥ötf
(
bio_îr
,"Wrôêouàd©aba£ wôh %dÇewÉ¡rõs\n",
	`sk_X509_num
(
˚π_sk
));

1297 i‡(!
	`ßve_£rül
(
£rülfûe
,"√w",
£rül
,
NULL
)Ë
îr
;

1299 i‡(!
	`ßve_ödex
(
dbfûe
, "√w", 
db
)Ë
îr
;

1302 i‡(
vîbo£
)

1303 
	`BIO_¥ötf
(
bio_îr
,"writingÇew certificates\n");

1304 
i
=0; i<
	`sk_X509_num
(
˚π_sk
); i++)

1306 
k
;

1307 *
n
;

1309 
x
=
	`sk_X509_vÆue
(
˚π_sk
,
i
);

1311 
j
=
x
->
˚π_öfo
->
£rülNumbî
->
Àngth
;

1312 
p
=(c⁄° *)
x
->
˚π_öfo
->
£rülNumbî
->
d©a
;

1314 if(
	`°æí
(
outdú
Ë>(
size_t
)(
j
 ? 
BSIZE
-j*2-6 : BSIZE-8))

1316 
	`BIO_¥ötf
(
bio_îr
,"certificate fileÇameÅooÜong\n");

1317 
îr
;

1320 
	`°r˝y
(
buf
[2],
outdú
);

1322 #i‚de‡
OPENSSL_SYS_VMS


1323 
	`BUF_°æˇt
(
buf
[2],"/",(buf[2]));

1326 
n
=(*)&(
buf
[2][
	`°æí
(buf[2])]);

1327 i‡(
j
 > 0)

1329 
k
=0; k<
j
; k++)

1331 i‡(
n
 >&(
buf
[2][(buf[2])]))

1333 
	`BIO_¢¥ötf
(
n
,

1334 &
buf
[2][0] + (buf[2]Ë- 
n
,

1335 "%02X",()*(
p
++));

1336 
n
+=2;

1341 *(
n
++)='0';

1342 *(
n
++)='0';

1344 *(
n
++)='.'; *(n++)='p'; *(n++)='e'; *(n++)='m';

1345 *
n
='\0';

1346 i‡(
vîbo£
)

1347 
	`BIO_¥ötf
(
bio_îr
,"wrôög %s\n",
buf
[2]);

1349 i‡(
	`BIO_wrôe_fûíame
(
Cout
,
buf
[2]) <= 0)

1351 
	`≥º‹
(
buf
[2]);

1352 
îr
;

1354 
	`wrôe_√w_˚πifiˇã
(
Cout
,
x
, 0, 
nŸext
);

1355 
	`wrôe_√w_˚πifiˇã
(
Sout
,
x
, 
ouçut_dî
, 
nŸext
);

1358 i‡(
	`sk_X509_num
(
˚π_sk
))

1361 i‡(!
	`rŸ©e_£rül
(
£rülfûe
,"√w","ﬁd")Ë
îr
;

1363 i‡(!
	`rŸ©e_ödex
(
dbfûe
,"√w","ﬁd")Ë
îr
;

1365 
	`BIO_¥ötf
(
bio_îr
,"Data Base Updated\n");

1370 i‡(
gí¸l
)

1372 
¸l_v2
 = 0;

1373 i‡(!
¸l_ext
)

1375 
¸l_ext
=
	`NCONF_gë_°rög
(
c⁄f
,
£˘i⁄
,
ENV_CRLEXT
);

1376 i‡(!
¸l_ext
)

1377 
	`ERR_˛ór_îr‹
();

1379 i‡(
¸l_ext
)

1382 
X509V3_CTX
 
˘x
;

1383 
	`X509V3_£t_˘x_ã°
(&
˘x
);

1384 
	`X509V3_£t_nc⁄f
(&
˘x
, 
c⁄f
);

1385 i‡(!
	`X509V3_EXT_add_nc⁄f
(
c⁄f
, &
˘x
, 
¸l_ext
, 
NULL
))

1387 
	`BIO_¥ötf
(
bio_îr
,

1389 
¸l_ext
);

1390 
ªt
 = 1;

1391 
îr
;

1395 i‡((
¸ umbîfûe
=
	`NCONF_gë_°rög
(
c⁄f
,
£˘i⁄
,
ENV_CRLNUMBER
))

1396 !
NULL
)

1397 i‡((
¸ umbî
=
	`lﬂd_£rül
(
¸ umbîfûe
,0,
NULL
)) == NULL)

1399 
	`BIO_¥ötf
(
bio_îr
,"error whileÜoading CRLÇumber\n");

1400 
îr
;

1403 i‡(!
¸ldays
 && !
¸lhours
 && !
¸l£c
)

1405 i‡(!
	`NCONF_gë_numbî
(
c⁄f
,
£˘i⁄
,

1406 
ENV_DEFAULT_CRL_DAYS
, &
¸ldays
))

1407 
¸ldays
 = 0;

1408 i‡(!
	`NCONF_gë_numbî
(
c⁄f
,
£˘i⁄
,

1409 
ENV_DEFAULT_CRL_HOURS
, &
¸lhours
))

1410 
¸lhours
 = 0;

1411 
	`ERR_˛ór_îr‹
();

1413 i‡((
¸ldays
 =0Ë&& (
¸lhours
 =0Ë&& (
¸l£c
 == 0))

1415 
	`BIO_¥ötf
(
bio_îr
,"cannotÜookup howÜong untilÅheÇext CRL is issued\n");

1416 
îr
;

1419 i‡(
vîbo£
Ë
	`BIO_¥ötf
(
bio_îr
,"making CRL\n");

1420 i‡((
¸l
=
	`X509_CRL_√w
()Ë=
NULL
Ë
îr
;

1421 i‡(!
	`X509_CRL_£t_issuî_«me
(
¸l
, 
	`X509_gë_subje˘_«me
(
x509
))Ë
îr
;

1423 
tm±m
 = 
	`ASN1_TIME_√w
();

1424 i‡(!
tm±m
Ë
îr
;

1425 
	`X509_gmtime_adj
(
tm±m
,0);

1426 
	`X509_CRL_£t_œ°Upd©e
(
¸l
, 
tm±m
);

1427 i‡(!
	`X509_time_adj_ex
(
tm±m
, 
¸ldays
, 
¸lhours
*60*60 + 
¸l£c
,

1428 
NULL
))

1430 
	`BIO_puts
(
bio_îr
, "error setting CRLÇextUpdate\n");

1431 
îr
;

1433 
	`X509_CRL_£t_√xtUpd©e
(
¸l
, 
tm±m
);

1435 
	`ASN1_TIME_‰ì
(
tm±m
);

1437 
i
=0; i<
	`sk_OPENSSL_PSTRING_num
(
db
->db->
d©a
); i++)

1439 
µ
=
	`sk_OPENSSL_PSTRING_vÆue
(
db
->db->
d©a
,
i
);

1440 i‡(
µ
[
DB_ty≥
][0] =
DB_TYPE_REV
)

1442 i‡((
r
=
	`X509_REVOKED_√w
()Ë=
NULL
Ë
îr
;

1443 
j
 = 
	`make_ªvoked
(
r
, 
µ
[
DB_ªv_d©e
]);

1444 i‡(!
j
Ë
îr
;

1445 i‡(
j
 =2Ë
¸l_v2
 = 1;

1446 i‡(!
	`BN_hex2bn
(&
£rül
, 
µ
[
DB_£rül
]))

1447 
îr
;

1448 
tmp£r
 = 
	`BN_to_ASN1_INTEGER
(
£rül
, 
NULL
);

1449 
	`BN_‰ì
(
£rül
);

1450 
£rül
 = 
NULL
;

1451 i‡(!
tmp£r
)

1452 
îr
;

1453 
	`X509_REVOKED_£t_£rülNumbî
(
r
, 
tmp£r
);

1454 
	`ASN1_INTEGER_‰ì
(
tmp£r
);

1455 
	`X509_CRL_add0_ªvoked
(
¸l
,
r
);

1461 
	`X509_CRL_s‹t
(
¸l
);

1464 i‡(
vîbo£
Ë
	`BIO_¥ötf
(
bio_îr
,"signing CRL\n");

1468 i‡(
¸l_ext
 || 
¸ umbîfûe
 !
NULL
)

1470 
X509V3_CTX
 
¸l˘x
;

1471 
	`X509V3_£t_˘x
(&
¸l˘x
, 
x509
, 
NULL
, NULL, 
¸l
, 0);

1472 
	`X509V3_£t_nc⁄f
(&
¸l˘x
, 
c⁄f
);

1474 i‡(
¸l_ext
)

1475 i‡(!
	`X509V3_EXT_CRL_add_nc⁄f
(
c⁄f
, &
¸l˘x
,

1476 
¸l_ext
, 
¸l
)Ë
îr
;

1477 i‡(
¸ umbîfûe
 !
NULL
)

1479 
tmp£r
 = 
	`BN_to_ASN1_INTEGER
(
¸ umbî
, 
NULL
);

1480 i‡(!
tmp£r
Ë
îr
;

1481 
	`X509_CRL_add1_ext_i2d
(
¸l
,
NID_¸l_numbî
,
tmp£r
,0,0);

1482 
	`ASN1_INTEGER_‰ì
(
tmp£r
);

1483 
¸l_v2
 = 1;

1484 i‡(!
	`BN_add_w‹d
(
¸ umbî
,1)Ë
îr
;

1487 i‡(
¸l_ext
 || 
¸l_v2
)

1489 i‡(!
	`X509_CRL_£t_vîsi⁄
(
¸l
, 1))

1490 
îr
;

1494 i‡(
¸ umbîfûe
 !
NULL
)

1495 i‡(!
	`ßve_£rül
(
¸ umbîfûe
,"√w",
¸ umbî
,
NULL
)Ë
îr
;

1497 i‡(
¸ umbî
)

1499 
	`BN_‰ì
(
¸ umbî
);

1500 
¸ umbî
 = 
NULL
;

1503 i‡(!
	`do_X509_CRL_sign
(
bio_îr
,
¸l
,
pkey
,
dg°
,
sig›ts
)Ë
îr
;

1505 
	`PEM_wrôe_bio_X509_CRL
(
Sout
,
¸l
);

1507 i‡(
¸ umbîfûe
 !
NULL
)

1508 i‡(!
	`rŸ©e_£rül
(
¸ umbîfûe
,"√w","ﬁd")Ë
îr
;

1512 i‡(
d‹evoke
)

1514 i‡(
öfûe
 =
NULL
)

1516 
	`BIO_¥ötf
(
bio_îr
,"no input files\n");

1517 
îr
;

1521 
X509
 *
ªv˚π
;

1522 
ªv˚π
=
	`lﬂd_˚π
(
bio_îr
, 
öfûe
, 
FORMAT_PEM
,

1523 
NULL
, 
e
, 
öfûe
);

1524 i‡(
ªv˚π
 =
NULL
)

1525 
îr
;

1526 
j
=
	`do_ªvoke
(
ªv˚π
,
db
, 
ªv_ty≥
, 
ªv_¨g
);

1527 i‡(
j
 <0Ë
îr
;

1528 
	`X509_‰ì
(
ªv˚π
);

1530 i‡(!
	`ßve_ödex
(
dbfûe
, "√w", 
db
)Ë
îr
;

1532 i‡(!
	`rŸ©e_ödex
(
dbfûe
, "√w", "ﬁd")Ë
îr
;

1534 
	`BIO_¥ötf
(
bio_îr
,"Data Base Updated\n");

1538 
ªt
=0;

1539 
îr
:

1540 if(
to‰ì
)

1541 
	`OPENSSL_‰ì
(
to‰ì
);

1542 
	`BIO_‰ì_Æl
(
Cout
);

1543 
	`BIO_‰ì_Æl
(
Sout
);

1544 
	`BIO_‰ì_Æl
(
out
);

1545 
	`BIO_‰ì_Æl
(
ö
);

1547 i‡(
˚π_sk
)

1548 
	`sk_X509_p›_‰ì
(
˚π_sk
,
X509_‰ì
);

1550 i‡(
ªt
Ë
	`ERR_¥öt_îr‹s
(
bio_îr
);

1551 
	`≠p_RAND_wrôe_fûe
(
øndfûe
, 
bio_îr
);

1552 i‡(
‰ì_key
 && 
key
)

1553 
	`OPENSSL_‰ì
(
key
);

1554 
	`BN_‰ì
(
£rül
);

1555 
	`BN_‰ì
(
¸ umbî
);

1556 
	`‰ì_ödex
(
db
);

1557 i‡(
sig›ts
)

1558 
	`sk_OPENSSL_STRING_‰ì
(
sig›ts
);

1559 
	`EVP_PKEY_‰ì
(
pkey
);

1560 i‡(
x509
Ë
	`X509_‰ì
(x509);

1561 
	`X509_CRL_‰ì
(
¸l
);

1562 
	`NCONF_‰ì
(
c⁄f
);

1563 
	`NCONF_‰ì
(
extc⁄f
);

1564 
	`OBJ_˛ónup
();

1565 
	`≠ps_shutdown
();

1566 
	`OPENSSL_EXIT
(
ªt
);

1567 
	}
}

1569 
	$lookup_Áû
(c⁄° *
«me
, c⁄° *
èg
)

1571 
	`BIO_¥ötf
(
bio_îr
,"v¨übÀÜooku∞Áûed f‹ %s::%s\n",
«me
,
èg
);

1572 
	}
}

1574 
˚πify
(
X509
 **
xªt
, *
öfûe
, 
EVP_PKEY
 *
pkey
, X509 *
x509
,

1575 c⁄° 
EVP_MD
 *
dg°
, 
STACK_OF
(
OPENSSL_STRING
Ë*
sig›ts
,

1576 
STACK_OF
(
CONF_VALUE
Ë*
pﬁicy
, 
CA_DB
 *
db
,

1577 
BIGNUM
 *
£rül
, *
subj
,
chty≥
, 
mu…údn
,

1578 
emaû_dn
, *
°¨td©e
, *
ídd©e
,

1579 
days
, 
b©ch
, *
ext_£˘
, 
CONF
 *
lc⁄f
, 
vîbo£
,

1580 
˚π›t
, 
«me›t
, 
deÁu…_›
,

1581 
ext_c›y
, 
£lfsign
)

1583 
X509_REQ
 *
	gªq
=
NULL
;

1584 
BIO
 *
	gö
=
NULL
;

1585 
EVP_PKEY
 *
	gpktmp
=
NULL
;

1586 
	gok
-1,
	gi
;

1588 
	gö
=
BIO_√w
(
BIO_s_fûe
());

1590 i‡(
BIO_ªad_fûíame
(
ö
,
öfûe
) <= 0)

1592 
≥º‹
(
öfûe
);

1593 
	gîr
;

1595 i‡((
	gªq
=
PEM_ªad_bio_X509_REQ
(
ö
,
NULL
,NULL,NULL)) == NULL)

1597 
BIO_¥ötf
(
bio_îr
,"ErrorÑeading certificateÑequest in %s\n",

1598 
öfûe
);

1599 
	gîr
;

1601 i‡(
	gvîbo£
)

1602 
X509_REQ_¥öt
(
bio_îr
,
ªq
);

1604 
BIO_¥ötf
(
bio_îr
,"CheckÅhatÅheÑequest matchesÅhe signature\n");

1606 i‡(
	g£lfsign
 && !
X509_REQ_check_¥iv©e_key
(
ªq
,
pkey
))

1608 
BIO_¥ötf
(
bio_îr
,"CertificateÑequestánd CAÖrivate key doÇot match\n");

1609 
	gok
=0;

1610 
	gîr
;

1612 i‡((
	gpktmp
=
X509_REQ_gë_pubkey
(
ªq
)Ë=
NULL
)

1614 
BIO_¥ötf
(
bio_îr
,"error unpackingÖublic key\n");

1615 
	gîr
;

1617 
	gi
=
X509_REQ_vîify
(
ªq
,
pktmp
);

1618 
EVP_PKEY_‰ì
(
pktmp
);

1619 i‡(
	gi
 < 0)

1621 
	gok
=0;

1622 
BIO_¥ötf
(
bio_îr
,"Signature verificationÖroblems....\n");

1623 
	gîr
;

1625 i‡(
	gi
 == 0)

1627 
ok
=0;

1628 
BIO_¥ötf
(
bio_îr
,"Signature didÇot matchÅhe certificateÑequest\n");

1629 
	gîr
;

1632 
BIO_¥ötf
(
bio_îr
,"Signature ok\n");

1634 
	gok
=
do_body
(
xªt
,
pkey
,
x509
,
dg°
,
sig›ts
, 
pﬁicy
,
db
,
£rül
,
subj
,
chty≥
,

1635 
mu…údn
, 
emaû_dn
,

1636 
°¨td©e
,
ídd©e
,
days
,
b©ch
,
vîbo£
,
ªq
,
ext_£˘
,
lc⁄f
,

1637 
˚π›t
, 
«me›t
, 
deÁu…_›
, 
ext_c›y
, 
£lfsign
);

1639 
	gîr
:

1640 i‡(
ªq
 !
NULL
Ë
X509_REQ_‰ì
(req);

1641 i‡(
	gö
 !
NULL
Ë
BIO_‰ì
(
ö
);

1642 (
	gok
);

1645 
˚πify_˚π
(
X509
 **
xªt
, *
öfûe
, 
EVP_PKEY
 *
pkey
, X509 *
x509
,

1646 c⁄° 
EVP_MD
 *
dg°
, 
STACK_OF
(
OPENSSL_STRING
Ë*
sig›ts
,

1647 
STACK_OF
(
CONF_VALUE
Ë*
pﬁicy
, 
CA_DB
 *
db
,

1648 
BIGNUM
 *
£rül
, *
subj
, 
chty≥
, 
mu…údn
, 
emaû_dn
, *
°¨td©e
, *
ídd©e
,

1649 
days
, 
b©ch
, *
ext_£˘
, 
CONF
 *
lc⁄f
, 
vîbo£
,

1650 
˚π›t
, 
«me›t
, 
deÁu…_›
,

1651 
ext_c›y
, 
ENGINE
 *
e
)

1653 
X509
 *
	gªq
=
NULL
;

1654 
X509_REQ
 *
	gºeq
=
NULL
;

1655 
EVP_PKEY
 *
	gpktmp
=
NULL
;

1656 
	gok
-1,
	gi
;

1658 i‡((
	gªq
=
lﬂd_˚π
(
bio_îr
, 
öfûe
, 
FORMAT_PEM
, 
NULL
, 
e
, infile)) == NULL)

1659 
îr
;

1660 i‡(
	gvîbo£
)

1661 
X509_¥öt
(
bio_îr
,
ªq
);

1663 
BIO_¥ötf
(
bio_îr
,"CheckÅhatÅheÑequest matchesÅhe signature\n");

1665 i‡((
	gpktmp
=
X509_gë_pubkey
(
ªq
)Ë=
NULL
)

1667 
BIO_¥ötf
(
bio_îr
,"error unpackingÖublic key\n");

1668 
	gîr
;

1670 
	gi
=
X509_vîify
(
ªq
,
pktmp
);

1671 
EVP_PKEY_‰ì
(
pktmp
);

1672 i‡(
	gi
 < 0)

1674 
	gok
=0;

1675 
BIO_¥ötf
(
bio_îr
,"Signature verificationÖroblems....\n");

1676 
	gîr
;

1678 i‡(
	gi
 == 0)

1680 
ok
=0;

1681 
BIO_¥ötf
(
bio_îr
,"Signature didÇot matchÅhe certificate\n");

1682 
	gîr
;

1685 
BIO_¥ötf
(
bio_îr
,"Signature ok\n");

1687 i‡((
	gºeq
=
X509_to_X509_REQ
(
ªq
,
NULL
,
EVP_md5
())) == NULL)

1688 
îr
;

1690 
	gok
=
do_body
(
xªt
,
pkey
,
x509
,
dg°
,
sig›ts
,
pﬁicy
,
db
,
£rül
,
subj
,
chty≥
,
mu…údn
,
emaû_dn
,
°¨td©e
,
ídd©e
,

1691 
days
,
b©ch
,
vîbo£
,
ºeq
,
ext_£˘
,
lc⁄f
, 
˚π›t
, 
«me›t
, 
deÁu…_›
,

1692 
ext_c›y
, 0);

1694 
	gîr
:

1695 i‡(
ºeq
 !
NULL
Ë
X509_REQ_‰ì
(rreq);

1696 i‡(
	gªq
 !
NULL
Ë
X509_‰ì
(
ªq
);

1697 (
	gok
);

1700 
do_body
(
X509
 **
xªt
, 
EVP_PKEY
 *
pkey
, X509 *
x509
, c⁄° 
EVP_MD
 *
dg°
,

1701 
STACK_OF
(
OPENSSL_STRING
Ë*
sig›ts
, STACK_OF(
CONF_VALUE
Ë*
pﬁicy
,

1702 
CA_DB
 *
db
, 
BIGNUM
 *
£rül
, *
subj
,

1703 
chty≥
, 
mu…údn
,

1704 
emaû_dn
, *
°¨td©e
, *
ídd©e
, 
days
, 
b©ch
,

1705 
vîbo£
, 
X509_REQ
 *
ªq
, *
ext_£˘
, 
CONF
 *
lc⁄f
,

1706 
˚π›t
, 
«me›t
, 
deÁu…_›
,

1707 
ext_c›y
, 
£lfsign
)

1709 
X509_NAME
 *
	g«me
=
NULL
,*
	gCA«me
=NULL,*
	gsubje˘
=NULL, *
	gdn_subje˘
=NULL;

1710 
ASN1_UTCTIME
 *
	gtm
,*
	gtm±m
;

1711 
ASN1_STRING
 *
	g°r
,*
	g°r2
;

1712 
ASN1_OBJECT
 *
	gobj
;

1713 
X509
 *
	gªt
=
NULL
;

1714 
X509_CINF
 *
	gci
;

1715 
X509_NAME_ENTRY
 *
	g√
;

1716 
X509_NAME_ENTRY
 *
	gäe
,*
	gpush
;

1717 
EVP_PKEY
 *
	gpktmp
;

1718 
	gok
-1,
	gi
,
	gj
,
	gœ°
,
	gnid
;

1719 c⁄° *
	gp
;

1720 
CONF_VALUE
 *
	gcv
;

1721 
OPENSSL_STRING
 
	grow
[
DB_NUMBER
];

1722 
OPENSSL_STRING
 *
	gúow
=
NULL
;

1723 
OPENSSL_STRING
 *
	gºow
=
NULL
;

1724 
	gbuf
[25];

1726 
	gtm±m
=
ASN1_UTCTIME_√w
();

1727 i‡(
	gtm±m
 =
NULL
)

1729 
BIO_¥ötf
(
bio_îr
,"mallocÉrror\n");

1733 
	gi
=0; i<
	gDB_NUMBER
; i++)

1734 
	grow
[
i
]=
NULL
;

1736 i‡(
	gsubj
)

1738 
X509_NAME
 *
	gn
 = 
∑r£_«me
(
subj
, 
chty≥
, 
mu…údn
);

1740 i‡(!
	gn
)

1742 
ERR_¥öt_îr‹s
(
bio_îr
);

1743 
	gîr
;

1745 
X509_REQ_£t_subje˘_«me
(
ªq
,
n
);

1746 
	gªq
->
	gªq_öfo
->
	gíc
.
	gmodifõd
 = 1;

1747 
X509_NAME_‰ì
(
n
);

1750 i‡(
	gdeÁu…_›
)

1751 
BIO_¥ötf
(
bio_îr
,"The Subject's Distinguished Name isás follows\n");

1753 
	g«me
=
X509_REQ_gë_subje˘_«me
(
ªq
);

1754 
	gi
=0; i<
X509_NAME_íåy_cou¡
(
«me
); i++)

1756 
	g√

X509_NAME_gë_íåy
(
«me
,
i
);

1757 
	g°r
=
X509_NAME_ENTRY_gë_d©a
(
√
);

1758 
	gobj
=
X509_NAME_ENTRY_gë_obje˘
(
√
);

1760 i‡(
	gmsõ_hack
)

1763 
	gnid
=
OBJ_obj2nid
(
√
->
obje˘
);

1765 i‡(
	g°r
->
	gty≥
 =
V_ASN1_UNIVERSALSTRING
)

1766 
ASN1_UNIVERSALSTRING_to_°rög
(
°r
);

1768 i‡((
	g°r
->
	gty≥
 =
V_ASN1_IA5STRING
) &&

1769 (
nid
 !
NID_pkcs9_emaûAddªss
))

1770 
°r
->
ty≥
=
V_ASN1_T61STRING
;

1772 i‡((
	gnid
 =
NID_pkcs9_emaûAddªss
) &&

1773 (
°r
->
ty≥
 =
V_ASN1_PRINTABLESTRING
))

1774 
°r
->
ty≥
=
V_ASN1_IA5STRING
;

1778 i‡((
OBJ_obj2nid
(
obj
Ë=
NID_pkcs9_emaûAddªss
Ë&& (!
emaû_dn
))

1782 i‡((
OBJ_obj2nid
(
obj
Ë=
NID_pkcs9_emaûAddªss
) &&

1783 (
°r
->
ty≥
 !
V_ASN1_IA5STRING
))

1785 
BIO_¥ötf
(
bio_îr
,"\nemailAddressÅypeÇeedsÅo be ofÅype IA5STRING\n");

1786 
	gîr
;

1788 i‡((
	g°r
->
	gty≥
 !
V_ASN1_BMPSTRING
Ë&& (
°r
->
ty≥
 !
V_ASN1_UTF8STRING
))

1790 
j
=
ASN1_PRINTABLE_ty≥
(
°r
->
d©a
,°r->
Àngth
);

1791 i‡–((
	gj
 =
V_ASN1_T61STRING
) &&

1792 (
°r
->
ty≥
 !
V_ASN1_T61STRING
)) ||

1793 ((
j
 =
V_ASN1_IA5STRING
) &&

1794 (
°r
->
ty≥
 =
V_ASN1_PRINTABLESTRING
)))

1796 
BIO_¥ötf
(
bio_îr
,"\nThe string contains charactersÅhatáre illegal forÅhe ASN.1Åype\n");

1797 
	gîr
;

1801 i‡(
	gdeÁu…_›
)

1802 
ﬁd_íåy_¥öt
(
bio_îr
, 
obj
, 
°r
);

1806 i‡((
	gsubje˘
=
X509_NAME_√w
()Ë=
NULL
)

1808 
BIO_¥ötf
(
bio_îr
,"Memoryállocation failure\n");

1809 
	gîr
;

1813 i‡(
	g£lfsign
)

1814 
	gCA«me
=
X509_NAME_dup
(
«me
);

1816 
	gCA«me
=
X509_NAME_dup
(
x509
->
˚π_öfo
->
subje˘
);

1817 i‡(
	gCA«me
 =
NULL
Ë
îr
;

1818 
	g°r
=
°r2
=
NULL
;

1820 
	gi
=0; i<
sk_CONF_VALUE_num
(
pﬁicy
); i++)

1822 
	gcv
=
sk_CONF_VALUE_vÆue
(
pﬁicy
,
i
);

1823 i‡((
	gj
=
OBJ_txt2nid
(
cv
->
«me
)Ë=
NID_undef
)

1825 
BIO_¥ötf
(
bio_îr
,"%s:unknow¿obje˘Åy≥ i¿'pﬁicy' c⁄figuøti⁄\n",
cv
->
«me
);

1826 
	gîr
;

1828 
	gobj
=
OBJ_nid2obj
(
j
);

1830 
	gœ°
= -1;

1834 
	gj
=
X509_NAME_gë_ödex_by_OBJ
(
«me
,
obj
,
œ°
);

1835 i‡(
	gj
 < 0)

1837 i‡(
	gœ°
 != -1) ;

1838 
	gäe
=
NULL
;

1842 
	gäe
=
X509_NAME_gë_íåy
(
«me
,
j
);

1844 
	gœ°
=
j
;

1847 
	gpush
=
NULL
;

1848 i‡(
°rcmp
(
cv
->
vÆue
,"optional") == 0)

1850 i‡(
äe
 !
NULL
)

1851 
push
=
äe
;

1853 i‡(
°rcmp
(
cv
->
vÆue
,"supplied") == 0)

1855 i‡(
äe
 =
NULL
)

1857 
BIO_¥ötf
(
bio_îr
,"Thê%†fõldÇìdedÅÿbêsuµlõdánd wa†missög\n",
cv
->
«me
);

1858 
	gîr
;

1861 
	gpush
=
äe
;

1863 i‡(
°rcmp
(
cv
->
vÆue
,"match") == 0)

1865 
œ°2
;

1867 i‡(
	gäe
 =
NULL
)

1869 
BIO_¥ötf
(
bio_îr
,"Thêm™d©‹y %†fõld wa†missög\n",
cv
->
«me
);

1870 
	gîr
;

1873 
	gœ°2
= -1;

1875 
	gagaö2
:

1876 
j
=
X509_NAME_gë_ödex_by_OBJ
(
CA«me
,
obj
,
œ°2
);

1877 i‡((
	gj
 < 0Ë&& (
	gœ°2
 == -1))

1879 
BIO_¥ötf
(
bio_îr
,"Thê%†fõld d€†nŸÉxi° i¿thêCA cîtifiˇã,\¡hê'pﬁicy' i†misc⁄figuªd\n",
cv
->
«me
);

1880 
	gîr
;

1882 i‡(
	gj
 >= 0)

1884 
push
=
X509_NAME_gë_íåy
(
CA«me
,
j
);

1885 
	g°r
=
X509_NAME_ENTRY_gë_d©a
(
äe
);

1886 
	g°r2
=
X509_NAME_ENTRY_gë_d©a
(
push
);

1887 
	gœ°2
=
j
;

1888 i‡(
ASN1_STRING_cmp
(
°r
,
°r2
) != 0)

1889 
agaö2
;

1891 i‡(
	gj
 < 0)

1893 
BIO_¥ötf
(
bio_îr
,"Thê%†fõldÇìdedÅÿbêthêßmêöÅhe\nCA cîtifiˇã (%sË™dÅhêªque° (%s)\n",
cv
->
«me
,((
°r2
 =
NULL
)?"NULL":(*)°r2->
d©a
),((
°r
 == NULL)?"NULL":(*)str->data));

1894 
	gîr
;

1899 
BIO_¥ötf
(
bio_îr
,"%s:övÆidÅy≥ i¿'pﬁicy' c⁄figuøti⁄\n",
cv
->
vÆue
);

1900 
	gîr
;

1903 i‡(
	gpush
 !
NULL
)

1905 i‡(!
X509_NAME_add_íåy
(
subje˘
,
push
, -1, 0))

1907 i‡(
push
 !
NULL
)

1908 
X509_NAME_ENTRY_‰ì
(
push
);

1909 
BIO_¥ötf
(
bio_îr
,"Memoryállocation failure\n");

1910 
	gîr
;

1913 i‡(
	gj
 < 0) ;

1917 i‡(
	g¥e£rve
)

1919 
X509_NAME_‰ì
(
subje˘
);

1921 
	gsubje˘
=
X509_NAME_dup
(
«me
);

1922 i‡(
	gsubje˘
 =
NULL
Ë
îr
;

1925 i‡(
	gvîbo£
)

1926 
BIO_¥ötf
(
bio_îr
,"The subjectÇameáppearsÅo be ok, checking data base for clashes\n");

1931 i‡(
	gemaû_dn
)

1932 
	gdn_subje˘
 = 
subje˘
;

1935 
X509_NAME_ENTRY
 *
	gtm≤e
;

1939 i‡(!(
	gdn_subje˘
 = 
X509_NAME_dup
(
subje˘
)))

1941 
BIO_¥ötf
(
bio_îr
,"Memoryállocation failure\n");

1942 
	gîr
;

1944 (
	gi
 = 
X509_NAME_gë_ödex_by_NID
(
dn_subje˘
,

1945 
NID_pkcs9_emaûAddªss
, -1)) >= 0)

1947 
tm≤e
 = 
X509_NAME_gë_íåy
(
dn_subje˘
, 
i
);

1948 
X509_NAME_dñëe_íåy
(
dn_subje˘
, 
i
);

1949 
X509_NAME_ENTRY_‰ì
(
tm≤e
);

1953 i‡(
BN_is_zîo
(
£rül
))

1954 
	grow
[
DB_£rül
]=
BUF_°rdup
("00");

1956 
	grow
[
DB_£rül
]=
BN_bn2hex
(
£rül
);

1957 i‡(
	grow
[
DB_£rül
] =
NULL
)

1959 
BIO_¥ötf
(
bio_îr
,"Memoryállocation failure\n");

1960 
	gîr
;

1963 i‡(
	gdb
->
	g©åibuãs
.
	gunique_subje˘
)

1965 
OPENSSL_STRING
 *
	g¸ow
=
row
;

1967 
	gºow
=
TXT_DB_gë_by_ödex
(
db
->db,
DB_«me
,
¸ow
);

1968 i‡(
	gºow
 !
NULL
)

1970 
BIO_¥ötf
(
bio_îr
,

1972 
row
[
DB_«me
]);

1975 i‡(
	gºow
 =
NULL
)

1977 
ºow
=
TXT_DB_gë_by_ödex
(
db
->db,
DB_£rül
,
row
);

1978 i‡(
	gºow
 !
NULL
)

1980 
BIO_¥ötf
(
bio_îr
,"ERROR:SerialÇumber %s hasálready been issued,\n",

1981 
row
[
DB_£rül
]);

1982 
BIO_¥ötf
(
bio_îr
," checkÅhe database/serial_file for corruption\n");

1986 i‡(
	gºow
 !
NULL
)

1988 
BIO_¥ötf
(
bio_îr
,

1990 i‡(
	gºow
[
DB_ty≥
][0] == 'E')

1991 
p
="Expired";

1992 i‡(
	gºow
[
DB_ty≥
][0] == 'R')

1993 
p
="Revoked";

1994 i‡(
	gºow
[
DB_ty≥
][0] == 'V')

1995 
p
="Valid";

1997 
	gp
="\ninvalidÅype, Data baseÉrror\n";

1998 
BIO_¥ötf
(
bio_îr
,"Ty≥ :%s\n",
p
);;

1999 i‡(
	gºow
[
DB_ty≥
][0] == 'R')

2001 
p
=
ºow
[
DB_exp_d©e
]; i‡(
	gp
 =
NULL
)Ö="undef";

2002 
BIO_¥ötf
(
bio_îr
,"Wa†ªvoked on:%s\n",
p
);

2004 
	gp
=
ºow
[
DB_exp_d©e
]; i‡’ =
NULL
Ë
p
="undef";

2005 
BIO_¥ötf
(
bio_îr
,"Expúe†⁄ :%s\n",
p
);

2006 
	gp
=
ºow
[
DB_£rül
]; i‡’ =
NULL
Ë
p
="undef";

2007 
BIO_¥ötf
(
bio_îr
,"Sîü»Numbî :%s\n",
p
);

2008 
	gp
=
ºow
[
DB_fûe
]; i‡’ =
NULL
Ë
p
="undef";

2009 
BIO_¥ötf
(
bio_îr
,"Fûê«mê :%s\n",
p
);

2010 
	gp
=
ºow
[
DB_«me
]; i‡’ =
NULL
Ë
p
="undef";

2011 
BIO_¥ötf
(
bio_îr
,"Subje˘ Namê :%s\n",
p
);

2012 
	gok
= -1;

2013 
	gîr
;

2017 i‡(
	gvîbo£
)

2018 
BIO_¥ötf
(
bio_îr
,"EverythingáppearsÅo be ok, creatingánd signingÅhe certificate\n");

2020 i‡((
	gªt
=
X509_√w
()Ë=
NULL
Ë
îr
;

2021 
	gci
=
ªt
->
˚π_öfo
;

2023 #ifde‡
X509_V3


2025 i‡(!
X509_£t_vîsi⁄
(
ªt
,2)Ë
	gîr
;

2028 i‡(
BN_to_ASN1_INTEGER
(
£rül
,
ci
->
£rülNumbî
Ë=
NULL
)

2029 
îr
;

2030 i‡(
	g£lfsign
)

2032 i‡(!
X509_£t_issuî_«me
(
ªt
,
subje˘
))

2033 
	gîr
;

2037 i‡(!
X509_£t_issuî_«me
(
ªt
,
X509_gë_subje˘_«me
(
x509
)))

2038 
	gîr
;

2041 i‡(
°rcmp
(
°¨td©e
,"today") == 0)

2042 
X509_gmtime_adj
(
X509_gë_nŸBef‹e
(
ªt
),0);

2043 
ASN1_TIME_£t_°rög
(
X509_gë_nŸBef‹e
(
ªt
),
°¨td©e
);

2045 i‡(
	gídd©e
 =
NULL
)

2046 
X509_time_adj_ex
(
X509_gë_nŸA·î
(
ªt
),
days
, 0, 
NULL
);

2047 
ASN1_TIME_£t_°rög
(
X509_gë_nŸA·î
(
ªt
),
ídd©e
);

2049 i‡(!
X509_£t_subje˘_«me
(
ªt
,
subje˘
)Ë
	gîr
;

2051 
	gpktmp
=
X509_REQ_gë_pubkey
(
ªq
);

2052 
	gi
 = 
X509_£t_pubkey
(
ªt
,
pktmp
);

2053 
EVP_PKEY_‰ì
(
pktmp
);

2054 i‡(!
	gi
Ë
	gîr
;

2057 i‡(
	gext_£˘
)

2059 
X509V3_CTX
 
	g˘x
;

2060 i‡(
	gci
->
	gvîsi⁄
 =
NULL
)

2061 i‡((
ci
->
vîsi⁄
=
ASN1_INTEGER_√w
()Ë=
NULL
)

2062 
îr
;

2063 
ASN1_INTEGER_£t
(
ci
->
vîsi⁄
,2);

2067 i‡(
	gci
->
	gexãnsi⁄s
 !
NULL
)

2068 
sk_X509_EXTENSION_p›_‰ì
(
ci
->
exãnsi⁄s
,

2069 
X509_EXTENSION_‰ì
);

2071 
	gci
->
	gexãnsi⁄s
 = 
NULL
;

2074 i‡(
	g£lfsign
)

2075 
X509V3_£t_˘x
(&
˘x
, 
ªt
,Ñë, 
ªq
, 
NULL
, 0);

2077 
X509V3_£t_˘x
(&
˘x
, 
x509
, 
ªt
, 
ªq
, 
NULL
, 0);

2079 i‡(
	gextc⁄f
)

2081 i‡(
	gvîbo£
)

2082 
BIO_¥ötf
(
bio_îr
, "Extra configuration file found\n");

2085 
X509V3_£t_nc⁄f
(&
˘x
, 
extc⁄f
);

2091 i‡(!
X509V3_EXT_add_nc⁄f
(
extc⁄f
, &
˘x
, 
ext_£˘
,
ªt
))

2093 
BIO_¥ötf
(
bio_îr
,

2095 
ext_£˘
);

2096 
ERR_¥öt_îr‹s
(
bio_îr
);

2097 
	gîr
;

2099 i‡(
	gvîbo£
)

2100 
BIO_¥ötf
(
bio_îr
, "SuccessfullyáddedÉxtensions from file.\n");

2102 i‡(
	gext_£˘
)

2105 
X509V3_£t_nc⁄f
(&
˘x
, 
lc⁄f
);

2107 if(!
X509V3_EXT_add_nc⁄f
(
lc⁄f
, &
˘x
, 
ext_£˘
, 
ªt
))

2109 
BIO_¥ötf
(
bio_îr
, "ERROR:áddögÉxãnsi⁄†ö se˘i⁄ %s\n", 
ext_£˘
);

2110 
ERR_¥öt_îr‹s
(
bio_îr
);

2111 
	gîr
;

2114 i‡(
	gvîbo£
)

2115 
BIO_¥ötf
(
bio_îr
, "SuccessfullyáddedÉxtensions from config\n");

2121 i‡(!
c›y_exãnsi⁄s
(
ªt
, 
ªq
, 
ext_c›y
))

2123 
BIO_¥ötf
(
bio_îr
, "ERROR:áddingÉxtensions fromÑequest\n");

2124 
ERR_¥öt_îr‹s
(
bio_îr
);

2125 
	gîr
;

2129 if–
	gemaû_dn
 == 0 )

2131 i‡(!
X509_£t_subje˘_«me
(
ªt
,
dn_subje˘
)Ë
îr
;

2134 i‡(!
	gdeÁu…_›
)

2136 
BIO_¥ötf
(
bio_îr
, "Certificate Details:\n");

2138 
	g˚π›t
 |
X509_FLAG_NO_SIGDUMP
 | 
X509_FLAG_NO_SIGNAME
;

2139 
X509_¥öt_ex
(
bio_îr
, 
ªt
, 
«me›t
, 
˚π›t
);

2142 
BIO_¥ötf
(
bio_îr
,"Certificate isÅo be certified until ");

2143 
ASN1_TIME_¥öt
(
bio_îr
,
X509_gë_nŸA·î
(
ªt
));

2144 i‡(
	gdays
Ë
BIO_¥ötf
(
bio_îr
," (%ld days)",
days
);

2145 
BIO_¥ötf
(
bio_îr
, "\n");

2147 i‡(!
	gb©ch
)

2150 
BIO_¥ötf
(
bio_îr
,"SignÅhe certificate? [y/n]:");

2151 ()
BIO_Êush
(
bio_îr
);

2152 
	gbuf
[0]='\0';

2153 i‡(!
fgës
(
buf
,(buf)-1,
°dö
))

2155 
BIO_¥ötf
(
bio_îr
,"CERTIFICATE WILL NOT BE CERTIFIED: I/OÉrror\n");

2156 
	gok
=0;

2157 
	gîr
;

2159 i‡(!((
	gbuf
[0] ='y'Ë|| (
buf
[0] == 'Y')))

2161 
BIO_¥ötf
(
bio_îr
,"CERTIFICATE WILL NOT BE CERTIFIED\n");

2162 
	gok
=0;

2163 
	gîr
;

2167 
	gpktmp
=
X509_gë_pubkey
(
ªt
);

2168 i‡(
EVP_PKEY_missög_∑ømëîs
(
pktmp
) &&

2169 !
EVP_PKEY_missög_∑ømëîs
(
pkey
))

2170 
EVP_PKEY_c›y_∑ømëîs
(
pktmp
,
pkey
);

2171 
EVP_PKEY_‰ì
(
pktmp
);

2173 i‡(!
do_X509_sign
(
bio_îr
, 
ªt
,
pkey
,
dg°
, 
sig›ts
))

2174 
	gîr
;

2177 
	grow
[
DB_ty≥
]=(*)
OPENSSL_mÆloc
(2);

2179 
	gtm
=
X509_gë_nŸA·î
(
ªt
);

2180 
	grow
[
DB_exp_d©e
]=(*)
OPENSSL_mÆloc
(
tm
->
Àngth
+1);

2181 
mem˝y
(
row
[
DB_exp_d©e
],
tm
->
d©a
,tm->
Àngth
);

2182 
	grow
[
DB_exp_d©e
][
tm
->
Àngth
]='\0';

2184 
	grow
[
DB_ªv_d©e
]=
NULL
;

2187 
	grow
[
DB_fûe
]=(*)
OPENSSL_mÆloc
(8);

2188 
	grow
[
DB_«me
]=
X509_NAME_⁄ñöe
(
X509_gë_subje˘_«me
(
ªt
),
NULL
,0);

2190 i‡((
	grow
[
DB_ty≥
] =
NULL
Ë|| (
row
[
DB_exp_d©e
] == NULL) ||

2191 (
row
[
DB_fûe
] =
NULL
Ë|| (row[
DB_«me
] == NULL))

2193 
BIO_¥ötf
(
bio_îr
,"Memoryállocation failure\n");

2194 
	gîr
;

2196 
BUF_°æ˝y
(
row
[
DB_fûe
],"unknown",8);

2197 
	grow
[
DB_ty≥
][0]='V';

2198 
	grow
[
DB_ty≥
][1]='\0';

2200 i‡((
	gúow
=(**)
OPENSSL_mÆloc
((*)*(
DB_NUMBER
+1))Ë=
NULL
)

2202 
BIO_¥ötf
(
bio_îr
,"Memoryállocation failure\n");

2203 
	gîr
;

2206 
	gi
=0; i<
	gDB_NUMBER
; i++)

2208 
	gúow
[
i
]=
row
[i];

2209 
	grow
[
i
]=
NULL
;

2211 
	gúow
[
DB_NUMBER
]=
NULL
;

2213 i‡(!
TXT_DB_ö£π
(
db
->db,
úow
))

2215 
BIO_¥ötf
(
bio_îr
,"failedÅo update database\n");

2216 
BIO_¥ötf
(
bio_îr
,"TXT_DBÉº‹Çumbî %ld\n",
db
->db->
îr‹
);

2217 
	gîr
;

2219 
	gok
=1;

2220 
	gîr
:

2221 
i
=0; 
	gi
<
	gDB_NUMBER
; i++)

2222 i‡(
	grow
[
i
] !
NULL
Ë
OPENSSL_‰ì
(
row
[i]);

2224 i‡(
	gCA«me
 !
NULL
)

2225 
X509_NAME_‰ì
(
CA«me
);

2226 i‡(
	gsubje˘
 !
NULL
)

2227 
X509_NAME_‰ì
(
subje˘
);

2228 i‡((
	gdn_subje˘
 !
NULL
Ë&& !
emaû_dn
)

2229 
X509_NAME_‰ì
(
dn_subje˘
);

2230 i‡(
	gtm±m
 !
NULL
)

2231 
ASN1_UTCTIME_‰ì
(
tm±m
);

2232 i‡(
	gok
 <= 0)

2234 i‡(
ªt
 !
NULL
Ë
X509_‰ì
(ret);

2235 
	gªt
=
NULL
;

2238 *
	gxªt
=
ªt
;

2239 (
	gok
);

2242 
	$wrôe_√w_˚πifiˇã
(
BIO
 *
bp
, 
X509
 *
x
, 
ouçut_dî
, 
nŸext
)

2245 i‡(
ouçut_dî
)

2247 ()
	`i2d_X509_bio
(
bp
,
x
);

2252 
f
=
	`X509_NAME_⁄ñöe
(
	`X509_gë_issuî_«me
(
x
),
buf
,256);

2253 
	`BIO_¥ötf
(
bp
,"issuî :%s\n",
f
);

2255 
f
=
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
x
),
buf
,256);

2256 
	`BIO_¥ötf
(
bp
,"subje˘:%s\n",
f
);

2258 
	`BIO_puts
(
bp
,"serial :");

2259 
	`i2a_ASN1_INTEGER
(
bp
,
x
->
˚π_öfo
->
£rülNumbî
);

2260 
	`BIO_puts
(
bp
,"\n\n");

2262 i‡(!
nŸext
)
	`X509_¥öt
(
bp
,
x
);

2263 
	`PEM_wrôe_bio_X509
(
bp
,
x
);

2264 
	}
}

2266 
˚πify_•kac
(
X509
 **
xªt
, *
öfûe
, 
EVP_PKEY
 *
pkey
, X509 *
x509
,

2267 c⁄° 
EVP_MD
 *
dg°
, 
STACK_OF
(
OPENSSL_STRING
Ë*
sig›ts
,

2268 
STACK_OF
(
CONF_VALUE
Ë*
pﬁicy
, 
CA_DB
 *
db
,

2269 
BIGNUM
 *
£rül
, *
subj
,
chty≥
, 
mu…údn
, 
emaû_dn
, *
°¨td©e
, *
ídd©e
,

2270 
days
, *
ext_£˘
, 
CONF
 *
lc⁄f
, 
vîbo£
, 
˚π›t
,

2271 
«me›t
, 
deÁu…_›
, 
ext_c›y
)

2273 
STACK_OF
(
CONF_VALUE
Ë*
	gsk
=
NULL
;

2274 
LHASH_OF
(
CONF_VALUE
Ë*
	g∑rms
=
NULL
;

2275 
X509_REQ
 *
	gªq
=
NULL
;

2276 
CONF_VALUE
 *
	gcv
=
NULL
;

2277 
NETSCAPE_SPKI
 *
	g•ki
 = 
NULL
;

2278 
X509_REQ_INFO
 *
	gri
;

2279 *
	gty≥
,*
	gbuf
;

2280 
EVP_PKEY
 *
	gpktmp
=
NULL
;

2281 
X509_NAME
 *
	gn
=
NULL
;

2282 
X509_NAME_ENTRY
 *
	g√
=
NULL
;

2283 
	gok
-1,
	gi
,
	gj
;

2284 
	gîæöe
;

2285 
	gnid
;

2292 
	g∑rms
=
CONF_lﬂd
(
NULL
,
öfûe
,&
îæöe
);

2293 i‡(
	g∑rms
 =
NULL
)

2295 
BIO_¥ötf
(
bio_îr
,"îr‹ o¿löê%ld o‡%s\n",
îæöe
,
öfûe
);

2296 
ERR_¥öt_îr‹s
(
bio_îr
);

2297 
	gîr
;

2300 
	gsk
=
CONF_gë_£˘i⁄
(
∑rms
, "default");

2301 i‡(
sk_CONF_VALUE_num
(
sk
) == 0)

2303 
BIO_¥ötf
(
bio_îr
, "nÿ«me/vÆuê∑ú†found i¿%s\n", 
öfûe
);

2304 
CONF_‰ì
(
∑rms
);

2305 
	gîr
;

2315 
	gªq
=
X509_REQ_√w
();

2316 i‡(
	gªq
 =
NULL
)

2318 
ERR_¥öt_îr‹s
(
bio_îr
);

2319 
	gîr
;

2325 
	gri
=
ªq
->
ªq_öfo
;

2326 
	gn
 = 
ri
->
subje˘
;

2328 
	gi
 = 0; ; i++)

2330 i‡(
sk_CONF_VALUE_num
(
sk
Ë<
i
) ;

2332 
	gcv
=
sk_CONF_VALUE_vÆue
(
sk
,
i
);

2333 
	gty≥
=
cv
->
«me
;

2337 
	gbuf
 = 
cv
->
«me
; *buf ; buf++)

2338 i‡((*
	gbuf
 =':'Ë|| (*
buf
 == ',') || (*buf == '.'))

2340 
buf
++;

2341 i‡(*
	gbuf
Ë
	gty≥
 = 
buf
;

2345 
	gbuf
=
cv
->
vÆue
;

2346 i‡((
	gnid
=
OBJ_txt2nid
(
ty≥
)Ë=
NID_undef
)

2348 i‡(
°rcmp
(
ty≥
, "SPKAC") == 0)

2350 
•ki
 = 
NETSCAPE_SPKI_b64_decode
(
cv
->
vÆue
, -1);

2351 i‡(
	g•ki
 =
NULL
)

2353 
BIO_¥ötf
(
bio_îr
,"unableÅoÜoad Netscape SPKAC structure\n");

2354 
ERR_¥öt_îr‹s
(
bio_îr
);

2355 
	gîr
;

2361 i‡(!
X509_NAME_add_íåy_by_NID
(
n
, 
nid
, 
chty≥
,

2362 (*)
buf
, -1, -1, 0))

2363 
	gîr
;

2365 i‡(
	g•ki
 =
NULL
)

2367 
BIO_¥ötf
(
bio_îr
,"Netscape SPKAC structureÇot found in %s\n",

2368 
öfûe
);

2369 
	gîr
;

2376 
BIO_¥ötf
(
bio_îr
,"CheckÅhatÅhe SPKACÑequest matchesÅhe signature\n");

2378 i‡((
	gpktmp
=
NETSCAPE_SPKI_gë_pubkey
(
•ki
)Ë=
NULL
)

2380 
BIO_¥ötf
(
bio_îr
,"error unpacking SPKACÖublic key\n");

2381 
	gîr
;

2384 
	gj
 = 
NETSCAPE_SPKI_vîify
(
•ki
, 
pktmp
);

2385 i‡(
	gj
 <= 0)

2387 
BIO_¥ötf
(
bio_îr
,"signature verification failed on SPKACÖublic key\n");

2388 
	gîr
;

2390 
BIO_¥ötf
(
bio_îr
,"Signature ok\n");

2392 
X509_REQ_£t_pubkey
(
ªq
,
pktmp
);

2393 
EVP_PKEY_‰ì
(
pktmp
);

2394 
	gok
=
do_body
(
xªt
,
pkey
,
x509
,
dg°
,
sig›ts
,
pﬁicy
,
db
,
£rül
,
subj
,
chty≥
,

2395 
mu…údn
,
emaû_dn
,
°¨td©e
,
ídd©e
, 
days
,1,
vîbo£
,
ªq
,

2396 
ext_£˘
,
lc⁄f
, 
˚π›t
, 
«me›t
, 
deÁu…_›
, 
ext_c›y
, 0);

2397 
	gîr
:

2398 i‡(
ªq
 !
NULL
Ë
X509_REQ_‰ì
(req);

2399 i‡(
	g∑rms
 !
NULL
Ë
CONF_‰ì
(
∑rms
);

2400 i‡(
	g•ki
 !
NULL
Ë
NETSCAPE_SPKI_‰ì
(
•ki
);

2401 i‡(
	g√
 !
NULL
Ë
X509_NAME_ENTRY_‰ì
(
√
);

2403 (
	gok
);

2406 
	$check_time_f‹m©
(c⁄° *
°r
)

2408  
	`ASN1_TIME_£t_°rög
(
NULL
, 
°r
);

2409 
	}
}

2411 
	$do_ªvoke
(
X509
 *
x509
, 
CA_DB
 *
db
, 
ty≥
, *
vÆue
)

2413 
ASN1_UTCTIME
 *
tm
=
NULL
;

2414 *
row
[
DB_NUMBER
],**
ºow
,**
úow
;

2415 *
ªv_°r
 = 
NULL
;

2416 
BIGNUM
 *
bn
 = 
NULL
;

2417 
ok
=-1,
i
;

2419 
i
=0; i<
DB_NUMBER
; i++)

2420 
row
[
i
]=
NULL
;

2421 
row
[
DB_«me
]=
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
x509
),
NULL
,0);

2422 
bn
 = 
	`ASN1_INTEGER_to_BN
(
	`X509_gë_£rülNumbî
(
x509
),
NULL
);

2423 i‡(!
bn
)

2424 
îr
;

2425 i‡(
	`BN_is_zîo
(
bn
))

2426 
row
[
DB_£rül
]=
	`BUF_°rdup
("00");

2428 
row
[
DB_£rül
]=
	`BN_bn2hex
(
bn
);

2429 
	`BN_‰ì
(
bn
);

2430 i‡((
row
[
DB_«me
] =
NULL
Ë|| (row[
DB_£rül
] == NULL))

2432 
	`BIO_¥ötf
(
bio_îr
,"Memoryállocation failure\n");

2433 
îr
;

2438 
ºow
=
	`TXT_DB_gë_by_ödex
(
db
->db,
DB_£rül
,
row
);

2439 i‡(
ºow
 =
NULL
)

2441 
	`BIO_¥ötf
(
bio_îr
,"Addög E¡ry wôh sîü»numbî %†tÿDB f‹ %s\n", 
row
[
DB_£rül
],Ñow[
DB_«me
]);

2444 
row
[
DB_ty≥
]=(*)
	`OPENSSL_mÆloc
(2);

2446 
tm
=
	`X509_gë_nŸA·î
(
x509
);

2447 
row
[
DB_exp_d©e
]=(*)
	`OPENSSL_mÆloc
(
tm
->
Àngth
+1);

2448 
	`mem˝y
(
row
[
DB_exp_d©e
],
tm
->
d©a
,tm->
Àngth
);

2449 
row
[
DB_exp_d©e
][
tm
->
Àngth
]='\0';

2451 
row
[
DB_ªv_d©e
]=
NULL
;

2454 
row
[
DB_fûe
]=(*)
	`OPENSSL_mÆloc
(8);

2458 i‡((
row
[
DB_ty≥
] =
NULL
Ë|| (row[
DB_exp_d©e
] == NULL) ||

2459 (
row
[
DB_fûe
] =
NULL
))

2461 
	`BIO_¥ötf
(
bio_îr
,"Memoryállocation failure\n");

2462 
îr
;

2464 
	`BUF_°æ˝y
(
row
[
DB_fûe
],"unknown",8);

2465 
row
[
DB_ty≥
][0]='V';

2466 
row
[
DB_ty≥
][1]='\0';

2468 i‡((
úow
=(**)
	`OPENSSL_mÆloc
((*)*(
DB_NUMBER
+1))Ë=
NULL
)

2470 
	`BIO_¥ötf
(
bio_îr
,"Memoryállocation failure\n");

2471 
îr
;

2474 
i
=0; i<
DB_NUMBER
; i++)

2476 
úow
[
i
]=
row
[i];

2477 
row
[
i
]=
NULL
;

2479 
úow
[
DB_NUMBER
]=
NULL
;

2481 i‡(!
	`TXT_DB_ö£π
(
db
->db,
úow
))

2483 
	`BIO_¥ötf
(
bio_îr
,"failedÅo update database\n");

2484 
	`BIO_¥ötf
(
bio_îr
,"TXT_DBÉº‹Çumbî %ld\n",
db
->db->
îr‹
);

2485 
îr
;

2489 
ok
 = 
	`do_ªvoke
(
x509
,
db
, 
ty≥
, 
vÆue
);

2491 
îr
;

2494 i‡(
	`ödex_«me_cmp_noc⁄°
(
row
, 
ºow
))

2496 
	`BIO_¥ötf
(
bio_îr
,"ERROR:name doesÇot match %s\n",

2497 
row
[
DB_«me
]);

2498 
îr
;

2500 i‡(
ºow
[
DB_ty≥
][0]=='R')

2502 
	`BIO_¥ötf
(
bio_îr
,"ERROR:AlreadyÑevoked, serialÇumber %s\n",

2503 
row
[
DB_£rül
]);

2504 
îr
;

2508 
	`BIO_¥ötf
(
bio_îr
,"Revokög Cîtifiˇã %s.\n", 
ºow
[
DB_£rül
]);

2509 
ªv_°r
 = 
	`make_ªvoˇti⁄_°r
(
ty≥
, 
vÆue
);

2510 i‡(!
ªv_°r
)

2512 
	`BIO_¥ötf
(
bio_îr
, "Error inÑevocationárguments\n");

2513 
îr
;

2515 
ºow
[
DB_ty≥
][0]='R';

2516 
ºow
[
DB_ty≥
][1]='\0';

2517 
ºow
[
DB_ªv_d©e
] = 
ªv_°r
;

2519 
ok
=1;

2520 
îr
:

2521 
i
=0; i<
DB_NUMBER
; i++)

2523 i‡(
row
[
i
] !
NULL
)

2524 
	`OPENSSL_‰ì
(
row
[
i
]);

2526 (
ok
);

2527 
	}
}

2529 
	$gë_˚πifiˇã_°©us
(c⁄° *
£rül
, 
CA_DB
 *
db
)

2531 *
row
[
DB_NUMBER
],**
ºow
;

2532 
ok
=-1,
i
;

2535 
i
=0; i<
DB_NUMBER
; i++)

2536 
row
[
i
]=
NULL
;

2539 
row
[
DB_£rül
] = 
	`OPENSSL_mÆloc
(
	`°æí
(
£rül
) + 2);

2540 i‡(
row
[
DB_£rül
] =
NULL
)

2542 
	`BIO_¥ötf
(
bio_îr
,"Malloc failure\n");

2543 
îr
;

2546 i‡(
	`°æí
(
£rül
) % 2)

2549 
row
[
DB_£rül
][0]='0';

2552 
	`mem˝y
(
row
[
DB_£rül
]+1, 
£rül
, 
	`°æí
(serial));

2553 
row
[
DB_£rül
][
	`°æí
(
£rül
)+1]='\0';

2558 
	`mem˝y
(
row
[
DB_£rül
], 
£rül
, 
	`°æí
(serial));

2559 
row
[
DB_£rül
][
	`°æí
(
£rül
)]='\0';

2563 
i
=0; 
row
[
DB_£rül
][i] != '\0'; i++)

2564 
row
[
DB_£rül
][
i
] = 
	`touµî
(()row[DB_serial][i]);

2567 
ok
=1;

2570 
ºow
=
	`TXT_DB_gë_by_ödex
(
db
->db,
DB_£rül
,
row
);

2571 i‡(
ºow
 =
NULL
)

2573 
	`BIO_¥ötf
(
bio_îr
,"Serial %sÇotÖresent in db.\n",

2574 
row
[
DB_£rül
]);

2575 
ok
=-1;

2576 
îr
;

2578 i‡(
ºow
[
DB_ty≥
][0]=='V')

2580 
	`BIO_¥ötf
(
bio_îr
,"%s=Valid (%c)\n",

2581 
row
[
DB_£rül
], 
ºow
[
DB_ty≥
][0]);

2582 
îr
;

2584 i‡(
ºow
[
DB_ty≥
][0]=='R')

2586 
	`BIO_¥ötf
(
bio_îr
,"%s=Revoked (%c)\n",

2587 
row
[
DB_£rül
], 
ºow
[
DB_ty≥
][0]);

2588 
îr
;

2590 i‡(
ºow
[
DB_ty≥
][0]=='E')

2592 
	`BIO_¥ötf
(
bio_îr
,"%s=Expired (%c)\n",

2593 
row
[
DB_£rül
], 
ºow
[
DB_ty≥
][0]);

2594 
îr
;

2596 i‡(
ºow
[
DB_ty≥
][0]=='S')

2598 
	`BIO_¥ötf
(
bio_îr
,"%s=Suspended (%c)\n",

2599 
row
[
DB_£rül
], 
ºow
[
DB_ty≥
][0]);

2600 
îr
;

2604 
	`BIO_¥ötf
(
bio_îr
,"%s=Unknown (%c).\n",

2605 
row
[
DB_£rül
], 
ºow
[
DB_ty≥
][0]);

2606 
ok
=-1;

2608 
îr
:

2609 
i
=0; i<
DB_NUMBER
; i++)

2611 i‡(
row
[
i
] !
NULL
)

2612 
	`OPENSSL_‰ì
(
row
[
i
]);

2614 (
ok
);

2615 
	}
}

2617 
	$do_upd©edb
 (
CA_DB
 *
db
)

2619 
ASN1_UTCTIME
 *
a_tm
 = 
NULL
;

2620 
i
, 
˙t
 = 0;

2621 
db_y2k
, 
a_y2k
;

2622 **
ºow
, *
a_tm_s
;

2624 
a_tm
 = 
	`ASN1_UTCTIME_√w
();

2627 
a_tm
 = 
	`X509_gmtime_adj
(a_tm, 0);

2628 
a_tm_s
 = (*Ë
	`OPENSSL_mÆloc
(
a_tm
->
Àngth
+1);

2629 i‡(
a_tm_s
 =
NULL
)

2631 
˙t
 = -1;

2632 
îr
;

2635 
	`mem˝y
(
a_tm_s
, 
a_tm
->
d©a
,á_tm->
Àngth
);

2636 
a_tm_s
[
a_tm
->
Àngth
] = '\0';

2638 i‡(
	`°∫cmp
(
a_tm_s
, "49", 2) <= 0)

2639 
a_y2k
 = 1;

2641 
a_y2k
 = 0;

2643 
i
 = 0; i < 
	`sk_OPENSSL_PSTRING_num
(
db
->db->
d©a
); i++)

2645 
ºow
 = 
	`sk_OPENSSL_PSTRING_vÆue
(
db
->db->
d©a
, 
i
);

2647 i‡(
ºow
[
DB_ty≥
][0] == 'V')

2650 i‡(
	`°∫cmp
(
ºow
[
DB_exp_d©e
], "49", 2) <= 0)

2651 
db_y2k
 = 1;

2653 
db_y2k
 = 0;

2655 i‡(
db_y2k
 =
a_y2k
)

2658 i‡(
	`°rcmp
(
ºow
[
DB_exp_d©e
], 
a_tm_s
) <= 0)

2660 
ºow
[
DB_ty≥
][0] = 'E';

2661 
ºow
[
DB_ty≥
][1] = '\0';

2662 
˙t
++;

2664 
	`BIO_¥ötf
(
bio_îr
, "%s=Expired\n",

2665 
ºow
[
DB_£rül
]);

2668 i‡(
db_y2k
 < 
a_y2k
)

2670 
ºow
[
DB_ty≥
][0] = 'E';

2671 
ºow
[
DB_ty≥
][1] = '\0';

2672 
˙t
++;

2674 
	`BIO_¥ötf
(
bio_îr
, "%s=Expired\n",

2675 
ºow
[
DB_£rül
]);

2681 
îr
:

2683 
	`ASN1_UTCTIME_‰ì
(
a_tm
);

2684 
	`OPENSSL_‰ì
(
a_tm_s
);

2686  (
˙t
);

2687 
	}
}

2689 c⁄° *
	g¸l_ªas⁄s
[] = {

2705 
	#NUM_REASONS
 ((
¸l_ªas⁄s
Ë/ (*))

	)

2715 *
	$make_ªvoˇti⁄_°r
(
ªv_ty≥
, *
ªv_¨g
)

2717 *
Ÿhî
 = 
NULL
, *
°r
;

2718 c⁄° *
ªas⁄
 = 
NULL
;

2719 
ASN1_OBJECT
 *
Ÿmp
;

2720 
ASN1_UTCTIME
 *
ªvtm
 = 
NULL
;

2721 
i
;

2722 
ªv_ty≥
)

2724 
REV_NONE
:

2727 
REV_CRL_REASON
:

2728 
i
 = 0; i < 8; i++)

2730 i‡(!
	`°rˇ£cmp
(
ªv_¨g
, 
¸l_ªas⁄s
[
i
]))

2732 
ªas⁄
 = 
¸l_ªas⁄s
[
i
];

2736 i‡(
ªas⁄
 =
NULL
)

2738 
	`BIO_¥ötf
(
bio_îr
, "Unknow¿CRLÑós⁄ %s\n", 
ªv_¨g
);

2739  
NULL
;

2743 
REV_HOLD
:

2746 
Ÿmp
 = 
	`OBJ_txt2obj
(
ªv_¨g
, 0);

2747 
	`ASN1_OBJECT_‰ì
(
Ÿmp
);

2749 i‡(
Ÿmp
 =
NULL
)

2751 
	`BIO_¥ötf
(
bio_îr
, "InvÆid obje˘ idítifõ∏%s\n", 
ªv_¨g
);

2752  
NULL
;

2755 
ªas⁄
 = "holdInstruction";

2756 
Ÿhî
 = 
ªv_¨g
;

2759 
REV_KEY_COMPROMISE
:

2760 
REV_CA_COMPROMISE
:

2763 i‡(!
	`ASN1_GENERALIZEDTIME_£t_°rög
(
NULL
, 
ªv_¨g
))

2765 
	`BIO_¥ötf
(
bio_îr
, "InvÆidÅimêf‹m© %s. Nìd YYYYMMDDHHMMSSZ\n", 
ªv_¨g
);

2766  
NULL
;

2768 
Ÿhî
 = 
ªv_¨g
;

2769 i‡(
ªv_ty≥
 =
REV_KEY_COMPROMISE
)

2770 
ªas⁄
 = "keyTime";

2772 
ªas⁄
 = "CAkeyTime";

2778 
ªvtm
 = 
	`X509_gmtime_adj
(
NULL
, 0);

2780 
i
 = 
ªvtm
->
Àngth
 + 1;

2782 i‡(
ªas⁄
Ë
i
 +
	`°æí
(reason) + 1;

2783 i‡(
Ÿhî
Ë
i
 +
	`°æí
(other) + 1;

2785 
°r
 = 
	`OPENSSL_mÆloc
(
i
);

2787 i‡(!
°r
Ë 
NULL
;

2789 
	`BUF_°æ˝y
(
°r
, (*)
ªvtm
->
d©a
, 
i
);

2790 i‡(
ªas⁄
)

2792 
	`BUF_°æˇt
(
°r
, ",", 
i
);

2793 
	`BUF_°æˇt
(
°r
, 
ªas⁄
, 
i
);

2795 i‡(
Ÿhî
)

2797 
	`BUF_°æˇt
(
°r
, ",", 
i
);

2798 
	`BUF_°æˇt
(
°r
, 
Ÿhî
, 
i
);

2800 
	`ASN1_UTCTIME_‰ì
(
ªvtm
);

2801  
°r
;

2802 
	}
}

2812 
	$make_ªvoked
(
X509_REVOKED
 *
ªv
, c⁄° *
°r
)

2814 *
tmp
 = 
NULL
;

2815 
ªas⁄_code
 = -1;

2816 
i
, 
ªt
 = 0;

2817 
ASN1_OBJECT
 *
hﬁd
 = 
NULL
;

2818 
ASN1_GENERALIZEDTIME
 *
comp_time
 = 
NULL
;

2819 
ASN1_ENUMERATED
 *
πmp
 = 
NULL
;

2821 
ASN1_TIME
 *
ªvD©e
 = 
NULL
;

2823 
i
 = 
	`u≈ack_ªvöfo
(&
ªvD©e
, &
ªas⁄_code
, &
hﬁd
, &
comp_time
, 
°r
);

2825 i‡(
i
 == 0)

2826 
îr
;

2828 i‡(
ªv
 && !
	`X509_REVOKED_£t_ªvoˇti⁄D©e
‘ev, 
ªvD©e
))

2829 
îr
;

2831 i‡(
ªv
 && (
ªas⁄_code
 !
OCSP_REVOKED_STATUS_NOSTATUS
))

2833 
πmp
 = 
	`ASN1_ENUMERATED_√w
();

2834 i‡(!
πmp
 || !
	`ASN1_ENUMERATED_£t
‘tmp, 
ªas⁄_code
))

2835 
îr
;

2836 i‡(!
	`X509_REVOKED_add1_ext_i2d
(
ªv
, 
NID_¸l_ªas⁄
, 
πmp
, 0, 0))

2837 
îr
;

2840 i‡(
ªv
 && 
comp_time
)

2842 i‡(!
	`X509_REVOKED_add1_ext_i2d
(
ªv
, 
NID_övÆidôy_d©e
, 
comp_time
, 0, 0))

2843 
îr
;

2845 i‡(
ªv
 && 
hﬁd
)

2847 i‡(!
	`X509_REVOKED_add1_ext_i2d
(
ªv
, 
NID_hﬁd_ö°ru˘i⁄_code
, 
hﬁd
, 0, 0))

2848 
îr
;

2851 i‡(
ªas⁄_code
 !
OCSP_REVOKED_STATUS_NOSTATUS
)

2852 
ªt
 = 2;

2853 
ªt
 = 1;

2855 
îr
:

2857 i‡(
tmp
Ë
	`OPENSSL_‰ì
(tmp);

2858 
	`ASN1_OBJECT_‰ì
(
hﬁd
);

2859 
	`ASN1_GENERALIZEDTIME_‰ì
(
comp_time
);

2860 
	`ASN1_ENUMERATED_‰ì
(
πmp
);

2861 
	`ASN1_TIME_‰ì
(
ªvD©e
);

2863  
ªt
;

2864 
	}
}

2866 
	$ﬁd_íåy_¥öt
(
BIO
 *
bp
, 
ASN1_OBJECT
 *
obj
, 
ASN1_STRING
 *
°r
)

2868 
buf
[25],*
pbuf
, *
p
;

2869 
j
;

2870 
j
=
	`i2a_ASN1_OBJECT
(
bp
,
obj
);

2871 
pbuf
=
buf
;

2872 
j
=22-j; j>0; j--)

2873 *(
pbuf
++)=' ';

2874 *(
pbuf
++)=':';

2875 *(
pbuf
++)='\0';

2876 
	`BIO_puts
(
bp
,
buf
);

2878 i‡(
°r
->
ty≥
 =
V_ASN1_PRINTABLESTRING
)

2879 
	`BIO_¥ötf
(
bp
,"PRINTABLE:'");

2880 i‡(
°r
->
ty≥
 =
V_ASN1_T61STRING
)

2881 
	`BIO_¥ötf
(
bp
,"T61STRING:'");

2882 i‡(
°r
->
ty≥
 =
V_ASN1_IA5STRING
)

2883 
	`BIO_¥ötf
(
bp
,"IA5STRING:'");

2884 i‡(
°r
->
ty≥
 =
V_ASN1_UNIVERSALSTRING
)

2885 
	`BIO_¥ötf
(
bp
,"UNIVERSALSTRING:'");

2887 
	`BIO_¥ötf
(
bp
,"ASN.1 %2d:'",
°r
->
ty≥
);

2889 
p
=(*)
°r
->
d©a
;

2890 
j
=
°r
->
Àngth
; j>0; j--)

2892 i‡((*
p
 >= ' ') && (*p <= '~'))

2893 
	`BIO_¥ötf
(
bp
,"%c",*
p
);

2894 i‡(*
p
 & 0x80)

2895 
	`BIO_¥ötf
(
bp
,"\\0x%02X",*
p
);

2896 i‡(()*
p
 == 0xf7)

2897 
	`BIO_¥ötf
(
bp
,"^?");

2898 
	`BIO_¥ötf
(
bp
,"^%c",*
p
+'@');

2899 
p
++;

2901 
	`BIO_¥ötf
(
bp
,"'\n");

2903 
	}
}

2905 
	$u≈ack_ªvöfo
(
ASN1_TIME
 **
¥evtm
, *
¥ós⁄
, 
ASN1_OBJECT
 **
phﬁd
, 
ASN1_GENERALIZEDTIME
 **
pövtm
, c⁄° *
°r
)

2907 *
tmp
 = 
NULL
;

2908 *
πime_°r
, *
ªas⁄_°r
 = 
NULL
, *
¨g_°r
 = NULL, *
p
;

2909 
ªas⁄_code
 = -1;

2910 
ªt
 = 0;

2911 
i
;

2912 
ASN1_OBJECT
 *
hﬁd
 = 
NULL
;

2913 
ASN1_GENERALIZEDTIME
 *
comp_time
 = 
NULL
;

2914 
tmp
 = 
	`BUF_°rdup
(
°r
);

2916 
p
 = 
	`°rchr
(
tmp
, ',');

2918 
πime_°r
 = 
tmp
;

2920 i‡(
p
)

2922 *
p
 = '\0';

2923 
p
++;

2924 
ªas⁄_°r
 = 
p
;

2925 
p
 = 
	`°rchr
(p, ',');

2926 i‡(
p
)

2928 *
p
 = '\0';

2929 
¨g_°r
 = 
p
 + 1;

2933 i‡(
¥evtm
)

2935 *
¥evtm
 = 
	`ASN1_UTCTIME_√w
();

2936 i‡(!
	`ASN1_UTCTIME_£t_°rög
(*
¥evtm
, 
πime_°r
))

2938 
	`BIO_¥ötf
(
bio_îr
, "övÆidÑevoˇti⁄ d©ê%s\n", 
πime_°r
);

2939 
îr
;

2942 i‡(
ªas⁄_°r
)

2944 
i
 = 0; i < 
NUM_REASONS
; i++)

2946 if(!
	`°rˇ£cmp
(
ªas⁄_°r
, 
¸l_ªas⁄s
[
i
]))

2948 
ªas⁄_code
 = 
i
;

2952 i‡(
ªas⁄_code
 =
OCSP_REVOKED_STATUS_NOSTATUS
)

2954 
	`BIO_¥ötf
(
bio_îr
, "övÆidÑós⁄ codê%s\n", 
ªas⁄_°r
);

2955 
îr
;

2958 i‡(
ªas⁄_code
 == 7)

2959 
ªas⁄_code
 = 
OCSP_REVOKED_STATUS_REMOVEFROMCRL
;

2960 i‡(
ªas⁄_code
 == 8)

2962 i‡(!
¨g_°r
)

2964 
	`BIO_¥ötf
(
bio_îr
, "missing hold instruction\n");

2965 
îr
;

2967 
ªas⁄_code
 = 
OCSP_REVOKED_STATUS_CERTIFICATEHOLD
;

2968 
hﬁd
 = 
	`OBJ_txt2obj
(
¨g_°r
, 0);

2970 i‡(!
hﬁd
)

2972 
	`BIO_¥ötf
(
bio_îr
, "övÆid obje˘ idítifõ∏%s\n", 
¨g_°r
);

2973 
îr
;

2975 i‡(
phﬁd
Ë*phﬁd = 
hﬁd
;

2977 i‡((
ªas⁄_code
 == 9) || (reason_code == 10))

2979 i‡(!
¨g_°r
)

2981 
	`BIO_¥ötf
(
bio_îr
, "missing compromisedÅime\n");

2982 
îr
;

2984 
comp_time
 = 
	`ASN1_GENERALIZEDTIME_√w
();

2985 i‡(!
	`ASN1_GENERALIZEDTIME_£t_°rög
(
comp_time
, 
¨g_°r
))

2987 
	`BIO_¥ötf
(
bio_îr
, "övÆid com¥omi£dÅimê%s\n", 
¨g_°r
);

2988 
îr
;

2990 i‡(
ªas⁄_code
 == 9)

2991 
ªas⁄_code
 = 
OCSP_REVOKED_STATUS_KEYCOMPROMISE
;

2993 
ªas⁄_code
 = 
OCSP_REVOKED_STATUS_CACOMPROMISE
;

2997 i‡(
¥ós⁄
Ë*¥ós⁄ = 
ªas⁄_code
;

2998 i‡(
pövtm
Ë*pövtm = 
comp_time
;

2999 
	`ASN1_GENERALIZEDTIME_‰ì
(
comp_time
);

3001 
ªt
 = 1;

3003 
îr
:

3005 i‡(
tmp
Ë
	`OPENSSL_‰ì
(tmp);

3006 i‡(!
phﬁd
Ë
	`ASN1_OBJECT_‰ì
(
hﬁd
);

3007 i‡(!
pövtm
Ë
	`ASN1_GENERALIZEDTIME_‰ì
(
comp_time
);

3009  
ªt
;

3010 
	}
}

	@ciphers.c

59 
	~<°dio.h
>

60 
	~<°dlib.h
>

61 
	~<°rög.h
>

62 #ifde‡
OPENSSL_NO_STDIO


63 
	#APPS_WIN16


	)

65 
	~"≠ps.h
"

66 
	~<›ís¶/îr.h
>

67 
	~<›ís¶/s¶.h
>

69 #unde‡
PROG


70 
	#PROG
 
cùhîs_maö


	)

72 c⁄° *
	gcùhîs_ußge
[]={

79 
NULL


82 
MAIN
(, **);

84 
	$MAIN
(
¨gc
, **
¨gv
)

86 
ªt
=1,
i
;

87 
vîbo£
=0,
Vîbo£
=0;

88 c⁄° **
µ
;

89 c⁄° *
p
;

90 
bad›s
=0;

91 
SSL_CTX
 *
˘x
=
NULL
;

92 
SSL
 *
s¶
=
NULL
;

93 *
cùhîs
=
NULL
;

94 c⁄° 
SSL_METHOD
 *
mëh
=
NULL
;

95 
	`STACK_OF
(
SSL_CIPHER
Ë*
sk
;

96 
buf
[512];

97 
BIO
 *
STDout
=
NULL
;

99 #i‡!
	`deföed
(
OPENSSL_NO_SSL2
Ë&& !deföed(
OPENSSL_NO_SSL3
)

100 
mëh
=
	`SSLv23_£rvî_mëhod
();

101 #ñi‡!
	`deföed
(
OPENSSL_NO_SSL3
)

102 
mëh
=
	`SSLv3_£rvî_mëhod
();

103 #ñi‡!
	`deföed
(
OPENSSL_NO_SSL2
)

104 
mëh
=
	`SSLv2_£rvî_mëhod
();

107 
	`≠ps_°¨tup
();

109 i‡(
bio_îr
 =
NULL
)

110 
bio_îr
=
	`BIO_√w_Â
(
°dîr
,
BIO_NOCLOSE
);

111 
STDout
=
	`BIO_√w_Â
(
°dout
,
BIO_NOCLOSE
);

112 #ifde‡
OPENSSL_SYS_VMS


114 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

115 
STDout
 = 
	`BIO_push
(
tmpbio
, STDout);

118 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

119 
íd
;

121 
¨gc
--;

122 
¨gv
++;

123 
¨gc
 >= 1)

125 i‡(
	`°rcmp
(*
¨gv
,"-v") == 0)

126 
vîbo£
=1;

127 i‡(
	`°rcmp
(*
¨gv
,"-V") == 0)

128 
vîbo£
=
Vîbo£
=1;

129 #i‚de‡
OPENSSL_NO_SSL2


130 i‡(
	`°rcmp
(*
¨gv
,"-ssl2") == 0)

131 
mëh
=
	`SSLv2_˛õ¡_mëhod
();

133 #i‚de‡
OPENSSL_NO_SSL3


134 i‡(
	`°rcmp
(*
¨gv
,"-ssl3") == 0)

135 
mëh
=
	`SSLv3_˛õ¡_mëhod
();

137 #i‚de‡
OPENSSL_NO_TLS1


138 i‡(
	`°rcmp
(*
¨gv
,"-tls1") == 0)

139 
mëh
=
	`TLSv1_˛õ¡_mëhod
();

141 i‡((
	`°∫cmp
(*
¨gv
,"-h",2) == 0) ||

142 (
	`°rcmp
(*
¨gv
,"-?") == 0))

144 
bad›s
=1;

149 
cùhîs
*
¨gv
;

151 
¨gc
--;

152 
¨gv
++;

155 i‡(
bad›s
)

157 
µ
=
cùhîs_ußge
; (*µ !
NULL
);Öp++)

158 
	`BIO_¥ötf
(
bio_îr
,"%s",*
µ
);

159 
íd
;

162 
	`O≥nSSL_add_s¶_Æg‹ôhms
();

164 
˘x
=
	`SSL_CTX_√w
(
mëh
);

165 i‡(
˘x
 =
NULL
Ë
îr
;

166 i‡(
cùhîs
 !
NULL
) {

167 if(!
	`SSL_CTX_£t_cùhî_li°
(
˘x
,
cùhîs
)) {

168 
	`BIO_¥ötf
(
bio_îr
, "Error in cipherÜist\n");

169 
îr
;

172 
s¶
=
	`SSL_√w
(
˘x
);

173 i‡(
s¶
 =
NULL
Ë
îr
;

176 i‡(!
vîbo£
)

178 
i
=0; ; i++)

180 
p
=
	`SSL_gë_cùhî_li°
(
s¶
,
i
);

181 i‡(
p
 =
NULL
) ;

182 i‡(
i
 !0Ë
	`BIO_¥ötf
(
STDout
,":");

183 
	`BIO_¥ötf
(
STDout
,"%s",
p
);

185 
	`BIO_¥ötf
(
STDout
,"\n");

189 
sk
=
	`SSL_gë_cùhîs
(
s¶
);

191 
i
=0; i<
	`sk_SSL_CIPHER_num
(
sk
); i++)

193 
SSL_CIPHER
 *
c
;

195 
c
 = 
	`sk_SSL_CIPHER_vÆue
(
sk
,
i
);

197 i‡(
Vîbo£
)

199 
id
 = 
	`SSL_CIPHER_gë_id
(
c
);

200 
id0
 = ()(
id
 >> 24);

201 
id1
 = ()((
id
 >> 16) & 0xffL);

202 
id2
 = ()((
id
 >> 8) & 0xffL);

203 
id3
 = ()(
id
 & 0xffL);

205 i‡((
id
 & 0xff000000L) == 0x02000000L)

206 
	`BIO_¥ötf
(
STDout
, " 0x%02X,0x%02X,0x%02X - ", 
id1
, 
id2
, 
id3
);

207 i‡((
id
 & 0xff000000L) == 0x03000000L)

208 
	`BIO_¥ötf
(
STDout
, " 0x%02X,0x%02X - ", 
id2
, 
id3
);

210 
	`BIO_¥ötf
(
STDout
, "0x%02X,0x%02X,0x%02X,0x%02X - ", 
id0
, 
id1
, 
id2
, 
id3
);

213 
	`BIO_puts
(
STDout
,
	`SSL_CIPHER_des¸ùti⁄
(
c
,
buf
, buf));

217 
ªt
=0;

220 
îr
:

221 
	`SSL_lﬂd_îr‹_°rögs
();

222 
	`ERR_¥öt_îr‹s
(
bio_îr
);

224 
íd
:

225 i‡(
˘x
 !
NULL
Ë
	`SSL_CTX_‰ì
(ctx);

226 i‡(
s¶
 !
NULL
Ë
	`SSL_‰ì
(ssl);

227 i‡(
STDout
 !
NULL
Ë
	`BIO_‰ì_Æl
(STDout);

228 
	`≠ps_shutdown
();

229 
	`OPENSSL_EXIT
(
ªt
);

230 
	}
}

	@cms.c

56 
	~<°dio.h
>

57 
	~<°rög.h
>

58 
	~"≠ps.h
"

60 #i‚de‡
OPENSSL_NO_CMS


62 
	~<›ís¶/¸y±o.h
>

63 
	~<›ís¶/≥m.h
>

64 
	~<›ís¶/îr.h
>

65 
	~<›ís¶/x509_vfy.h
>

66 
	~<›ís¶/x509v3.h
>

67 
	~<›ís¶/cms.h
>

69 #unde‡
PROG


70 
	#PROG
 
cms_maö


	)

71 
ßve_˚πs
(*
sig√rfûe
, 
STACK_OF
(
X509
Ë*
sig√rs
);

72 
cms_cb
(
ok
, 
X509_STORE_CTX
 *
˘x
);

73 
ª˚ùt_ªque°_¥öt
(
BIO
 *
out
, 
CMS_C⁄ã¡Info
 *
cms
);

74 
CMS_Re˚ùtReque°
 *
make_ª˚ùt_ªque°
(
STACK_OF
(
OPENSSL_STRING
Ë*
º_to
,

75 
º_Æl‹fú°
,

76 
STACK_OF
(
OPENSSL_STRING
Ë*
º_‰om
);

78 
	#SMIME_OP
 0x10

	)

79 
	#SMIME_IP
 0x20

	)

80 
	#SMIME_SIGNERS
 0x40

	)

81 
	#SMIME_ENCRYPT
 (1 | 
SMIME_OP
)

	)

82 
	#SMIME_DECRYPT
 (2 | 
SMIME_IP
)

	)

83 
	#SMIME_SIGN
 (3 | 
SMIME_OP
 | 
SMIME_SIGNERS
)

	)

84 
	#SMIME_VERIFY
 (4 | 
SMIME_IP
)

	)

85 
	#SMIME_CMSOUT
 (5 | 
SMIME_IP
 | 
SMIME_OP
)

	)

86 
	#SMIME_RESIGN
 (6 | 
SMIME_IP
 | 
SMIME_OP
 | 
SMIME_SIGNERS
)

	)

87 
	#SMIME_DATAOUT
 (7 | 
SMIME_IP
)

	)

88 
	#SMIME_DATA_CREATE
 (8 | 
SMIME_OP
)

	)

89 
	#SMIME_DIGEST_VERIFY
 (9 | 
SMIME_IP
)

	)

90 
	#SMIME_DIGEST_CREATE
 (10 | 
SMIME_OP
)

	)

91 
	#SMIME_UNCOMPRESS
 (11 | 
SMIME_IP
)

	)

92 
	#SMIME_COMPRESS
 (12 | 
SMIME_OP
)

	)

93 
	#SMIME_ENCRYPTED_DECRYPT
 (13 | 
SMIME_IP
)

	)

94 
	#SMIME_ENCRYPTED_ENCRYPT
 (14 | 
SMIME_OP
)

	)

95 
	#SMIME_SIGN_RECEIPT
 (15 | 
SMIME_IP
 | 
SMIME_OP
)

	)

96 
	#SMIME_VERIFY_RECEIPT
 (16 | 
SMIME_IP
)

	)

98 
	gvîify_îr
 = 0;

100 
MAIN
(, **);

102 
	$MAIN
(
¨gc
, **
¨gv
)

104 
ENGINE
 *
e
 = 
NULL
;

105 
›î©i⁄
 = 0;

106 
ªt
 = 0;

107 **
¨gs
;

108 c⁄° *
ömode
 = "r", *
outmode
 = "w";

109 *
öfûe
 = 
NULL
, *
outfûe
 = NULL, *
r˘fûe
 = NULL;

110 *
sig√rfûe
 = 
NULL
, *
ªcùfûe
 = NULL;

111 
	`STACK_OF
(
OPENSSL_STRING
Ë*
sksig√rs
 = 
NULL
, *
skkeys
 = NULL;

112 *
˚πfûe
 = 
NULL
, *
keyfûe
 = NULL, *
c⁄tfûe
=NULL;

113 *
˚πsoutfûe
 = 
NULL
;

114 c⁄° 
EVP_CIPHER
 *
cùhî
 = 
NULL
;

115 
CMS_C⁄ã¡Info
 *
cms
 = 
NULL
, *
rcms
 = NULL;

116 
X509_STORE
 *
°‹e
 = 
NULL
;

117 
X509
 *
˚π
 = 
NULL
, *
ªcù
 = NULL, *
sig√r
 = NULL;

118 
EVP_PKEY
 *
key
 = 
NULL
;

119 
	`STACK_OF
(
X509
Ë*
í˚πs
 = 
NULL
, *
Ÿhî
 = NULL;

120 
BIO
 *
ö
 = 
NULL
, *
out
 = NULL, *
öd©a
 = NULL, *
r˘ö
 = NULL;

121 
bad¨g
 = 0;

122 
Êags
 = 
CMS_DETACHED
, 
noout
 = 0, 
¥öt
 = 0;

123 
vîify_ªtcode
 = 0;

124 
º_¥öt
 = 0, 
º_Æl‹fú°
 = -1;

125 
	`STACK_OF
(
OPENSSL_STRING
Ë*
º_to
 = 
NULL
, *
º_‰om
 = NULL;

126 
CMS_Re˚ùtReque°
 *
º
 = 
NULL
;

127 *
to
 = 
NULL
, *
‰om
 = NULL, *
subje˘
 = NULL;

128 *
CAfûe
 = 
NULL
, *
CA∑th
 = NULL;

129 *
∑sßrgö
 = 
NULL
, *
∑ssö
 = NULL;

130 *
öønd
 = 
NULL
;

131 
√ed_ønd
 = 0;

132 c⁄° 
EVP_MD
 *
sign_md
 = 
NULL
;

133 
öf‹m©
 = 
FORMAT_SMIME
, 
outf‹m©
 = FORMAT_SMIME;

134 
r˘f‹m©
 = 
FORMAT_SMIME
, 
keyf‹m
 = 
FORMAT_PEM
;

135 #i‚de‡
OPENSSL_NO_ENGINE


136 *
ígöe
=
NULL
;

138 *
£¸ë_key
 = 
NULL
, *
£¸ë_keyid
 = NULL;

139 *
pwri_∑ss
 = 
NULL
, *
pwri_tmp
 = NULL;

140 
size_t
 
£¸ë_keyÀn
 = 0, 
£¸ë_keyidÀn
 = 0;

142 
ASN1_OBJECT
 *
ec⁄ã¡_ty≥
 = 
NULL
;

144 
X509_VERIFY_PARAM
 *
vpm
 = 
NULL
;

146 
¨gs
 = 
¨gv
 + 1;

147 
ªt
 = 1;

149 
	`≠ps_°¨tup
();

151 i‡(
bio_îr
 =
NULL
)

153 i‡((
bio_îr
 = 
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

154 
	`BIO_£t_Â
(
bio_îr
, 
°dîr
, 
BIO_NOCLOSE
|
BIO_FP_TEXT
);

157 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

158 
íd
;

160 !
bad¨g
 && *
¨gs
 && *args[0] == '-')

162 i‡(!
	`°rcmp
 (*
¨gs
, "-encrypt"))

163 
›î©i⁄
 = 
SMIME_ENCRYPT
;

164 i‡(!
	`°rcmp
 (*
¨gs
, "-decrypt"))

165 
›î©i⁄
 = 
SMIME_DECRYPT
;

166 i‡(!
	`°rcmp
 (*
¨gs
, "-sign"))

167 
›î©i⁄
 = 
SMIME_SIGN
;

168 i‡(!
	`°rcmp
 (*
¨gs
, "-sign_receipt"))

169 
›î©i⁄
 = 
SMIME_SIGN_RECEIPT
;

170 i‡(!
	`°rcmp
 (*
¨gs
, "-resign"))

171 
›î©i⁄
 = 
SMIME_RESIGN
;

172 i‡(!
	`°rcmp
 (*
¨gs
, "-verify"))

173 
›î©i⁄
 = 
SMIME_VERIFY
;

174 i‡(!
	`°rcmp
 (*
¨gs
, "-verify_retcode"))

175 
vîify_ªtcode
 = 1;

176 i‡(!
	`°rcmp
(*
¨gs
,"-verify_receipt"))

178 
›î©i⁄
 = 
SMIME_VERIFY_RECEIPT
;

179 i‡(!
¨gs
[1])

180 
¨gîr
;

181 
¨gs
++;

182 
r˘fûe
 = *
¨gs
;

184 i‡(!
	`°rcmp
 (*
¨gs
, "-cmsout"))

185 
›î©i⁄
 = 
SMIME_CMSOUT
;

186 i‡(!
	`°rcmp
 (*
¨gs
, "-data_out"))

187 
›î©i⁄
 = 
SMIME_DATAOUT
;

188 i‡(!
	`°rcmp
 (*
¨gs
, "-data_create"))

189 
›î©i⁄
 = 
SMIME_DATA_CREATE
;

190 i‡(!
	`°rcmp
 (*
¨gs
, "-digest_verify"))

191 
›î©i⁄
 = 
SMIME_DIGEST_VERIFY
;

192 i‡(!
	`°rcmp
 (*
¨gs
, "-digest_create"))

193 
›î©i⁄
 = 
SMIME_DIGEST_CREATE
;

194 i‡(!
	`°rcmp
 (*
¨gs
, "-compress"))

195 
›î©i⁄
 = 
SMIME_COMPRESS
;

196 i‡(!
	`°rcmp
 (*
¨gs
, "-uncompress"))

197 
›î©i⁄
 = 
SMIME_UNCOMPRESS
;

198 i‡(!
	`°rcmp
 (*
¨gs
, "-EncryptedData_decrypt"))

199 
›î©i⁄
 = 
SMIME_ENCRYPTED_DECRYPT
;

200 i‡(!
	`°rcmp
 (*
¨gs
, "-EncryptedData_encrypt"))

201 
›î©i⁄
 = 
SMIME_ENCRYPTED_ENCRYPT
;

202 #i‚de‡
OPENSSL_NO_DES


203 i‡(!
	`°rcmp
 (*
¨gs
, "-des3"))

204 
cùhî
 = 
	`EVP_des_ede3_cbc
();

205 i‡(!
	`°rcmp
 (*
¨gs
, "-des"))

206 
cùhî
 = 
	`EVP_des_cbc
();

208 #i‚de‡
OPENSSL_NO_SEED


209 i‡(!
	`°rcmp
 (*
¨gs
, "-seed"))

210 
cùhî
 = 
	`EVP_£ed_cbc
();

212 #i‚de‡
OPENSSL_NO_RC2


213 i‡(!
	`°rcmp
 (*
¨gs
, "-rc2-40"))

214 
cùhî
 = 
	`EVP_rc2_40_cbc
();

215 i‡(!
	`°rcmp
 (*
¨gs
, "-rc2-128"))

216 
cùhî
 = 
	`EVP_rc2_cbc
();

217 i‡(!
	`°rcmp
 (*
¨gs
, "-rc2-64"))

218 
cùhî
 = 
	`EVP_rc2_64_cbc
();

220 #i‚de‡
OPENSSL_NO_AES


221 i‡(!
	`°rcmp
(*
¨gs
,"-aes128"))

222 
cùhî
 = 
	`EVP_´s_128_cbc
();

223 i‡(!
	`°rcmp
(*
¨gs
,"-aes192"))

224 
cùhî
 = 
	`EVP_´s_192_cbc
();

225 i‡(!
	`°rcmp
(*
¨gs
,"-aes256"))

226 
cùhî
 = 
	`EVP_´s_256_cbc
();

228 #i‚de‡
OPENSSL_NO_CAMELLIA


229 i‡(!
	`°rcmp
(*
¨gs
,"-camellia128"))

230 
cùhî
 = 
	`EVP_ˇmñlü_128_cbc
();

231 i‡(!
	`°rcmp
(*
¨gs
,"-camellia192"))

232 
cùhî
 = 
	`EVP_ˇmñlü_192_cbc
();

233 i‡(!
	`°rcmp
(*
¨gs
,"-camellia256"))

234 
cùhî
 = 
	`EVP_ˇmñlü_256_cbc
();

236 i‡(!
	`°rcmp
 (*
¨gs
, "-debug_decrypt"))

237 
Êags
 |
CMS_DEBUG_DECRYPT
;

238 i‡(!
	`°rcmp
 (*
¨gs
, "-text"))

239 
Êags
 |
CMS_TEXT
;

240 i‡(!
	`°rcmp
 (*
¨gs
, "-nointern"))

241 
Êags
 |
CMS_NOINTERN
;

242 i‡(!
	`°rcmp
 (*
¨gs
, "-noverify")

243 || !
	`°rcmp
 (*
¨gs
, "-no_signer_cert_verify"))

244 
Êags
 |
CMS_NO_SIGNER_CERT_VERIFY
;

245 i‡(!
	`°rcmp
 (*
¨gs
, "-nocerts"))

246 
Êags
 |
CMS_NOCERTS
;

247 i‡(!
	`°rcmp
 (*
¨gs
, "-noattr"))

248 
Êags
 |
CMS_NOATTR
;

249 i‡(!
	`°rcmp
 (*
¨gs
, "-nodetach"))

250 
Êags
 &~
CMS_DETACHED
;

251 i‡(!
	`°rcmp
 (*
¨gs
, "-nosmimecap"))

252 
Êags
 |
CMS_NOSMIMECAP
;

253 i‡(!
	`°rcmp
 (*
¨gs
, "-binary"))

254 
Êags
 |
CMS_BINARY
;

255 i‡(!
	`°rcmp
 (*
¨gs
, "-keyid"))

256 
Êags
 |
CMS_USE_KEYID
;

257 i‡(!
	`°rcmp
 (*
¨gs
, "-nosigs"))

258 
Êags
 |
CMS_NOSIGS
;

259 i‡(!
	`°rcmp
 (*
¨gs
, "-no_content_verify"))

260 
Êags
 |
CMS_NO_CONTENT_VERIFY
;

261 i‡(!
	`°rcmp
 (*
¨gs
, "-no_attr_verify"))

262 
Êags
 |
CMS_NO_ATTR_VERIFY
;

263 i‡(!
	`°rcmp
 (*
¨gs
, "-stream"))

264 
Êags
 |
CMS_STREAM
;

265 i‡(!
	`°rcmp
 (*
¨gs
, "-indef"))

266 
Êags
 |
CMS_STREAM
;

267 i‡(!
	`°rcmp
 (*
¨gs
, "-noindef"))

268 
Êags
 &~
CMS_STREAM
;

269 i‡(!
	`°rcmp
 (*
¨gs
, "-nooldmime"))

270 
Êags
 |
CMS_NOOLDMIMETYPE
;

271 i‡(!
	`°rcmp
 (*
¨gs
, "-crlfeol"))

272 
Êags
 |
CMS_CRLFEOL
;

273 i‡(!
	`°rcmp
 (*
¨gs
, "-noout"))

274 
noout
 = 1;

275 i‡(!
	`°rcmp
 (*
¨gs
, "-receipt_request_print"))

276 
º_¥öt
 = 1;

277 i‡(!
	`°rcmp
 (*
¨gs
, "-receipt_request_all"))

278 
º_Æl‹fú°
 = 0;

279 i‡(!
	`°rcmp
 (*
¨gs
, "-receipt_request_first"))

280 
º_Æl‹fú°
 = 1;

281 i‡(!
	`°rcmp
(*
¨gs
,"-receipt_request_from"))

283 i‡(!
¨gs
[1])

284 
¨gîr
;

285 
¨gs
++;

286 i‡(!
º_‰om
)

287 
º_‰om
 = 
	`sk_OPENSSL_STRING_√w_nuŒ
();

288 
	`sk_OPENSSL_STRING_push
(
º_‰om
, *
¨gs
);

290 i‡(!
	`°rcmp
(*
¨gs
,"-receipt_request_to"))

292 i‡(!
¨gs
[1])

293 
¨gîr
;

294 
¨gs
++;

295 i‡(!
º_to
)

296 
º_to
 = 
	`sk_OPENSSL_STRING_√w_nuŒ
();

297 
	`sk_OPENSSL_STRING_push
(
º_to
, *
¨gs
);

299 i‡(!
	`°rcmp
 (*
¨gs
, "-print"))

301 
noout
 = 1;

302 
¥öt
 = 1;

304 i‡(!
	`°rcmp
(*
¨gs
,"-secretkey"))

306 
…mp
;

307 i‡(!
¨gs
[1])

308 
¨gîr
;

309 
¨gs
++;

310 
£¸ë_key
 = 
	`°rög_to_hex
(*
¨gs
, &
…mp
);

311 i‡(!
£¸ë_key
)

313 
	`BIO_¥ötf
(
bio_îr
, "InvÆid key %s\n", *
¨gs
);

314 
¨gîr
;

316 
£¸ë_keyÀn
 = (
size_t
)
…mp
;

318 i‡(!
	`°rcmp
(*
¨gs
,"-secretkeyid"))

320 
…mp
;

321 i‡(!
¨gs
[1])

322 
¨gîr
;

323 
¨gs
++;

324 
£¸ë_keyid
 = 
	`°rög_to_hex
(*
¨gs
, &
…mp
);

325 i‡(!
£¸ë_keyid
)

327 
	`BIO_¥ötf
(
bio_îr
, "InvÆid id %s\n", *
¨gs
);

328 
¨gîr
;

330 
£¸ë_keyidÀn
 = (
size_t
)
…mp
;

332 i‡(!
	`°rcmp
(*
¨gs
,"-pwri_password"))

334 i‡(!
¨gs
[1])

335 
¨gîr
;

336 
¨gs
++;

337 
pwri_∑ss
 = (*)*
¨gs
;

339 i‡(!
	`°rcmp
(*
¨gs
,"-econtent_type"))

341 i‡(!
¨gs
[1])

342 
¨gîr
;

343 
¨gs
++;

344 
ec⁄ã¡_ty≥
 = 
	`OBJ_txt2obj
(*
¨gs
, 0);

345 i‡(!
ec⁄ã¡_ty≥
)

347 
	`BIO_¥ötf
(
bio_îr
, "InvÆid OID %s\n", *
¨gs
);

348 
¨gîr
;

351 i‡(!
	`°rcmp
(*
¨gs
,"-rand"))

353 i‡(!
¨gs
[1])

354 
¨gîr
;

355 
¨gs
++;

356 
öønd
 = *
¨gs
;

357 
√ed_ønd
 = 1;

359 #i‚de‡
OPENSSL_NO_ENGINE


360 i‡(!
	`°rcmp
(*
¨gs
,"-engine"))

362 i‡(!
¨gs
[1])

363 
¨gîr
;

364 
ígöe
 = *++
¨gs
;

367 i‡(!
	`°rcmp
(*
¨gs
,"-passin"))

369 i‡(!
¨gs
[1])

370 
¨gîr
;

371 
∑sßrgö
 = *++
¨gs
;

373 i‡(!
	`°rcmp
 (*
¨gs
, "-to"))

375 i‡(!
¨gs
[1])

376 
¨gîr
;

377 
to
 = *++
¨gs
;

379 i‡(!
	`°rcmp
 (*
¨gs
, "-from"))

381 i‡(!
¨gs
[1])

382 
¨gîr
;

383 
‰om
 = *++
¨gs
;

385 i‡(!
	`°rcmp
 (*
¨gs
, "-subject"))

387 i‡(!
¨gs
[1])

388 
¨gîr
;

389 
subje˘
 = *++
¨gs
;

391 i‡(!
	`°rcmp
 (*
¨gs
, "-signer"))

393 i‡(!
¨gs
[1])

394 
¨gîr
;

397 i‡(
sig√rfûe
)

399 i‡(!
sksig√rs
)

400 
sksig√rs
 = 
	`sk_OPENSSL_STRING_√w_nuŒ
();

401 
	`sk_OPENSSL_STRING_push
(
sksig√rs
, 
sig√rfûe
);

402 i‡(!
keyfûe
)

403 
keyfûe
 = 
sig√rfûe
;

404 i‡(!
skkeys
)

405 
skkeys
 = 
	`sk_OPENSSL_STRING_√w_nuŒ
();

406 
	`sk_OPENSSL_STRING_push
(
skkeys
, 
keyfûe
);

407 
keyfûe
 = 
NULL
;

409 
sig√rfûe
 = *++
¨gs
;

411 i‡(!
	`°rcmp
 (*
¨gs
, "-recip"))

413 i‡(!
¨gs
[1])

414 
¨gîr
;

415 
ªcùfûe
 = *++
¨gs
;

417 i‡(!
	`°rcmp
 (*
¨gs
, "-certsout"))

419 i‡(!
¨gs
[1])

420 
¨gîr
;

421 
˚πsoutfûe
 = *++
¨gs
;

423 i‡(!
	`°rcmp
 (*
¨gs
, "-md"))

425 i‡(!
¨gs
[1])

426 
¨gîr
;

427 
sign_md
 = 
	`EVP_gë_dige°by«me
(*++
¨gs
);

428 i‡(
sign_md
 =
NULL
)

430 
	`BIO_¥ötf
(
bio_îr
, "Unknown digest %s\n",

431 *
¨gs
);

432 
¨gîr
;

435 i‡(!
	`°rcmp
 (*
¨gs
, "-inkey"))

437 i‡(!
¨gs
[1])

438 
¨gîr
;

440 i‡(
keyfûe
)

442 i‡(!
sig√rfûe
)

444 
	`BIO_puts
(
bio_îr
, "Illegal -inkey without -signer\n");

445 
¨gîr
;

447 i‡(!
sksig√rs
)

448 
sksig√rs
 = 
	`sk_OPENSSL_STRING_√w_nuŒ
();

449 
	`sk_OPENSSL_STRING_push
(
sksig√rs
, 
sig√rfûe
);

450 
sig√rfûe
 = 
NULL
;

451 i‡(!
skkeys
)

452 
skkeys
 = 
	`sk_OPENSSL_STRING_√w_nuŒ
();

453 
	`sk_OPENSSL_STRING_push
(
skkeys
, 
keyfûe
);

455 
keyfûe
 = *++
¨gs
;

457 i‡(!
	`°rcmp
 (*
¨gs
, "-keyform"))

459 i‡(!
¨gs
[1])

460 
¨gîr
;

461 
keyf‹m
 = 
	`°r2fmt
(*++
¨gs
);

463 i‡(!
	`°rcmp
 (*
¨gs
, "-rctform"))

465 i‡(!
¨gs
[1])

466 
¨gîr
;

467 
r˘f‹m©
 = 
	`°r2fmt
(*++
¨gs
);

469 i‡(!
	`°rcmp
 (*
¨gs
, "-certfile"))

471 i‡(!
¨gs
[1])

472 
¨gîr
;

473 
˚πfûe
 = *++
¨gs
;

475 i‡(!
	`°rcmp
 (*
¨gs
, "-CAfile"))

477 i‡(!
¨gs
[1])

478 
¨gîr
;

479 
CAfûe
 = *++
¨gs
;

481 i‡(!
	`°rcmp
 (*
¨gs
, "-CApath"))

483 i‡(!
¨gs
[1])

484 
¨gîr
;

485 
CA∑th
 = *++
¨gs
;

487 i‡(!
	`°rcmp
 (*
¨gs
, "-in"))

489 i‡(!
¨gs
[1])

490 
¨gîr
;

491 
öfûe
 = *++
¨gs
;

493 i‡(!
	`°rcmp
 (*
¨gs
, "-inform"))

495 i‡(!
¨gs
[1])

496 
¨gîr
;

497 
öf‹m©
 = 
	`°r2fmt
(*++
¨gs
);

499 i‡(!
	`°rcmp
 (*
¨gs
, "-outform"))

501 i‡(!
¨gs
[1])

502 
¨gîr
;

503 
outf‹m©
 = 
	`°r2fmt
(*++
¨gs
);

505 i‡(!
	`°rcmp
 (*
¨gs
, "-out"))

507 i‡(!
¨gs
[1])

508 
¨gîr
;

509 
outfûe
 = *++
¨gs
;

511 i‡(!
	`°rcmp
 (*
¨gs
, "-content"))

513 i‡(!
¨gs
[1])

514 
¨gîr
;

515 
c⁄tfûe
 = *++
¨gs
;

517 i‡(
	`¨gs_vîify
(&
¨gs
, 
NULL
, &
bad¨g
, 
bio_îr
, &
vpm
))

519 i‡((
cùhî
 = 
	`EVP_gë_cùhîby«me
(*
¨gs
 + 1)Ë=
NULL
)

520 
bad¨g
 = 1;

521 
¨gs
++;

524 i‡(((
º_Æl‹fú°
 !-1Ë|| 
º_‰om
Ë&& !
º_to
)

526 
	`BIO_puts
(
bio_îr
, "No Signed Receipts Recipients\n");

527 
¨gîr
;

530 i‡(!(
›î©i⁄
 & 
SMIME_SIGNERS
Ë&& (
º_to
 || 
º_‰om
))

532 
	`BIO_puts
(
bio_îr
, "SignedÑeceipts onlyállowed with -sign\n");

533 
¨gîr
;

535 i‡(!(
›î©i⁄
 & 
SMIME_SIGNERS
Ë&& (
skkeys
 || 
sksig√rs
))

537 
	`BIO_puts
(
bio_îr
, "Multiple signers or keysÇotállowed\n");

538 
¨gîr
;

541 i‡(
›î©i⁄
 & 
SMIME_SIGNERS
)

543 i‡(
keyfûe
 && !
sig√rfûe
)

545 
	`BIO_puts
(
bio_îr
, "Illegal -inkey without -signer\n");

546 
¨gîr
;

549 i‡(
sig√rfûe
)

551 i‡(!
sksig√rs
)

552 
sksig√rs
 = 
	`sk_OPENSSL_STRING_√w_nuŒ
();

553 
	`sk_OPENSSL_STRING_push
(
sksig√rs
, 
sig√rfûe
);

554 i‡(!
skkeys
)

555 
skkeys
 = 
	`sk_OPENSSL_STRING_√w_nuŒ
();

556 i‡(!
keyfûe
)

557 
keyfûe
 = 
sig√rfûe
;

558 
	`sk_OPENSSL_STRING_push
(
skkeys
, 
keyfûe
);

560 i‡(!
sksig√rs
)

562 
	`BIO_¥ötf
(
bio_îr
, "No signer certificate specified\n");

563 
bad¨g
 = 1;

565 
sig√rfûe
 = 
NULL
;

566 
keyfûe
 = 
NULL
;

567 
√ed_ønd
 = 1;

570 i‡(
›î©i⁄
 =
SMIME_DECRYPT
)

572 i‡(!
ªcùfûe
 && !
keyfûe
 && !
£¸ë_key
 && !
pwri_∑ss
)

574 
	`BIO_¥ötf
(
bio_îr
, "NoÑecipient certificate or key specified\n");

575 
bad¨g
 = 1;

578 i‡(
›î©i⁄
 =
SMIME_ENCRYPT
)

580 i‡(!*
¨gs
 && !
£¸ë_key
 && !
pwri_∑ss
)

582 
	`BIO_¥ötf
(
bio_îr
, "NoÑecipient(s) certificate(s) specified\n");

583 
bad¨g
 = 1;

585 
√ed_ønd
 = 1;

587 i‡(!
›î©i⁄
)

588 
bad¨g
 = 1;

590 i‡(
bad¨g
)

592 
¨gîr
:

593 
	`BIO_¥ötf
 (
bio_îr
, "Usage cms [options] cert.pem ...\n");

594 
	`BIO_¥ötf
 (
bio_îr
, "where optionsáre\n");

595 
	`BIO_¥ötf
 (
bio_îr
, "-encryptÉncrypt message\n");

596 
	`BIO_¥ötf
 (
bio_îr
, "-decrypt decryptÉncrypted message\n");

597 
	`BIO_¥ötf
 (
bio_îr
, "-sign sign message\n");

598 
	`BIO_¥ötf
 (
bio_îr
, "-verify verify signed message\n");

599 
	`BIO_¥ötf
 (
bio_îr
, "-cmsout output CMS structure\n");

600 #i‚de‡
OPENSSL_NO_DES


601 
	`BIO_¥ötf
 (
bio_îr
, "-des3Éncrypt withÅriple DES\n");

602 
	`BIO_¥ötf
 (
bio_îr
, "-desÉncrypt with DES\n");

604 #i‚de‡
OPENSSL_NO_SEED


605 
	`BIO_¥ötf
 (
bio_îr
, "-seedÉncrypt with SEED\n");

607 #i‚de‡
OPENSSL_NO_RC2


608 
	`BIO_¥ötf
 (
bio_îr
, "-rc2-40Éncrypt with RC2-40 (default)\n");

609 
	`BIO_¥ötf
 (
bio_îr
, "-rc2-64Éncrypt with RC2-64\n");

610 
	`BIO_¥ötf
 (
bio_îr
, "-rc2-128Éncrypt with RC2-128\n");

612 #i‚de‡
OPENSSL_NO_AES


613 
	`BIO_¥ötf
 (
bio_îr
, "-aes128, -aes192, -aes256\n");

614 
	`BIO_¥ötf
 (
bio_îr
, "Éncrypt PEM output with cbcáes\n");

616 #i‚de‡
OPENSSL_NO_CAMELLIA


617 
	`BIO_¥ötf
 (
bio_îr
, "-camellia128, -camellia192, -camellia256\n");

618 
	`BIO_¥ötf
 (
bio_îr
, "Éncrypt PEM output with cbc camellia\n");

620 
	`BIO_¥ötf
 (
bio_îr
, "-nointern don't search certificates in message for signer\n");

621 
	`BIO_¥ötf
 (
bio_îr
, "-nosigs don't verify message signature\n");

622 
	`BIO_¥ötf
 (
bio_îr
, "-noverify don't verify signers certificate\n");

623 
	`BIO_¥ötf
 (
bio_îr
, "-nocerts don't include signers certificate when signing\n");

624 
	`BIO_¥ötf
 (
bio_îr
, "-nodetach use opaque signing\n");

625 
	`BIO_¥ötf
 (
bio_îr
, "-noattr don't includeány signedáttributes\n");

626 
	`BIO_¥ötf
 (
bio_îr
, "-binary don'tÅranslate messageÅoÅext\n");

627 
	`BIO_¥ötf
 (
bio_îr
, "-certfile file other certificates file\n");

628 
	`BIO_¥ötf
 (
bio_îr
, "-certsout file certificate output file\n");

629 
	`BIO_¥ötf
 (
bio_îr
, "-signer file signer certificate file\n");

630 
	`BIO_¥ötf
 (
bio_îr
, "-recip fileÑecipient certificate file for decryption\n");

631 
	`BIO_¥ötf
 (
bio_îr
, "-keyid use subject key identifier\n");

632 
	`BIO_¥ötf
 (
bio_îr
, "-in file input file\n");

633 
	`BIO_¥ötf
 (
bio_îr
, "-informárg input format SMIME (default), PEM or DER\n");

634 
	`BIO_¥ötf
 (
bio_îr
, "-inkey file inputÖrivate key (ifÇot signer orÑecipient)\n");

635 
	`BIO_¥ötf
 (
bio_îr
, "-keyformárg inputÖrivate key format (PEM or ENGINE)\n");

636 
	`BIO_¥ötf
 (
bio_îr
, "-out file output file\n");

637 
	`BIO_¥ötf
 (
bio_îr
, "-outformárg output format SMIME (default), PEM or DER\n");

638 
	`BIO_¥ötf
 (
bio_îr
, "-content file supply or override content for detached signature\n");

639 
	`BIO_¥ötf
 (
bio_îr
, "-toáddrÅoáddress\n");

640 
	`BIO_¥ötf
 (
bio_îr
, "-fromád fromáddress\n");

641 
	`BIO_¥ötf
 (
bio_îr
, "-subject s subject\n");

642 
	`BIO_¥ötf
 (
bio_îr
, "-text include or deleteÅext MIME headers\n");

643 
	`BIO_¥ötf
 (
bio_îr
, "-CApath dirÅrusted certificates directory\n");

644 
	`BIO_¥ötf
 (
bio_îr
, "-CAfile fileÅrusted certificates file\n");

645 
	`BIO_¥ötf
 (
bio_îr
, "-crl_check checkÑevocation status of signer's certificate using CRLs\n");

646 
	`BIO_¥ötf
 (
bio_îr
, "-crl_check_all checkÑevocation status of signer's certificate chain using CRLs\n");

647 #i‚de‡
OPENSSL_NO_ENGINE


648 
	`BIO_¥ötf
 (
bio_îr
, "-engineÉ useÉngineÉ,Öossiblyá hardware device.\n");

650 
	`BIO_¥ötf
 (
bio_îr
, "-passinárg input fileÖassÖhrase source\n");

651 
	`BIO_¥ötf
(
bio_îr
, "-ønd fûe%cfûe%c...\n", 
LIST_SEPARATOR_CHAR
, LIST_SEPARATOR_CHAR);

652 
	`BIO_¥ötf
(
bio_îr
, "ÜoadÅhe file (orÅhe files inÅhe directory) into\n");

653 
	`BIO_¥ötf
(
bio_îr
, "ÅheÑandomÇumber generator\n");

654 
	`BIO_¥ötf
 (
bio_îr
, "cert.pemÑecipient certificate(s) forÉncryption\n");

655 
íd
;

658 #i‚de‡
OPENSSL_NO_ENGINE


659 
e
 = 
	`£tup_ígöe
(
bio_îr
, 
ígöe
, 0);

662 i‡(!
	`≠p_∑sswd
(
bio_îr
, 
∑sßrgö
, 
NULL
, &
∑ssö
, NULL))

664 
	`BIO_¥ötf
(
bio_îr
, "Error gettingÖassword\n");

665 
íd
;

668 i‡(
√ed_ønd
)

670 
	`≠p_RAND_lﬂd_fûe
(
NULL
, 
bio_îr
, (
öønd
 != NULL));

671 i‡(
öønd
 !
NULL
)

672 
	`BIO_¥ötf
(
bio_îr
,"%ld semi-random bytesÜoaded\n",

673 
	`≠p_RAND_lﬂd_fûes
(
öønd
));

676 
ªt
 = 2;

678 i‡(!(
›î©i⁄
 & 
SMIME_SIGNERS
))

679 
Êags
 &~
CMS_DETACHED
;

681 i‡(
›î©i⁄
 & 
SMIME_OP
)

683 i‡(
outf‹m©
 =
FORMAT_ASN1
)

684 
outmode
 = "wb";

688 i‡(
Êags
 & 
CMS_BINARY
)

689 
outmode
 = "wb";

692 i‡(
›î©i⁄
 & 
SMIME_IP
)

694 i‡(
öf‹m©
 =
FORMAT_ASN1
)

695 
ömode
 = "rb";

699 i‡(
Êags
 & 
CMS_BINARY
)

700 
ömode
 = "rb";

703 i‡(
›î©i⁄
 =
SMIME_ENCRYPT
)

705 i‡(!
cùhî
)

707 #i‚de‡
OPENSSL_NO_DES


708 
cùhî
 = 
	`EVP_des_ede3_cbc
();

710 
	`BIO_¥ötf
(
bio_îr
, "No cipher selected\n");

711 
íd
;

715 i‡(
£¸ë_key
 && !
£¸ë_keyid
)

717 
	`BIO_¥ötf
(
bio_îr
, "No secret key id\n");

718 
íd
;

721 i‡(*
¨gs
)

722 
í˚πs
 = 
	`sk_X509_√w_nuŒ
();

723 *
¨gs
)

725 i‡(!(
˚π
 = 
	`lﬂd_˚π
(
bio_îr
,*
¨gs
,
FORMAT_PEM
,

726 
NULL
, 
e
, "recipient certificate file")))

727 
íd
;

728 
	`sk_X509_push
(
í˚πs
, 
˚π
);

729 
˚π
 = 
NULL
;

730 
¨gs
++;

734 i‡(
˚πfûe
)

736 i‡(!(
Ÿhî
 = 
	`lﬂd_˚πs
(
bio_îr
,
˚πfûe
,
FORMAT_PEM
, 
NULL
,

737 
e
, "certificate file")))

739 
	`ERR_¥öt_îr‹s
(
bio_îr
);

740 
íd
;

744 i‡(
ªcùfûe
 && (
›î©i⁄
 =
SMIME_DECRYPT
))

746 i‡(!(
ªcù
 = 
	`lﬂd_˚π
(
bio_îr
,
ªcùfûe
,
FORMAT_PEM
,
NULL
,

747 
e
, "recipient certificate file")))

749 
	`ERR_¥öt_îr‹s
(
bio_îr
);

750 
íd
;

754 i‡(
›î©i⁄
 =
SMIME_SIGN_RECEIPT
)

756 i‡(!(
sig√r
 = 
	`lﬂd_˚π
(
bio_îr
,
sig√rfûe
,
FORMAT_PEM
,
NULL
,

757 
e
, "receipt signer certificate file")))

759 
	`ERR_¥öt_îr‹s
(
bio_îr
);

760 
íd
;

764 i‡(
›î©i⁄
 =
SMIME_DECRYPT
)

766 i‡(!
keyfûe
)

767 
keyfûe
 = 
ªcùfûe
;

769 i‡((
›î©i⁄
 =
SMIME_SIGN
Ë|| (›î©i⁄ =
SMIME_SIGN_RECEIPT
))

771 i‡(!
keyfûe
)

772 
keyfûe
 = 
sig√rfûe
;

774 
keyfûe
 = 
NULL
;

776 i‡(
keyfûe
)

778 
key
 = 
	`lﬂd_key
(
bio_îr
, 
keyfûe
, 
keyf‹m
, 0, 
∑ssö
, 
e
,

780 i‡(!
key
)

781 
íd
;

784 i‡(
öfûe
)

786 i‡(!(
ö
 = 
	`BIO_√w_fûe
(
öfûe
, 
ömode
)))

788 
	`BIO_¥ötf
 (
bio_îr
,

789 "C™'à›í i≈uàfûê%s\n", 
öfûe
);

790 
íd
;

794 
ö
 = 
	`BIO_√w_Â
(
°dö
, 
BIO_NOCLOSE
);

796 i‡(
›î©i⁄
 & 
SMIME_IP
)

798 i‡(
öf‹m©
 =
FORMAT_SMIME
)

799 
cms
 = 
	`SMIME_ªad_CMS
(
ö
, &
öd©a
);

800 i‡(
öf‹m©
 =
FORMAT_PEM
)

801 
cms
 = 
	`PEM_ªad_bio_CMS
(
ö
, 
NULL
, NULL, NULL);

802 i‡(
öf‹m©
 =
FORMAT_ASN1
)

803 
cms
 = 
	`d2i_CMS_bio
(
ö
, 
NULL
);

806 
	`BIO_¥ötf
(
bio_îr
, "Bad input format for CMS file\n");

807 
íd
;

810 i‡(!
cms
)

812 
	`BIO_¥ötf
(
bio_îr
, "ErrorÑeading S/MIME message\n");

813 
íd
;

815 i‡(
c⁄tfûe
)

817 
	`BIO_‰ì
(
öd©a
);

818 i‡(!(
öd©a
 = 
	`BIO_√w_fûe
(
c⁄tfûe
, "rb")))

820 
	`BIO_¥ötf
(
bio_îr
, "C™'àªad c⁄ã¡ fûê%s\n", 
c⁄tfûe
);

821 
íd
;

824 i‡(
˚πsoutfûe
)

826 
	`STACK_OF
(
X509
Ë*
Æl˚πs
;

827 
Æl˚πs
 = 
	`CMS_gë1_˚πs
(
cms
);

828 i‡(!
	`ßve_˚πs
(
˚πsoutfûe
, 
Æl˚πs
))

830 
	`BIO_¥ötf
(
bio_îr
,

832 
˚πsoutfûe
);

833 
ªt
 = 5;

834 
íd
;

836 
	`sk_X509_p›_‰ì
(
Æl˚πs
, 
X509_‰ì
);

840 i‡(
r˘fûe
)

842 *
r˘mode
 = (
r˘f‹m©
 =
FORMAT_ASN1
) ? "rb" : "r";

843 i‡(!(
r˘ö
 = 
	`BIO_√w_fûe
(
r˘fûe
, 
r˘mode
)))

845 
	`BIO_¥ötf
 (
bio_îr
,

846 "C™'à›íÑe˚ùàfûê%s\n", 
r˘fûe
);

847 
íd
;

850 i‡(
r˘f‹m©
 =
FORMAT_SMIME
)

851 
rcms
 = 
	`SMIME_ªad_CMS
(
r˘ö
, 
NULL
);

852 i‡(
r˘f‹m©
 =
FORMAT_PEM
)

853 
rcms
 = 
	`PEM_ªad_bio_CMS
(
r˘ö
, 
NULL
, NULL, NULL);

854 i‡(
r˘f‹m©
 =
FORMAT_ASN1
)

855 
rcms
 = 
	`d2i_CMS_bio
(
r˘ö
, 
NULL
);

858 
	`BIO_¥ötf
(
bio_îr
, "Bad input format forÑeceipt\n");

859 
íd
;

862 i‡(!
rcms
)

864 
	`BIO_¥ötf
(
bio_îr
, "ErrorÑeadingÑeceipt\n");

865 
íd
;

869 i‡(
outfûe
)

871 i‡(!(
out
 = 
	`BIO_√w_fûe
(
outfûe
, 
outmode
)))

873 
	`BIO_¥ötf
 (
bio_îr
,

874 "C™'à›í ouçuàfûê%s\n", 
outfûe
);

875 
íd
;

880 
out
 = 
	`BIO_√w_Â
(
°dout
, 
BIO_NOCLOSE
);

881 #ifde‡
OPENSSL_SYS_VMS


883 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

884 
out
 = 
	`BIO_push
(
tmpbio
, out);

889 i‡((
›î©i⁄
 =
SMIME_VERIFY
Ë|| (›î©i⁄ =
SMIME_VERIFY_RECEIPT
))

891 i‡(!(
°‹e
 = 
	`£tup_vîify
(
bio_îr
, 
CAfûe
, 
CA∑th
)))

892 
íd
;

893 
	`X509_STORE_£t_vîify_cb
(
°‹e
, 
cms_cb
);

894 i‡(
vpm
)

895 
	`X509_STORE_£t1_∑øm
(
°‹e
, 
vpm
);

899 
ªt
 = 3;

901 i‡(
›î©i⁄
 =
SMIME_DATA_CREATE
)

903 
cms
 = 
	`CMS_d©a_¸óã
(
ö
, 
Êags
);

905 i‡(
›î©i⁄
 =
SMIME_DIGEST_CREATE
)

907 
cms
 = 
	`CMS_dige°_¸óã
(
ö
, 
sign_md
, 
Êags
);

909 i‡(
›î©i⁄
 =
SMIME_COMPRESS
)

911 
cms
 = 
	`CMS_com¥ess
(
ö
, -1, 
Êags
);

913 i‡(
›î©i⁄
 =
SMIME_ENCRYPT
)

915 
Êags
 |
CMS_PARTIAL
;

916 
cms
 = 
	`CMS_í¸y±
(
í˚πs
, 
ö
, 
cùhî
, 
Êags
);

917 i‡(!
cms
)

918 
íd
;

919 i‡(
£¸ë_key
)

921 i‡(!
	`CMS_add0_ªcùõ¡_key
(
cms
, 
NID_undef
,

922 
£¸ë_key
, 
£¸ë_keyÀn
,

923 
£¸ë_keyid
, 
£¸ë_keyidÀn
,

924 
NULL
, NULL, NULL))

925 
íd
;

927 
£¸ë_key
 = 
NULL
;

928 
£¸ë_keyid
 = 
NULL
;

930 i‡(
pwri_∑ss
)

932 
pwri_tmp
 = (*)
	`BUF_°rdup
((*)
pwri_∑ss
);

933 i‡(!
pwri_tmp
)

934 
íd
;

935 i‡(!
	`CMS_add0_ªcùõ¡_∑ssw‹d
(
cms
,

936 -1, 
NID_undef
, NID_undef,

937 
pwri_tmp
, -1, 
NULL
))

938 
íd
;

939 
pwri_tmp
 = 
NULL
;

941 i‡(!(
Êags
 & 
CMS_STREAM
))

943 i‡(!
	`CMS_föÆ
(
cms
, 
ö
, 
NULL
, 
Êags
))

944 
íd
;

947 i‡(
›î©i⁄
 =
SMIME_ENCRYPTED_ENCRYPT
)

949 
cms
 = 
	`CMS_En¸y±edD©a_í¸y±
(
ö
, 
cùhî
,

950 
£¸ë_key
, 
£¸ë_keyÀn
,

951 
Êags
);

954 i‡(
›î©i⁄
 =
SMIME_SIGN_RECEIPT
)

956 
CMS_C⁄ã¡Info
 *
§cms
 = 
NULL
;

957 
	`STACK_OF
(
CMS_Sig√rInfo
Ë*
sis
;

958 
CMS_Sig√rInfo
 *
si
;

959 
sis
 = 
	`CMS_gë0_Sig√rInfos
(
cms
);

960 i‡(!
sis
)

961 
íd
;

962 
si
 = 
	`sk_CMS_Sig√rInfo_vÆue
(
sis
, 0);

963 
§cms
 = 
	`CMS_sign_ª˚ùt
(
si
, 
sig√r
, 
key
, 
Ÿhî
, 
Êags
);

964 i‡(!
§cms
)

965 
íd
;

966 
	`CMS_C⁄ã¡Info_‰ì
(
cms
);

967 
cms
 = 
§cms
;

969 i‡(
›î©i⁄
 & 
SMIME_SIGNERS
)

971 
i
;

975 i‡(
›î©i⁄
 =
SMIME_SIGN
)

978 i‡(
Êags
 & 
CMS_DETACHED
)

980 i‡(
outf‹m©
 =
FORMAT_SMIME
)

981 
Êags
 |
CMS_STREAM
;

983 
Êags
 |
CMS_PARTIAL
;

984 
cms
 = 
	`CMS_sign
(
NULL
, NULL, 
Ÿhî
, 
ö
, 
Êags
);

985 i‡(!
cms
)

986 
íd
;

987 i‡(
ec⁄ã¡_ty≥
)

988 
	`CMS_£t1_eC⁄ã¡Ty≥
(
cms
, 
ec⁄ã¡_ty≥
);

990 i‡(
º_to
)

992 
º
 = 
	`make_ª˚ùt_ªque°
(
º_to
, 
º_Æl‹fú°
,

993 
º_‰om
);

994 i‡(!
º
)

996 
	`BIO_puts
(
bio_îr
,

998 
íd
;

1003 
Êags
 |
CMS_REUSE_DIGEST
;

1004 
i
 = 0; i < 
	`sk_OPENSSL_STRING_num
(
sksig√rs
); i++)

1006 
CMS_Sig√rInfo
 *
si
;

1007 
sig√rfûe
 = 
	`sk_OPENSSL_STRING_vÆue
(
sksig√rs
, 
i
);

1008 
keyfûe
 = 
	`sk_OPENSSL_STRING_vÆue
(
skkeys
, 
i
);

1009 
sig√r
 = 
	`lﬂd_˚π
(
bio_îr
, 
sig√rfûe
,
FORMAT_PEM
, 
NULL
,

1010 
e
, "signer certificate");

1011 i‡(!
sig√r
)

1012 
íd
;

1013 
key
 = 
	`lﬂd_key
(
bio_îr
, 
keyfûe
, 
keyf‹m
, 0, 
∑ssö
, 
e
,

1015 i‡(!
key
)

1016 
íd
;

1017 
si
 = 
	`CMS_add1_sig√r
(
cms
, 
sig√r
, 
key
, 
sign_md
, 
Êags
);

1018 i‡(!
si
)

1019 
íd
;

1020 i‡(
º
 && !
	`CMS_add1_Re˚ùtReque°
(
si
,Ñr))

1021 
íd
;

1022 
	`X509_‰ì
(
sig√r
);

1023 
sig√r
 = 
NULL
;

1024 
	`EVP_PKEY_‰ì
(
key
);

1025 
key
 = 
NULL
;

1028 i‡((
›î©i⁄
 =
SMIME_SIGN
Ë&& !(
Êags
 & 
CMS_STREAM
))

1030 i‡(!
	`CMS_föÆ
(
cms
, 
ö
, 
NULL
, 
Êags
))

1031 
íd
;

1035 i‡(!
cms
)

1037 
	`BIO_¥ötf
(
bio_îr
, "Error creating CMS structure\n");

1038 
íd
;

1041 
ªt
 = 4;

1042 i‡(
›î©i⁄
 =
SMIME_DECRYPT
)

1044 i‡(
Êags
 & 
CMS_DEBUG_DECRYPT
)

1045 
	`CMS_de¸y±
(
cms
, 
NULL
, NULL, NULL, NULL, 
Êags
);

1047 i‡(
£¸ë_key
)

1049 i‡(!
	`CMS_de¸y±_£t1_key
(
cms
,

1050 
£¸ë_key
, 
£¸ë_keyÀn
,

1051 
£¸ë_keyid
, 
£¸ë_keyidÀn
))

1053 
	`BIO_puts
(
bio_îr
,

1055 
íd
;

1059 i‡(
key
)

1061 i‡(!
	`CMS_de¸y±_£t1_pkey
(
cms
, 
key
, 
ªcù
))

1063 
	`BIO_puts
(
bio_îr
,

1065 
íd
;

1069 i‡(
pwri_∑ss
)

1071 i‡(!
	`CMS_de¸y±_£t1_∑ssw‹d
(
cms
, 
pwri_∑ss
, -1))

1073 
	`BIO_puts
(
bio_îr
,

1075 
íd
;

1079 i‡(!
	`CMS_de¸y±
(
cms
, 
NULL
, NULL, 
öd©a
, 
out
, 
Êags
))

1081 
	`BIO_¥ötf
(
bio_îr
, "Error decrypting CMS structure\n");

1082 
íd
;

1085 i‡(
›î©i⁄
 =
SMIME_DATAOUT
)

1087 i‡(!
	`CMS_d©a
(
cms
, 
out
, 
Êags
))

1088 
íd
;

1090 i‡(
›î©i⁄
 =
SMIME_UNCOMPRESS
)

1092 i‡(!
	`CMS_uncom¥ess
(
cms
, 
öd©a
, 
out
, 
Êags
))

1093 
íd
;

1095 i‡(
›î©i⁄
 =
SMIME_DIGEST_VERIFY
)

1097 i‡(
	`CMS_dige°_vîify
(
cms
, 
öd©a
, 
out
, 
Êags
) > 0)

1098 
	`BIO_¥ötf
(
bio_îr
, "Verification successful\n");

1101 
	`BIO_¥ötf
(
bio_îr
, "Verification failure\n");

1102 
íd
;

1105 i‡(
›î©i⁄
 =
SMIME_ENCRYPTED_DECRYPT
)

1107 i‡(!
	`CMS_En¸y±edD©a_de¸y±
(
cms
, 
£¸ë_key
, 
£¸ë_keyÀn
,

1108 
öd©a
, 
out
, 
Êags
))

1109 
íd
;

1111 i‡(
›î©i⁄
 =
SMIME_VERIFY
)

1113 i‡(
	`CMS_vîify
(
cms
, 
Ÿhî
, 
°‹e
, 
öd©a
, 
out
, 
Êags
) > 0)

1114 
	`BIO_¥ötf
(
bio_îr
, "Verification successful\n");

1117 
	`BIO_¥ötf
(
bio_îr
, "Verification failure\n");

1118 i‡(
vîify_ªtcode
)

1119 
ªt
 = 
vîify_îr
 + 32;

1120 
íd
;

1122 i‡(
sig√rfûe
)

1124 
	`STACK_OF
(
X509
Ë*
sig√rs
;

1125 
sig√rs
 = 
	`CMS_gë0_sig√rs
(
cms
);

1126 i‡(!
	`ßve_˚πs
(
sig√rfûe
, 
sig√rs
))

1128 
	`BIO_¥ötf
(
bio_îr
,

1130 
sig√rfûe
);

1131 
ªt
 = 5;

1132 
íd
;

1134 
	`sk_X509_‰ì
(
sig√rs
);

1136 i‡(
º_¥öt
)

1137 
	`ª˚ùt_ªque°_¥öt
(
bio_îr
, 
cms
);

1140 i‡(
›î©i⁄
 =
SMIME_VERIFY_RECEIPT
)

1142 i‡(
	`CMS_vîify_ª˚ùt
(
rcms
, 
cms
, 
Ÿhî
, 
°‹e
, 
Êags
) > 0)

1143 
	`BIO_¥ötf
(
bio_îr
, "Verification successful\n");

1146 
	`BIO_¥ötf
(
bio_îr
, "Verification failure\n");

1147 
íd
;

1152 i‡(
noout
)

1154 i‡(
¥öt
)

1155 
	`CMS_C⁄ã¡Info_¥öt_˘x
(
out
, 
cms
, 0, 
NULL
);

1157 i‡(
outf‹m©
 =
FORMAT_SMIME
)

1159 i‡(
to
)

1160 
	`BIO_¥ötf
(
out
, "To: %s\n", 
to
);

1161 i‡(
‰om
)

1162 
	`BIO_¥ötf
(
out
, "From: %s\n", 
‰om
);

1163 i‡(
subje˘
)

1164 
	`BIO_¥ötf
(
out
, "Subje˘: %s\n", 
subje˘
);

1165 i‡(
›î©i⁄
 =
SMIME_RESIGN
)

1166 
ªt
 = 
	`SMIME_wrôe_CMS
(
out
, 
cms
, 
öd©a
, 
Êags
);

1168 
ªt
 = 
	`SMIME_wrôe_CMS
(
out
, 
cms
, 
ö
, 
Êags
);

1170 i‡(
outf‹m©
 =
FORMAT_PEM
)

1171 
ªt
 = 
	`PEM_wrôe_bio_CMS_°ªam
(
out
, 
cms
, 
ö
, 
Êags
);

1172 i‡(
outf‹m©
 =
FORMAT_ASN1
)

1173 
ªt
 = 
	`i2d_CMS_bio_°ªam
(
out
,
cms
, 
ö
, 
Êags
);

1176 
	`BIO_¥ötf
(
bio_îr
, "Bad output format for CMS file\n");

1177 
íd
;

1179 i‡(
ªt
 <= 0)

1181 
ªt
 = 6;

1182 
íd
;

1185 
ªt
 = 0;

1186 
íd
:

1187 i‡(
ªt
)

1188 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1189 i‡(
√ed_ønd
)

1190 
	`≠p_RAND_wrôe_fûe
(
NULL
, 
bio_îr
);

1191 
	`sk_X509_p›_‰ì
(
í˚πs
, 
X509_‰ì
);

1192 
	`sk_X509_p›_‰ì
(
Ÿhî
, 
X509_‰ì
);

1193 i‡(
vpm
)

1194 
	`X509_VERIFY_PARAM_‰ì
(
vpm
);

1195 i‡(
sksig√rs
)

1196 
	`sk_OPENSSL_STRING_‰ì
(
sksig√rs
);

1197 i‡(
skkeys
)

1198 
	`sk_OPENSSL_STRING_‰ì
(
skkeys
);

1199 i‡(
£¸ë_key
)

1200 
	`OPENSSL_‰ì
(
£¸ë_key
);

1201 i‡(
£¸ë_keyid
)

1202 
	`OPENSSL_‰ì
(
£¸ë_keyid
);

1203 i‡(
pwri_tmp
)

1204 
	`OPENSSL_‰ì
(
pwri_tmp
);

1205 i‡(
ec⁄ã¡_ty≥
)

1206 
	`ASN1_OBJECT_‰ì
(
ec⁄ã¡_ty≥
);

1207 i‡(
º
)

1208 
	`CMS_Re˚ùtReque°_‰ì
(
º
);

1209 i‡(
º_to
)

1210 
	`sk_OPENSSL_STRING_‰ì
(
º_to
);

1211 i‡(
º_‰om
)

1212 
	`sk_OPENSSL_STRING_‰ì
(
º_‰om
);

1213 
	`X509_STORE_‰ì
(
°‹e
);

1214 
	`X509_‰ì
(
˚π
);

1215 
	`X509_‰ì
(
ªcù
);

1216 
	`X509_‰ì
(
sig√r
);

1217 
	`EVP_PKEY_‰ì
(
key
);

1218 
	`CMS_C⁄ã¡Info_‰ì
(
cms
);

1219 
	`CMS_C⁄ã¡Info_‰ì
(
rcms
);

1220 
	`BIO_‰ì
(
r˘ö
);

1221 
	`BIO_‰ì
(
ö
);

1222 
	`BIO_‰ì
(
öd©a
);

1223 
	`BIO_‰ì_Æl
(
out
);

1224 i‡(
∑ssö
Ë
	`OPENSSL_‰ì
(passin);

1225  (
ªt
);

1226 
	}
}

1228 
ßve_˚πs
(*
sig√rfûe
, 
STACK_OF
(
X509
Ë*
sig√rs
)

1230 
	gi
;

1231 
BIO
 *
	gtmp
;

1232 i‡(!
	gsig√rfûe
)

1234 
	gtmp
 = 
BIO_√w_fûe
(
sig√rfûe
, "w");

1235 i‡(!
	gtmp
)  0;

1236 
	gi
 = 0; i < 
sk_X509_num
(
sig√rs
); i++)

1237 
PEM_wrôe_bio_X509
(
tmp
, 
sk_X509_vÆue
(
sig√rs
, 
i
));

1238 
BIO_‰ì
(
tmp
);

1245 
	$cms_cb
(
ok
, 
X509_STORE_CTX
 *
˘x
)

1247 
îr‹
;

1249 
îr‹
 = 
	`X509_STORE_CTX_gë_îr‹
(
˘x
);

1251 
vîify_îr
 = 
îr‹
;

1253 i‡((
îr‹
 !
X509_V_ERR_NO_EXPLICIT_POLICY
)

1254 && ((
îr‹
 !
X509_V_OK
Ë|| (
ok
 != 2)))

1255  
ok
;

1257 
	`pﬁicõs_¥öt
(
NULL
, 
˘x
);

1259  
ok
;

1261 
	}
}

1263 
g«mes_°ack_¥öt
(
BIO
 *
out
, 
STACK_OF
(
GENERAL_NAMES
Ë*
gns
)

1265 
STACK_OF
(
GENERAL_NAME
Ë*
	ggís
;

1266 
GENERAL_NAME
 *
	ggí
;

1267 
	gi
, 
	gj
;

1268 
	gi
 = 0; i < 
sk_GENERAL_NAMES_num
(
gns
); i++)

1270 
	ggís
 = 
sk_GENERAL_NAMES_vÆue
(
gns
, 
i
);

1271 
	gj
 = 0; j < 
sk_GENERAL_NAME_num
(
gís
); j++)

1273 
	ggí
 = 
sk_GENERAL_NAME_vÆue
(
gís
, 
j
);

1274 
BIO_puts
(
out
, " ");

1275 
GENERAL_NAME_¥öt
(
out
, 
gí
);

1276 
BIO_puts
(
out
, "\n");

1282 
	$ª˚ùt_ªque°_¥öt
(
BIO
 *
out
, 
CMS_C⁄ã¡Info
 *
cms
)

1284 
	`STACK_OF
(
CMS_Sig√rInfo
Ë*
sis
;

1285 
CMS_Sig√rInfo
 *
si
;

1286 
CMS_Re˚ùtReque°
 *
º
;

1287 
Æl‹fú°
;

1288 
	`STACK_OF
(
GENERAL_NAMES
Ë*
πo
, *
æi°
;

1289 
ASN1_STRING
 *
scid
;

1290 
i
, 
rv
;

1291 
sis
 = 
	`CMS_gë0_Sig√rInfos
(
cms
);

1292 
i
 = 0; i < 
	`sk_CMS_Sig√rInfo_num
(
sis
); i++)

1294 
si
 = 
	`sk_CMS_Sig√rInfo_vÆue
(
sis
, 
i
);

1295 
rv
 = 
	`CMS_gë1_Re˚ùtReque°
(
si
, &
º
);

1296 
	`BIO_¥ötf
(
bio_îr
, "Sig√∏%d:\n", 
i
 + 1);

1297 i‡(
rv
 == 0)

1298 
	`BIO_puts
(
bio_îr
, " No Receipt Request\n");

1299 i‡(
rv
 < 0)

1301 
	`BIO_puts
(
bio_îr
, " Receipt Request Parse Error\n");

1302 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1306 *
id
;

1307 
idÀn
;

1308 
	`CMS_Re˚ùtReque°_gë0_vÆues
(
º
, &
scid
, &
Æl‹fú°
,

1309 &
æi°
, &
πo
);

1310 
	`BIO_puts
(
out
, " Signed Content ID:\n");

1311 
idÀn
 = 
	`ASN1_STRING_Àngth
(
scid
);

1312 
id
 = (*)
	`ASN1_STRING_d©a
(
scid
);

1313 
	`BIO_dump_ödít
(
out
, 
id
, 
idÀn
, 4);

1314 
	`BIO_puts
(
out
, " Receipts From");

1315 i‡(
æi°
)

1317 
	`BIO_puts
(
out
, " List:\n");

1318 
	`g«mes_°ack_¥öt
(
out
, 
æi°
);

1320 i‡(
Æl‹fú°
 == 1)

1321 
	`BIO_puts
(
out
, ": First Tier\n");

1322 i‡(
Æl‹fú°
 == 0)

1323 
	`BIO_puts
(
out
, ": All\n");

1325 
	`BIO_¥ötf
(
out
, " Unknow¿(%d)\n", 
Æl‹fú°
);

1326 
	`BIO_puts
(
out
, " Receipts To:\n");

1327 
	`g«mes_°ack_¥öt
(
out
, 
πo
);

1329 i‡(
º
)

1330 
	`CMS_Re˚ùtReque°_‰ì
(
º
);

1332 
	}
}

1334 
STACK_OF
(
GENERAL_NAMES
Ë*
make_«mes_°ack
(STACK_OF(
OPENSSL_STRING
Ë*
ns
)

1336 
	gi
;

1337 
STACK_OF
(
GENERAL_NAMES
Ë*
	gªt
;

1338 
GENERAL_NAMES
 *
	ggís
 = 
NULL
;

1339 
GENERAL_NAME
 *
	ggí
 = 
NULL
;

1340 
	gªt
 = 
sk_GENERAL_NAMES_√w_nuŒ
();

1341 i‡(!
	gªt
)

1342 
	gîr
;

1343 
	gi
 = 0; i < 
sk_OPENSSL_STRING_num
(
ns
); i++)

1345 *
	g°r
 = 
sk_OPENSSL_STRING_vÆue
(
ns
, 
i
);

1346 
	ggí
 = 
a2i_GENERAL_NAME
(
NULL
, NULL, NULL, 
GEN_EMAIL
, 
°r
, 0);

1347 i‡(!
	ggí
)

1348 
	gîr
;

1349 
	ggís
 = 
GENERAL_NAMES_√w
();

1350 i‡(!
	ggís
)

1351 
	gîr
;

1352 i‡(!
sk_GENERAL_NAME_push
(
gís
, 
gí
))

1353 
	gîr
;

1354 
	ggí
 = 
NULL
;

1355 i‡(!
sk_GENERAL_NAMES_push
(
ªt
, 
gís
))

1356 
	gîr
;

1357 
	ggís
 = 
NULL
;

1360  
	gªt
;

1362 
	gîr
:

1363 i‡(
ªt
)

1364 
sk_GENERAL_NAMES_p›_‰ì
(
ªt
, 
GENERAL_NAMES_‰ì
);

1365 i‡(
	ggís
)

1366 
GENERAL_NAMES_‰ì
(
gís
);

1367 i‡(
	ggí
)

1368 
GENERAL_NAME_‰ì
(
gí
);

1369  
	gNULL
;

1373 
CMS_Re˚ùtReque°
 *
make_ª˚ùt_ªque°
(
STACK_OF
(
OPENSSL_STRING
Ë*
º_to
,

1374 
º_Æl‹fú°
,

1375 
STACK_OF
(
OPENSSL_STRING
Ë*
º_‰om
)

1377 
STACK_OF
(
GENERAL_NAMES
Ë*
	gr˘_to
, *
	gr˘_‰om
;

1378 
CMS_Re˚ùtReque°
 *
	gº
;

1379 
	gr˘_to
 = 
make_«mes_°ack
(
º_to
);

1380 i‡(!
	gr˘_to
)

1381 
	gîr
;

1382 i‡(
	gº_‰om
)

1384 
	gr˘_‰om
 = 
make_«mes_°ack
(
º_‰om
);

1385 i‡(!
	gr˘_‰om
)

1386 
	gîr
;

1389 
	gr˘_‰om
 = 
NULL
;

1390 
	gº
 = 
CMS_Re˚ùtReque°_¸óã0
(
NULL
, -1, 
º_Æl‹fú°
, 
r˘_‰om
,

1391 
r˘_to
);

1392  
	gº
;

1393 
	gîr
:

1394  
NULL
;

	@crl.c

59 
	~<°dio.h
>

60 
	~<°dlib.h
>

61 
	~<°rög.h
>

62 
	~"≠ps.h
"

63 
	~<›ís¶/bio.h
>

64 
	~<›ís¶/îr.h
>

65 
	~<›ís¶/x509.h
>

66 
	~<›ís¶/x509v3.h
>

67 
	~<›ís¶/≥m.h
>

69 #unde‡
PROG


70 
	#PROG
 
¸l_maö


	)

72 #unde‡
POSTFIX


73 
	#POSTFIX
 ".rvk"

	)

75 c⁄° *
	g¸l_ußge
[]={

84 #i‚de‡
OPENSSL_NO_MD5


96 
NULL


99 
X509_CRL
 *
lﬂd_¸l
(*
fûe
, 
f‹m©
);

100 
BIO
 *
	gbio_out
=
NULL
;

102 
MAIN
(, **);

104 
	$MAIN
(
¨gc
, **
¨gv
)

106 
nmÊag
 = 0;

107 
X509_CRL
 *
x
=
NULL
;

108 *
CAfûe
 = 
NULL
, *
CA∑th
 = NULL;

109 
ªt
=1,
i
,
num
,
bad›s
=0;

110 
BIO
 *
out
=
NULL
;

111 
öf‹m©
,
outf‹m©
;

112 *
öfûe
=
NULL
,*
outfûe
=NULL;

113 
hash
=0,
issuî
=0,
œ°upd©e
=0,
√xtupd©e
=0,
noout
=0,
ãxt
=0;

114 #i‚de‡
OPENSSL_NO_MD5


115 
hash_ﬁd
=0;

117 
fögî¥öt
 = 0, 
¸ umbî
 = 0;

118 c⁄° **
µ
;

119 
X509_STORE
 *
°‹e
 = 
NULL
;

120 
X509_STORE_CTX
 
˘x
;

121 
X509_LOOKUP
 *
lookup
 = 
NULL
;

122 
X509_OBJECT
 
xobj
;

123 
EVP_PKEY
 *
pkey
;

124 
do_vî
 = 0;

125 c⁄° 
EVP_MD
 *
md_Æg
,*
dige°
=
	`EVP_sha1
();

127 
	`≠ps_°¨tup
();

129 i‡(
bio_îr
 =
NULL
)

130 i‡((
bio_îr
=
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

131 
	`BIO_£t_Â
(
bio_îr
,
°dîr
,
BIO_NOCLOSE
|
BIO_FP_TEXT
);

133 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

134 
íd
;

136 i‡(
bio_out
 =
NULL
)

137 i‡((
bio_out
=
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

139 
	`BIO_£t_Â
(
bio_out
,
°dout
,
BIO_NOCLOSE
);

140 #ifde‡
OPENSSL_SYS_VMS


142 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

143 
bio_out
 = 
	`BIO_push
(
tmpbio
, bio_out);

148 
öf‹m©
=
FORMAT_PEM
;

149 
outf‹m©
=
FORMAT_PEM
;

151 
¨gc
--;

152 
¨gv
++;

153 
num
=0;

154 
¨gc
 >= 1)

156 #ifde‡
undef


157 i‡(
	`°rcmp
(*
¨gv
,"-p") == 0)

159 i‡(--
¨gc
 < 1Ë
bad
;

160 i‡(!
	`¨gs_‰om_fûe
(++
¨gv
,
N¨gc
,
N¨gv
)Ë{ 
íd
; }*/

163 i‡(
	`°rcmp
(*
¨gv
,"-inform") == 0)

165 i‡(--
¨gc
 < 1Ë
bad
;

166 
öf‹m©
=
	`°r2fmt
(*(++
¨gv
));

168 i‡(
	`°rcmp
(*
¨gv
,"-outform") == 0)

170 i‡(--
¨gc
 < 1Ë
bad
;

171 
outf‹m©
=
	`°r2fmt
(*(++
¨gv
));

173 i‡(
	`°rcmp
(*
¨gv
,"-in") == 0)

175 i‡(--
¨gc
 < 1Ë
bad
;

176 
öfûe
*(++
¨gv
);

178 i‡(
	`°rcmp
(*
¨gv
,"-out") == 0)

180 i‡(--
¨gc
 < 1Ë
bad
;

181 
outfûe
*(++
¨gv
);

183 i‡(
	`°rcmp
(*
¨gv
,"-CApath") == 0)

185 i‡(--
¨gc
 < 1Ë
bad
;

186 
CA∑th
 = *(++
¨gv
);

187 
do_vî
 = 1;

189 i‡(
	`°rcmp
(*
¨gv
,"-CAfile") == 0)

191 i‡(--
¨gc
 < 1Ë
bad
;

192 
CAfûe
 = *(++
¨gv
);

193 
do_vî
 = 1;

195 i‡(
	`°rcmp
(*
¨gv
,"-verify") == 0)

196 
do_vî
 = 1;

197 i‡(
	`°rcmp
(*
¨gv
,"-text") == 0)

198 
ãxt
 = 1;

199 i‡(
	`°rcmp
(*
¨gv
,"-hash") == 0)

200 
hash
++
num
;

201 #i‚de‡
OPENSSL_NO_MD5


202 i‡(
	`°rcmp
(*
¨gv
,"-hash_old") == 0)

203 
hash_ﬁd
++
num
;

205 i‡(
	`°rcmp
(*
¨gv
,"-nameopt") == 0)

207 i‡(--
¨gc
 < 1Ë
bad
;

208 i‡(!
	`£t_«me_ex
(&
nmÊag
, *(++
¨gv
))Ë
bad
;

210 i‡(
	`°rcmp
(*
¨gv
,"-issuer") == 0)

211 
issuî
++
num
;

212 i‡(
	`°rcmp
(*
¨gv
,"-lastupdate") == 0)

213 
œ°upd©e
++
num
;

214 i‡(
	`°rcmp
(*
¨gv
,"-nextupdate") == 0)

215 
√xtupd©e
++
num
;

216 i‡(
	`°rcmp
(*
¨gv
,"-noout") == 0)

217 
noout
++
num
;

218 i‡(
	`°rcmp
(*
¨gv
,"-fingerprint") == 0)

219 
fögî¥öt
++
num
;

220 i‡(
	`°rcmp
(*
¨gv
,"-crlnumber") == 0)

221 
¸ umbî
++
num
;

222 i‡((
md_Æg
=
	`EVP_gë_dige°by«me
(*
¨gv
 + 1)))

225 
dige°
=
md_Æg
;

229 
	`BIO_¥ötf
(
bio_îr
,"unknow¿›ti⁄ %s\n",*
¨gv
);

230 
bad›s
=1;

233 
¨gc
--;

234 
¨gv
++;

237 i‡(
bad›s
)

239 
bad
:

240 
µ
=
¸l_ußge
; (*µ !
NULL
);Öp++)

241 
	`BIO_¥ötf
(
bio_îr
,"%s",*
µ
);

242 
íd
;

245 
	`ERR_lﬂd_¸y±o_°rögs
();

246 
x
=
	`lﬂd_¸l
(
öfûe
,
öf‹m©
);

247 i‡(
x
 =
NULL
Ë{ 
íd
; }

249 if(
do_vî
) {

250 
°‹e
 = 
	`X509_STORE_√w
();

251 
lookup
=
	`X509_STORE_add_lookup
(
°‹e
,
	`X509_LOOKUP_fûe
());

252 i‡(
lookup
 =
NULL
Ë
íd
;

253 i‡(!
	`X509_LOOKUP_lﬂd_fûe
(
lookup
,
CAfûe
,
X509_FILETYPE_PEM
))

254 
	`X509_LOOKUP_lﬂd_fûe
(
lookup
,
NULL
,
X509_FILETYPE_DEFAULT
);

256 
lookup
=
	`X509_STORE_add_lookup
(
°‹e
,
	`X509_LOOKUP_hash_dú
());

257 i‡(
lookup
 =
NULL
Ë
íd
;

258 i‡(!
	`X509_LOOKUP_add_dú
(
lookup
,
CA∑th
,
X509_FILETYPE_PEM
))

259 
	`X509_LOOKUP_add_dú
(
lookup
,
NULL
,
X509_FILETYPE_DEFAULT
);

260 
	`ERR_˛ór_îr‹
();

262 if(!
	`X509_STORE_CTX_öô
(&
˘x
, 
°‹e
, 
NULL
, NULL)) {

263 
	`BIO_¥ötf
(
bio_îr
,

265 
íd
;

268 
i
 = 
	`X509_STORE_gë_by_subje˘
(&
˘x
, 
X509_LU_X509
,

269 
	`X509_CRL_gë_issuî
(
x
), &
xobj
);

270 if(
i
 <= 0) {

271 
	`BIO_¥ötf
(
bio_îr
,

273 
íd
;

275 
pkey
 = 
	`X509_gë_pubkey
(
xobj
.
d©a
.
x509
);

276 
	`X509_OBJECT_‰ì_c⁄ã¡s
(&
xobj
);

277 if(!
pkey
) {

278 
	`BIO_¥ötf
(
bio_îr
,

280 
íd
;

282 
i
 = 
	`X509_CRL_vîify
(
x
, 
pkey
);

283 
	`EVP_PKEY_‰ì
(
pkey
);

284 if(
i
 < 0Ë
íd
;

285 if(
i
 =0Ë
	`BIO_¥ötf
(
bio_îr
, "verify failure\n");

286 
	`BIO_¥ötf
(
bio_îr
, "verify OK\n");

289 i‡(
num
)

291 
i
=1; i<=
num
; i++)

293 i‡(
issuî
 =
i
)

295 
	`¥öt_«me
(
bio_out
, "issuî=", 
	`X509_CRL_gë_issuî
(
x
), 
nmÊag
);

297 i‡(
¸ umbî
 =
i
)

299 
ASN1_INTEGER
 *
¸ um
;

300 
¸ um
 = 
	`X509_CRL_gë_ext_d2i
(
x
, 
NID_¸l_numbî
,

301 
NULL
, NULL);

302 
	`BIO_¥ötf
(
bio_out
,"crlNumber=");

303 i‡(
¸ um
)

305 
	`i2a_ASN1_INTEGER
(
bio_out
, 
¸ um
);

306 
	`ASN1_INTEGER_‰ì
(
¸ um
);

309 
	`BIO_puts
(
bio_out
, "<NONE>");

310 
	`BIO_¥ötf
(
bio_out
,"\n");

312 i‡(
hash
 =
i
)

314 
	`BIO_¥ötf
(
bio_out
,"%08lx\n",

315 
	`X509_NAME_hash
(
	`X509_CRL_gë_issuî
(
x
)));

317 #i‚de‡
OPENSSL_NO_MD5


318 i‡(
hash_ﬁd
 =
i
)

320 
	`BIO_¥ötf
(
bio_out
,"%08lx\n",

321 
	`X509_NAME_hash_ﬁd
(

322 
	`X509_CRL_gë_issuî
(
x
)));

325 i‡(
œ°upd©e
 =
i
)

327 
	`BIO_¥ötf
(
bio_out
,"lastUpdate=");

328 
	`ASN1_TIME_¥öt
(
bio_out
,

329 
	`X509_CRL_gë_œ°Upd©e
(
x
));

330 
	`BIO_¥ötf
(
bio_out
,"\n");

332 i‡(
√xtupd©e
 =
i
)

334 
	`BIO_¥ötf
(
bio_out
,"nextUpdate=");

335 i‡(
	`X509_CRL_gë_√xtUpd©e
(
x
))

336 
	`ASN1_TIME_¥öt
(
bio_out
,

337 
	`X509_CRL_gë_√xtUpd©e
(
x
));

339 
	`BIO_¥ötf
(
bio_out
,"NONE");

340 
	`BIO_¥ötf
(
bio_out
,"\n");

342 i‡(
fögî¥öt
 =
i
)

344 
j
;

345 
n
;

346 
md
[
EVP_MAX_MD_SIZE
];

348 i‡(!
	`X509_CRL_dige°
(
x
,
dige°
,
md
,&
n
))

350 
	`BIO_¥ötf
(
bio_îr
,"out of memory\n");

351 
íd
;

353 
	`BIO_¥ötf
(
bio_out
,"%s Fingerprint=",

354 
	`OBJ_nid2¢
(
	`EVP_MD_ty≥
(
dige°
)));

355 
j
=0; j<()
n
; j++)

357 
	`BIO_¥ötf
(
bio_out
,"%02X%c",
md
[
j
],

358 (
j
+1 =()
n
)

365 
out
=
	`BIO_√w
(
	`BIO_s_fûe
());

366 i‡(
out
 =
NULL
)

368 
	`ERR_¥öt_îr‹s
(
bio_îr
);

369 
íd
;

372 i‡(
outfûe
 =
NULL
)

374 
	`BIO_£t_Â
(
out
,
°dout
,
BIO_NOCLOSE
);

375 #ifde‡
OPENSSL_SYS_VMS


377 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

378 
out
 = 
	`BIO_push
(
tmpbio
, out);

384 i‡(
	`BIO_wrôe_fûíame
(
out
,
outfûe
) <= 0)

386 
	`≥º‹
(
outfûe
);

387 
íd
;

391 i‡(
ãxt
Ë
	`X509_CRL_¥öt
(
out
, 
x
);

393 i‡(
noout
)

395 
ªt
 = 0;

396 
íd
;

399 i‡(
outf‹m©
 =
FORMAT_ASN1
)

400 
i
=()
	`i2d_X509_CRL_bio
(
out
,
x
);

401 i‡(
outf‹m©
 =
FORMAT_PEM
)

402 
i
=
	`PEM_wrôe_bio_X509_CRL
(
out
,
x
);

405 
	`BIO_¥ötf
(
bio_îr
,"bad output format specified for outfile\n");

406 
íd
;

408 i‡(!
i
Ë{ 
	`BIO_¥ötf
(
bio_îr
,"u«bÀÅÿwrôêCRL\n"); 
íd
; }

409 
ªt
=0;

410 
íd
:

411 
	`BIO_‰ì_Æl
(
out
);

412 
	`BIO_‰ì_Æl
(
bio_out
);

413 
bio_out
=
NULL
;

414 
	`X509_CRL_‰ì
(
x
);

415 if(
°‹e
) {

416 
	`X509_STORE_CTX_˛ónup
(&
˘x
);

417 
	`X509_STORE_‰ì
(
°‹e
);

419 
	`≠ps_shutdown
();

420 
	`OPENSSL_EXIT
(
ªt
);

421 
	}
}

423 
X509_CRL
 *
	$lﬂd_¸l
(*
öfûe
, 
f‹m©
)

425 
X509_CRL
 *
x
=
NULL
;

426 
BIO
 *
ö
=
NULL
;

428 
ö
=
	`BIO_√w
(
	`BIO_s_fûe
());

429 i‡(
ö
 =
NULL
)

431 
	`ERR_¥öt_îr‹s
(
bio_îr
);

432 
íd
;

435 i‡(
öfûe
 =
NULL
)

436 
	`BIO_£t_Â
(
ö
,
°dö
,
BIO_NOCLOSE
);

439 i‡(
	`BIO_ªad_fûíame
(
ö
,
öfûe
) <= 0)

441 
	`≥º‹
(
öfûe
);

442 
íd
;

445 i‡(
f‹m©
 =
FORMAT_ASN1
)

446 
x
=
	`d2i_X509_CRL_bio
(
ö
,
NULL
);

447 i‡(
f‹m©
 =
FORMAT_PEM
)

448 
x
=
	`PEM_ªad_bio_X509_CRL
(
ö
,
NULL
,NULL,NULL);

450 
	`BIO_¥ötf
(
bio_îr
,"bad input format specified for input crl\n");

451 
íd
;

453 i‡(
x
 =
NULL
)

455 
	`BIO_¥ötf
(
bio_îr
,"unableÅoÜoad CRL\n");

456 
	`ERR_¥öt_îr‹s
(
bio_îr
);

457 
íd
;

460 
íd
:

461 
	`BIO_‰ì
(
ö
);

462 (
x
);

463 
	}
}

	@crl2p7.c

63 
	~<°dio.h
>

64 
	~<°rög.h
>

65 
	~<sys/ty≥s.h
>

66 
	~"≠ps.h
"

67 
	~<›ís¶/îr.h
>

68 
	~<›ís¶/evp.h
>

69 
	~<›ís¶/x509.h
>

70 
	~<›ís¶/pkcs7.h
>

71 
	~<›ís¶/≥m.h
>

72 
	~<›ís¶/obje˘s.h
>

74 
add_˚πs_‰om_fûe
(
STACK_OF
(
X509
Ë*
°ack
, *
˚πfûe
);

75 #unde‡
PROG


76 
	#PROG
 
¸l2pkcs7_maö


	)

84 
MAIN
(, **);

86 
	$MAIN
(
¨gc
, **
¨gv
)

88 
i
,
bad›s
=0;

89 
BIO
 *
ö
=
NULL
,*
out
=NULL;

90 
öf‹m©
,
outf‹m©
;

91 *
öfûe
,*
outfûe
,*
¥og
,*
˚πfûe
;

92 
PKCS7
 *
p7
 = 
NULL
;

93 
PKCS7_SIGNED
 *
p7s
 = 
NULL
;

94 
X509_CRL
 *
¸l
=
NULL
;

95 
	`STACK_OF
(
OPENSSL_STRING
Ë*
˚πÊ°
=
NULL
;

96 
	`STACK_OF
(
X509_CRL
Ë*
¸l_°ack
=
NULL
;

97 
	`STACK_OF
(
X509
Ë*
˚π_°ack
=
NULL
;

98 
ªt
=1,
no¸l
=0;

100 
	`≠ps_°¨tup
();

102 i‡(
bio_îr
 =
NULL
)

103 i‡((
bio_îr
=
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

104 
	`BIO_£t_Â
(
bio_îr
,
°dîr
,
BIO_NOCLOSE
|
BIO_FP_TEXT
);

106 
öfûe
=
NULL
;

107 
outfûe
=
NULL
;

108 
öf‹m©
=
FORMAT_PEM
;

109 
outf‹m©
=
FORMAT_PEM
;

111 
¥og
=
¨gv
[0];

112 
¨gc
--;

113 
¨gv
++;

114 
¨gc
 >= 1)

116 i‡(
	`°rcmp
(*
¨gv
,"-inform") == 0)

118 i‡(--
¨gc
 < 1Ë
bad
;

119 
öf‹m©
=
	`°r2fmt
(*(++
¨gv
));

121 i‡(
	`°rcmp
(*
¨gv
,"-outform") == 0)

123 i‡(--
¨gc
 < 1Ë
bad
;

124 
outf‹m©
=
	`°r2fmt
(*(++
¨gv
));

126 i‡(
	`°rcmp
(*
¨gv
,"-in") == 0)

128 i‡(--
¨gc
 < 1Ë
bad
;

129 
öfûe
*(++
¨gv
);

131 i‡(
	`°rcmp
(*
¨gv
,"-nocrl") == 0)

133 
no¸l
=1;

135 i‡(
	`°rcmp
(*
¨gv
,"-out") == 0)

137 i‡(--
¨gc
 < 1Ë
bad
;

138 
outfûe
*(++
¨gv
);

140 i‡(
	`°rcmp
(*
¨gv
,"-certfile") == 0)

142 i‡(--
¨gc
 < 1Ë
bad
;

143 if(!
˚πÊ°
Ë˚πÊ° = 
	`sk_OPENSSL_STRING_√w_nuŒ
();

144 
	`sk_OPENSSL_STRING_push
(
˚πÊ°
,*(++
¨gv
));

148 
	`BIO_¥ötf
(
bio_îr
,"unknow¿›ti⁄ %s\n",*
¨gv
);

149 
bad›s
=1;

152 
¨gc
--;

153 
¨gv
++;

156 i‡(
bad›s
)

158 
bad
:

159 
	`BIO_¥ötf
(
bio_îr
,"%†[›ti⁄s] <öfûê>outfûe\n",
¥og
);

160 
	`BIO_¥ötf
(
bio_îr
,"where optionsáre\n");

161 
	`BIO_¥ötf
(
bio_îr
," -informárg input format - DER or PEM\n");

162 
	`BIO_¥ötf
(
bio_îr
," -outformárg output format - DER or PEM\n");

163 
	`BIO_¥ötf
(
bio_îr
," -inárg input file\n");

164 
	`BIO_¥ötf
(
bio_îr
," -outárg output file\n");

165 
	`BIO_¥ötf
(
bio_îr
," -certfileárg certificates file of chainÅoáÅrusted CA\n");

166 
	`BIO_¥ötf
(
bio_îr
," (can be used moreÅhan once)\n");

167 
	`BIO_¥ötf
(
bio_îr
," -nocrlÇo crlÅoÜoad, just certs from '-certfile'\n");

168 
ªt
 = 1;

169 
íd
;

172 
	`ERR_lﬂd_¸y±o_°rögs
();

174 
ö
=
	`BIO_√w
(
	`BIO_s_fûe
());

175 
out
=
	`BIO_√w
(
	`BIO_s_fûe
());

176 i‡((
ö
 =
NULL
Ë|| (
out
 == NULL))

178 
	`ERR_¥öt_îr‹s
(
bio_îr
);

179 
íd
;

182 i‡(!
no¸l
)

184 i‡(
öfûe
 =
NULL
)

185 
	`BIO_£t_Â
(
ö
,
°dö
,
BIO_NOCLOSE
);

188 i‡(
	`BIO_ªad_fûíame
(
ö
,
öfûe
) <= 0)

190 
	`≥º‹
(
öfûe
);

191 
íd
;

195 i‡(
öf‹m©
 =
FORMAT_ASN1
)

196 
¸l
=
	`d2i_X509_CRL_bio
(
ö
,
NULL
);

197 i‡(
öf‹m©
 =
FORMAT_PEM
)

198 
¸l
=
	`PEM_ªad_bio_X509_CRL
(
ö
,
NULL
,NULL,NULL);

200 
	`BIO_¥ötf
(
bio_îr
,"bad input format specified for input crl\n");

201 
íd
;

203 i‡(
¸l
 =
NULL
)

205 
	`BIO_¥ötf
(
bio_îr
,"unableÅoÜoad CRL\n");

206 
	`ERR_¥öt_îr‹s
(
bio_îr
);

207 
íd
;

211 i‡((
p7
=
	`PKCS7_√w
()Ë=
NULL
Ë
íd
;

212 i‡((
p7s
=
	`PKCS7_SIGNED_√w
()Ë=
NULL
Ë
íd
;

213 
p7
->
ty≥
=
	`OBJ_nid2obj
(
NID_pkcs7_sig√d
);

214 
p7
->
d
.
sign
=
p7s
;

215 
p7s
->
c⁄ã¡s
->
ty≥
=
	`OBJ_nid2obj
(
NID_pkcs7_d©a
);

217 i‡(!
	`ASN1_INTEGER_£t
(
p7s
->
vîsi⁄
,1)Ë
íd
;

218 i‡((
¸l_°ack
=
	`sk_X509_CRL_√w_nuŒ
()Ë=
NULL
Ë
íd
;

219 
p7s
->
¸l
=
¸l_°ack
;

220 i‡(
¸l
 !
NULL
)

222 
	`sk_X509_CRL_push
(
¸l_°ack
,
¸l
);

223 
¸l
=
NULL
;

226 i‡((
˚π_°ack
=
	`sk_X509_√w_nuŒ
()Ë=
NULL
Ë
íd
;

227 
p7s
->
˚π
=
˚π_°ack
;

229 if(
˚πÊ°
Ë
i
 = 0; i < 
	`sk_OPENSSL_STRING_num
(certflst); i++) {

230 
˚πfûe
 = 
	`sk_OPENSSL_STRING_vÆue
(
˚πÊ°
, 
i
);

231 i‡(
	`add_˚πs_‰om_fûe
(
˚π_°ack
,
˚πfûe
) < 0)

233 
	`BIO_¥ötf
(
bio_îr
, "errorÜoading certificates\n");

234 
	`ERR_¥öt_îr‹s
(
bio_îr
);

235 
íd
;

239 
	`sk_OPENSSL_STRING_‰ì
(
˚πÊ°
);

241 i‡(
outfûe
 =
NULL
)

243 
	`BIO_£t_Â
(
out
,
°dout
,
BIO_NOCLOSE
);

244 #ifde‡
OPENSSL_SYS_VMS


246 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

247 
out
 = 
	`BIO_push
(
tmpbio
, out);

253 i‡(
	`BIO_wrôe_fûíame
(
out
,
outfûe
) <= 0)

255 
	`≥º‹
(
outfûe
);

256 
íd
;

260 i‡(
outf‹m©
 =
FORMAT_ASN1
)

261 
i
=
	`i2d_PKCS7_bio
(
out
,
p7
);

262 i‡(
outf‹m©
 =
FORMAT_PEM
)

263 
i
=
	`PEM_wrôe_bio_PKCS7
(
out
,
p7
);

265 
	`BIO_¥ötf
(
bio_îr
,"bad output format specified for outfile\n");

266 
íd
;

268 i‡(!
i
)

270 
	`BIO_¥ötf
(
bio_îr
,"unableÅo writeÖkcs7 object\n");

271 
	`ERR_¥öt_îr‹s
(
bio_îr
);

272 
íd
;

274 
ªt
=0;

275 
íd
:

276 i‡(
ö
 !
NULL
Ë
	`BIO_‰ì
(in);

277 i‡(
out
 !
NULL
Ë
	`BIO_‰ì_Æl
(out);

278 i‡(
p7
 !
NULL
Ë
	`PKCS7_‰ì
(p7);

279 i‡(
¸l
 !
NULL
Ë
	`X509_CRL_‰ì
(crl);

281 
	`≠ps_shutdown
();

282 
	`OPENSSL_EXIT
(
ªt
);

283 
	}
}

295 
add_˚πs_‰om_fûe
(
STACK_OF
(
X509
Ë*
°ack
, *
˚πfûe
)

297 
BIO
 *
	gö
=
NULL
;

298 
	gcou¡
=0;

299 
	gªt
= -1;

300 
STACK_OF
(
X509_INFO
Ë*
	gsk
=
NULL
;

301 
X509_INFO
 *
	gxi
;

303 
	gö
=
BIO_√w
(
BIO_s_fûe
());

304 i‡((
	gö
 =
NULL
Ë|| (
BIO_ªad_fûíame
(
ö
,
˚πfûe
) <= 0))

306 
BIO_¥ötf
(
bio_îr
,"îr‹ o≥nögÅhêfûe, %s\n",
˚πfûe
);

307 
	gíd
;

311 
	gsk
=
PEM_X509_INFO_ªad_bio
(
ö
,
NULL
,NULL,NULL);

312 i‡(
	gsk
 =
NULL
) {

313 
BIO_¥ötf
(
bio_îr
,"îr‹ÑódögÅhêfûe, %s\n",
˚πfûe
);

314 
	gíd
;

318 
sk_X509_INFO_num
(
sk
))

320 
	gxi
=
sk_X509_INFO_shi·
(
sk
);

321 i‡(
	gxi
->
	gx509
 !
NULL
)

323 
sk_X509_push
(
°ack
,
xi
->
x509
);

324 
	gxi
->
	gx509
=
NULL
;

325 
	gcou¡
++;

327 
X509_INFO_‰ì
(
xi
);

330 
	gªt
=
cou¡
;

331 
	gíd
:

333 i‡(
ö
 !
NULL
Ë
BIO_‰ì
(in);

334 i‡(
	gsk
 !
NULL
Ë
sk_X509_INFO_‰ì
(
sk
);

335 (
	gªt
);

	@crlgen.c

1 
	~<°dio.h
>

2 
	~<î∫o.h
>

3 
	~<›ís¶/¸y±o.h
>

4 
	~<›ís¶/bio.h
>

5 
	~<›ís¶/°ack.h
>

6 
	~<›ís¶/≥m.h
>

7 
	~<sys/ty≥s.h
>

8 
	~<sys/uio.h
>

9 
	~<uni°d.h
>

10 
	~<f˙é.h
>

13 
	#CACERTNAME
 "ˇ˚π.≥m"

	)

14 
	#CAKEYNAME
 "ˇkey.≥m"

	)

15 
	#CRLDAYS
 365

	)

16 
	#CRLOUT
 "¸lfûe"

	)

17 
	#DIGEST
 "MD5"

	)

19 
	$maö
(
¨gc
,**
¨gv
)

21 
BIO
 *
ˇ˚π
, *
ˇkey
, *
out
;

22 
EVP_PKEY
 *
pkey
;

23 
X509
 *
x509
;

24 
X509_REVOKED
 *
r
;

25 
X509_CRL
 *
¸l
;

26 
ASN1_TIME
 *
tm±m
;

27 
ASN1_INTEGER
 *
ai
;

28 c⁄° 
EVP_MD
 *
dg°
;

29 
£rül
;

30 
íd£rül
;

31 
ö√r
,
ouãr
;

32 
£ed
;

33 
§l
[8];

34 
cou¡
;

35 
avgdïth
;

36 *
¸ ame
;

37 
fûíame
[32];

38 
mask
;

39 
fd
;

40 
øndD©a
[8192];

41 *
øndD©aPå
 = 
øndD©a
;

42 *
øndD©aEndPå
;

43 
BIGNUM
 *
bnSîül
;

45 
cou¡
 = 
	`©oi
(
¨gv
[1]);

46 
avgdïth
 = 
	`©oi
(
¨gv
[2]);

47 
¸ ame
 = 
¨gv
[3];

49 
ˇ˚π
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

50 
ˇkey
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

51 
out
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

57 
	`•rötf
(
fûíame
,"%s-˚π.≥m",
¸ ame
);

58 
	`BIO_ªad_fûíame
(
ˇ˚π
,
fûíame
);

59 
	`•rötf
(
fûíame
,"%s-key.≥m",
¸ ame
);

60 
	`BIO_ªad_fûíame
(
ˇkey
,
fûíame
);

61 
	`•rötf
(
fûíame
,"%s-¸l.≥m",
¸ ame
);

62 
	`BIO_wrôe_fûíame
(
out
,
fûíame
);

65 
pkey
 = 
	`PEM_ªad_bio_Priv©eKey
(
ˇkey
,
NULL
,NULL,NULL);

66 if(!
pkey
)

68 
	`¥ötf
("coundÇotÑead cakey file \n");

69 
	`exô
(1);

72 
x509
 = 
	`PEM_ªad_bio_X509
(
ˇ˚π
,
NULL
,NULL,NULL);

73 if(!
x509
)

75 
	`¥ötf
("coundÇotÑead cacert file \n");

76 
	`exô
(1);

79 
¸l
 = 
	`X509_CRL_√w
();

81 
tm±m
 = 
	`ASN1_TIME_√w
();

82 
	`X509_gmtime_adj
(
tm±m
,0);

83 
	`X509_CRL_£t_œ°Upd©e
(
¸l
,
tm±m
);

84 
	`X509_gmtime_adj
(
tm±m
,
CRLDAYS
*24*60*60);

85 
	`X509_CRL_£t_√xtUpd©e
(
¸l
, 
tm±m
);

87 
	`X509_CRL_£t_issuî_«me
(
¸l
,
	`X509_gë_subje˘_«me
(
x509
));

88 
ai
 = 
	`ASN1_INTEGER_√w
();

90 
dg°
 = 
	`EVP_md5
();

91 if(!
dg°
)

93 
	`¥ötf
("CouldÇŸ föd dige° f‹ %s\n",
DIGEST
);

94 
	`exô
(1);

98 
£ed
 = 0xA5A55A5A;

99 
	`§™dom
(
£ed
);

100 
ouãr
=0;outer<5;outer++)

101 
ö√r
=0;inner<5;inner++)

102 ;
£rül
<=
íd£rül
;serial++)

105 
fd
 = 
	`›í
("/dev/øndom",
O_RDONLY
);

106 
	`ªad
(
fd
,
øndD©a
,(randData));

107 
øndD©aPå
 = 
øndD©a
;

108 
øndD©aEndPå
 = 
øndD©aPå
 + (
øndD©a
);

109 
	`˛o£
(
fd
);

112 
ö√r
=0;ö√r<
cou¡
;inner++)

114 if–(
øndD©aEndPå
 - 
øndD©aPå
Ë< 
avgdïth
)

116 
fd
 = 
	`›í
("/dev/øndom",
O_RDONLY
);

117 
	`ªad
(
fd
,
øndD©a
,8192);

118 
øndD©aPå
 = 
øndD©a
;

119 
øndD©aEndPå
 = 
øndD©aPå
 + (
øndD©a
);

120 
	`˛o£
(
fd
);

123 
r
 = 
	`X509_REVOKED_√w
();

124 
	`X509_gmtime_adj
(
tm±m
,-432000);

125 
	`X509_REVOKED_£t_ªvoˇti⁄D©e
(
r
,
tm±m
);

129 
bnSîül
 = 
	`BN_bö2bn
((c⁄° *)
øndD©aPå
,
avgdïth
,
NULL
);

130 
ai
 = 
	`BN_to_ASN1_INTEGER
(
bnSîül
,
NULL
);

131 
øndD©aPå
 +
avgdïth
;

134 
	`X509_REVOKED_£t_£rülNumbî
(
r
,
ai
);

135 
	`X509_CRL_add0_ªvoked
(
¸l
,
r
);

141 i‡(!
	`X509_CRL_sign
(
¸l
,
pkey
,
dg°
))

143 
	`¥ötf
("FailedÅo sign CRL\n");

144 
	`exô
(1);

146 
	`PEM_wrôe_bio_X509_CRL
(
out
,
¸l
);

147 
	`ASN1_INTEGER_‰ì
(
ai
);

148 
	}
}

	@dgst.c

59 
	~<°dio.h
>

60 
	~<°rög.h
>

61 
	~<°dlib.h
>

62 
	~"≠ps.h
"

63 
	~<›ís¶/bio.h
>

64 
	~<›ís¶/îr.h
>

65 
	~<›ís¶/evp.h
>

66 
	~<›ís¶/obje˘s.h
>

67 
	~<›ís¶/x509.h
>

68 
	~<›ís¶/≥m.h
>

69 
	~<›ís¶/hmac.h
>

71 #unde‡
BUFSIZE


72 
	#BUFSIZE
 1024*8

	)

74 #unde‡
PROG


75 
	#PROG
 
dg°_maö


	)

77 
do_Â
(
BIO
 *
out
, *
buf
, BIO *
bp
, 
£p
, 
böout
,

78 
EVP_PKEY
 *
key
, *
sigö
, 
sigÀn
,

79 c⁄° *
sig_«me
, c⁄° *
md_«me
,

80 c⁄° *
fûe
,
BIO
 *
bmd
);

82 
	$li°_md_‚
(c⁄° 
EVP_MD
 *
m
,

83 c⁄° *
‰om
, c⁄° *
to
, *
¨g
)

85 c⁄° *
m«me
;

87 i‡(!
m
)

89 
m«me
 = 
	`OBJ_nid2 
(
	`EVP_MD_ty≥
(
m
));

91 i‡(
	`°rcmp
(
‰om
, 
m«me
))

94 i‡(
	`EVP_MD_Êags
(
m
Ë& 
EVP_MD_FLAG_PKEY_DIGEST
)

96 i‡(
	`°rchr
(
m«me
, ' '))

97 
m«me

	`EVP_MD_«me
(
m
);

98 
	`BIO_¥ötf
(
¨g
, "-%-14sÅo useÅhe %s message digestálgorithm\n",

99 
m«me
, mname);

100 
	}
}

102 
MAIN
(, **);

104 
	$MAIN
(
¨gc
, **
¨gv
)

106 
ENGINE
 *
e
 = 
NULL
;

107 *
buf
=
NULL
;

108 
i
,
îr
=1;

109 c⁄° 
EVP_MD
 *
md
=
NULL
,*
m
;

110 
BIO
 *
ö
=
NULL
,*
öp
;

111 
BIO
 *
bmd
=
NULL
;

112 
BIO
 *
out
 = 
NULL
;

113 
	#PROG_NAME_SIZE
 39

	)

114 
≤ame
[
PROG_NAME_SIZE
+1];

115 
£∑øt‹
=0;

116 
debug
=0;

117 
keyf‹m
=
FORMAT_PEM
;

118 c⁄° *
outfûe
 = 
NULL
, *
keyfûe
 = NULL;

119 c⁄° *
sigfûe
 = 
NULL
, *
øndfûe
 = NULL;

120 
out_bö
 = -1, 
w™t_pub
 = 0, 
do_vîify
 = 0;

121 
EVP_PKEY
 *
sigkey
 = 
NULL
;

122 *
sigbuf
 = 
NULL
;

123 
sigÀn
 = 0;

124 *
∑sßrgö
 = 
NULL
, *
∑ssö
 = NULL;

125 #i‚de‡
OPENSSL_NO_ENGINE


126 *
ígöe
=
NULL
;

128 *
hmac_key
=
NULL
;

129 *
mac_«me
=
NULL
;

130 
n⁄_fùs_Ælow
 = 0;

131 
	`STACK_OF
(
OPENSSL_STRING
Ë*
sig›ts
 = 
NULL
, *
mac›ts
 = NULL;

133 
	`≠ps_°¨tup
();

135 i‡((
buf
=(*)
	`OPENSSL_mÆloc
(
BUFSIZE
)Ë=
NULL
)

137 
	`BIO_¥ötf
(
bio_îr
,"out of memory\n");

138 
íd
;

140 i‡(
bio_îr
 =
NULL
)

141 i‡((
bio_îr
=
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

142 
	`BIO_£t_Â
(
bio_îr
,
°dîr
,
BIO_NOCLOSE
|
BIO_FP_TEXT
);

144 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

145 
íd
;

148 
	`¥ogøm_«me
(
¨gv
[0],
≤ame
,Öname);

150 
md
=
	`EVP_gë_dige°by«me
(
≤ame
);

152 
¨gc
--;

153 
¨gv
++;

154 
¨gc
 > 0)

156 i‡((*
¨gv
)[0] != '-') ;

157 i‡(
	`°rcmp
(*
¨gv
,"-c") == 0)

158 
£∑øt‹
=1;

159 i‡(
	`°rcmp
(*
¨gv
,"-r") == 0)

160 
£∑øt‹
=2;

161 i‡(
	`°rcmp
(*
¨gv
,"-rand") == 0)

163 i‡(--
¨gc
 < 1) ;

164 
øndfûe
=*(++
¨gv
);

166 i‡(
	`°rcmp
(*
¨gv
,"-out") == 0)

168 i‡(--
¨gc
 < 1) ;

169 
outfûe
=*(++
¨gv
);

171 i‡(
	`°rcmp
(*
¨gv
,"-sign") == 0)

173 i‡(--
¨gc
 < 1) ;

174 
keyfûe
=*(++
¨gv
);

176 i‡(!
	`°rcmp
(*
¨gv
,"-passin"))

178 i‡(--
¨gc
 < 1)

180 
∑sßrgö
=*++
¨gv
;

182 i‡(
	`°rcmp
(*
¨gv
,"-verify") == 0)

184 i‡(--
¨gc
 < 1) ;

185 
keyfûe
=*(++
¨gv
);

186 
w™t_pub
 = 1;

187 
do_vîify
 = 1;

189 i‡(
	`°rcmp
(*
¨gv
,"-prverify") == 0)

191 i‡(--
¨gc
 < 1) ;

192 
keyfûe
=*(++
¨gv
);

193 
do_vîify
 = 1;

195 i‡(
	`°rcmp
(*
¨gv
,"-signature") == 0)

197 i‡(--
¨gc
 < 1) ;

198 
sigfûe
=*(++
¨gv
);

200 i‡(
	`°rcmp
(*
¨gv
,"-keyform") == 0)

202 i‡(--
¨gc
 < 1) ;

203 
keyf‹m
=
	`°r2fmt
(*(++
¨gv
));

205 #i‚de‡
OPENSSL_NO_ENGINE


206 i‡(
	`°rcmp
(*
¨gv
,"-engine") == 0)

208 i‡(--
¨gc
 < 1) ;

209 
ígöe
*(++
¨gv
);

210 
e
 = 
	`£tup_ígöe
(
bio_îr
, 
ígöe
, 0);

213 i‡(
	`°rcmp
(*
¨gv
,"-hex") == 0)

214 
out_bö
 = 0;

215 i‡(
	`°rcmp
(*
¨gv
,"-binary") == 0)

216 
out_bö
 = 1;

217 i‡(
	`°rcmp
(*
¨gv
,"-d") == 0)

218 
debug
=1;

219 i‡(!
	`°rcmp
(*
¨gv
,"-fips-fingerprint"))

220 
hmac_key
 = "etaonrishdlcupfm";

221 i‡(
	`°rcmp
(*
¨gv
,"-non-fips-allow") == 0)

222 
n⁄_fùs_Ælow
=1;

223 i‡(!
	`°rcmp
(*
¨gv
,"-hmac"))

225 i‡(--
¨gc
 < 1)

227 
hmac_key
=*++
¨gv
;

229 i‡(!
	`°rcmp
(*
¨gv
,"-mac"))

231 i‡(--
¨gc
 < 1)

233 
mac_«me
=*++
¨gv
;

235 i‡(
	`°rcmp
(*
¨gv
,"-sigopt") == 0)

237 i‡(--
¨gc
 < 1)

239 i‡(!
sig›ts
)

240 
sig›ts
 = 
	`sk_OPENSSL_STRING_√w_nuŒ
();

241 i‡(!
sig›ts
 || !
	`sk_OPENSSL_STRING_push
(sig›ts, *(++
¨gv
)))

244 i‡(
	`°rcmp
(*
¨gv
,"-macopt") == 0)

246 i‡(--
¨gc
 < 1)

248 i‡(!
mac›ts
)

249 
mac›ts
 = 
	`sk_OPENSSL_STRING_√w_nuŒ
();

250 i‡(!
mac›ts
 || !
	`sk_OPENSSL_STRING_push
(mac›ts, *(++
¨gv
)))

253 i‡((
m
=
	`EVP_gë_dige°by«me
(&((*
¨gv
)[1]))Ë!
NULL
)

254 
md
=
m
;

257 
¨gc
--;

258 
¨gv
++;

262 if(
do_vîify
 && !
sigfûe
) {

263 
	`BIO_¥ötf
(
bio_îr
, "No signatureÅo verify: useÅhe -signature option\n");

264 
íd
;

267 i‡((
¨gc
 > 0Ë&& (
¨gv
[0][0] == '-'))

269 
	`BIO_¥ötf
(
bio_îr
,"unknow¿›ti⁄ '%s'\n",*
¨gv
);

270 
	`BIO_¥ötf
(
bio_îr
,"optionsáre\n");

271 
	`BIO_¥ötf
(
bio_îr
,"-cÅo outputÅhe digest with separating colons\n");

272 
	`BIO_¥ötf
(
bio_îr
,"-rÅo outputÅhe digest in coreutils format\n");

273 
	`BIO_¥ötf
(
bio_îr
,"-dÅo output debug info\n");

274 
	`BIO_¥ötf
(
bio_îr
,"-hex outputás hex dump\n");

275 
	`BIO_¥ötf
(
bio_îr
,"-binary output in binary form\n");

276 
	`BIO_¥ötf
(
bio_îr
,"-sign file sign digest usingÖrivate key in file\n");

277 
	`BIO_¥ötf
(
bio_îr
,"-verify file verifyá signature usingÖublic key in file\n");

278 
	`BIO_¥ötf
(
bio_îr
,"-prverify file verifyá signature usingÖrivate key in file\n");

279 
	`BIO_¥ötf
(
bio_îr
,"-keyformárg key file format (PEM or ENGINE)\n");

280 
	`BIO_¥ötf
(
bio_îr
,"-out filename outputÅo filenameÑatherÅhan stdout\n");

281 
	`BIO_¥ötf
(
bio_îr
,"-signature file signatureÅo verify\n");

282 
	`BIO_¥ötf
(
bio_îr
,"-sigoptÇm:v signatureÖarameter\n");

283 
	`BIO_¥ötf
(
bio_îr
,"-hmac key create hashed MAC with key\n");

284 
	`BIO_¥ötf
(
bio_îr
,"-macálgorithm create MAC (notÇeccessarily HMAC)\n");

285 
	`BIO_¥ötf
(
bio_îr
,"-macoptÇm:v MACálgorithmÖarameters or key\n");

286 #i‚de‡
OPENSSL_NO_ENGINE


287 
	`BIO_¥ötf
(
bio_îr
,"-engineÉ useÉngineÉ,Öossiblyá hardware device.\n");

290 
	`EVP_MD_do_Æl_s‹ãd
(
li°_md_‚
, 
bio_îr
);

291 
íd
;

294 
ö
=
	`BIO_√w
(
	`BIO_s_fûe
());

295 
bmd
=
	`BIO_√w
(
	`BIO_f_md
());

296 i‡(
debug
)

298 
	`BIO_£t_ˇŒback
(
ö
,
BIO_debug_ˇŒback
);

300 
	`BIO_£t_ˇŒback_¨g
(
ö
,(*)
bio_îr
);

303 if(!
	`≠p_∑sswd
(
bio_îr
, 
∑sßrgö
, 
NULL
, &
∑ssö
, NULL))

305 
	`BIO_¥ötf
(
bio_îr
, "Error gettingÖassword\n");

306 
íd
;

309 i‡((
ö
 =
NULL
Ë|| (
bmd
 == NULL))

311 
	`ERR_¥öt_îr‹s
(
bio_îr
);

312 
íd
;

315 if(
out_bö
 == -1) {

316 if(
keyfûe
)

317 
out_bö
 = 1;

319 
out_bö
 = 0;

322 if(
øndfûe
)

323 
	`≠p_RAND_lﬂd_fûe
(
øndfûe
, 
bio_îr
, 0);

325 if(
outfûe
) {

326 if(
out_bö
)

327 
out
 = 
	`BIO_√w_fûe
(
outfûe
, "wb");

328 
out
 = 
	`BIO_√w_fûe
(
outfûe
, "w");

330 
out
 = 
	`BIO_√w_Â
(
°dout
, 
BIO_NOCLOSE
);

331 #ifde‡
OPENSSL_SYS_VMS


333 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

334 
out
 = 
	`BIO_push
(
tmpbio
, out);

339 if(!
out
) {

340 
	`BIO_¥ötf
(
bio_îr
, "Error opening output file %s\n",

341 
outfûe
 ? outfile : "(stdout)");

342 
	`ERR_¥öt_îr‹s
(
bio_îr
);

343 
íd
;

345 i‡((!!
mac_«me
 + !!
keyfûe
 + !!
hmac_key
) > 1)

347 
	`BIO_¥ötf
(
bio_îr
, "MACánd Signing key cannot both be specified\n");

348 
íd
;

351 if(
keyfûe
)

353 i‡(
w™t_pub
)

354 
sigkey
 = 
	`lﬂd_pubkey
(
bio_îr
, 
keyfûe
, 
keyf‹m
, 0, 
NULL
,

355 
e
, "key file");

357 
sigkey
 = 
	`lﬂd_key
(
bio_îr
, 
keyfûe
, 
keyf‹m
, 0, 
∑ssö
,

358 
e
, "key file");

359 i‡(!
sigkey
)

363 
íd
;

367 i‡(
mac_«me
)

369 
EVP_PKEY_CTX
 *
mac_˘x
 = 
NULL
;

370 
r
 = 0;

371 i‡(!
	`öô_gí_°r
(
bio_îr
, &
mac_˘x
, 
mac_«me
,
e
, 0))

372 
mac_íd
;

373 i‡(
mac›ts
)

375 *
mac›t
;

376 
i
 = 0; i < 
	`sk_OPENSSL_STRING_num
(
mac›ts
); i++)

378 
mac›t
 = 
	`sk_OPENSSL_STRING_vÆue
(
mac›ts
, 
i
);

379 i‡(
	`pkey_˘æ_°rög
(
mac_˘x
, 
mac›t
) <= 0)

381 
	`BIO_¥ötf
(
bio_îr
,

383 
mac›t
);

384 
	`ERR_¥öt_îr‹s
(
bio_îr
);

385 
mac_íd
;

389 i‡(
	`EVP_PKEY_keygí
(
mac_˘x
, &
sigkey
) <= 0)

391 
	`BIO_puts
(
bio_îr
, "Error generating key\n");

392 
	`ERR_¥öt_îr‹s
(
bio_îr
);

393 
mac_íd
;

395 
r
 = 1;

396 
mac_íd
:

397 i‡(
mac_˘x
)

398 
	`EVP_PKEY_CTX_‰ì
(
mac_˘x
);

399 i‡(
r
 == 0)

400 
íd
;

403 i‡(
n⁄_fùs_Ælow
)

405 
EVP_MD_CTX
 *
md_˘x
;

406 
	`BIO_gë_md_˘x
(
bmd
,&
md_˘x
);

407 
	`EVP_MD_CTX_£t_Êags
(
md_˘x
, 
EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
);

410 i‡(
hmac_key
)

412 
sigkey
 = 
	`EVP_PKEY_√w_mac_key
(
EVP_PKEY_HMAC
, 
e
,

413 (*)
hmac_key
, -1);

414 i‡(!
sigkey
)

415 
íd
;

418 i‡(
sigkey
)

420 
EVP_MD_CTX
 *
m˘x
 = 
NULL
;

421 
EVP_PKEY_CTX
 *
p˘x
 = 
NULL
;

422 
r
;

423 i‡(!
	`BIO_gë_md_˘x
(
bmd
, &
m˘x
))

425 
	`BIO_¥ötf
(
bio_îr
, "Error getting context\n");

426 
	`ERR_¥öt_îr‹s
(
bio_îr
);

427 
íd
;

429 i‡(
do_vîify
)

430 
r
 = 
	`EVP_Dige°VîifyInô
(
m˘x
, &
p˘x
, 
md
, 
NULL
, 
sigkey
);

432 
r
 = 
	`EVP_Dige°SignInô
(
m˘x
, &
p˘x
, 
md
, 
NULL
, 
sigkey
);

433 i‡(!
r
)

435 
	`BIO_¥ötf
(
bio_îr
, "Error setting context\n");

436 
	`ERR_¥öt_îr‹s
(
bio_îr
);

437 
íd
;

439 i‡(
sig›ts
)

441 *
sig›t
;

442 
i
 = 0; i < 
	`sk_OPENSSL_STRING_num
(
sig›ts
); i++)

444 
sig›t
 = 
	`sk_OPENSSL_STRING_vÆue
(
sig›ts
, 
i
);

445 i‡(
	`pkey_˘æ_°rög
(
p˘x
, 
sig›t
) <= 0)

447 
	`BIO_¥ötf
(
bio_îr
,

449 
sig›t
);

450 
	`ERR_¥öt_îr‹s
(
bio_îr
);

451 
íd
;

459 i‡(
md
 =
NULL
)

460 
md
 = 
	`EVP_md5
();

461 i‡(!
	`BIO_£t_md
(
bmd
,
md
))

463 
	`BIO_¥ötf
(
bio_îr
, "Eº‹ sëtög dige° %s\n", 
≤ame
);

464 
	`ERR_¥öt_îr‹s
(
bio_îr
);

465 
íd
;

469 if(
sigfûe
 && 
sigkey
) {

470 
BIO
 *
sigbio
;

471 
sigbio
 = 
	`BIO_√w_fûe
(
sigfûe
, "rb");

472 
sigÀn
 = 
	`EVP_PKEY_size
(
sigkey
);

473 
sigbuf
 = 
	`OPENSSL_mÆloc
(
sigÀn
);

474 if(!
sigbio
) {

475 
	`BIO_¥ötf
(
bio_îr
, "Error opening signature file %s\n",

476 
sigfûe
);

477 
	`ERR_¥öt_îr‹s
(
bio_îr
);

478 
íd
;

480 
sigÀn
 = 
	`BIO_ªad
(
sigbio
, 
sigbuf
, siglen);

481 
	`BIO_‰ì
(
sigbio
);

482 if(
sigÀn
 <= 0) {

483 
	`BIO_¥ötf
(
bio_îr
, "ErrorÑeading signature file %s\n",

484 
sigfûe
);

485 
	`ERR_¥öt_îr‹s
(
bio_îr
);

486 
íd
;

489 
öp
=
	`BIO_push
(
bmd
,
ö
);

491 i‡(
md
 =
NULL
)

493 
EVP_MD_CTX
 *
t˘x
;

494 
	`BIO_gë_md_˘x
(
bmd
, &
t˘x
);

495 
md
 = 
	`EVP_MD_CTX_md
(
t˘x
);

498 i‡(
¨gc
 == 0)

500 
	`BIO_£t_Â
(
ö
,
°dö
,
BIO_NOCLOSE
);

501 
îr
=
	`do_Â
(
out
, 
buf
,
öp
,
£∑øt‹
, 
out_bö
, 
sigkey
, 
sigbuf
,

502 
sigÀn
,
NULL
,NULL,"°dö",
bmd
);

506 c⁄° *
md_«me
 = 
NULL
, *
sig_«me
 = NULL;

507 if(!
out_bö
)

509 i‡(
sigkey
)

511 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
;

512 
amëh
 = 
	`EVP_PKEY_gë0_a¢1
(
sigkey
);

513 i‡(
amëh
)

514 
	`EVP_PKEY_a¢1_gë0_öfo
(
NULL
, NULL,

515 
NULL
, NULL, &
sig_«me
, 
amëh
);

517 
md_«me
 = 
	`EVP_MD_«me
(
md
);

519 
îr
 = 0;

520 
i
=0; i<
¨gc
; i++)

522 
r
;

523 i‡(
	`BIO_ªad_fûíame
(
ö
,
¨gv
[
i
]) <= 0)

525 
	`≥º‹
(
¨gv
[
i
]);

526 
îr
++;

530 
r
=
	`do_Â
(
out
,
buf
,
öp
,
£∑øt‹
,
out_bö
,
sigkey
,
sigbuf
,

531 
sigÀn
,
sig_«me
,
md_«me
, 
¨gv
[
i
],
bmd
);

532 if(
r
)

533 
îr
=
r
;

534 ()
	`BIO_ª£t
(
bmd
);

537 
íd
:

538 i‡(
buf
 !
NULL
)

540 
	`OPENSSL_˛ón£
(
buf
,
BUFSIZE
);

541 
	`OPENSSL_‰ì
(
buf
);

543 i‡(
ö
 !
NULL
Ë
	`BIO_‰ì
(in);

544 i‡(
∑ssö
)

545 
	`OPENSSL_‰ì
(
∑ssö
);

546 
	`BIO_‰ì_Æl
(
out
);

547 
	`EVP_PKEY_‰ì
(
sigkey
);

548 i‡(
sig›ts
)

549 
	`sk_OPENSSL_STRING_‰ì
(
sig›ts
);

550 i‡(
mac›ts
)

551 
	`sk_OPENSSL_STRING_‰ì
(
mac›ts
);

552 if(
sigbuf
Ë
	`OPENSSL_‰ì
(sigbuf);

553 i‡(
bmd
 !
NULL
Ë
	`BIO_‰ì
(bmd);

554 
	`≠ps_shutdown
();

555 
	`OPENSSL_EXIT
(
îr
);

556 
	}
}

558 
	$do_Â
(
BIO
 *
out
, *
buf
, BIO *
bp
, 
£p
, 
böout
,

559 
EVP_PKEY
 *
key
, *
sigö
, 
sigÀn
,

560 c⁄° *
sig_«me
, c⁄° *
md_«me
,

561 c⁄° *
fûe
,
BIO
 *
bmd
)

563 
size_t
 
Àn
;

564 
i
;

568 
i
=
	`BIO_ªad
(
bp
,(*)
buf
,
BUFSIZE
);

569 if(
i
 < 0)

571 
	`BIO_¥ötf
(
bio_îr
, "Ród Eº‹ i¿%s\n",
fûe
);

572 
	`ERR_¥öt_îr‹s
(
bio_îr
);

575 i‡(
i
 == 0) ;

577 if(
sigö
)

579 
EVP_MD_CTX
 *
˘x
;

580 
	`BIO_gë_md_˘x
(
bp
, &
˘x
);

581 
i
 = 
	`EVP_Dige°VîifyFöÆ
(
˘x
, 
sigö
, ()
sigÀn
);

582 if(
i
 > 0)

583 
	`BIO_¥ötf
(
out
, "Verified OK\n");

584 if(
i
 == 0)

586 
	`BIO_¥ötf
(
out
, "Verification Failure\n");

591 
	`BIO_¥ötf
(
bio_îr
, "Error Verifying Data\n");

592 
	`ERR_¥öt_îr‹s
(
bio_îr
);

597 if(
key
)

599 
EVP_MD_CTX
 *
˘x
;

600 
	`BIO_gë_md_˘x
(
bp
, &
˘x
);

601 
Àn
 = 
BUFSIZE
;

602 if(!
	`EVP_Dige°SignFöÆ
(
˘x
, 
buf
, &
Àn
))

604 
	`BIO_¥ötf
(
bio_îr
, "Error Signing Data\n");

605 
	`ERR_¥öt_îr‹s
(
bio_îr
);

611 
Àn
=
	`BIO_gës
(
bp
,(*)
buf
,
BUFSIZE
);

612 i‡(()
Àn
 <0)

614 
	`ERR_¥öt_îr‹s
(
bio_îr
);

619 if(
böout
Ë
	`BIO_wrôe
(
out
, 
buf
, 
Àn
);

620 i‡(
£p
 == 2)

622 
i
=0; i<()
Àn
; i++)

623 
	`BIO_¥ötf
(
out
, "%02x",
buf
[
i
]);

624 
	`BIO_¥ötf
(
out
, " *%s\n", 
fûe
);

628 i‡(
sig_«me
)

629 
	`BIO_¥ötf
(
out
, "%s-%s(%s)", 
sig_«me
, 
md_«me
, 
fûe
);

630 i‡(
md_«me
)

631 
	`BIO_¥ötf
(
out
, "%s(%s)", 
md_«me
, 
fûe
);

633 
	`BIO_¥ötf
(
out
, "(%s)", 
fûe
);

634 
i
=0; i<()
Àn
; i++)

636 i‡(
£p
 && (
i
 != 0))

637 
	`BIO_¥ötf
(
out
, ":");

638 
	`BIO_¥ötf
(
out
, "%02x",
buf
[
i
]);

640 
	`BIO_¥ötf
(
out
, "\n");

643 
	}
}

	@dh.c

60 
	~<›ís¶/›ís¶c⁄f.h
>

61 #i‚de‡
OPENSSL_NO_DH


62 
	~<°dio.h
>

63 
	~<°dlib.h
>

64 
	~<time.h
>

65 
	~<°rög.h
>

66 
	~"≠ps.h
"

67 
	~<›ís¶/bio.h
>

68 
	~<›ís¶/îr.h
>

69 
	~<›ís¶/bn.h
>

70 
	~<›ís¶/dh.h
>

71 
	~<›ís¶/x509.h
>

72 
	~<›ís¶/≥m.h
>

74 #unde‡
PROG


75 
	#PROG
 
dh_maö


	)

87 
MAIN
(, **);

89 
	$MAIN
(
¨gc
, **
¨gv
)

91 
DH
 *
dh
=
NULL
;

92 
i
,
bad›s
=0,
ãxt
=0;

93 
BIO
 *
ö
=
NULL
,*
out
=NULL;

94 
öf‹m©
,
outf‹m©
,
check
=0,
noout
=0,
C
=0,
ªt
=1;

95 *
öfûe
,*
outfûe
,*
¥og
;

96 #i‚de‡
OPENSSL_NO_ENGINE


97 *
ígöe
;

100 
	`≠ps_°¨tup
();

102 i‡(
bio_îr
 =
NULL
)

103 i‡((
bio_îr
=
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

104 
	`BIO_£t_Â
(
bio_îr
,
°dîr
,
BIO_NOCLOSE
|
BIO_FP_TEXT
);

106 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

107 
íd
;

109 #i‚de‡
OPENSSL_NO_ENGINE


110 
ígöe
=
NULL
;

112 
öfûe
=
NULL
;

113 
outfûe
=
NULL
;

114 
öf‹m©
=
FORMAT_PEM
;

115 
outf‹m©
=
FORMAT_PEM
;

117 
¥og
=
¨gv
[0];

118 
¨gc
--;

119 
¨gv
++;

120 
¨gc
 >= 1)

122 i‡(
	`°rcmp
(*
¨gv
,"-inform") == 0)

124 i‡(--
¨gc
 < 1Ë
bad
;

125 
öf‹m©
=
	`°r2fmt
(*(++
¨gv
));

127 i‡(
	`°rcmp
(*
¨gv
,"-outform") == 0)

129 i‡(--
¨gc
 < 1Ë
bad
;

130 
outf‹m©
=
	`°r2fmt
(*(++
¨gv
));

132 i‡(
	`°rcmp
(*
¨gv
,"-in") == 0)

134 i‡(--
¨gc
 < 1Ë
bad
;

135 
öfûe
*(++
¨gv
);

137 i‡(
	`°rcmp
(*
¨gv
,"-out") == 0)

139 i‡(--
¨gc
 < 1Ë
bad
;

140 
outfûe
*(++
¨gv
);

142 #i‚de‡
OPENSSL_NO_ENGINE


143 i‡(
	`°rcmp
(*
¨gv
,"-engine") == 0)

145 i‡(--
¨gc
 < 1Ë
bad
;

146 
ígöe
*(++
¨gv
);

149 i‡(
	`°rcmp
(*
¨gv
,"-check") == 0)

150 
check
=1;

151 i‡(
	`°rcmp
(*
¨gv
,"-text") == 0)

152 
ãxt
=1;

153 i‡(
	`°rcmp
(*
¨gv
,"-C") == 0)

154 
C
=1;

155 i‡(
	`°rcmp
(*
¨gv
,"-noout") == 0)

156 
noout
=1;

159 
	`BIO_¥ötf
(
bio_îr
,"unknow¿›ti⁄ %s\n",*
¨gv
);

160 
bad›s
=1;

163 
¨gc
--;

164 
¨gv
++;

167 i‡(
bad›s
)

169 
bad
:

170 
	`BIO_¥ötf
(
bio_îr
,"%†[›ti⁄s] <öfûê>outfûe\n",
¥og
);

171 
	`BIO_¥ötf
(
bio_îr
,"where optionsáre\n");

172 
	`BIO_¥ötf
(
bio_îr
," -informárg input format - one of DER PEM\n");

173 
	`BIO_¥ötf
(
bio_îr
," -outformárg output format - one of DER PEM\n");

174 
	`BIO_¥ötf
(
bio_îr
," -inárg input file\n");

175 
	`BIO_¥ötf
(
bio_îr
," -outárg output file\n");

176 
	`BIO_¥ötf
(
bio_îr
," -check checkÅhe DHÖarameters\n");

177 
	`BIO_¥ötf
(
bio_îr
," -textÖrintáÅext form ofÅhe DHÖarameters\n");

178 
	`BIO_¥ötf
(
bio_îr
," -C Output C code\n");

179 
	`BIO_¥ötf
(
bio_îr
," -nooutÇo output\n");

180 #i‚de‡
OPENSSL_NO_ENGINE


181 
	`BIO_¥ötf
(
bio_îr
," -engineÉ useÉngineÉ,Öossiblyá hardware device.\n");

183 
íd
;

186 
	`ERR_lﬂd_¸y±o_°rögs
();

188 #i‚de‡
OPENSSL_NO_ENGINE


189 
	`£tup_ígöe
(
bio_îr
, 
ígöe
, 0);

192 
ö
=
	`BIO_√w
(
	`BIO_s_fûe
());

193 
out
=
	`BIO_√w
(
	`BIO_s_fûe
());

194 i‡((
ö
 =
NULL
Ë|| (
out
 == NULL))

196 
	`ERR_¥öt_îr‹s
(
bio_îr
);

197 
íd
;

200 i‡(
öfûe
 =
NULL
)

201 
	`BIO_£t_Â
(
ö
,
°dö
,
BIO_NOCLOSE
);

204 i‡(
	`BIO_ªad_fûíame
(
ö
,
öfûe
) <= 0)

206 
	`≥º‹
(
öfûe
);

207 
íd
;

210 i‡(
outfûe
 =
NULL
)

212 
	`BIO_£t_Â
(
out
,
°dout
,
BIO_NOCLOSE
);

213 #ifde‡
OPENSSL_SYS_VMS


215 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

216 
out
 = 
	`BIO_push
(
tmpbio
, out);

222 i‡(
	`BIO_wrôe_fûíame
(
out
,
outfûe
) <= 0)

224 
	`≥º‹
(
outfûe
);

225 
íd
;

229 i‡(
öf‹m©
 =
FORMAT_ASN1
)

230 
dh
=
	`d2i_DH∑øms_bio
(
ö
,
NULL
);

231 i‡(
öf‹m©
 =
FORMAT_PEM
)

232 
dh
=
	`PEM_ªad_bio_DH∑øms
(
ö
,
NULL
,NULL,NULL);

235 
	`BIO_¥ötf
(
bio_îr
,"bad input format specified\n");

236 
íd
;

238 i‡(
dh
 =
NULL
)

240 
	`BIO_¥ötf
(
bio_îr
,"unableÅoÜoad DHÖarameters\n");

241 
	`ERR_¥öt_îr‹s
(
bio_îr
);

242 
íd
;

247 i‡(
ãxt
)

249 
	`DH∑øms_¥öt
(
out
,
dh
);

250 #ifde‡
undef


251 
	`¥ötf
("p=");

252 
	`BN_¥öt
(
°dout
,
dh
->
p
);

253 
	`¥ötf
("\ng=");

254 
	`BN_¥öt
(
°dout
,
dh
->
g
);

255 
	`¥ötf
("\n");

256 i‡(
dh
->
Àngth
 != 0)

257 
	`¥ötf
("ªcommídedÖriv©êÀngth=%ld\n",
dh
->
Àngth
);

261 i‡(
check
)

263 i‡(!
	`DH_check
(
dh
,&
i
))

265 
	`ERR_¥öt_îr‹s
(
bio_îr
);

266 
íd
;

268 i‡(
i
 & 
DH_CHECK_P_NOT_PRIME
)

269 
	`¥ötf
("p value isÇotÖrime\n");

270 i‡(
i
 & 
DH_CHECK_P_NOT_SAFE_PRIME
)

271 
	`¥ötf
("p value isÇotá safeÖrime\n");

272 i‡(
i
 & 
DH_UNABLE_TO_CHECK_GENERATOR
)

273 
	`¥ötf
("unableÅo checkÅhe generator value\n");

274 i‡(
i
 & 
DH_NOT_SUITABLE_GENERATOR
)

275 
	`¥ötf
("the g value isÇotá generator\n");

276 i‡(
i
 == 0)

277 
	`¥ötf
("DHÖarametersáppearÅo be ok.\n");

279 i‡(
C
)

281 *
d©a
;

282 
Àn
,
l
,
bôs
;

284 
Àn
=
	`BN_num_byãs
(
dh
->
p
);

285 
bôs
=
	`BN_num_bôs
(
dh
->
p
);

286 
d©a
=(*)
	`OPENSSL_mÆloc
(
Àn
);

287 i‡(
d©a
 =
NULL
)

289 
	`≥º‹
("OPENSSL_malloc");

290 
íd
;

292 
l
=
	`BN_bn2bö
(
dh
->
p
,
d©a
);

293 
	`¥ötf
("°©i¯unsig√d ch¨ dh%d_p[]={",
bôs
);

294 
i
=0; i<
l
; i++)

296 i‡((
i
%12Ë=0Ë
	`¥ötf
("\n\t");

297 
	`¥ötf
("0x%02X,",
d©a
[
i
]);

299 
	`¥ötf
("\n\t};\n");

301 
l
=
	`BN_bn2bö
(
dh
->
g
,
d©a
);

302 
	`¥ötf
("°©i¯unsig√d ch¨ dh%d_g[]={",
bôs
);

303 
i
=0; i<
l
; i++)

305 i‡((
i
%12Ë=0Ë
	`¥ötf
("\n\t");

306 
	`¥ötf
("0x%02X,",
d©a
[
i
]);

308 
	`¥ötf
("\n\t};\n\n");

310 
	`¥ötf
("DH *gë_dh%d()\n\t{\n",
bôs
);

311 
	`¥ötf
("\tDH *dh;\n\n");

312 
	`¥ötf
("\tif ((dh=DH_new()) == NULL)Ñeturn(NULL);\n");

313 
	`¥ötf
("\tdh->p=BN_bin2bn(dh%d_p,sizeof(dh%d_p),NULL);\n",

314 
bôs
,bits);

315 
	`¥ötf
("\tdh->g=BN_bin2bn(dh%d_g,sizeof(dh%d_g),NULL);\n",

316 
bôs
,bits);

317 
	`¥ötf
("\tif ((dh->p == NULL) || (dh->g == NULL))\n");

318 
	`¥ötf
("\t\treturn(NULL);\n");

319 
	`¥ötf
("\treturn(dh);\n\t}\n");

320 
	`OPENSSL_‰ì
(
d©a
);

324 i‡(!
noout
)

326 i‡(
outf‹m©
 =
FORMAT_ASN1
)

327 
i
=
	`i2d_DH∑øms_bio
(
out
,
dh
);

328 i‡(
outf‹m©
 =
FORMAT_PEM
)

329 
i
=
	`PEM_wrôe_bio_DH∑øms
(
out
,
dh
);

331 
	`BIO_¥ötf
(
bio_îr
,"bad output format specified for outfile\n");

332 
íd
;

334 i‡(!
i
)

336 
	`BIO_¥ötf
(
bio_îr
,"unableÅo write DHÖarameters\n");

337 
	`ERR_¥öt_îr‹s
(
bio_îr
);

338 
íd
;

341 
ªt
=0;

342 
íd
:

343 i‡(
ö
 !
NULL
Ë
	`BIO_‰ì
(in);

344 i‡(
out
 !
NULL
Ë
	`BIO_‰ì_Æl
(out);

345 i‡(
dh
 !
NULL
Ë
	`DH_‰ì
(dh);

346 
	`≠ps_shutdown
();

347 
	`OPENSSL_EXIT
(
ªt
);

348 
	}
}

351 #i‡
PEDANTIC


352 *
	gdummy
=&
dummy
;

	@dhparam.c

112 
	~<›ís¶/›ís¶c⁄f.h
>

113 #i‚de‡
OPENSSL_NO_DH


114 
	~<°dio.h
>

115 
	~<°dlib.h
>

116 
	~<time.h
>

117 
	~<°rög.h
>

118 
	~"≠ps.h
"

119 
	~<›ís¶/bio.h
>

120 
	~<›ís¶/îr.h
>

121 
	~<›ís¶/bn.h
>

122 
	~<›ís¶/dh.h
>

123 
	~<›ís¶/x509.h
>

124 
	~<›ís¶/≥m.h
>

126 #i‚de‡
OPENSSL_NO_DSA


127 
	~<›ís¶/dß.h
>

130 #unde‡
PROG


131 
	#PROG
 
dh∑øm_maö


	)

133 
	#DEFBITS
 512

	)

146 
MS_CALLBACK
 
dh_cb
(
p
, 
n
, 
BN_GENCB
 *
cb
);

148 
MAIN
(, **);

150 
	$MAIN
(
¨gc
, **
¨gv
)

152 
DH
 *
dh
=
NULL
;

153 
i
,
bad›s
=0,
ãxt
=0;

154 #i‚de‡
OPENSSL_NO_DSA


155 
dß∑øm
=0;

157 
BIO
 *
ö
=
NULL
,*
out
=NULL;

158 
öf‹m©
,
outf‹m©
,
check
=0,
noout
=0,
C
=0,
ªt
=1;

159 *
öfûe
,*
outfûe
,*
¥og
;

160 *
öønd
=
NULL
;

161 #i‚de‡
OPENSSL_NO_ENGINE


162 *
ígöe
=
NULL
;

164 
num
 = 0, 
g
 = 0;

166 
	`≠ps_°¨tup
();

168 i‡(
bio_îr
 =
NULL
)

169 i‡((
bio_îr
=
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

170 
	`BIO_£t_Â
(
bio_îr
,
°dîr
,
BIO_NOCLOSE
|
BIO_FP_TEXT
);

172 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

173 
íd
;

175 
öfûe
=
NULL
;

176 
outfûe
=
NULL
;

177 
öf‹m©
=
FORMAT_PEM
;

178 
outf‹m©
=
FORMAT_PEM
;

180 
¥og
=
¨gv
[0];

181 
¨gc
--;

182 
¨gv
++;

183 
¨gc
 >= 1)

185 i‡(
	`°rcmp
(*
¨gv
,"-inform") == 0)

187 i‡(--
¨gc
 < 1Ë
bad
;

188 
öf‹m©
=
	`°r2fmt
(*(++
¨gv
));

190 i‡(
	`°rcmp
(*
¨gv
,"-outform") == 0)

192 i‡(--
¨gc
 < 1Ë
bad
;

193 
outf‹m©
=
	`°r2fmt
(*(++
¨gv
));

195 i‡(
	`°rcmp
(*
¨gv
,"-in") == 0)

197 i‡(--
¨gc
 < 1Ë
bad
;

198 
öfûe
*(++
¨gv
);

200 i‡(
	`°rcmp
(*
¨gv
,"-out") == 0)

202 i‡(--
¨gc
 < 1Ë
bad
;

203 
outfûe
*(++
¨gv
);

205 #i‚de‡
OPENSSL_NO_ENGINE


206 i‡(
	`°rcmp
(*
¨gv
,"-engine") == 0)

208 i‡(--
¨gc
 < 1Ë
bad
;

209 
ígöe
*(++
¨gv
);

212 i‡(
	`°rcmp
(*
¨gv
,"-check") == 0)

213 
check
=1;

214 i‡(
	`°rcmp
(*
¨gv
,"-text") == 0)

215 
ãxt
=1;

216 #i‚de‡
OPENSSL_NO_DSA


217 i‡(
	`°rcmp
(*
¨gv
,"-dsaparam") == 0)

218 
dß∑øm
=1;

220 i‡(
	`°rcmp
(*
¨gv
,"-C") == 0)

221 
C
=1;

222 i‡(
	`°rcmp
(*
¨gv
,"-noout") == 0)

223 
noout
=1;

224 i‡(
	`°rcmp
(*
¨gv
,"-2") == 0)

225 
g
=2;

226 i‡(
	`°rcmp
(*
¨gv
,"-5") == 0)

227 
g
=5;

228 i‡(
	`°rcmp
(*
¨gv
,"-rand") == 0)

230 i‡(--
¨gc
 < 1Ë
bad
;

231 
öønd
*(++
¨gv
);

233 i‡(((
	`ssˇnf
(*
¨gv
,"%d",&
num
) == 0) || (num <= 0)))

234 
bad
;

235 
¨gv
++;

236 
¨gc
--;

239 i‡(
bad›s
)

241 
bad
:

242 
	`BIO_¥ötf
(
bio_îr
,"%†[›ti⁄s] [numbôs]\n",
¥og
);

243 
	`BIO_¥ötf
(
bio_îr
,"where optionsáre\n");

244 
	`BIO_¥ötf
(
bio_îr
," -informárg input format - one of DER PEM\n");

245 
	`BIO_¥ötf
(
bio_îr
," -outformárg output format - one of DER PEM\n");

246 
	`BIO_¥ötf
(
bio_îr
," -inárg input file\n");

247 
	`BIO_¥ötf
(
bio_îr
," -outárg output file\n");

248 #i‚de‡
OPENSSL_NO_DSA


249 
	`BIO_¥ötf
(
bio_îr
," -dsaparamÑead or generate DSAÖarameters, convertÅo DH\n");

251 
	`BIO_¥ötf
(
bio_îr
," -check checkÅhe DHÖarameters\n");

252 
	`BIO_¥ötf
(
bio_îr
," -textÖrintáÅext form ofÅhe DHÖarameters\n");

253 
	`BIO_¥ötf
(
bio_îr
," -C Output C code\n");

254 
	`BIO_¥ötf
(
bio_îr
," -2 generateÖarameters using 2ásÅhe generator value\n");

255 
	`BIO_¥ötf
(
bio_îr
," -5 generateÖarameters using 5ásÅhe generator value\n");

256 
	`BIO_¥ötf
(
bio_îr
,"ÇumbitsÇumber of bits inÅo generate (default 512)\n");

257 #i‚de‡
OPENSSL_NO_ENGINE


258 
	`BIO_¥ötf
(
bio_îr
," -engineÉ useÉngineÉ,Öossiblyá hardware device.\n");

260 
	`BIO_¥ötf
(
bio_îr
," -ønd fûe%cfûe%c...\n", 
LIST_SEPARATOR_CHAR
, LIST_SEPARATOR_CHAR);

261 
	`BIO_¥ötf
(
bio_îr
," -ÜoadÅhe file (orÅhe files inÅhe directory) into\n");

262 
	`BIO_¥ötf
(
bio_îr
,"ÅheÑandomÇumber generator\n");

263 
	`BIO_¥ötf
(
bio_îr
," -nooutÇo output\n");

264 
íd
;

267 
	`ERR_lﬂd_¸y±o_°rögs
();

269 #i‚de‡
OPENSSL_NO_ENGINE


270 
	`£tup_ígöe
(
bio_îr
, 
ígöe
, 0);

273 i‡(
g
 && !
num
)

274 
num
 = 
DEFBITS
;

276 #i‚de‡
OPENSSL_NO_DSA


277 i‡(
dß∑øm
)

279 i‡(
g
)

281 
	`BIO_¥ötf
(
bio_îr
, "generator mayÇot be chosen for DSAÖarameters\n");

282 
íd
;

289 i‡(
num
 && !
g
)

290 
g
 = 2;

293 if(
num
) {

295 
BN_GENCB
 
cb
;

296 
	`BN_GENCB_£t
(&
cb
, 
dh_cb
, 
bio_îr
);

297 i‡(!
	`≠p_RAND_lﬂd_fûe
(
NULL
, 
bio_îr
, 1Ë&& 
öønd
 == NULL)

299 
	`BIO_¥ötf
(
bio_îr
,"warning,Çot muchÉxtraÑandom data, consider usingÅhe -rand option\n");

301 i‡(
öønd
 !
NULL
)

302 
	`BIO_¥ötf
(
bio_îr
,"%ld semi-random bytesÜoaded\n",

303 
	`≠p_RAND_lﬂd_fûes
(
öønd
));

305 #i‚de‡
OPENSSL_NO_DSA


306 i‡(
dß∑øm
)

308 
DSA
 *
dß
 = 
	`DSA_√w
();

310 
	`BIO_¥ötf
(
bio_îr
,"Gíî©ög DSAÖ¨amëîs, %d bôÜ⁄gÖrime\n",
num
);

311 if(!
dß
 || !
	`DSA_gíî©e_∑ømëîs_ex
(dß, 
num
,

312 
NULL
, 0, NULL, NULL, &
cb
))

314 if(
dß
Ë
	`DSA_‰ì
(dsa);

315 
	`ERR_¥öt_îr‹s
(
bio_îr
);

316 
íd
;

319 
dh
 = 
	`DSA_dup_DH
(
dß
);

320 
	`DSA_‰ì
(
dß
);

321 i‡(
dh
 =
NULL
)

323 
	`ERR_¥öt_îr‹s
(
bio_îr
);

324 
íd
;

330 
dh
 = 
	`DH_√w
();

331 
	`BIO_¥ötf
(
bio_îr
,"Gíî©ög DHÖ¨amëîs, %d bôÜ⁄g sa„Örime, gíî©‹ %d\n",
num
,
g
);

332 
	`BIO_¥ötf
(
bio_îr
,"This is goingÅoÅakeáÜongÅime\n");

333 if(!
dh
 || !
	`DH_gíî©e_∑ømëîs_ex
(dh, 
num
, 
g
, &
cb
))

335 
	`ERR_¥öt_îr‹s
(
bio_îr
);

336 
íd
;

340 
	`≠p_RAND_wrôe_fûe
(
NULL
, 
bio_îr
);

343 
ö
=
	`BIO_√w
(
	`BIO_s_fûe
());

344 i‡(
ö
 =
NULL
)

346 
	`ERR_¥öt_îr‹s
(
bio_îr
);

347 
íd
;

349 i‡(
öfûe
 =
NULL
)

350 
	`BIO_£t_Â
(
ö
,
°dö
,
BIO_NOCLOSE
);

353 i‡(
	`BIO_ªad_fûíame
(
ö
,
öfûe
) <= 0)

355 
	`≥º‹
(
öfûe
);

356 
íd
;

360 i‡(
öf‹m©
 !
FORMAT_ASN1
 && inf‹m© !
FORMAT_PEM
)

362 
	`BIO_¥ötf
(
bio_îr
,"bad input format specified\n");

363 
íd
;

366 #i‚de‡
OPENSSL_NO_DSA


367 i‡(
dß∑øm
)

369 
DSA
 *
dß
;

371 i‡(
öf‹m©
 =
FORMAT_ASN1
)

372 
dß
=
	`d2i_DSA∑øms_bio
(
ö
,
NULL
);

374 
dß
=
	`PEM_ªad_bio_DSA∑øms
(
ö
,
NULL
,NULL,NULL);

376 i‡(
dß
 =
NULL
)

378 
	`BIO_¥ötf
(
bio_îr
,"unableÅoÜoad DSAÖarameters\n");

379 
	`ERR_¥öt_îr‹s
(
bio_îr
);

380 
íd
;

383 
dh
 = 
	`DSA_dup_DH
(
dß
);

384 
	`DSA_‰ì
(
dß
);

385 i‡(
dh
 =
NULL
)

387 
	`ERR_¥öt_îr‹s
(
bio_îr
);

388 
íd
;

394 i‡(
öf‹m©
 =
FORMAT_ASN1
)

395 
dh
=
	`d2i_DH∑øms_bio
(
ö
,
NULL
);

397 
dh
=
	`PEM_ªad_bio_DH∑øms
(
ö
,
NULL
,NULL,NULL);

399 i‡(
dh
 =
NULL
)

401 
	`BIO_¥ötf
(
bio_îr
,"unableÅoÜoad DHÖarameters\n");

402 
	`ERR_¥öt_îr‹s
(
bio_îr
);

403 
íd
;

410 
out
=
	`BIO_√w
(
	`BIO_s_fûe
());

411 i‡(
out
 =
NULL
)

413 
	`ERR_¥öt_îr‹s
(
bio_îr
);

414 
íd
;

416 i‡(
outfûe
 =
NULL
)

418 
	`BIO_£t_Â
(
out
,
°dout
,
BIO_NOCLOSE
);

419 #ifde‡
OPENSSL_SYS_VMS


421 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

422 
out
 = 
	`BIO_push
(
tmpbio
, out);

428 i‡(
	`BIO_wrôe_fûíame
(
out
,
outfûe
) <= 0)

430 
	`≥º‹
(
outfûe
);

431 
íd
;

436 i‡(
ãxt
)

438 
	`DH∑øms_¥öt
(
out
,
dh
);

441 i‡(
check
)

443 i‡(!
	`DH_check
(
dh
,&
i
))

445 
	`ERR_¥öt_îr‹s
(
bio_îr
);

446 
íd
;

448 i‡(
i
 & 
DH_CHECK_P_NOT_PRIME
)

449 
	`¥ötf
("p value isÇotÖrime\n");

450 i‡(
i
 & 
DH_CHECK_P_NOT_SAFE_PRIME
)

451 
	`¥ötf
("p value isÇotá safeÖrime\n");

452 i‡(
i
 & 
DH_UNABLE_TO_CHECK_GENERATOR
)

453 
	`¥ötf
("unableÅo checkÅhe generator value\n");

454 i‡(
i
 & 
DH_NOT_SUITABLE_GENERATOR
)

455 
	`¥ötf
("the g value isÇotá generator\n");

456 i‡(
i
 == 0)

457 
	`¥ötf
("DHÖarametersáppearÅo be ok.\n");

459 i‡(
C
)

461 *
d©a
;

462 
Àn
,
l
,
bôs
;

464 
Àn
=
	`BN_num_byãs
(
dh
->
p
);

465 
bôs
=
	`BN_num_bôs
(
dh
->
p
);

466 
d©a
=(*)
	`OPENSSL_mÆloc
(
Àn
);

467 i‡(
d©a
 =
NULL
)

469 
	`≥º‹
("OPENSSL_malloc");

470 
íd
;

472 
	`¥ötf
("#ifndef HEADER_DH_H\n"

475 
	`¥ötf
("DH *gë_dh%d()\n\t{\n",
bôs
);

477 
l
=
	`BN_bn2bö
(
dh
->
p
,
d©a
);

478 
	`¥ötf
("\t°©i¯unsig√d ch¨ dh%d_p[]={",
bôs
);

479 
i
=0; i<
l
; i++)

481 i‡((
i
%12Ë=0Ë
	`¥ötf
("\n\t\t");

482 
	`¥ötf
("0x%02X,",
d©a
[
i
]);

484 
	`¥ötf
("\n\t\t};\n");

486 
l
=
	`BN_bn2bö
(
dh
->
g
,
d©a
);

487 
	`¥ötf
("\t°©i¯unsig√d ch¨ dh%d_g[]={",
bôs
);

488 
i
=0; i<
l
; i++)

490 i‡((
i
%12Ë=0Ë
	`¥ötf
("\n\t\t");

491 
	`¥ötf
("0x%02X,",
d©a
[
i
]);

493 
	`¥ötf
("\n\t\t};\n");

495 
	`¥ötf
("\tDH *dh;\n\n");

496 
	`¥ötf
("\tif ((dh=DH_new()) == NULL)Ñeturn(NULL);\n");

497 
	`¥ötf
("\tdh->p=BN_bin2bn(dh%d_p,sizeof(dh%d_p),NULL);\n",

498 
bôs
,bits);

499 
	`¥ötf
("\tdh->g=BN_bin2bn(dh%d_g,sizeof(dh%d_g),NULL);\n",

500 
bôs
,bits);

501 
	`¥ötf
("\tif ((dh->p == NULL) || (dh->g == NULL))\n");

502 
	`¥ötf
("\t\t{ DH_free(dh);Ñeturn(NULL); }\n");

503 i‡(
dh
->
Àngth
)

504 
	`¥ötf
("\tdh->Àngth = %ld;\n", 
dh
->
Àngth
);

505 
	`¥ötf
("\treturn(dh);\n\t}\n");

506 
	`OPENSSL_‰ì
(
d©a
);

510 i‡(!
noout
)

512 i‡(
outf‹m©
 =
FORMAT_ASN1
)

513 
i
=
	`i2d_DH∑øms_bio
(
out
,
dh
);

514 i‡(
outf‹m©
 =
FORMAT_PEM
)

515 
i
=
	`PEM_wrôe_bio_DH∑øms
(
out
,
dh
);

517 
	`BIO_¥ötf
(
bio_îr
,"bad output format specified for outfile\n");

518 
íd
;

520 i‡(!
i
)

522 
	`BIO_¥ötf
(
bio_îr
,"unableÅo write DHÖarameters\n");

523 
	`ERR_¥öt_îr‹s
(
bio_îr
);

524 
íd
;

527 
ªt
=0;

528 
íd
:

529 i‡(
ö
 !
NULL
Ë
	`BIO_‰ì
(in);

530 i‡(
out
 !
NULL
Ë
	`BIO_‰ì_Æl
(out);

531 i‡(
dh
 !
NULL
Ë
	`DH_‰ì
(dh);

532 
	`≠ps_shutdown
();

533 
	`OPENSSL_EXIT
(
ªt
);

534 
	}
}

537 
MS_CALLBACK
 
	$dh_cb
(
p
, 
n
, 
BN_GENCB
 *
cb
)

539 
c
='*';

541 i‡(
p
 =0Ë
c
='.';

542 i‡(
p
 =1Ë
c
='+';

543 i‡(
p
 =2Ë
c
='*';

544 i‡(
p
 =3Ë
c
='\n';

545 
	`BIO_wrôe
(
cb
->
¨g
,&
c
,1);

546 ()
	`BIO_Êush
(
cb
->
¨g
);

547 #ifde‡
LINT


548 
p
=
n
;

551 
	}
}

555 #i‡
PEDANTIC


556 *
	gdummy
=&
dummy
;

	@dsa.c

59 
	~<›ís¶/›ís¶c⁄f.h
>

60 #i‚de‡
OPENSSL_NO_DSA


61 
	~<°dio.h
>

62 
	~<°dlib.h
>

63 
	~<°rög.h
>

64 
	~<time.h
>

65 
	~"≠ps.h
"

66 
	~<›ís¶/bio.h
>

67 
	~<›ís¶/îr.h
>

68 
	~<›ís¶/dß.h
>

69 
	~<›ís¶/evp.h
>

70 
	~<›ís¶/x509.h
>

71 
	~<›ís¶/≥m.h
>

72 
	~<›ís¶/bn.h
>

74 #unde‡
PROG


75 
	#PROG
 
dß_maö


	)

95 
MAIN
(, **);

97 
	$MAIN
(
¨gc
, **
¨gv
)

99 
ENGINE
 *
e
 = 
NULL
;

100 
ªt
=1;

101 
DSA
 *
dß
=
NULL
;

102 
i
,
bad›s
=0;

103 c⁄° 
EVP_CIPHER
 *
íc
=
NULL
;

104 
BIO
 *
ö
=
NULL
,*
out
=NULL;

105 
öf‹m©
,
outf‹m©
,
ãxt
=0,
noout
=0;

106 
pubö
 = 0, 
pubout
 = 0;

107 *
öfûe
,*
outfûe
,*
¥og
;

108 #i‚de‡
OPENSSL_NO_ENGINE


109 *
ígöe
;

111 *
∑sßrgö
 = 
NULL
, *
∑sßrgout
 = NULL;

112 *
∑ssö
 = 
NULL
, *
∑ssout
 = NULL;

113 
modulus
=0;

115 
pvk_í¸
 = 2;

117 
	`≠ps_°¨tup
();

119 i‡(
bio_îr
 =
NULL
)

120 i‡((
bio_îr
=
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

121 
	`BIO_£t_Â
(
bio_îr
,
°dîr
,
BIO_NOCLOSE
|
BIO_FP_TEXT
);

123 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

124 
íd
;

126 #i‚de‡
OPENSSL_NO_ENGINE


127 
ígöe
=
NULL
;

129 
öfûe
=
NULL
;

130 
outfûe
=
NULL
;

131 
öf‹m©
=
FORMAT_PEM
;

132 
outf‹m©
=
FORMAT_PEM
;

134 
¥og
=
¨gv
[0];

135 
¨gc
--;

136 
¨gv
++;

137 
¨gc
 >= 1)

139 i‡(
	`°rcmp
(*
¨gv
,"-inform") == 0)

141 i‡(--
¨gc
 < 1Ë
bad
;

142 
öf‹m©
=
	`°r2fmt
(*(++
¨gv
));

144 i‡(
	`°rcmp
(*
¨gv
,"-outform") == 0)

146 i‡(--
¨gc
 < 1Ë
bad
;

147 
outf‹m©
=
	`°r2fmt
(*(++
¨gv
));

149 i‡(
	`°rcmp
(*
¨gv
,"-in") == 0)

151 i‡(--
¨gc
 < 1Ë
bad
;

152 
öfûe
*(++
¨gv
);

154 i‡(
	`°rcmp
(*
¨gv
,"-out") == 0)

156 i‡(--
¨gc
 < 1Ë
bad
;

157 
outfûe
*(++
¨gv
);

159 i‡(
	`°rcmp
(*
¨gv
,"-passin") == 0)

161 i‡(--
¨gc
 < 1Ë
bad
;

162 
∑sßrgö
*(++
¨gv
);

164 i‡(
	`°rcmp
(*
¨gv
,"-passout") == 0)

166 i‡(--
¨gc
 < 1Ë
bad
;

167 
∑sßrgout
*(++
¨gv
);

169 #i‚de‡
OPENSSL_NO_ENGINE


170 i‡(
	`°rcmp
(*
¨gv
,"-engine") == 0)

172 i‡(--
¨gc
 < 1Ë
bad
;

173 
ígöe
*(++
¨gv
);

176 i‡(
	`°rcmp
(*
¨gv
,"-pvk-strong") == 0)

177 
pvk_í¸
=2;

178 i‡(
	`°rcmp
(*
¨gv
,"-pvk-weak") == 0)

179 
pvk_í¸
=1;

180 i‡(
	`°rcmp
(*
¨gv
,"-pvk-none") == 0)

181 
pvk_í¸
=0;

182 i‡(
	`°rcmp
(*
¨gv
,"-noout") == 0)

183 
noout
=1;

184 i‡(
	`°rcmp
(*
¨gv
,"-text") == 0)

185 
ãxt
=1;

186 i‡(
	`°rcmp
(*
¨gv
,"-modulus") == 0)

187 
modulus
=1;

188 i‡(
	`°rcmp
(*
¨gv
,"-pubin") == 0)

189 
pubö
=1;

190 i‡(
	`°rcmp
(*
¨gv
,"-pubout") == 0)

191 
pubout
=1;

192 i‡((
íc
=
	`EVP_gë_cùhîby«me
(&(
¨gv
[0][1]))Ë=
NULL
)

194 
	`BIO_¥ötf
(
bio_îr
,"unknow¿›ti⁄ %s\n",*
¨gv
);

195 
bad›s
=1;

198 
¨gc
--;

199 
¨gv
++;

202 i‡(
bad›s
)

204 
bad
:

205 
	`BIO_¥ötf
(
bio_îr
,"%†[›ti⁄s] <öfûê>outfûe\n",
¥og
);

206 
	`BIO_¥ötf
(
bio_îr
,"where optionsáre\n");

207 
	`BIO_¥ötf
(
bio_îr
," -informárg input format - DER or PEM\n");

208 
	`BIO_¥ötf
(
bio_îr
," -outformárg output format - DER or PEM\n");

209 
	`BIO_¥ötf
(
bio_îr
," -inárg input file\n");

210 
	`BIO_¥ötf
(
bio_îr
," -passinárg input fileÖassÖhrase source\n");

211 
	`BIO_¥ötf
(
bio_îr
," -outárg output file\n");

212 
	`BIO_¥ötf
(
bio_îr
," -passoutárg output fileÖassÖhrase source\n");

213 #i‚de‡
OPENSSL_NO_ENGINE


214 
	`BIO_¥ötf
(
bio_îr
," -engineÉ useÉngineÉ,Öossiblyá hardware device.\n");

216 
	`BIO_¥ötf
(
bio_îr
," -desÉncrypt PEM output with cbc des\n");

217 
	`BIO_¥ötf
(
bio_îr
," -des3Éncrypt PEM output withÉde cbc des using 168 bit key\n");

218 #i‚de‡
OPENSSL_NO_IDEA


219 
	`BIO_¥ötf
(
bio_îr
," -ideaÉncrypt PEM output with cbc idea\n");

221 #i‚de‡
OPENSSL_NO_AES


222 
	`BIO_¥ötf
(
bio_îr
," -aes128, -aes192, -aes256\n");

223 
	`BIO_¥ötf
(
bio_îr
,"Éncrypt PEM output with cbcáes\n");

225 #i‚de‡
OPENSSL_NO_CAMELLIA


226 
	`BIO_¥ötf
(
bio_îr
," -camellia128, -camellia192, -camellia256\n");

227 
	`BIO_¥ötf
(
bio_îr
,"Éncrypt PEM output with cbc camellia\n");

229 #i‚de‡
OPENSSL_NO_SEED


230 
	`BIO_¥ötf
(
bio_îr
," -seedÉncrypt PEM output with cbc seed\n");

232 
	`BIO_¥ötf
(
bio_îr
," -textÖrintÅhe key inÅext\n");

233 
	`BIO_¥ötf
(
bio_îr
," -noout don'tÖrint key out\n");

234 
	`BIO_¥ötf
(
bio_îr
," -modulusÖrintÅhe DSAÖublic value\n");

235 
íd
;

238 
	`ERR_lﬂd_¸y±o_°rögs
();

240 #i‚de‡
OPENSSL_NO_ENGINE


241 
e
 = 
	`£tup_ígöe
(
bio_îr
, 
ígöe
, 0);

244 if(!
	`≠p_∑sswd
(
bio_îr
, 
∑sßrgö
, 
∑sßrgout
, &
∑ssö
, &
∑ssout
)) {

245 
	`BIO_¥ötf
(
bio_îr
, "Error gettingÖasswords\n");

246 
íd
;

249 
ö
=
	`BIO_√w
(
	`BIO_s_fûe
());

250 
out
=
	`BIO_√w
(
	`BIO_s_fûe
());

251 i‡((
ö
 =
NULL
Ë|| (
out
 == NULL))

253 
	`ERR_¥öt_îr‹s
(
bio_îr
);

254 
íd
;

257 i‡(
öfûe
 =
NULL
)

258 
	`BIO_£t_Â
(
ö
,
°dö
,
BIO_NOCLOSE
);

261 i‡(
	`BIO_ªad_fûíame
(
ö
,
öfûe
) <= 0)

263 
	`≥º‹
(
öfûe
);

264 
íd
;

268 
	`BIO_¥ötf
(
bio_îr
,"read DSA key\n");

271 
EVP_PKEY
 *
pkey
;

273 i‡(
pubö
)

274 
pkey
 = 
	`lﬂd_pubkey
(
bio_îr
, 
öfûe
, 
öf‹m©
, 1,

275 
∑ssö
, 
e
, "Public Key");

277 
pkey
 = 
	`lﬂd_key
(
bio_îr
, 
öfûe
, 
öf‹m©
, 1,

278 
∑ssö
, 
e
, "Private Key");

280 i‡(
pkey
)

282 
dß
 = 
	`EVP_PKEY_gë1_DSA
(
pkey
);

283 
	`EVP_PKEY_‰ì
(
pkey
);

286 i‡(
dß
 =
NULL
)

288 
	`BIO_¥ötf
(
bio_îr
,"unableÅoÜoad Key\n");

289 
	`ERR_¥öt_îr‹s
(
bio_îr
);

290 
íd
;

293 i‡(
outfûe
 =
NULL
)

295 
	`BIO_£t_Â
(
out
,
°dout
,
BIO_NOCLOSE
);

296 #ifde‡
OPENSSL_SYS_VMS


298 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

299 
out
 = 
	`BIO_push
(
tmpbio
, out);

305 i‡(
	`BIO_wrôe_fûíame
(
out
,
outfûe
) <= 0)

307 
	`≥º‹
(
outfûe
);

308 
íd
;

312 i‡(
ãxt
)

313 i‡(!
	`DSA_¥öt
(
out
,
dß
,0))

315 
	`≥º‹
(
outfûe
);

316 
	`ERR_¥öt_îr‹s
(
bio_îr
);

317 
íd
;

320 i‡(
modulus
)

322 
	`Ârötf
(
°dout
,"Public Key=");

323 
	`BN_¥öt
(
out
,
dß
->
pub_key
);

324 
	`Ârötf
(
°dout
,"\n");

327 i‡(
noout
Ë
íd
;

328 
	`BIO_¥ötf
(
bio_îr
,"writing DSA key\n");

329 i‡(
outf‹m©
 =
FORMAT_ASN1
) {

330 if(
pubö
 || 
pubout
Ë
i
=
	`i2d_DSA_PUBKEY_bio
(
out
,
dß
);

331 
i
=
	`i2d_DSAPriv©eKey_bio
(
out
,
dß
);

332 } i‡(
outf‹m©
 =
FORMAT_PEM
) {

333 if(
pubö
 || 
pubout
)

334 
i
=
	`PEM_wrôe_bio_DSA_PUBKEY
(
out
,
dß
);

335 
i
=
	`PEM_wrôe_bio_DSAPriv©eKey
(
out
,
dß
,
íc
,

336 
NULL
,0,NULL, 
∑ssout
);

337 #i‡!
	`deföed
(
OPENSSL_NO_RSA
Ë&& !deföed(
OPENSSL_NO_RC4
)

338 } i‡(
outf‹m©
 =
FORMAT_MSBLOB
 || outf‹m© =
FORMAT_PVK
) {

339 
EVP_PKEY
 *
pk
;

340 
pk
 = 
	`EVP_PKEY_√w
();

341 
	`EVP_PKEY_£t1_DSA
(
pk
, 
dß
);

342 i‡(
outf‹m©
 =
FORMAT_PVK
)

343 
i
 = 
	`i2b_PVK_bio
(
out
, 
pk
, 
pvk_í¸
, 0, 
∑ssout
);

344 i‡(
pubö
 || 
pubout
)

345 
i
 = 
	`i2b_PublicKey_bio
(
out
, 
pk
);

347 
i
 = 
	`i2b_Priv©eKey_bio
(
out
, 
pk
);

348 
	`EVP_PKEY_‰ì
(
pk
);

351 
	`BIO_¥ötf
(
bio_îr
,"bad output format specified for outfile\n");

352 
íd
;

354 i‡(
i
 <= 0)

356 
	`BIO_¥ötf
(
bio_îr
,"unableÅo writeÖrivate key\n");

357 
	`ERR_¥öt_îr‹s
(
bio_îr
);

360 
ªt
=0;

361 
íd
:

362 if(
ö
 !
NULL
Ë
	`BIO_‰ì
(in);

363 if(
out
 !
NULL
Ë
	`BIO_‰ì_Æl
(out);

364 if(
dß
 !
NULL
Ë
	`DSA_‰ì
(dsa);

365 if(
∑ssö
Ë
	`OPENSSL_‰ì
(passin);

366 if(
∑ssout
Ë
	`OPENSSL_‰ì
(passout);

367 
	`≠ps_shutdown
();

368 
	`OPENSSL_EXIT
(
ªt
);

369 
	}
}

372 #i‡
PEDANTIC


373 *
	gdummy
=&
dummy
;

	@dsaparam.c

59 
	~<›ís¶/›ís¶c⁄f.h
>

62 #ifde‡
OPENSSL_NO_DEPRECATED


63 #unde‡
OPENSSL_NO_DEPRECATED


66 #i‚de‡
OPENSSL_NO_DSA


67 
	~<as£π.h
>

68 
	~<°dio.h
>

69 
	~<°dlib.h
>

70 
	~<time.h
>

71 
	~<°rög.h
>

72 
	~"≠ps.h
"

73 
	~<›ís¶/bio.h
>

74 
	~<›ís¶/îr.h
>

75 
	~<›ís¶/bn.h
>

76 
	~<›ís¶/dß.h
>

77 
	~<›ís¶/x509.h
>

78 
	~<›ís¶/≥m.h
>

80 #unde‡
PROG


81 
	#PROG
 
dß∑øm_maö


	)

97 #ifde‡
GENCB_TEST


99 
	g°›_keygí_Êag
 = 0;

101 
	$timebomb_sigÆ¨m
(
foo
)

103 
°›_keygí_Êag
 = 1;

104 
	}
}

108 
MS_CALLBACK
 
dß_cb
(
p
, 
n
, 
BN_GENCB
 *
cb
);

110 
MAIN
(, **);

112 
	$MAIN
(
¨gc
, **
¨gv
)

114 
DSA
 *
dß
=
NULL
;

115 
i
,
bad›s
=0,
ãxt
=0;

116 
BIO
 *
ö
=
NULL
,*
out
=NULL;

117 
öf‹m©
,
outf‹m©
,
noout
=0,
C
=0,
ªt
=1;

118 *
öfûe
,*
outfûe
,*
¥og
,*
öønd
=
NULL
;

119 
numbôs
-1,
num
,
gíkey
=0;

120 
√ed_ønd
=0;

121 #i‚de‡
OPENSSL_NO_ENGINE


122 *
ígöe
=
NULL
;

124 #ifde‡
GENCB_TEST


125 
timebomb
=0;

128 
	`≠ps_°¨tup
();

130 i‡(
bio_îr
 =
NULL
)

131 i‡((
bio_îr
=
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

132 
	`BIO_£t_Â
(
bio_îr
,
°dîr
,
BIO_NOCLOSE
|
BIO_FP_TEXT
);

134 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

135 
íd
;

137 
öfûe
=
NULL
;

138 
outfûe
=
NULL
;

139 
öf‹m©
=
FORMAT_PEM
;

140 
outf‹m©
=
FORMAT_PEM
;

142 
¥og
=
¨gv
[0];

143 
¨gc
--;

144 
¨gv
++;

145 
¨gc
 >= 1)

147 i‡(
	`°rcmp
(*
¨gv
,"-inform") == 0)

149 i‡(--
¨gc
 < 1Ë
bad
;

150 
öf‹m©
=
	`°r2fmt
(*(++
¨gv
));

152 i‡(
	`°rcmp
(*
¨gv
,"-outform") == 0)

154 i‡(--
¨gc
 < 1Ë
bad
;

155 
outf‹m©
=
	`°r2fmt
(*(++
¨gv
));

157 i‡(
	`°rcmp
(*
¨gv
,"-in") == 0)

159 i‡(--
¨gc
 < 1Ë
bad
;

160 
öfûe
*(++
¨gv
);

162 i‡(
	`°rcmp
(*
¨gv
,"-out") == 0)

164 i‡(--
¨gc
 < 1Ë
bad
;

165 
outfûe
*(++
¨gv
);

167 #i‚de‡
OPENSSL_NO_ENGINE


168 if(
	`°rcmp
(*
¨gv
, "-engine") == 0)

170 i‡(--
¨gc
 < 1Ë
bad
;

171 
ígöe
 = *(++
¨gv
);

174 #ifde‡
GENCB_TEST


175 if(
	`°rcmp
(*
¨gv
, "-timebomb") == 0)

177 i‡(--
¨gc
 < 1Ë
bad
;

178 
timebomb
 = 
	`©oi
(*(++
¨gv
));

181 i‡(
	`°rcmp
(*
¨gv
,"-text") == 0)

182 
ãxt
=1;

183 i‡(
	`°rcmp
(*
¨gv
,"-C") == 0)

184 
C
=1;

185 i‡(
	`°rcmp
(*
¨gv
,"-genkey") == 0)

187 
gíkey
=1;

188 
√ed_ønd
=1;

190 i‡(
	`°rcmp
(*
¨gv
,"-rand") == 0)

192 i‡(--
¨gc
 < 1Ë
bad
;

193 
öønd
*(++
¨gv
);

194 
√ed_ønd
=1;

196 i‡(
	`°rcmp
(*
¨gv
,"-noout") == 0)

197 
noout
=1;

198 i‡(
	`ssˇnf
(*
¨gv
,"%d",&
num
) == 1)

201 
numbôs
=
num
;

202 
√ed_ønd
=1;

206 
	`BIO_¥ötf
(
bio_îr
,"unknow¿›ti⁄ %s\n",*
¨gv
);

207 
bad›s
=1;

210 
¨gc
--;

211 
¨gv
++;

214 i‡(
bad›s
)

216 
bad
:

217 
	`BIO_¥ötf
(
bio_îr
,"%†[›ti⁄s] [bôs] <öfûê>outfûe\n",
¥og
);

218 
	`BIO_¥ötf
(
bio_îr
,"where optionsáre\n");

219 
	`BIO_¥ötf
(
bio_îr
," -informárg input format - DER or PEM\n");

220 
	`BIO_¥ötf
(
bio_îr
," -outformárg output format - DER or PEM\n");

221 
	`BIO_¥ötf
(
bio_îr
," -inárg input file\n");

222 
	`BIO_¥ötf
(
bio_îr
," -outárg output file\n");

223 
	`BIO_¥ötf
(
bio_îr
," -textÖrintásÅext\n");

224 
	`BIO_¥ötf
(
bio_îr
," -C Output C code\n");

225 
	`BIO_¥ötf
(
bio_îr
," -nooutÇo output\n");

226 
	`BIO_¥ötf
(
bio_îr
," -genkey generateá DSA key\n");

227 
	`BIO_¥ötf
(
bio_îr
," -rand filesÅo use forÑandomÇumber input\n");

228 #i‚de‡
OPENSSL_NO_ENGINE


229 
	`BIO_¥ötf
(
bio_îr
," -engineÉ useÉngineÉ,Öossiblyá hardware device.\n");

231 #ifde‡
GENCB_TEST


232 
	`BIO_¥ötf
(
bio_îr
," -timebombÇ interrupt keygenáfter <n> seconds\n");

234 
	`BIO_¥ötf
(
bio_îr
,"ÇumberÇumber of bitsÅo use for generatingÖrivate key\n");

235 
íd
;

238 
	`ERR_lﬂd_¸y±o_°rögs
();

240 
ö
=
	`BIO_√w
(
	`BIO_s_fûe
());

241 
out
=
	`BIO_√w
(
	`BIO_s_fûe
());

242 i‡((
ö
 =
NULL
Ë|| (
out
 == NULL))

244 
	`ERR_¥öt_îr‹s
(
bio_îr
);

245 
íd
;

248 i‡(
öfûe
 =
NULL
)

249 
	`BIO_£t_Â
(
ö
,
°dö
,
BIO_NOCLOSE
);

252 i‡(
	`BIO_ªad_fûíame
(
ö
,
öfûe
) <= 0)

254 
	`≥º‹
(
öfûe
);

255 
íd
;

258 i‡(
outfûe
 =
NULL
)

260 
	`BIO_£t_Â
(
out
,
°dout
,
BIO_NOCLOSE
);

261 #ifde‡
OPENSSL_SYS_VMS


263 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

264 
out
 = 
	`BIO_push
(
tmpbio
, out);

270 i‡(
	`BIO_wrôe_fûíame
(
out
,
outfûe
) <= 0)

272 
	`≥º‹
(
outfûe
);

273 
íd
;

277 #i‚de‡
OPENSSL_NO_ENGINE


278 
	`£tup_ígöe
(
bio_îr
, 
ígöe
, 0);

281 i‡(
√ed_ønd
)

283 
	`≠p_RAND_lﬂd_fûe
(
NULL
, 
bio_îr
, (
öønd
 != NULL));

284 i‡(
öønd
 !
NULL
)

285 
	`BIO_¥ötf
(
bio_îr
,"%ld semi-random bytesÜoaded\n",

286 
	`≠p_RAND_lﬂd_fûes
(
öønd
));

289 i‡(
numbôs
 > 0)

291 
BN_GENCB
 
cb
;

292 
	`BN_GENCB_£t
(&
cb
, 
dß_cb
, 
bio_îr
);

293 
	`as£π
(
√ed_ønd
);

294 
dß
 = 
	`DSA_√w
();

295 if(!
dß
)

297 
	`BIO_¥ötf
(
bio_îr
,"Errorállocating DSA object\n");

298 
íd
;

300 
	`BIO_¥ötf
(
bio_îr
,"Gíî©ög DSAÖ¨amëîs, %d bôÜ⁄gÖrime\n",
num
);

301 
	`BIO_¥ötf
(
bio_îr
,"This couldÅake someÅime\n");

302 #ifde‡
GENCB_TEST


303 if(
timebomb
 > 0)

305 
siga˘i⁄
 
a˘
;

306 
a˘
.
ß_h™dÀr
 = 
timebomb_sigÆ¨m
;

307 
a˘
.
ß_Êags
 = 0;

308 
	`BIO_¥ötf
(
bio_îr
,"(though I'll stop it ifÇot done within %d secs)\n",

309 
timebomb
);

310 if(
	`siga˘i⁄
(
SIGALRM
, &
a˘
, 
NULL
) != 0)

312 
	`BIO_¥ötf
(
bio_îr
,"Error, couldn't set SIGALRM handler\n");

313 
íd
;

315 
	`Æ¨m
(
timebomb
);

318 if(!
	`DSA_gíî©e_∑ømëîs_ex
(
dß
,
num
,
NULL
,0,NULL,NULL, &
cb
))

320 #ifde‡
GENCB_TEST


321 if(
°›_keygí_Êag
)

323 
	`BIO_¥ötf
(
bio_îr
,"DSA key generationÅime-stopped\n");

325 
ªt
 = 0;

326 
íd
;

329 
	`ERR_¥öt_îr‹s
(
bio_îr
);

330 
	`BIO_¥ötf
(
bio_îr
,"Error, DSA key generation failed\n");

331 
íd
;

334 i‡(
öf‹m©
 =
FORMAT_ASN1
)

335 
dß
=
	`d2i_DSA∑øms_bio
(
ö
,
NULL
);

336 i‡(
öf‹m©
 =
FORMAT_PEM
)

337 
dß
=
	`PEM_ªad_bio_DSA∑øms
(
ö
,
NULL
,NULL,NULL);

340 
	`BIO_¥ötf
(
bio_îr
,"bad input format specified\n");

341 
íd
;

343 i‡(
dß
 =
NULL
)

345 
	`BIO_¥ötf
(
bio_îr
,"unableÅoÜoad DSAÖarameters\n");

346 
	`ERR_¥öt_îr‹s
(
bio_îr
);

347 
íd
;

350 i‡(
ãxt
)

352 
	`DSA∑øms_¥öt
(
out
,
dß
);

355 i‡(
C
)

357 *
d©a
;

358 
l
,
Àn
,
bôs_p
;

360 
Àn
=
	`BN_num_byãs
(
dß
->
p
);

361 
bôs_p
=
	`BN_num_bôs
(
dß
->
p
);

362 
d©a
=(*)
	`OPENSSL_mÆloc
(
Àn
+20);

363 i‡(
d©a
 =
NULL
)

365 
	`≥º‹
("OPENSSL_malloc");

366 
íd
;

368 
l
=
	`BN_bn2bö
(
dß
->
p
,
d©a
);

369 
	`¥ötf
("°©i¯unsig√d ch¨ dß%d_p[]={",
bôs_p
);

370 
i
=0; i<
l
; i++)

372 i‡((
i
%12Ë=0Ë
	`¥ötf
("\n\t");

373 
	`¥ötf
("0x%02X,",
d©a
[
i
]);

375 
	`¥ötf
("\n\t};\n");

377 
l
=
	`BN_bn2bö
(
dß
->
q
,
d©a
);

378 
	`¥ötf
("°©i¯unsig√d ch¨ dß%d_q[]={",
bôs_p
);

379 
i
=0; i<
l
; i++)

381 i‡((
i
%12Ë=0Ë
	`¥ötf
("\n\t");

382 
	`¥ötf
("0x%02X,",
d©a
[
i
]);

384 
	`¥ötf
("\n\t};\n");

386 
l
=
	`BN_bn2bö
(
dß
->
g
,
d©a
);

387 
	`¥ötf
("°©i¯unsig√d ch¨ dß%d_g[]={",
bôs_p
);

388 
i
=0; i<
l
; i++)

390 i‡((
i
%12Ë=0Ë
	`¥ötf
("\n\t");

391 
	`¥ötf
("0x%02X,",
d©a
[
i
]);

393 
	`¥ötf
("\n\t};\n\n");

395 
	`¥ötf
("DSA *gë_dß%d()\n\t{\n",
bôs_p
);

396 
	`¥ötf
("\tDSA *dsa;\n\n");

397 
	`¥ötf
("\tif ((dsa=DSA_new()) == NULL)Ñeturn(NULL);\n");

398 
	`¥ötf
("\tdsa->p=BN_bin2bn(dsa%d_p,sizeof(dsa%d_p),NULL);\n",

399 
bôs_p
,bits_p);

400 
	`¥ötf
("\tdsa->q=BN_bin2bn(dsa%d_q,sizeof(dsa%d_q),NULL);\n",

401 
bôs_p
,bits_p);

402 
	`¥ötf
("\tdsa->g=BN_bin2bn(dsa%d_g,sizeof(dsa%d_g),NULL);\n",

403 
bôs_p
,bits_p);

404 
	`¥ötf
("\tif ((dsa->p == NULL) || (dsa->q == NULL) || (dsa->g == NULL))\n");

405 
	`¥ötf
("\t\t{ DSA_free(dsa);Ñeturn(NULL); }\n");

406 
	`¥ötf
("\treturn(dsa);\n\t}\n");

410 i‡(!
noout
)

412 i‡(
outf‹m©
 =
FORMAT_ASN1
)

413 
i
=
	`i2d_DSA∑øms_bio
(
out
,
dß
);

414 i‡(
outf‹m©
 =
FORMAT_PEM
)

415 
i
=
	`PEM_wrôe_bio_DSA∑øms
(
out
,
dß
);

417 
	`BIO_¥ötf
(
bio_îr
,"bad output format specified for outfile\n");

418 
íd
;

420 i‡(!
i
)

422 
	`BIO_¥ötf
(
bio_îr
,"unableÅo write DSAÖarameters\n");

423 
	`ERR_¥öt_îr‹s
(
bio_îr
);

424 
íd
;

427 i‡(
gíkey
)

429 
DSA
 *
dßkey
;

431 
	`as£π
(
√ed_ønd
);

432 i‡((
dßkey
=
	`DSA∑øms_dup
(
dß
)Ë=
NULL
Ë
íd
;

433 i‡(!
	`DSA_gíî©e_key
(
dßkey
))

435 
	`ERR_¥öt_îr‹s
(
bio_îr
);

436 
	`DSA_‰ì
(
dßkey
);

437 
íd
;

439 i‡(
outf‹m©
 =
FORMAT_ASN1
)

440 
i
=
	`i2d_DSAPriv©eKey_bio
(
out
,
dßkey
);

441 i‡(
outf‹m©
 =
FORMAT_PEM
)

442 
i
=
	`PEM_wrôe_bio_DSAPriv©eKey
(
out
,
dßkey
,
NULL
,NULL,0,NULL,NULL);

444 
	`BIO_¥ötf
(
bio_îr
,"bad output format specified for outfile\n");

445 
	`DSA_‰ì
(
dßkey
);

446 
íd
;

448 
	`DSA_‰ì
(
dßkey
);

450 i‡(
√ed_ønd
)

451 
	`≠p_RAND_wrôe_fûe
(
NULL
, 
bio_îr
);

452 
ªt
=0;

453 
íd
:

454 i‡(
ö
 !
NULL
Ë
	`BIO_‰ì
(in);

455 i‡(
out
 !
NULL
Ë
	`BIO_‰ì_Æl
(out);

456 i‡(
dß
 !
NULL
Ë
	`DSA_‰ì
(dsa);

457 
	`≠ps_shutdown
();

458 
	`OPENSSL_EXIT
(
ªt
);

459 
	}
}

461 
MS_CALLBACK
 
	$dß_cb
(
p
, 
n
, 
BN_GENCB
 *
cb
)

463 
c
='*';

465 i‡(
p
 =0Ë
c
='.';

466 i‡(
p
 =1Ë
c
='+';

467 i‡(
p
 =2Ë
c
='*';

468 i‡(
p
 =3Ë
c
='\n';

469 
	`BIO_wrôe
(
cb
->
¨g
,&
c
,1);

470 ()
	`BIO_Êush
(
cb
->
¨g
);

471 #ifde‡
LINT


472 
p
=
n
;

474 #ifde‡
GENCB_TEST


475 if(
°›_keygí_Êag
)

479 
	}
}

482 #i‡
PEDANTIC


483 *
	gdummy
=&
dummy
;

	@ec.c

59 
	~<›ís¶/›ís¶c⁄f.h
>

60 #i‚de‡
OPENSSL_NO_EC


61 
	~<°dio.h
>

62 
	~<°dlib.h
>

63 
	~<°rög.h
>

64 
	~"≠ps.h
"

65 
	~<›ís¶/bio.h
>

66 
	~<›ís¶/îr.h
>

67 
	~<›ís¶/evp.h
>

68 
	~<›ís¶/≥m.h
>

70 #unde‡
PROG


71 
	#PROG
 
ec_maö


	)

84 
MAIN
(, **);

86 
	$MAIN
(
¨gc
, **
¨gv
)

88 
ªt
 = 1;

89 
EC_KEY
 *
eckey
 = 
NULL
;

90 c⁄° 
EC_GROUP
 *
group
;

91 
i
, 
bad›s
 = 0;

92 c⁄° 
EVP_CIPHER
 *
íc
 = 
NULL
;

93 
BIO
 *
ö
 = 
NULL
, *
out
 = NULL;

94 
öf‹m©
, 
outf‹m©
, 
ãxt
=0, 
noout
=0;

95 
pubö
 = 0, 
pubout
 = 0, 
∑øm_out
 = 0;

96 *
öfûe
, *
outfûe
, *
¥og
, *
ígöe
;

97 *
∑sßrgö
 = 
NULL
, *
∑sßrgout
 = NULL;

98 *
∑ssö
 = 
NULL
, *
∑ssout
 = NULL;

99 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
 = 
POINT_CONVERSION_UNCOMPRESSED
;

100 
√w_f‹m
 = 0;

101 
a¢1_Êag
 = 
OPENSSL_EC_NAMED_CURVE
;

102 
√w_a¢1_Êag
 = 0;

104 
	`≠ps_°¨tup
();

106 i‡(
bio_îr
 =
NULL
)

107 i‡((
bio_îr
=
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

108 
	`BIO_£t_Â
(
bio_îr
, 
°dîr
, 
BIO_NOCLOSE
|
BIO_FP_TEXT
);

110 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

111 
íd
;

113 
ígöe
 = 
NULL
;

114 
öfûe
 = 
NULL
;

115 
outfûe
 = 
NULL
;

116 
öf‹m©
 = 
FORMAT_PEM
;

117 
outf‹m©
 = 
FORMAT_PEM
;

119 
¥og
 = 
¨gv
[0];

120 
¨gc
--;

121 
¨gv
++;

122 
¨gc
 >= 1)

124 i‡(
	`°rcmp
(*
¨gv
,"-inform") == 0)

126 i‡(--
¨gc
 < 1Ë
bad
;

127 
öf‹m©
=
	`°r2fmt
(*(++
¨gv
));

129 i‡(
	`°rcmp
(*
¨gv
,"-outform") == 0)

131 i‡(--
¨gc
 < 1Ë
bad
;

132 
outf‹m©
=
	`°r2fmt
(*(++
¨gv
));

134 i‡(
	`°rcmp
(*
¨gv
,"-in") == 0)

136 i‡(--
¨gc
 < 1Ë
bad
;

137 
öfûe
*(++
¨gv
);

139 i‡(
	`°rcmp
(*
¨gv
,"-out") == 0)

141 i‡(--
¨gc
 < 1Ë
bad
;

142 
outfûe
*(++
¨gv
);

144 i‡(
	`°rcmp
(*
¨gv
,"-passin") == 0)

146 i‡(--
¨gc
 < 1Ë
bad
;

147 
∑sßrgö
*(++
¨gv
);

149 i‡(
	`°rcmp
(*
¨gv
,"-passout") == 0)

151 i‡(--
¨gc
 < 1Ë
bad
;

152 
∑sßrgout
*(++
¨gv
);

154 i‡(
	`°rcmp
(*
¨gv
, "-engine") == 0)

156 i‡(--
¨gc
 < 1Ë
bad
;

157 
ígöe
*(++
¨gv
);

159 i‡(
	`°rcmp
(*
¨gv
, "-noout") == 0)

160 
noout
 = 1;

161 i‡(
	`°rcmp
(*
¨gv
, "-text") == 0)

162 
ãxt
 = 1;

163 i‡(
	`°rcmp
(*
¨gv
, "-conv_form") == 0)

165 i‡(--
¨gc
 < 1)

166 
bad
;

167 ++
¨gv
;

168 
√w_f‹m
 = 1;

169 i‡(
	`°rcmp
(*
¨gv
, "compressed") == 0)

170 
f‹m
 = 
POINT_CONVERSION_COMPRESSED
;

171 i‡(
	`°rcmp
(*
¨gv
, "uncompressed") == 0)

172 
f‹m
 = 
POINT_CONVERSION_UNCOMPRESSED
;

173 i‡(
	`°rcmp
(*
¨gv
, "hybrid") == 0)

174 
f‹m
 = 
POINT_CONVERSION_HYBRID
;

176 
bad
;

178 i‡(
	`°rcmp
(*
¨gv
, "-param_enc") == 0)

180 i‡(--
¨gc
 < 1)

181 
bad
;

182 ++
¨gv
;

183 
√w_a¢1_Êag
 = 1;

184 i‡(
	`°rcmp
(*
¨gv
, "named_curve") == 0)

185 
a¢1_Êag
 = 
OPENSSL_EC_NAMED_CURVE
;

186 i‡(
	`°rcmp
(*
¨gv
, "explicit") == 0)

187 
a¢1_Êag
 = 0;

189 
bad
;

191 i‡(
	`°rcmp
(*
¨gv
, "-param_out") == 0)

192 
∑øm_out
 = 1;

193 i‡(
	`°rcmp
(*
¨gv
, "-pubin") == 0)

194 
pubö
=1;

195 i‡(
	`°rcmp
(*
¨gv
, "-pubout") == 0)

196 
pubout
=1;

197 i‡((
íc
=
	`EVP_gë_cùhîby«me
(&(
¨gv
[0][1]))Ë=
NULL
)

199 
	`BIO_¥ötf
(
bio_îr
, "unknow¿›ti⁄ %s\n", *
¨gv
);

200 
bad›s
=1;

203 
¨gc
--;

204 
¨gv
++;

207 i‡(
bad›s
)

209 
bad
:

210 
	`BIO_¥ötf
(
bio_îr
, "%†[›ti⁄s] <öfûê>outfûe\n", 
¥og
);

211 
	`BIO_¥ötf
(
bio_îr
, "where optionsáre\n");

212 
	`BIO_¥ötf
(
bio_îr
, " -informárg input format - "

214 
	`BIO_¥ötf
(
bio_îr
, " -outformárg output format - "

216 
	`BIO_¥ötf
(
bio_îr
, " -inárg input file\n");

217 
	`BIO_¥ötf
(
bio_îr
, " -passinárg input fileÖass "

219 
	`BIO_¥ötf
(
bio_îr
, " -outárg output file\n");

220 
	`BIO_¥ötf
(
bio_îr
, " -passoutárg output fileÖass "

222 
	`BIO_¥ötf
(
bio_îr
, " -engineÉ useÉngineÉ, "

224 
	`BIO_¥ötf
(
bio_îr
, " -desÉncrypt PEM output, "

228 
	`BIO_¥ötf
(
bio_îr
, " -textÖrintÅhe key\n");

229 
	`BIO_¥ötf
(
bio_îr
, " -noout don'tÖrint key out\n");

230 
	`BIO_¥ötf
(
bio_îr
, " -param_outÖrintÅheÉlliptic "

232 
	`BIO_¥ötf
(
bio_îr
, " -conv_formárg specifiesÅhe "

234 
	`BIO_¥ötf
(
bio_îr
, "Öossible values:"

236 
	`BIO_¥ötf
(
bio_îr
, " "

238 
	`BIO_¥ötf
(
bio_îr
, " "

240 
	`BIO_¥ötf
(
bio_îr
, " -param_encárg specifiesÅhe way"

242 
	`BIO_¥ötf
(
bio_îr
, " inÅheásn1 der "

244 
	`BIO_¥ötf
(
bio_îr
, "Öossible values:"

246 
	`BIO_¥ötf
(
bio_îr
," "

248 
íd
;

251 
	`ERR_lﬂd_¸y±o_°rögs
();

253 #i‚de‡
OPENSSL_NO_ENGINE


254 
	`£tup_ígöe
(
bio_îr
, 
ígöe
, 0);

257 if(!
	`≠p_∑sswd
(
bio_îr
, 
∑sßrgö
, 
∑sßrgout
, &
∑ssö
, &
∑ssout
))

259 
	`BIO_¥ötf
(
bio_îr
, "Error gettingÖasswords\n");

260 
íd
;

263 
ö
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

264 
out
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

265 i‡((
ö
 =
NULL
Ë|| (
out
 == NULL))

267 
	`ERR_¥öt_îr‹s
(
bio_îr
);

268 
íd
;

271 i‡(
öfûe
 =
NULL
)

272 
	`BIO_£t_Â
(
ö
, 
°dö
, 
BIO_NOCLOSE
);

275 i‡(
	`BIO_ªad_fûíame
(
ö
, 
öfûe
) <= 0)

277 
	`≥º‹
(
öfûe
);

278 
íd
;

282 
	`BIO_¥ötf
(
bio_îr
, "read EC key\n");

283 i‡(
öf‹m©
 =
FORMAT_ASN1
)

285 i‡(
pubö
)

286 
eckey
 = 
	`d2i_EC_PUBKEY_bio
(
ö
, 
NULL
);

288 
eckey
 = 
	`d2i_ECPriv©eKey_bio
(
ö
, 
NULL
);

290 i‡(
öf‹m©
 =
FORMAT_PEM
)

292 i‡(
pubö
)

293 
eckey
 = 
	`PEM_ªad_bio_EC_PUBKEY
(
ö
, 
NULL
, NULL,

294 
NULL
);

296 
eckey
 = 
	`PEM_ªad_bio_ECPriv©eKey
(
ö
, 
NULL
, NULL,

297 
∑ssö
);

301 
	`BIO_¥ötf
(
bio_îr
, "bad input format specified for key\n");

302 
íd
;

304 i‡(
eckey
 =
NULL
)

306 
	`BIO_¥ötf
(
bio_îr
,"unableÅoÜoad Key\n");

307 
	`ERR_¥öt_îr‹s
(
bio_îr
);

308 
íd
;

311 i‡(
outfûe
 =
NULL
)

313 
	`BIO_£t_Â
(
out
, 
°dout
, 
BIO_NOCLOSE
);

314 #ifde‡
OPENSSL_SYS_VMS


316 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

317 
out
 = 
	`BIO_push
(
tmpbio
, out);

323 i‡(
	`BIO_wrôe_fûíame
(
out
, 
outfûe
) <= 0)

325 
	`≥º‹
(
outfûe
);

326 
íd
;

330 
group
 = 
	`EC_KEY_gë0_group
(
eckey
);

332 i‡(
√w_f‹m
)

333 
	`EC_KEY_£t_c⁄v_f‹m
(
eckey
, 
f‹m
);

335 i‡(
√w_a¢1_Êag
)

336 
	`EC_KEY_£t_a¢1_Êag
(
eckey
, 
a¢1_Êag
);

338 i‡(
ãxt
)

339 i‡(!
	`EC_KEY_¥öt
(
out
, 
eckey
, 0))

341 
	`≥º‹
(
outfûe
);

342 
	`ERR_¥öt_îr‹s
(
bio_îr
);

343 
íd
;

346 i‡(
noout
)

348 
ªt
 = 0;

349 
íd
;

352 
	`BIO_¥ötf
(
bio_îr
, "writing EC key\n");

353 i‡(
outf‹m©
 =
FORMAT_ASN1
)

355 i‡(
∑øm_out
)

356 
i
 = 
	`i2d_ECPKP¨amëîs_bio
(
out
, 
group
);

357 i‡(
pubö
 || 
pubout
)

358 
i
 = 
	`i2d_EC_PUBKEY_bio
(
out
, 
eckey
);

360 
i
 = 
	`i2d_ECPriv©eKey_bio
(
out
, 
eckey
);

362 i‡(
outf‹m©
 =
FORMAT_PEM
)

364 i‡(
∑øm_out
)

365 
i
 = 
	`PEM_wrôe_bio_ECPKP¨amëîs
(
out
, 
group
);

366 i‡(
pubö
 || 
pubout
)

367 
i
 = 
	`PEM_wrôe_bio_EC_PUBKEY
(
out
, 
eckey
);

369 
i
 = 
	`PEM_wrôe_bio_ECPriv©eKey
(
out
, 
eckey
, 
íc
,

370 
NULL
, 0, NULL, 
∑ssout
);

374 
	`BIO_¥ötf
(
bio_îr
, "bad output format specified for "

376 
íd
;

379 i‡(!
i
)

381 
	`BIO_¥ötf
(
bio_îr
, "unableÅo writeÖrivate key\n");

382 
	`ERR_¥öt_îr‹s
(
bio_îr
);

385 
ªt
=0;

386 
íd
:

387 i‡(
ö
)

388 
	`BIO_‰ì
(
ö
);

389 i‡(
out
)

390 
	`BIO_‰ì_Æl
(
out
);

391 i‡(
eckey
)

392 
	`EC_KEY_‰ì
(
eckey
);

393 i‡(
∑ssö
)

394 
	`OPENSSL_‰ì
(
∑ssö
);

395 i‡(
∑ssout
)

396 
	`OPENSSL_‰ì
(
∑ssout
);

397 
	`≠ps_shutdown
();

398 
	`OPENSSL_EXIT
(
ªt
);

399 
	}
}

402 #i‡
PEDANTIC


403 *
	gdummy
=&
dummy
;

	@ecparam.c

72 
	~<›ís¶/›ís¶c⁄f.h
>

73 #i‚de‡
OPENSSL_NO_EC


74 
	~<as£π.h
>

75 
	~<°dio.h
>

76 
	~<°dlib.h
>

77 
	~<time.h
>

78 
	~<°rög.h
>

79 
	~"≠ps.h
"

80 
	~<›ís¶/bio.h
>

81 
	~<›ís¶/îr.h
>

82 
	~<›ís¶/bn.h
>

83 
	~<›ís¶/ec.h
>

84 
	~<›ís¶/x509.h
>

85 
	~<›ís¶/≥m.h
>

87 #unde‡
PROG


88 
	#PROG
 
e˝¨am_maö


	)

115 
e˝¨am_¥öt_v¨
(
BIO
 *,
BIGNUM
 *,const *,,*);

117 
MAIN
(, **);

119 
	$MAIN
(
¨gc
, **
¨gv
)

121 
EC_GROUP
 *
group
 = 
NULL
;

122 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
 = 
POINT_CONVERSION_UNCOMPRESSED
;

123 
√w_f‹m
 = 0;

124 
a¢1_Êag
 = 
OPENSSL_EC_NAMED_CURVE
;

125 
√w_a¢1_Êag
 = 0;

126 *
curve_«me
 = 
NULL
, *
öønd
 = NULL;

127 
li°_curves
 = 0, 
no_£ed
 = 0, 
check
 = 0,

128 
bad›s
 = 0, 
ãxt
 = 0, 
i
, 
√ed_ønd
 = 0, 
gíkey
 = 0;

129 *
öfûe
 = 
NULL
, *
outfûe
 = NULL, *
¥og
;

130 
BIO
 *
ö
 = 
NULL
, *
out
 = NULL;

131 
öf‹m©
, 
outf‹m©
, 
noout
 = 0, 
C
 = 0, 
ªt
 = 1;

132 *
ígöe
 = 
NULL
;

134 
BIGNUM
 *
ec_p
 = 
NULL
, *
ec_a
 = NULL, *
ec_b
 = NULL,

135 *
ec_gí
 = 
NULL
, *
ec_‹dî
 = NULL, *
ec_coÁ˘‹
 = NULL;

136 *
buf„r
 = 
NULL
;

138 
	`≠ps_°¨tup
();

140 i‡(
bio_îr
 =
NULL
)

141 i‡((
bio_îr
=
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

142 
	`BIO_£t_Â
(
bio_îr
,
°dîr
,
BIO_NOCLOSE
|
BIO_FP_TEXT
);

144 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

145 
íd
;

147 
öf‹m©
=
FORMAT_PEM
;

148 
outf‹m©
=
FORMAT_PEM
;

150 
¥og
=
¨gv
[0];

151 
¨gc
--;

152 
¨gv
++;

153 
¨gc
 >= 1)

155 i‡(
	`°rcmp
(*
¨gv
,"-inform") == 0)

157 i‡(--
¨gc
 < 1Ë
bad
;

158 
öf‹m©
=
	`°r2fmt
(*(++
¨gv
));

160 i‡(
	`°rcmp
(*
¨gv
,"-outform") == 0)

162 i‡(--
¨gc
 < 1Ë
bad
;

163 
outf‹m©
=
	`°r2fmt
(*(++
¨gv
));

165 i‡(
	`°rcmp
(*
¨gv
,"-in") == 0)

167 i‡(--
¨gc
 < 1Ë
bad
;

168 
öfûe
*(++
¨gv
);

170 i‡(
	`°rcmp
(*
¨gv
,"-out") == 0)

172 i‡(--
¨gc
 < 1Ë
bad
;

173 
outfûe
*(++
¨gv
);

175 i‡(
	`°rcmp
(*
¨gv
,"-text") == 0)

176 
ãxt
 = 1;

177 i‡(
	`°rcmp
(*
¨gv
,"-C") == 0)

178 
C
 = 1;

179 i‡(
	`°rcmp
(*
¨gv
,"-check") == 0)

180 
check
 = 1;

181 i‡(
	`°rcmp
 (*
¨gv
, "-name") == 0)

183 i‡(--
¨gc
 < 1)

184 
bad
;

185 
curve_«me
 = *(++
¨gv
);

187 i‡(
	`°rcmp
(*
¨gv
, "-list_curves") == 0)

188 
li°_curves
 = 1;

189 i‡(
	`°rcmp
(*
¨gv
, "-conv_form") == 0)

191 i‡(--
¨gc
 < 1)

192 
bad
;

193 ++
¨gv
;

194 
√w_f‹m
 = 1;

195 i‡(
	`°rcmp
(*
¨gv
, "compressed") == 0)

196 
f‹m
 = 
POINT_CONVERSION_COMPRESSED
;

197 i‡(
	`°rcmp
(*
¨gv
, "uncompressed") == 0)

198 
f‹m
 = 
POINT_CONVERSION_UNCOMPRESSED
;

199 i‡(
	`°rcmp
(*
¨gv
, "hybrid") == 0)

200 
f‹m
 = 
POINT_CONVERSION_HYBRID
;

202 
bad
;

204 i‡(
	`°rcmp
(*
¨gv
, "-param_enc") == 0)

206 i‡(--
¨gc
 < 1)

207 
bad
;

208 ++
¨gv
;

209 
√w_a¢1_Êag
 = 1;

210 i‡(
	`°rcmp
(*
¨gv
, "named_curve") == 0)

211 
a¢1_Êag
 = 
OPENSSL_EC_NAMED_CURVE
;

212 i‡(
	`°rcmp
(*
¨gv
, "explicit") == 0)

213 
a¢1_Êag
 = 0;

215 
bad
;

217 i‡(
	`°rcmp
(*
¨gv
, "-no_seed") == 0)

218 
no_£ed
 = 1;

219 i‡(
	`°rcmp
(*
¨gv
, "-noout") == 0)

220 
noout
=1;

221 i‡(
	`°rcmp
(*
¨gv
,"-genkey") == 0)

223 
gíkey
=1;

224 
√ed_ønd
=1;

226 i‡(
	`°rcmp
(*
¨gv
, "-rand") == 0)

228 i‡(--
¨gc
 < 1Ë
bad
;

229 
öønd
*(++
¨gv
);

230 
√ed_ønd
=1;

232 if(
	`°rcmp
(*
¨gv
, "-engine") == 0)

234 i‡(--
¨gc
 < 1Ë
bad
;

235 
ígöe
 = *(++
¨gv
);

239 
	`BIO_¥ötf
(
bio_îr
,"unknow¿›ti⁄ %s\n",*
¨gv
);

240 
bad›s
=1;

243 
¨gc
--;

244 
¨gv
++;

247 i‡(
bad›s
)

249 
bad
:

250 
	`BIO_¥ötf
(
bio_îr
, "%†[›ti⁄s] <öfûê>outfûe\n",
¥og
);

251 
	`BIO_¥ötf
(
bio_îr
, "where optionsáre\n");

252 
	`BIO_¥ötf
(
bio_îr
, " -informárg input format - "

254 
	`BIO_¥ötf
(
bio_îr
, " -outformárg output format - "

256 
	`BIO_¥ötf
(
bio_îr
, " -inárg input file - "

258 
	`BIO_¥ötf
(
bio_îr
, " -outárg output file - "

260 
	`BIO_¥ötf
(
bio_îr
, " -noout doÇotÖrintÅhe "

262 
	`BIO_¥ötf
(
bio_îr
, " -textÖrintÅheÉc "

264 
	`BIO_¥ötf
(
bio_îr
, " -check validateÅheÉc "

266 
	`BIO_¥ötf
(
bio_îr
, " -CÖrintá 'C' "

268 
	`BIO_¥ötf
(
bio_îr
, " -nameárg useÅhe "

270 
	`BIO_¥ötf
(
bio_îr
, " -list_curvesÖrintsáÜist of "

272 
	`BIO_¥ötf
(
bio_îr
, " -conv_formárg specifiesÅhe "

274 
	`BIO_¥ötf
(
bio_îr
, "Öossible values:"

276 
	`BIO_¥ötf
(
bio_îr
, " "

278 
	`BIO_¥ötf
(
bio_îr
, " "

280 
	`BIO_¥ötf
(
bio_îr
, " -param_encárg specifiesÅhe way"

282 
	`BIO_¥ötf
(
bio_îr
, " inÅheásn1 der "

284 
	`BIO_¥ötf
(
bio_îr
, "Öossible values:"

286 
	`BIO_¥ötf
(
bio_îr
, " "

288 
	`BIO_¥ötf
(
bio_îr
, " -no_seed if 'explicit'"

291 
	`BIO_¥ötf
(
bio_îr
, " -genkey generateÉc"

293 
	`BIO_¥ötf
(
bio_îr
, " -rand file filesÅo use for"

295 
	`BIO_¥ötf
(
bio_îr
, " -engineÉ useÉngineÉ, "

297 
íd
;

300 
	`ERR_lﬂd_¸y±o_°rögs
();

302 
ö
=
	`BIO_√w
(
	`BIO_s_fûe
());

303 
out
=
	`BIO_√w
(
	`BIO_s_fûe
());

304 i‡((
ö
 =
NULL
Ë|| (
out
 == NULL))

306 
	`ERR_¥öt_îr‹s
(
bio_îr
);

307 
íd
;

310 i‡(
öfûe
 =
NULL
)

311 
	`BIO_£t_Â
(
ö
,
°dö
,
BIO_NOCLOSE
);

314 i‡(
	`BIO_ªad_fûíame
(
ö
,
öfûe
) <= 0)

316 
	`≥º‹
(
öfûe
);

317 
íd
;

320 i‡(
outfûe
 =
NULL
)

322 
	`BIO_£t_Â
(
out
,
°dout
,
BIO_NOCLOSE
);

323 #ifde‡
OPENSSL_SYS_VMS


325 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

326 
out
 = 
	`BIO_push
(
tmpbio
, out);

332 i‡(
	`BIO_wrôe_fûíame
(
out
,
outfûe
) <= 0)

334 
	`≥º‹
(
outfûe
);

335 
íd
;

339 #i‚de‡
OPENSSL_NO_ENGINE


340 
	`£tup_ígöe
(
bio_îr
, 
ígöe
, 0);

343 i‡(
li°_curves
)

345 
EC_buûtö_curve
 *
curves
 = 
NULL
;

346 
size_t
 
¸v_Àn
 = 0;

347 
size_t
 
n
 = 0;

349 
¸v_Àn
 = 
	`EC_gë_buûtö_curves
(
NULL
, 0);

351 
curves
 = 
	`OPENSSL_mÆloc
(()((
EC_buûtö_curve
Ë* 
¸v_Àn
));

353 i‡(
curves
 =
NULL
)

354 
íd
;

356 i‡(!
	`EC_gë_buûtö_curves
(
curves
, 
¸v_Àn
))

358 
	`OPENSSL_‰ì
(
curves
);

359 
íd
;

363 
n
 = 0;Ç < 
¸v_Àn
;Ç++)

365 c⁄° *
commít
;

366 c⁄° *
¢ame
;

367 
commít
 = 
curves
[
n
].comment;

368 
¢ame
 = 
	`OBJ_nid2¢
(
curves
[
n
].
nid
);

369 i‡(
commít
 =
NULL
)

370 
commít
 = "CURVE DESCRIPTION NOT AVAILABLE";

371 i‡(
¢ame
 =
NULL
)

372 
¢ame
 = "";

374 
	`BIO_¥ötf
(
out
, " %-10s: ", 
¢ame
);

375 
	`BIO_¥ötf
(
out
, "%s\n", 
commít
);

378 
	`OPENSSL_‰ì
(
curves
);

379 
ªt
 = 0;

380 
íd
;

383 i‡(
curve_«me
 !
NULL
)

385 
nid
;

391 i‡(!
	`°rcmp
(
curve_«me
, "secp192r1"))

393 
	`BIO_¥ötf
(
bio_îr
, "using curveÇameÖrime192v1 "

395 
nid
 = 
NID_X9_62_¥ime192v1
;

397 i‡(!
	`°rcmp
(
curve_«me
, "secp256r1"))

399 
	`BIO_¥ötf
(
bio_îr
, "using curveÇameÖrime256v1 "

401 
nid
 = 
NID_X9_62_¥ime256v1
;

404 
nid
 = 
	`OBJ_¢2nid
(
curve_«me
);

406 i‡(
nid
 == 0)

408 
	`BIO_¥ötf
(
bio_îr
, "unknown curveÇame (%s)\n",

409 
curve_«me
);

410 
íd
;

413 
group
 = 
	`EC_GROUP_√w_by_curve_«me
(
nid
);

414 i‡(
group
 =
NULL
)

416 
	`BIO_¥ötf
(
bio_îr
, "unableÅo create curve (%s)\n",

417 
curve_«me
);

418 
íd
;

420 
	`EC_GROUP_£t_a¢1_Êag
(
group
, 
a¢1_Êag
);

421 
	`EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m
(
group
, 
f‹m
);

423 i‡(
öf‹m©
 =
FORMAT_ASN1
)

425 
group
 = 
	`d2i_ECPKP¨amëîs_bio
(
ö
, 
NULL
);

427 i‡(
öf‹m©
 =
FORMAT_PEM
)

429 
group
 = 
	`PEM_ªad_bio_ECPKP¨amëîs
(
ö
,
NULL
,NULL,NULL);

433 
	`BIO_¥ötf
(
bio_îr
, "bad input format specified\n");

434 
íd
;

437 i‡(
group
 =
NULL
)

439 
	`BIO_¥ötf
(
bio_îr
,

441 
	`ERR_¥öt_îr‹s
(
bio_îr
);

442 
íd
;

445 i‡(
√w_f‹m
)

446 
	`EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m
(
group
, 
f‹m
);

448 i‡(
√w_a¢1_Êag
)

449 
	`EC_GROUP_£t_a¢1_Êag
(
group
, 
a¢1_Êag
);

451 i‡(
no_£ed
)

453 
	`EC_GROUP_£t_£ed
(
group
, 
NULL
, 0);

456 i‡(
ãxt
)

458 i‡(!
	`ECPKP¨amëîs_¥öt
(
out
, 
group
, 0))

459 
íd
;

462 i‡(
check
)

464 i‡(
group
 =
NULL
)

465 
	`BIO_¥ötf
(
bio_îr
, "noÉlliptic curveÖarameters\n");

466 
	`BIO_¥ötf
(
bio_îr
, "checkingÉlliptic curveÖarameters: ");

467 i‡(!
	`EC_GROUP_check
(
group
, 
NULL
))

469 
	`BIO_¥ötf
(
bio_îr
, "failed\n");

470 
	`ERR_¥öt_îr‹s
(
bio_îr
);

473 
	`BIO_¥ötf
(
bio_îr
, "ok\n");

477 i‡(
C
)

479 
size_t
 
buf_Àn
 = 0, 
tmp_Àn
 = 0;

480 c⁄° 
EC_POINT
 *
poöt
;

481 
is_¥ime
, 
Àn
 = 0;

482 c⁄° 
EC_METHOD
 *
mëh
 = 
	`EC_GROUP_mëhod_of
(
group
);

484 i‡((
ec_p
 = 
	`BN_√w
()Ë=
NULL
 || (
ec_a
 = BN_new()) == NULL ||

485 (
ec_b
 = 
	`BN_√w
()Ë=
NULL
 || (
ec_gí
 = BN_new()) == NULL ||

486 (
ec_‹dî
 = 
	`BN_√w
()Ë=
NULL
 ||

487 (
ec_coÁ˘‹
 = 
	`BN_√w
()Ë=
NULL
 )

489 
	`≥º‹
("OPENSSL_malloc");

490 
íd
;

493 
is_¥ime
 = (
	`EC_METHOD_gë_fõld_ty≥
(
mëh
) ==

494 
NID_X9_62_¥ime_fõld
);

496 i‡(
is_¥ime
)

498 i‡(!
	`EC_GROUP_gë_curve_GFp
(
group
, 
ec_p
, 
ec_a
,

499 
ec_b
, 
NULL
))

500 
íd
;

505 
íd
;

508 i‡((
poöt
 = 
	`EC_GROUP_gë0_gíî©‹
(
group
)Ë=
NULL
)

509 
íd
;

510 i‡(!
	`EC_POINT_poöt2bn
(
group
, 
poöt
,

511 
	`EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m
(
group
), 
ec_gí
,

512 
NULL
))

513 
íd
;

514 i‡(!
	`EC_GROUP_gë_‹dî
(
group
, 
ec_‹dî
, 
NULL
))

515 
íd
;

516 i‡(!
	`EC_GROUP_gë_coÁ˘‹
(
group
, 
ec_coÁ˘‹
, 
NULL
))

517 
íd
;

519 i‡(!
ec_p
 || !
ec_a
 || !
ec_b
 || !
ec_gí
 ||

520 !
ec_‹dî
 || !
ec_coÁ˘‹
)

521 
íd
;

523 
Àn
 = 
	`BN_num_bôs
(
ec_‹dî
);

525 i‡((
tmp_Àn
 = (
size_t
)
	`BN_num_byãs
(
ec_p
)Ë> 
buf_Àn
)

526 
buf_Àn
 = 
tmp_Àn
;

527 i‡((
tmp_Àn
 = (
size_t
)
	`BN_num_byãs
(
ec_a
)Ë> 
buf_Àn
)

528 
buf_Àn
 = 
tmp_Àn
;

529 i‡((
tmp_Àn
 = (
size_t
)
	`BN_num_byãs
(
ec_b
)Ë> 
buf_Àn
)

530 
buf_Àn
 = 
tmp_Àn
;

531 i‡((
tmp_Àn
 = (
size_t
)
	`BN_num_byãs
(
ec_gí
)Ë> 
buf_Àn
)

532 
buf_Àn
 = 
tmp_Àn
;

533 i‡((
tmp_Àn
 = (
size_t
)
	`BN_num_byãs
(
ec_‹dî
)Ë> 
buf_Àn
)

534 
buf_Àn
 = 
tmp_Àn
;

535 i‡((
tmp_Àn
 = (
size_t
)
	`BN_num_byãs
(
ec_coÁ˘‹
)Ë> 
buf_Àn
)

536 
buf_Àn
 = 
tmp_Àn
;

538 
buf„r
 = (*)
	`OPENSSL_mÆloc
(
buf_Àn
);

540 i‡(
buf„r
 =
NULL
)

542 
	`≥º‹
("OPENSSL_malloc");

543 
íd
;

546 
	`e˝¨am_¥öt_v¨
(
out
, 
ec_p
, "ec_p", 
Àn
, 
buf„r
);

547 
	`e˝¨am_¥öt_v¨
(
out
, 
ec_a
, "ec_a", 
Àn
, 
buf„r
);

548 
	`e˝¨am_¥öt_v¨
(
out
, 
ec_b
, "ec_b", 
Àn
, 
buf„r
);

549 
	`e˝¨am_¥öt_v¨
(
out
, 
ec_gí
, "ec_gí", 
Àn
, 
buf„r
);

550 
	`e˝¨am_¥öt_v¨
(
out
, 
ec_‹dî
, "ec_‹dî", 
Àn
, 
buf„r
);

551 
	`e˝¨am_¥öt_v¨
(
out
, 
ec_coÁ˘‹
, "ec_coÁ˘‹", 
Àn
,

552 
buf„r
);

554 
	`BIO_¥ötf
(
out
, "\n\n");

556 
	`BIO_¥ötf
(
out
, "EC_GROUP *gë_ec_group_%d(void)\n\t{\n", 
Àn
);

557 
	`BIO_¥ötf
(
out
, "\tint ok=0;\n");

558 
	`BIO_¥ötf
(
out
, "\tEC_GROUP *group = NULL;\n");

559 
	`BIO_¥ötf
(
out
, "\tEC_POINT *point = NULL;\n");

560 
	`BIO_¥ötf
(
out
, "\tBIGNUM *tmp_1 = NULL, *tmp_2 = NULL, "

562 
	`BIO_¥ötf
(
out
, "\tif ((tmp_1 = BN_bin2bn(ec_p_%d, "

564 "gŸÿîr;\n", 
Àn
,Üen);

565 
	`BIO_¥ötf
(
out
, "\tif ((tmp_2 = BN_bin2bn(ec_a_%d, "

567 "gŸÿîr;\n", 
Àn
,Üen);

568 
	`BIO_¥ötf
(
out
, "\tif ((tmp_3 = BN_bin2bn(ec_b_%d, "

570 "gŸÿîr;\n", 
Àn
,Üen);

571 i‡(
is_¥ime
)

573 
	`BIO_¥ötf
(
out
, "\tif ((group = EC_GROUP_new_curve_"

580 
íd
;

582 
	`BIO_¥ötf
(
out
, "\t/* build generator */\n");

583 
	`BIO_¥ötf
(
out
, "\tif ((tmp_1 = BN_bin2bn(ec_gen_%d, "

585 "\n\t\tgŸÿîr;\n", 
Àn
,Üen);

586 
	`BIO_¥ötf
(
out
, "\tpoint = EC_POINT_bn2point(group,Åmp_1, "

588 
	`BIO_¥ötf
(
out
, "\tif (point == NULL)\n\t\tgotoÉrr;\n");

589 
	`BIO_¥ötf
(
out
, "\tif ((tmp_2 = BN_bin2bn(ec_order_%d, "

591 "\n\t\tgŸÿîr;\n", 
Àn
,Üen);

592 
	`BIO_¥ötf
(
out
, "\tif ((tmp_3 = BN_bin2bn(ec_cofactor_%d, "

594 "\n\t\tgŸÿîr;\n", 
Àn
,Üen);

595 
	`BIO_¥ötf
(
out
, "\tif (!EC_GROUP_set_generator(group,Öoint,"

597 
	`BIO_¥ötf
(
out
, "\n\tok=1;\n");

598 
	`BIO_¥ötf
(
out
, "err:\n");

599 
	`BIO_¥ötf
(
out
, "\tif (tmp_1)\n\t\tBN_free(tmp_1);\n");

600 
	`BIO_¥ötf
(
out
, "\tif (tmp_2)\n\t\tBN_free(tmp_2);\n");

601 
	`BIO_¥ötf
(
out
, "\tif (tmp_3)\n\t\tBN_free(tmp_3);\n");

602 
	`BIO_¥ötf
(
out
, "\tif (point)\n\t\tEC_POINT_free(point);\n");

603 
	`BIO_¥ötf
(
out
, "\tif (!ok)\n");

604 
	`BIO_¥ötf
(
out
, "\t\t{\n");

605 
	`BIO_¥ötf
(
out
, "\t\tEC_GROUP_free(group);\n");

606 
	`BIO_¥ötf
(
out
, "\t\tgroup = NULL;\n");

607 
	`BIO_¥ötf
(
out
, "\t\t}\n");

608 
	`BIO_¥ötf
(
out
, "\treturn(group);\n\t}\n");

611 i‡(!
noout
)

613 i‡(
outf‹m©
 =
FORMAT_ASN1
)

614 
i
 = 
	`i2d_ECPKP¨amëîs_bio
(
out
, 
group
);

615 i‡(
outf‹m©
 =
FORMAT_PEM
)

616 
i
 = 
	`PEM_wrôe_bio_ECPKP¨amëîs
(
out
, 
group
);

619 
	`BIO_¥ötf
(
bio_îr
,"bad output format specified for"

621 
íd
;

623 i‡(!
i
)

625 
	`BIO_¥ötf
(
bio_îr
, "unableÅo writeÉlliptic "

627 
	`ERR_¥öt_îr‹s
(
bio_îr
);

628 
íd
;

632 i‡(
√ed_ønd
)

634 
	`≠p_RAND_lﬂd_fûe
(
NULL
, 
bio_îr
, (
öønd
 != NULL));

635 i‡(
öønd
 !
NULL
)

636 
	`BIO_¥ötf
(
bio_îr
,"%ld semi-random bytesÜoaded\n",

637 
	`≠p_RAND_lﬂd_fûes
(
öønd
));

640 i‡(
gíkey
)

642 
EC_KEY
 *
eckey
 = 
	`EC_KEY_√w
();

644 i‡(
eckey
 =
NULL
)

645 
íd
;

647 
	`as£π
(
√ed_ønd
);

649 i‡(
	`EC_KEY_£t_group
(
eckey
, 
group
) == 0)

650 
íd
;

652 i‡(!
	`EC_KEY_gíî©e_key
(
eckey
))

654 
	`EC_KEY_‰ì
(
eckey
);

655 
íd
;

657 i‡(
outf‹m©
 =
FORMAT_ASN1
)

658 
i
 = 
	`i2d_ECPriv©eKey_bio
(
out
, 
eckey
);

659 i‡(
outf‹m©
 =
FORMAT_PEM
)

660 
i
 = 
	`PEM_wrôe_bio_ECPriv©eKey
(
out
, 
eckey
, 
NULL
,

661 
NULL
, 0, NULL, NULL);

664 
	`BIO_¥ötf
(
bio_îr
, "bad output format specified "

666 
	`EC_KEY_‰ì
(
eckey
);

667 
íd
;

669 
	`EC_KEY_‰ì
(
eckey
);

672 i‡(
√ed_ønd
)

673 
	`≠p_RAND_wrôe_fûe
(
NULL
, 
bio_îr
);

675 
ªt
=0;

676 
íd
:

677 i‡(
ec_p
)

678 
	`BN_‰ì
(
ec_p
);

679 i‡(
ec_a
)

680 
	`BN_‰ì
(
ec_a
);

681 i‡(
ec_b
)

682 
	`BN_‰ì
(
ec_b
);

683 i‡(
ec_gí
)

684 
	`BN_‰ì
(
ec_gí
);

685 i‡(
ec_‹dî
)

686 
	`BN_‰ì
(
ec_‹dî
);

687 i‡(
ec_coÁ˘‹
)

688 
	`BN_‰ì
(
ec_coÁ˘‹
);

689 i‡(
buf„r
)

690 
	`OPENSSL_‰ì
(
buf„r
);

691 i‡(
ö
 !
NULL
)

692 
	`BIO_‰ì
(
ö
);

693 i‡(
out
 !
NULL
)

694 
	`BIO_‰ì_Æl
(
out
);

695 i‡(
group
 !
NULL
)

696 
	`EC_GROUP_‰ì
(
group
);

697 
	`≠ps_shutdown
();

698 
	`OPENSSL_EXIT
(
ªt
);

699 
	}
}

701 
	$e˝¨am_¥öt_v¨
(
BIO
 *
out
, 
BIGNUM
 *
ö
, c⁄° *
v¨
,

702 
Àn
, *
buf„r
)

704 
	`BIO_¥ötf
(
out
, "°©i¯unsig√d ch¨ %s_%d[] = {", 
v¨
, 
Àn
);

705 i‡(
	`BN_is_zîo
(
ö
))

706 
	`BIO_¥ötf
(
out
, "\n\t0x00");

709 
i
, 
l
;

711 
l
 = 
	`BN_bn2bö
(
ö
, 
buf„r
);

712 
i
=0; i<
l
-1; i++)

714 i‡((
i
%12) == 0)

715 
	`BIO_¥ötf
(
out
, "\n\t");

716 
	`BIO_¥ötf
(
out
, "0x%02X,", 
buf„r
[
i
]);

718 i‡((
i
%12) == 0)

719 
	`BIO_¥ötf
(
out
, "\n\t");

720 
	`BIO_¥ötf
(
out
, "0x%02X", 
buf„r
[
i
]);

722 
	`BIO_¥ötf
(
out
, "\n\t};\n\n");

724 
	}
}

727 #i‡
PEDANTIC


728 *
	gdummy
=&
dummy
;

	@ect.c

1 
	~"›ís¶/bn.h
"

2 
	~"›ís¶/ec.h
"

3 
	~"../¸y±o/ec/ec_l˛.h
"

4 
	~"›ís¶/ecdh.h
"

5 
	~"›ís¶/obj_mac.h
"

7 
	$maö
()

9 
buf
[1024];

10 
i
,
l
;

12 
BN_CTX
 *
bn_˘x
 = 
	`BN_CTX_√w
();

13 
EC_GROUP
 *
gΩ
 = 
	`EC_GROUP_√w_by_curve_«me
(
NID_X9_62_¥ime256v1
);

14 
EC_POINT
 *
r
,*
g
;

16 
BIGNUM
 *
sˇœr
 = 
	`BN_√w
();

17 
	`BN_zîo
(
sˇœr
);

18 
	`BN_add_w‹d
(
sˇœr
,2);

20 
	`BN_CTX_öô
(
bn_˘x
);

21 
r
 = 
	`EC_POINT_√w
(
gΩ
);

22 
g
 = 
	`EC_POINT_√w
(
gΩ
);

24 
	`EC_POINT_mul
(
gΩ
,
r
,
NULL
,gΩ->
gíî©‹
,
sˇœr
,
bn_˘x
);

42 
	`¥ötf
("\n\n");

44 
l
 = 
	`BN_bn2bö
(&
r
->
X
,
buf
);

45 
	`¥ötf
("result X:\n");

46 
i
=0;i<
l
;i++)

47 
	`¥ötf
("%02x ",
buf
[
i
]);

48 
	`¥ötf
("\n");

50 
l
 = 
	`BN_bn2bö
(&
r
->
Y
,
buf
);

51 
	`¥ötf
("result Y:\n");

52 
i
=0;i<
l
;i++)

53 
	`¥ötf
("%02x ",
buf
[
i
]);

54 
	`¥ötf
("\n\n");

55 
	}
}

	@enc.c

59 
	~<°dio.h
>

60 
	~<°dlib.h
>

61 
	~<°rög.h
>

62 
	~"≠ps.h
"

63 
	~<›ís¶/bio.h
>

64 
	~<›ís¶/îr.h
>

65 
	~<›ís¶/evp.h
>

66 
	~<›ís¶/obje˘s.h
>

67 
	~<›ís¶/x509.h
>

68 
	~<›ís¶/ønd.h
>

69 
	~<›ís¶/≥m.h
>

70 
	~<›ís¶/comp.h
>

71 
	~<˘y≥.h
>

73 
£t_hex
(*
ö
,*
out
,
size
);

74 #unde‡
SIZE


75 #unde‡
BSIZE


76 #unde‡
PROG


78 
	#SIZE
 (512)

	)

79 
	#BSIZE
 (8*1024)

	)

80 
	#PROG
 
íc_maö


	)

82 
	$show_cùhîs
(c⁄° 
OBJ_NAME
 *
«me
,*
bio_
)

84 
BIO
 *
bio
=
bio_
;

85 
n
;

87 if(!
	`i¶owî
(()*
«me
->name))

90 
	`BIO_¥ötf
(
bio
,"-%-25s",
«me
->name);

91 if(++
n
 == 3)

93 
	`BIO_¥ötf
(
bio
,"\n");

94 
n
=0;

97 
	`BIO_¥ötf
(
bio
," ");

98 
	}
}

100 
MAIN
(, **);

102 
	$MAIN
(
¨gc
, **
¨gv
)

104 c⁄° 
magic
[]="Salted__";

105 
mbuf
[ 
magic
-1];

106 *
°rbuf
=
NULL
;

107 *
buff
=
NULL
,*
bufsize
=NULL;

108 
bsize
=
BSIZE
,
vîbo£
=0;

109 
ªt
=1,
öl
;

110 
n›ad
 = 0;

111 
key
[
EVP_MAX_KEY_LENGTH
],
iv
[
EVP_MAX_IV_LENGTH
];

112 
ß…
[
PKCS5_SALT_LEN
];

113 *
°r
=
NULL
, *
∑sßrg
 = NULL, *
∑ss
 = NULL;

114 *
hkey
=
NULL
,*
hiv
=NULL,*
hß…
 = NULL;

115 *
md
=
NULL
;

116 
íc
=1,
¥ötkey
=0,
i
,
ba£64
=0;

117 #ifde‡
ZLIB


118 
do_zlib
=0;

119 
BIO
 *
bzl
 = 
NULL
;

121 
debug
=0,
ﬁb64
=0,
noß…
=0;

122 c⁄° 
EVP_CIPHER
 *
cùhî
=
NULL
,*
c
;

123 
EVP_CIPHER_CTX
 *
˘x
 = 
NULL
;

124 *
öf
=
NULL
,*
outf
=NULL;

125 
BIO
 *
ö
=
NULL
,*
out
=NULL,*
b64
=NULL,*
bíc
=NULL,*
rbio
=NULL,*
wbio
=NULL;

126 
	#PROG_NAME_SIZE
 39

	)

127 
≤ame
[
PROG_NAME_SIZE
+1];

128 #i‚de‡
OPENSSL_NO_ENGINE


129 *
ígöe
 = 
NULL
;

131 c⁄° 
EVP_MD
 *
dg°
=
NULL
;

132 
n⁄_fùs_Ælow
 = 0;

134 
	`≠ps_°¨tup
();

136 i‡(
bio_îr
 =
NULL
)

137 i‡((
bio_îr
=
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

138 
	`BIO_£t_Â
(
bio_îr
,
°dîr
,
BIO_NOCLOSE
|
BIO_FP_TEXT
);

140 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

141 
íd
;

144 
	`¥ogøm_«me
(
¨gv
[0],
≤ame
,Öname);

145 i‡(
	`°rcmp
(
≤ame
,"base64") == 0)

146 
ba£64
=1;

147 #ifde‡
ZLIB


148 i‡(
	`°rcmp
(
≤ame
,"zlib") == 0)

149 
do_zlib
=1;

152 
cùhî
=
	`EVP_gë_cùhîby«me
(
≤ame
);

153 #ifde‡
ZLIB


154 i‡(!
do_zlib
 && !
ba£64
 && (
cùhî
 =
NULL
)

155 && (
	`°rcmp
(
≤ame
,"enc") != 0))

157 i‡(!
ba£64
 && (
cùhî
 =
NULL
Ë&& (
	`°rcmp
(
≤ame
,"enc") != 0))

160 
	`BIO_¥ötf
(
bio_îr
,"%†i†™ unknow¿cùhî\n",
≤ame
);

161 
bad
;

164 
¨gc
--;

165 
¨gv
++;

166 
¨gc
 >= 1)

168 i‡(
	`°rcmp
(*
¨gv
,"-e") == 0)

169 
íc
=1;

170 i‡(
	`°rcmp
(*
¨gv
,"-in") == 0)

172 i‡(--
¨gc
 < 1Ë
bad
;

173 
öf
*(++
¨gv
);

175 i‡(
	`°rcmp
(*
¨gv
,"-out") == 0)

177 i‡(--
¨gc
 < 1Ë
bad
;

178 
outf
*(++
¨gv
);

180 i‡(
	`°rcmp
(*
¨gv
,"-pass") == 0)

182 i‡(--
¨gc
 < 1Ë
bad
;

183 
∑sßrg
*(++
¨gv
);

185 #i‚de‡
OPENSSL_NO_ENGINE


186 i‡(
	`°rcmp
(*
¨gv
,"-engine") == 0)

188 i‡(--
¨gc
 < 1Ë
bad
;

189 
ígöe
*(++
¨gv
);

192 i‡(
	`°rcmp
(*
¨gv
,"-d") == 0)

193 
íc
=0;

194 i‡(
	`°rcmp
(*
¨gv
,"-p") == 0)

195 
¥ötkey
=1;

196 i‡(
	`°rcmp
(*
¨gv
,"-v") == 0)

197 
vîbo£
=1;

198 i‡(
	`°rcmp
(*
¨gv
,"-nopad") == 0)

199 
n›ad
=1;

200 i‡(
	`°rcmp
(*
¨gv
,"-salt") == 0)

201 
noß…
=0;

202 i‡(
	`°rcmp
(*
¨gv
,"-nosalt") == 0)

203 
noß…
=1;

204 i‡(
	`°rcmp
(*
¨gv
,"-debug") == 0)

205 
debug
=1;

206 i‡(
	`°rcmp
(*
¨gv
,"-P") == 0)

207 
¥ötkey
=2;

208 i‡(
	`°rcmp
(*
¨gv
,"-A") == 0)

209 
ﬁb64
=1;

210 i‡(
	`°rcmp
(*
¨gv
,"-a") == 0)

211 
ba£64
=1;

212 i‡(
	`°rcmp
(*
¨gv
,"-base64") == 0)

213 
ba£64
=1;

214 #ifde‡
ZLIB


215 i‡(
	`°rcmp
(*
¨gv
,"-z") == 0)

216 
do_zlib
=1;

218 i‡(
	`°rcmp
(*
¨gv
,"-bufsize") == 0)

220 i‡(--
¨gc
 < 1Ë
bad
;

221 
bufsize
=(*)*(++
¨gv
);

223 i‡(
	`°rcmp
(*
¨gv
,"-k") == 0)

225 i‡(--
¨gc
 < 1Ë
bad
;

226 
°r
*(++
¨gv
);

228 i‡(
	`°rcmp
(*
¨gv
,"-kfile") == 0)

230 
buf
[128];

231 
FILE
 *
öfûe
;

232 *
fûe
;

234 i‡(--
¨gc
 < 1Ë
bad
;

235 
fûe
*(++
¨gv
);

236 
öfûe
=
	`f›í
(
fûe
,"r");

237 i‡(
öfûe
 =
NULL
)

239 
	`BIO_¥ötf
(
bio_îr
,"unableÅoÑead key from '%s'\n",

240 
fûe
);

241 
bad
;

243 
buf
[0]='\0';

244 i‡(!
	`fgës
(
buf
, buf,
öfûe
))

246 
	`BIO_¥ötf
(
bio_îr
,"unableÅoÑead key from '%s'\n",

247 
fûe
);

248 
bad
;

250 
	`f˛o£
(
öfûe
);

251 
i
=
	`°æí
(
buf
);

252 i‡((
i
 > 0) &&

253 ((
buf
[
i
-1] == '\n') || (buf[i-1] == '\r')))

254 
buf
[--
i
]='\0';

255 i‡((
i
 > 0) &&

256 ((
buf
[
i
-1] == '\n') || (buf[i-1] == '\r')))

257 
buf
[--
i
]='\0';

258 i‡(
i
 < 1)

260 
	`BIO_¥ötf
(
bio_îr
,"zeroÜengthÖassword\n");

261 
bad
;

263 
°r
=
buf
;

265 i‡(
	`°rcmp
(*
¨gv
,"-K") == 0)

267 i‡(--
¨gc
 < 1Ë
bad
;

268 
hkey
*(++
¨gv
);

270 i‡(
	`°rcmp
(*
¨gv
,"-S") == 0)

272 i‡(--
¨gc
 < 1Ë
bad
;

273 
hß…
*(++
¨gv
);

275 i‡(
	`°rcmp
(*
¨gv
,"-iv") == 0)

277 i‡(--
¨gc
 < 1Ë
bad
;

278 
hiv
*(++
¨gv
);

280 i‡(
	`°rcmp
(*
¨gv
,"-md") == 0)

282 i‡(--
¨gc
 < 1Ë
bad
;

283 
md
*(++
¨gv
);

285 i‡(
	`°rcmp
(*
¨gv
,"-non-fips-allow") == 0)

286 
n⁄_fùs_Ælow
 = 1;

287 i‡((
¨gv
[0][0] == '-') &&

288 ((
c
=
	`EVP_gë_cùhîby«me
(&(
¨gv
[0][1]))Ë!
NULL
))

290 
cùhî
=
c
;

292 i‡(
	`°rcmp
(*
¨gv
,"-none") == 0)

293 
cùhî
=
NULL
;

296 
	`BIO_¥ötf
(
bio_îr
,"unknow¿›ti⁄ '%s'\n",*
¨gv
);

297 
bad
:

298 
	`BIO_¥ötf
(
bio_îr
,"optionsáre\n");

299 
	`BIO_¥ötf
(
bio_îr
,"%-14s input file\n","-in <file>");

300 
	`BIO_¥ötf
(
bio_îr
,"%-14s output file\n","-out <file>");

301 
	`BIO_¥ötf
(
bio_îr
,"%-14sÖassÖhrase source\n","-pass <arg>");

302 
	`BIO_¥ötf
(
bio_îr
,"%-14sÉncrypt\n","-e");

303 
	`BIO_¥ötf
(
bio_îr
,"%-14s decrypt\n","-d");

304 
	`BIO_¥ötf
(
bio_îr
,"%-14s base64Éncode/decode, depending onÉncryption flag\n","-a/-base64");

305 
	`BIO_¥ötf
(
bio_îr
,"%-14sÖassphrase isÅheÇextárgument\n","-k");

306 
	`BIO_¥ötf
(
bio_îr
,"%-14sÖassphrase isÅhe firstÜine ofÅhe fileárgument\n","-kfile");

307 
	`BIO_¥ötf
(
bio_îr
,"%-14sÅheÇextárgument isÅhe mdÅo useÅo createá key\n","-md");

308 
	`BIO_¥ötf
(
bio_îr
,"%-14s fromáÖassphrase. One of md2, md5, sha or sha1\n","");

309 
	`BIO_¥ötf
(
bio_îr
,"%-14s salt in hex isÅheÇextárgument\n","-S");

310 
	`BIO_¥ötf
(
bio_îr
,"%-14s key/iv in hex isÅheÇextárgument\n","-K/-iv");

311 
	`BIO_¥ötf
(
bio_îr
,"%-14sÖrintÅhe iv/key (thenÉxit if -P)\n","-[pP]");

312 
	`BIO_¥ötf
(
bio_îr
,"%-14s buffer size\n","-bufsize <n>");

313 
	`BIO_¥ötf
(
bio_îr
,"%-14s disable standard blockÖadding\n","-nopad");

314 #i‚de‡
OPENSSL_NO_ENGINE


315 
	`BIO_¥ötf
(
bio_îr
,"%-14s useÉngineÉ,Öossiblyá hardware device.\n","-engineÉ");

318 
	`BIO_¥ötf
(
bio_îr
,"Cipher Types\n");

319 
	`OBJ_NAME_do_Æl_s‹ãd
(
OBJ_NAME_TYPE_CIPHER_METH
,

320 
show_cùhîs
,

321 
bio_îr
);

322 
	`BIO_¥ötf
(
bio_îr
,"\n");

324 
íd
;

326 
¨gc
--;

327 
¨gv
++;

330 #i‚de‡
OPENSSL_NO_ENGINE


331 
	`£tup_ígöe
(
bio_îr
, 
ígöe
, 0);

334 i‡(
md
 && (
dg°
=
	`EVP_gë_dige°by«me
(md)Ë=
NULL
)

336 
	`BIO_¥ötf
(
bio_îr
,"%†i†™ unsuµ‹ãd mesßgêdige°Åy≥\n",
md
);

337 
íd
;

340 i‡(
dg°
 =
NULL
)

342 
dg°
 = 
	`EVP_md5
();

345 i‡(
bufsize
 !
NULL
)

347 
n
;

349 
n
=0; *
bufsize
; bufsize++)

351 
i
*
bufsize
;

352 i‡((
i
 <= '9') && (i >= '0'))

353 
n
Ú*10+
i
-'0';

354 i‡(
i
 == 'k')

356 
n
*=1024;

357 
bufsize
++;

361 i‡(*
bufsize
 != '\0')

363 
	`BIO_¥ötf
(
bio_îr
,"invalid 'bufsize' specified.\n");

364 
íd
;

368 i‡(
ba£64
 && 
n
 < 80)Ç=80;

370 
bsize
=()
n
;

371 i‡(
vîbo£
Ë
	`BIO_¥ötf
(
bio_îr
,"bufsize=%d\n",
bsize
);

374 
°rbuf
=
	`OPENSSL_mÆloc
(
SIZE
);

375 
buff
=(*)
	`OPENSSL_mÆloc
(
	`EVP_ENCODE_LENGTH
(
bsize
));

376 i‡((
buff
 =
NULL
Ë|| (
°rbuf
 == NULL))

378 
	`BIO_¥ötf
(
bio_îr
,"OPENSSL_mÆlo¯Áûuª %ld\n",()
	`EVP_ENCODE_LENGTH
(
bsize
));

379 
íd
;

382 
ö
=
	`BIO_√w
(
	`BIO_s_fûe
());

383 
out
=
	`BIO_√w
(
	`BIO_s_fûe
());

384 i‡((
ö
 =
NULL
Ë|| (
out
 == NULL))

386 
	`ERR_¥öt_îr‹s
(
bio_îr
);

387 
íd
;

389 i‡(
debug
)

391 
	`BIO_£t_ˇŒback
(
ö
,
BIO_debug_ˇŒback
);

392 
	`BIO_£t_ˇŒback
(
out
,
BIO_debug_ˇŒback
);

393 
	`BIO_£t_ˇŒback_¨g
(
ö
,(*)
bio_îr
);

394 
	`BIO_£t_ˇŒback_¨g
(
out
,(*)
bio_îr
);

397 i‡(
öf
 =
NULL
)

399 #i‚de‡
OPENSSL_NO_SETVBUF_IONBF


400 i‡(
bufsize
 !
NULL
)

401 
	`£tvbuf
(
°dö
, (*)
NULL
, 
_IONBF
, 0);

403 
	`BIO_£t_Â
(
ö
,
°dö
,
BIO_NOCLOSE
);

407 i‡(
	`BIO_ªad_fûíame
(
ö
,
öf
) <= 0)

409 
	`≥º‹
(
öf
);

410 
íd
;

414 if(!
°r
 && 
∑sßrg
) {

415 if(!
	`≠p_∑sswd
(
bio_îr
, 
∑sßrg
, 
NULL
, &
∑ss
, NULL)) {

416 
	`BIO_¥ötf
(
bio_îr
, "Error gettingÖassword\n");

417 
íd
;

419 
°r
 = 
∑ss
;

422 i‡((
°r
 =
NULL
Ë&& (
cùhî
 !NULLË&& (
hkey
 == NULL))

426 
buf
[200];

428 
	`BIO_¢¥ötf
(
buf
, buf,"enter %s %sÖassword:",

429 
	`OBJ_nid2 
(
	`EVP_CIPHER_nid
(
cùhî
)),

430 (
íc
)?"encryption":"decryption");

431 
°rbuf
[0]='\0';

432 
i
=
	`EVP_ªad_pw_°rög
((*)
°rbuf
,
SIZE
,
buf
,
íc
);

433 i‡(
i
 == 0)

435 i‡(
°rbuf
[0] == '\0')

437 
ªt
=1;

438 
íd
;

440 
°r
=
°rbuf
;

443 i‡(
i
 < 0)

445 
	`BIO_¥ötf
(
bio_îr
,"badÖasswordÑead\n");

446 
íd
;

452 i‡(
outf
 =
NULL
)

454 
	`BIO_£t_Â
(
out
,
°dout
,
BIO_NOCLOSE
);

455 #i‚de‡
OPENSSL_NO_SETVBUF_IONBF


456 i‡(
bufsize
 !
NULL
)

457 
	`£tvbuf
(
°dout
, (*)
NULL
, 
_IONBF
, 0);

459 #ifde‡
OPENSSL_SYS_VMS


461 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

462 
out
 = 
	`BIO_push
(
tmpbio
, out);

468 i‡(
	`BIO_wrôe_fûíame
(
out
,
outf
) <= 0)

470 
	`≥º‹
(
outf
);

471 
íd
;

475 
rbio
=
ö
;

476 
wbio
=
out
;

478 #ifde‡
ZLIB


480 i‡(
do_zlib
)

482 i‡((
bzl
=
	`BIO_√w
(
	`BIO_f_zlib
())Ë=
NULL
)

483 
íd
;

484 i‡(
íc
)

485 
wbio
=
	`BIO_push
(
bzl
,wbio);

487 
rbio
=
	`BIO_push
(
bzl
,rbio);

491 i‡(
ba£64
)

493 i‡((
b64
=
	`BIO_√w
(
	`BIO_f_ba£64
())Ë=
NULL
)

494 
íd
;

495 i‡(
debug
)

497 
	`BIO_£t_ˇŒback
(
b64
,
BIO_debug_ˇŒback
);

498 
	`BIO_£t_ˇŒback_¨g
(
b64
,(*)
bio_îr
);

500 i‡(
ﬁb64
)

501 
	`BIO_£t_Êags
(
b64
,
BIO_FLAGS_BASE64_NO_NL
);

502 i‡(
íc
)

503 
wbio
=
	`BIO_push
(
b64
,wbio);

505 
rbio
=
	`BIO_push
(
b64
,rbio);

508 i‡(
cùhî
 !
NULL
)

513 i‡(
°r
 !
NULL
)

519 *
•å
;

520 if(
noß…
Ë
•å
 = 
NULL
;

522 if(
íc
) {

523 if(
hß…
) {

524 if(!
	`£t_hex
(
hß…
,
ß…
, salt)) {

525 
	`BIO_¥ötf
(
bio_îr
,

527 
íd
;

529 } i‡(
	`RAND_p£udo_byãs
(
ß…
,  salt) < 0)

530 
íd
;

532 if((
¥ötkey
 != 2)

533 && (
	`BIO_wrôe
(
wbio
,
magic
,

534  
magic
-1) !=  magic-1

535 || 
	`BIO_wrôe
(
wbio
,

536 (*)
ß…
,

537  
ß…
) !=  salt)) {

538 
	`BIO_¥ötf
(
bio_îr
,"error writing output file\n");

539 
íd
;

541 } if(
	`BIO_ªad
(
rbio
,
mbuf
, mbuf) !=  mbuf

542 || 
	`BIO_ªad
(
rbio
,

543 (*)
ß…
,

544  
ß…
) !=  salt) {

545 
	`BIO_¥ötf
(
bio_îr
,"errorÑeading input file\n");

546 
íd
;

547 } if(
	`memcmp
(
mbuf
,
magic
, magic-1)) {

548 
	`BIO_¥ötf
(
bio_îr
,"bad magicÇumber\n");

549 
íd
;

552 
•å
 = 
ß…
;

555 
	`EVP_ByãsToKey
(
cùhî
,
dg°
,
•å
,

556 (*)
°r
,

557 
	`°æí
(
°r
),1,
key
,
iv
);

562 i‡(
°r
 =
°rbuf
)

563 
	`OPENSSL_˛ón£
(
°r
,
SIZE
);

565 
	`OPENSSL_˛ón£
(
°r
,
	`°æí
(str));

567 i‡((
hiv
 !
NULL
Ë&& !
	`£t_hex
(hiv,
iv
, iv))

569 
	`BIO_¥ötf
(
bio_îr
,"invalid hex iv value\n");

570 
íd
;

572 i‡((
hiv
 =
NULL
Ë&& (
°r
 == NULL)

573 && 
	`EVP_CIPHER_iv_Àngth
(
cùhî
) != 0)

578 
	`BIO_¥ötf
(
bio_îr
, "iv undefined\n");

579 
íd
;

581 i‡((
hkey
 !
NULL
Ë&& !
	`£t_hex
(hkey,
key
, key))

583 
	`BIO_¥ötf
(
bio_îr
,"invalid hex key value\n");

584 
íd
;

587 i‡((
bíc
=
	`BIO_√w
(
	`BIO_f_cùhî
())Ë=
NULL
)

588 
íd
;

594 
	`BIO_gë_cùhî_˘x
(
bíc
, &
˘x
);

596 i‡(
n⁄_fùs_Ælow
)

597 
	`EVP_CIPHER_CTX_£t_Êags
(
˘x
,

598 
EVP_CIPH_FLAG_NON_FIPS_ALLOW
);

600 i‡(!
	`EVP_CùhîInô_ex
(
˘x
, 
cùhî
, 
NULL
, NULL, NULL, 
íc
))

602 
	`BIO_¥ötf
(
bio_îr
, "Error setting cipher %s\n",

603 
	`EVP_CIPHER_«me
(
cùhî
));

604 
	`ERR_¥öt_îr‹s
(
bio_îr
);

605 
íd
;

608 i‡(
n›ad
)

609 
	`EVP_CIPHER_CTX_£t_∑ddög
(
˘x
, 0);

611 i‡(!
	`EVP_CùhîInô_ex
(
˘x
, 
NULL
, NULL, 
key
, 
iv
, 
íc
))

613 
	`BIO_¥ötf
(
bio_îr
, "Error setting cipher %s\n",

614 
	`EVP_CIPHER_«me
(
cùhî
));

615 
	`ERR_¥öt_îr‹s
(
bio_îr
);

616 
íd
;

619 i‡(
debug
)

621 
	`BIO_£t_ˇŒback
(
bíc
,
BIO_debug_ˇŒback
);

622 
	`BIO_£t_ˇŒback_¨g
(
bíc
,(*)
bio_îr
);

625 i‡(
¥ötkey
)

627 i‡(!
noß…
)

629 
	`¥ötf
("salt=");

630 
i
=0; i<()(
ß…
); i++)

631 
	`¥ötf
("%02X",
ß…
[
i
]);

632 
	`¥ötf
("\n");

634 i‡(
cùhî
->
key_Àn
 > 0)

636 
	`¥ötf
("key=");

637 
i
=0; i<
cùhî
->
key_Àn
; i++)

638 
	`¥ötf
("%02X",
key
[
i
]);

639 
	`¥ötf
("\n");

641 i‡(
cùhî
->
iv_Àn
 > 0)

643 
	`¥ötf
("iv =");

644 
i
=0; i<
cùhî
->
iv_Àn
; i++)

645 
	`¥ötf
("%02X",
iv
[
i
]);

646 
	`¥ötf
("\n");

648 i‡(
¥ötkey
 == 2)

650 
ªt
=0;

651 
íd
;

657 i‡(
bíc
 !
NULL
)

658 
wbio
=
	`BIO_push
(
bíc
,wbio);

662 
öl
=
	`BIO_ªad
(
rbio
,(*)
buff
,
bsize
);

663 i‡(
öl
 <= 0) ;

664 i‡(
	`BIO_wrôe
(
wbio
,(*)
buff
,
öl
) != inl)

666 
	`BIO_¥ötf
(
bio_îr
,"error writing output file\n");

667 
íd
;

670 i‡(!
	`BIO_Êush
(
wbio
))

672 
	`BIO_¥ötf
(
bio_îr
,"bad decrypt\n");

673 
íd
;

676 
ªt
=0;

677 i‡(
vîbo£
)

679 
	`BIO_¥ötf
(
bio_îr
,"byã†ªad :%8ld\n",
	`BIO_numbî_ªad
(
ö
));

680 
	`BIO_¥ötf
(
bio_îr
,"byã†wrôãn:%8ld\n",
	`BIO_numbî_wrôãn
(
out
));

682 
íd
:

683 
	`ERR_¥öt_îr‹s
(
bio_îr
);

684 i‡(
°rbuf
 !
NULL
Ë
	`OPENSSL_‰ì
(strbuf);

685 i‡(
buff
 !
NULL
Ë
	`OPENSSL_‰ì
(buff);

686 i‡(
ö
 !
NULL
Ë
	`BIO_‰ì
(in);

687 i‡(
out
 !
NULL
Ë
	`BIO_‰ì_Æl
(out);

688 i‡(
bíc
 !
NULL
Ë
	`BIO_‰ì
(benc);

689 i‡(
b64
 !
NULL
Ë
	`BIO_‰ì
(b64);

690 #ifde‡
ZLIB


691 i‡(
bzl
 !
NULL
Ë
	`BIO_‰ì
(bzl);

693 if(
∑ss
Ë
	`OPENSSL_‰ì
(pass);

694 
	`≠ps_shutdown
();

695 
	`OPENSSL_EXIT
(
ªt
);

696 
	}
}

698 
	$£t_hex
(*
ö
, *
out
, 
size
)

700 
i
,
n
;

701 
j
;

703 
n
=
	`°æí
(
ö
);

704 i‡(
n
 > (
size
*2))

706 
	`BIO_¥ötf
(
bio_îr
,"hex string isÅooÜong\n");

709 
	`mem£t
(
out
,0,
size
);

710 
i
=0; i<
n
; i++)

712 
j
=()*
ö
;

713 *(
ö
++)='\0';

714 i‡(
j
 == 0) ;

715 i‡((
j
 >= '0') && (j <= '9'))

716 
j
-='0';

717 i‡((
j
 >= 'A') && (j <= 'F'))

718 
j
=j-'A'+10;

719 i‡((
j
 >= 'a') && (j <= 'f'))

720 
j
=j-'a'+10;

723 
	`BIO_¥ötf
(
bio_îr
,"non-hex digit\n");

726 i‡(
i
&1)

727 
out
[
i
/2]|=
j
;

729 
out
[
i
/2]=(
j
<<4);

732 
	}
}

	@engine.c

60 
	~<°dio.h
>

61 
	~<°dlib.h
>

62 
	~<°rög.h
>

63 #ifde‡
OPENSSL_NO_STDIO


64 
	#APPS_WIN16


	)

66 
	~"≠ps.h
"

67 
	~<›ís¶/îr.h
>

68 #i‚de‡
OPENSSL_NO_ENGINE


69 
	~<›ís¶/ígöe.h
>

70 
	~<›ís¶/s¶.h
>

72 #unde‡
PROG


73 
	#PROG
 
ígöe_maö


	)

75 c⁄° *
	gígöe_ußge
[]={

92 
NULL


95 
	$idítôy
(*
±r
)

98 
	}
}

100 
	$≠≥nd_buf
(**
buf
, c⁄° *
s
, *
size
, 
°ï
)

102 
l
 = 
	`°æí
(
s
);

104 i‡(*
buf
 =
NULL
)

106 *
size
 = 
°ï
;

107 *
buf
 = 
	`OPENSSL_mÆloc
(*
size
);

108 i‡(*
buf
 =
NULL
)

110 **
buf
 = '\0';

113 i‡(**
buf
 != '\0')

114 
l
 += 2;

116 i‡(
	`°æí
(*
buf
Ë+ såÀn(
s
Ë>()*
size
)

118 *
size
 +
°ï
;

119 *
buf
 = 
	`OPENSSL_ªÆloc
(*buf, *
size
);

122 i‡(*
buf
 =
NULL
)

125 i‡(**
buf
 != '\0')

126 
	`BUF_°æˇt
(*
buf
, ", ", *
size
);

127 
	`BUF_°æˇt
(*
buf
, 
s
, *
size
);

130 
	}
}

132 
	$utû_Êags
(
BIO
 *
bio_out
, 
Êags
, c⁄° *
ödít
)

134 
°¨ãd
 = 0, 
îr
 = 0;

136 
	`BIO_¥ötf
(
bio_out
, "%s%s(öpuàÊags): ", 
ödít
, indent);

137 if(
Êags
 == 0)

139 
	`BIO_¥ötf
(
bio_out
, "<no flags>\n");

144 if(
Êags
 & 
ENGINE_CMD_FLAG_INTERNAL
)

146 
	`BIO_¥ötf
(
bio_out
, "[Internal] ");

149 if(
Êags
 & 
ENGINE_CMD_FLAG_NUMERIC
)

151 
	`BIO_¥ötf
(
bio_out
, "NUMERIC");

152 
°¨ãd
 = 1;

158 if(
Êags
 & 
ENGINE_CMD_FLAG_STRING
)

160 if(
°¨ãd
)

162 
	`BIO_¥ötf
(
bio_out
, "|");

163 
îr
 = 1;

165 
	`BIO_¥ötf
(
bio_out
, "STRING");

166 
°¨ãd
 = 1;

168 if(
Êags
 & 
ENGINE_CMD_FLAG_NO_INPUT
)

170 if(
°¨ãd
)

172 
	`BIO_¥ötf
(
bio_out
, "|");

173 
îr
 = 1;

175 
	`BIO_¥ötf
(
bio_out
, "NO_INPUT");

176 
°¨ãd
 = 1;

179 
Êags
 = fœg†& ~
ENGINE_CMD_FLAG_NUMERIC
 &

180 ~
ENGINE_CMD_FLAG_STRING
 &

181 ~
ENGINE_CMD_FLAG_NO_INPUT
 &

182 ~
ENGINE_CMD_FLAG_INTERNAL
;

183 if(
Êags
)

185 if(
°¨ãd
Ë
	`BIO_¥ötf
(
bio_out
, "|");

186 
	`BIO_¥ötf
(
bio_out
, "<0x%04X>", 
Êags
);

188 if(
îr
)

189 
	`BIO_¥ötf
(
bio_out
, " <illegal flags!>");

190 
	`BIO_¥ötf
(
bio_out
, "\n");

192 
	}
}

194 
	$utû_vîbo£
(
ENGINE
 *
e
, 
vîbo£
, 
BIO
 *
bio_out
, c⁄° *
ödít
)

196 c⁄° 
löe_wøp
 = 78;

197 
num
;

198 
ªt
 = 0;

199 *
«me
 = 
NULL
;

200 *
desc
 = 
NULL
;

201 
Êags
;

202 
xpos
 = 0;

203 
	`STACK_OF
(
OPENSSL_STRING
Ë*
cmds
 = 
NULL
;

204 if(!
	`ENGINE_˘æ
(
e
, 
ENGINE_CTRL_HAS_CTRL_FUNCTION
, 0, 
NULL
, NULL) ||

205 ((
num
 = 
	`ENGINE_˘æ
(
e
, 
ENGINE_CTRL_GET_FIRST_CMD_TYPE
,

206 0, 
NULL
, NULL)) <= 0))

209 
	`BIO_¥ötf
(
bio_out
, "%s<nÿc⁄åﬁ comm™ds>\n", 
ödít
);

214 
cmds
 = 
	`sk_OPENSSL_STRING_√w_nuŒ
();

216 if(!
cmds
)

217 
îr
;

219 
Àn
;

221 if((
Êags
 = 
	`ENGINE_˘æ
(
e
, 
ENGINE_CTRL_GET_CMD_FLAGS
, 
num
,

222 
NULL
, NULL)) < 0)

223 
îr
;

224 i‡(!(
Êags
 & 
ENGINE_CMD_FLAG_INTERNAL
Ë|| 
vîbo£
 >= 4)

227 if((
Àn
 = 
	`ENGINE_˘æ
(
e
, 
ENGINE_CTRL_GET_NAME_LEN_FROM_CMD
, 
num
,

228 
NULL
, NULL)) <= 0)

229 
îr
;

230 if((
«me
 = 
	`OPENSSL_mÆloc
(
Àn
 + 1)Ë=
NULL
)

231 
îr
;

232 if(
	`ENGINE_˘æ
(
e
, 
ENGINE_CTRL_GET_NAME_FROM_CMD
, 
num
, 
«me
,

233 
NULL
) <= 0)

234 
îr
;

236 if((
Àn
 = 
	`ENGINE_˘æ
(
e
, 
ENGINE_CTRL_GET_DESC_LEN_FROM_CMD
, 
num
,

237 
NULL
, NULL)) < 0)

238 
îr
;

239 if(
Àn
 > 0)

241 if((
desc
 = 
	`OPENSSL_mÆloc
(
Àn
 + 1)Ë=
NULL
)

242 
îr
;

243 if(
	`ENGINE_˘æ
(
e
, 
ENGINE_CTRL_GET_DESC_FROM_CMD
, 
num
, 
desc
,

244 
NULL
) <= 0)

245 
îr
;

248 if(
xpos
 == 0)

250 
xpos
 = 
	`BIO_puts
(
bio_out
, 
ödít
);

253 
xpos
 +
	`BIO_¥ötf
(
bio_out
, ", ");

254 if(
vîbo£
 == 1)

257 if((
xpos
 > ()
	`°æí
(
ödít
)) &&

258 (
xpos
 + ()
	`°æí
(
«me
Ë> 
löe_wøp
))

260 
	`BIO_¥ötf
(
bio_out
, "\n");

261 
xpos
 = 
	`BIO_puts
(
bio_out
, 
ödít
);

263 
xpos
 +
	`BIO_¥ötf
(
bio_out
, "%s", 
«me
);

268 
	`BIO_¥ötf
(
bio_out
, "%s: %s\n", 
«me
,

269 (
desc
 =
NULL
) ? "<no description>" : desc);

271 if((
vîbo£
 >3Ë&& !
	`utû_Êags
(
bio_out
, 
Êags
,

272 
ödít
))

273 
îr
;

274 
xpos
 = 0;

277 
	`OPENSSL_‰ì
(
«me
);Çamê
NULL
;

278 if(
desc
Ë{ 
	`OPENSSL_‰ì
(desc); des¯
NULL
; }

280 
num
 = 
	`ENGINE_˘æ
(
e
, 
ENGINE_CTRL_GET_NEXT_CMD_TYPE
,

281 
num
, 
NULL
, NULL);

282 } 
num
 > 0);

283 if(
xpos
 > 0)

284 
	`BIO_¥ötf
(
bio_out
, "\n");

285 
ªt
 = 1;

286 
îr
:

287 if(
cmds
Ë
	`sk_OPENSSL_STRING_p›_‰ì
(cmds, 
idítôy
);

288 if(
«me
Ë
	`OPENSSL_‰ì
(name);

289 if(
desc
Ë
	`OPENSSL_‰ì
(desc);

290  
ªt
;

291 
	}
}

293 
utû_do_cmds
(
ENGINE
 *
e
, 
STACK_OF
(
OPENSSL_STRING
Ë*
cmds
,

294 
BIO
 *
bio_out
, c⁄° *
ödít
)

296 
	glo›
, 
	gªs
, 
	gnum
 = 
sk_OPENSSL_STRING_num
(
cmds
);

298 if(
	gnum
 < 0)

300 
BIO_¥ötf
(
bio_out
, "[Error]: internal stackÉrror\n");

303 
	glo›
 = 0;Üo› < 
	gnum
;Üoop++)

305 
	gbuf
[256];

306 c⁄° *
	gcmd
, *
	g¨g
;

307 
	gcmd
 = 
sk_OPENSSL_STRING_vÆue
(
cmds
, 
lo›
);

308 
	gªs
 = 1;

310 if((
	g¨g
 = 
°r°r
(
cmd
, ":")Ë=
NULL
)

312 if(!
ENGINE_˘æ_cmd_°rög
(
e
, 
cmd
, 
NULL
, 0))

313 
ªs
 = 0;

317 if(()(
	g¨g
 - 
	gcmd
) > 254)

319 
BIO_¥ötf
(
bio_out
,"[Error]: commandÇameÅooÜong\n");

322 
mem˝y
(
buf
, 
cmd
, ()(
¨g
 - cmd));

323 
	gbuf
[
¨g
-
cmd
] = '\0';

324 
	g¨g
++;

326 if(!
ENGINE_˘æ_cmd_°rög
(
e
, 
buf
, 
¨g
, 0))

327 
	gªs
 = 0;

329 if(
	gªs
)

330 
BIO_¥ötf
(
bio_out
, "[Suc˚ss]: %s\n", 
cmd
);

333 
BIO_¥ötf
(
bio_out
, "[Faûuª]: %s\n", 
cmd
);

334 
ERR_¥öt_îr‹s
(
bio_out
);

339 
MAIN
(, **);

341 
	$MAIN
(
¨gc
, **
¨gv
)

343 
ªt
=1,
i
;

344 c⁄° **
µ
;

345 
vîbo£
=0, 
li°_ˇp
=0, 
ã°_avaû
=0, 
ã°_avaû_noi£
 = 0;

346 
ENGINE
 *
e
;

347 
	`STACK_OF
(
OPENSSL_STRING
Ë*
ígöes
 = 
	`sk_OPENSSL_STRING_√w_nuŒ
();

348 
	`STACK_OF
(
OPENSSL_STRING
Ë*
¥e_cmds
 = 
	`sk_OPENSSL_STRING_√w_nuŒ
();

349 
	`STACK_OF
(
OPENSSL_STRING
Ë*
po°_cmds
 = 
	`sk_OPENSSL_STRING_√w_nuŒ
();

350 
bad›s
=1;

351 
BIO
 *
bio_out
=
NULL
;

352 c⁄° *
ödít
 = " ";

354 
	`≠ps_°¨tup
();

355 
	`SSL_lﬂd_îr‹_°rögs
();

357 i‡(
bio_îr
 =
NULL
)

358 
bio_îr
=
	`BIO_√w_Â
(
°dîr
,
BIO_NOCLOSE
);

360 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

361 
íd
;

362 
bio_out
=
	`BIO_√w_Â
(
°dout
,
BIO_NOCLOSE
);

363 #ifde‡
OPENSSL_SYS_VMS


365 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

366 
bio_out
 = 
	`BIO_push
(
tmpbio
, bio_out);

370 
¨gc
--;

371 
¨gv
++;

372 
¨gc
 >= 1)

374 i‡(
	`°∫cmp
(*
¨gv
,"-v",2) == 0)

376 if(
	`°r•n
(*
¨gv
 + 1, "v"Ë< 
	`°æí
(*argv + 1))

377 
skù_¨g_lo›
;

378 if((
vîbo£
=
	`°æí
(*
¨gv
 + 1)) > 4)

379 
skù_¨g_lo›
;

381 i‡(
	`°rcmp
(*
¨gv
,"-c") == 0)

382 
li°_ˇp
=1;

383 i‡(
	`°∫cmp
(*
¨gv
,"-t",2) == 0)

385 
ã°_avaû
=1;

386 if(
	`°r•n
(*
¨gv
 + 1, "t"Ë< 
	`°æí
(*argv + 1))

387 
skù_¨g_lo›
;

388 if((
ã°_avaû_noi£
 = 
	`°æí
(*
¨gv
 + 1) - 1) > 1)

389 
skù_¨g_lo›
;

391 i‡(
	`°rcmp
(*
¨gv
,"-pre") == 0)

393 
¨gc
--; 
¨gv
++;

394 i‡(
¨gc
 == 0)

395 
skù_¨g_lo›
;

396 
	`sk_OPENSSL_STRING_push
(
¥e_cmds
,*
¨gv
);

398 i‡(
	`°rcmp
(*
¨gv
,"-post") == 0)

400 
¨gc
--; 
¨gv
++;

401 i‡(
¨gc
 == 0)

402 
skù_¨g_lo›
;

403 
	`sk_OPENSSL_STRING_push
(
po°_cmds
,*
¨gv
);

405 i‡((
	`°∫cmp
(*
¨gv
,"-h",2) == 0) ||

406 (
	`°rcmp
(*
¨gv
,"-?") == 0))

407 
skù_¨g_lo›
;

409 
	`sk_OPENSSL_STRING_push
(
ígöes
,*
¨gv
);

410 
¨gc
--;

411 
¨gv
++;

414 
bad›s
 = 0;

415 
skù_¨g_lo›
:

417 i‡(
bad›s
)

419 
µ
=
ígöe_ußge
; (*µ !
NULL
);Öp++)

420 
	`BIO_¥ötf
(
bio_îr
,"%s",*
µ
);

421 
íd
;

424 i‡(
	`sk_OPENSSL_STRING_num
(
ígöes
) == 0)

426 
e
 = 
	`ENGINE_gë_fú°
();É !
NULL
;É = 
	`ENGINE_gë_√xt
(e))

428 
	`sk_OPENSSL_STRING_push
(
ígöes
,(*)
	`ENGINE_gë_id
(
e
));

432 
i
=0; i<
	`sk_OPENSSL_STRING_num
(
ígöes
); i++)

434 c⁄° *
id
 = 
	`sk_OPENSSL_STRING_vÆue
(
ígöes
,
i
);

435 i‡((
e
 = 
	`ENGINE_by_id
(
id
)Ë!
NULL
)

437 c⁄° *
«me
 = 
	`ENGINE_gë_«me
(
e
);

439 
	`BIO_¥ötf
(
bio_out
, "(%sË%s\n", 
id
, 
«me
);

440 
	`utû_do_cmds
(
e
, 
¥e_cmds
, 
bio_out
, 
ödít
);

441 i‡(
	`°rcmp
(
	`ENGINE_gë_id
(
e
), 
id
) != 0)

443 
	`BIO_¥ötf
(
bio_out
, "Loaded: (%s) %s\n",

444 
	`ENGINE_gë_id
(
e
), 
	`ENGINE_gë_«me
(e));

446 i‡(
li°_ˇp
)

448 
ˇp_size
 = 256;

449 *
ˇp_buf
 = 
NULL
;

450 
k
,
n
;

451 c⁄° *
nids
;

452 
ENGINE_CIPHERS_PTR
 
‚_c
;

453 
ENGINE_DIGESTS_PTR
 
‚_d
;

454 
ENGINE_PKEY_METHS_PTR
 
‚_pk
;

456 i‡(
	`ENGINE_gë_RSA
(
e
Ë!
NULL


457 && !
	`≠≥nd_buf
(&
ˇp_buf
, "RSA",

458 &
ˇp_size
, 256))

459 
íd
;

460 i‡(
	`ENGINE_gë_DSA
(
e
Ë!
NULL


461 && !
	`≠≥nd_buf
(&
ˇp_buf
, "DSA",

462 &
ˇp_size
, 256))

463 
íd
;

464 i‡(
	`ENGINE_gë_DH
(
e
Ë!
NULL


465 && !
	`≠≥nd_buf
(&
ˇp_buf
, "DH",

466 &
ˇp_size
, 256))

467 
íd
;

468 i‡(
	`ENGINE_gë_RAND
(
e
Ë!
NULL


469 && !
	`≠≥nd_buf
(&
ˇp_buf
, "RAND",

470 &
ˇp_size
, 256))

471 
íd
;

473 
‚_c
 = 
	`ENGINE_gë_cùhîs
(
e
);

474 if(!
‚_c
Ë
skù_cùhîs
;

475 
n
 = 
	`‚_c
(
e
, 
NULL
, &
nids
, 0);

476 
k
=0 ; k < 
n
 ; ++k)

477 if(!
	`≠≥nd_buf
(&
ˇp_buf
,

478 
	`OBJ_nid2¢
(
nids
[
k
]),

479 &
ˇp_size
, 256))

480 
íd
;

482 
skù_cùhîs
:

483 
‚_d
 = 
	`ENGINE_gë_dige°s
(
e
);

484 if(!
‚_d
Ë
skù_dige°s
;

485 
n
 = 
	`‚_d
(
e
, 
NULL
, &
nids
, 0);

486 
k
=0 ; k < 
n
 ; ++k)

487 if(!
	`≠≥nd_buf
(&
ˇp_buf
,

488 
	`OBJ_nid2¢
(
nids
[
k
]),

489 &
ˇp_size
, 256))

490 
íd
;

492 
skù_dige°s
:

493 
‚_pk
 = 
	`ENGINE_gë_pkey_mëhs
(
e
);

494 if(!
‚_pk
Ë
skù_pmëhs
;

495 
n
 = 
	`‚_pk
(
e
, 
NULL
, &
nids
, 0);

496 
k
=0 ; k < 
n
 ; ++k)

497 if(!
	`≠≥nd_buf
(&
ˇp_buf
,

498 
	`OBJ_nid2¢
(
nids
[
k
]),

499 &
ˇp_size
, 256))

500 
íd
;

501 
skù_pmëhs
:

502 i‡(
ˇp_buf
 && (*cap_buf != '\0'))

503 
	`BIO_¥ötf
(
bio_out
, " [%s]\n", 
ˇp_buf
);

505 
	`OPENSSL_‰ì
(
ˇp_buf
);

507 if(
ã°_avaû
)

509 
	`BIO_¥ötf
(
bio_out
, "%s", 
ödít
);

510 i‡(
	`ENGINE_öô
(
e
))

512 
	`BIO_¥ötf
(
bio_out
, "[ávailable ]\n");

513 
	`utû_do_cmds
(
e
, 
po°_cmds
, 
bio_out
, 
ödít
);

514 
	`ENGINE_föish
(
e
);

518 
	`BIO_¥ötf
(
bio_out
, "[ unavailable ]\n");

519 if(
ã°_avaû_noi£
)

520 
	`ERR_¥öt_îr‹s_Â
(
°dout
);

521 
	`ERR_˛ór_îr‹
();

524 if((
vîbo£
 > 0Ë&& !
	`utû_vîbo£
(
e
, vîbo£, 
bio_out
, 
ödít
))

525 
íd
;

526 
	`ENGINE_‰ì
(
e
);

529 
	`ERR_¥öt_îr‹s
(
bio_îr
);

532 
ªt
=0;

533 
íd
:

535 
	`ERR_¥öt_îr‹s
(
bio_îr
);

536 
	`sk_OPENSSL_STRING_p›_‰ì
(
ígöes
, 
idítôy
);

537 
	`sk_OPENSSL_STRING_p›_‰ì
(
¥e_cmds
, 
idítôy
);

538 
	`sk_OPENSSL_STRING_p›_‰ì
(
po°_cmds
, 
idítôy
);

539 i‡(
bio_out
 !
NULL
Ë
	`BIO_‰ì_Æl
(bio_out);

540 
	`≠ps_shutdown
();

541 
	`OPENSSL_EXIT
(
ªt
);

542 
	}
}

545 #i‡
PEDANTIC


546 *
	gdummy
=&
dummy
;

	@errstr.c

59 
	~<°dio.h
>

60 
	~<°dlib.h
>

61 
	~<°rög.h
>

62 
	~"≠ps.h
"

63 
	~<›ís¶/bio.h
>

64 
	~<›ís¶/lhash.h
>

65 
	~<›ís¶/îr.h
>

66 
	~<›ís¶/s¶.h
>

68 #unde‡
PROG


69 
	#PROG
 
îr°r_maö


	)

71 
MAIN
(, **);

73 
	$MAIN
(
¨gc
, **
¨gv
)

75 
i
,
ªt
=0;

76 
buf
[256];

77 
l
;

79 
	`≠ps_°¨tup
();

81 i‡(
bio_îr
 =
NULL
)

82 i‡((
bio_îr
=
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

83 
	`BIO_£t_Â
(
bio_îr
,
°dîr
,
BIO_NOCLOSE
|
BIO_FP_TEXT
);

85 
	`SSL_lﬂd_îr‹_°rögs
();

87 i‡((
¨gc
 > 1Ë&& (
	`°rcmp
(
¨gv
[1],"-stats") == 0))

89 
BIO
 *
out
=
NULL
;

91 
out
=
	`BIO_√w
(
	`BIO_s_fûe
());

92 i‡((
out
 !
NULL
Ë&& 
	`BIO_£t_Â
(out,
°dout
,
BIO_NOCLOSE
))

94 #ifde‡
OPENSSL_SYS_VMS


96 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

97 
out
 = 
	`BIO_push
(
tmpbio
, out);

100 
	`lh_ERR_STRING_DATA_node_°©s_bio
(

101 
	`ERR_gë_°rög_èbÀ
(), 
out
);

102 
	`lh_ERR_STRING_DATA_°©s_bio
(
	`ERR_gë_°rög_èbÀ
(),

103 
out
);

104 
	`lh_ERR_STRING_DATA_node_ußge_°©s_bio
(

105 
	`ERR_gë_°rög_èbÀ
(),
out
);

107 i‡(
out
 !
NULL
Ë
	`BIO_‰ì_Æl
(out);

108 
¨gc
--;

109 
¨gv
++;

112 
i
=1; i<
¨gc
; i++)

114 i‡(
	`ssˇnf
(
¨gv
[
i
],"%lx",&
l
))

116 
	`ERR_îr‹_°rög_n
(
l
, 
buf
,  buf);

117 
	`¥ötf
("%s\n",
buf
);

121 
	`¥ötf
("%s: badÉº‹ code\n",
¨gv
[
i
]);

122 
	`¥ötf
("usage:Érrstr [-stats] <errno> ...\n");

123 
ªt
++;

126 
	`≠ps_shutdown
();

127 
	`OPENSSL_EXIT
(
ªt
);

128 
	}
}

	@gendh.c

60 
	~<›ís¶/›ís¶c⁄f.h
>

63 #ifde‡
OPENSSL_NO_DEPRECATED


64 #unde‡
OPENSSL_NO_DEPRECATED


67 #i‚de‡
OPENSSL_NO_DH


68 
	~<°dio.h
>

69 
	~<°rög.h
>

70 
	~<sys/ty≥s.h
>

71 
	~<sys/°©.h
>

72 
	~"≠ps.h
"

73 
	~<›ís¶/bio.h
>

74 
	~<›ís¶/ønd.h
>

75 
	~<›ís¶/îr.h
>

76 
	~<›ís¶/bn.h
>

77 
	~<›ís¶/dh.h
>

78 
	~<›ís¶/x509.h
>

79 
	~<›ís¶/≥m.h
>

81 
	#DEFBITS
 512

	)

82 #unde‡
PROG


83 
	#PROG
 
gídh_maö


	)

85 
MS_CALLBACK
 
dh_cb
(
p
, 
n
, 
BN_GENCB
 *
cb
);

87 
MAIN
(, **);

89 
	$MAIN
(
¨gc
, **
¨gv
)

91 
BN_GENCB
 
cb
;

92 
DH
 *
dh
=
NULL
;

93 
ªt
=1,
num
=
DEFBITS
;

94 
g
=2;

95 *
outfûe
=
NULL
;

96 *
öønd
=
NULL
;

97 #i‚de‡
OPENSSL_NO_ENGINE


98 *
ígöe
=
NULL
;

100 
BIO
 *
out
=
NULL
;

102 
	`≠ps_°¨tup
();

104 
	`BN_GENCB_£t
(&
cb
, 
dh_cb
, 
bio_îr
);

105 i‡(
bio_îr
 =
NULL
)

106 i‡((
bio_îr
=
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

107 
	`BIO_£t_Â
(
bio_îr
,
°dîr
,
BIO_NOCLOSE
|
BIO_FP_TEXT
);

109 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

110 
íd
;

112 
¨gv
++;

113 
¨gc
--;

116 i‡(
¨gc
 <= 0) ;

117 i‡(
	`°rcmp
(*
¨gv
,"-out") == 0)

119 i‡(--
¨gc
 < 1Ë
bad
;

120 
outfûe
*(++
¨gv
);

122 i‡(
	`°rcmp
(*
¨gv
,"-2") == 0)

123 
g
=2;

126 i‡(
	`°rcmp
(*
¨gv
,"-5") == 0)

127 
g
=5;

128 #i‚de‡
OPENSSL_NO_ENGINE


129 i‡(
	`°rcmp
(*
¨gv
,"-engine") == 0)

131 i‡(--
¨gc
 < 1Ë
bad
;

132 
ígöe
*(++
¨gv
);

135 i‡(
	`°rcmp
(*
¨gv
,"-rand") == 0)

137 i‡(--
¨gc
 < 1Ë
bad
;

138 
öønd
*(++
¨gv
);

142 
¨gv
++;

143 
¨gc
--;

145 i‡((
¨gc
 >1Ë&& ((
	`ssˇnf
(*
¨gv
,"%d",&
num
) == 0) || (num < 0)))

147 
bad
:

148 
	`BIO_¥ötf
(
bio_îr
,"usage: gendh [args] [numbits]\n");

149 
	`BIO_¥ötf
(
bio_îr
," -out file - outputÅhe keyÅo 'file\n");

150 
	`BIO_¥ötf
(
bio_îr
," -2 - use 2ásÅhe generator value\n");

152 
	`BIO_¥ötf
(
bio_îr
," -5 - use 5ásÅhe generator value\n");

153 #i‚de‡
OPENSSL_NO_ENGINE


154 
	`BIO_¥ötf
(
bio_îr
," -engineÉ - useÉngineÉ,Öossiblyá hardware device.\n");

156 
	`BIO_¥ötf
(
bio_îr
," -ønd fûe%cfûe%c...\n", 
LIST_SEPARATOR_CHAR
, LIST_SEPARATOR_CHAR);

157 
	`BIO_¥ötf
(
bio_îr
," -ÜoadÅhe file (orÅhe files inÅhe directory) into\n");

158 
	`BIO_¥ötf
(
bio_îr
,"ÅheÑandomÇumber generator\n");

159 
íd
;

162 #i‚de‡
OPENSSL_NO_ENGINE


163 
	`£tup_ígöe
(
bio_îr
, 
ígöe
, 0);

166 
out
=
	`BIO_√w
(
	`BIO_s_fûe
());

167 i‡(
out
 =
NULL
)

169 
	`ERR_¥öt_îr‹s
(
bio_îr
);

170 
íd
;

173 i‡(
outfûe
 =
NULL
)

175 
	`BIO_£t_Â
(
out
,
°dout
,
BIO_NOCLOSE
);

176 #ifde‡
OPENSSL_SYS_VMS


178 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

179 
out
 = 
	`BIO_push
(
tmpbio
, out);

185 i‡(
	`BIO_wrôe_fûíame
(
out
,
outfûe
) <= 0)

187 
	`≥º‹
(
outfûe
);

188 
íd
;

192 i‡(!
	`≠p_RAND_lﬂd_fûe
(
NULL
, 
bio_îr
, 1Ë&& 
öønd
 == NULL)

194 
	`BIO_¥ötf
(
bio_îr
,"warning,Çot muchÉxtraÑandom data, consider usingÅhe -rand option\n");

196 i‡(
öønd
 !
NULL
)

197 
	`BIO_¥ötf
(
bio_îr
,"%ld semi-random bytesÜoaded\n",

198 
	`≠p_RAND_lﬂd_fûes
(
öønd
));

200 
	`BIO_¥ötf
(
bio_îr
,"Gíî©ög DHÖ¨amëîs, %d bôÜ⁄g sa„Örime, gíî©‹ %d\n",
num
,
g
);

201 
	`BIO_¥ötf
(
bio_îr
,"This is goingÅoÅakeáÜongÅime\n");

203 if(((
dh
 = 
	`DH_√w
()Ë=
NULL
Ë|| !
	`DH_gíî©e_∑ømëîs_ex
(dh, 
num
, 
g
, &
cb
))

204 
íd
;

206 
	`≠p_RAND_wrôe_fûe
(
NULL
, 
bio_îr
);

208 i‡(!
	`PEM_wrôe_bio_DH∑øms
(
out
,
dh
))

209 
íd
;

210 
ªt
=0;

211 
íd
:

212 i‡(
ªt
 != 0)

213 
	`ERR_¥öt_îr‹s
(
bio_îr
);

214 i‡(
out
 !
NULL
Ë
	`BIO_‰ì_Æl
(out);

215 i‡(
dh
 !
NULL
Ë
	`DH_‰ì
(dh);

216 
	`≠ps_shutdown
();

217 
	`OPENSSL_EXIT
(
ªt
);

218 
	}
}

220 
MS_CALLBACK
 
	$dh_cb
(
p
, 
n
, 
BN_GENCB
 *
cb
)

222 
c
='*';

224 i‡(
p
 =0Ë
c
='.';

225 i‡(
p
 =1Ë
c
='+';

226 i‡(
p
 =2Ë
c
='*';

227 i‡(
p
 =3Ë
c
='\n';

228 
	`BIO_wrôe
(
cb
->
¨g
,&
c
,1);

229 ()
	`BIO_Êush
(
cb
->
¨g
);

230 #ifde‡
LINT


231 
p
=
n
;

234 
	}
}

237 #i‡
PEDANTIC


238 *
	gdummy
=&
dummy
;

	@gendsa.c

59 
	~<›ís¶/›ís¶c⁄f.h
>

60 #i‚de‡
OPENSSL_NO_DSA


61 
	~<°dio.h
>

62 
	~<°rög.h
>

63 
	~<sys/ty≥s.h
>

64 
	~<sys/°©.h
>

65 
	~"≠ps.h
"

66 
	~<›ís¶/bio.h
>

67 
	~<›ís¶/îr.h
>

68 
	~<›ís¶/bn.h
>

69 
	~<›ís¶/dß.h
>

70 
	~<›ís¶/x509.h
>

71 
	~<›ís¶/≥m.h
>

73 
	#DEFBITS
 512

	)

74 #unde‡
PROG


75 
	#PROG
 
gídß_maö


	)

77 
MAIN
(, **);

79 
	$MAIN
(
¨gc
, **
¨gv
)

81 
DSA
 *
dß
=
NULL
;

82 
ªt
=1;

83 *
outfûe
=
NULL
;

84 *
öønd
=
NULL
,*
dß∑øms
=NULL;

85 *
∑sßrgout
 = 
NULL
, *
∑ssout
 = NULL;

86 
BIO
 *
out
=
NULL
,*
ö
=NULL;

87 c⁄° 
EVP_CIPHER
 *
íc
=
NULL
;

88 #i‚de‡
OPENSSL_NO_ENGINE


89 *
ígöe
=
NULL
;

92 
	`≠ps_°¨tup
();

94 i‡(
bio_îr
 =
NULL
)

95 i‡((
bio_îr
=
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

96 
	`BIO_£t_Â
(
bio_îr
,
°dîr
,
BIO_NOCLOSE
|
BIO_FP_TEXT
);

98 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

99 
íd
;

101 
¨gv
++;

102 
¨gc
--;

105 i‡(
¨gc
 <= 0) ;

106 i‡(
	`°rcmp
(*
¨gv
,"-out") == 0)

108 i‡(--
¨gc
 < 1Ë
bad
;

109 
outfûe
*(++
¨gv
);

111 i‡(
	`°rcmp
(*
¨gv
,"-passout") == 0)

113 i‡(--
¨gc
 < 1Ë
bad
;

114 
∑sßrgout
*(++
¨gv
);

116 #i‚de‡
OPENSSL_NO_ENGINE


117 i‡(
	`°rcmp
(*
¨gv
,"-engine") == 0)

119 i‡(--
¨gc
 < 1Ë
bad
;

120 
ígöe
*(++
¨gv
);

123 i‡(
	`°rcmp
(*
¨gv
,"-rand") == 0)

125 i‡(--
¨gc
 < 1Ë
bad
;

126 
öønd
*(++
¨gv
);

128 i‡(
	`°rcmp
(*
¨gv
,"-") == 0)

129 
bad
;

130 #i‚de‡
OPENSSL_NO_DES


131 i‡(
	`°rcmp
(*
¨gv
,"-des") == 0)

132 
íc
=
	`EVP_des_cbc
();

133 i‡(
	`°rcmp
(*
¨gv
,"-des3") == 0)

134 
íc
=
	`EVP_des_ede3_cbc
();

136 #i‚de‡
OPENSSL_NO_IDEA


137 i‡(
	`°rcmp
(*
¨gv
,"-idea") == 0)

138 
íc
=
	`EVP_idó_cbc
();

140 #i‚de‡
OPENSSL_NO_SEED


141 i‡(
	`°rcmp
(*
¨gv
,"-seed") == 0)

142 
íc
=
	`EVP_£ed_cbc
();

144 #i‚de‡
OPENSSL_NO_AES


145 i‡(
	`°rcmp
(*
¨gv
,"-aes128") == 0)

146 
íc
=
	`EVP_´s_128_cbc
();

147 i‡(
	`°rcmp
(*
¨gv
,"-aes192") == 0)

148 
íc
=
	`EVP_´s_192_cbc
();

149 i‡(
	`°rcmp
(*
¨gv
,"-aes256") == 0)

150 
íc
=
	`EVP_´s_256_cbc
();

152 #i‚de‡
OPENSSL_NO_CAMELLIA


153 i‡(
	`°rcmp
(*
¨gv
,"-camellia128") == 0)

154 
íc
=
	`EVP_ˇmñlü_128_cbc
();

155 i‡(
	`°rcmp
(*
¨gv
,"-camellia192") == 0)

156 
íc
=
	`EVP_ˇmñlü_192_cbc
();

157 i‡(
	`°rcmp
(*
¨gv
,"-camellia256") == 0)

158 
íc
=
	`EVP_ˇmñlü_256_cbc
();

160 i‡(**
¨gv
 !'-' && 
dß∑øms
 =
NULL
)

162 
dß∑øms
 = *
¨gv
;

165 
bad
;

166 
¨gv
++;

167 
¨gc
--;

170 i‡(
dß∑øms
 =
NULL
)

172 
bad
:

173 
	`BIO_¥ötf
(
bio_îr
,"usage: gendsa [args] dsaparam-file\n");

174 
	`BIO_¥ötf
(
bio_îr
," -out file - outputÅhe keyÅo 'file'\n");

175 #i‚de‡
OPENSSL_NO_DES


176 
	`BIO_¥ötf
(
bio_îr
," -des -ÉncryptÅhe generated key with DES in cbc mode\n");

177 
	`BIO_¥ötf
(
bio_îr
," -des3 -ÉncryptÅhe generated key with DES inÉde cbc mode (168 bit key)\n");

179 #i‚de‡
OPENSSL_NO_IDEA


180 
	`BIO_¥ötf
(
bio_îr
," -idea -ÉncryptÅhe generated key with IDEA in cbc mode\n");

182 #i‚de‡
OPENSSL_NO_SEED


183 
	`BIO_¥ötf
(
bio_îr
," -seed\n");

184 
	`BIO_¥ötf
(
bio_îr
,"Éncrypt PEM output with cbc seed\n");

186 #i‚de‡
OPENSSL_NO_AES


187 
	`BIO_¥ötf
(
bio_îr
," -aes128, -aes192, -aes256\n");

188 
	`BIO_¥ötf
(
bio_îr
,"Éncrypt PEM output with cbcáes\n");

190 #i‚de‡
OPENSSL_NO_CAMELLIA


191 
	`BIO_¥ötf
(
bio_îr
," -camellia128, -camellia192, -camellia256\n");

192 
	`BIO_¥ötf
(
bio_îr
,"Éncrypt PEM output with cbc camellia\n");

194 #i‚de‡
OPENSSL_NO_ENGINE


195 
	`BIO_¥ötf
(
bio_îr
," -engineÉ - useÉngineÉ,Öossiblyá hardware device.\n");

197 
	`BIO_¥ötf
(
bio_îr
," -ønd fûe%cfûe%c...\n", 
LIST_SEPARATOR_CHAR
, LIST_SEPARATOR_CHAR);

198 
	`BIO_¥ötf
(
bio_îr
," -ÜoadÅhe file (orÅhe files inÅhe directory) into\n");

199 
	`BIO_¥ötf
(
bio_îr
,"ÅheÑandomÇumber generator\n");

200 
	`BIO_¥ötf
(
bio_îr
," dsaparam-file\n");

201 
	`BIO_¥ötf
(
bio_îr
," -á DSAÖarameter fileás generated byÅhe dsaparam command\n");

202 
íd
;

205 #i‚de‡
OPENSSL_NO_ENGINE


206 
	`£tup_ígöe
(
bio_îr
, 
ígöe
, 0);

209 if(!
	`≠p_∑sswd
(
bio_îr
, 
NULL
, 
∑sßrgout
, NULL, &
∑ssout
)) {

210 
	`BIO_¥ötf
(
bio_îr
, "Error gettingÖassword\n");

211 
íd
;

215 
ö
=
	`BIO_√w
(
	`BIO_s_fûe
());

216 i‡(!(
	`BIO_ªad_fûíame
(
ö
,
dß∑øms
)))

218 
	`≥º‹
(
dß∑øms
);

219 
íd
;

222 i‡((
dß
=
	`PEM_ªad_bio_DSA∑øms
(
ö
,
NULL
,NULL,NULL)) == NULL)

224 
	`BIO_¥ötf
(
bio_îr
,"unableÅoÜoad DSAÖarameter file\n");

225 
íd
;

227 
	`BIO_‰ì
(
ö
);

228 
ö
 = 
NULL
;

230 
out
=
	`BIO_√w
(
	`BIO_s_fûe
());

231 i‡(
out
 =
NULL
Ë
íd
;

233 i‡(
outfûe
 =
NULL
)

235 
	`BIO_£t_Â
(
out
,
°dout
,
BIO_NOCLOSE
);

236 #ifde‡
OPENSSL_SYS_VMS


238 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

239 
out
 = 
	`BIO_push
(
tmpbio
, out);

245 i‡(
	`BIO_wrôe_fûíame
(
out
,
outfûe
) <= 0)

247 
	`≥º‹
(
outfûe
);

248 
íd
;

252 i‡(!
	`≠p_RAND_lﬂd_fûe
(
NULL
, 
bio_îr
, 1Ë&& 
öønd
 == NULL)

254 
	`BIO_¥ötf
(
bio_îr
,"warning,Çot muchÉxtraÑandom data, consider usingÅhe -rand option\n");

256 i‡(
öønd
 !
NULL
)

257 
	`BIO_¥ötf
(
bio_îr
,"%ld semi-random bytesÜoaded\n",

258 
	`≠p_RAND_lﬂd_fûes
(
öønd
));

260 
	`BIO_¥ötf
(
bio_îr
,"Generating DSA key, %d bits\n",

261 
	`BN_num_bôs
(
dß
->
p
));

262 i‡(!
	`DSA_gíî©e_key
(
dß
)Ë
íd
;

264 
	`≠p_RAND_wrôe_fûe
(
NULL
, 
bio_îr
);

266 i‡(!
	`PEM_wrôe_bio_DSAPriv©eKey
(
out
,
dß
,
íc
,
NULL
,0,NULL, 
∑ssout
))

267 
íd
;

268 
ªt
=0;

269 
íd
:

270 i‡(
ªt
 != 0)

271 
	`ERR_¥öt_îr‹s
(
bio_îr
);

272 i‡(
ö
 !
NULL
Ë
	`BIO_‰ì
(in);

273 i‡(
out
 !
NULL
Ë
	`BIO_‰ì_Æl
(out);

274 i‡(
dß
 !
NULL
Ë
	`DSA_‰ì
(dsa);

275 if(
∑ssout
Ë
	`OPENSSL_‰ì
(passout);

276 
	`≠ps_shutdown
();

277 
	`OPENSSL_EXIT
(
ªt
);

278 
	}
}

281 #i‡
PEDANTIC


282 *
	gdummy
=&
dummy
;

	@genpkey.c

58 
	~<°dio.h
>

59 
	~<°rög.h
>

60 
	~"≠ps.h
"

61 
	~<›ís¶/≥m.h
>

62 
	~<›ís¶/îr.h
>

63 
	~<›ís¶/evp.h
>

64 #i‚de‡
OPENSSL_NO_ENGINE


65 
	~<›ís¶/ígöe.h
>

68 
öô_keygí_fûe
(
BIO
 *
îr
, 
EVP_PKEY_CTX
 **
p˘x
,

69 c⁄° *
fûe
, 
ENGINE
 *
e
);

70 
gípkey_cb
(
EVP_PKEY_CTX
 *
˘x
);

72 
	#PROG
 
gípkey_maö


	)

74 
MAIN
(, **);

76 
	$MAIN
(
¨gc
, **
¨gv
)

78 
ENGINE
 *
e
 = 
NULL
;

79 **
¨gs
, *
outfûe
 = 
NULL
;

80 *
∑sßrg
 = 
NULL
;

81 
BIO
 *
ö
 = 
NULL
, *
out
 = NULL;

82 c⁄° 
EVP_CIPHER
 *
cùhî
 = 
NULL
;

83 
outf‹m©
;

84 
ãxt
 = 0;

85 
EVP_PKEY
 *
pkey
=
NULL
;

86 
EVP_PKEY_CTX
 *
˘x
 = 
NULL
;

87 *
∑ss
 = 
NULL
;

88 
bad¨g
 = 0;

89 
ªt
 = 1, 
rv
;

91 
do_∑øm
 = 0;

93 i‡(
bio_îr
 =
NULL
)

94 
bio_îr
 = 
	`BIO_√w_Â
 (
°dîr
, 
BIO_NOCLOSE
);

96 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

97 
íd
;

99 
outf‹m©
=
FORMAT_PEM
;

101 
	`ERR_lﬂd_¸y±o_°rögs
();

102 
	`O≥nSSL_add_Æl_Æg‹ôhms
();

103 
¨gs
 = 
¨gv
 + 1;

104 !
bad¨g
 && *
¨gs
 && *args[0] == '-')

106 i‡(!
	`°rcmp
(*
¨gs
,"-outform"))

108 i‡(
¨gs
[1])

110 
¨gs
++;

111 
outf‹m©
=
	`°r2fmt
(*
¨gs
);

113 
bad¨g
 = 1;

115 i‡(!
	`°rcmp
(*
¨gs
,"-pass"))

117 i‡(!
¨gs
[1]Ë
bad
;

118 
∑sßrg
*(++
¨gs
);

120 #i‚de‡
OPENSSL_NO_ENGINE


121 i‡(
	`°rcmp
(*
¨gs
,"-engine") == 0)

123 i‡(!
¨gs
[1])

124 
bad
;

125 
e
 = 
	`£tup_ígöe
(
bio_îr
, *(++
¨gs
), 0);

128 i‡(!
	`°rcmp
 (*
¨gs
, "-paramfile"))

130 i‡(!
¨gs
[1])

131 
bad
;

132 
¨gs
++;

133 i‡(
do_∑øm
 == 1)

134 
bad
;

135 i‡(!
	`öô_keygí_fûe
(
bio_îr
, &
˘x
, *
¨gs
, 
e
))

136 
íd
;

138 i‡(!
	`°rcmp
 (*
¨gs
, "-out"))

140 i‡(
¨gs
[1])

142 
¨gs
++;

143 
outfûe
 = *
¨gs
;

145 
bad¨g
 = 1;

147 i‡(
	`°rcmp
(*
¨gs
,"-algorithm") == 0)

149 i‡(!
¨gs
[1])

150 
bad
;

151 i‡(!
	`öô_gí_°r
(
bio_îr
, &
˘x
, *(++
¨gs
),
e
, 
do_∑øm
))

152 
íd
;

154 i‡(
	`°rcmp
(*
¨gs
,"-pkeyopt") == 0)

156 i‡(!
¨gs
[1])

157 
bad
;

158 i‡(!
˘x
)

160 
	`BIO_puts
(
bio_îr
, "No keytype specified\n");

161 
bad
;

163 i‡(
	`pkey_˘æ_°rög
(
˘x
, *(++
¨gs
)) <= 0)

165 
	`BIO_puts
(
bio_îr
, "parameter settingÉrror\n");

166 
	`ERR_¥öt_îr‹s
(
bio_îr
);

167 
íd
;

170 i‡(
	`°rcmp
(*
¨gs
,"-genparam") == 0)

172 i‡(
˘x
)

173 
bad
;

174 
do_∑øm
 = 1;

176 i‡(
	`°rcmp
(*
¨gs
,"-text") == 0)

177 
ãxt
=1;

180 
cùhî
 = 
	`EVP_gë_cùhîby«me
(*
¨gs
 + 1);

181 i‡(!
cùhî
)

183 
	`BIO_¥ötf
(
bio_îr
, "Unknown cipher %s\n",

184 *
¨gs
 + 1);

185 
bad¨g
 = 1;

187 i‡(
do_∑øm
 == 1)

188 
bad¨g
 = 1;

190 
¨gs
++;

193 i‡(!
˘x
)

194 
bad¨g
 = 1;

196 i‡(
bad¨g
)

198 
bad
:

199 
	`BIO_¥ötf
(
bio_îr
, "Usage: genpkey [options]\n");

200 
	`BIO_¥ötf
(
bio_îr
, "where options may be\n");

201 
	`BIO_¥ötf
(
bio_îr
, "-out file output file\n");

202 
	`BIO_¥ötf
(
bio_îr
, "-outform X output format (DER or PEM)\n");

203 
	`BIO_¥ötf
(
bio_îr
, "-passárg output fileÖassÖhrase source\n");

204 
	`BIO_¥ötf
(
bio_îr
, "-<cipher> use cipher <cipher>ÅoÉncryptÅhe key\n");

205 #i‚de‡
OPENSSL_NO_ENGINE


206 
	`BIO_¥ötf
(
bio_îr
, "-engineÉ useÉngineÉ,Öossiblyá hardware device.\n");

208 
	`BIO_¥ötf
(
bio_îr
, "-paramfile fileÖarameters file\n");

209 
	`BIO_¥ötf
(
bio_îr
, "-algorithmálgÅheÖublic keyálgorithm\n");

210 
	`BIO_¥ötf
(
bio_îr
, "-pkeyopt opt:value setÅheÖublic keyálgorithm option <opt>\n"

212 
	`BIO_¥ötf
(
bio_îr
, "-genparam generateÖarameters,Çot key\n");

213 
	`BIO_¥ötf
(
bio_îr
, "-textÖrintÅhe inÅext\n");

214 
	`BIO_¥ötf
(
bio_îr
, "NB: options order may be important! SeeÅhe manualÖage.\n");

215 
íd
;

218 i‡(!
	`≠p_∑sswd
(
bio_îr
, 
∑sßrg
, 
NULL
, &
∑ss
, NULL))

220 
	`BIO_puts
(
bio_îr
, "Error gettingÖassword\n");

221 
íd
;

224 i‡(
outfûe
)

226 i‡(!(
out
 = 
	`BIO_√w_fûe
 (
outfûe
, "wb")))

228 
	`BIO_¥ötf
(
bio_îr
,

229 "C™'à›í ouçuàfûê%s\n", 
outfûe
);

230 
íd
;

235 
out
 = 
	`BIO_√w_Â
 (
°dout
, 
BIO_NOCLOSE
);

236 #ifde‡
OPENSSL_SYS_VMS


238 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

239 
out
 = 
	`BIO_push
(
tmpbio
, out);

244 
	`EVP_PKEY_CTX_£t_cb
(
˘x
, 
gípkey_cb
);

245 
	`EVP_PKEY_CTX_£t_≠p_d©a
(
˘x
, 
bio_îr
);

247 i‡(
do_∑øm
)

249 i‡(
	`EVP_PKEY_∑ømgí
(
˘x
, &
pkey
) <= 0)

251 
	`BIO_puts
(
bio_îr
, "Error generatingÖarameters\n");

252 
	`ERR_¥öt_îr‹s
(
bio_îr
);

253 
íd
;

258 i‡(
	`EVP_PKEY_keygí
(
˘x
, &
pkey
) <= 0)

260 
	`BIO_puts
(
bio_îr
, "Error generating key\n");

261 
	`ERR_¥öt_îr‹s
(
bio_îr
);

262 
íd
;

266 i‡(
do_∑øm
)

267 
rv
 = 
	`PEM_wrôe_bio_P¨amëîs
(
out
, 
pkey
);

268 i‡(
outf‹m©
 =
FORMAT_PEM
)

269 
rv
 = 
	`PEM_wrôe_bio_Priv©eKey
(
out
, 
pkey
, 
cùhî
, 
NULL
, 0,

270 
NULL
, 
∑ss
);

271 i‡(
outf‹m©
 =
FORMAT_ASN1
)

272 
rv
 = 
	`i2d_Priv©eKey_bio
(
out
, 
pkey
);

275 
	`BIO_¥ötf
(
bio_îr
, "Bad format specified for key\n");

276 
íd
;

279 i‡(
rv
 <= 0)

281 
	`BIO_puts
(
bio_îr
, "Error writing key\n");

282 
	`ERR_¥öt_îr‹s
(
bio_îr
);

285 i‡(
ãxt
)

287 i‡(
do_∑øm
)

288 
rv
 = 
	`EVP_PKEY_¥öt_∑øms
(
out
, 
pkey
, 0, 
NULL
);

290 
rv
 = 
	`EVP_PKEY_¥öt_¥iv©e
(
out
, 
pkey
, 0, 
NULL
);

292 i‡(
rv
 <= 0)

294 
	`BIO_puts
(
bio_îr
, "ErrorÖrinting key\n");

295 
	`ERR_¥öt_îr‹s
(
bio_îr
);

299 
ªt
 = 0;

301 
íd
:

302 i‡(
pkey
)

303 
	`EVP_PKEY_‰ì
(
pkey
);

304 i‡(
˘x
)

305 
	`EVP_PKEY_CTX_‰ì
(
˘x
);

306 i‡(
out
)

307 
	`BIO_‰ì_Æl
(
out
);

308 
	`BIO_‰ì
(
ö
);

309 i‡(
∑ss
)

310 
	`OPENSSL_‰ì
(
∑ss
);

312  
ªt
;

313 
	}
}

315 
	$öô_keygí_fûe
(
BIO
 *
îr
, 
EVP_PKEY_CTX
 **
p˘x
,

316 c⁄° *
fûe
, 
ENGINE
 *
e
)

318 
BIO
 *
pbio
;

319 
EVP_PKEY
 *
pkey
 = 
NULL
;

320 
EVP_PKEY_CTX
 *
˘x
 = 
NULL
;

321 i‡(*
p˘x
)

323 
	`BIO_puts
(
îr
, "Parametersálready set!\n");

327 
pbio
 = 
	`BIO_√w_fûe
(
fûe
, "r");

328 i‡(!
pbio
)

330 
	`BIO_¥ötf
(
îr
, "C™'à›íÖ¨amëî fûê%s\n", 
fûe
);

334 
pkey
 = 
	`PEM_ªad_bio_P¨amëîs
(
pbio
, 
NULL
);

335 
	`BIO_‰ì
(
pbio
);

337 i‡(!
pkey
)

339 
	`BIO_¥ötf
(
bio_îr
, "Eº‹ÑódögÖ¨amëî fûê%s\n", 
fûe
);

343 
˘x
 = 
	`EVP_PKEY_CTX_√w
(
pkey
, 
e
);

344 i‡(!
˘x
)

345 
îr
;

346 i‡(
	`EVP_PKEY_keygí_öô
(
˘x
) <= 0)

347 
îr
;

348 
	`EVP_PKEY_‰ì
(
pkey
);

349 *
p˘x
 = 
˘x
;

352 
îr
:

353 
	`BIO_puts
(
îr
, "Error initializing context\n");

354 
	`ERR_¥öt_îr‹s
(
îr
);

355 i‡(
˘x
)

356 
	`EVP_PKEY_CTX_‰ì
(
˘x
);

357 i‡(
pkey
)

358 
	`EVP_PKEY_‰ì
(
pkey
);

361 
	}
}

363 
	$öô_gí_°r
(
BIO
 *
îr
, 
EVP_PKEY_CTX
 **
p˘x
,

364 c⁄° *
Æg«me
, 
ENGINE
 *
e
, 
do_∑øm
)

366 
EVP_PKEY_CTX
 *
˘x
 = 
NULL
;

367 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
;

368 
ENGINE
 *
tm≥ng
 = 
NULL
;

369 
pkey_id
;

371 i‡(*
p˘x
)

373 
	`BIO_puts
(
îr
, "Algorithmálready set!\n");

377 
amëh
 = 
	`EVP_PKEY_a¢1_föd_°r
(&
tm≥ng
, 
Æg«me
, -1);

379 #i‚de‡
OPENSSL_NO_ENGINE


380 i‡(!
amëh
 && 
e
)

381 
amëh
 = 
	`ENGINE_gë_pkey_a¢1_mëh_°r
(
e
, 
Æg«me
, -1);

384 i‡(!
amëh
)

386 
	`BIO_¥ötf
(
bio_îr
, "Alg‹ôhm %†nŸ found\n", 
Æg«me
);

390 
	`ERR_˛ór_îr‹
();

392 
	`EVP_PKEY_a¢1_gë0_öfo
(&
pkey_id
, 
NULL
, NULL, NULL, NULL, 
amëh
);

393 #i‚de‡
OPENSSL_NO_ENGINE


394 i‡(
tm≥ng
)

395 
	`ENGINE_föish
(
tm≥ng
);

397 
˘x
 = 
	`EVP_PKEY_CTX_√w_id
(
pkey_id
, 
e
);

399 i‡(!
˘x
)

400 
îr
;

401 i‡(
do_∑øm
)

403 i‡(
	`EVP_PKEY_∑ømgí_öô
(
˘x
) <= 0)

404 
îr
;

408 i‡(
	`EVP_PKEY_keygí_öô
(
˘x
) <= 0)

409 
îr
;

412 *
p˘x
 = 
˘x
;

415 
îr
:

416 
	`BIO_¥ötf
(
îr
, "Eº‹ inôülizög %†c⁄ãxt\n", 
Æg«me
);

417 
	`ERR_¥öt_îr‹s
(
îr
);

418 i‡(
˘x
)

419 
	`EVP_PKEY_CTX_‰ì
(
˘x
);

422 
	}
}

424 
	$gípkey_cb
(
EVP_PKEY_CTX
 *
˘x
)

426 
c
='*';

427 
BIO
 *
b
 = 
	`EVP_PKEY_CTX_gë_≠p_d©a
(
˘x
);

428 
p
;

429 
p
 = 
	`EVP_PKEY_CTX_gë_keygí_öfo
(
˘x
, 0);

430 i‡(
p
 =0Ë
c
='.';

431 i‡(
p
 =1Ë
c
='+';

432 i‡(
p
 =2Ë
c
='*';

433 i‡(
p
 =3Ë
c
='\n';

434 
	`BIO_wrôe
(
b
,&
c
,1);

435 ()
	`BIO_Êush
(
b
);

436 #ifde‡
LINT


437 
p
=
n
;

440 
	}
}

	@genrsa.c

59 
	~<›ís¶/›ís¶c⁄f.h
>

62 #ifde‡
OPENSSL_NO_DEPRECATED


63 #unde‡
OPENSSL_NO_DEPRECATED


66 #i‚de‡
OPENSSL_NO_RSA


67 
	~<°dio.h
>

68 
	~<°rög.h
>

69 
	~<sys/ty≥s.h
>

70 
	~<sys/°©.h
>

71 
	~"≠ps.h
"

72 
	~<›ís¶/bio.h
>

73 
	~<›ís¶/îr.h
>

74 
	~<›ís¶/bn.h
>

75 
	~<›ís¶/rß.h
>

76 
	~<›ís¶/evp.h
>

77 
	~<›ís¶/x509.h
>

78 
	~<›ís¶/≥m.h
>

79 
	~<›ís¶/ønd.h
>

81 
	#DEFBITS
 1024

	)

82 #unde‡
PROG


83 
	#PROG
 
gírß_maö


	)

85 
MS_CALLBACK
 
gírß_cb
(
p
, 
n
, 
BN_GENCB
 *
cb
);

87 
MAIN
(, **);

89 
	$MAIN
(
¨gc
, **
¨gv
)

91 
BN_GENCB
 
cb
;

92 #i‚de‡
OPENSSL_NO_ENGINE


93 
ENGINE
 *
e
 = 
NULL
;

95 
ªt
=1;

96 
i
,
num
=
DEFBITS
;

97 
l
;

98 c⁄° 
EVP_CIPHER
 *
íc
=
NULL
;

99 
f4
=
RSA_F4
;

100 *
outfûe
=
NULL
;

101 *
∑sßrgout
 = 
NULL
, *
∑ssout
 = NULL;

102 #i‚de‡
OPENSSL_NO_ENGINE


103 *
ígöe
=
NULL
;

105 *
öønd
=
NULL
;

106 
BIO
 *
out
=
NULL
;

107 
BIGNUM
 *
bn
 = 
	`BN_√w
();

108 
RSA
 *
rß
 = 
NULL
;

110 if(!
bn
Ë
îr
;

112 
	`≠ps_°¨tup
();

113 
	`BN_GENCB_£t
(&
cb
, 
gírß_cb
, 
bio_îr
);

115 i‡(
bio_îr
 =
NULL
)

116 i‡((
bio_îr
=
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

117 
	`BIO_£t_Â
(
bio_îr
,
°dîr
,
BIO_NOCLOSE
|
BIO_FP_TEXT
);

119 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

120 
îr
;

121 i‡((
out
=
	`BIO_√w
(
	`BIO_s_fûe
())Ë=
NULL
)

123 
	`BIO_¥ötf
(
bio_îr
,"unableÅo create BIO for output\n");

124 
îr
;

127 
¨gv
++;

128 
¨gc
--;

131 i‡(
¨gc
 <= 0) ;

132 i‡(
	`°rcmp
(*
¨gv
,"-out") == 0)

134 i‡(--
¨gc
 < 1Ë
bad
;

135 
outfûe
*(++
¨gv
);

137 i‡(
	`°rcmp
(*
¨gv
,"-3") == 0)

138 
f4
=3;

139 i‡(
	`°rcmp
(*
¨gv
,"-F4") == 0 || strcmp(*argv,"-f4") == 0)

140 
f4
=
RSA_F4
;

141 #i‚de‡
OPENSSL_NO_ENGINE


142 i‡(
	`°rcmp
(*
¨gv
,"-engine") == 0)

144 i‡(--
¨gc
 < 1Ë
bad
;

145 
ígöe
*(++
¨gv
);

148 i‡(
	`°rcmp
(*
¨gv
,"-rand") == 0)

150 i‡(--
¨gc
 < 1Ë
bad
;

151 
öønd
*(++
¨gv
);

153 #i‚de‡
OPENSSL_NO_DES


154 i‡(
	`°rcmp
(*
¨gv
,"-des") == 0)

155 
íc
=
	`EVP_des_cbc
();

156 i‡(
	`°rcmp
(*
¨gv
,"-des3") == 0)

157 
íc
=
	`EVP_des_ede3_cbc
();

159 #i‚de‡
OPENSSL_NO_IDEA


160 i‡(
	`°rcmp
(*
¨gv
,"-idea") == 0)

161 
íc
=
	`EVP_idó_cbc
();

163 #i‚de‡
OPENSSL_NO_SEED


164 i‡(
	`°rcmp
(*
¨gv
,"-seed") == 0)

165 
íc
=
	`EVP_£ed_cbc
();

167 #i‚de‡
OPENSSL_NO_AES


168 i‡(
	`°rcmp
(*
¨gv
,"-aes128") == 0)

169 
íc
=
	`EVP_´s_128_cbc
();

170 i‡(
	`°rcmp
(*
¨gv
,"-aes192") == 0)

171 
íc
=
	`EVP_´s_192_cbc
();

172 i‡(
	`°rcmp
(*
¨gv
,"-aes256") == 0)

173 
íc
=
	`EVP_´s_256_cbc
();

175 #i‚de‡
OPENSSL_NO_CAMELLIA


176 i‡(
	`°rcmp
(*
¨gv
,"-camellia128") == 0)

177 
íc
=
	`EVP_ˇmñlü_128_cbc
();

178 i‡(
	`°rcmp
(*
¨gv
,"-camellia192") == 0)

179 
íc
=
	`EVP_ˇmñlü_192_cbc
();

180 i‡(
	`°rcmp
(*
¨gv
,"-camellia256") == 0)

181 
íc
=
	`EVP_ˇmñlü_256_cbc
();

183 i‡(
	`°rcmp
(*
¨gv
,"-passout") == 0)

185 i‡(--
¨gc
 < 1Ë
bad
;

186 
∑sßrgout
*(++
¨gv
);

190 
¨gv
++;

191 
¨gc
--;

193 i‡((
¨gc
 >1Ë&& ((
	`ssˇnf
(*
¨gv
,"%d",&
num
) == 0) || (num < 0)))

195 
bad
:

196 
	`BIO_¥ötf
(
bio_îr
,"usage: genrsa [args] [numbits]\n");

197 
	`BIO_¥ötf
(
bio_îr
," -desÉncryptÅhe generated key with DES in cbc mode\n");

198 
	`BIO_¥ötf
(
bio_îr
," -des3ÉncryptÅhe generated key with DES inÉde cbc mode (168 bit key)\n");

199 #i‚de‡
OPENSSL_NO_IDEA


200 
	`BIO_¥ötf
(
bio_îr
," -ideaÉncryptÅhe generated key with IDEA in cbc mode\n");

202 #i‚de‡
OPENSSL_NO_SEED


203 
	`BIO_¥ötf
(
bio_îr
," -seed\n");

204 
	`BIO_¥ötf
(
bio_îr
,"Éncrypt PEM output with cbc seed\n");

206 #i‚de‡
OPENSSL_NO_AES


207 
	`BIO_¥ötf
(
bio_îr
," -aes128, -aes192, -aes256\n");

208 
	`BIO_¥ötf
(
bio_îr
,"Éncrypt PEM output with cbcáes\n");

210 #i‚de‡
OPENSSL_NO_CAMELLIA


211 
	`BIO_¥ötf
(
bio_îr
," -camellia128, -camellia192, -camellia256\n");

212 
	`BIO_¥ötf
(
bio_îr
,"Éncrypt PEM output with cbc camellia\n");

214 
	`BIO_¥ötf
(
bio_îr
," -out file outputÅhe keyÅo 'file\n");

215 
	`BIO_¥ötf
(
bio_îr
," -passoutárg output fileÖassÖhrase source\n");

216 
	`BIO_¥ötf
(
bio_îr
," -f4 use F4 (0x10001) forÅhe E value\n");

217 
	`BIO_¥ötf
(
bio_îr
," -3 use 3 forÅhe E value\n");

218 #i‚de‡
OPENSSL_NO_ENGINE


219 
	`BIO_¥ötf
(
bio_îr
," -engineÉ useÉngineÉ,Öossiblyá hardware device.\n");

221 
	`BIO_¥ötf
(
bio_îr
," -ønd fûe%cfûe%c...\n", 
LIST_SEPARATOR_CHAR
, LIST_SEPARATOR_CHAR);

222 
	`BIO_¥ötf
(
bio_îr
,"ÜoadÅhe file (orÅhe files inÅhe directory) into\n");

223 
	`BIO_¥ötf
(
bio_îr
,"ÅheÑandomÇumber generator\n");

224 
îr
;

227 
	`ERR_lﬂd_¸y±o_°rögs
();

229 if(!
	`≠p_∑sswd
(
bio_îr
, 
NULL
, 
∑sßrgout
, NULL, &
∑ssout
)) {

230 
	`BIO_¥ötf
(
bio_îr
, "Error gettingÖassword\n");

231 
îr
;

234 #i‚de‡
OPENSSL_NO_ENGINE


235 
e
 = 
	`£tup_ígöe
(
bio_îr
, 
ígöe
, 0);

238 i‡(
outfûe
 =
NULL
)

240 
	`BIO_£t_Â
(
out
,
°dout
,
BIO_NOCLOSE
);

241 #ifde‡
OPENSSL_SYS_VMS


243 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

244 
out
 = 
	`BIO_push
(
tmpbio
, out);

250 i‡(
	`BIO_wrôe_fûíame
(
out
,
outfûe
) <= 0)

252 
	`≥º‹
(
outfûe
);

253 
îr
;

257 i‡(!
	`≠p_RAND_lﬂd_fûe
(
NULL
, 
bio_îr
, 1Ë&& 
öønd
 == NULL

258 && !
	`RAND_°©us
())

260 
	`BIO_¥ötf
(
bio_îr
,"warning,Çot muchÉxtraÑandom data, consider usingÅhe -rand option\n");

262 i‡(
öønd
 !
NULL
)

263 
	`BIO_¥ötf
(
bio_îr
,"%ld semi-random bytesÜoaded\n",

264 
	`≠p_RAND_lﬂd_fûes
(
öønd
));

266 
	`BIO_¥ötf
(
bio_îr
,"Generating RSAÖrivate key, %d bitÜong modulus\n",

267 
num
);

268 #ifde‡
OPENSSL_NO_ENGINE


269 
rß
 = 
	`RSA_√w
();

271 
rß
 = 
	`RSA_√w_mëhod
(
e
);

273 i‡(!
rß
)

274 
îr
;

276 if(!
	`BN_£t_w‹d
(
bn
, 
f4
Ë|| !
	`RSA_gíî©e_key_ex
(
rß
, 
num
, bn, &
cb
))

277 
îr
;

279 
	`≠p_RAND_wrôe_fûe
(
NULL
, 
bio_îr
);

283 
l
=0L;

284 
i
=0; i<
rß
->
e
->
t›
; i++)

286 #i‚de‡
SIXTY_FOUR_BIT


287 
l
<<=
BN_BITS4
;

288 
l
<<=
BN_BITS4
;

290 
l
+=
rß
->
e
->
d
[
i
];

292 
	`BIO_¥ötf
(
bio_îr
,"êi†%ld (0x%lX)\n",
l
,l);

294 
PW_CB_DATA
 
cb_d©a
;

295 
cb_d©a
.
∑ssw‹d
 = 
∑ssout
;

296 
cb_d©a
.
¥om±_öfo
 = 
outfûe
;

297 i‡(!
	`PEM_wrôe_bio_RSAPriv©eKey
(
out
,
rß
,
íc
,
NULL
,0,

298 (
≥m_∑ssw‹d_cb
 *)
∑ssw‹d_ˇŒback
,&
cb_d©a
))

299 
îr
;

302 
ªt
=0;

303 
îr
:

304 i‡(
bn
Ë
	`BN_‰ì
(bn);

305 i‡(
rß
Ë
	`RSA_‰ì
(rsa);

306 i‡(
out
Ë
	`BIO_‰ì_Æl
(out);

307 if(
∑ssout
Ë
	`OPENSSL_‰ì
(passout);

308 i‡(
ªt
 != 0)

309 
	`ERR_¥öt_îr‹s
(
bio_îr
);

310 
	`≠ps_shutdown
();

311 
	`OPENSSL_EXIT
(
ªt
);

312 
	}
}

314 
MS_CALLBACK
 
	$gírß_cb
(
p
, 
n
, 
BN_GENCB
 *
cb
)

316 
c
='*';

318 i‡(
p
 =0Ë
c
='.';

319 i‡(
p
 =1Ë
c
='+';

320 i‡(
p
 =2Ë
c
='*';

321 i‡(
p
 =3Ë
c
='\n';

322 
	`BIO_wrôe
(
cb
->
¨g
,&
c
,1);

323 ()
	`BIO_Êush
(
cb
->
¨g
);

324 #ifde‡
LINT


325 
p
=
n
;

328 
	}
}

331 #i‡
PEDANTIC


332 *
	gdummy
=&
dummy
;

	@long2.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<gë›t.h
>

6 
	gvîbo£_Êag
;

9 
	$maö
 (
¨gc
, **
¨gv
)

11 
c
;

15 
›ti⁄
 
l⁄g_›ti⁄s
[] =

18 {"vîbo£", 
no_¨gumít
, &
vîbo£_Êag
, 1},

19 {"brõf", 
no_¨gumít
, &
vîbo£_Êag
, 0},

22 {"add", 
no_¨gumít
, 0, 'a'},

23 {"≠≥nd", 
no_¨gumít
, 0, 'b'},

24 {"dñëe", 
ªquúed_¨gumít
, 0, 'd'},

25 {"¸óã", 
ªquúed_¨gumít
, 0, 'c'},

26 {"fûe", 
ªquúed_¨gumít
, 0, 'f'},

30 
›ti⁄_ödex
 = 0;

32 
c
 = 
	`gë›t_l⁄g
 (
¨gc
, 
¨gv
, "abc:d:f:",

33 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

36 i‡(
c
 == -1)

39 
c
)

43 i‡(
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
Êag
 != 0)

45 
	`¥ötf
 ("›ti⁄ %s", 
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
);

46 i‡(
›èrg
)

47 
	`¥ötf
 (" wôhárg %s", 
›èrg
);

48 
	`¥ötf
 ("\n");

52 
	`puts
 ("option -a\n");

56 
	`puts
 ("option -b\n");

60 
	`¥ötf
 ("›ti⁄ -¯wôh vÆuê`%s'\n", 
›èrg
);

64 
	`¥ötf
 ("›ti⁄ -d wôh vÆuê`%s'\n", 
›èrg
);

68 
	`¥ötf
 ("›ti⁄ -‡wôh vÆuê`%s'\n", 
›èrg
);

76 
	`ab‹t
 ();

83 i‡(
vîbo£_Êag
)

84 
	`puts
 ("verbose flag is set");

87 i‡(
›töd
 < 
¨gc
)

89 
	`¥ötf
 ("non-option ARGV-elements: ");

90 
›töd
 < 
¨gc
)

91 
	`¥ötf
 ("%†", 
¨gv
[
›töd
++]);

92 
	`putch¨
 ('\n');

95 
	`exô
 (0);

96 
	}
}

	@longtest.c

1 
	~<°dio.h
>

2 
	~<uni°d.h
>

3 
	~<gë›t.h
>

5 *
›èrg
;

6 
›töd
;

7 
›t›t
;

8 
›ãº
;

9 
›åe£t
;

11 *
	gvîs
[] = {"s¶3","és1","és11","és12",
NULL
};

12 
	gvîI¡
[] = {0,1,2,3,4,-1};

14 
födVîI¡
(*
v
);

16 
	$maö
(
¨gc
,**
¨gv
)

18 
Ø
 = 0;

19 
ch
,
idx
;

21 *
ù
;

22 *
cùhî
;

23 *
˚πfûe
 = 
NULL
;

24 *
keyfûe
 = 
NULL
;

25 
p‹t
;

26 
vîsi⁄
;

28 
›ti⁄
 
l⁄g›ts
[] = {

29 {"ù", 
ªquúed_¨gumít
, 
NULL
,'a'},

30 {"p‹t", 
ªquúed_¨gumít
, 
NULL
,'b'},

31 {"˚π", 
›ti⁄Æ_¨gumít
, 
NULL
,'c'},

32 {"key", 
›ti⁄Æ_¨gumít
, 
NULL
,'d'},

33 {"vîsi⁄", 
›ti⁄Æ_¨gumít
, 
NULL
,'e'},

34 {"cùhî", 
›ti⁄Æ_¨gumít
, 
NULL
,'f'},

38 
idx
 = 0;

39 
›töd
 = 0;

41 (
ch
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "a:b:cdef", 
l⁄g›ts
, 
NULL
)) != -1)

43 
idx
++;

44 
ch
)

46 'a': 
ù
 = 
›èrg
;;

47 'b': 
p‹t
 = 
	`©oi
(
›èrg
);;

48 'c': 
˚πfûe
 = 
›èrg
;;

49 'd': 
keyfûe
 = 
›èrg
;;

50 'e': 
vîsi⁄
 = 
	`födVîI¡
(
›èrg
);;

51 'f': 
cùhî
 = 
›èrg
;;

55 
	`¥ötf
("ù : %s\n",
ù
);

56 
	`¥ötf
("p‹t : %d\n",
p‹t
);

57 
	`¥ötf
("˚π : %s\n",
˚πfûe
);

58 
	`¥ötf
("key : %s\n",
keyfûe
);

59 
	`¥ötf
("vîsi⁄ : %d\n",
vîsi⁄
);

60 
	`¥ötf
("cùhî : %s\n",
cùhî
);

61 
	}
}

64 
	$födVîI¡
(*
v
)

66 
i
;

67 
i
=0;
vîs
[i];i++)

69 if(
	`°rcmp
(
vîs
[
i
],
v
) == 0)

70  
vîI¡
[
i
];

73 
	}
}

	@nseq.c

59 
	~<°dio.h
>

60 
	~<°rög.h
>

61 
	~"≠ps.h
"

62 
	~<›ís¶/≥m.h
>

63 
	~<›ís¶/îr.h
>

65 #unde‡
PROG


66 
	#PROG
 
n£q_maö


	)

68 
MAIN
(, **);

70 
	$MAIN
(
¨gc
, **
¨gv
)

72 **
¨gs
, *
öfûe
 = 
NULL
, *
outfûe
 = NULL;

73 
BIO
 *
ö
 = 
NULL
, *
out
 = NULL;

74 
to£q
 = 0;

75 
X509
 *
x509
 = 
NULL
;

76 
NETSCAPE_CERT_SEQUENCE
 *
£q
 = 
NULL
;

77 
i
, 
ªt
 = 1;

78 
bad¨g
 = 0;

79 i‡(
bio_îr
 =
NULL
Ëbio_î∏
	`BIO_√w_Â
 (
°dîr
, 
BIO_NOCLOSE
);

80 
	`ERR_lﬂd_¸y±o_°rögs
();

81 
¨gs
 = 
¨gv
 + 1;

82 !
bad¨g
 && *
¨gs
 && *args[0] == '-') {

83 i‡(!
	`°rcmp
 (*
¨gs
, "-to£q")Ë
to£q
 = 1;

84 i‡(!
	`°rcmp
 (*
¨gs
, "-in")) {

85 i‡(
¨gs
[1]) {

86 
¨gs
++;

87 
öfûe
 = *
¨gs
;

88 } 
bad¨g
 = 1;

89 } i‡(!
	`°rcmp
 (*
¨gs
, "-out")) {

90 i‡(
¨gs
[1]) {

91 
¨gs
++;

92 
outfûe
 = *
¨gs
;

93 } 
bad¨g
 = 1;

94 } 
bad¨g
 = 1;

95 
¨gs
++;

98 i‡(
bad¨g
) {

99 
	`BIO_¥ötf
 (
bio_îr
, "Netscape certificate sequence utility\n");

100 
	`BIO_¥ötf
 (
bio_îr
, "UsageÇseq [options]\n");

101 
	`BIO_¥ötf
 (
bio_îr
, "where optionsáre\n");

102 
	`BIO_¥ötf
 (
bio_îr
, "-in file input file\n");

103 
	`BIO_¥ötf
 (
bio_îr
, "-out file output file\n");

104 
	`BIO_¥ötf
 (
bio_îr
, "-toseq output NS Sequence file\n");

105 
	`OPENSSL_EXIT
(1);

108 i‡(
öfûe
) {

109 i‡(!(
ö
 = 
	`BIO_√w_fûe
 (
öfûe
, "r"))) {

110 
	`BIO_¥ötf
 (
bio_îr
,

111 "C™'à›í i≈uàfûê%s\n", 
öfûe
);

112 
íd
;

114 } 
ö
 = 
	`BIO_√w_Â
(
°dö
, 
BIO_NOCLOSE
);

116 i‡(
outfûe
) {

117 i‡(!(
out
 = 
	`BIO_√w_fûe
 (
outfûe
, "w"))) {

118 
	`BIO_¥ötf
 (
bio_îr
,

119 "C™'à›í ouçuàfûê%s\n", 
outfûe
);

120 
íd
;

123 
out
 = 
	`BIO_√w_Â
(
°dout
, 
BIO_NOCLOSE
);

124 #ifde‡
OPENSSL_SYS_VMS


126 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

127 
out
 = 
	`BIO_push
(
tmpbio
, out);

131 i‡(
to£q
) {

132 
£q
 = 
	`NETSCAPE_CERT_SEQUENCE_√w
();

133 
£q
->
˚πs
 = 
	`sk_X509_√w_nuŒ
();

134 (
x509
 = 
	`PEM_ªad_bio_X509
(
ö
, 
NULL
, NULL, NULL)))

135 
	`sk_X509_push
(
£q
->
˚πs
,
x509
);

137 if(!
	`sk_X509_num
(
£q
->
˚πs
))

139 
	`BIO_¥ötf
 (
bio_îr
, "Eº‹Ñódög cît†fûê%s\n", 
öfûe
);

140 
	`ERR_¥öt_îr‹s
(
bio_îr
);

141 
íd
;

143 
	`PEM_wrôe_bio_NETSCAPE_CERT_SEQUENCE
(
out
, 
£q
);

144 
ªt
 = 0;

145 
íd
;

148 i‡(!(
£q
 = 
	`PEM_ªad_bio_NETSCAPE_CERT_SEQUENCE
(
ö
, 
NULL
, NULL, NULL))) {

149 
	`BIO_¥ötf
 (
bio_îr
, "Eº‹Ñódög sequí˚ fûê%s\n", 
öfûe
);

150 
	`ERR_¥öt_îr‹s
(
bio_îr
);

151 
íd
;

154 
i
 = 0; i < 
	`sk_X509_num
(
£q
->
˚πs
); i++) {

155 
x509
 = 
	`sk_X509_vÆue
(
£q
->
˚πs
, 
i
);

156 
	`dump_˚π_ãxt
(
out
, 
x509
);

157 
	`PEM_wrôe_bio_X509
(
out
, 
x509
);

159 
ªt
 = 0;

160 
íd
:

161 
	`BIO_‰ì
(
ö
);

162 
	`BIO_‰ì_Æl
(
out
);

163 
	`NETSCAPE_CERT_SEQUENCE_‰ì
(
£q
);

165 
	`OPENSSL_EXIT
(
ªt
);

166 
	}
}

	@ocsp.c

58 #i‚de‡
OPENSSL_NO_OCSP


60 #ifde‡
OPENSSL_SYS_VMS


61 
	#_XOPEN_SOURCE_EXTENDED


	)

65 
	#USE_SOCKETS


	)

67 
	~<°dio.h
>

68 
	~<°dlib.h
>

69 
	~<°rög.h
>

70 
	~<time.h
>

71 
	~"≠ps.h
"

72 
	~<›ís¶/e_os2.h
>

73 
	~<›ís¶/¸y±o.h
>

74 
	~<›ís¶/îr.h
>

75 
	~<›ís¶/s¶.h
>

76 
	~<›ís¶/evp.h
>

77 
	~<›ís¶/bn.h
>

78 
	~<›ís¶/x509v3.h
>

80 #i‡
deföed
(
NETWARE_CLIB
)

81 #ifde‡
NETWARE_BSDSOCK


82 
	~<sys/sockë.h
>

83 
	~<sys/bsdskt.h
>

85 
	~<novsock2.h
>

87 #ñi‡
deföed
(
NETWARE_LIBC
)

88 #ifde‡
NETWARE_BSDSOCK


89 
	~<sys/£À˘.h
>

91 
	~<novsock2.h
>

96 
	#MAX_VALIDITY_PERIOD
 (5 * 60)

	)

98 
add_oc•_˚π
(
OCSP_REQUEST
 **
ªq
, 
X509
 *
˚π
, c⁄° 
EVP_MD
 *
˚π_id_md
, X509 *
issuî
,

99 
STACK_OF
(
OCSP_CERTID
Ë*
ids
);

100 
add_oc•_£rül
(
OCSP_REQUEST
 **
ªq
, *
£rül
, c⁄° 
EVP_MD
 * 
˚π_id_md
, 
X509
 *
issuî
,

101 
STACK_OF
(
OCSP_CERTID
Ë*
ids
);

102 
¥öt_oc•_summ¨y
(
BIO
 *
out
, 
OCSP_BASICRESP
 *
bs
, 
OCSP_REQUEST
 *
ªq
,

103 
STACK_OF
(
OPENSSL_STRING
Ë*
«mes
,

104 
STACK_OF
(
OCSP_CERTID
Ë*
ids
, 
n£c
,

105 
maxage
);

107 
make_oc•_ª•⁄£
(
OCSP_RESPONSE
 **
ª•
, 
OCSP_REQUEST
 *
ªq
, 
CA_DB
 *
db
,

108 
X509
 *
ˇ
, X509 *
r˚π
, 
EVP_PKEY
 *
rkey
,

109 
STACK_OF
(
X509
Ë*
rŸhî
, 
Êags
,

110 
nmö
, 
ndays
);

112 **
lookup_£rül
(
CA_DB
 *
db
, 
ASN1_INTEGER
 *
£r
);

113 
BIO
 *
öô_ª•⁄dî
(*
p‹t
);

114 
do_ª•⁄dî
(
OCSP_REQUEST
 **
¥eq
, 
BIO
 **
pcbio
, BIO *
acbio
, *
p‹t
);

115 
£nd_oc•_ª•⁄£
(
BIO
 *
cbio
, 
OCSP_RESPONSE
 *
ª•
);

116 
OCSP_RESPONSE
 *
quîy_ª•⁄dî
(
BIO
 *
îr
, BIO *
cbio
, *
∑th
,

117 
STACK_OF
(
CONF_VALUE
Ë*
hódîs
,

118 
OCSP_REQUEST
 *
ªq
, 
ªq_timeout
);

120 #unde‡
PROG


121 
	#PROG
 
oc•_maö


	)

123 
MAIN
(, **);

125 
	$MAIN
(
¨gc
, **
¨gv
)

127 
ENGINE
 *
e
 = 
NULL
;

128 **
¨gs
;

129 *
ho°
 = 
NULL
, *
p‹t
 = NULL, *
∑th
 = "/";

130 *
ªqö
 = 
NULL
, *
ª•ö
 = NULL;

131 *
ªqout
 = 
NULL
, *
ª•out
 = NULL;

132 *
signfûe
 = 
NULL
, *
keyfûe
 = NULL;

133 *
rsignfûe
 = 
NULL
, *
rkeyfûe
 = NULL;

134 *
outfûe
 = 
NULL
;

135 
add_n⁄˚
 = 1, 
novîify
 = 0, 
u£_s¶
 = -1;

136 
	`STACK_OF
(
CONF_VALUE
Ë*
hódîs
 = 
NULL
;

137 
OCSP_REQUEST
 *
ªq
 = 
NULL
;

138 
OCSP_RESPONSE
 *
ª•
 = 
NULL
;

139 
OCSP_BASICRESP
 *
bs
 = 
NULL
;

140 
X509
 *
issuî
 = 
NULL
, *
˚π
 = NULL;

141 
X509
 *
sig√r
 = 
NULL
, *
rsig√r
 = NULL;

142 
EVP_PKEY
 *
key
 = 
NULL
, *
rkey
 = NULL;

143 
BIO
 *
acbio
 = 
NULL
, *
cbio
 = NULL;

144 
BIO
 *
dîbio
 = 
NULL
;

145 
BIO
 *
out
 = 
NULL
;

146 
ªq_timeout
 = -1;

147 
ªq_ãxt
 = 0, 
ª•_ãxt
 = 0;

148 
n£c
 = 
MAX_VALIDITY_PERIOD
, 
maxage
 = -1;

149 *
CAfûe
 = 
NULL
, *
CA∑th
 = NULL;

150 
X509_STORE
 *
°‹e
 = 
NULL
;

151 
	`STACK_OF
(
X509
Ë*
sign_Ÿhî
 = 
NULL
, *
vîify_Ÿhî
 = NULL, *
rŸhî
 = NULL;

152 *
sign_˚πfûe
 = 
NULL
, *
vîify_˚πfûe
 = NULL, *
r˚πfûe
 = NULL;

153 
sign_Êags
 = 0, 
vîify_Êags
 = 0, 
rÊags
 = 0;

154 
ªt
 = 1;

155 
ac˚±_cou¡
 = -1;

156 
bad¨g
 = 0;

157 
i
;

158 
ign‹e_îr
 = 0;

159 
	`STACK_OF
(
OPENSSL_STRING
Ë*
ªq«mes
 = 
NULL
;

160 
	`STACK_OF
(
OCSP_CERTID
Ë*
ids
 = 
NULL
;

162 
X509
 *
rˇ_˚π
 = 
NULL
;

163 *
ridx_fûíame
 = 
NULL
;

164 *
rˇ_fûíame
 = 
NULL
;

165 
CA_DB
 *
rdb
 = 
NULL
;

166 
nmö
 = 0, 
ndays
 = -1;

167 c⁄° 
EVP_MD
 *
˚π_id_md
 = 
NULL
;

169 i‡(
bio_îr
 =
NULL
Ëbio_î∏
	`BIO_√w_Â
(
°dîr
, 
BIO_NOCLOSE
);

171 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

172 
íd
;

173 
	`SSL_lﬂd_îr‹_°rögs
();

174 
	`O≥nSSL_add_s¶_Æg‹ôhms
();

175 
¨gs
 = 
¨gv
 + 1;

176 
ªq«mes
 = 
	`sk_OPENSSL_STRING_√w_nuŒ
();

177 
ids
 = 
	`sk_OCSP_CERTID_√w_nuŒ
();

178 !
bad¨g
 && *
¨gs
 && *args[0] == '-')

180 i‡(!
	`°rcmp
(*
¨gs
, "-out"))

182 i‡(
¨gs
[1])

184 
¨gs
++;

185 
outfûe
 = *
¨gs
;

187 
bad¨g
 = 1;

189 i‡(!
	`°rcmp
(*
¨gs
, "-timeout"))

191 i‡(
¨gs
[1])

193 
¨gs
++;

194 
ªq_timeout
 = 
	`©ﬁ
(*
¨gs
);

195 i‡(
ªq_timeout
 < 0)

197 
	`BIO_¥ötf
(
bio_îr
,

199 *
¨gs
);

200 
bad¨g
 = 1;

203 
bad¨g
 = 1;

205 i‡(!
	`°rcmp
(*
¨gs
, "-url"))

207 i‡(
¨gs
[1])

209 
¨gs
++;

210 i‡(!
	`OCSP_∑r£_uæ
(*
¨gs
, &
ho°
, &
p‹t
, &
∑th
, &
u£_s¶
))

212 
	`BIO_¥ötf
(
bio_îr
, "ErrorÖarsing URL\n");

213 
bad¨g
 = 1;

216 
bad¨g
 = 1;

218 i‡(!
	`°rcmp
(*
¨gs
, "-host"))

220 i‡(
¨gs
[1])

222 
¨gs
++;

223 
ho°
 = *
¨gs
;

225 
bad¨g
 = 1;

227 i‡(!
	`°rcmp
(*
¨gs
, "-port"))

229 i‡(
¨gs
[1])

231 
¨gs
++;

232 
p‹t
 = *
¨gs
;

234 
bad¨g
 = 1;

236 i‡(!
	`°rcmp
(*
¨gs
, "-header"))

238 i‡(
¨gs
[1] &&árgs[2])

240 i‡(!
	`X509V3_add_vÆue
(
¨gs
[1],árgs[2], &
hódîs
))

241 
íd
;

242 
¨gs
 += 2;

244 
bad¨g
 = 1;

246 i‡(!
	`°rcmp
(*
¨gs
, "-ignore_err"))

247 
ign‹e_îr
 = 1;

248 i‡(!
	`°rcmp
(*
¨gs
, "-noverify"))

249 
novîify
 = 1;

250 i‡(!
	`°rcmp
(*
¨gs
, "-nonce"))

251 
add_n⁄˚
 = 2;

252 i‡(!
	`°rcmp
(*
¨gs
, "-no_nonce"))

253 
add_n⁄˚
 = 0;

254 i‡(!
	`°rcmp
(*
¨gs
, "-resp_no_certs"))

255 
rÊags
 |
OCSP_NOCERTS
;

256 i‡(!
	`°rcmp
(*
¨gs
, "-resp_key_id"))

257 
rÊags
 |
OCSP_RESPID_KEY
;

258 i‡(!
	`°rcmp
(*
¨gs
, "-no_certs"))

259 
sign_Êags
 |
OCSP_NOCERTS
;

260 i‡(!
	`°rcmp
(*
¨gs
, "-no_signature_verify"))

261 
vîify_Êags
 |
OCSP_NOSIGS
;

262 i‡(!
	`°rcmp
(*
¨gs
, "-no_cert_verify"))

263 
vîify_Êags
 |
OCSP_NOVERIFY
;

264 i‡(!
	`°rcmp
(*
¨gs
, "-no_chain"))

265 
vîify_Êags
 |
OCSP_NOCHAIN
;

266 i‡(!
	`°rcmp
(*
¨gs
, "-no_cert_checks"))

267 
vîify_Êags
 |
OCSP_NOCHECKS
;

268 i‡(!
	`°rcmp
(*
¨gs
, "-no_explicit"))

269 
vîify_Êags
 |
OCSP_NOEXPLICIT
;

270 i‡(!
	`°rcmp
(*
¨gs
, "-trust_other"))

271 
vîify_Êags
 |
OCSP_TRUSTOTHER
;

272 i‡(!
	`°rcmp
(*
¨gs
, "-no_intern"))

273 
vîify_Êags
 |
OCSP_NOINTERN
;

274 i‡(!
	`°rcmp
(*
¨gs
, "-text"))

276 
ªq_ãxt
 = 1;

277 
ª•_ãxt
 = 1;

279 i‡(!
	`°rcmp
(*
¨gs
, "-req_text"))

280 
ªq_ãxt
 = 1;

281 i‡(!
	`°rcmp
(*
¨gs
, "-resp_text"))

282 
ª•_ãxt
 = 1;

283 i‡(!
	`°rcmp
(*
¨gs
, "-reqin"))

285 i‡(
¨gs
[1])

287 
¨gs
++;

288 
ªqö
 = *
¨gs
;

290 
bad¨g
 = 1;

292 i‡(!
	`°rcmp
(*
¨gs
, "-respin"))

294 i‡(
¨gs
[1])

296 
¨gs
++;

297 
ª•ö
 = *
¨gs
;

299 
bad¨g
 = 1;

301 i‡(!
	`°rcmp
(*
¨gs
, "-signer"))

303 i‡(
¨gs
[1])

305 
¨gs
++;

306 
signfûe
 = *
¨gs
;

308 
bad¨g
 = 1;

310 i‡(!
	`°rcmp
 (*
¨gs
, "-VAfile"))

312 i‡(
¨gs
[1])

314 
¨gs
++;

315 
vîify_˚πfûe
 = *
¨gs
;

316 
vîify_Êags
 |
OCSP_TRUSTOTHER
;

318 
bad¨g
 = 1;

320 i‡(!
	`°rcmp
(*
¨gs
, "-sign_other"))

322 i‡(
¨gs
[1])

324 
¨gs
++;

325 
sign_˚πfûe
 = *
¨gs
;

327 
bad¨g
 = 1;

329 i‡(!
	`°rcmp
(*
¨gs
, "-verify_other"))

331 i‡(
¨gs
[1])

333 
¨gs
++;

334 
vîify_˚πfûe
 = *
¨gs
;

336 
bad¨g
 = 1;

338 i‡(!
	`°rcmp
 (*
¨gs
, "-CAfile"))

340 i‡(
¨gs
[1])

342 
¨gs
++;

343 
CAfûe
 = *
¨gs
;

345 
bad¨g
 = 1;

347 i‡(!
	`°rcmp
 (*
¨gs
, "-CApath"))

349 i‡(
¨gs
[1])

351 
¨gs
++;

352 
CA∑th
 = *
¨gs
;

354 
bad¨g
 = 1;

356 i‡(!
	`°rcmp
 (*
¨gs
, "-validity_period"))

358 i‡(
¨gs
[1])

360 
¨gs
++;

361 
n£c
 = 
	`©ﬁ
(*
¨gs
);

362 i‡(
n£c
 < 0)

364 
	`BIO_¥ötf
(
bio_îr
,

366 *
¨gs
);

367 
bad¨g
 = 1;

370 
bad¨g
 = 1;

372 i‡(!
	`°rcmp
 (*
¨gs
, "-status_age"))

374 i‡(
¨gs
[1])

376 
¨gs
++;

377 
maxage
 = 
	`©ﬁ
(*
¨gs
);

378 i‡(
maxage
 < 0)

380 
	`BIO_¥ötf
(
bio_îr
,

382 *
¨gs
);

383 
bad¨g
 = 1;

386 
bad¨g
 = 1;

388 i‡(!
	`°rcmp
(*
¨gs
, "-signkey"))

390 i‡(
¨gs
[1])

392 
¨gs
++;

393 
keyfûe
 = *
¨gs
;

395 
bad¨g
 = 1;

397 i‡(!
	`°rcmp
(*
¨gs
, "-reqout"))

399 i‡(
¨gs
[1])

401 
¨gs
++;

402 
ªqout
 = *
¨gs
;

404 
bad¨g
 = 1;

406 i‡(!
	`°rcmp
(*
¨gs
, "-respout"))

408 i‡(
¨gs
[1])

410 
¨gs
++;

411 
ª•out
 = *
¨gs
;

413 
bad¨g
 = 1;

415 i‡(!
	`°rcmp
(*
¨gs
, "-path"))

417 i‡(
¨gs
[1])

419 
¨gs
++;

420 
∑th
 = *
¨gs
;

422 
bad¨g
 = 1;

424 i‡(!
	`°rcmp
(*
¨gs
, "-issuer"))

426 i‡(
¨gs
[1])

428 
¨gs
++;

429 
	`X509_‰ì
(
issuî
);

430 
issuî
 = 
	`lﬂd_˚π
(
bio_îr
, *
¨gs
, 
FORMAT_PEM
,

431 
NULL
, 
e
, "issuer certificate");

432 if(!
issuî
Ë
íd
;

434 
bad¨g
 = 1;

436 i‡(!
	`°rcmp
 (*
¨gs
, "-cert"))

438 i‡(
¨gs
[1])

440 
¨gs
++;

441 
	`X509_‰ì
(
˚π
);

442 
˚π
 = 
	`lﬂd_˚π
(
bio_îr
, *
¨gs
, 
FORMAT_PEM
,

443 
NULL
, 
e
, "certificate");

444 if(!
˚π
Ë
íd
;

445 i‡(!
˚π_id_md
Ë˚π_id_md = 
	`EVP_sha1
();

446 if(!
	`add_oc•_˚π
(&
ªq
, 
˚π
, 
˚π_id_md
, 
issuî
, 
ids
))

447 
íd
;

448 if(!
	`sk_OPENSSL_STRING_push
(
ªq«mes
, *
¨gs
))

449 
íd
;

451 
bad¨g
 = 1;

453 i‡(!
	`°rcmp
(*
¨gs
, "-serial"))

455 i‡(
¨gs
[1])

457 
¨gs
++;

458 i‡(!
˚π_id_md
Ë˚π_id_md = 
	`EVP_sha1
();

459 if(!
	`add_oc•_£rül
(&
ªq
, *
¨gs
, 
˚π_id_md
, 
issuî
, 
ids
))

460 
íd
;

461 if(!
	`sk_OPENSSL_STRING_push
(
ªq«mes
, *
¨gs
))

462 
íd
;

464 
bad¨g
 = 1;

466 i‡(!
	`°rcmp
(*
¨gs
, "-index"))

468 i‡(
¨gs
[1])

470 
¨gs
++;

471 
ridx_fûíame
 = *
¨gs
;

473 
bad¨g
 = 1;

475 i‡(!
	`°rcmp
(*
¨gs
, "-CA"))

477 i‡(
¨gs
[1])

479 
¨gs
++;

480 
rˇ_fûíame
 = *
¨gs
;

482 
bad¨g
 = 1;

484 i‡(!
	`°rcmp
 (*
¨gs
, "-nmin"))

486 i‡(
¨gs
[1])

488 
¨gs
++;

489 
nmö
 = 
	`©ﬁ
(*
¨gs
);

490 i‡(
nmö
 < 0)

492 
	`BIO_¥ötf
(
bio_îr
,

494 *
¨gs
);

495 
bad¨g
 = 1;

498 i‡(
ndays
 == -1)

499 
ndays
 = 0;

500 
bad¨g
 = 1;

502 i‡(!
	`°rcmp
 (*
¨gs
, "-nrequest"))

504 i‡(
¨gs
[1])

506 
¨gs
++;

507 
ac˚±_cou¡
 = 
	`©ﬁ
(*
¨gs
);

508 i‡(
ac˚±_cou¡
 < 0)

510 
	`BIO_¥ötf
(
bio_îr
,

512 *
¨gs
);

513 
bad¨g
 = 1;

516 
bad¨g
 = 1;

518 i‡(!
	`°rcmp
 (*
¨gs
, "-ndays"))

520 i‡(
¨gs
[1])

522 
¨gs
++;

523 
ndays
 = 
	`©ﬁ
(*
¨gs
);

524 i‡(
ndays
 < 0)

526 
	`BIO_¥ötf
(
bio_îr
,

528 *
¨gs
);

529 
bad¨g
 = 1;

532 
bad¨g
 = 1;

534 i‡(!
	`°rcmp
(*
¨gs
, "-rsigner"))

536 i‡(
¨gs
[1])

538 
¨gs
++;

539 
rsignfûe
 = *
¨gs
;

541 
bad¨g
 = 1;

543 i‡(!
	`°rcmp
(*
¨gs
, "-rkey"))

545 i‡(
¨gs
[1])

547 
¨gs
++;

548 
rkeyfûe
 = *
¨gs
;

550 
bad¨g
 = 1;

552 i‡(!
	`°rcmp
(*
¨gs
, "-rother"))

554 i‡(
¨gs
[1])

556 
¨gs
++;

557 
r˚πfûe
 = *
¨gs
;

559 
bad¨g
 = 1;

561 i‡((
˚π_id_md
 = 
	`EVP_gë_dige°by«me
((*
¨gs
)+1))==
NULL
)

563 
bad¨g
 = 1;

565 
¨gs
++;

569 i‡(!
ªq
 && !
ªqö
 && !
ª•ö
 && !(
p‹t
 && 
ridx_fûíame
)Ë
bad¨g
 = 1;

571 i‡(
bad¨g
)

573 
	`BIO_¥ötf
 (
bio_îr
, "OCSP utility\n");

574 
	`BIO_¥ötf
 (
bio_îr
, "Usage ocsp [options]\n");

575 
	`BIO_¥ötf
 (
bio_îr
, "where optionsáre\n");

576 
	`BIO_¥ötf
 (
bio_îr
, "-out file output filename\n");

577 
	`BIO_¥ötf
 (
bio_îr
, "-issuer file issuer certificate\n");

578 
	`BIO_¥ötf
 (
bio_îr
, "-cert file certificateÅo check\n");

579 
	`BIO_¥ötf
 (
bio_îr
, "-serialÇ serialÇumberÅo check\n");

580 
	`BIO_¥ötf
 (
bio_îr
, "-signer file certificateÅo sign OCSPÑequest with\n");

581 
	`BIO_¥ötf
 (
bio_îr
, "-signkey fileÖrivate keyÅo sign OCSPÑequest with\n");

582 
	`BIO_¥ötf
 (
bio_îr
, "-sign_other fileádditional certificatesÅo include in signedÑequest\n");

583 
	`BIO_¥ötf
 (
bio_îr
, "-no_certs don't includeány certificates in signedÑequest\n");

584 
	`BIO_¥ötf
 (
bio_îr
, "-req_textÖrintÅext form ofÑequest\n");

585 
	`BIO_¥ötf
 (
bio_îr
, "-resp_textÖrintÅext form ofÑesponse\n");

586 
	`BIO_¥ötf
 (
bio_îr
, "-textÖrintÅext form ofÑequestándÑesponse\n");

587 
	`BIO_¥ötf
 (
bio_îr
, "-reqout file write DERÉncoded OCSPÑequestÅo \"file\"\n");

588 
	`BIO_¥ötf
 (
bio_îr
, "-respout file write DERÉncoded OCSPÑeponseÅo \"file\"\n");

589 
	`BIO_¥ötf
 (
bio_îr
, "-reqin fileÑead DERÉncoded OCSPÑequest from \"file\"\n");

590 
	`BIO_¥ötf
 (
bio_îr
, "-respin fileÑead DERÉncoded OCSPÑeponse from \"file\"\n");

591 
	`BIO_¥ötf
 (
bio_îr
, "-nonceádd OCSPÇonceÅoÑequest\n");

592 
	`BIO_¥ötf
 (
bio_îr
, "-no_nonce don'tádd OCSPÇonceÅoÑequest\n");

593 
	`BIO_¥ötf
 (
bio_îr
, "-url URL OCSPÑesponder URL\n");

594 
	`BIO_¥ötf
 (
bio_îr
, "-host host:n send OCSPÑequestÅo host onÖortÇ\n");

595 
	`BIO_¥ötf
 (
bio_îr
, "-pathÖathÅo use in OCSPÑequest\n");

596 
	`BIO_¥ötf
 (
bio_îr
, "-CApath dirÅrusted certificates directory\n");

597 
	`BIO_¥ötf
 (
bio_îr
, "-CAfile fileÅrusted certificates file\n");

598 
	`BIO_¥ötf
 (
bio_îr
, "-VAfile file validator certificates file\n");

599 
	`BIO_¥ötf
 (
bio_îr
, "-validity_periodÇ maximum validity discrepancy in seconds\n");

600 
	`BIO_¥ötf
 (
bio_îr
, "-status_ageÇ maximum statuságe in seconds\n");

601 
	`BIO_¥ötf
 (
bio_îr
, "-noverify don't verifyÑesponseátáll\n");

602 
	`BIO_¥ötf
 (
bio_îr
, "-verify_other fileádditional certificatesÅo search for signer\n");

603 
	`BIO_¥ötf
 (
bio_îr
, "-trust_other don't verifyádditional certificates\n");

604 
	`BIO_¥ötf
 (
bio_îr
, "-no_intern don't search certificates contained inÑesponse for signer\n");

605 
	`BIO_¥ötf
 (
bio_îr
, "-no_signature_verify don't check signature onÑesponse\n");

606 
	`BIO_¥ötf
 (
bio_îr
, "-no_cert_verify don't check signing certificate\n");

607 
	`BIO_¥ötf
 (
bio_îr
, "-no_chain don't chain verifyÑesponse\n");

608 
	`BIO_¥ötf
 (
bio_îr
, "-no_cert_checks don't doádditional checks on signing certificate\n");

609 
	`BIO_¥ötf
 (
bio_îr
, "-portÇumÖortÅoÑunÑesponder on\n");

610 
	`BIO_¥ötf
 (
bio_îr
, "-index file certificate status index file\n");

611 
	`BIO_¥ötf
 (
bio_îr
, "-CA file CA certificate\n");

612 
	`BIO_¥ötf
 (
bio_îr
, "-rsigner fileÑesponder certificateÅo signÑesponses with\n");

613 
	`BIO_¥ötf
 (
bio_îr
, "-rkey fileÑesponder keyÅo signÑesponses with\n");

614 
	`BIO_¥ötf
 (
bio_îr
, "-rother file other certificatesÅo include inÑesponse\n");

615 
	`BIO_¥ötf
 (
bio_îr
, "-resp_no_certs don't includeány certificates inÑesponse\n");

616 
	`BIO_¥ötf
 (
bio_îr
, "-nminÇÇumber of minutes beforeÇext update\n");

617 
	`BIO_¥ötf
 (
bio_îr
, "-ndaysÇÇumber of days beforeÇext update\n");

618 
	`BIO_¥ötf
 (
bio_îr
, "-resp_key_id identifyÑeponse by signing certificate key ID\n");

619 
	`BIO_¥ötf
 (
bio_îr
, "-nrequestÇÇumber ofÑequestsÅoáccept (default unlimited)\n");

620 
	`BIO_¥ötf
 (
bio_îr
, "-<dgstálg> use specified digest inÅheÑequest\n");

621 
íd
;

624 if(
outfûe
Ë
out
 = 
	`BIO_√w_fûe
(outfile, "w");

625 
out
 = 
	`BIO_√w_Â
(
°dout
, 
BIO_NOCLOSE
);

627 if(!
out
)

629 
	`BIO_¥ötf
(
bio_îr
, "Error opening output file\n");

630 
íd
;

633 i‡(!
ªq
 && (
add_n⁄˚
 != 2))ádd_nonce = 0;

635 i‡(!
ªq
 && 
ªqö
)

637 
dîbio
 = 
	`BIO_√w_fûe
(
ªqö
, "rb");

638 i‡(!
dîbio
)

640 
	`BIO_¥ötf
(
bio_îr
, "Error Opening OCSPÑequest file\n");

641 
íd
;

643 
ªq
 = 
	`d2i_OCSP_REQUEST_bio
(
dîbio
, 
NULL
);

644 
	`BIO_‰ì
(
dîbio
);

645 if(!
ªq
)

647 
	`BIO_¥ötf
(
bio_îr
, "ErrorÑeading OCSPÑequest\n");

648 
íd
;

652 i‡(!
ªq
 && 
p‹t
)

654 
acbio
 = 
	`öô_ª•⁄dî
(
p‹t
);

655 i‡(!
acbio
)

656 
íd
;

659 i‡(
rsignfûe
 && !
rdb
)

661 i‡(!
rkeyfûe
Ërkeyfûê
rsignfûe
;

662 
rsig√r
 = 
	`lﬂd_˚π
(
bio_îr
, 
rsignfûe
, 
FORMAT_PEM
,

663 
NULL
, 
e
, "responder certificate");

664 i‡(!
rsig√r
)

666 
	`BIO_¥ötf
(
bio_îr
, "ErrorÜoadingÑesponder certificate\n");

667 
íd
;

669 
rˇ_˚π
 = 
	`lﬂd_˚π
(
bio_îr
, 
rˇ_fûíame
, 
FORMAT_PEM
,

670 
NULL
, 
e
, "CA certificate");

671 i‡(
r˚πfûe
)

673 
rŸhî
 = 
	`lﬂd_˚πs
(
bio_îr
, 
r˚πfûe
, 
FORMAT_PEM
,

674 
NULL
, 
e
, "responder other certificates");

675 i‡(!
rŸhî
Ë
íd
;

677 
rkey
 = 
	`lﬂd_key
(
bio_îr
, 
rkeyfûe
, 
FORMAT_PEM
, 0, 
NULL
, NULL,

679 i‡(!
rkey
)

680 
íd
;

682 if(
acbio
)

683 
	`BIO_¥ötf
(
bio_îr
, "Waiting for OCSP client connections...\n");

685 
ªdo_ac˚±
:

687 i‡(
acbio
)

689 i‡(!
	`do_ª•⁄dî
(&
ªq
, &
cbio
, 
acbio
, 
p‹t
))

690 
íd
;

691 i‡(!
ªq
)

693 
ª•
 = 
	`OCSP_ª•⁄£_¸óã
(
OCSP_RESPONSE_STATUS_MALFORMEDREQUEST
, 
NULL
);

694 
	`£nd_oc•_ª•⁄£
(
cbio
, 
ª•
);

695 
d⁄e_ª•
;

699 i‡(!
ªq
 && (
signfûe
 || 
ªqout
 || 
ho°
 || 
add_n⁄˚
 || 
ridx_fûíame
))

701 
	`BIO_¥ötf
(
bio_îr
, "Needán OCSPÑequest forÅhis operation!\n");

702 
íd
;

705 i‡(
ªq
 && 
add_n⁄˚
Ë
	`OCSP_ªque°_add1_n⁄˚
‘eq, 
NULL
, -1);

707 i‡(
signfûe
)

709 i‡(!
keyfûe
Ëkeyfûê
signfûe
;

710 
sig√r
 = 
	`lﬂd_˚π
(
bio_îr
, 
signfûe
, 
FORMAT_PEM
,

711 
NULL
, 
e
, "signer certificate");

712 i‡(!
sig√r
)

714 
	`BIO_¥ötf
(
bio_îr
, "ErrorÜoading signer certificate\n");

715 
íd
;

717 i‡(
sign_˚πfûe
)

719 
sign_Ÿhî
 = 
	`lﬂd_˚πs
(
bio_îr
, 
sign_˚πfûe
, 
FORMAT_PEM
,

720 
NULL
, 
e
, "signer certificates");

721 i‡(!
sign_Ÿhî
Ë
íd
;

723 
key
 = 
	`lﬂd_key
(
bio_îr
, 
keyfûe
, 
FORMAT_PEM
, 0, 
NULL
, NULL,

725 i‡(!
key
)

726 
íd
;

728 i‡(!
	`OCSP_ªque°_sign
(
ªq
, 
sig√r
, 
key
, 
NULL
, 
sign_Ÿhî
, 
sign_Êags
))

730 
	`BIO_¥ötf
(
bio_îr
, "Error signing OCSPÑequest\n");

731 
íd
;

735 i‡(
ªq_ãxt
 && 
ªq
Ë
	`OCSP_REQUEST_¥öt
(
out
,Ñeq, 0);

737 i‡(
ªqout
)

739 
dîbio
 = 
	`BIO_√w_fûe
(
ªqout
, "wb");

740 if(!
dîbio
)

742 
	`BIO_¥ötf
(
bio_îr
, "Eº‹ o≥nög fûê%s\n", 
ªqout
);

743 
íd
;

745 
	`i2d_OCSP_REQUEST_bio
(
dîbio
, 
ªq
);

746 
	`BIO_‰ì
(
dîbio
);

749 i‡(
ridx_fûíame
 && (!
rkey
 || !
rsig√r
 || !
rˇ_˚π
))

751 
	`BIO_¥ötf
(
bio_îr
, "NeedáÑesponder certificate, keyánd CA forÅhis operation!\n");

752 
íd
;

755 i‡(
ridx_fûíame
 && !
rdb
)

757 
rdb
 = 
	`lﬂd_ödex
(
ridx_fûíame
, 
NULL
);

758 i‡(!
rdb
Ë
íd
;

759 i‡(!
	`ödex_ödex
(
rdb
)Ë
íd
;

762 i‡(
rdb
)

764 
i
 = 
	`make_oc•_ª•⁄£
(&
ª•
, 
ªq
, 
rdb
, 
rˇ_˚π
, 
rsig√r
, 
rkey
, 
rŸhî
, 
rÊags
, 
nmö
, 
ndays
);

765 i‡(
cbio
)

766 
	`£nd_oc•_ª•⁄£
(
cbio
, 
ª•
);

768 i‡(
ho°
)

770 #i‚de‡
OPENSSL_NO_SOCK


771 
ª•
 = 
	`¥o˚ss_ª•⁄dî
(
bio_îr
, 
ªq
, 
ho°
, 
∑th
,

772 
p‹t
, 
u£_s¶
, 
hódîs
, 
ªq_timeout
);

773 i‡(!
ª•
)

774 
íd
;

776 
	`BIO_¥ötf
(
bio_îr
, "Error creating connect BIO - socketsÇot supported.\n");

777 
íd
;

780 i‡(
ª•ö
)

782 
dîbio
 = 
	`BIO_√w_fûe
(
ª•ö
, "rb");

783 i‡(!
dîbio
)

785 
	`BIO_¥ötf
(
bio_îr
, "Error Opening OCSPÑesponse file\n");

786 
íd
;

788 
ª•
 = 
	`d2i_OCSP_RESPONSE_bio
(
dîbio
, 
NULL
);

789 
	`BIO_‰ì
(
dîbio
);

790 if(!
ª•
)

792 
	`BIO_¥ötf
(
bio_îr
, "ErrorÑeading OCSPÑesponse\n");

793 
íd
;

799 
ªt
 = 0;

800 
íd
;

803 
d⁄e_ª•
:

805 i‡(
ª•out
)

807 
dîbio
 = 
	`BIO_√w_fûe
(
ª•out
, "wb");

808 if(!
dîbio
)

810 
	`BIO_¥ötf
(
bio_îr
, "Eº‹ o≥nög fûê%s\n", 
ª•out
);

811 
íd
;

813 
	`i2d_OCSP_RESPONSE_bio
(
dîbio
, 
ª•
);

814 
	`BIO_‰ì
(
dîbio
);

817 
i
 = 
	`OCSP_ª•⁄£_°©us
(
ª•
);

819 i‡(
i
 !
OCSP_RESPONSE_STATUS_SUCCESSFUL
)

821 
	`BIO_¥ötf
(
out
, "Responder Error: %s (%d)\n",

822 
	`OCSP_ª•⁄£_°©us_°r
(
i
), i);

823 i‡(
ign‹e_îr
)

824 
ªdo_ac˚±
;

825 
ªt
 = 0;

826 
íd
;

829 i‡(
ª•_ãxt
Ë
	`OCSP_RESPONSE_¥öt
(
out
, 
ª•
, 0);

832 i‡(
cbio
)

834 i‡(
ac˚±_cou¡
 > 0)

835 
ac˚±_cou¡
--;

837 i‡(
ac˚±_cou¡
)

839 
	`BIO_‰ì_Æl
(
cbio
);

840 
cbio
 = 
NULL
;

841 
	`OCSP_REQUEST_‰ì
(
ªq
);

842 
ªq
 = 
NULL
;

843 
	`OCSP_RESPONSE_‰ì
(
ª•
);

844 
ª•
 = 
NULL
;

845 
ªdo_ac˚±
;

847 
íd
;

850 i‡(!
°‹e
)

851 
°‹e
 = 
	`£tup_vîify
(
bio_îr
, 
CAfûe
, 
CA∑th
);

852 i‡(!
°‹e
)

853 
íd
;

854 i‡(
vîify_˚πfûe
)

856 
vîify_Ÿhî
 = 
	`lﬂd_˚πs
(
bio_îr
, 
vîify_˚πfûe
, 
FORMAT_PEM
,

857 
NULL
, 
e
, "validator certificate");

858 i‡(!
vîify_Ÿhî
Ë
íd
;

861 
bs
 = 
	`OCSP_ª•⁄£_gë1_basic
(
ª•
);

863 i‡(!
bs
)

865 
	`BIO_¥ötf
(
bio_îr
, "ErrorÖarsingÑesponse\n");

866 
íd
;

869 i‡(!
novîify
)

871 i‡(
ªq
 && ((
i
 = 
	`OCSP_check_n⁄˚
‘eq, 
bs
)) <= 0))

873 i‡(
i
 == -1)

874 
	`BIO_¥ötf
(
bio_îr
, "WARNING:ÇoÇonce inÑesponse\n");

877 
	`BIO_¥ötf
(
bio_îr
, "Nonce VerifyÉrror\n");

878 
íd
;

882 
i
 = 
	`OCSP_basic_vîify
(
bs
, 
vîify_Ÿhî
, 
°‹e
, 
vîify_Êags
);

883 i‡(
i
 < 0Ëò
	`OCSP_basic_vîify
(
bs
, 
NULL
, 
°‹e
, 0);

885 if(
i
 <= 0)

887 
	`BIO_¥ötf
(
bio_îr
, "Response Verify Failure\n");

888 
	`ERR_¥öt_îr‹s
(
bio_îr
);

891 
	`BIO_¥ötf
(
bio_îr
, "Response verify OK\n");

895 i‡(!
	`¥öt_oc•_summ¨y
(
out
, 
bs
, 
ªq
, 
ªq«mes
, 
ids
, 
n£c
, 
maxage
))

896 
íd
;

898 
ªt
 = 0;

900 
íd
:

901 
	`ERR_¥öt_îr‹s
(
bio_îr
);

902 
	`X509_‰ì
(
sig√r
);

903 
	`X509_STORE_‰ì
(
°‹e
);

904 
	`EVP_PKEY_‰ì
(
key
);

905 
	`EVP_PKEY_‰ì
(
rkey
);

906 
	`X509_‰ì
(
issuî
);

907 
	`X509_‰ì
(
˚π
);

908 
	`X509_‰ì
(
rsig√r
);

909 
	`X509_‰ì
(
rˇ_˚π
);

910 
	`‰ì_ödex
(
rdb
);

911 
	`BIO_‰ì_Æl
(
cbio
);

912 
	`BIO_‰ì_Æl
(
acbio
);

913 
	`BIO_‰ì
(
out
);

914 
	`OCSP_REQUEST_‰ì
(
ªq
);

915 
	`OCSP_RESPONSE_‰ì
(
ª•
);

916 
	`OCSP_BASICRESP_‰ì
(
bs
);

917 
	`sk_OPENSSL_STRING_‰ì
(
ªq«mes
);

918 
	`sk_OCSP_CERTID_‰ì
(
ids
);

919 
	`sk_X509_p›_‰ì
(
sign_Ÿhî
, 
X509_‰ì
);

920 
	`sk_X509_p›_‰ì
(
vîify_Ÿhî
, 
X509_‰ì
);

921 
	`sk_CONF_VALUE_p›_‰ì
(
hódîs
, 
X509V3_c⁄f_‰ì
);

923 i‡(
u£_s¶
 != -1)

925 
	`OPENSSL_‰ì
(
ho°
);

926 
	`OPENSSL_‰ì
(
p‹t
);

927 
	`OPENSSL_‰ì
(
∑th
);

930 
	`OPENSSL_EXIT
(
ªt
);

931 
	}
}

933 
add_oc•_˚π
(
OCSP_REQUEST
 **
ªq
, 
X509
 *
˚π
, c⁄° 
EVP_MD
 *
˚π_id_md
,X509 *
issuî
,

934 
STACK_OF
(
OCSP_CERTID
Ë*
ids
)

936 
OCSP_CERTID
 *
	gid
;

937 if(!
	gissuî
)

939 
BIO_¥ötf
(
bio_îr
, "No issuer certificate specified\n");

942 if(!*
	gªq
Ë*ªq = 
OCSP_REQUEST_√w
();

943 if(!*
	gªq
Ë
	gîr
;

944 
	gid
 = 
OCSP_˚π_to_id
(
˚π_id_md
, 
˚π
, 
issuî
);

945 if(!
	gid
 || !
sk_OCSP_CERTID_push
(
ids
, 
id
)Ë
	gîr
;

946 if(!
OCSP_ªque°_add0_id
(*
ªq
, 
id
)Ë
	gîr
;

949 
	gîr
:

950 
BIO_¥ötf
(
bio_îr
, "Error Creating OCSPÑequest\n");

954 
add_oc•_£rül
(
OCSP_REQUEST
 **
ªq
, *
£rül
,c⁄° 
EVP_MD
 *
˚π_id_md
, 
X509
 *
issuî
,

955 
STACK_OF
(
OCSP_CERTID
Ë*
ids
)

957 
OCSP_CERTID
 *
	gid
;

958 
X509_NAME
 *
	göame
;

959 
ASN1_BIT_STRING
 *
	gikey
;

960 
ASN1_INTEGER
 *
	g¢o
;

961 if(!
	gissuî
)

963 
BIO_¥ötf
(
bio_îr
, "No issuer certificate specified\n");

966 if(!*
	gªq
Ë*ªq = 
OCSP_REQUEST_√w
();

967 if(!*
	gªq
Ë
	gîr
;

968 
	göame
 = 
X509_gë_subje˘_«me
(
issuî
);

969 
	gikey
 = 
X509_gë0_pubkey_bô°r
(
issuî
);

970 
	g¢o
 = 
s2i_ASN1_INTEGER
(
NULL
, 
£rül
);

971 if(!
	g¢o
)

973 
BIO_¥ötf
(
bio_îr
, "Eº‹ c⁄vîtög sîü»numbî %s\n", 
£rül
);

976 
	gid
 = 
OCSP_˚π_id_√w
(
˚π_id_md
, 
öame
, 
ikey
, 
¢o
);

977 
ASN1_INTEGER_‰ì
(
¢o
);

978 if(!
	gid
 || !
sk_OCSP_CERTID_push
(
ids
, 
id
)Ë
	gîr
;

979 if(!
OCSP_ªque°_add0_id
(*
ªq
, 
id
)Ë
	gîr
;

982 
	gîr
:

983 
BIO_¥ötf
(
bio_îr
, "Error Creating OCSPÑequest\n");

987 
¥öt_oc•_summ¨y
(
BIO
 *
out
, 
OCSP_BASICRESP
 *
bs
, 
OCSP_REQUEST
 *
ªq
,

988 
STACK_OF
(
OPENSSL_STRING
Ë*
«mes
,

989 
STACK_OF
(
OCSP_CERTID
Ë*
ids
, 
n£c
,

990 
maxage
)

992 
OCSP_CERTID
 *
	gid
;

993 *
	g«me
;

994 
	gi
;

996 
	g°©us
, 
	gªas⁄
;

998 
ASN1_GENERALIZEDTIME
 *
	gªv
, *
	gthisupd
, *
	g√xtupd
;

1000 i‡(!
	gbs
 || !
	gªq
 || !
sk_OPENSSL_STRING_num
(
«mes
Ë|| !
sk_OCSP_CERTID_num
(
ids
))

1003 
	gi
 = 0; i < 
sk_OCSP_CERTID_num
(
ids
); i++)

1005 
	gid
 = 
sk_OCSP_CERTID_vÆue
(
ids
, 
i
);

1006 
	g«me
 = 
sk_OPENSSL_STRING_vÆue
(
«mes
, 
i
);

1007 
BIO_¥ötf
(
out
, "%s: ", 
«me
);

1009 if(!
OCSP_ª•_föd_°©us
(
bs
, 
id
, &
°©us
, &
ªas⁄
,

1010 &
ªv
, &
thisupd
, &
√xtupd
))

1012 
BIO_puts
(
out
, "ERROR: No Status found.\n");

1019 i‡(!
OCSP_check_vÆidôy
(
thisupd
, 
√xtupd
, 
n£c
, 
maxage
))

1021 
BIO_puts
(
out
, "WARNING: StatusÅimes invalid.\n");

1022 
ERR_¥öt_îr‹s
(
out
);

1024 
BIO_¥ötf
(
out
, "%s\n", 
OCSP_˚π_°©us_°r
(
°©us
));

1026 
BIO_puts
(
out
, "\tThis Update: ");

1027 
ASN1_GENERALIZEDTIME_¥öt
(
out
, 
thisupd
);

1028 
BIO_puts
(
out
, "\n");

1030 if(
	g√xtupd
)

1032 
BIO_puts
(
out
, "\tNext Update: ");

1033 
ASN1_GENERALIZEDTIME_¥öt
(
out
, 
√xtupd
);

1034 
BIO_puts
(
out
, "\n");

1037 i‡(
	g°©us
 !
V_OCSP_CERTSTATUS_REVOKED
)

1040 i‡(
	gªas⁄
 != -1)

1041 
BIO_¥ötf
(
out
, "\tReason: %s\n",

1042 
OCSP_¸l_ªas⁄_°r
(
ªas⁄
));

1044 
BIO_puts
(
out
, "\tRevocation Time: ");

1045 
ASN1_GENERALIZEDTIME_¥öt
(
out
, 
ªv
);

1046 
BIO_puts
(
out
, "\n");

1053 
make_oc•_ª•⁄£
(
OCSP_RESPONSE
 **
ª•
, 
OCSP_REQUEST
 *
ªq
, 
CA_DB
 *
db
,

1054 
X509
 *
ˇ
, X509 *
r˚π
, 
EVP_PKEY
 *
rkey
,

1055 
STACK_OF
(
X509
Ë*
rŸhî
, 
Êags
,

1056 
nmö
, 
ndays
)

1058 
ASN1_TIME
 *
	gthisupd
 = 
NULL
, *
	g√xtupd
 = NULL;

1059 
OCSP_CERTID
 *
	gcid
, *
	gˇ_id
 = 
NULL
;

1060 
OCSP_BASICRESP
 *
	gbs
 = 
NULL
;

1061 
	gi
, 
	gid_cou¡
, 
	gªt
 = 1;

1063 
	gid_cou¡
 = 
OCSP_ªque°_⁄îeq_cou¡
(
ªq
);

1065 i‡(
	gid_cou¡
 <= 0)

1067 *
ª•
 = 
OCSP_ª•⁄£_¸óã
(
OCSP_RESPONSE_STATUS_MALFORMEDREQUEST
, 
NULL
);

1068 
	gíd
;

1072 
	gbs
 = 
OCSP_BASICRESP_√w
();

1073 
	gthisupd
 = 
X509_gmtime_adj
(
NULL
, 0);

1074 i‡(
	gndays
 != -1)

1075 
√xtupd
 = 
X509_gmtime_adj
(
NULL
, 
nmö
 * 60 + 
ndays
 * 3600 * 24 );

1078 
	gi
 = 0; i < 
	gid_cou¡
; i++)

1080 
OCSP_ONEREQ
 *
	g⁄e
;

1081 
ASN1_INTEGER
 *
	g£rül
;

1082 **
	göf
;

1083 
ASN1_OBJECT
 *
	g˚π_id_md_oid
;

1084 c⁄° 
EVP_MD
 *
	g˚π_id_md
;

1085 
	g⁄e
 = 
OCSP_ªque°_⁄îeq_gë0
(
ªq
, 
i
);

1086 
	gcid
 = 
OCSP_⁄îeq_gë0_id
(
⁄e
);

1088 
OCSP_id_gë0_öfo
(
NULL
,&
˚π_id_md_oid
, NULL,NULL, 
cid
);

1090 
	g˚π_id_md
 = 
EVP_gë_dige°byobj
(
˚π_id_md_oid
);

1091 i‡(! 
	g˚π_id_md
)

1093 *
	gª•
 = 
OCSP_ª•⁄£_¸óã
(
OCSP_RESPONSE_STATUS_INTERNALERROR
,

1094 
NULL
);

1095 
	gíd
;

1097 i‡(
	gˇ_id
Ë
OCSP_CERTID_‰ì
(
ˇ_id
);

1098 
	gˇ_id
 = 
OCSP_˚π_to_id
(
˚π_id_md
, 
NULL
, 
ˇ
);

1101 i‡(
OCSP_id_issuî_cmp
(
ˇ_id
, 
cid
))

1103 
OCSP_basic_add1_°©us
(
bs
, 
cid
,

1104 
V_OCSP_CERTSTATUS_UNKNOWN
,

1105 0, 
NULL
,

1106 
thisupd
, 
√xtupd
);

1109 
OCSP_id_gë0_öfo
(
NULL
, NULL, NULL, &
£rül
, 
cid
);

1110 
	göf
 = 
lookup_£rül
(
db
, 
£rül
);

1111 i‡(!
	göf
)

1112 
OCSP_basic_add1_°©us
(
bs
, 
cid
,

1113 
V_OCSP_CERTSTATUS_UNKNOWN
,

1114 0, 
NULL
,

1115 
thisupd
, 
√xtupd
);

1116 i‡(
	göf
[
DB_ty≥
][0] =
DB_TYPE_VAL
)

1117 
OCSP_basic_add1_°©us
(
bs
, 
cid
,

1118 
V_OCSP_CERTSTATUS_GOOD
,

1119 0, 
NULL
,

1120 
thisupd
, 
√xtupd
);

1121 i‡(
	göf
[
DB_ty≥
][0] =
DB_TYPE_REV
)

1123 
ASN1_OBJECT
 *
ö°
 = 
NULL
;

1124 
ASN1_TIME
 *
	gªvtm
 = 
NULL
;

1125 
ASN1_GENERALIZEDTIME
 *
	gövtm
 = 
NULL
;

1126 
OCSP_SINGLERESP
 *
	gsögÀ
;

1127 
	gªas⁄
 = -1;

1128 
u≈ack_ªvöfo
(&
ªvtm
, &
ªas⁄
, &
ö°
, &
övtm
, 
öf
[
DB_ªv_d©e
]);

1129 
	gsögÀ
 = 
OCSP_basic_add1_°©us
(
bs
, 
cid
,

1130 
V_OCSP_CERTSTATUS_REVOKED
,

1131 
ªas⁄
, 
ªvtm
,

1132 
thisupd
, 
√xtupd
);

1133 i‡(
	gövtm
)

1134 
OCSP_SINGLERESP_add1_ext_i2d
(
sögÀ
, 
NID_övÆidôy_d©e
, 
övtm
, 0, 0);

1135 i‡(
	gö°
)

1136 
OCSP_SINGLERESP_add1_ext_i2d
(
sögÀ
, 
NID_hﬁd_ö°ru˘i⁄_code
, 
ö°
, 0, 0);

1137 
ASN1_OBJECT_‰ì
(
ö°
);

1138 
ASN1_TIME_‰ì
(
ªvtm
);

1139 
ASN1_GENERALIZEDTIME_‰ì
(
övtm
);

1143 
OCSP_c›y_n⁄˚
(
bs
, 
ªq
);

1145 
OCSP_basic_sign
(
bs
, 
r˚π
, 
rkey
, 
NULL
, 
rŸhî
, 
Êags
);

1147 *
	gª•
 = 
OCSP_ª•⁄£_¸óã
(
OCSP_RESPONSE_STATUS_SUCCESSFUL
, 
bs
);

1149 
	gíd
:

1150 
ASN1_TIME_‰ì
(
thisupd
);

1151 
ASN1_TIME_‰ì
(
√xtupd
);

1152 
OCSP_CERTID_‰ì
(
ˇ_id
);

1153 
OCSP_BASICRESP_‰ì
(
bs
);

1154  
	gªt
;

1158 **
	$lookup_£rül
(
CA_DB
 *
db
, 
ASN1_INTEGER
 *
£r
)

1160 
i
;

1161 
BIGNUM
 *
bn
 = 
NULL
;

1162 *
ômp
, *
row
[
DB_NUMBER
],**
ºow
;

1163 
i
 = 0; i < 
DB_NUMBER
; i++Ë
row
[i] = 
NULL
;

1164 
bn
 = 
	`ASN1_INTEGER_to_BN
(
£r
,
NULL
);

1165 
	`OPENSSL_as£π
(
bn
);

1166 i‡(
	`BN_is_zîo
(
bn
))

1167 
ômp
 = 
	`BUF_°rdup
("00");

1169 
ômp
 = 
	`BN_bn2hex
(
bn
);

1170 
row
[
DB_£rül
] = 
ômp
;

1171 
	`BN_‰ì
(
bn
);

1172 
ºow
=
	`TXT_DB_gë_by_ödex
(
db
->db,
DB_£rül
,
row
);

1173 
	`OPENSSL_‰ì
(
ômp
);

1174  
ºow
;

1175 
	}
}

1179 
BIO
 *
	$öô_ª•⁄dî
(*
p‹t
)

1181 
BIO
 *
acbio
 = 
NULL
, *
bufbio
 = NULL;

1182 
bufbio
 = 
	`BIO_√w
(
	`BIO_f_buf„r
());

1183 i‡(!
bufbio
)

1184 
îr
;

1185 #i‚de‡
OPENSSL_NO_SOCK


1186 
acbio
 = 
	`BIO_√w_ac˚±
(
p‹t
);

1188 
	`BIO_¥ötf
(
bio_îr
, "Error setting upáccept BIO - socketsÇot supported.\n");

1190 i‡(!
acbio
)

1191 
îr
;

1192 
	`BIO_£t_ac˚±_bios
(
acbio
, 
bufbio
);

1193 
bufbio
 = 
NULL
;

1195 i‡(
	`BIO_do_ac˚±
(
acbio
) <= 0)

1197 
	`BIO_¥ötf
(
bio_îr
, "Error setting upáccept BIO\n");

1198 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1199 
îr
;

1202  
acbio
;

1204 
îr
:

1205 
	`BIO_‰ì_Æl
(
acbio
);

1206 
	`BIO_‰ì
(
bufbio
);

1207  
NULL
;

1208 
	}
}

1210 
	$do_ª•⁄dî
(
OCSP_REQUEST
 **
¥eq
, 
BIO
 **
pcbio
, BIO *
acbio
, *
p‹t
)

1212 
have_po°
 = 0, 
Àn
;

1213 
OCSP_REQUEST
 *
ªq
 = 
NULL
;

1214 
öbuf
[1024];

1215 
BIO
 *
cbio
 = 
NULL
;

1217 i‡(
	`BIO_do_ac˚±
(
acbio
) <= 0)

1219 
	`BIO_¥ötf
(
bio_îr
, "Erroráccepting connection\n");

1220 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1224 
cbio
 = 
	`BIO_p›
(
acbio
);

1225 *
pcbio
 = 
cbio
;

1229 
Àn
 = 
	`BIO_gës
(
cbio
, 
öbuf
,  inbuf);

1230 i‡(
Àn
 <= 0)

1233 i‡(!
have_po°
)

1235 if(
	`°∫cmp
(
öbuf
, "POST", 4))

1237 
	`BIO_¥ötf
(
bio_îr
, "InvalidÑequest\n");

1240 
have_po°
 = 1;

1243 i‡((
öbuf
[0] == '\r') || (inbuf[0] == '\n'))

1249 
ªq
 = 
	`d2i_OCSP_REQUEST_bio
(
cbio
, 
NULL
);

1251 i‡(!
ªq
)

1253 
	`BIO_¥ötf
(
bio_îr
, "ErrorÖarsing OCSPÑequest\n");

1254 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1257 *
¥eq
 = 
ªq
;

1261 
	}
}

1263 
	$£nd_oc•_ª•⁄£
(
BIO
 *
cbio
, 
OCSP_RESPONSE
 *
ª•
)

1265 
hâp_ª•
[] =

1268 i‡(!
cbio
)

1270 
	`BIO_¥ötf
(
cbio
, 
hâp_ª•
, 
	`i2d_OCSP_RESPONSE
(
ª•
, 
NULL
));

1271 
	`i2d_OCSP_RESPONSE_bio
(
cbio
, 
ª•
);

1272 ()
	`BIO_Êush
(
cbio
);

1274 
	}
}

1276 
OCSP_RESPONSE
 *
quîy_ª•⁄dî
(
BIO
 *
îr
, BIO *
cbio
, *
∑th
,

1277 
STACK_OF
(
CONF_VALUE
Ë*
hódîs
,

1278 
OCSP_REQUEST
 *
ªq
, 
ªq_timeout
)

1280 
	gfd
;

1281 
	grv
;

1282 
	gi
;

1283 
OCSP_REQ_CTX
 *
	g˘x
 = 
NULL
;

1284 
OCSP_RESPONSE
 *
	gr•
 = 
NULL
;

1285 
fd_£t
 
	gc⁄fds
;

1286 
timevÆ
 
	gtv
;

1288 i‡(
	gªq_timeout
 != -1)

1289 
BIO_£t_nbio
(
cbio
, 1);

1291 
	grv
 = 
BIO_do_c⁄√˘
(
cbio
);

1293 i‡((
	grv
 <0Ë&& ((
ªq_timeout
 =-1Ë|| !
BIO_should_ªåy
(
cbio
)))

1295 
BIO_puts
(
îr
, "Error connecting BIO\n");

1296  
	gNULL
;

1299 i‡(
BIO_gë_fd
(
cbio
, &
fd
) <= 0)

1301 
BIO_puts
(
îr
, "Can't get connection fd\n");

1302 
	gîr
;

1305 i‡(
	gªq_timeout
 !-1 && 
rv
 <= 0)

1307 
FD_ZERO
(&
c⁄fds
);

1308 
›ís¶_fd£t
(
fd
, &
c⁄fds
);

1309 
	gtv
.
	gtv_u£c
 = 0;

1310 
	gtv
.
	gtv_£c
 = 
ªq_timeout
;

1311 
	grv
 = 
£À˘
(
fd
 + 1, 
NULL
, (*)&
c⁄fds
, NULL, &
tv
);

1312 i‡(
	grv
 == 0)

1314 
BIO_puts
(
îr
, "Timeout on connect\n");

1315  
	gNULL
;

1320 
	g˘x
 = 
OCSP_£ndªq_√w
(
cbio
, 
∑th
, 
NULL
, -1);

1321 i‡(!
	g˘x
)

1322  
	gNULL
;

1324 
	gi
 = 0; i < 
sk_CONF_VALUE_num
(
hódîs
); i++)

1326 
CONF_VALUE
 *
	ghdr
 = 
sk_CONF_VALUE_vÆue
(
hódîs
, 
i
);

1327 i‡(!
OCSP_REQ_CTX_add1_hódî
(
˘x
, 
hdr
->
«me
, hdr->
vÆue
))

1328 
	gîr
;

1331 i‡(!
OCSP_REQ_CTX_£t1_ªq
(
˘x
, 
ªq
))

1332 
	gîr
;

1336 
	grv
 = 
OCSP_£ndªq_nbio
(&
r•
, 
˘x
);

1337 i‡(
	grv
 != -1)

1339 i‡(
	gªq_timeout
 == -1)

1341 
FD_ZERO
(&
c⁄fds
);

1342 
›ís¶_fd£t
(
fd
, &
c⁄fds
);

1343 
	gtv
.
	gtv_u£c
 = 0;

1344 
	gtv
.
	gtv_£c
 = 
ªq_timeout
;

1345 i‡(
BIO_should_ªad
(
cbio
))

1346 
	grv
 = 
£À˘
(
fd
 + 1, (*)&
c⁄fds
, 
NULL
, NULL, &
tv
);

1347 i‡(
BIO_should_wrôe
(
cbio
))

1348 
	grv
 = 
£À˘
(
fd
 + 1, 
NULL
, (*)&
c⁄fds
, NULL, &
tv
);

1351 
BIO_puts
(
îr
, "UnexpectedÑetry condition\n");

1352 
	gîr
;

1354 i‡(
	grv
 == 0)

1356 
BIO_puts
(
îr
, "Timeout onÑequest\n");

1359 i‡(
	grv
 == -1)

1361 
BIO_puts
(
îr
, "SelectÉrror\n");

1366 
	gîr
:

1367 i‡(
˘x
)

1368 
OCSP_REQ_CTX_‰ì
(
˘x
);

1370  
	gr•
;

1373 
OCSP_RESPONSE
 *
¥o˚ss_ª•⁄dî
(
BIO
 *
îr
, 
OCSP_REQUEST
 *
ªq
,

1374 *
ho°
, *
∑th
, *
p‹t
, 
u£_s¶
,

1375 
STACK_OF
(
CONF_VALUE
Ë*
hódîs
,

1376 
ªq_timeout
)

1378 
BIO
 *
	gcbio
 = 
NULL
;

1379 
SSL_CTX
 *
	g˘x
 = 
NULL
;

1380 
OCSP_RESPONSE
 *
	gª•
 = 
NULL
;

1381 
	gcbio
 = 
BIO_√w_c⁄√˘
(
ho°
);

1382 i‡(!
	gcbio
)

1384 
BIO_¥ötf
(
îr
, "Error creating connect BIO\n");

1385 
	gíd
;

1387 i‡(
	gp‹t
Ë
BIO_£t_c⁄n_p‹t
(
cbio
, 
p‹t
);

1388 i‡(
	gu£_s¶
 == 1)

1390 
BIO
 *
sbio
;

1391 #i‡!
deföed
(
OPENSSL_NO_SSL2
Ë&& !deföed(
OPENSSL_NO_SSL3
)

1392 
	g˘x
 = 
SSL_CTX_√w
(
SSLv23_˛õ¡_mëhod
());

1393 #ñi‡!
deföed
(
OPENSSL_NO_SSL3
)

1394 
	g˘x
 = 
SSL_CTX_√w
(
SSLv3_˛õ¡_mëhod
());

1395 #ñi‡!
deföed
(
OPENSSL_NO_SSL2
)

1396 
	g˘x
 = 
SSL_CTX_√w
(
SSLv2_˛õ¡_mëhod
());

1398 
BIO_¥ötf
(
îr
, "SSL is disabled\n");

1399 
	gíd
;

1401 i‡(
	g˘x
 =
NULL
)

1403 
BIO_¥ötf
(
îr
, "Error creating SSL context.\n");

1404 
	gíd
;

1406 
SSL_CTX_£t_mode
(
˘x
, 
SSL_MODE_AUTO_RETRY
);

1407 
	gsbio
 = 
BIO_√w_s¶
(
˘x
, 1);

1408 
	gcbio
 = 
BIO_push
(
sbio
, 
cbio
);

1410 
	gª•
 = 
quîy_ª•⁄dî
(
îr
, 
cbio
, 
∑th
, 
hódîs
, 
ªq
, 
ªq_timeout
);

1411 i‡(!
	gª•
)

1412 
BIO_¥ötf
(
bio_îr
, "Error querying OCSPÑesponsder\n");

1413 
	gíd
:

1414 i‡(
cbio
)

1415 
BIO_‰ì_Æl
(
cbio
);

1416 i‡(
	g˘x
)

1417 
SSL_CTX_‰ì
(
˘x
);

1418  
	gª•
;

	@openssl.c

113 
	~<°dio.h
>

114 
	~<°rög.h
>

115 
	~<°dlib.h
>

116 
	#OPENSSL_C


	)

117 
	~"≠ps.h
"

118 
	~<›ís¶/bio.h
>

119 
	~<›ís¶/¸y±o.h
>

120 
	~<›ís¶/ønd.h
>

121 
	~<›ís¶/lhash.h
>

122 
	~<›ís¶/c⁄f.h
>

123 
	~<›ís¶/x509.h
>

124 
	~<›ís¶/≥m.h
>

125 
	~<›ís¶/s¶.h
>

126 #i‚de‡
OPENSSL_NO_ENGINE


127 
	~<›ís¶/ígöe.h
>

129 
	#USE_SOCKETS


	)

130 
	~"¥ogs.h
"

131 
	~"s_≠ps.h
"

132 
	~<›ís¶/îr.h
>

133 #ifde‡
OPENSSL_FIPS


134 
	~<›ís¶/fùs.h
>

142 
LHASH_OF
(
FUNCTION
Ë*
¥og_öô
();

143 
do_cmd
(
LHASH_OF
(
FUNCTION
Ë*
¥og
,
¨gc
,*
¨gv
[]);

144 
li°_pkey
(
BIO
 *
out
);

145 
li°_cùhî
(
BIO
 *
out
);

146 
li°_md
(
BIO
 *
out
);

147 *
	gdeÁu…_c⁄fig_fûe
=
NULL
;

150 #ifde‡
MONOLITH


151 
CONF
 *
	gc⁄fig
=
NULL
;

152 
BIO
 *
	gbio_îr
=
NULL
;

156 
	$lock_dbg_cb
(
mode
, 
ty≥
, c⁄° *
fûe
, 
löe
)

158 
modes
[
CRYPTO_NUM_LOCKS
];

159 c⁄° *
îr°r
 = 
NULL
;

160 
rw
;

162 
rw
 = 
mode
 & (
CRYPTO_READ
|
CRYPTO_WRITE
);

163 i‡(!((
rw
 =
CRYPTO_READ
Ë|| (rw =
CRYPTO_WRITE
)))

165 
îr°r
 = "invalid mode";

166 
îr
;

169 i‡(
ty≥
 < 0 ||Åy≥ >
CRYPTO_NUM_LOCKS
)

171 
îr°r
 = "type out of bounds";

172 
îr
;

175 i‡(
mode
 & 
CRYPTO_LOCK
)

177 i‡(
modes
[
ty≥
])

179 
îr°r
 = "alreadyÜocked";

182 
îr
;

185 
modes
[
ty≥
] = 
rw
;

187 i‡(
mode
 & 
CRYPTO_UNLOCK
)

189 i‡(!
modes
[
ty≥
])

191 
îr°r
 = "notÜocked";

192 
îr
;

195 i‡(
modes
[
ty≥
] !
rw
)

197 
îr°r
 = (
rw
 =
CRYPTO_READ
) ?

202 
modes
[
ty≥
] = 0;

206 
îr°r
 = "invalid mode";

207 
îr
;

210 
îr
:

211 i‡(
îr°r
)

214 
	`Ârötf
(
°dîr
, "openssl (lock_dbg_cb): %s (mode=%d,Åype=%d)át %s:%d\n",

215 
îr°r
, 
mode
, 
ty≥
, 
fûe
, 
löe
);

217 
	}
}

219 #i‡
deföed
–
OPENSSL_SYS_VMS
Ë&& (
__INITIAL_POINTER_SIZE
 == 64)

220 
	#ARGV
 
_Argv


	)

222 
	#ARGV
 
Argv


	)

225 
	$maö
(
Argc
, *
ARGV
[])

227 
ARGS
 
¨g
;

228 
	#PROG_NAME_SIZE
 39

	)

229 
≤ame
[
PROG_NAME_SIZE
+1];

230 
FUNCTION
 
f
,*
Â
;

231 
MS_STATIC
 c⁄° *
¥om±
;

232 
MS_STATIC
 
buf
[1024];

233 *
to_‰ì
=
NULL
;

234 
n
,
i
,
ªt
=0;

235 
¨gc
;

236 **
¨gv
,*
p
;

237 
	`LHASH_OF
(
FUNCTION
Ë*
¥og
=
NULL
;

238 
îæöe
;

240 #i‡
	`deföed
–
OPENSSL_SYS_VMS
Ë&& (
__INITIAL_POINTER_SIZE
 == 64)

261 **
Argv
 = 
NULL
;

262 
‰ì_Argv
 = 0;

264 i‡((–
_Argv
) < 8)

265 #i‡!
	`deföed
–
VMS_TRUST_ARGV
)

266 || (
_Argv
[ 
Argc
] !
NULL
)

270 
i
;

271 
Argv
 = 
	`OPENSSL_mÆloc
–(
Argc
+ 1)* ( *));

272 i‡(
Argv
 =
NULL
)

273 { 
ªt
 = -1; 
íd
; }

274 
i
 = 0; i < 
Argc
; i++)

275 
Argv
[
i
] = 
_Argv
[i];

276 
Argv
[ 
Argc
] = 
NULL
;

277 
‰ì_Argv
 = 1;

284 
Argv
 = (**)
_Argv
;

288 
¨g
.
d©a
=
NULL
;

289 
¨g
.
cou¡
=0;

291 i‡(
bio_îr
 =
NULL
)

292 i‡((
bio_îr
=
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

293 
	`BIO_£t_Â
(
bio_îr
,
°dîr
,
BIO_NOCLOSE
|
BIO_FP_TEXT
);

295 i‡(
	`gëív
("OPENSSL_DEBUG_MEMORY"Ë!
NULL
)

297 i‡(!(0 =
	`°rcmp
(
	`gëív
("OPENSSL_DEBUG_MEMORY"), "off")))

299 
	`CRYPTO_mÆloc_debug_öô
();

300 
	`CRYPTO_£t_mem_debug_›ti⁄s
(
V_CRYPTO_MDEBUG_ALL
);

305 
	`CRYPTO_£t_mem_debug_fun˘i⁄s
(0, 0, 0, 0, 0);

308 
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_ON
);

311 i‡(
	`gëív
("OPENSSL_DEBUG_LOCKING"Ë!
NULL
)

314 
	`CRYPTO_£t_lockög_ˇŒback
(
lock_dbg_cb
);

317 if(
	`gëív
("OPENSSL_FIPS")) {

318 #ifde‡
OPENSSL_FIPS


319 i‡(!
	`FIPS_mode_£t
(1)) {

320 
	`ERR_lﬂd_¸y±o_°rögs
();

321 
	`ERR_¥öt_îr‹s
(
	`BIO_√w_Â
(
°dîr
,
BIO_NOCLOSE
));

322 
	`EXIT
(1);

325 
	`Ârötf
(
°dîr
, "FIPS modeÇot supported.\n");

326 
	`EXIT
(1);

330 
	`≠ps_°¨tup
();

333 
p
=
	`gëív
("OPENSSL_CONF");

334 i‡(
p
 =
NULL
)

335 
p
=
	`gëív
("SSLEAY_CONF");

336 i‡(
p
 =
NULL
)

337 
p
=
to_‰ì
=
	`make_c⁄fig_«me
();

339 
deÁu…_c⁄fig_fûe
=
p
;

341 
c⁄fig
=
	`NCONF_√w
(
NULL
);

342 
i
=
	`NCONF_lﬂd
(
c⁄fig
,
p
,&
îæöe
);

343 i‡(
i
 == 0)

345 i‡(
	`ERR_GET_REASON
(
	`ERR_≥ek_œ°_îr‹
())

346 =
CONF_R_NO_SUCH_FILE
)

348 
	`BIO_¥ötf
(
bio_îr
,

349 "WARNING: c™'à›í c⁄fig fûe: %s\n",
p
);

350 
	`ERR_˛ór_îr‹
();

351 
	`NCONF_‰ì
(
c⁄fig
);

352 
c⁄fig
 = 
NULL
;

356 
	`ERR_¥öt_îr‹s
(
bio_îr
);

357 
	`NCONF_‰ì
(
c⁄fig
);

358 
	`exô
(1);

362 
¥og
=
	`¥og_öô
();

365 
	`¥ogøm_«me
(
Argv
[0],
≤ame
,Öname);

367 
f
.
«me
=
≤ame
;

368 
Â
=
	`lh_FUNCTION_ªåõve
(
¥og
,&
f
);

369 i‡(
Â
 !
NULL
)

371 
Argv
[0]=
≤ame
;

372 
ªt
=
Â
->
	`func
(
Argc
,
Argv
);

373 
íd
;

378 i‡(
Argc
 != 1)

380 
Argc
--;

381 
Argv
++;

382 
ªt
=
	`do_cmd
(
¥og
,
Argc
,
Argv
);

383 i‡(
ªt
 < 0)Ñet=0;

384 
íd
;

391 
ªt
=0;

392 
p
=
buf
;

393 
n
= 
buf
;

394 
i
=0;

397 
p
[0]='\0';

398 i‡(
i
++)

399 
¥om±
=">";

400 
¥om±
="OpenSSL> ";

401 
	`Âuts
(
¥om±
,
°dout
);

402 
	`fÊush
(
°dout
);

403 i‡(!
	`fgës
(
p
,
n
,
°dö
))

404 
íd
;

405 i‡(
p
[0] ='\0'Ë
íd
;

406 
i
=
	`°æí
(
p
);

407 i‡(
i
 <= 1) ;

408 i‡(
p
[
i
-2] != '\\') ;

409 
i
-=2;

410 
p
+=
i
;

411 
n
-=
i
;

413 i‡(!
	`ch›up_¨gs
(&
¨g
,
buf
,&
¨gc
,&
¨gv
)) ;

415 
ªt
=
	`do_cmd
(
¥og
,
¨gc
,
¨gv
);

416 i‡(
ªt
 < 0)

418 
ªt
=0;

419 
íd
;

421 i‡(
ªt
 != 0)

422 
	`BIO_¥ötf
(
bio_îr
,"îr‹ i¿%s\n",
¨gv
[0]);

423 ()
	`BIO_Êush
(
bio_îr
);

425 
	`BIO_¥ötf
(
bio_îr
,"badÉxit\n");

426 
ªt
=1;

427 
íd
:

428 i‡(
to_‰ì
)

429 
	`OPENSSL_‰ì
(
to_‰ì
);

430 i‡(
c⁄fig
 !
NULL
)

432 
	`NCONF_‰ì
(
c⁄fig
);

433 
c⁄fig
=
NULL
;

435 i‡(
¥og
 !
NULL
Ë
	`lh_FUNCTION_‰ì
(prog);

436 i‡(
¨g
.
d©a
 !
NULL
Ë
	`OPENSSL_‰ì
(arg.data);

438 
	`≠ps_shutdown
();

440 
	`CRYPTO_mem_Àaks
(
bio_îr
);

441 i‡(
bio_îr
 !
NULL
)

443 
	`BIO_‰ì
(
bio_îr
);

444 
bio_îr
=
NULL
;

446 #i‡
	`deföed
–
OPENSSL_SYS_VMS
Ë&& (
__INITIAL_POINTER_SIZE
 == 64)

448 i‡(
‰ì_Argv
)

450 
	`OPENSSL_‰ì
(
Argv
);

453 
	`OPENSSL_EXIT
(
ªt
);

454 
	}
}

456 
	#LIST_STANDARD_COMMANDS
 "li°-°™d¨d-comm™ds"

	)

457 
	#LIST_MESSAGE_DIGEST_COMMANDS
 "li°-mesßge-dige°-comm™ds"

	)

458 
	#LIST_MESSAGE_DIGEST_ALGORITHMS
 "li°-mesßge-dige°-Æg‹ôhms"

	)

459 
	#LIST_CIPHER_COMMANDS
 "li°-cùhî-comm™ds"

	)

460 
	#LIST_CIPHER_ALGORITHMS
 "li°-cùhî-Æg‹ôhms"

	)

461 
	#LIST_PUBLIC_KEY_ALGORITHMS
 "li°-public-key-Æg‹ôhms"

	)

464 
do_cmd
(
LHASH_OF
(
FUNCTION
Ë*
¥og
, 
¨gc
, *
¨gv
[])

466 
FUNCTION
 
	gf
,*
	gÂ
;

467 
	gi
,
	gªt
=1,
	gç
,
	g∆
;

469 i‡((
	g¨gc
 <0Ë|| (
¨gv
[0] =
NULL
))

470 { 
ªt
=0; 
	gíd
; }

471 
	gf
.
	g«me
=
¨gv
[0];

472 
	gÂ
=
lh_FUNCTION_ªåõve
(
¥og
,&
f
);

473 i‡(
	gÂ
 =
NULL
)

475 i‡(
EVP_gë_dige°by«me
(
¨gv
[0]))

477 
f
.
ty≥
 = 
FUNC_TYPE_MD
;

478 
	gf
.
	gfunc
 = 
dg°_maö
;

479 
	gÂ
 = &
f
;

481 i‡(
EVP_gë_cùhîby«me
(
¨gv
[0]))

483 
	gf
.
	gty≥
 = 
FUNC_TYPE_CIPHER
;

484 
	gf
.
	gfunc
 = 
íc_maö
;

485 
	gÂ
 = &
f
;

488 i‡(
	gÂ
 !
NULL
)

490 
ªt
=
Â
->
func
(
¨gc
,
¨gv
);

492 i‡((
°∫cmp
(
¨gv
[0],"no-",3)) == 0)

494 
BIO
 *
bio_°dout
 = 
BIO_√w_Â
(
°dout
,
BIO_NOCLOSE
);

495 #ifde‡
OPENSSL_SYS_VMS


497 
BIO
 *
	gtmpbio
 = 
BIO_√w
(
BIO_f_löebuf„r
());

498 
	gbio_°dout
 = 
BIO_push
(
tmpbio
, 
bio_°dout
);

501 
	gf
.
	g«me
=
¨gv
[0]+3;

502 
	gªt
 = (
lh_FUNCTION_ªåõve
(
¥og
,&
f
Ë!
NULL
);

503 i‡(!
	gªt
)

504 
BIO_¥ötf
(
bio_°dout
, "%s\n", 
¨gv
[0]);

506 
BIO_¥ötf
(
bio_°dout
, "%s\n", 
¨gv
[0]+3);

507 
BIO_‰ì_Æl
(
bio_°dout
);

508 
	gíd
;

510 i‡((
°rcmp
(
¨gv
[0],"quit") == 0) ||

511 (
°rcmp
(
¨gv
[0],"q") == 0) ||

512 (
°rcmp
(
¨gv
[0],"exit") == 0) ||

513 (
°rcmp
(
¨gv
[0],"bye") == 0))

515 
ªt
= -1;

516 
	gíd
;

518 i‡((
°rcmp
(
¨gv
[0],
LIST_STANDARD_COMMANDS
) == 0) ||

519 (
°rcmp
(
¨gv
[0],
LIST_MESSAGE_DIGEST_COMMANDS
) == 0) ||

520 (
°rcmp
(
¨gv
[0],
LIST_MESSAGE_DIGEST_ALGORITHMS
) == 0) ||

521 (
°rcmp
(
¨gv
[0],
LIST_CIPHER_COMMANDS
) == 0) ||

522 (
°rcmp
(
¨gv
[0],
LIST_CIPHER_ALGORITHMS
) == 0) ||

523 (
°rcmp
(
¨gv
[0],
LIST_PUBLIC_KEY_ALGORITHMS
) == 0))

525 
li°_ty≥
;

526 
BIO
 *
	gbio_°dout
;

528 i‡(
°rcmp
(
¨gv
[0],
LIST_STANDARD_COMMANDS
) == 0)

529 
li°_ty≥
 = 
FUNC_TYPE_GENERAL
;

530 i‡(
°rcmp
(
¨gv
[0],
LIST_MESSAGE_DIGEST_COMMANDS
) == 0)

531 
li°_ty≥
 = 
FUNC_TYPE_MD
;

532 i‡(
°rcmp
(
¨gv
[0],
LIST_MESSAGE_DIGEST_ALGORITHMS
) == 0)

533 
li°_ty≥
 = 
FUNC_TYPE_MD_ALG
;

534 i‡(
°rcmp
(
¨gv
[0],
LIST_PUBLIC_KEY_ALGORITHMS
) == 0)

535 
li°_ty≥
 = 
FUNC_TYPE_PKEY
;

536 i‡(
°rcmp
(
¨gv
[0],
LIST_CIPHER_ALGORITHMS
) == 0)

537 
li°_ty≥
 = 
FUNC_TYPE_CIPHER_ALG
;

539 
	gli°_ty≥
 = 
FUNC_TYPE_CIPHER
;

540 
	gbio_°dout
 = 
BIO_√w_Â
(
°dout
,
BIO_NOCLOSE
);

541 #ifde‡
OPENSSL_SYS_VMS


543 
BIO
 *
	gtmpbio
 = 
BIO_√w
(
BIO_f_löebuf„r
());

544 
	gbio_°dout
 = 
BIO_push
(
tmpbio
, 
bio_°dout
);

548 i‡(!
lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

549 
	gíd
;

551 i‡(
	gli°_ty≥
 =
FUNC_TYPE_PKEY
)

552 
li°_pkey
(
bio_°dout
);

553 i‡(
	gli°_ty≥
 =
FUNC_TYPE_MD_ALG
)

554 
li°_md
(
bio_°dout
);

555 i‡(
	gli°_ty≥
 =
FUNC_TYPE_CIPHER_ALG
)

556 
li°_cùhî
(
bio_°dout
);

559 
	gÂ
=
fun˘i⁄s
; fp->
	g«me
 !
NULL
; fp++)

560 i‡(
	gÂ
->
	gty≥
 =
li°_ty≥
)

561 
BIO_¥ötf
(
bio_°dout
, "%s\n",

562 
Â
->
«me
);

564 
BIO_‰ì_Æl
(
bio_°dout
);

565 
	gªt
=0;

566 
	gíd
;

570 
BIO_¥ötf
(
bio_îr
,"openssl:Error: '%s' isán invalid command.\n",

571 
¨gv
[0]);

572 
BIO_¥ötf
(
bio_îr
, "\nStandard commands");

573 
	gi
=0;

574 
	gç
=0;

575 
	gÂ
=
fun˘i⁄s
; fp->
	g«me
 !
NULL
; fp++)

577 
	g∆
=0;

578 #ifde‡
OPENSSL_NO_CAMELLIA


579 i‡(((
	gi
++) % 5) == 0)

581 i‡(((
i
++) % 4) == 0)

584 
BIO_¥ötf
(
bio_îr
,"\n");

585 
	g∆
=1;

587 i‡(
	gÂ
->
	gty≥
 !
ç
)

589 
ç
=
Â
->
ty≥
;

590 i‡(!
	g∆
Ë
BIO_¥ötf
(
bio_îr
,"\n");

591 i‡(
	gç
 =
FUNC_TYPE_MD
)

593 
i
=1;

594 
BIO_¥ötf
(
bio_îr
,

597 i‡(
	gç
 =
FUNC_TYPE_CIPHER
)

599 
i
=1;

600 
BIO_¥ötf
(
bio_îr
,"\nCipher commands (seeÅhe `enc' command for more details)\n");

603 #ifde‡
OPENSSL_NO_CAMELLIA


604 
BIO_¥ötf
(
bio_îr
,"%-15s",
Â
->
«me
);

606 
BIO_¥ötf
(
bio_îr
,"%-18s",
Â
->
«me
);

609 
BIO_¥ötf
(
bio_îr
,"\n\n");

610 
	gªt
=0;

612 
	gíd
:

613 (
ªt
);

616 
	$S‹tFnByName
(c⁄° *
_f1
,c⁄° *
_f2
)

618 c⁄° 
FUNCTION
 *
f1
=
_f1
;

619 c⁄° 
FUNCTION
 *
f2
=
_f2
;

621 if(
f1
->
ty≥
 !
f2
->type)

622  
f1
->
ty≥
-
f2
->type;

623  
	`°rcmp
(
f1
->
«me
,
f2
->name);

624 
	}
}

626 
	$li°_pkey
(
BIO
 *
out
)

628 
i
;

629 
i
 = 0; i < 
	`EVP_PKEY_a¢1_gë_cou¡
(); i++)

631 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
;

632 
pkey_id
, 
pkey_ba£_id
, 
pkey_Êags
;

633 c⁄° *
pöfo
, *
≥m_°r
;

634 
amëh
 = 
	`EVP_PKEY_a¢1_gë0
(
i
);

635 
	`EVP_PKEY_a¢1_gë0_öfo
(&
pkey_id
, &
pkey_ba£_id
, &
pkey_Êags
,

636 &
pöfo
, &
≥m_°r
, 
amëh
);

637 i‡(
pkey_Êags
 & 
ASN1_PKEY_ALIAS
)

639 
	`BIO_¥ötf
(
out
, "Name: %s\n",

640 
	`OBJ_nid2 
(
pkey_id
));

641 
	`BIO_¥ötf
(
out
, "\tType: AliasÅo %s\n",

642 
	`OBJ_nid2 
(
pkey_ba£_id
));

646 
	`BIO_¥ötf
(
out
, "Name: %s\n", 
pöfo
);

647 
	`BIO_¥ötf
(
out
, "\tType: %s Algorithm\n",

648 
pkey_Êags
 & 
ASN1_PKEY_DYNAMIC
 ?

650 
	`BIO_¥ötf
(
out
, "\tOID: %s\n", 
	`OBJ_nid2 
(
pkey_id
));

651 i‡(
≥m_°r
 =
NULL
)

652 
≥m_°r
 = "(none)";

653 
	`BIO_¥ötf
(
out
, "\tPEM såög: %s\n", 
≥m_°r
);

657 
	}
}

659 
	$li°_cùhî_‚
(c⁄° 
EVP_CIPHER
 *
c
,

660 c⁄° *
‰om
, c⁄° *
to
, *
¨g
)

662 i‡(
c
)

663 
	`BIO_¥ötf
(
¨g
, "%s\n", 
	`EVP_CIPHER_«me
(
c
));

666 i‡(!
‰om
)

667 
‰om
 = "<undefined>";

668 i‡(!
to
)

669 
to
 = "<undefined>";

670 
	`BIO_¥ötf
(
¨g
, "%†=> %s\n", 
‰om
, 
to
);

672 
	}
}

674 
	$li°_cùhî
(
BIO
 *
out
)

676 
	`EVP_CIPHER_do_Æl_s‹ãd
(
li°_cùhî_‚
, 
out
);

677 
	}
}

679 
	$li°_md_‚
(c⁄° 
EVP_MD
 *
m
,

680 c⁄° *
‰om
, c⁄° *
to
, *
¨g
)

682 i‡(
m
)

683 
	`BIO_¥ötf
(
¨g
, "%s\n", 
	`EVP_MD_«me
(
m
));

686 i‡(!
‰om
)

687 
‰om
 = "<undefined>";

688 i‡(!
to
)

689 
to
 = "<undefined>";

690 
	`BIO_¥ötf
(
¨g
, "%†=> %s\n", 
‰om
, 
to
);

692 
	}
}

694 
	$li°_md
(
BIO
 *
out
)

696 
	`EVP_MD_do_Æl_s‹ãd
(
li°_md_‚
, 
out
);

697 
	}
}

699 
MS_CALLBACK
 
	$fun˘i⁄_cmp
(c⁄° 
FUNCTION
 *
a
, c⁄° FUNCTION *
b
)

701  
	`°∫cmp
(
a
->
«me
,
b
->name,8);

702 
	}
}

703 
	$IMPLEMENT_LHASH_COMP_FN
(
fun˘i⁄
, 
FUNCTION
)

705 
MS_CALLBACK
 
	$fun˘i⁄_hash
(c⁄° 
FUNCTION
 *
a
)

707  
	`lh_°rhash
(
a
->
«me
);

708 
	}
}

709 
	$IMPLEMENT_LHASH_HASH_FN
(
fun˘i⁄
, 
FUNCTION
)

711 
	`LHASH_OF
(
FUNCTION
Ë*
	$¥og_öô
()

713 
	`LHASH_OF
(
FUNCTION
Ë*
ªt
;

714 
FUNCTION
 *
f
;

715 
size_t
 
i
;

718 
i
=0,
f
=
fun˘i⁄s
 ; f->
«me
 !
NULL
 ; ++f,++i)

720 
	`qs‹t
(
fun˘i⁄s
,
i
, *fun˘i⁄s,
S‹tFnByName
);

722 i‡((
ªt
=
	`lh_FUNCTION_√w
()Ë=
NULL
)

723 (
NULL
);

725 
f
=
fun˘i⁄s
; f->
«me
 !
NULL
; f++)

726 ()
	`lh_FUNCTION_ö£π
(
ªt
,
f
);

727 (
ªt
);

728 
	}
}

	@passwd.c

3 #i‡
deföed
 
OPENSSL_NO_MD5
 || deföed 
CHARSET_EBCDIC


4 
	#NO_MD5CRYPT_1


	)

7 #i‡!
deföed
(
OPENSSL_NO_DES
Ë|| !deföed(
NO_MD5CRYPT_1
)

9 
	~<as£π.h
>

10 
	~<°rög.h
>

12 
	~"≠ps.h
"

14 
	~<›ís¶/bio.h
>

15 
	~<›ís¶/îr.h
>

16 
	~<›ís¶/evp.h
>

17 
	~<›ís¶/ønd.h
>

18 #i‚de‡
OPENSSL_NO_DES


19 
	~<›ís¶/des.h
>

21 #i‚de‡
NO_MD5CRYPT_1


22 
	~<›ís¶/md5.h
>

26 #unde‡
PROG


27 
	#PROG
 
∑sswd_maö


	)

30 c⁄° 
	gcov_2ch¨
[64]={

42 
do_∑sswd
(
∑s£d_ß…
, **
ß…_p
, **
ß…_mÆloc_p
,

43 *
∑sswd
, 
BIO
 *
out
, 
quõt
, 
èbÀ
, 
ªvî£
,

44 
size_t
 
pw_maxÀn
, 
u£¸y±
, 
u£1
, 
u£≠r1
);

58 
MAIN
(, **);

60 
	$MAIN
(
¨gc
, **
¨gv
)

62 
ªt
 = 1;

63 *
öfûe
 = 
NULL
;

64 
ö_°dö
 = 0;

65 
ö_novîify
 = 0;

66 *
ß…
 = 
NULL
, *
∑sswd
 = NULL, **
∑sswds
 = NULL;

67 *
ß…_mÆloc
 = 
NULL
, *
∑sswd_mÆloc
 = NULL;

68 
size_t
 
∑sswd_mÆloc_size
 = 0;

69 
pw_sour˚_deföed
 = 0;

70 
BIO
 *
ö
 = 
NULL
, *
out
 = NULL;

71 
i
, 
bad›t
, 
›t_d⁄e
;

72 
∑s£d_ß…
 = 0, 
quõt
 = 0, 
èbÀ
 = 0, 
ªvî£
 = 0;

73 
u£¸y±
 = 0, 
u£1
 = 0, 
u£≠r1
 = 0;

74 
size_t
 
pw_maxÀn
 = 0;

76 
	`≠ps_°¨tup
();

78 i‡(
bio_îr
 =
NULL
)

79 i‡((
bio_îr
=
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

80 
	`BIO_£t_Â
(
bio_îr
,
°dîr
,
BIO_NOCLOSE
|
BIO_FP_TEXT
);

82 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

83 
îr
;

84 
out
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

85 i‡(
out
 =
NULL
)

86 
îr
;

87 
	`BIO_£t_Â
(
out
, 
°dout
, 
BIO_NOCLOSE
 | 
BIO_FP_TEXT
);

88 #ifde‡
OPENSSL_SYS_VMS


90 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

91 
out
 = 
	`BIO_push
(
tmpbio
, out);

95 
bad›t
 = 0, 
›t_d⁄e
 = 0;

96 
i
 = 0;

97 !
bad›t
 && !
›t_d⁄e
 && 
¨gv
[++
i
] !
NULL
)

99 i‡(
	`°rcmp
(
¨gv
[
i
], "-crypt") == 0)

100 
u£¸y±
 = 1;

101 i‡(
	`°rcmp
(
¨gv
[
i
], "-1") == 0)

102 
u£1
 = 1;

103 i‡(
	`°rcmp
(
¨gv
[
i
], "-apr1") == 0)

104 
u£≠r1
 = 1;

105 i‡(
	`°rcmp
(
¨gv
[
i
], "-salt") == 0)

107 i‡((
¨gv
[
i
+1] !
NULL
Ë&& (
ß…
 == NULL))

109 
∑s£d_ß…
 = 1;

110 
ß…
 = 
¨gv
[++
i
];

113 
bad›t
 = 1;

115 i‡(
	`°rcmp
(
¨gv
[
i
], "-in") == 0)

117 i‡((
¨gv
[
i
+1] !
NULL
Ë&& !
pw_sour˚_deföed
)

119 
pw_sour˚_deföed
 = 1;

120 
öfûe
 = 
¨gv
[++
i
];

123 
bad›t
 = 1;

125 i‡(
	`°rcmp
(
¨gv
[
i
], "-stdin") == 0)

127 i‡(!
pw_sour˚_deföed
)

129 
pw_sour˚_deföed
 = 1;

130 
ö_°dö
 = 1;

133 
bad›t
 = 1;

135 i‡(
	`°rcmp
(
¨gv
[
i
], "-noverify") == 0)

136 
ö_novîify
 = 1;

137 i‡(
	`°rcmp
(
¨gv
[
i
], "-quiet") == 0)

138 
quõt
 = 1;

139 i‡(
	`°rcmp
(
¨gv
[
i
], "-table") == 0)

140 
èbÀ
 = 1;

141 i‡(
	`°rcmp
(
¨gv
[
i
], "-reverse") == 0)

142 
ªvî£
 = 1;

143 i‡(
¨gv
[
i
][0] == '-')

144 
bad›t
 = 1;

145 i‡(!
pw_sour˚_deföed
)

148 
pw_sour˚_deföed
 = 1;

149 
∑sswds
 = &
¨gv
[
i
];

150 
›t_d⁄e
 = 1;

153 
bad›t
 = 1;

156 i‡(!
u£¸y±
 && !
u£1
 && !
u£≠r1
)

157 
u£¸y±
 = 1;

158 i‡(
u£¸y±
 + 
u£1
 + 
u£≠r1
 > 1)

159 
bad›t
 = 1;

162 #ifde‡
OPENSSL_NO_DES


163 i‡(
u£¸y±
Ë
bad›t
 = 1;

165 #ifde‡
NO_MD5CRYPT_1


166 i‡(
u£1
 || 
u£≠r1
Ë
bad›t
 = 1;

169 i‡(
bad›t
)

171 
	`BIO_¥ötf
(
bio_îr
, "Usage:Öasswd [options] [passwords]\n");

172 
	`BIO_¥ötf
(
bio_îr
, "where optionsáre\n");

173 #i‚de‡
OPENSSL_NO_DES


174 
	`BIO_¥ötf
(
bio_îr
, "-crypt standard UnixÖasswordálgorithm (default)\n");

176 #i‚de‡
NO_MD5CRYPT_1


177 
	`BIO_¥ötf
(
bio_îr
, "-1 MD5-basedÖasswordálgorithm\n");

178 
	`BIO_¥ötf
(
bio_îr
, "-apr1 MD5-basedÖasswordálgorithm, Apache variant\n");

180 
	`BIO_¥ötf
(
bio_îr
, "-salt string useÖrovided salt\n");

181 
	`BIO_¥ötf
(
bio_îr
, "-in fileÑeadÖasswords from file\n");

182 
	`BIO_¥ötf
(
bio_îr
, "-stdinÑeadÖasswords from stdin\n");

183 
	`BIO_¥ötf
(
bio_îr
, "-noverifyÇever verify whenÑeadingÖassword fromÅerminal\n");

184 
	`BIO_¥ötf
(
bio_îr
, "-quietÇo warnings\n");

185 
	`BIO_¥ötf
(
bio_îr
, "-table format outputásÅable\n");

186 
	`BIO_¥ötf
(
bio_îr
, "-reverse switchÅable columns\n");

188 
îr
;

191 i‡((
öfûe
 !
NULL
Ë|| 
ö_°dö
)

193 
ö
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

194 i‡(
ö
 =
NULL
)

195 
îr
;

196 i‡(
öfûe
 !
NULL
)

198 
	`as£π
(
ö_°dö
 == 0);

199 i‡(
	`BIO_ªad_fûíame
(
ö
, 
öfûe
) <= 0)

200 
îr
;

204 
	`as£π
(
ö_°dö
);

205 
	`BIO_£t_Â
(
ö
, 
°dö
, 
BIO_NOCLOSE
);

209 i‡(
u£¸y±
)

210 
pw_maxÀn
 = 8;

211 i‡(
u£1
 || 
u£≠r1
)

212 
pw_maxÀn
 = 256;

214 i‡(
∑sswds
 =
NULL
)

218 
∑sswd_mÆloc_size
 = 
pw_maxÀn
 + 2;

220 
∑sswd
 = 
∑sswd_mÆloc
 = 
	`OPENSSL_mÆloc
(
∑sswd_mÆloc_size
);

221 i‡(
∑sswd_mÆloc
 =
NULL
)

222 
îr
;

225 i‡((
ö
 =
NULL
Ë&& (
∑sswds
 == NULL))

228 *
∑sswds_°©ic
[2] = {
NULL
, NULL};

230 
∑sswds
 = 
∑sswds_°©ic
;

231 i‡(
ö
 =
NULL
)

232 i‡(
	`EVP_ªad_pw_°rög
(
∑sswd_mÆloc
, 
∑sswd_mÆloc_size
, "Passw‹d: ", !(
∑s£d_ß…
 || 
ö_novîify
)) != 0)

233 
îr
;

234 
∑sswds
[0] = 
∑sswd_mÆloc
;

237 i‡(
ö
 =
NULL
)

239 
	`as£π
(
∑sswds
 !
NULL
);

240 
	`as£π
(*
∑sswds
 !
NULL
);

244 
∑sswd
 = *
∑sswds
++;

245 i‡(!
	`do_∑sswd
(
∑s£d_ß…
, &
ß…
, &
ß…_mÆloc
, 
∑sswd
, 
out
,

246 
quõt
, 
èbÀ
, 
ªvî£
, 
pw_maxÀn
, 
u£¸y±
, 
u£1
, 
u£≠r1
))

247 
îr
;

249 *
∑sswds
 !
NULL
);

254 
d⁄e
;

256 
	`as£π
 (
∑sswd
 !
NULL
);

259 
r
 = 
	`BIO_gës
(
ö
, 
∑sswd
, 
pw_maxÀn
 + 1);

260 i‡(
r
 > 0)

262 *
c
 = (
	`°rchr
(
∑sswd
, '\n')) ;

263 i‡(
c
 !
NULL
)

264 *
c
 = 0;

268 
åash
[
BUFSIZ
];

270 
r
 = 
	`BIO_gës
(
ö
, 
åash
, Årash);

271 (
r
 > 0Ë&& (!
	`°rchr
(
åash
, '\n')));

274 i‡(!
	`do_∑sswd
(
∑s£d_ß…
, &
ß…
, &
ß…_mÆloc
, 
∑sswd
, 
out
,

275 
quõt
, 
èbÀ
, 
ªvî£
, 
pw_maxÀn
, 
u£¸y±
, 
u£1
, 
u£≠r1
))

276 
îr
;

278 
d⁄e
 = (
r
 <= 0);

280 !
d⁄e
);

282 
ªt
 = 0;

284 
îr
:

285 
	`ERR_¥öt_îr‹s
(
bio_îr
);

286 i‡(
ß…_mÆloc
)

287 
	`OPENSSL_‰ì
(
ß…_mÆloc
);

288 i‡(
∑sswd_mÆloc
)

289 
	`OPENSSL_‰ì
(
∑sswd_mÆloc
);

290 i‡(
ö
)

291 
	`BIO_‰ì
(
ö
);

292 i‡(
out
)

293 
	`BIO_‰ì_Æl
(
out
);

294 
	`≠ps_shutdown
();

295 
	`OPENSSL_EXIT
(
ªt
);

296 
	}
}

299 #i‚de‡
NO_MD5CRYPT_1


310 *
	$md5¸y±
(c⁄° *
∑sswd
, c⁄° *
magic
, c⁄° *
ß…
)

312 
out_buf
[6 + 9 + 24 + 2];

313 
buf
[
MD5_DIGEST_LENGTH
];

314 *
ß…_out
;

315 
n
;

316 
i
;

317 
EVP_MD_CTX
 
md
,
md2
;

318 
size_t
 
∑sswd_Àn
, 
ß…_Àn
;

320 
∑sswd_Àn
 = 
	`°æí
(
∑sswd
);

321 
out_buf
[0] = '$';

322 
out_buf
[1] = 0;

323 
	`as£π
(
	`°æí
(
magic
) <= 4);

324 
	`°∫ˇt
(
out_buf
, 
magic
, 4);

325 
	`°∫ˇt
(
out_buf
, "$", 1);

326 
	`°∫ˇt
(
out_buf
, 
ß…
, 8);

327 
	`as£π
(
	`°æí
(
out_buf
) <= 6 + 8);

328 
ß…_out
 = 
out_buf
 + 2 + 
	`°æí
(
magic
);

329 
ß…_Àn
 = 
	`°æí
(
ß…_out
);

330 
	`as£π
(
ß…_Àn
 <= 8);

332 
	`EVP_MD_CTX_öô
(&
md
);

333 
	`EVP_Dige°Inô_ex
(&
md
,
	`EVP_md5
(), 
NULL
);

334 
	`EVP_Dige°Upd©e
(&
md
, 
∑sswd
, 
∑sswd_Àn
);

335 
	`EVP_Dige°Upd©e
(&
md
, "$", 1);

336 
	`EVP_Dige°Upd©e
(&
md
, 
magic
, 
	`°æí
(magic));

337 
	`EVP_Dige°Upd©e
(&
md
, "$", 1);

338 
	`EVP_Dige°Upd©e
(&
md
, 
ß…_out
, 
ß…_Àn
);

340 
	`EVP_MD_CTX_öô
(&
md2
);

341 
	`EVP_Dige°Inô_ex
(&
md2
,
	`EVP_md5
(), 
NULL
);

342 
	`EVP_Dige°Upd©e
(&
md2
, 
∑sswd
, 
∑sswd_Àn
);

343 
	`EVP_Dige°Upd©e
(&
md2
, 
ß…_out
, 
ß…_Àn
);

344 
	`EVP_Dige°Upd©e
(&
md2
, 
∑sswd
, 
∑sswd_Àn
);

345 
	`EVP_Dige°FöÆ_ex
(&
md2
, 
buf
, 
NULL
);

347 
i
 = 
∑sswd_Àn
; i >  
buf
; i -=  buf)

348 
	`EVP_Dige°Upd©e
(&
md
, 
buf
,  buf);

349 
	`EVP_Dige°Upd©e
(&
md
, 
buf
, 
i
);

351 
n
 = 
∑sswd_Àn
;

352 
n
)

354 
	`EVP_Dige°Upd©e
(&
md
, (
n
 & 1Ë? "\0" : 
∑sswd
, 1);

355 
n
 >>= 1;

357 
	`EVP_Dige°FöÆ_ex
(&
md
, 
buf
, 
NULL
);

359 
i
 = 0; i < 1000; i++)

361 
	`EVP_Dige°Inô_ex
(&
md2
,
	`EVP_md5
(), 
NULL
);

362 
	`EVP_Dige°Upd©e
(&
md2
, (
i
 & 1Ë? (c⁄° *Ë
∑sswd
 : 
buf
,

363 (
i
 & 1Ë? 
∑sswd_Àn
 :  
buf
);

364 i‡(
i
 % 3)

365 
	`EVP_Dige°Upd©e
(&
md2
, 
ß…_out
, 
ß…_Àn
);

366 i‡(
i
 % 7)

367 
	`EVP_Dige°Upd©e
(&
md2
, 
∑sswd
, 
∑sswd_Àn
);

368 
	`EVP_Dige°Upd©e
(&
md2
, (
i
 & 1Ë? 
buf
 : (c⁄° *Ë
∑sswd
,

369 (
i
 & 1Ë?  
buf
 : 
∑sswd_Àn
);

370 
	`EVP_Dige°FöÆ_ex
(&
md2
, 
buf
, 
NULL
);

372 
	`EVP_MD_CTX_˛ónup
(&
md2
);

377 
buf_≥rm
[ 
buf
];

378 
de°
, 
sour˚
;

379 *
ouçut
;

382 
de°
 = 0, 
sour˚
 = 0; dest < 14; dest++, source = (source + 6) % 17)

383 
buf_≥rm
[
de°
] = 
buf
[
sour˚
];

384 
buf_≥rm
[14] = 
buf
[5];

385 
buf_≥rm
[15] = 
buf
[11];

386 #i‚de‡
PEDANTIC


387 
	`as£π
(16 = 
buf_≥rm
);

390 
ouçut
 = 
ß…_out
 + 
ß…_Àn
;

391 
	`as£π
(
ouçut
 =
out_buf
 + 
	`°æí
(out_buf));

393 *
ouçut
++ = '$';

395 
i
 = 0; i < 15; i += 3)

397 *
ouçut
++ = 
cov_2ch¨
[
buf_≥rm
[
i
+2] & 0x3f];

398 *
ouçut
++ = 
cov_2ch¨
[((
buf_≥rm
[
i
+1] & 0xf) << 2) |

399 (
buf_≥rm
[
i
+2] >> 6)];

400 *
ouçut
++ = 
cov_2ch¨
[((
buf_≥rm
[
i
] & 3) << 4) |

401 (
buf_≥rm
[
i
+1] >> 4)];

402 *
ouçut
++ = 
cov_2ch¨
[
buf_≥rm
[
i
] >> 2];

404 
	`as£π
(
i
 == 15);

405 *
ouçut
++ = 
cov_2ch¨
[
buf_≥rm
[
i
] & 0x3f];

406 *
ouçut
++ = 
cov_2ch¨
[
buf_≥rm
[
i
] >> 6];

407 *
ouçut
 = 0;

408 
	`as£π
(
	`°æí
(
out_buf
) < (out_buf));

410 
	`EVP_MD_CTX_˛ónup
(&
md
);

412  
out_buf
;

413 
	}
}

417 
	$do_∑sswd
(
∑s£d_ß…
, **
ß…_p
, **
ß…_mÆloc_p
,

418 *
∑sswd
, 
BIO
 *
out
, 
quõt
, 
èbÀ
, 
ªvî£
,

419 
size_t
 
pw_maxÀn
, 
u£¸y±
, 
u£1
, 
u£≠r1
)

421 *
hash
 = 
NULL
;

423 
	`as£π
(
ß…_p
 !
NULL
);

424 
	`as£π
(
ß…_mÆloc_p
 !
NULL
);

427 i‡(!
∑s£d_ß…
)

429 #i‚de‡
OPENSSL_NO_DES


430 i‡(
u£¸y±
)

432 i‡(*
ß…_mÆloc_p
 =
NULL
)

434 *
ß…_p
 = *
ß…_mÆloc_p
 = 
	`OPENSSL_mÆloc
(3);

435 i‡(*
ß…_mÆloc_p
 =
NULL
)

436 
îr
;

438 i‡(
	`RAND_p£udo_byãs
((*)*
ß…_p
, 2) < 0)

439 
îr
;

440 (*
ß…_p
)[0] = 
cov_2ch¨
[(*salt_p)[0] & 0x3f];

441 (*
ß…_p
)[1] = 
cov_2ch¨
[(*salt_p)[1] & 0x3f];

442 (*
ß…_p
)[2] = 0;

443 #ifde‡
CHARSET_EBCDIC


444 
	`ascii2ebcdic
(*
ß…_p
, *salt_p, 2);

450 #i‚de‡
NO_MD5CRYPT_1


451 i‡(
u£1
 || 
u£≠r1
)

453 
i
;

455 i‡(*
ß…_mÆloc_p
 =
NULL
)

457 *
ß…_p
 = *
ß…_mÆloc_p
 = 
	`OPENSSL_mÆloc
(9);

458 i‡(*
ß…_mÆloc_p
 =
NULL
)

459 
îr
;

461 i‡(
	`RAND_p£udo_byãs
((*)*
ß…_p
, 8) < 0)

462 
îr
;

464 
i
 = 0; i < 8; i++)

465 (*
ß…_p
)[
i
] = 
cov_2ch¨
[(*salt_p)[i] & 0x3f];

466 (*
ß…_p
)[8] = 0;

471 
	`as£π
(*
ß…_p
 !
NULL
);

474 i‡((
	`°æí
(
∑sswd
Ë> 
pw_maxÀn
))

476 i‡(!
quõt
)

478 
	`BIO_¥ötf
(
bio_îr
, "W¨nög:ÅrunˇtögÖassw‹dÅÿ%u ch¨a˘îs\n", ()
pw_maxÀn
);

479 
∑sswd
[
pw_maxÀn
] = 0;

481 
	`as£π
(
	`°æí
(
∑sswd
Ë<
pw_maxÀn
);

484 #i‚de‡
OPENSSL_NO_DES


485 i‡(
u£¸y±
)

486 
hash
 = 
	`DES_¸y±
(
∑sswd
, *
ß…_p
);

488 #i‚de‡
NO_MD5CRYPT_1


489 i‡(
u£1
 || 
u£≠r1
)

490 
hash
 = 
	`md5¸y±
(
∑sswd
, (
u£1
 ? "1" : "≠r1"), *
ß…_p
);

492 
	`as£π
(
hash
 !
NULL
);

494 i‡(
èbÀ
 && !
ªvî£
)

495 
	`BIO_¥ötf
(
out
, "%s\t%s\n", 
∑sswd
, 
hash
);

496 i‡(
èbÀ
 && 
ªvî£
)

497 
	`BIO_¥ötf
(
out
, "%s\t%s\n", 
hash
, 
∑sswd
);

499 
	`BIO_¥ötf
(
out
, "%s\n", 
hash
);

502 
îr
:

504 
	}
}

507 
	$MAIN
(
¨gc
, **
¨gv
)

509 
	`Âuts
("ProgømÇŸávaûabÀ.\n", 
°dîr
)

510 
	`OPENSSL_EXIT
(1);

511 
	}
}

	@pkcs12.c

59 
	~<›ís¶/›ís¶c⁄f.h
>

60 #i‡!
deföed
(
OPENSSL_NO_DES
Ë&& !deföed(
OPENSSL_NO_SHA1
)

62 
	~<°dio.h
>

63 
	~<°dlib.h
>

64 
	~<°rög.h
>

65 
	~"≠ps.h
"

66 
	~<›ís¶/¸y±o.h
>

67 
	~<›ís¶/îr.h
>

68 
	~<›ís¶/≥m.h
>

69 
	~<›ís¶/pkcs12.h
>

71 
	#PROG
 
pkcs12_maö


	)

73 c⁄° 
EVP_CIPHER
 *
	gíc
;

76 
	#NOKEYS
 0x1

	)

77 
	#NOCERTS
 0x2

	)

78 
	#INFO
 0x4

	)

79 
	#CLCERTS
 0x8

	)

80 
	#CACERTS
 0x10

	)

82 
gë_˚π_chaö
 (
X509
 *
˚π
, 
X509_STORE
 *
°‹e
, 
STACK_OF
(X509Ë**
chaö
);

83 
dump_˚πs_keys_p12
(
BIO
 *
out
, 
PKCS12
 *
p12
, *
∑ss
, 
∑s¶í
, 
›ti⁄s
, *
≥m∑ss
);

84 
dump_˚πs_pkeys_bags
(
BIO
 *
out
, 
STACK_OF
(
PKCS12_SAFEBAG
Ë*
bags
, *
∑ss
,

85 
∑s¶í
, 
›ti⁄s
, *
≥m∑ss
);

86 
dump_˚πs_pkeys_bag
(
BIO
 *
out
, 
PKCS12_SAFEBAG
 *
bags
, *
∑ss
, 
∑s¶í
, 
›ti⁄s
, *
≥m∑ss
);

87 
¥öt_©åibs
(
BIO
 *
out
, 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©ål°
,c⁄° *
«me
);

88 
hex_¥ö
(
BIO
 *
out
, *
buf
, 
Àn
);

89 
Æg_¥öt
(
BIO
 *
x
, 
X509_ALGOR
 *
Æg
);

90 
˚π_lﬂd
(
BIO
 *
ö
, 
STACK_OF
(
X509
Ë*
sk
);

91 
£t_pbe
(
BIO
 *
îr
, *
µbe
, c⁄° *
°r
);

93 
MAIN
(, **);

95 
	$MAIN
(
¨gc
, **
¨gv
)

97 
ENGINE
 *
e
 = 
NULL
;

98 *
öfûe
=
NULL
, *
outfûe
=NULL, *
key«me
 = NULL;

99 *
˚πfûe
=
NULL
;

100 
BIO
 *
ö
=
NULL
, *
out
 = NULL;

101 **
¨gs
;

102 *
«me
 = 
NULL
;

103 *
c•_«me
 = 
NULL
;

104 
add_lmk
 = 0;

105 
PKCS12
 *
p12
 = 
NULL
;

106 
∑ss
[50], 
ma˝ass
[50];

107 
exp‹t_˚π
 = 0;

108 
›ti⁄s
 = 0;

109 
chaö
 = 0;

110 
bad¨g
 = 0;

111 
ôî
 = 
PKCS12_DEFAULT_ITER
;

112 
macôî
 = 
PKCS12_DEFAULT_ITER
;

113 
tw›ass
 = 0;

114 
keyty≥
 = 0;

115 
˚π_pbe
;

116 
key_pbe
 = 
NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
;

117 
ªt
 = 1;

118 
macvî
 = 1;

119 
n›rom±
 = 0;

120 
	`STACK_OF
(
OPENSSL_STRING
Ë*
ˇ«mes
 = 
NULL
;

121 *
˝ass
 = 
NULL
, *
m∑ss
 = NULL;

122 *
∑sßrgö
 = 
NULL
, *
∑sßrgout
 = NULL, *
∑sßrg
 = NULL;

123 *
∑ssö
 = 
NULL
, *
∑ssout
 = NULL;

124 *
öønd
 = 
NULL
;

125 *
maˇlg
 = 
NULL
;

126 *
CA∑th
 = 
NULL
, *
CAfûe
 = NULL;

127 #i‚de‡
OPENSSL_NO_ENGINE


128 *
ígöe
=
NULL
;

131 
	`≠ps_°¨tup
();

133 #ifde‡
OPENSSL_FIPS


134 i‡(
	`FIPS_mode
())

135 
˚π_pbe
 = 
NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
;

138 
˚π_pbe
 = 
NID_pbe_WôhSHA1And40BôRC2_CBC
;

140 
íc
 = 
	`EVP_des_ede3_cbc
();

141 i‡(
bio_îr
 =
NULL
 ) bio_î∏
	`BIO_√w_Â
 (
°dîr
, 
BIO_NOCLOSE
);

143 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

144 
íd
;

146 
¨gs
 = 
¨gv
 + 1;

149 *
¨gs
) {

150 i‡(*
¨gs
[0] == '-') {

151 i‡(!
	`°rcmp
 (*
¨gs
, "-nokeys")Ë
›ti⁄s
 |
NOKEYS
;

152 i‡(!
	`°rcmp
 (*
¨gs
, "-keyex")Ë
keyty≥
 = 
KEY_EX
;

153 i‡(!
	`°rcmp
 (*
¨gs
, "-keysig")Ë
keyty≥
 = 
KEY_SIG
;

154 i‡(!
	`°rcmp
 (*
¨gs
, "-no˚πs")Ë
›ti⁄s
 |
NOCERTS
;

155 i‡(!
	`°rcmp
 (*
¨gs
, "-˛˚πs")Ë
›ti⁄s
 |
CLCERTS
;

156 i‡(!
	`°rcmp
 (*
¨gs
, "-ˇ˚πs")Ë
›ti⁄s
 |
CACERTS
;

157 i‡(!
	`°rcmp
 (*
¨gs
, "-noout")Ë
›ti⁄s
 |(
NOKEYS
|
NOCERTS
);

158 i‡(!
	`°rcmp
 (*
¨gs
, "-öfo")Ë
›ti⁄s
 |
INFO
;

159 i‡(!
	`°rcmp
 (*
¨gs
, "-chaö")Ë
chaö
 = 1;

160 i‡(!
	`°rcmp
 (*
¨gs
, "-tw›ass")Ë
tw›ass
 = 1;

161 i‡(!
	`°rcmp
 (*
¨gs
, "-nomacvî")Ë
macvî
 = 0;

162 i‡(!
	`°rcmp
 (*
¨gs
, "-descert"))

163 
˚π_pbe
 = 
NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
;

164 i‡(!
	`°rcmp
 (*
¨gs
, "-exp‹t")Ë
exp‹t_˚π
 = 1;

165 i‡(!
	`°rcmp
 (*
¨gs
, "-des")Ë
íc
=
	`EVP_des_cbc
();

166 i‡(!
	`°rcmp
 (*
¨gs
, "-des3")Ë
íc
 = 
	`EVP_des_ede3_cbc
();

167 #i‚de‡
OPENSSL_NO_IDEA


168 i‡(!
	`°rcmp
 (*
¨gs
, "-idó")Ë
íc
=
	`EVP_idó_cbc
();

170 #i‚de‡
OPENSSL_NO_SEED


171 i‡(!
	`°rcmp
(*
¨gs
, "-£ed")Ë
íc
=
	`EVP_£ed_cbc
();

173 #i‚de‡
OPENSSL_NO_AES


174 i‡(!
	`°rcmp
(*
¨gs
,"-´s128")Ë
íc
=
	`EVP_´s_128_cbc
();

175 i‡(!
	`°rcmp
(*
¨gs
,"-´s192")Ë
íc
=
	`EVP_´s_192_cbc
();

176 i‡(!
	`°rcmp
(*
¨gs
,"-´s256")Ë
íc
=
	`EVP_´s_256_cbc
();

178 #i‚de‡
OPENSSL_NO_CAMELLIA


179 i‡(!
	`°rcmp
(*
¨gs
,"-ˇmñlü128")Ë
íc
=
	`EVP_ˇmñlü_128_cbc
();

180 i‡(!
	`°rcmp
(*
¨gs
,"-ˇmñlü192")Ë
íc
=
	`EVP_ˇmñlü_192_cbc
();

181 i‡(!
	`°rcmp
(*
¨gs
,"-ˇmñlü256")Ë
íc
=
	`EVP_ˇmñlü_256_cbc
();

183 i‡(!
	`°rcmp
 (*
¨gs
, "-noôî")Ë
ôî
 = 1;

184 i‡(!
	`°rcmp
 (*
¨gs
, "-maciter"))

185 
macôî
 = 
PKCS12_DEFAULT_ITER
;

186 i‡(!
	`°rcmp
 (*
¨gs
, "-nomaciter"))

187 
macôî
 = 1;

188 i‡(!
	`°rcmp
 (*
¨gs
, "-nomac"))

189 
macôî
 = -1;

190 i‡(!
	`°rcmp
 (*
¨gs
, "-macalg"))

191 i‡(
¨gs
[1]) {

192 
¨gs
++;

193 
maˇlg
 = *
¨gs
;

194 } 
bad¨g
 = 1;

195 i‡(!
	`°rcmp
 (*
¨gs
, "-nodes")Ë
íc
=
NULL
;

196 i‡(!
	`°rcmp
 (*
¨gs
, "-certpbe")) {

197 i‡(!
	`£t_pbe
(
bio_îr
, &
˚π_pbe
, *++
¨gs
))

198 
bad¨g
 = 1;

199 } i‡(!
	`°rcmp
 (*
¨gs
, "-keypbe")) {

200 i‡(!
	`£t_pbe
(
bio_îr
, &
key_pbe
, *++
¨gs
))

201 
bad¨g
 = 1;

202 } i‡(!
	`°rcmp
 (*
¨gs
, "-rand")) {

203 i‡(
¨gs
[1]) {

204 
¨gs
++;

205 
öønd
 = *
¨gs
;

206 } 
bad¨g
 = 1;

207 } i‡(!
	`°rcmp
 (*
¨gs
, "-inkey")) {

208 i‡(
¨gs
[1]) {

209 
¨gs
++;

210 
key«me
 = *
¨gs
;

211 } 
bad¨g
 = 1;

212 } i‡(!
	`°rcmp
 (*
¨gs
, "-certfile")) {

213 i‡(
¨gs
[1]) {

214 
¨gs
++;

215 
˚πfûe
 = *
¨gs
;

216 } 
bad¨g
 = 1;

217 } i‡(!
	`°rcmp
 (*
¨gs
, "-name")) {

218 i‡(
¨gs
[1]) {

219 
¨gs
++;

220 
«me
 = *
¨gs
;

221 } 
bad¨g
 = 1;

222 } i‡(!
	`°rcmp
 (*
¨gs
, "-LMK"))

223 
add_lmk
 = 1;

224 i‡(!
	`°rcmp
 (*
¨gs
, "-CSP")) {

225 i‡(
¨gs
[1]) {

226 
¨gs
++;

227 
c•_«me
 = *
¨gs
;

228 } 
bad¨g
 = 1;

229 } i‡(!
	`°rcmp
 (*
¨gs
, "-caname")) {

230 i‡(
¨gs
[1]) {

231 
¨gs
++;

232 i‡(!
ˇ«mes
Ëˇ«me†
	`sk_OPENSSL_STRING_√w_nuŒ
();

233 
	`sk_OPENSSL_STRING_push
(
ˇ«mes
, *
¨gs
);

234 } 
bad¨g
 = 1;

235 } i‡(!
	`°rcmp
 (*
¨gs
, "-in")) {

236 i‡(
¨gs
[1]) {

237 
¨gs
++;

238 
öfûe
 = *
¨gs
;

239 } 
bad¨g
 = 1;

240 } i‡(!
	`°rcmp
 (*
¨gs
, "-out")) {

241 i‡(
¨gs
[1]) {

242 
¨gs
++;

243 
outfûe
 = *
¨gs
;

244 } 
bad¨g
 = 1;

245 } i‡(!
	`°rcmp
(*
¨gs
,"-passin")) {

246 i‡(
¨gs
[1]) {

247 
¨gs
++;

248 
∑sßrgö
 = *
¨gs
;

249 } 
bad¨g
 = 1;

250 } i‡(!
	`°rcmp
(*
¨gs
,"-passout")) {

251 i‡(
¨gs
[1]) {

252 
¨gs
++;

253 
∑sßrgout
 = *
¨gs
;

254 } 
bad¨g
 = 1;

255 } i‡(!
	`°rcmp
 (*
¨gs
, "-password")) {

256 i‡(
¨gs
[1]) {

257 
¨gs
++;

258 
∑sßrg
 = *
¨gs
;

259 
n›rom±
 = 1;

260 } 
bad¨g
 = 1;

261 } i‡(!
	`°rcmp
(*
¨gs
,"-CApath")) {

262 i‡(
¨gs
[1]) {

263 
¨gs
++;

264 
CA∑th
 = *
¨gs
;

265 } 
bad¨g
 = 1;

266 } i‡(!
	`°rcmp
(*
¨gs
,"-CAfile")) {

267 i‡(
¨gs
[1]) {

268 
¨gs
++;

269 
CAfûe
 = *
¨gs
;

270 } 
bad¨g
 = 1;

271 #i‚de‡
OPENSSL_NO_ENGINE


272 } i‡(!
	`°rcmp
(*
¨gs
,"-engine")) {

273 i‡(
¨gs
[1]) {

274 
¨gs
++;

275 
ígöe
 = *
¨gs
;

276 } 
bad¨g
 = 1;

278 } 
bad¨g
 = 1;

280 } 
bad¨g
 = 1;

281 
¨gs
++;

284 i‡(
bad¨g
) {

285 
	`BIO_¥ötf
 (
bio_îr
, "Usage:Ökcs12 [options]\n");

286 
	`BIO_¥ötf
 (
bio_îr
, "where optionsáre\n");

287 
	`BIO_¥ötf
 (
bio_îr
, "-export output PKCS12 file\n");

288 
	`BIO_¥ötf
 (
bio_îr
, "-chainádd certificate chain\n");

289 
	`BIO_¥ötf
 (
bio_îr
, "-inkey fileÖrivate key ifÇot infile\n");

290 
	`BIO_¥ötf
 (
bio_îr
, "-certfile fáddáll certs in f\n");

291 
	`BIO_¥ötf
 (
bio_îr
, "-CApathárg - PEM format directory of CA's\n");

292 
	`BIO_¥ötf
 (
bio_îr
, "-CAfileárg - PEM format file of CA's\n");

293 
	`BIO_¥ötf
 (
bio_îr
, "-name \"name\" useÇameás friendlyÇame\n");

294 
	`BIO_¥ötf
 (
bio_îr
, "-caname \"nm\" useÇmás CA friendlyÇame (can be used moreÅhan once).\n");

295 
	`BIO_¥ötf
 (
bio_îr
, "-in infile input filename\n");

296 
	`BIO_¥ötf
 (
bio_îr
, "-out outfile output filename\n");

297 
	`BIO_¥ötf
 (
bio_îr
, "-noout don't outputánything, just verify.\n");

298 
	`BIO_¥ötf
 (
bio_îr
, "-nomacver don't verify MAC.\n");

299 
	`BIO_¥ötf
 (
bio_îr
, "-nocerts don't output certificates.\n");

300 
	`BIO_¥ötf
 (
bio_îr
, "-clcerts only output client certificates.\n");

301 
	`BIO_¥ötf
 (
bio_îr
, "-cacerts only output CA certificates.\n");

302 
	`BIO_¥ötf
 (
bio_îr
, "-nokeys don't outputÖrivate keys.\n");

303 
	`BIO_¥ötf
 (
bio_îr
, "-info give infoábout PKCS#12 structure.\n");

304 
	`BIO_¥ötf
 (
bio_îr
, "-desÉncryptÖrivate keys with DES\n");

305 
	`BIO_¥ötf
 (
bio_îr
, "-des3ÉncryptÖrivate keys withÅriple DES (default)\n");

306 #i‚de‡
OPENSSL_NO_IDEA


307 
	`BIO_¥ötf
 (
bio_îr
, "-ideaÉncryptÖrivate keys with idea\n");

309 #i‚de‡
OPENSSL_NO_SEED


310 
	`BIO_¥ötf
 (
bio_îr
, "-seedÉncryptÖrivate keys with seed\n");

312 #i‚de‡
OPENSSL_NO_AES


313 
	`BIO_¥ötf
 (
bio_îr
, "-aes128, -aes192, -aes256\n");

314 
	`BIO_¥ötf
 (
bio_îr
, "Éncrypt PEM output with cbcáes\n");

316 #i‚de‡
OPENSSL_NO_CAMELLIA


317 
	`BIO_¥ötf
 (
bio_îr
, "-camellia128, -camellia192, -camellia256\n");

318 
	`BIO_¥ötf
 (
bio_îr
, "Éncrypt PEM output with cbc camellia\n");

320 
	`BIO_¥ötf
 (
bio_îr
, "-nodes don'tÉncryptÖrivate keys\n");

321 
	`BIO_¥ötf
 (
bio_îr
, "-noiter don't useÉncryption iteration\n");

322 
	`BIO_¥ötf
 (
bio_îr
, "-nomaciter don't use MAC iteration\n");

323 
	`BIO_¥ötf
 (
bio_îr
, "-maciter use MAC iteration\n");

324 
	`BIO_¥ötf
 (
bio_îr
, "-nomac don't generate MAC\n");

325 
	`BIO_¥ötf
 (
bio_îr
, "-twopass separate MAC,ÉncryptionÖasswords\n");

326 
	`BIO_¥ötf
 (
bio_îr
, "-descertÉncrypt PKCS#12 certificates withÅriple DES (default RC2-40)\n");

327 
	`BIO_¥ötf
 (
bio_îr
, "-certpbeálg specify certificate PBEálgorithm (default RC2-40)\n");

328 
	`BIO_¥ötf
 (
bio_îr
, "-keypbeálg specifyÖrivate key PBEálgorithm (default 3DES)\n");

329 
	`BIO_¥ötf
 (
bio_îr
, "-macalgálg digestálgorithm used in MAC (default SHA1)\n");

330 
	`BIO_¥ötf
 (
bio_îr
, "-keyex set MS keyÉxchangeÅype\n");

331 
	`BIO_¥ötf
 (
bio_îr
, "-keysig set MS key signatureÅype\n");

332 
	`BIO_¥ötf
 (
bio_îr
, "-passwordÖ set import/exportÖassword source\n");

333 
	`BIO_¥ötf
 (
bio_îr
, "-passinÖ input fileÖassÖhrase source\n");

334 
	`BIO_¥ötf
 (
bio_îr
, "-passoutÖ output fileÖassÖhrase source\n");

335 #i‚de‡
OPENSSL_NO_ENGINE


336 
	`BIO_¥ötf
 (
bio_îr
, "-engineÉ useÉngineÉ,Öossiblyá hardware device.\n");

338 
	`BIO_¥ötf
(
bio_îr
, "-ønd fûe%cfûe%c...\n", 
LIST_SEPARATOR_CHAR
, LIST_SEPARATOR_CHAR);

339 
	`BIO_¥ötf
(
bio_îr
, "ÜoadÅhe file (orÅhe files inÅhe directory) into\n");

340 
	`BIO_¥ötf
(
bio_îr
, "ÅheÑandomÇumber generator\n");

341 
	`BIO_¥ötf
(
bio_îr
, "-CSPÇame Microsoft CSPÇame\n");

342 
	`BIO_¥ötf
(
bio_îr
, "-LMK AddÜocal machine keysetáttributeÅoÖrivate key\n");

343 
íd
;

346 #i‚de‡
OPENSSL_NO_ENGINE


347 
e
 = 
	`£tup_ígöe
(
bio_îr
, 
ígöe
, 0);

350 if(
∑sßrg
) {

351 if(
exp‹t_˚π
Ë
∑sßrgout
 = 
∑sßrg
;

352 
∑sßrgö
 = 
∑sßrg
;

355 if(!
	`≠p_∑sswd
(
bio_îr
, 
∑sßrgö
, 
∑sßrgout
, &
∑ssö
, &
∑ssout
)) {

356 
	`BIO_¥ötf
(
bio_îr
, "Error gettingÖasswords\n");

357 
íd
;

360 if(!
˝ass
) {

361 if(
exp‹t_˚π
Ë
˝ass
 = 
∑ssout
;

362 
˝ass
 = 
∑ssö
;

365 if(
˝ass
) {

366 
m∑ss
 = 
˝ass
;

367 
n›rom±
 = 1;

369 
˝ass
 = 
∑ss
;

370 
m∑ss
 = 
ma˝ass
;

373 if(
exp‹t_˚π
 || 
öønd
) {

374 
	`≠p_RAND_lﬂd_fûe
(
NULL
, 
bio_îr
, (
öønd
 != NULL));

375 i‡(
öønd
 !
NULL
)

376 
	`BIO_¥ötf
(
bio_îr
,"%ld semi-random bytesÜoaded\n",

377 
	`≠p_RAND_lﬂd_fûes
(
öønd
));

379 
	`ERR_lﬂd_¸y±o_°rögs
();

381 #ifde‡
CRYPTO_MDEBUG


382 
	`CRYPTO_push_öfo
("read files");

385 i‡(!
öfûe
Ë
ö
 = 
	`BIO_√w_Â
(
°dö
, 
BIO_NOCLOSE
);

386 
ö
 = 
	`BIO_√w_fûe
(
öfûe
, "rb");

387 i‡(!
ö
) {

388 
	`BIO_¥ötf
(
bio_îr
, "Error opening input file %s\n",

389 
öfûe
 ? infile : "<stdin>");

390 
	`≥º‹
 (
öfûe
);

391 
íd
;

394 #ifde‡
CRYPTO_MDEBUG


395 
	`CRYPTO_p›_öfo
();

396 
	`CRYPTO_push_öfo
("write files");

399 i‡(!
outfûe
) {

400 
out
 = 
	`BIO_√w_Â
(
°dout
, 
BIO_NOCLOSE
);

401 #ifde‡
OPENSSL_SYS_VMS


403 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

404 
out
 = 
	`BIO_push
(
tmpbio
, out);

407 } 
out
 = 
	`BIO_√w_fûe
(
outfûe
, "wb");

408 i‡(!
out
) {

409 
	`BIO_¥ötf
(
bio_îr
, "Error opening output file %s\n",

410 
outfûe
 ? outfile : "<stdout>");

411 
	`≥º‹
 (
outfûe
);

412 
íd
;

414 i‡(
tw›ass
) {

415 #ifde‡
CRYPTO_MDEBUG


416 
	`CRYPTO_push_öfo
("read MACÖassword");

418 if(
	`EVP_ªad_pw_°rög
 (
ma˝ass
,  ma˝ass, "E¡î MAC Passw‹d:", 
exp‹t_˚π
))

420 
	`BIO_¥ötf
 (
bio_îr
, "Can'tÑead Password\n");

421 
íd
;

423 #ifde‡
CRYPTO_MDEBUG


424 
	`CRYPTO_p›_öfo
();

428 i‡(
exp‹t_˚π
) {

429 
EVP_PKEY
 *
key
 = 
NULL
;

430 
X509
 *
u˚π
 = 
NULL
, *
x
 = NULL;

431 
	`STACK_OF
(
X509
Ë*
˚πs
=
NULL
;

432 c⁄° 
EVP_MD
 *
macmd
 = 
NULL
;

433 *
ˇtmp
 = 
NULL
;

434 
i
;

436 i‡((
›ti⁄s
 & (
NOCERTS
|
NOKEYS
)) == (NOCERTS|NOKEYS))

438 
	`BIO_¥ötf
(
bio_îr
, "NothingÅo do!\n");

439 
exp‹t_íd
;

442 i‡(
›ti⁄s
 & 
NOCERTS
)

443 
chaö
 = 0;

445 #ifde‡
CRYPTO_MDEBUG


446 
	`CRYPTO_push_öfo
("process -export_cert");

447 
	`CRYPTO_push_öfo
("readingÖrivate key");

449 i‡(!(
›ti⁄s
 & 
NOKEYS
))

451 
key
 = 
	`lﬂd_key
(
bio_îr
, 
key«me
 ? key«mê: 
öfûe
,

452 
FORMAT_PEM
, 1, 
∑ssö
, 
e
, "private key");

453 i‡(!
key
)

454 
exp‹t_íd
;

457 #ifde‡
CRYPTO_MDEBUG


458 
	`CRYPTO_p›_öfo
();

459 
	`CRYPTO_push_öfo
("reading certs from input");

463 if(!(
›ti⁄s
 & 
NOCERTS
))

465 
˚πs
 = 
	`lﬂd_˚πs
(
bio_îr
, 
öfûe
, 
FORMAT_PEM
, 
NULL
, 
e
,

467 i‡(!
˚πs
)

468 
exp‹t_íd
;

470 i‡(
key
)

473 
i
 = 0; i < 
	`sk_X509_num
(
˚πs
); i++)

475 
x
 = 
	`sk_X509_vÆue
(
˚πs
, 
i
);

476 if(
	`X509_check_¥iv©e_key
(
x
, 
key
))

478 
u˚π
 = 
x
;

480 
	`X509_keyid_£t1
(
u˚π
, 
NULL
, 0);

481 
	`X509_Æüs_£t1
(
u˚π
, 
NULL
, 0);

483 ()
	`sk_X509_dñëe
(
˚πs
, 
i
);

487 i‡(!
u˚π
)

489 
	`BIO_¥ötf
(
bio_îr
, "No certificate matchesÖrivate key\n");

490 
exp‹t_íd
;

496 #ifde‡
CRYPTO_MDEBUG


497 
	`CRYPTO_p›_öfo
();

498 
	`CRYPTO_push_öfo
("reading certs from input 2");

502 if(
˚πfûe
)

504 
	`STACK_OF
(
X509
Ë*
m‹e˚πs
=
NULL
;

505 if(!(
m‹e˚πs
 = 
	`lﬂd_˚πs
(
bio_îr
, 
˚πfûe
, 
FORMAT_PEM
,

506 
NULL
, 
e
,

508 
exp‹t_íd
;

509 
	`sk_X509_num
(
m‹e˚πs
) > 0)

510 
	`sk_X509_push
(
˚πs
, 
	`sk_X509_shi·
(
m‹e˚πs
));

511 
	`sk_X509_‰ì
(
m‹e˚πs
);

514 #ifde‡
CRYPTO_MDEBUG


515 
	`CRYPTO_p›_öfo
();

516 
	`CRYPTO_push_öfo
("reading certs from certfile");

519 #ifde‡
CRYPTO_MDEBUG


520 
	`CRYPTO_p›_öfo
();

521 
	`CRYPTO_push_öfo
("building chain");

525 i‡(
chaö
) {

526 
vªt
;

527 
	`STACK_OF
(
X509
Ë*
chaö2
;

528 
X509_STORE
 *
°‹e
 = 
	`X509_STORE_√w
();

529 i‡(!
°‹e
)

531 
	`BIO_¥ötf
 (
bio_îr
, "MemoryállocationÉrror\n");

532 
exp‹t_íd
;

534 i‡(!
	`X509_STORE_lﬂd_loˇti⁄s
(
°‹e
, 
CAfûe
, 
CA∑th
))

535 
	`X509_STORE_£t_deÁu…_∑ths
 (
°‹e
);

537 
vªt
 = 
	`gë_˚π_chaö
 (
u˚π
, 
°‹e
, &
chaö2
);

538 
	`X509_STORE_‰ì
(
°‹e
);

540 i‡(!
vªt
) {

542 
i
 = 1; i < 
	`sk_X509_num
 (
chaö2
) ; i++)

543 
	`sk_X509_push
(
˚πs
, 
	`sk_X509_vÆue
 (
chaö2
, 
i
));

545 
	`X509_‰ì
(
	`sk_X509_vÆue
(
chaö2
, 0));

546 
	`sk_X509_‰ì
(
chaö2
);

548 i‡(
vªt
 >= 0)

549 
	`BIO_¥ötf
 (
bio_îr
, "Error %s getting chain.\n",

550 
	`X509_vîify_˚π_îr‹_°rög
(
vªt
));

552 
	`ERR_¥öt_îr‹s
(
bio_îr
);

553 
exp‹t_íd
;

559 
i
 = 0; i < 
	`sk_OPENSSL_STRING_num
(
ˇ«mes
); i++)

561 
ˇtmp
 = (*)
	`sk_OPENSSL_STRING_vÆue
(
ˇ«mes
, 
i
);

562 
	`X509_Æüs_£t1
(
	`sk_X509_vÆue
(
˚πs
, 
i
), 
ˇtmp
, -1);

565 i‡(
c•_«me
 && 
key
)

566 
	`EVP_PKEY_add1_©å_by_NID
(
key
, 
NID_ms_c•_«me
,

567 
MBSTRING_ASC
, (*)
c•_«me
, -1);

569 i‡(
add_lmk
 && 
key
)

570 
	`EVP_PKEY_add1_©å_by_NID
(
key
, 
NID_LoˇlKeySë
, 0, 
NULL
, -1);

572 #ifde‡
CRYPTO_MDEBUG


573 
	`CRYPTO_p›_öfo
();

574 
	`CRYPTO_push_öfo
("readingÖassword");

577 if(!
n›rom±
 &&

578 
	`EVP_ªad_pw_°rög
(
∑ss
, Öass, "Enter Export Password:", 1))

580 
	`BIO_¥ötf
 (
bio_îr
, "Can'tÑead Password\n");

581 
exp‹t_íd
;

583 i‡(!
tw›ass
Ë
	`BUF_°æ˝y
(
ma˝ass
, 
∑ss
,  macpass);

585 #ifde‡
CRYPTO_MDEBUG


586 
	`CRYPTO_p›_öfo
();

587 
	`CRYPTO_push_öfo
("creating PKCS#12 structure");

590 
p12
 = 
	`PKCS12_¸óã
(
˝ass
, 
«me
, 
key
, 
u˚π
, 
˚πs
,

591 
key_pbe
, 
˚π_pbe
, 
ôî
, -1, 
keyty≥
);

593 i‡(!
p12
)

595 
	`ERR_¥öt_îr‹s
 (
bio_îr
);

596 
exp‹t_íd
;

599 i‡(
maˇlg
)

601 
macmd
 = 
	`EVP_gë_dige°by«me
(
maˇlg
);

602 i‡(!
macmd
)

604 
	`BIO_¥ötf
(
bio_îr
, "Unknown digestálgorithm %s\n",

605 
maˇlg
);

609 i‡(
macôî
 != -1)

610 
	`PKCS12_£t_mac
(
p12
, 
m∑ss
, -1, 
NULL
, 0, 
macôî
, 
macmd
);

612 #ifde‡
CRYPTO_MDEBUG


613 
	`CRYPTO_p›_öfo
();

614 
	`CRYPTO_push_öfo
("writingÖkcs12");

617 
	`i2d_PKCS12_bio
(
out
, 
p12
);

619 
ªt
 = 0;

621 
exp‹t_íd
:

622 #ifde‡
CRYPTO_MDEBUG


623 
	`CRYPTO_p›_öfo
();

624 
	`CRYPTO_p›_öfo
();

625 
	`CRYPTO_push_öfo
("process -export_cert: freeing");

628 i‡(
key
Ë
	`EVP_PKEY_‰ì
(key);

629 i‡(
˚πs
Ë
	`sk_X509_p›_‰ì
(˚πs, 
X509_‰ì
);

630 i‡(
u˚π
Ë
	`X509_‰ì
(ucert);

632 #ifde‡
CRYPTO_MDEBUG


633 
	`CRYPTO_p›_öfo
();

635 
íd
;

639 i‡(!(
p12
 = 
	`d2i_PKCS12_bio
 (
ö
, 
NULL
))) {

640 
	`ERR_¥öt_îr‹s
(
bio_îr
);

641 
íd
;

644 #ifde‡
CRYPTO_MDEBUG


645 
	`CRYPTO_push_öfo
("read importÖassword");

647 if(!
n›rom±
 && 
	`EVP_ªad_pw_°rög
(
∑ss
, Öass, "Enter Import Password:", 0)) {

648 
	`BIO_¥ötf
 (
bio_îr
, "Can'tÑead Password\n");

649 
íd
;

651 #ifde‡
CRYPTO_MDEBUG


652 
	`CRYPTO_p›_öfo
();

655 i‡(!
tw›ass
Ë
	`BUF_°æ˝y
(
ma˝ass
, 
∑ss
,  macpass);

657 i‡((
›ti⁄s
 & 
INFO
Ë&& 
p12
->
mac
Ë
	`BIO_¥ötf
 (
bio_îr
, "MAC Iãøti⁄ %ld\n",Ö12->mac->
ôî
 ? 
	`ASN1_INTEGER_gë
 (p12->mac->iter) : 1);

658 if(
macvî
) {

659 #ifde‡
CRYPTO_MDEBUG


660 
	`CRYPTO_push_öfo
("verify MAC");

663 if(!
m∑ss
[0] && 
	`PKCS12_vîify_mac
(
p12
, 
NULL
, 0)) {

665 if(!
tw›ass
Ë
˝ass
 = 
NULL
;

666 } i‡(!
	`PKCS12_vîify_mac
(
p12
, 
m∑ss
, -1)) {

667 
	`BIO_¥ötf
 (
bio_îr
, "Mac verifyÉrror: invalidÖassword?\n");

668 
	`ERR_¥öt_îr‹s
 (
bio_îr
);

669 
íd
;

671 
	`BIO_¥ötf
 (
bio_îr
, "MAC verified OK\n");

672 #ifde‡
CRYPTO_MDEBUG


673 
	`CRYPTO_p›_öfo
();

677 #ifde‡
CRYPTO_MDEBUG


678 
	`CRYPTO_push_öfo
("output keysánd certificates");

680 i‡(!
	`dump_˚πs_keys_p12
 (
out
, 
p12
, 
˝ass
, -1, 
›ti⁄s
, 
∑ssout
)) {

681 
	`BIO_¥ötf
(
bio_îr
, "Error outputting keysánd certificates\n");

682 
	`ERR_¥öt_îr‹s
 (
bio_îr
);

683 
íd
;

685 #ifde‡
CRYPTO_MDEBUG


686 
	`CRYPTO_p›_öfo
();

688 
ªt
 = 0;

689 
íd
:

690 i‡(
p12
Ë
	`PKCS12_‰ì
(p12);

691 if(
exp‹t_˚π
 || 
öønd
Ë
	`≠p_RAND_wrôe_fûe
(
NULL
, 
bio_îr
);

692 #ifde‡
CRYPTO_MDEBUG


693 
	`CRYPTO_ªmove_Æl_öfo
();

695 
	`BIO_‰ì
(
ö
);

696 
	`BIO_‰ì_Æl
(
out
);

697 i‡(
ˇ«mes
Ë
	`sk_OPENSSL_STRING_‰ì
(canames);

698 if(
∑ssö
Ë
	`OPENSSL_‰ì
(passin);

699 if(
∑ssout
Ë
	`OPENSSL_‰ì
(passout);

700 
	`≠ps_shutdown
();

701 
	`OPENSSL_EXIT
(
ªt
);

702 
	}
}

704 
	$dump_˚πs_keys_p12
 (
BIO
 *
out
, 
PKCS12
 *
p12
, *
∑ss
,

705 
∑s¶í
, 
›ti⁄s
, *
≥m∑ss
)

707 
	`STACK_OF
(
PKCS7
Ë*
aß„s
 = 
NULL
;

708 
	`STACK_OF
(
PKCS12_SAFEBAG
Ë*
bags
;

709 
i
, 
bagnid
;

710 
ªt
 = 0;

711 
PKCS7
 *
p7
;

713 i‡(!–
aß„s
 = 
	`PKCS12_u≈ack_authß„s
(
p12
)))  0;

714 
i
 = 0; i < 
	`sk_PKCS7_num
 (
aß„s
); i++) {

715 
p7
 = 
	`sk_PKCS7_vÆue
 (
aß„s
, 
i
);

716 
bagnid
 = 
	`OBJ_obj2nid
 (
p7
->
ty≥
);

717 i‡(
bagnid
 =
NID_pkcs7_d©a
) {

718 
bags
 = 
	`PKCS12_u≈ack_p7d©a
(
p7
);

719 i‡(
›ti⁄s
 & 
INFO
Ë
	`BIO_¥ötf
 (
bio_îr
, "PKCS7 Data\n");

720 } i‡(
bagnid
 =
NID_pkcs7_í¸y±ed
) {

721 i‡(
›ti⁄s
 & 
INFO
) {

722 
	`BIO_¥ötf
(
bio_îr
, "PKCS7 Encrypted data: ");

723 
	`Æg_¥öt
(
bio_îr
,

724 
p7
->
d
.
í¸y±ed
->
íc_d©a
->
Æg‹ôhm
);

726 
bags
 = 
	`PKCS12_u≈ack_p7ícd©a
(
p7
, 
∑ss
, 
∑s¶í
);

728 i‡(!
bags
Ë
îr
;

729 i‡(!
	`dump_˚πs_pkeys_bags
 (
out
, 
bags
, 
∑ss
, 
∑s¶í
,

730 
›ti⁄s
, 
≥m∑ss
)) {

731 
	`sk_PKCS12_SAFEBAG_p›_‰ì
 (
bags
, 
PKCS12_SAFEBAG_‰ì
);

732 
îr
;

734 
	`sk_PKCS12_SAFEBAG_p›_‰ì
 (
bags
, 
PKCS12_SAFEBAG_‰ì
);

735 
bags
 = 
NULL
;

737 
ªt
 = 1;

739 
îr
:

741 i‡(
aß„s
)

742 
	`sk_PKCS7_p›_‰ì
 (
aß„s
, 
PKCS7_‰ì
);

743  
ªt
;

744 
	}
}

746 
dump_˚πs_pkeys_bags
 (
BIO
 *
out
, 
STACK_OF
(
PKCS12_SAFEBAG
Ë*
bags
,

747 *
∑ss
, 
∑s¶í
, 
›ti⁄s
, *
≥m∑ss
)

749 
	gi
;

750 
	gi
 = 0; i < 
sk_PKCS12_SAFEBAG_num
 (
bags
); i++) {

751 i‡(!
dump_˚πs_pkeys_bag
 (
out
,

752 
sk_PKCS12_SAFEBAG_vÆue
 (
bags
, 
i
),

753 
∑ss
, 
∑s¶í
,

754 
›ti⁄s
, 
≥m∑ss
))

760 
	$dump_˚πs_pkeys_bag
 (
BIO
 *
out
, 
PKCS12_SAFEBAG
 *
bag
, *
∑ss
,

761 
∑s¶í
, 
›ti⁄s
, *
≥m∑ss
)

763 
EVP_PKEY
 *
pkey
;

764 
PKCS8_PRIV_KEY_INFO
 *
p8
;

765 
X509
 *
x509
;

767 
	`M_PKCS12_bag_ty≥
(
bag
))

769 
NID_keyBag
:

770 i‡(
›ti⁄s
 & 
INFO
Ë
	`BIO_¥ötf
 (
bio_îr
, "Key bag\n");

771 i‡(
›ti⁄s
 & 
NOKEYS
)  1;

772 
	`¥öt_©åibs
 (
out
, 
bag
->
©åib
, "Bag Attributes");

773 
p8
 = 
bag
->
vÆue
.
keybag
;

774 i‡(!(
pkey
 = 
	`EVP_PKCS82PKEY
 (
p8
)))  0;

775 
	`¥öt_©åibs
 (
out
, 
p8
->
©åibuãs
, "Key Attributes");

776 
	`PEM_wrôe_bio_Priv©eKey
 (
out
, 
pkey
, 
íc
, 
NULL
, 0, NULL, 
≥m∑ss
);

777 
	`EVP_PKEY_‰ì
(
pkey
);

780 
NID_pkcs8ShroudedKeyBag
:

781 i‡(
›ti⁄s
 & 
INFO
) {

782 
	`BIO_¥ötf
 (
bio_îr
, "Shrouded Keybag: ");

783 
	`Æg_¥öt
 (
bio_îr
, 
bag
->
vÆue
.
shkeybag
->
Æg‹
);

785 i‡(
›ti⁄s
 & 
NOKEYS
)  1;

786 
	`¥öt_©åibs
 (
out
, 
bag
->
©åib
, "Bag Attributes");

787 i‡(!(
p8
 = 
	`PKCS12_de¸y±_skey
(
bag
, 
∑ss
, 
∑s¶í
)))

789 i‡(!(
pkey
 = 
	`EVP_PKCS82PKEY
 (
p8
))) {

790 
	`PKCS8_PRIV_KEY_INFO_‰ì
(
p8
);

793 
	`¥öt_©åibs
 (
out
, 
p8
->
©åibuãs
, "Key Attributes");

794 
	`PKCS8_PRIV_KEY_INFO_‰ì
(
p8
);

795 
	`PEM_wrôe_bio_Priv©eKey
 (
out
, 
pkey
, 
íc
, 
NULL
, 0, NULL, 
≥m∑ss
);

796 
	`EVP_PKEY_‰ì
(
pkey
);

799 
NID_˚πBag
:

800 i‡(
›ti⁄s
 & 
INFO
Ë
	`BIO_¥ötf
 (
bio_îr
, "Certificate bag\n");

801 i‡(
›ti⁄s
 & 
NOCERTS
)  1;

802 i‡(
	`PKCS12_gë_©å
(
bag
, 
NID_loˇlKeyID
)) {

803 i‡(
›ti⁄s
 & 
CACERTS
)  1;

804 } i‡(
›ti⁄s
 & 
CLCERTS
)  1;

805 
	`¥öt_©åibs
 (
out
, 
bag
->
©åib
, "Bag Attributes");

806 i‡(
	`M_PKCS12_˚π_bag_ty≥
(
bag
Ë!
NID_x509Cîtifiˇã
 )

808 i‡(!(
x509
 = 
	`PKCS12_˚πbag2x509
(
bag
)))  0;

809 
	`dump_˚π_ãxt
 (
out
, 
x509
);

810 
	`PEM_wrôe_bio_X509
 (
out
, 
x509
);

811 
	`X509_‰ì
(
x509
);

814 
NID_ß„C⁄ã¡sBag
:

815 i‡(
›ti⁄s
 & 
INFO
Ë
	`BIO_¥ötf
 (
bio_îr
, "Safe Contents bag\n");

816 
	`¥öt_©åibs
 (
out
, 
bag
->
©åib
, "Bag Attributes");

817  
	`dump_˚πs_pkeys_bags
 (
out
, 
bag
->
vÆue
.
ß„s
, 
∑ss
,

818 
∑s¶í
, 
›ti⁄s
, 
≥m∑ss
);

821 
	`BIO_¥ötf
 (
bio_îr
, "Warning unsupported bagÅype: ");

822 
	`i2a_ASN1_OBJECT
 (
bio_îr
, 
bag
->
ty≥
);

823 
	`BIO_¥ötf
 (
bio_îr
, "\n");

828 
	}
}

834 
gë_˚π_chaö
 (
X509
 *
˚π
, 
X509_STORE
 *
°‹e
, 
STACK_OF
(X509Ë**
chaö
)

836 
X509_STORE_CTX
 
	g°‹e_˘x
;

837 
STACK_OF
(
X509
Ë*
	gchn
;

838 
	gi
 = 0;

843 
X509_STORE_CTX_öô
(&
°‹e_˘x
, 
°‹e
, 
˚π
, 
NULL
);

844 i‡(
X509_vîify_˚π
(&
°‹e_˘x
) <= 0) {

845 
i
 = 
X509_STORE_CTX_gë_îr‹
 (&
°‹e_˘x
);

846 i‡(
	gi
 == 0)

849 
i
 = -1;

850 
	gchn
 = 
NULL
;

851 
	gîr
;

853 
	gchn
 = 
X509_STORE_CTX_gë1_chaö
(&
°‹e_˘x
);

854 
	gîr
:

855 
X509_STORE_CTX_˛ónup
(&
°‹e_˘x
);

856 *
	gchaö
 = 
chn
;

858  
	gi
;

861 
	$Æg_¥öt
 (
BIO
 *
x
, 
X509_ALGOR
 *
Æg
)

863 
PBEPARAM
 *
pbe
;

864 c⁄° *
p
;

865 
p
 = 
Æg
->
∑ømëî
->
vÆue
.
£quí˚
->
d©a
;

866 
pbe
 = 
	`d2i_PBEPARAM
(
NULL
, &
p
, 
Æg
->
∑ømëî
->
vÆue
.
£quí˚
->
Àngth
);

867 i‡(!
pbe
)

869 
	`BIO_¥ötf
 (
bio_îr
, "%s, Iteration %ld\n",

870 
	`OBJ_nid2 
(
	`OBJ_obj2nid
(
Æg
->
Æg‹ôhm
)),

871 
	`ASN1_INTEGER_gë
(
pbe
->
ôî
));

872 
	`PBEPARAM_‰ì
 (
pbe
);

874 
	}
}

878 
˚π_lﬂd
(
BIO
 *
ö
, 
STACK_OF
(
X509
Ë*
sk
)

880 
	gªt
;

881 
X509
 *
	g˚π
;

882 
	gªt
 = 0;

883 #ifde‡
CRYPTO_MDEBUG


884 
CRYPTO_push_öfo
("cert_load():Ñeading one cert");

886 (
	g˚π
 = 
PEM_ªad_bio_X509
(
ö
, 
NULL
, NULL, NULL))) {

887 #ifde‡
CRYPTO_MDEBUG


888 
CRYPTO_p›_öfo
();

890 
	gªt
 = 1;

891 
sk_X509_push
(
sk
, 
˚π
);

892 #ifde‡
CRYPTO_MDEBUG


893 
CRYPTO_push_öfo
("cert_load():Ñeading one cert");

896 #ifde‡
CRYPTO_MDEBUG


897 
CRYPTO_p›_öfo
();

899 if(
	gªt
Ë
ERR_˛ór_îr‹
();

900  
	gªt
;

905 
¥öt_©åibs
 (
BIO
 *
out
, 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©ål°
,c⁄° *
«me
)

907 
X509_ATTRIBUTE
 *
	g©å
;

908 
ASN1_TYPE
 *
	gav
;

909 *
	gvÆue
;

910 
	gi
, 
	g©å_nid
;

911 if(!
	g©ål°
) {

912 
BIO_¥ötf
(
out
, "%s: <NÿAâribuãs>\n", 
«me
);

915 if(!
sk_X509_ATTRIBUTE_num
(
©ål°
)) {

916 
BIO_¥ötf
(
out
, "%s: <Em±y Aâribuãs>\n", 
«me
);

919 
BIO_¥ötf
(
out
, "%s\n", 
«me
);

920 
	gi
 = 0; i < 
sk_X509_ATTRIBUTE_num
(
©ål°
); i++) {

921 
	g©å
 = 
sk_X509_ATTRIBUTE_vÆue
(
©ål°
, 
i
);

922 
	g©å_nid
 = 
OBJ_obj2nid
(
©å
->
obje˘
);

923 
BIO_¥ötf
(
out
, " ");

924 if(
	g©å_nid
 =
NID_undef
) {

925 
i2a_ASN1_OBJECT
 (
out
, 
©å
->
obje˘
);

926 
BIO_¥ötf
(
out
, ": ");

927 } 
BIO_¥ötf
(
out
, "%s: ", 
OBJ_nid2 
(
©å_nid
));

929 if(
sk_ASN1_TYPE_num
(
©å
->
vÆue
.
£t
)) {

930 
	gav
 = 
sk_ASN1_TYPE_vÆue
(
©å
->
vÆue
.
£t
, 0);

931 
	gav
->
	gty≥
) {

932 
	gV_ASN1_BMPSTRING
:

933 
vÆue
 = 
OPENSSL_uni2asc
(
av
->vÆue.
bmp°rög
->
d©a
,

934 
av
->
vÆue
.
bmp°rög
->
Àngth
);

935 
BIO_¥ötf
(
out
, "%s\n", 
vÆue
);

936 
OPENSSL_‰ì
(
vÆue
);

939 
	gV_ASN1_OCTET_STRING
:

940 
hex_¥ö
(
out
, 
av
->
vÆue
.
o˘ë_°rög
->
d©a
,

941 
av
->
vÆue
.
o˘ë_°rög
->
Àngth
);

942 
BIO_¥ötf
(
out
, "\n");

945 
	gV_ASN1_BIT_STRING
:

946 
hex_¥ö
(
out
, 
av
->
vÆue
.
bô_°rög
->
d©a
,

947 
av
->
vÆue
.
bô_°rög
->
Àngth
);

948 
BIO_¥ötf
(
out
, "\n");

952 
BIO_¥ötf
(
out
, "<Unsuµ‹ãdÅag %d>\n", 
av
->
ty≥
);

955 } 
BIO_¥ötf
(
out
, "<No Values>\n");

960 
	$hex_¥ö
(
BIO
 *
out
, *
buf
, 
Àn
)

962 
i
;

963 
i
 = 0; i < 
Àn
; i++Ë
	`BIO_¥ötf
 (
out
, "%02X ", 
buf
[i]);

964 
	}
}

966 
	$£t_pbe
(
BIO
 *
îr
, *
µbe
, c⁄° *
°r
)

968 i‡(!
°r
)

970 i‡(!
	`°rcmp
(
°r
, "NONE"))

972 *
µbe
 = -1;

975 *
µbe
=
	`OBJ_txt2nid
(
°r
);

976 i‡(*
µbe
 =
NID_undef
)

978 
	`BIO_¥ötf
(
bio_îr
, "Unknow¿PBEálg‹ôhm %s\n", 
°r
);

982 
	}
}

	@pkcs7.c

59 
	~<°dio.h
>

60 
	~<°dlib.h
>

61 
	~<°rög.h
>

62 
	~<time.h
>

63 
	~"≠ps.h
"

64 
	~<›ís¶/îr.h
>

65 
	~<›ís¶/obje˘s.h
>

66 
	~<›ís¶/evp.h
>

67 
	~<›ís¶/x509.h
>

68 
	~<›ís¶/pkcs7.h
>

69 
	~<›ís¶/≥m.h
>

71 #unde‡
PROG


72 
	#PROG
 
pkcs7_maö


	)

81 
MAIN
(, **);

83 
	$MAIN
(
¨gc
, **
¨gv
)

85 
PKCS7
 *
p7
=
NULL
;

86 
i
,
bad›s
=0;

87 
BIO
 *
ö
=
NULL
,*
out
=NULL;

88 
öf‹m©
,
outf‹m©
;

89 *
öfûe
,*
outfûe
,*
¥og
;

90 
¥öt_˚πs
=0,
ãxt
=0,
noout
=0,
p7_¥öt
=0;

91 
ªt
=1;

92 #i‚de‡
OPENSSL_NO_ENGINE


93 *
ígöe
=
NULL
;

96 
	`≠ps_°¨tup
();

98 i‡(
bio_îr
 =
NULL
)

99 i‡((
bio_îr
=
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

100 
	`BIO_£t_Â
(
bio_îr
,
°dîr
,
BIO_NOCLOSE
|
BIO_FP_TEXT
);

102 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

103 
íd
;

105 
öfûe
=
NULL
;

106 
outfûe
=
NULL
;

107 
öf‹m©
=
FORMAT_PEM
;

108 
outf‹m©
=
FORMAT_PEM
;

110 
¥og
=
¨gv
[0];

111 
¨gc
--;

112 
¨gv
++;

113 
¨gc
 >= 1)

115 i‡(
	`°rcmp
(*
¨gv
,"-inform") == 0)

117 i‡(--
¨gc
 < 1Ë
bad
;

118 
öf‹m©
=
	`°r2fmt
(*(++
¨gv
));

120 i‡(
	`°rcmp
(*
¨gv
,"-outform") == 0)

122 i‡(--
¨gc
 < 1Ë
bad
;

123 
outf‹m©
=
	`°r2fmt
(*(++
¨gv
));

125 i‡(
	`°rcmp
(*
¨gv
,"-in") == 0)

127 i‡(--
¨gc
 < 1Ë
bad
;

128 
öfûe
*(++
¨gv
);

130 i‡(
	`°rcmp
(*
¨gv
,"-out") == 0)

132 i‡(--
¨gc
 < 1Ë
bad
;

133 
outfûe
*(++
¨gv
);

135 i‡(
	`°rcmp
(*
¨gv
,"-noout") == 0)

136 
noout
=1;

137 i‡(
	`°rcmp
(*
¨gv
,"-text") == 0)

138 
ãxt
=1;

139 i‡(
	`°rcmp
(*
¨gv
,"-print") == 0)

140 
p7_¥öt
=1;

141 i‡(
	`°rcmp
(*
¨gv
,"-print_certs") == 0)

142 
¥öt_˚πs
=1;

143 #i‚de‡
OPENSSL_NO_ENGINE


144 i‡(
	`°rcmp
(*
¨gv
,"-engine") == 0)

146 i‡(--
¨gc
 < 1Ë
bad
;

147 
ígöe
*(++
¨gv
);

152 
	`BIO_¥ötf
(
bio_îr
,"unknow¿›ti⁄ %s\n",*
¨gv
);

153 
bad›s
=1;

156 
¨gc
--;

157 
¨gv
++;

160 i‡(
bad›s
)

162 
bad
:

163 
	`BIO_¥ötf
(
bio_îr
,"%†[›ti⁄s] <öfûê>outfûe\n",
¥og
);

164 
	`BIO_¥ötf
(
bio_îr
,"where optionsáre\n");

165 
	`BIO_¥ötf
(
bio_îr
," -informárg input format - DER or PEM\n");

166 
	`BIO_¥ötf
(
bio_îr
," -outformárg output format - DER or PEM\n");

167 
	`BIO_¥ötf
(
bio_îr
," -inárg input file\n");

168 
	`BIO_¥ötf
(
bio_îr
," -outárg output file\n");

169 
	`BIO_¥ötf
(
bio_îr
," -print_certsÖrintány certs or crl inÅhe input\n");

170 
	`BIO_¥ötf
(
bio_îr
," -textÖrint full details of certificates\n");

171 
	`BIO_¥ötf
(
bio_îr
," -noout don't outputÉncoded data\n");

172 #i‚de‡
OPENSSL_NO_ENGINE


173 
	`BIO_¥ötf
(
bio_îr
," -engineÉ useÉngineÉ,Öossiblyá hardware device.\n");

175 
ªt
 = 1;

176 
íd
;

179 
	`ERR_lﬂd_¸y±o_°rögs
();

181 #i‚de‡
OPENSSL_NO_ENGINE


182 
	`£tup_ígöe
(
bio_îr
, 
ígöe
, 0);

185 
ö
=
	`BIO_√w
(
	`BIO_s_fûe
());

186 
out
=
	`BIO_√w
(
	`BIO_s_fûe
());

187 i‡((
ö
 =
NULL
Ë|| (
out
 == NULL))

189 
	`ERR_¥öt_îr‹s
(
bio_îr
);

190 
íd
;

193 i‡(
öfûe
 =
NULL
)

194 
	`BIO_£t_Â
(
ö
,
°dö
,
BIO_NOCLOSE
);

197 i‡(
	`BIO_ªad_fûíame
(
ö
,
öfûe
) <= 0)

198 i‡(
ö
 =
NULL
)

200 
	`≥º‹
(
öfûe
);

201 
íd
;

205 i‡(
öf‹m©
 =
FORMAT_ASN1
)

206 
p7
=
	`d2i_PKCS7_bio
(
ö
,
NULL
);

207 i‡(
öf‹m©
 =
FORMAT_PEM
)

208 
p7
=
	`PEM_ªad_bio_PKCS7
(
ö
,
NULL
,NULL,NULL);

211 
	`BIO_¥ötf
(
bio_îr
,"bad input format specified forÖkcs7 object\n");

212 
íd
;

214 i‡(
p7
 =
NULL
)

216 
	`BIO_¥ötf
(
bio_îr
,"unableÅoÜoad PKCS7 object\n");

217 
	`ERR_¥öt_îr‹s
(
bio_îr
);

218 
íd
;

221 i‡(
outfûe
 =
NULL
)

223 
	`BIO_£t_Â
(
out
,
°dout
,
BIO_NOCLOSE
);

224 #ifde‡
OPENSSL_SYS_VMS


226 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

227 
out
 = 
	`BIO_push
(
tmpbio
, out);

233 i‡(
	`BIO_wrôe_fûíame
(
out
,
outfûe
) <= 0)

235 
	`≥º‹
(
outfûe
);

236 
íd
;

240 i‡(
p7_¥öt
)

241 
	`PKCS7_¥öt_˘x
(
out
, 
p7
, 0, 
NULL
);

243 i‡(
¥öt_˚πs
)

245 
	`STACK_OF
(
X509
Ë*
˚πs
=
NULL
;

246 
	`STACK_OF
(
X509_CRL
Ë*
¸ls
=
NULL
;

248 
i
=
	`OBJ_obj2nid
(
p7
->
ty≥
);

249 
i
)

251 
NID_pkcs7_sig√d
:

252 
˚πs
=
p7
->
d
.
sign
->
˚π
;

253 
¸ls
=
p7
->
d
.
sign
->
¸l
;

255 
NID_pkcs7_sig√dAndEnvñ›ed
:

256 
˚πs
=
p7
->
d
.
sig√d_™d_ívñ›ed
->
˚π
;

257 
¸ls
=
p7
->
d
.
sig√d_™d_ívñ›ed
->
¸l
;

263 i‡(
˚πs
 !
NULL
)

265 
X509
 *
x
;

267 
i
=0; i<
	`sk_X509_num
(
˚πs
); i++)

269 
x
=
	`sk_X509_vÆue
(
˚πs
,
i
);

270 if(
ãxt
Ë
	`X509_¥öt
(
out
, 
x
);

271 
	`dump_˚π_ãxt
(
out
, 
x
);

273 if(!
noout
Ë
	`PEM_wrôe_bio_X509
(
out
,
x
);

274 
	`BIO_puts
(
out
,"\n");

277 i‡(
¸ls
 !
NULL
)

279 
X509_CRL
 *
¸l
;

281 
i
=0; i<
	`sk_X509_CRL_num
(
¸ls
); i++)

283 
¸l
=
	`sk_X509_CRL_vÆue
(
¸ls
,
i
);

285 
	`X509_CRL_¥öt
(
out
, 
¸l
);

287 if(!
noout
)
	`PEM_wrôe_bio_X509_CRL
(
out
,
¸l
);

288 
	`BIO_puts
(
out
,"\n");

292 
ªt
=0;

293 
íd
;

296 if(!
noout
) {

297 i‡(
outf‹m©
 =
FORMAT_ASN1
)

298 
i
=
	`i2d_PKCS7_bio
(
out
,
p7
);

299 i‡(
outf‹m©
 =
FORMAT_PEM
)

300 
i
=
	`PEM_wrôe_bio_PKCS7
(
out
,
p7
);

302 
	`BIO_¥ötf
(
bio_îr
,"bad output format specified for outfile\n");

303 
íd
;

306 i‡(!
i
)

308 
	`BIO_¥ötf
(
bio_îr
,"unableÅo writeÖkcs7 object\n");

309 
	`ERR_¥öt_îr‹s
(
bio_îr
);

310 
íd
;

313 
ªt
=0;

314 
íd
:

315 i‡(
p7
 !
NULL
Ë
	`PKCS7_‰ì
(p7);

316 i‡(
ö
 !
NULL
Ë
	`BIO_‰ì
(in);

317 i‡(
out
 !
NULL
Ë
	`BIO_‰ì_Æl
(out);

318 
	`≠ps_shutdown
();

319 
	`OPENSSL_EXIT
(
ªt
);

320 
	}
}

	@pkcs8.c

58 
	~<°dio.h
>

59 
	~<°rög.h
>

60 
	~"≠ps.h
"

61 
	~<›ís¶/≥m.h
>

62 
	~<›ís¶/îr.h
>

63 
	~<›ís¶/evp.h
>

64 
	~<›ís¶/pkcs12.h
>

66 
	#PROG
 
pkcs8_maö


	)

68 
MAIN
(, **);

70 
	$MAIN
(
¨gc
, **
¨gv
)

72 
ENGINE
 *
e
 = 
NULL
;

73 **
¨gs
, *
öfûe
 = 
NULL
, *
outfûe
 = NULL;

74 *
∑sßrgö
 = 
NULL
, *
∑sßrgout
 = NULL;

75 
BIO
 *
ö
 = 
NULL
, *
out
 = NULL;

76 
t›k8
 = 0;

77 
pbe_nid
 = -1;

78 c⁄° 
EVP_CIPHER
 *
cùhî
 = 
NULL
;

79 
ôî
 = 
PKCS12_DEFAULT_ITER
;

80 
öf‹m©
, 
outf‹m©
;

81 
p8_brokí
 = 
PKCS8_OK
;

82 
no¸y±
 = 0;

83 
X509_SIG
 *
p8
 = 
NULL
;

84 
PKCS8_PRIV_KEY_INFO
 *
p8öf
 = 
NULL
;

85 
EVP_PKEY
 *
pkey
=
NULL
;

86 
∑ss
[50], *
∑ssö
 = 
NULL
, *
∑ssout
 = NULL, *
p8∑ss
 = NULL;

87 
bad¨g
 = 0;

88 
ªt
 = 1;

89 #i‚de‡
OPENSSL_NO_ENGINE


90 *
ígöe
=
NULL
;

93 i‡(
bio_îr
 =
NULL
Ëbio_î∏
	`BIO_√w_Â
 (
°dîr
, 
BIO_NOCLOSE
);

95 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

96 
íd
;

98 
öf‹m©
=
FORMAT_PEM
;

99 
outf‹m©
=
FORMAT_PEM
;

101 
	`ERR_lﬂd_¸y±o_°rögs
();

102 
	`O≥nSSL_add_Æl_Æg‹ôhms
();

103 
¨gs
 = 
¨gv
 + 1;

104 !
bad¨g
 && *
¨gs
 && *args[0] == '-')

106 i‡(!
	`°rcmp
(*
¨gs
,"-v2"))

108 i‡(
¨gs
[1])

110 
¨gs
++;

111 
cùhî
=
	`EVP_gë_cùhîby«me
(*
¨gs
);

112 i‡(!
cùhî
)

114 
	`BIO_¥ötf
(
bio_îr
,

115 "Unknow¿cùhî %s\n", *
¨gs
);

116 
bad¨g
 = 1;

120 
bad¨g
 = 1;

122 i‡(!
	`°rcmp
(*
¨gs
,"-v1"))

124 i‡(
¨gs
[1])

126 
¨gs
++;

127 
pbe_nid
=
	`OBJ_txt2nid
(*
¨gs
);

128 i‡(
pbe_nid
 =
NID_undef
)

130 
	`BIO_¥ötf
(
bio_îr
,

131 "Unknow¿PBEálg‹ôhm %s\n", *
¨gs
);

132 
bad¨g
 = 1;

136 
bad¨g
 = 1;

138 i‡(!
	`°rcmp
(*
¨gs
,"-inform"))

140 i‡(
¨gs
[1])

142 
¨gs
++;

143 
öf‹m©
=
	`°r2fmt
(*
¨gs
);

145 
bad¨g
 = 1;

147 i‡(!
	`°rcmp
(*
¨gs
,"-outform"))

149 i‡(
¨gs
[1])

151 
¨gs
++;

152 
outf‹m©
=
	`°r2fmt
(*
¨gs
);

154 
bad¨g
 = 1;

156 i‡(!
	`°rcmp
 (*
¨gs
, "-topk8"))

157 
t›k8
 = 1;

158 i‡(!
	`°rcmp
 (*
¨gs
, "-noiter"))

159 
ôî
 = 1;

160 i‡(!
	`°rcmp
 (*
¨gs
, "-nocrypt"))

161 
no¸y±
 = 1;

162 i‡(!
	`°rcmp
 (*
¨gs
, "-nooct"))

163 
p8_brokí
 = 
PKCS8_NO_OCTET
;

164 i‡(!
	`°rcmp
 (*
¨gs
, "-nsdb"))

165 
p8_brokí
 = 
PKCS8_NS_DB
;

166 i‡(!
	`°rcmp
 (*
¨gs
, "-embed"))

167 
p8_brokí
 = 
PKCS8_EMBEDDED_PARAM
;

168 i‡(!
	`°rcmp
(*
¨gs
,"-passin"))

170 i‡(!
¨gs
[1]Ë
bad
;

171 
∑sßrgö
*(++
¨gs
);

173 i‡(!
	`°rcmp
(*
¨gs
,"-passout"))

175 i‡(!
¨gs
[1]Ë
bad
;

176 
∑sßrgout
*(++
¨gs
);

178 #i‚de‡
OPENSSL_NO_ENGINE


179 i‡(
	`°rcmp
(*
¨gs
,"-engine") == 0)

181 i‡(!
¨gs
[1]Ë
bad
;

182 
ígöe
*(++
¨gs
);

185 i‡(!
	`°rcmp
 (*
¨gs
, "-in"))

187 i‡(
¨gs
[1])

189 
¨gs
++;

190 
öfûe
 = *
¨gs
;

192 
bad¨g
 = 1;

194 i‡(!
	`°rcmp
 (*
¨gs
, "-out"))

196 i‡(
¨gs
[1])

198 
¨gs
++;

199 
outfûe
 = *
¨gs
;

201 
bad¨g
 = 1;

203 
bad¨g
 = 1;

204 
¨gs
++;

207 i‡(
bad¨g
)

209 
bad
:

210 
	`BIO_¥ötf
(
bio_îr
, "UsageÖkcs8 [options]\n");

211 
	`BIO_¥ötf
(
bio_îr
, "where optionsáre\n");

212 
	`BIO_¥ötf
(
bio_îr
, "-in file input file\n");

213 
	`BIO_¥ötf
(
bio_îr
, "-inform X input format (DER or PEM)\n");

214 
	`BIO_¥ötf
(
bio_îr
, "-passinárg input fileÖassÖhrase source\n");

215 
	`BIO_¥ötf
(
bio_îr
, "-outform X output format (DER or PEM)\n");

216 
	`BIO_¥ötf
(
bio_îr
, "-out file output file\n");

217 
	`BIO_¥ötf
(
bio_îr
, "-passoutárg output fileÖassÖhrase source\n");

218 
	`BIO_¥ötf
(
bio_îr
, "-topk8 output PKCS8 file\n");

219 
	`BIO_¥ötf
(
bio_îr
, "-nooct use (nonstandard)Ço octet format\n");

220 
	`BIO_¥ötf
(
bio_îr
, "-embed use (nonstandard)Émbedded DSAÖarameters format\n");

221 
	`BIO_¥ötf
(
bio_îr
, "-nsdb use (nonstandard) DSA Netscape DB format\n");

222 
	`BIO_¥ötf
(
bio_îr
, "-noiter use 1ás iteration count\n");

223 
	`BIO_¥ötf
(
bio_îr
, "-nocrypt use orÉxpect unencryptedÖrivate key\n");

224 
	`BIO_¥ötf
(
bio_îr
, "-v2álg use PKCS#5 v2.0ánd cipher \"alg\"\n");

225 
	`BIO_¥ötf
(
bio_îr
, "-v1 obj use PKCS#5 v1.5ánd cipher \"alg\"\n");

226 #i‚de‡
OPENSSL_NO_ENGINE


227 
	`BIO_¥ötf
(
bio_îr
," -engineÉ useÉngineÉ,Öossiblyá hardware device.\n");

229 
íd
;

232 #i‚de‡
OPENSSL_NO_ENGINE


233 
e
 = 
	`£tup_ígöe
(
bio_îr
, 
ígöe
, 0);

236 i‡(!
	`≠p_∑sswd
(
bio_îr
, 
∑sßrgö
, 
∑sßrgout
, &
∑ssö
, &
∑ssout
))

238 
	`BIO_¥ötf
(
bio_îr
, "Error gettingÖasswords\n");

239 
íd
;

242 i‡((
pbe_nid
 =-1Ë&& !
cùhî
)

243 
pbe_nid
 = 
NID_pbeWôhMD5AndDES_CBC
;

245 i‡(
öfûe
)

247 i‡(!(
ö
 = 
	`BIO_√w_fûe
(
öfûe
, "rb")))

249 
	`BIO_¥ötf
(
bio_îr
,

250 "C™'à›í i≈uàfûê%s\n", 
öfûe
);

251 
íd
;

255 
ö
 = 
	`BIO_√w_Â
 (
°dö
, 
BIO_NOCLOSE
);

257 i‡(
outfûe
)

259 i‡(!(
out
 = 
	`BIO_√w_fûe
 (
outfûe
, "wb")))

261 
	`BIO_¥ötf
(
bio_îr
,

262 "C™'à›í ouçuàfûê%s\n", 
outfûe
);

263 
íd
;

268 
out
 = 
	`BIO_√w_Â
 (
°dout
, 
BIO_NOCLOSE
);

269 #ifde‡
OPENSSL_SYS_VMS


271 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

272 
out
 = 
	`BIO_push
(
tmpbio
, out);

276 i‡(
t›k8
)

278 
pkey
 = 
	`lﬂd_key
(
bio_îr
, 
öfûe
, 
öf‹m©
, 1,

279 
∑ssö
, 
e
, "key");

280 i‡(!
pkey
)

281 
íd
;

282 i‡(!(
p8öf
 = 
	`EVP_PKEY2PKCS8_brokí
(
pkey
, 
p8_brokí
)))

284 
	`BIO_¥ötf
(
bio_îr
, "Error converting key\n");

285 
	`ERR_¥öt_îr‹s
(
bio_îr
);

286 
íd
;

288 i‡(
no¸y±
)

290 i‡(
outf‹m©
 =
FORMAT_PEM
)

291 
	`PEM_wrôe_bio_PKCS8_PRIV_KEY_INFO
(
out
, 
p8öf
);

292 i‡(
outf‹m©
 =
FORMAT_ASN1
)

293 
	`i2d_PKCS8_PRIV_KEY_INFO_bio
(
out
, 
p8öf
);

296 
	`BIO_¥ötf
(
bio_îr
, "Bad format specified for key\n");

297 
íd
;

302 i‡(
∑ssout
)

303 
p8∑ss
 = 
∑ssout
;

306 
p8∑ss
 = 
∑ss
;

307 i‡(
	`EVP_ªad_pw_°rög
(
∑ss
, Öass, "Enter Encryption Password:", 1))

308 
íd
;

310 
	`≠p_RAND_lﬂd_fûe
(
NULL
, 
bio_îr
, 0);

311 i‡(!(
p8
 = 
	`PKCS8_í¸y±
(
pbe_nid
, 
cùhî
,

312 
p8∑ss
, 
	`°æí
(p8pass),

313 
NULL
, 0, 
ôî
, 
p8öf
)))

315 
	`BIO_¥ötf
(
bio_îr
, "ErrorÉncrypting key\n");

316 
	`ERR_¥öt_îr‹s
(
bio_îr
);

317 
íd
;

319 
	`≠p_RAND_wrôe_fûe
(
NULL
, 
bio_îr
);

320 i‡(
outf‹m©
 =
FORMAT_PEM
)

321 
	`PEM_wrôe_bio_PKCS8
(
out
, 
p8
);

322 i‡(
outf‹m©
 =
FORMAT_ASN1
)

323 
	`i2d_PKCS8_bio
(
out
, 
p8
);

326 
	`BIO_¥ötf
(
bio_îr
, "Bad format specified for key\n");

327 
íd
;

331 
ªt
 = 0;

332 
íd
;

335 i‡(
no¸y±
)

337 i‡(
öf‹m©
 =
FORMAT_PEM
)

338 
p8öf
 = 
	`PEM_ªad_bio_PKCS8_PRIV_KEY_INFO
(
ö
,
NULL
,NULL, NULL);

339 i‡(
öf‹m©
 =
FORMAT_ASN1
)

340 
p8öf
 = 
	`d2i_PKCS8_PRIV_KEY_INFO_bio
(
ö
, 
NULL
);

343 
	`BIO_¥ötf
(
bio_îr
, "Bad format specified for key\n");

344 
íd
;

349 i‡(
öf‹m©
 =
FORMAT_PEM
)

350 
p8
 = 
	`PEM_ªad_bio_PKCS8
(
ö
, 
NULL
, NULL, NULL);

351 i‡(
öf‹m©
 =
FORMAT_ASN1
)

352 
p8
 = 
	`d2i_PKCS8_bio
(
ö
, 
NULL
);

355 
	`BIO_¥ötf
(
bio_îr
, "Bad format specified for key\n");

356 
íd
;

359 i‡(!
p8
)

361 
	`BIO_¥ötf
 (
bio_îr
, "ErrorÑeading key\n");

362 
	`ERR_¥öt_îr‹s
(
bio_îr
);

363 
íd
;

365 i‡(
∑ssö
)

366 
p8∑ss
 = 
∑ssö
;

369 
p8∑ss
 = 
∑ss
;

370 
	`EVP_ªad_pw_°rög
(
∑ss
, Öass, "Enter Password:", 0);

372 
p8öf
 = 
	`PKCS8_de¸y±
(
p8
, 
p8∑ss
, 
	`°æí
(p8pass));

375 i‡(!
p8öf
)

377 
	`BIO_¥ötf
(
bio_îr
, "Error decrypting key\n");

378 
	`ERR_¥öt_îr‹s
(
bio_îr
);

379 
íd
;

382 i‡(!(
pkey
 = 
	`EVP_PKCS82PKEY
(
p8öf
)))

384 
	`BIO_¥ötf
(
bio_îr
, "Error converting key\n");

385 
	`ERR_¥öt_îr‹s
(
bio_îr
);

386 
íd
;

389 i‡(
p8öf
->
brokí
)

391 
	`BIO_¥ötf
(
bio_îr
, "Warning: broken keyÉncoding: ");

392 
p8öf
->
brokí
)

394 
PKCS8_NO_OCTET
:

395 
	`BIO_¥ötf
(
bio_îr
, "No Octet String in PrivateKey\n");

398 
PKCS8_EMBEDDED_PARAM
:

399 
	`BIO_¥ötf
(
bio_îr
, "DSAÖarameters included in PrivateKey\n");

402 
PKCS8_NS_DB
:

403 
	`BIO_¥ötf
(
bio_îr
, "DSAÖublic key include in PrivateKey\n");

406 
PKCS8_NEG_PRIVKEY
:

407 
	`BIO_¥ötf
(
bio_îr
, "DSAÖrivate key value isÇegative\n");

411 
	`BIO_¥ötf
(
bio_îr
, "Unknown brokenÅype\n");

416 i‡(
outf‹m©
 =
FORMAT_PEM
)

417 
	`PEM_wrôe_bio_Priv©eKey
(
out
, 
pkey
, 
NULL
, NULL, 0, NULL, 
∑ssout
);

418 i‡(
outf‹m©
 =
FORMAT_ASN1
)

419 
	`i2d_Priv©eKey_bio
(
out
, 
pkey
);

422 
	`BIO_¥ötf
(
bio_îr
, "Bad format specified for key\n");

423 
íd
;

425 
ªt
 = 0;

427 
íd
:

428 
	`X509_SIG_‰ì
(
p8
);

429 
	`PKCS8_PRIV_KEY_INFO_‰ì
(
p8öf
);

430 
	`EVP_PKEY_‰ì
(
pkey
);

431 
	`BIO_‰ì_Æl
(
out
);

432 
	`BIO_‰ì
(
ö
);

433 i‡(
∑ssö
)

434 
	`OPENSSL_‰ì
(
∑ssö
);

435 i‡(
∑ssout
)

436 
	`OPENSSL_‰ì
(
∑ssout
);

438  
ªt
;

439 
	}
}

	@pkey.c

58 
	~<°dio.h
>

59 
	~<°rög.h
>

60 
	~"≠ps.h
"

61 
	~<›ís¶/≥m.h
>

62 
	~<›ís¶/îr.h
>

63 
	~<›ís¶/evp.h
>

65 
	#PROG
 
pkey_maö


	)

67 
MAIN
(, **);

69 
	$MAIN
(
¨gc
, **
¨gv
)

71 
ENGINE
 *
e
 = 
NULL
;

72 **
¨gs
, *
öfûe
 = 
NULL
, *
outfûe
 = NULL;

73 *
∑sßrgö
 = 
NULL
, *
∑sßrgout
 = NULL;

74 
BIO
 *
ö
 = 
NULL
, *
out
 = NULL;

75 c⁄° 
EVP_CIPHER
 *
cùhî
 = 
NULL
;

76 
öf‹m©
, 
outf‹m©
;

77 
pubö
 = 0, 
pubout
 = 0, 
pubãxt
 = 0, 
ãxt
 = 0, 
noout
 = 0;

78 
EVP_PKEY
 *
pkey
=
NULL
;

79 *
∑ssö
 = 
NULL
, *
∑ssout
 = NULL;

80 
bad¨g
 = 0;

81 #i‚de‡
OPENSSL_NO_ENGINE


82 *
ígöe
=
NULL
;

84 
ªt
 = 1;

86 i‡(
bio_îr
 =
NULL
)

87 
bio_îr
 = 
	`BIO_√w_Â
 (
°dîr
, 
BIO_NOCLOSE
);

89 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

90 
íd
;

92 
öf‹m©
=
FORMAT_PEM
;

93 
outf‹m©
=
FORMAT_PEM
;

95 
	`ERR_lﬂd_¸y±o_°rögs
();

96 
	`O≥nSSL_add_Æl_Æg‹ôhms
();

97 
¨gs
 = 
¨gv
 + 1;

98 !
bad¨g
 && *
¨gs
 && *args[0] == '-')

100 i‡(!
	`°rcmp
(*
¨gs
,"-inform"))

102 i‡(
¨gs
[1])

104 
¨gs
++;

105 
öf‹m©
=
	`°r2fmt
(*
¨gs
);

107 
bad¨g
 = 1;

109 i‡(!
	`°rcmp
(*
¨gs
,"-outform"))

111 i‡(
¨gs
[1])

113 
¨gs
++;

114 
outf‹m©
=
	`°r2fmt
(*
¨gs
);

116 
bad¨g
 = 1;

118 i‡(!
	`°rcmp
(*
¨gs
,"-passin"))

120 i‡(!
¨gs
[1]Ë
bad
;

121 
∑sßrgö
*(++
¨gs
);

123 i‡(!
	`°rcmp
(*
¨gs
,"-passout"))

125 i‡(!
¨gs
[1]Ë
bad
;

126 
∑sßrgout
*(++
¨gs
);

128 #i‚de‡
OPENSSL_NO_ENGINE


129 i‡(
	`°rcmp
(*
¨gs
,"-engine") == 0)

131 i‡(!
¨gs
[1]Ë
bad
;

132 
ígöe
*(++
¨gs
);

135 i‡(!
	`°rcmp
 (*
¨gs
, "-in"))

137 i‡(
¨gs
[1])

139 
¨gs
++;

140 
öfûe
 = *
¨gs
;

142 
bad¨g
 = 1;

144 i‡(!
	`°rcmp
 (*
¨gs
, "-out"))

146 i‡(
¨gs
[1])

148 
¨gs
++;

149 
outfûe
 = *
¨gs
;

151 
bad¨g
 = 1;

153 i‡(
	`°rcmp
(*
¨gs
,"-pubin") == 0)

155 
pubö
=1;

156 
pubout
=1;

157 
pubãxt
=1;

159 i‡(
	`°rcmp
(*
¨gs
,"-pubout") == 0)

160 
pubout
=1;

161 i‡(
	`°rcmp
(*
¨gs
,"-text_pub") == 0)

163 
pubãxt
=1;

164 
ãxt
=1;

166 i‡(
	`°rcmp
(*
¨gs
,"-text") == 0)

167 
ãxt
=1;

168 i‡(
	`°rcmp
(*
¨gs
,"-noout") == 0)

169 
noout
=1;

172 
cùhî
 = 
	`EVP_gë_cùhîby«me
(*
¨gs
 + 1);

173 i‡(!
cùhî
)

175 
	`BIO_¥ötf
(
bio_îr
, "Unknown cipher %s\n",

176 *
¨gs
 + 1);

177 
bad¨g
 = 1;

180 
¨gs
++;

183 i‡(
bad¨g
)

185 
bad
:

186 
	`BIO_¥ötf
(
bio_îr
, "UsageÖkey [options]\n");

187 
	`BIO_¥ötf
(
bio_îr
, "where optionsáre\n");

188 
	`BIO_¥ötf
(
bio_îr
, "-in file input file\n");

189 
	`BIO_¥ötf
(
bio_îr
, "-inform X input format (DER or PEM)\n");

190 
	`BIO_¥ötf
(
bio_îr
, "-passinárg input fileÖassÖhrase source\n");

191 
	`BIO_¥ötf
(
bio_îr
, "-outform X output format (DER or PEM)\n");

192 
	`BIO_¥ötf
(
bio_îr
, "-out file output file\n");

193 
	`BIO_¥ötf
(
bio_îr
, "-passoutárg output fileÖassÖhrase source\n");

194 #i‚de‡
OPENSSL_NO_ENGINE


195 
	`BIO_¥ötf
(
bio_îr
, "-engineÉ useÉngineÉ,Öossiblyá hardware device.\n");

200 #i‚de‡
OPENSSL_NO_ENGINE


201 
e
 = 
	`£tup_ígöe
(
bio_îr
, 
ígöe
, 0);

204 i‡(!
	`≠p_∑sswd
(
bio_îr
, 
∑sßrgö
, 
∑sßrgout
, &
∑ssö
, &
∑ssout
))

206 
	`BIO_¥ötf
(
bio_îr
, "Error gettingÖasswords\n");

207 
íd
;

210 i‡(
outfûe
)

212 i‡(!(
out
 = 
	`BIO_√w_fûe
 (
outfûe
, "wb")))

214 
	`BIO_¥ötf
(
bio_îr
,

215 "C™'à›í ouçuàfûê%s\n", 
outfûe
);

216 
íd
;

221 
out
 = 
	`BIO_√w_Â
 (
°dout
, 
BIO_NOCLOSE
);

222 #ifde‡
OPENSSL_SYS_VMS


224 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

225 
out
 = 
	`BIO_push
(
tmpbio
, out);

230 i‡(
pubö
)

231 
pkey
 = 
	`lﬂd_pubkey
(
bio_îr
, 
öfûe
, 
öf‹m©
, 1,

232 
∑ssö
, 
e
, "Public Key");

234 
pkey
 = 
	`lﬂd_key
(
bio_îr
, 
öfûe
, 
öf‹m©
, 1,

235 
∑ssö
, 
e
, "key");

236 i‡(!
pkey
)

237 
íd
;

239 i‡(!
noout
)

241 i‡(
outf‹m©
 =
FORMAT_PEM
)

243 i‡(
pubout
)

244 
	`PEM_wrôe_bio_PUBKEY
(
out
,
pkey
);

246 
	`PEM_wrôe_bio_Priv©eKey
(
out
, 
pkey
, 
cùhî
,

247 
NULL
, 0, NULL, 
∑ssout
);

249 i‡(
outf‹m©
 =
FORMAT_ASN1
)

251 i‡(
pubout
)

252 
	`i2d_PUBKEY_bio
(
out
, 
pkey
);

254 
	`i2d_Priv©eKey_bio
(
out
, 
pkey
);

258 
	`BIO_¥ötf
(
bio_îr
, "Bad format specified for key\n");

259 
íd
;

264 i‡(
ãxt
)

266 i‡(
pubãxt
)

267 
	`EVP_PKEY_¥öt_public
(
out
, 
pkey
, 0, 
NULL
);

269 
	`EVP_PKEY_¥öt_¥iv©e
(
out
, 
pkey
, 0, 
NULL
);

272 
ªt
 = 0;

274 
íd
:

275 
	`EVP_PKEY_‰ì
(
pkey
);

276 
	`BIO_‰ì_Æl
(
out
);

277 
	`BIO_‰ì
(
ö
);

278 i‡(
∑ssö
)

279 
	`OPENSSL_‰ì
(
∑ssö
);

280 i‡(
∑ssout
)

281 
	`OPENSSL_‰ì
(
∑ssout
);

283  
ªt
;

284 
	}
}

	@pkeyparam.c

58 
	~<°dio.h
>

59 
	~<°rög.h
>

60 
	~"≠ps.h
"

61 
	~<›ís¶/≥m.h
>

62 
	~<›ís¶/îr.h
>

63 
	~<›ís¶/evp.h
>

65 
	#PROG
 
pkey∑øm_maö


	)

67 
MAIN
(, **);

69 
	$MAIN
(
¨gc
, **
¨gv
)

71 **
¨gs
, *
öfûe
 = 
NULL
, *
outfûe
 = NULL;

72 
BIO
 *
ö
 = 
NULL
, *
out
 = NULL;

73 
ãxt
 = 0, 
noout
 = 0;

74 
EVP_PKEY
 *
pkey
=
NULL
;

75 
bad¨g
 = 0;

76 #i‚de‡
OPENSSL_NO_ENGINE


77 *
ígöe
=
NULL
;

79 
ªt
 = 1;

81 i‡(
bio_îr
 =
NULL
)

82 
bio_îr
 = 
	`BIO_√w_Â
 (
°dîr
, 
BIO_NOCLOSE
);

84 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

85 
íd
;

87 
	`ERR_lﬂd_¸y±o_°rögs
();

88 
	`O≥nSSL_add_Æl_Æg‹ôhms
();

89 
¨gs
 = 
¨gv
 + 1;

90 !
bad¨g
 && *
¨gs
 && *args[0] == '-')

92 i‡(!
	`°rcmp
 (*
¨gs
, "-in"))

94 i‡(
¨gs
[1])

96 
¨gs
++;

97 
öfûe
 = *
¨gs
;

99 
bad¨g
 = 1;

101 i‡(!
	`°rcmp
 (*
¨gs
, "-out"))

103 i‡(
¨gs
[1])

105 
¨gs
++;

106 
outfûe
 = *
¨gs
;

108 
bad¨g
 = 1;

110 #i‚de‡
OPENSSL_NO_ENGINE


111 i‡(
	`°rcmp
(*
¨gs
,"-engine") == 0)

113 i‡(!
¨gs
[1]Ë
bad
;

114 
ígöe
*(++
¨gs
);

118 i‡(
	`°rcmp
(*
¨gs
,"-text") == 0)

119 
ãxt
=1;

120 i‡(
	`°rcmp
(*
¨gs
,"-noout") == 0)

121 
noout
=1;

122 
¨gs
++;

125 i‡(
bad¨g
)

127 #i‚de‡
OPENSSL_NO_ENGINE


128 
bad
:

130 
	`BIO_¥ötf
(
bio_îr
, "UsageÖkeyparam [options]\n");

131 
	`BIO_¥ötf
(
bio_îr
, "where optionsáre\n");

132 
	`BIO_¥ötf
(
bio_îr
, "-in file input file\n");

133 
	`BIO_¥ötf
(
bio_îr
, "-out file output file\n");

134 
	`BIO_¥ötf
(
bio_îr
, "-textÖrintÖarametersásÅext\n");

135 
	`BIO_¥ötf
(
bio_îr
, "-noout don't outputÉncodedÖarameters\n");

136 #i‚de‡
OPENSSL_NO_ENGINE


137 
	`BIO_¥ötf
(
bio_îr
, "-engineÉ useÉngineÉ,Öossiblyá hardware device.\n");

142 #i‚de‡
OPENSSL_NO_ENGINE


143 
	`£tup_ígöe
(
bio_îr
, 
ígöe
, 0);

146 i‡(
öfûe
)

148 i‡(!(
ö
 = 
	`BIO_√w_fûe
 (
öfûe
, "r")))

150 
	`BIO_¥ötf
(
bio_îr
,

151 "C™'à›í i≈uàfûê%s\n", 
öfûe
);

152 
íd
;

156 
ö
 = 
	`BIO_√w_Â
 (
°dö
, 
BIO_NOCLOSE
);

158 i‡(
outfûe
)

160 i‡(!(
out
 = 
	`BIO_√w_fûe
 (
outfûe
, "w")))

162 
	`BIO_¥ötf
(
bio_îr
,

163 "C™'à›í ouçuàfûê%s\n", 
outfûe
);

164 
íd
;

169 
out
 = 
	`BIO_√w_Â
 (
°dout
, 
BIO_NOCLOSE
);

170 #ifde‡
OPENSSL_SYS_VMS


172 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

173 
out
 = 
	`BIO_push
(
tmpbio
, out);

178 
pkey
 = 
	`PEM_ªad_bio_P¨amëîs
(
ö
, 
NULL
);

179 i‡(!
pkey
)

181 
	`BIO_¥ötf
(
bio_îr
, "ErrorÑeadingÖarameters\n");

182 
	`ERR_¥öt_îr‹s
(
bio_îr
);

183 
íd
;

186 i‡(!
noout
)

187 
	`PEM_wrôe_bio_P¨amëîs
(
out
,
pkey
);

189 i‡(
ãxt
)

190 
	`EVP_PKEY_¥öt_∑øms
(
out
, 
pkey
, 0, 
NULL
);

192 
ªt
 = 0;

194 
íd
:

195 
	`EVP_PKEY_‰ì
(
pkey
);

196 
	`BIO_‰ì_Æl
(
out
);

197 
	`BIO_‰ì
(
ö
);

199  
ªt
;

200 
	}
}

	@pkeyutl.c

59 
	~"≠ps.h
"

60 
	~<°rög.h
>

61 
	~<›ís¶/îr.h
>

62 
	~<›ís¶/≥m.h
>

63 
	~<›ís¶/evp.h
>

65 
	#KEY_PRIVKEY
 1

	)

66 
	#KEY_PUBKEY
 2

	)

67 
	#KEY_CERT
 3

	)

69 
ußge
();

71 #unde‡
PROG


73 
	#PROG
 
pkeyué_maö


	)

75 
EVP_PKEY_CTX
 *
öô_˘x
(*
pkeysize
,

76 *
keyfûe
, 
keyf‹m
, 
key_ty≥
,

77 *
∑sßrgö
, 
pkey_›
, 
ENGINE
 *
e
);

79 
£tup_≥î
(
BIO
 *
îr
, 
EVP_PKEY_CTX
 *
˘x
, 
≥îf‹m
,

80 c⁄° *
fûe
);

82 
do_key›
(
EVP_PKEY_CTX
 *
˘x
, 
pkey_›
,

83 *
out
, 
size_t
 *
pouéí
,

84 *
ö
, 
size_t
 
öÀn
);

86 
MAIN
(
¨gc
, **);

88 
	$MAIN
(
¨gc
, **
¨gv
)

90 
BIO
 *
ö
 = 
NULL
, *
out
 = NULL;

91 *
öfûe
 = 
NULL
, *
outfûe
 = NULL, *
sigfûe
 = NULL;

92 
ENGINE
 *
e
 = 
NULL
;

93 
pkey_›
 = 
EVP_PKEY_OP_SIGN
, 
key_ty≥
 = 
KEY_PRIVKEY
;

94 
keyf‹m
 = 
FORMAT_PEM
, 
≥îf‹m
 = FORMAT_PEM;

95 
bad¨g
 = 0, 
ªv
 = 0;

96 
hexdump
 = 0, 
a¢1∑r£
 = 0;

97 
EVP_PKEY_CTX
 *
˘x
 = 
NULL
;

98 *
∑sßrgö
 = 
NULL
;

99 
keysize
 = -1;

101 *
buf_ö
 = 
NULL
, *
buf_out
 = NULL, *
sig
 = NULL;

102 
size_t
 
buf_ouéí
;

103 
buf_öÀn
 = 0, 
sigÀn
 = -1;

105 
ªt
 = 1, 
rv
 = -1;

107 
¨gc
--;

108 
¨gv
++;

110 if(!
bio_îr
Ëbio_î∏
	`BIO_√w_Â
(
°dîr
, 
BIO_NOCLOSE
);

112 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

113 
íd
;

114 
	`ERR_lﬂd_¸y±o_°rögs
();

115 
	`O≥nSSL_add_Æl_Æg‹ôhms
();

117 
¨gc
 >= 1)

119 i‡(!
	`°rcmp
(*
¨gv
,"-in"))

121 i‡(--
¨gc
 < 1Ë
bad¨g
 = 1;

122 
öfûe
*(++
¨gv
);

124 i‡(!
	`°rcmp
(*
¨gv
,"-out"))

126 i‡(--
¨gc
 < 1Ë
bad¨g
 = 1;

127 
outfûe
*(++
¨gv
);

129 i‡(!
	`°rcmp
(*
¨gv
,"-sigfile"))

131 i‡(--
¨gc
 < 1Ë
bad¨g
 = 1;

132 
sigfûe
*(++
¨gv
);

134 if(!
	`°rcmp
(*
¨gv
, "-inkey"))

136 i‡(--
¨gc
 < 1)

137 
bad¨g
 = 1;

140 
˘x
 = 
	`öô_˘x
(&
keysize
,

141 *(++
¨gv
), 
keyf‹m
, 
key_ty≥
,

142 
∑sßrgö
, 
pkey_›
, 
e
);

143 i‡(!
˘x
)

145 
	`BIO_puts
(
bio_îr
,

147 
	`ERR_¥öt_îr‹s
(
bio_îr
);

148 
bad¨g
 = 1;

152 i‡(!
	`°rcmp
(*
¨gv
,"-peerkey"))

154 i‡(--
¨gc
 < 1)

155 
bad¨g
 = 1;

156 i‡(!
	`£tup_≥î
(
bio_îr
, 
˘x
, 
≥îf‹m
, *(++
¨gv
)))

157 
bad¨g
 = 1;

159 i‡(!
	`°rcmp
(*
¨gv
,"-passin"))

161 i‡(--
¨gc
 < 1Ë
bad¨g
 = 1;

162 
∑sßrgö
*(++
¨gv
);

164 i‡(
	`°rcmp
(*
¨gv
,"-peerform") == 0)

166 i‡(--
¨gc
 < 1Ë
bad¨g
 = 1;

167 
≥îf‹m
=
	`°r2fmt
(*(++
¨gv
));

169 i‡(
	`°rcmp
(*
¨gv
,"-keyform") == 0)

171 i‡(--
¨gc
 < 1Ë
bad¨g
 = 1;

172 
keyf‹m
=
	`°r2fmt
(*(++
¨gv
));

174 #i‚de‡
OPENSSL_NO_ENGINE


175 if(!
	`°rcmp
(*
¨gv
, "-engine"))

177 i‡(--
¨gc
 < 1)

178 
bad¨g
 = 1;

180 
e
 = 
	`£tup_ígöe
(
bio_îr
, *(++
¨gv
), 0);

183 if(!
	`°rcmp
(*
¨gv
, "-pubin"))

184 
key_ty≥
 = 
KEY_PUBKEY
;

185 if(!
	`°rcmp
(*
¨gv
, "-certin"))

186 
key_ty≥
 = 
KEY_CERT
;

187 if(!
	`°rcmp
(*
¨gv
, "-asn1parse"))

188 
a¢1∑r£
 = 1;

189 if(!
	`°rcmp
(*
¨gv
, "-hexdump"))

190 
hexdump
 = 1;

191 if(!
	`°rcmp
(*
¨gv
, "-sign"))

192 
pkey_›
 = 
EVP_PKEY_OP_SIGN
;

193 if(!
	`°rcmp
(*
¨gv
, "-verify"))

194 
pkey_›
 = 
EVP_PKEY_OP_VERIFY
;

195 if(!
	`°rcmp
(*
¨gv
, "-verifyrecover"))

196 
pkey_›
 = 
EVP_PKEY_OP_VERIFYRECOVER
;

197 if(!
	`°rcmp
(*
¨gv
, "-rev"))

198 
ªv
 = 1;

199 if(!
	`°rcmp
(*
¨gv
, "-encrypt"))

200 
pkey_›
 = 
EVP_PKEY_OP_ENCRYPT
;

201 if(!
	`°rcmp
(*
¨gv
, "-decrypt"))

202 
pkey_›
 = 
EVP_PKEY_OP_DECRYPT
;

203 if(!
	`°rcmp
(*
¨gv
, "-derive"))

204 
pkey_›
 = 
EVP_PKEY_OP_DERIVE
;

205 i‡(
	`°rcmp
(*
¨gv
,"-pkeyopt") == 0)

207 i‡(--
¨gc
 < 1)

208 
bad¨g
 = 1;

209 i‡(!
˘x
)

211 
	`BIO_puts
(
bio_îr
,

213 
bad¨g
 = 1;

215 i‡(
	`pkey_˘æ_°rög
(
˘x
, *(++
¨gv
)) <= 0)

217 
	`BIO_puts
(
bio_îr
, "parameter settingÉrror\n");

218 
	`ERR_¥öt_îr‹s
(
bio_îr
);

219 
íd
;

222 
bad¨g
 = 1;

223 if(
bad¨g
)

225 
	`ußge
();

226 
íd
;

228 
¨gc
--;

229 
¨gv
++;

232 i‡(!
˘x
)

234 
	`ußge
();

235 
íd
;

238 i‡(
sigfûe
 && (
pkey_›
 !
EVP_PKEY_OP_VERIFY
))

240 
	`BIO_puts
(
bio_îr
, "Signature file specified forÇon verify\n");

241 
íd
;

244 i‡(!
sigfûe
 && (
pkey_›
 =
EVP_PKEY_OP_VERIFY
))

246 
	`BIO_puts
(
bio_îr
, "No signature file specified for verify\n");

247 
íd
;

251 
	`≠p_RAND_lﬂd_fûe
(
NULL
, 
bio_îr
, 0);

253 i‡(
pkey_›
 !
EVP_PKEY_OP_DERIVE
)

255 if(
öfûe
)

257 if(!(
ö
 = 
	`BIO_√w_fûe
(
öfûe
, "rb")))

259 
	`BIO_puts
(
bio_îr
,

261 
	`ERR_¥öt_îr‹s
(
bio_îr
);

262 
íd
;

266 
ö
 = 
	`BIO_√w_Â
(
°dö
, 
BIO_NOCLOSE
);

269 if(
outfûe
)

271 if(!(
out
 = 
	`BIO_√w_fûe
(
outfûe
, "wb")))

273 
	`BIO_¥ötf
(
bio_îr
, "Error Creating Output File\n");

274 
	`ERR_¥öt_îr‹s
(
bio_îr
);

275 
íd
;

280 
out
 = 
	`BIO_√w_Â
(
°dout
, 
BIO_NOCLOSE
);

281 #ifde‡
OPENSSL_SYS_VMS


283 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

284 
out
 = 
	`BIO_push
(
tmpbio
, out);

289 i‡(
sigfûe
)

291 
BIO
 *
sigbio
 = 
	`BIO_√w_fûe
(
sigfûe
, "rb");

292 i‡(!
sigbio
)

294 
	`BIO_¥ötf
(
bio_îr
, "Can't open signature file %s\n",

295 
sigfûe
);

296 
íd
;

298 
sigÀn
 = 
	`bio_to_mem
(&
sig
, 
keysize
 * 10, 
sigbio
);

299 
	`BIO_‰ì
(
sigbio
);

300 i‡(
sigÀn
 <= 0)

302 
	`BIO_¥ötf
(
bio_îr
, "ErrorÑeading signature data\n");

303 
íd
;

307 i‡(
ö
)

310 
buf_öÀn
 = 
	`bio_to_mem
(&
buf_ö
, 
keysize
 * 10, 
ö
);

311 if(
buf_öÀn
 <= 0)

313 
	`BIO_¥ötf
(
bio_îr
, "ErrorÑeading input Data\n");

314 
	`exô
(1);

316 if(
ªv
)

318 
size_t
 
i
;

319 
˘mp
;

320 
size_t
 
l
 = (size_t)
buf_öÀn
;

321 
i
 = 0; i < 
l
/2; i++)

323 
˘mp
 = 
buf_ö
[
i
];

324 
buf_ö
[
i
] = buf_ö[
l
 - 1 - i];

325 
buf_ö
[
l
 - 1 - 
i
] = 
˘mp
;

330 if(
pkey_›
 =
EVP_PKEY_OP_VERIFY
)

332 
rv
 = 
	`EVP_PKEY_vîify
(
˘x
, 
sig
, (
size_t
)
sigÀn
,

333 
buf_ö
, (
size_t
)
buf_öÀn
);

334 i‡(
rv
 == 0)

335 
	`BIO_puts
(
out
, "Signature Verification Failure\n");

336 i‡(
rv
 == 1)

337 
	`BIO_puts
(
out
, "Signature Verified Successfully\n");

338 i‡(
rv
 >= 0)

339 
íd
;

343 
rv
 = 
	`do_key›
(
˘x
, 
pkey_›
, 
NULL
, (
size_t
 *)&
buf_ouéí
,

344 
buf_ö
, (
size_t
)
buf_öÀn
);

345 i‡(
rv
 > 0)

347 
buf_out
 = 
	`OPENSSL_mÆloc
(
buf_ouéí
);

348 i‡(!
buf_out
)

349 
rv
 = -1;

351 
rv
 = 
	`do_key›
(
˘x
, 
pkey_›
,

352 
buf_out
, (
size_t
 *)&
buf_ouéí
,

353 
buf_ö
, (
size_t
)
buf_öÀn
);

357 if(
rv
 <= 0)

359 
	`BIO_¥ötf
(
bio_îr
, "Public Key operationÉrror\n");

360 
	`ERR_¥öt_îr‹s
(
bio_îr
);

361 
íd
;

363 
ªt
 = 0;

364 if(
a¢1∑r£
)

366 if(!
	`ASN1_∑r£_dump
(
out
, 
buf_out
, 
buf_ouéí
, 1, -1))

367 
	`ERR_¥öt_îr‹s
(
bio_îr
);

369 if(
hexdump
)

370 
	`BIO_dump
(
out
, (*)
buf_out
, 
buf_ouéí
);

372 
	`BIO_wrôe
(
out
, 
buf_out
, 
buf_ouéí
);

374 
íd
:

375 i‡(
˘x
)

376 
	`EVP_PKEY_CTX_‰ì
(
˘x
);

377 
	`BIO_‰ì
(
ö
);

378 
	`BIO_‰ì_Æl
(
out
);

379 i‡(
buf_ö
)

380 
	`OPENSSL_‰ì
(
buf_ö
);

381 i‡(
buf_out
)

382 
	`OPENSSL_‰ì
(
buf_out
);

383 i‡(
sig
)

384 
	`OPENSSL_‰ì
(
sig
);

385  
ªt
;

386 
	}
}

388 
	$ußge
()

390 
	`BIO_¥ötf
(
bio_îr
, "Usage:Ökeyutl [options]\n");

391 
	`BIO_¥ötf
(
bio_îr
, "-in file input file\n");

392 
	`BIO_¥ötf
(
bio_îr
, "-out file output file\n");

393 
	`BIO_¥ötf
(
bio_îr
, "-sigfile file signature file (verify operation only)\n");

394 
	`BIO_¥ötf
(
bio_îr
, "-inkey file input key\n");

395 
	`BIO_¥ötf
(
bio_îr
, "-keyformárgÖrivate key format - default PEM\n");

396 
	`BIO_¥ötf
(
bio_îr
, "-pubin input isáÖublic key\n");

397 
	`BIO_¥ötf
(
bio_îr
, "-certin input isá certificate carryingáÖublic key\n");

398 
	`BIO_¥ötf
(
bio_îr
, "-pkeyopt X:YÖublic key options\n");

399 
	`BIO_¥ötf
(
bio_îr
, "-sign sign withÖrivate key\n");

400 
	`BIO_¥ötf
(
bio_îr
, "-verify verify withÖublic key\n");

401 
	`BIO_¥ötf
(
bio_îr
, "-verifyrecover verify withÖublic key,Ñecover original data\n");

402 
	`BIO_¥ötf
(
bio_îr
, "-encryptÉncrypt withÖublic key\n");

403 
	`BIO_¥ötf
(
bio_îr
, "-decrypt decrypt withÖrivate key\n");

404 
	`BIO_¥ötf
(
bio_îr
, "-derive derive shared secret\n");

405 
	`BIO_¥ötf
(
bio_îr
, "-hexdump hex dump output\n");

406 #i‚de‡
OPENSSL_NO_ENGINE


407 
	`BIO_¥ötf
(
bio_îr
, "-engineÉ useÉngineÉ,Öossiblyá hardware device.\n");

409 
	`BIO_¥ötf
(
bio_îr
, "-passinárgÖassÖhrase source\n");

411 
	}
}

413 
EVP_PKEY_CTX
 *
	$öô_˘x
(*
pkeysize
,

414 *
keyfûe
, 
keyf‹m
, 
key_ty≥
,

415 *
∑sßrgö
, 
pkey_›
, 
ENGINE
 *
e
)

417 
EVP_PKEY
 *
pkey
 = 
NULL
;

418 
EVP_PKEY_CTX
 *
˘x
 = 
NULL
;

419 *
∑ssö
 = 
NULL
;

420 
rv
 = -1;

421 
X509
 *
x
;

422 if(((
pkey_›
 =
EVP_PKEY_OP_SIGN
Ë|| (pkey_› =
EVP_PKEY_OP_DECRYPT
)

423 || (
pkey_›
 =
EVP_PKEY_OP_DERIVE
))

424 && (
key_ty≥
 !
KEY_PRIVKEY
))

426 
	`BIO_¥ötf
(
bio_îr
, "AÖrivate key isÇeeded forÅhis operation\n");

427 
íd
;

429 if(!
	`≠p_∑sswd
(
bio_îr
, 
∑sßrgö
, 
NULL
, &
∑ssö
, NULL))

431 
	`BIO_¥ötf
(
bio_îr
, "Error gettingÖassword\n");

432 
íd
;

434 
key_ty≥
)

436 
KEY_PRIVKEY
:

437 
pkey
 = 
	`lﬂd_key
(
bio_îr
, 
keyfûe
, 
keyf‹m
, 0,

438 
∑ssö
, 
e
, "Private Key");

441 
KEY_PUBKEY
:

442 
pkey
 = 
	`lﬂd_pubkey
(
bio_îr
, 
keyfûe
, 
keyf‹m
, 0,

443 
NULL
, 
e
, "Public Key");

446 
KEY_CERT
:

447 
x
 = 
	`lﬂd_˚π
(
bio_îr
, 
keyfûe
, 
keyf‹m
,

448 
NULL
, 
e
, "Certificate");

449 if(
x
)

451 
pkey
 = 
	`X509_gë_pubkey
(
x
);

452 
	`X509_‰ì
(
x
);

458 *
pkeysize
 = 
	`EVP_PKEY_size
(
pkey
);

460 i‡(!
pkey
)

461 
íd
;

463 
˘x
 = 
	`EVP_PKEY_CTX_√w
(
pkey
, 
e
);

465 
	`EVP_PKEY_‰ì
(
pkey
);

467 i‡(!
˘x
)

468 
íd
;

470 
pkey_›
)

472 
EVP_PKEY_OP_SIGN
:

473 
rv
 = 
	`EVP_PKEY_sign_öô
(
˘x
);

476 
EVP_PKEY_OP_VERIFY
:

477 
rv
 = 
	`EVP_PKEY_vîify_öô
(
˘x
);

480 
EVP_PKEY_OP_VERIFYRECOVER
:

481 
rv
 = 
	`EVP_PKEY_vîify_ªcovî_öô
(
˘x
);

484 
EVP_PKEY_OP_ENCRYPT
:

485 
rv
 = 
	`EVP_PKEY_í¸y±_öô
(
˘x
);

488 
EVP_PKEY_OP_DECRYPT
:

489 
rv
 = 
	`EVP_PKEY_de¸y±_öô
(
˘x
);

492 
EVP_PKEY_OP_DERIVE
:

493 
rv
 = 
	`EVP_PKEY_dîive_öô
(
˘x
);

497 i‡(
rv
 <= 0)

499 
	`EVP_PKEY_CTX_‰ì
(
˘x
);

500 
˘x
 = 
NULL
;

503 
íd
:

505 i‡(
∑ssö
)

506 
	`OPENSSL_‰ì
(
∑ssö
);

508  
˘x
;

511 
	}
}

513 
	$£tup_≥î
(
BIO
 *
îr
, 
EVP_PKEY_CTX
 *
˘x
, 
≥îf‹m
,

514 c⁄° *
fûe
)

516 
EVP_PKEY
 *
≥î
 = 
NULL
;

517 
ªt
;

518 i‡(!
˘x
)

520 
	`BIO_puts
(
îr
, "-peerkey command before -inkey\n");

524 
≥î
 = 
	`lﬂd_pubkey
(
bio_îr
, 
fûe
, 
≥îf‹m
, 0, 
NULL
, NULL, "Peer Key");

526 i‡(!
≥î
)

528 
	`BIO_¥ötf
(
bio_îr
, "Eº‹ÑódögÖì∏key %s\n", 
fûe
);

529 
	`ERR_¥öt_îr‹s
(
îr
);

533 
ªt
 = 
	`EVP_PKEY_dîive_£t_≥î
(
˘x
, 
≥î
);

535 
	`EVP_PKEY_‰ì
(
≥î
);

536 i‡(
ªt
 <= 0)

537 
	`ERR_¥öt_îr‹s
(
îr
);

538  
ªt
;

539 
	}
}

541 
	$do_key›
(
EVP_PKEY_CTX
 *
˘x
, 
pkey_›
,

542 *
out
, 
size_t
 *
pouéí
,

543 *
ö
, 
size_t
 
öÀn
)

545 
rv
 = 0;

546 
pkey_›
)

548 
EVP_PKEY_OP_VERIFYRECOVER
:

549 
rv
 = 
	`EVP_PKEY_vîify_ªcovî
(
˘x
, 
out
, 
pouéí
, 
ö
, 
öÀn
);

552 
EVP_PKEY_OP_SIGN
:

553 
rv
 = 
	`EVP_PKEY_sign
(
˘x
, 
out
, 
pouéí
, 
ö
, 
öÀn
);

556 
EVP_PKEY_OP_ENCRYPT
:

557 
rv
 = 
	`EVP_PKEY_í¸y±
(
˘x
, 
out
, 
pouéí
, 
ö
, 
öÀn
);

560 
EVP_PKEY_OP_DECRYPT
:

561 
rv
 = 
	`EVP_PKEY_de¸y±
(
˘x
, 
out
, 
pouéí
, 
ö
, 
öÀn
);

564 
EVP_PKEY_OP_DERIVE
:

565 
rv
 = 
	`EVP_PKEY_dîive
(
˘x
, 
out
, 
pouéí
);

569  
rv
;

570 
	}
}

	@prime.c

50 
	~<°rög.h
>

52 
	~"≠ps.h
"

53 
	~<›ís¶/bn.h
>

56 #unde‡
PROG


57 
	#PROG
 
¥ime_maö


	)

59 
MAIN
(, **);

61 
	$MAIN
(
¨gc
, **
¨gv
)

63 
hex
=0;

64 
checks
=20;

65 
gíî©e
=0;

66 
bôs
=0;

67 
ß„
=0;

68 
BIGNUM
 *
bn
=
NULL
;

69 
BIO
 *
bio_out
;

71 
	`≠ps_°¨tup
();

73 i‡(
bio_îr
 =
NULL
)

74 i‡((
bio_îr
=
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

75 
	`BIO_£t_Â
(
bio_îr
,
°dîr
,
BIO_NOCLOSE
|
BIO_FP_TEXT
);

77 --
¨gc
;

78 ++
¨gv
;

79 
¨gc
 >1 && **
¨gv
 == '-')

81 if(!
	`°rcmp
(*
¨gv
,"-hex"))

82 
hex
=1;

83 if(!
	`°rcmp
(*
¨gv
,"-generate"))

84 
gíî©e
=1;

85 if(!
	`°rcmp
(*
¨gv
,"-bits"))

86 if(--
¨gc
 < 1)

87 
bad
;

89 
bôs
=
	`©oi
(*++
¨gv
);

90 if(!
	`°rcmp
(*
¨gv
,"-safe"))

91 
ß„
=1;

92 if(!
	`°rcmp
(*
¨gv
,"-checks"))

93 if(--
¨gc
 < 1)

94 
bad
;

96 
checks
=
	`©oi
(*++
¨gv
);

99 
	`BIO_¥ötf
(
bio_îr
,"Unknow¿›ti⁄ '%s'\n",*
¨gv
);

100 
bad
;

102 --
¨gc
;

103 ++
¨gv
;

106 i‡(
¨gv
[0] =
NULL
 && !
gíî©e
)

108 
	`BIO_¥ötf
(
bio_îr
,"NoÖrime specified\n");

109 
bad
;

112 i‡((
bio_out
=
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

114 
	`BIO_£t_Â
(
bio_out
,
°dout
,
BIO_NOCLOSE
);

115 #ifde‡
OPENSSL_SYS_VMS


117 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

118 
bio_out
 = 
	`BIO_push
(
tmpbio
, bio_out);

123 if(
gíî©e
)

125 *
s
;

127 if(!
bôs
)

129 
	`BIO_¥ötf
(
bio_îr
,"SpecifiyÅheÇumber of bits.\n");

132 
bn
=
	`BN_√w
();

133 
	`BN_gíî©e_¥ime_ex
(
bn
,
bôs
,
ß„
,
NULL
,NULL,NULL);

134 
s
=
hex
 ? 
	`BN_bn2hex
(
bn
Ë: 
	`BN_bn2dec
(bn);

135 
	`BIO_¥ötf
(
bio_out
,"%s\n",
s
);

136 
	`OPENSSL_‰ì
(
s
);

140 if(
hex
)

141 
	`BN_hex2bn
(&
bn
,
¨gv
[0]);

143 
	`BN_dec2bn
(&
bn
,
¨gv
[0]);

145 
	`BN_¥öt
(
bio_out
,
bn
);

146 
	`BIO_¥ötf
(
bio_out
," is %sprime\n",

147 
	`BN_is_¥ime_ex
(
bn
,
checks
,
NULL
,NULL) ? "" : "not ");

150 
	`BN_‰ì
(
bn
);

151 
	`BIO_‰ì_Æl
(
bio_out
);

155 
bad
:

156 
	`BIO_¥ötf
(
bio_îr
,"optionsáre\n");

157 
	`BIO_¥ötf
(
bio_îr
,"%-14s hex\n","-hex");

158 
	`BIO_¥ötf
(
bio_îr
,"%-14sÇumber of checks\n","-checks <n>");

160 
	}
}

	@progs.h

4 
vîify_maö
(
¨gc
,*
¨gv
[]);

5 
a¢1∑r£_maö
(
¨gc
,*
¨gv
[]);

6 
ªq_maö
(
¨gc
,*
¨gv
[]);

7 
dg°_maö
(
¨gc
,*
¨gv
[]);

8 
dh_maö
(
¨gc
,*
¨gv
[]);

9 
dh∑øm_maö
(
¨gc
,*
¨gv
[]);

10 
íc_maö
(
¨gc
,*
¨gv
[]);

11 
∑sswd_maö
(
¨gc
,*
¨gv
[]);

12 
gídh_maö
(
¨gc
,*
¨gv
[]);

13 
îr°r_maö
(
¨gc
,*
¨gv
[]);

14 
ˇ_maö
(
¨gc
,*
¨gv
[]);

15 
¸l_maö
(
¨gc
,*
¨gv
[]);

16 
rß_maö
(
¨gc
,*
¨gv
[]);

17 
rßué_maö
(
¨gc
,*
¨gv
[]);

18 
dß_maö
(
¨gc
,*
¨gv
[]);

19 
dß∑øm_maö
(
¨gc
,*
¨gv
[]);

20 
ec_maö
(
¨gc
,*
¨gv
[]);

21 
e˝¨am_maö
(
¨gc
,*
¨gv
[]);

22 
x509_maö
(
¨gc
,*
¨gv
[]);

23 
gírß_maö
(
¨gc
,*
¨gv
[]);

24 
gídß_maö
(
¨gc
,*
¨gv
[]);

25 
gípkey_maö
(
¨gc
,*
¨gv
[]);

26 
s_£rvî_maö
(
¨gc
,*
¨gv
[]);

27 
s_˛õ¡_maö
(
¨gc
,*
¨gv
[]);

28 
•ìd_maö
(
¨gc
,*
¨gv
[]);

29 
s_time_maö
(
¨gc
,*
¨gv
[]);

30 
vîsi⁄_maö
(
¨gc
,*
¨gv
[]);

31 
pkcs7_maö
(
¨gc
,*
¨gv
[]);

32 
cms_maö
(
¨gc
,*
¨gv
[]);

33 
¸l2pkcs7_maö
(
¨gc
,*
¨gv
[]);

34 
£ss_id_maö
(
¨gc
,*
¨gv
[]);

35 
cùhîs_maö
(
¨gc
,*
¨gv
[]);

36 
n£q_maö
(
¨gc
,*
¨gv
[]);

37 
pkcs12_maö
(
¨gc
,*
¨gv
[]);

38 
pkcs8_maö
(
¨gc
,*
¨gv
[]);

39 
pkey_maö
(
¨gc
,*
¨gv
[]);

40 
pkey∑øm_maö
(
¨gc
,*
¨gv
[]);

41 
pkeyué_maö
(
¨gc
,*
¨gv
[]);

42 
•kac_maö
(
¨gc
,*
¨gv
[]);

43 
smime_maö
(
¨gc
,*
¨gv
[]);

44 
ønd_maö
(
¨gc
,*
¨gv
[]);

45 
ígöe_maö
(
¨gc
,*
¨gv
[]);

46 
oc•_maö
(
¨gc
,*
¨gv
[]);

47 
¥ime_maö
(
¨gc
,*
¨gv
[]);

48 
ts_maö
(
¨gc
,*
¨gv
[]);

49 
§p_maö
(
¨gc
,*
¨gv
[]);

51 
	#FUNC_TYPE_GENERAL
 1

	)

52 
	#FUNC_TYPE_MD
 2

	)

53 
	#FUNC_TYPE_CIPHER
 3

	)

54 
	#FUNC_TYPE_PKEY
 4

	)

55 
	#FUNC_TYPE_MD_ALG
 5

	)

56 
	#FUNC_TYPE_CIPHER_ALG
 6

	)

59 
	mty≥
;

60 c⁄° *
	m«me
;

61 (*
	mfunc
)(
	m¨gc
,*
	m¨gv
[]);

62 } 
	tFUNCTION
;

63 
DECLARE_LHASH_OF
(
FUNCTION
);

65 
FUNCTION
 
	gfun˘i⁄s
[] = {

66 {
FUNC_TYPE_GENERAL
,"vîify",
vîify_maö
},

67 {
FUNC_TYPE_GENERAL
,"a¢1∑r£",
a¢1∑r£_maö
},

68 {
FUNC_TYPE_GENERAL
,"ªq",
ªq_maö
},

69 {
FUNC_TYPE_GENERAL
,"dg°",
dg°_maö
},

70 #i‚de‡
OPENSSL_NO_DH


71 {
FUNC_TYPE_GENERAL
,"dh",
dh_maö
},

73 #i‚de‡
OPENSSL_NO_DH


74 {
FUNC_TYPE_GENERAL
,"dh∑øm",
dh∑øm_maö
},

76 {
FUNC_TYPE_GENERAL
,"íc",
íc_maö
},

77 {
FUNC_TYPE_GENERAL
,"∑sswd",
∑sswd_maö
},

78 #i‚de‡
OPENSSL_NO_DH


79 {
FUNC_TYPE_GENERAL
,"gídh",
gídh_maö
},

81 {
FUNC_TYPE_GENERAL
,"îr°r",
îr°r_maö
},

82 {
FUNC_TYPE_GENERAL
,"ˇ",
ˇ_maö
},

83 {
FUNC_TYPE_GENERAL
,"¸l",
¸l_maö
},

84 #i‚de‡
OPENSSL_NO_RSA


85 {
FUNC_TYPE_GENERAL
,"rß",
rß_maö
},

87 #i‚de‡
OPENSSL_NO_RSA


88 {
FUNC_TYPE_GENERAL
,"rßué",
rßué_maö
},

90 #i‚de‡
OPENSSL_NO_DSA


91 {
FUNC_TYPE_GENERAL
,"dß",
dß_maö
},

93 #i‚de‡
OPENSSL_NO_DSA


94 {
FUNC_TYPE_GENERAL
,"dß∑øm",
dß∑øm_maö
},

96 #i‚de‡
OPENSSL_NO_EC


97 {
FUNC_TYPE_GENERAL
,"ec",
ec_maö
},

99 #i‚de‡
OPENSSL_NO_EC


100 {
FUNC_TYPE_GENERAL
,"e˝¨am",
e˝¨am_maö
},

102 {
FUNC_TYPE_GENERAL
,"x509",
x509_maö
},

103 #i‚de‡
OPENSSL_NO_RSA


104 {
FUNC_TYPE_GENERAL
,"gírß",
gírß_maö
},

106 #i‚de‡
OPENSSL_NO_DSA


107 {
FUNC_TYPE_GENERAL
,"gídß",
gídß_maö
},

109 {
FUNC_TYPE_GENERAL
,"gípkey",
gípkey_maö
},

110 #i‡!
deföed
(
OPENSSL_NO_SOCK
Ë&& !(deföed(
OPENSSL_NO_SSL2
Ë&& deföed(
OPENSSL_NO_SSL3
))

111 {
FUNC_TYPE_GENERAL
,"s_£rvî",
s_£rvî_maö
},

113 #i‡!
deföed
(
OPENSSL_NO_SOCK
Ë&& !(deföed(
OPENSSL_NO_SSL2
Ë&& deföed(
OPENSSL_NO_SSL3
))

114 {
FUNC_TYPE_GENERAL
,"s_˛õ¡",
s_˛õ¡_maö
},

116 #i‚de‡
OPENSSL_NO_SPEED


117 {
FUNC_TYPE_GENERAL
,"•ìd",
•ìd_maö
},

119 #i‡!
deföed
(
OPENSSL_NO_SOCK
Ë&& !(deföed(
OPENSSL_NO_SSL2
Ë&& deföed(
OPENSSL_NO_SSL3
))

120 {
FUNC_TYPE_GENERAL
,"s_time",
s_time_maö
},

122 {
FUNC_TYPE_GENERAL
,"vîsi⁄",
vîsi⁄_maö
},

123 {
FUNC_TYPE_GENERAL
,"pkcs7",
pkcs7_maö
},

124 #i‚de‡
OPENSSL_NO_CMS


125 {
FUNC_TYPE_GENERAL
,"cms",
cms_maö
},

127 {
FUNC_TYPE_GENERAL
,"¸l2pkcs7",
¸l2pkcs7_maö
},

128 {
FUNC_TYPE_GENERAL
,"£ss_id",
£ss_id_maö
},

129 #i‡!
deföed
(
OPENSSL_NO_SOCK
Ë&& !(deföed(
OPENSSL_NO_SSL2
Ë&& deföed(
OPENSSL_NO_SSL3
))

130 {
FUNC_TYPE_GENERAL
,"cùhîs",
cùhîs_maö
},

132 {
FUNC_TYPE_GENERAL
,"n£q",
n£q_maö
},

133 #i‡!
deföed
(
OPENSSL_NO_DES
Ë&& !deföed(
OPENSSL_NO_SHA1
)

134 {
FUNC_TYPE_GENERAL
,"pkcs12",
pkcs12_maö
},

136 {
FUNC_TYPE_GENERAL
,"pkcs8",
pkcs8_maö
},

137 {
FUNC_TYPE_GENERAL
,"pkey",
pkey_maö
},

138 {
FUNC_TYPE_GENERAL
,"pkey∑øm",
pkey∑øm_maö
},

139 {
FUNC_TYPE_GENERAL
,"pkeyué",
pkeyué_maö
},

140 {
FUNC_TYPE_GENERAL
,"•kac",
•kac_maö
},

141 {
FUNC_TYPE_GENERAL
,"smime",
smime_maö
},

142 {
FUNC_TYPE_GENERAL
,"ønd",
ønd_maö
},

143 #i‚de‡
OPENSSL_NO_ENGINE


144 {
FUNC_TYPE_GENERAL
,"ígöe",
ígöe_maö
},

146 #i‚de‡
OPENSSL_NO_OCSP


147 {
FUNC_TYPE_GENERAL
,"oc•",
oc•_maö
},

149 {
FUNC_TYPE_GENERAL
,"¥ime",
¥ime_maö
},

150 {
FUNC_TYPE_GENERAL
,"ts",
ts_maö
},

151 #i‚de‡
OPENSSL_NO_SRP


152 {
FUNC_TYPE_GENERAL
,"§p",
§p_maö
},

154 #i‚de‡
OPENSSL_NO_MD2


155 {
FUNC_TYPE_MD
,"md2",
dg°_maö
},

157 #i‚de‡
OPENSSL_NO_MD4


158 {
FUNC_TYPE_MD
,"md4",
dg°_maö
},

160 #i‚de‡
OPENSSL_NO_MD5


161 {
FUNC_TYPE_MD
,"md5",
dg°_maö
},

163 #i‚de‡
OPENSSL_NO_SHA


164 {
FUNC_TYPE_MD
,"sha",
dg°_maö
},

166 #i‚de‡
OPENSSL_NO_SHA1


167 {
FUNC_TYPE_MD
,"sha1",
dg°_maö
},

169 #i‚de‡
OPENSSL_NO_MDC2


170 {
FUNC_TYPE_MD
,"mdc2",
dg°_maö
},

172 #i‚de‡
OPENSSL_NO_RMD160


173 {
FUNC_TYPE_MD
,"rmd160",
dg°_maö
},

175 #i‚de‡
OPENSSL_NO_AES


176 {
FUNC_TYPE_CIPHER
,"´s-128-cbc",
íc_maö
},

178 #i‚de‡
OPENSSL_NO_AES


179 {
FUNC_TYPE_CIPHER
,"´s-128-ecb",
íc_maö
},

181 #i‚de‡
OPENSSL_NO_AES


182 {
FUNC_TYPE_CIPHER
,"´s-192-cbc",
íc_maö
},

184 #i‚de‡
OPENSSL_NO_AES


185 {
FUNC_TYPE_CIPHER
,"´s-192-ecb",
íc_maö
},

187 #i‚de‡
OPENSSL_NO_AES


188 {
FUNC_TYPE_CIPHER
,"´s-256-cbc",
íc_maö
},

190 #i‚de‡
OPENSSL_NO_AES


191 {
FUNC_TYPE_CIPHER
,"´s-256-ecb",
íc_maö
},

193 #i‚de‡
OPENSSL_NO_CAMELLIA


194 {
FUNC_TYPE_CIPHER
,"ˇmñlü-128-cbc",
íc_maö
},

196 #i‚de‡
OPENSSL_NO_CAMELLIA


197 {
FUNC_TYPE_CIPHER
,"ˇmñlü-128-ecb",
íc_maö
},

199 #i‚de‡
OPENSSL_NO_CAMELLIA


200 {
FUNC_TYPE_CIPHER
,"ˇmñlü-192-cbc",
íc_maö
},

202 #i‚de‡
OPENSSL_NO_CAMELLIA


203 {
FUNC_TYPE_CIPHER
,"ˇmñlü-192-ecb",
íc_maö
},

205 #i‚de‡
OPENSSL_NO_CAMELLIA


206 {
FUNC_TYPE_CIPHER
,"ˇmñlü-256-cbc",
íc_maö
},

208 #i‚de‡
OPENSSL_NO_CAMELLIA


209 {
FUNC_TYPE_CIPHER
,"ˇmñlü-256-ecb",
íc_maö
},

211 {
FUNC_TYPE_CIPHER
,"ba£64",
íc_maö
},

212 #ifde‡
ZLIB


213 {
FUNC_TYPE_CIPHER
,"zlib",
íc_maö
},

215 #i‚de‡
OPENSSL_NO_DES


216 {
FUNC_TYPE_CIPHER
,"des",
íc_maö
},

218 #i‚de‡
OPENSSL_NO_DES


219 {
FUNC_TYPE_CIPHER
,"des3",
íc_maö
},

221 #i‚de‡
OPENSSL_NO_DES


222 {
FUNC_TYPE_CIPHER
,"desx",
íc_maö
},

224 #i‚de‡
OPENSSL_NO_IDEA


225 {
FUNC_TYPE_CIPHER
,"idó",
íc_maö
},

227 #i‚de‡
OPENSSL_NO_SEED


228 {
FUNC_TYPE_CIPHER
,"£ed",
íc_maö
},

230 #i‚de‡
OPENSSL_NO_RC4


231 {
FUNC_TYPE_CIPHER
,"rc4",
íc_maö
},

233 #i‚de‡
OPENSSL_NO_RC4


234 {
FUNC_TYPE_CIPHER
,"rc4-40",
íc_maö
},

236 #i‚de‡
OPENSSL_NO_RC2


237 {
FUNC_TYPE_CIPHER
,"rc2",
íc_maö
},

239 #i‚de‡
OPENSSL_NO_BF


240 {
FUNC_TYPE_CIPHER
,"bf",
íc_maö
},

242 #i‚de‡
OPENSSL_NO_CAST


243 {
FUNC_TYPE_CIPHER
,"ˇ°",
íc_maö
},

245 #i‚de‡
OPENSSL_NO_RC5


246 {
FUNC_TYPE_CIPHER
,"rc5",
íc_maö
},

248 #i‚de‡
OPENSSL_NO_DES


249 {
FUNC_TYPE_CIPHER
,"des-ecb",
íc_maö
},

251 #i‚de‡
OPENSSL_NO_DES


252 {
FUNC_TYPE_CIPHER
,"des-ede",
íc_maö
},

254 #i‚de‡
OPENSSL_NO_DES


255 {
FUNC_TYPE_CIPHER
,"des-ede3",
íc_maö
},

257 #i‚de‡
OPENSSL_NO_DES


258 {
FUNC_TYPE_CIPHER
,"des-cbc",
íc_maö
},

260 #i‚de‡
OPENSSL_NO_DES


261 {
FUNC_TYPE_CIPHER
,"des-ede-cbc",
íc_maö
},

263 #i‚de‡
OPENSSL_NO_DES


264 {
FUNC_TYPE_CIPHER
,"des-ede3-cbc",
íc_maö
},

266 #i‚de‡
OPENSSL_NO_DES


267 {
FUNC_TYPE_CIPHER
,"des-cfb",
íc_maö
},

269 #i‚de‡
OPENSSL_NO_DES


270 {
FUNC_TYPE_CIPHER
,"des-ede-cfb",
íc_maö
},

272 #i‚de‡
OPENSSL_NO_DES


273 {
FUNC_TYPE_CIPHER
,"des-ede3-cfb",
íc_maö
},

275 #i‚de‡
OPENSSL_NO_DES


276 {
FUNC_TYPE_CIPHER
,"des-ofb",
íc_maö
},

278 #i‚de‡
OPENSSL_NO_DES


279 {
FUNC_TYPE_CIPHER
,"des-ede-ofb",
íc_maö
},

281 #i‚de‡
OPENSSL_NO_DES


282 {
FUNC_TYPE_CIPHER
,"des-ede3-ofb",
íc_maö
},

284 #i‚de‡
OPENSSL_NO_IDEA


285 {
FUNC_TYPE_CIPHER
,"idó-cbc",
íc_maö
},

287 #i‚de‡
OPENSSL_NO_IDEA


288 {
FUNC_TYPE_CIPHER
,"idó-ecb",
íc_maö
},

290 #i‚de‡
OPENSSL_NO_IDEA


291 {
FUNC_TYPE_CIPHER
,"idó-cfb",
íc_maö
},

293 #i‚de‡
OPENSSL_NO_IDEA


294 {
FUNC_TYPE_CIPHER
,"idó-ofb",
íc_maö
},

296 #i‚de‡
OPENSSL_NO_SEED


297 {
FUNC_TYPE_CIPHER
,"£ed-cbc",
íc_maö
},

299 #i‚de‡
OPENSSL_NO_SEED


300 {
FUNC_TYPE_CIPHER
,"£ed-ecb",
íc_maö
},

302 #i‚de‡
OPENSSL_NO_SEED


303 {
FUNC_TYPE_CIPHER
,"£ed-cfb",
íc_maö
},

305 #i‚de‡
OPENSSL_NO_SEED


306 {
FUNC_TYPE_CIPHER
,"£ed-ofb",
íc_maö
},

308 #i‚de‡
OPENSSL_NO_RC2


309 {
FUNC_TYPE_CIPHER
,"rc2-cbc",
íc_maö
},

311 #i‚de‡
OPENSSL_NO_RC2


312 {
FUNC_TYPE_CIPHER
,"rc2-ecb",
íc_maö
},

314 #i‚de‡
OPENSSL_NO_RC2


315 {
FUNC_TYPE_CIPHER
,"rc2-cfb",
íc_maö
},

317 #i‚de‡
OPENSSL_NO_RC2


318 {
FUNC_TYPE_CIPHER
,"rc2-ofb",
íc_maö
},

320 #i‚de‡
OPENSSL_NO_RC2


321 {
FUNC_TYPE_CIPHER
,"rc2-64-cbc",
íc_maö
},

323 #i‚de‡
OPENSSL_NO_RC2


324 {
FUNC_TYPE_CIPHER
,"rc2-40-cbc",
íc_maö
},

326 #i‚de‡
OPENSSL_NO_BF


327 {
FUNC_TYPE_CIPHER
,"bf-cbc",
íc_maö
},

329 #i‚de‡
OPENSSL_NO_BF


330 {
FUNC_TYPE_CIPHER
,"bf-ecb",
íc_maö
},

332 #i‚de‡
OPENSSL_NO_BF


333 {
FUNC_TYPE_CIPHER
,"bf-cfb",
íc_maö
},

335 #i‚de‡
OPENSSL_NO_BF


336 {
FUNC_TYPE_CIPHER
,"bf-ofb",
íc_maö
},

338 #i‚de‡
OPENSSL_NO_CAST


339 {
FUNC_TYPE_CIPHER
,"ˇ°5-cbc",
íc_maö
},

341 #i‚de‡
OPENSSL_NO_CAST


342 {
FUNC_TYPE_CIPHER
,"ˇ°5-ecb",
íc_maö
},

344 #i‚de‡
OPENSSL_NO_CAST


345 {
FUNC_TYPE_CIPHER
,"ˇ°5-cfb",
íc_maö
},

347 #i‚de‡
OPENSSL_NO_CAST


348 {
FUNC_TYPE_CIPHER
,"ˇ°5-ofb",
íc_maö
},

350 #i‚de‡
OPENSSL_NO_CAST


351 {
FUNC_TYPE_CIPHER
,"ˇ°-cbc",
íc_maö
},

353 #i‚de‡
OPENSSL_NO_RC5


354 {
FUNC_TYPE_CIPHER
,"rc5-cbc",
íc_maö
},

356 #i‚de‡
OPENSSL_NO_RC5


357 {
FUNC_TYPE_CIPHER
,"rc5-ecb",
íc_maö
},

359 #i‚de‡
OPENSSL_NO_RC5


360 {
FUNC_TYPE_CIPHER
,"rc5-cfb",
íc_maö
},

362 #i‚de‡
OPENSSL_NO_RC5


363 {
FUNC_TYPE_CIPHER
,"rc5-ofb",
íc_maö
},

365 {0,
NULL
,NULL}

	@rand.c

56 
	~"≠ps.h
"

58 
	~<˘y≥.h
>

59 
	~<°dio.h
>

60 
	~<°rög.h
>

62 
	~<›ís¶/bio.h
>

63 
	~<›ís¶/îr.h
>

64 
	~<›ís¶/ønd.h
>

66 #unde‡
PROG


67 
	#PROG
 
ønd_maö


	)

76 
MAIN
(, **);

78 
	$MAIN
(
¨gc
, **
¨gv
)

80 
i
, 
r
, 
ªt
 = 1;

81 
bad›t
;

82 *
outfûe
 = 
NULL
;

83 *
öønd
 = 
NULL
;

84 
ba£64
 = 0;

85 
hex
 = 0;

86 
BIO
 *
out
 = 
NULL
;

87 
num
 = -1;

88 #i‚de‡
OPENSSL_NO_ENGINE


89 *
ígöe
=
NULL
;

92 
	`≠ps_°¨tup
();

94 i‡(
bio_îr
 =
NULL
)

95 i‡((
bio_îr
 = 
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

96 
	`BIO_£t_Â
(
bio_îr
, 
°dîr
, 
BIO_NOCLOSE
|
BIO_FP_TEXT
);

98 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

99 
îr
;

101 
bad›t
 = 0;

102 
i
 = 0;

103 !
bad›t
 && 
¨gv
[++
i
] !
NULL
)

105 i‡(
	`°rcmp
(
¨gv
[
i
], "-out") == 0)

107 i‡((
¨gv
[
i
+1] !
NULL
Ë&& (
outfûe
 == NULL))

108 
outfûe
 = 
¨gv
[++
i
];

110 
bad›t
 = 1;

112 #i‚de‡
OPENSSL_NO_ENGINE


113 i‡(
	`°rcmp
(
¨gv
[
i
], "-engine") == 0)

115 i‡((
¨gv
[
i
+1] !
NULL
Ë&& (
ígöe
 == NULL))

116 
ígöe
 = 
¨gv
[++
i
];

118 
bad›t
 = 1;

121 i‡(
	`°rcmp
(
¨gv
[
i
], "-rand") == 0)

123 i‡((
¨gv
[
i
+1] !
NULL
Ë&& (
öønd
 == NULL))

124 
öønd
 = 
¨gv
[++
i
];

126 
bad›t
 = 1;

128 i‡(
	`°rcmp
(
¨gv
[
i
], "-base64") == 0)

130 i‡(!
ba£64
)

131 
ba£64
 = 1;

133 
bad›t
 = 1;

135 i‡(
	`°rcmp
(
¨gv
[
i
], "-hex") == 0)

137 i‡(!
hex
)

138 
hex
 = 1;

140 
bad›t
 = 1;

142 i‡(
	`isdigô
(()
¨gv
[
i
][0]))

144 i‡(
num
 < 0)

146 
r
 = 
	`ssˇnf
(
¨gv
[
i
], "%d", &
num
);

147 i‡(
r
 =0 || 
num
 < 0)

148 
bad›t
 = 1;

151 
bad›t
 = 1;

154 
bad›t
 = 1;

157 i‡(
hex
 && 
ba£64
)

158 
bad›t
 = 1;

160 i‡(
num
 < 0)

161 
bad›t
 = 1;

163 i‡(
bad›t
)

165 
	`BIO_¥ötf
(
bio_îr
, "Usage:Ñand [options]Çum\n");

166 
	`BIO_¥ötf
(
bio_îr
, "where optionsáre\n");

167 
	`BIO_¥ötf
(
bio_îr
, "-out file - writeÅo file\n");

168 #i‚de‡
OPENSSL_NO_ENGINE


169 
	`BIO_¥ötf
(
bio_îr
, "-engineÉ - useÉngineÉ,Öossiblyá hardware device.\n");

171 
	`BIO_¥ötf
(
bio_îr
, "-ønd fûe%cfûe%c... - sìd PRNG from fûes\n", 
LIST_SEPARATOR_CHAR
, LIST_SEPARATOR_CHAR);

172 
	`BIO_¥ötf
(
bio_îr
, "-base64 - base64Éncode output\n");

173 
	`BIO_¥ötf
(
bio_îr
, "-hex - hexÉncode output\n");

174 
îr
;

177 #i‚de‡
OPENSSL_NO_ENGINE


178 
	`£tup_ígöe
(
bio_îr
, 
ígöe
, 0);

181 
	`≠p_RAND_lﬂd_fûe
(
NULL
, 
bio_îr
, (
öønd
 != NULL));

182 i‡(
öønd
 !
NULL
)

183 
	`BIO_¥ötf
(
bio_îr
,"%ld semi-random bytesÜoaded\n",

184 
	`≠p_RAND_lﬂd_fûes
(
öønd
));

186 
out
 = 
	`BIO_√w
(
	`BIO_s_fûe
());

187 i‡(
out
 =
NULL
)

188 
îr
;

189 i‡(
outfûe
 !
NULL
)

190 
r
 = 
	`BIO_wrôe_fûíame
(
out
, 
outfûe
);

193 
r
 = 
	`BIO_£t_Â
(
out
, 
°dout
, 
BIO_NOCLOSE
 | 
BIO_FP_TEXT
);

194 #ifde‡
OPENSSL_SYS_VMS


196 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

197 
out
 = 
	`BIO_push
(
tmpbio
, out);

201 i‡(
r
 <= 0)

202 
îr
;

204 i‡(
ba£64
)

206 
BIO
 *
b64
 = 
	`BIO_√w
(
	`BIO_f_ba£64
());

207 i‡(
b64
 =
NULL
)

208 
îr
;

209 
out
 = 
	`BIO_push
(
b64
, out);

212 
num
 > 0)

214 
buf
[4096];

215 
chunk
;

217 
chunk
 = 
num
;

218 i‡(
chunk
 > ()(
buf
))

219 
chunk
 =  
buf
;

220 
r
 = 
	`RAND_byãs
(
buf
, 
chunk
);

221 i‡(
r
 <= 0)

222 
îr
;

223 i‡(!
hex
)

224 
	`BIO_wrôe
(
out
, 
buf
, 
chunk
);

227 
i
 = 0; i < 
chunk
; i++)

228 
	`BIO_¥ötf
(
out
, "%02x", 
buf
[
i
]);

230 
num
 -
chunk
;

232 i‡(
hex
)

233 
	`BIO_puts
(
out
, "\n");

234 ()
	`BIO_Êush
(
out
);

236 
	`≠p_RAND_wrôe_fûe
(
NULL
, 
bio_îr
);

237 
ªt
 = 0;

239 
îr
:

240 
	`ERR_¥öt_îr‹s
(
bio_îr
);

241 i‡(
out
)

242 
	`BIO_‰ì_Æl
(
out
);

243 
	`≠ps_shutdown
();

244 
	`OPENSSL_EXIT
(
ªt
);

245 
	}
}

	@req.c

61 #ifde‡
OPENSSL_NO_DEPRECATED


62 #unde‡
OPENSSL_NO_DEPRECATED


65 
	~<°dio.h
>

66 
	~<°dlib.h
>

67 
	~<time.h
>

68 
	~<°rög.h
>

69 #ifde‡
OPENSSL_NO_STDIO


70 
	#APPS_WIN16


	)

72 
	~"≠ps.h
"

73 
	~<›ís¶/bio.h
>

74 
	~<›ís¶/evp.h
>

75 
	~<›ís¶/c⁄f.h
>

76 
	~<›ís¶/îr.h
>

77 
	~<›ís¶/a¢1.h
>

78 
	~<›ís¶/x509.h
>

79 
	~<›ís¶/x509v3.h
>

80 
	~<›ís¶/obje˘s.h
>

81 
	~<›ís¶/≥m.h
>

82 
	~<›ís¶/bn.h
>

83 #i‚de‡
OPENSSL_NO_RSA


84 
	~<›ís¶/rß.h
>

86 #i‚de‡
OPENSSL_NO_DSA


87 
	~<›ís¶/dß.h
>

90 
	#SECTION
 "ªq"

	)

92 
	#BITS
 "deÁu…_bôs"

	)

93 
	#KEYFILE
 "deÁu…_keyfûe"

	)

94 
	#PROMPT
 "¥om±"

	)

95 
	#DISTINGUISHED_NAME
 "di°öguished_«me"

	)

96 
	#ATTRIBUTES
 "©åibuãs"

	)

97 
	#V3_EXTENSIONS
 "x509_exãnsi⁄s"

	)

98 
	#REQ_EXTENSIONS
 "ªq_exãnsi⁄s"

	)

99 
	#STRING_MASK
 "°rög_mask"

	)

100 
	#UTF8_IN
 "utf8"

	)

102 
	#DEFAULT_KEY_LENGTH
 512

	)

103 
	#MIN_KEY_LENGTH
 384

	)

105 #unde‡
PROG


106 
	#PROG
 
ªq_maö


	)

128 
make_REQ
(
X509_REQ
 *
ªq
,
EVP_PKEY
 *
pkey
,*
dn
,
muéúdn
,

129 
©åibs
,
chty≥
);

130 
buûd_subje˘
(
X509_REQ
 *
ªq
, *
subj
, 
chty≥
,

131 
mu…údn
);

132 
¥om±_öfo
(
X509_REQ
 *
ªq
,

133 
STACK_OF
(
CONF_VALUE
Ë*
dn_sk
, *
dn_£˘
,

134 
STACK_OF
(
CONF_VALUE
Ë*
©å_sk
, *
©å_£˘
, 
©åibs
,

135 
chty≥
);

136 
auto_öfo
(
X509_REQ
 *
ªq
, 
STACK_OF
(
CONF_VALUE
Ë*
sk
,

137 
STACK_OF
(
CONF_VALUE
Ë*
©å
, 
©åibs
,

138 
chty≥
);

139 
add_©åibuã_obje˘
(
X509_REQ
 *
ªq
, *
ãxt
, c⁄° *
def
,

140 *
vÆue
, 
nid
, 
n_mö
,

141 
n_max
, 
chty≥
);

142 
add_DN_obje˘
(
X509_NAME
 *
n
, *
ãxt
, c⁄° *
def
, *
vÆue
,

143 
nid
,
n_mö
,
n_max
, 
chty≥
, 
mvÆ
);

144 
gípkey_cb
(
EVP_PKEY_CTX
 *
˘x
);

145 
ªq_check_Àn
(
Àn
,
n_mö
,
n_max
);

146 
check_íd
(c⁄° *
°r
, c⁄° *
íd
);

147 
EVP_PKEY_CTX
 *
£t_keygí_˘x
(
BIO
 *
îr
, c⁄° *
g°r
, *
pkey_ty≥
,

148 *
pkeyÀn
, **
∑lg«m
,

149 
ENGINE
 *
keygí_ígöe
);

150 #i‚de‡
MONOLITH


151 *
	gdeÁu…_c⁄fig_fûe
=
NULL
;

153 
CONF
 *
	gªq_c⁄f
=
NULL
;

154 
	gb©ch
=0;

156 
MAIN
(, **);

158 
	$MAIN
(
¨gc
, **
¨gv
)

160 
ENGINE
 *
e
 = 
NULL
, *
gí_íg
 = NULL;

161 
nmÊag
 = 0, 
ªqÊag
 = 0;

162 
ex
=1,
x509
=0,
days
=30;

163 
X509
 *
x509ss
=
NULL
;

164 
X509_REQ
 *
ªq
=
NULL
;

165 
EVP_PKEY_CTX
 *
gí˘x
 = 
NULL
;

166 c⁄° *
keyÆg
 = 
NULL
;

167 *
keyÆg°r
 = 
NULL
;

168 
	`STACK_OF
(
OPENSSL_STRING
Ë*
pkey›ts
 = 
NULL
, *
sig›ts
 = NULL;

169 
EVP_PKEY
 *
pkey
=
NULL
;

170 
i
=0,
bad›s
=0,
√wªq
=0,
vîbo£
=0,
pkey_ty≥
=-1;

171 
√wkey
 = -1;

172 
BIO
 *
ö
=
NULL
,*
out
=NULL;

173 
öf‹m©
,
outf‹m©
,
vîify
=0,
noout
=0,
ãxt
=0,
keyf‹m
=
FORMAT_PEM
;

174 
nodes
=0,
kludge
=0,
√whdr
=0,
subje˘
=0,
pubkey
=0;

175 *
öfûe
,*
outfûe
,*
¥og
,*
keyfûe
=
NULL
,*
ãm∂©e
=NULL,*
keyout
=NULL;

176 #i‚de‡
OPENSSL_NO_ENGINE


177 *
ígöe
=
NULL
;

179 *
exãnsi⁄s
 = 
NULL
;

180 *
ªq_exts
 = 
NULL
;

181 c⁄° 
EVP_CIPHER
 *
cùhî
=
NULL
;

182 
ASN1_INTEGER
 *
£rül
 = 
NULL
;

183 
modulus
=0;

184 *
öønd
=
NULL
;

185 *
∑sßrgö
 = 
NULL
, *
∑sßrgout
 = NULL;

186 *
∑ssö
 = 
NULL
, *
∑ssout
 = NULL;

187 *
p
;

188 *
subj
 = 
NULL
;

189 
mu…údn
 = 0;

190 c⁄° 
EVP_MD
 *
md_Æg
=
NULL
,*
dige°
=NULL;

191 
chty≥
 = 
MBSTRING_ASC
;

192 #i‚de‡
MONOLITH


193 *
to_‰ì
;

194 
îæöe
;

197 
ªq_c⁄f
 = 
NULL
;

198 #i‚de‡
OPENSSL_NO_DES


199 
cùhî
=
	`EVP_des_ede3_cbc
();

201 
	`≠ps_°¨tup
();

203 i‡(
bio_îr
 =
NULL
)

204 i‡((
bio_îr
=
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

205 
	`BIO_£t_Â
(
bio_îr
,
°dîr
,
BIO_NOCLOSE
|
BIO_FP_TEXT
);

207 
öfûe
=
NULL
;

208 
outfûe
=
NULL
;

209 
öf‹m©
=
FORMAT_PEM
;

210 
outf‹m©
=
FORMAT_PEM
;

212 
¥og
=
¨gv
[0];

213 
¨gc
--;

214 
¨gv
++;

215 
¨gc
 >= 1)

217 i‡(
	`°rcmp
(*
¨gv
,"-inform") == 0)

219 i‡(--
¨gc
 < 1Ë
bad
;

220 
öf‹m©
=
	`°r2fmt
(*(++
¨gv
));

222 i‡(
	`°rcmp
(*
¨gv
,"-outform") == 0)

224 i‡(--
¨gc
 < 1Ë
bad
;

225 
outf‹m©
=
	`°r2fmt
(*(++
¨gv
));

227 #i‚de‡
OPENSSL_NO_ENGINE


228 i‡(
	`°rcmp
(*
¨gv
,"-engine") == 0)

230 i‡(--
¨gc
 < 1Ë
bad
;

231 
ígöe
*(++
¨gv
);

233 i‡(
	`°rcmp
(*
¨gv
,"-keygen_engine") == 0)

235 i‡(--
¨gc
 < 1Ë
bad
;

236 
gí_íg
 = 
	`ENGINE_by_id
(*(++
¨gv
));

237 i‡(
gí_íg
 =
NULL
)

239 
	`BIO_¥ötf
(
bio_îr
, "C™'àföd keygíÉngöê%s\n", *
¨gv
);

240 
íd
;

244 i‡(
	`°rcmp
(*
¨gv
,"-key") == 0)

246 i‡(--
¨gc
 < 1Ë
bad
;

247 
keyfûe
*(++
¨gv
);

249 i‡(
	`°rcmp
(*
¨gv
,"-pubkey") == 0)

251 
pubkey
=1;

253 i‡(
	`°rcmp
(*
¨gv
,"-new") == 0)

255 
√wªq
=1;

257 i‡(
	`°rcmp
(*
¨gv
,"-config") == 0)

259 i‡(--
¨gc
 < 1Ë
bad
;

260 
ãm∂©e
*(++
¨gv
);

262 i‡(
	`°rcmp
(*
¨gv
,"-keyform") == 0)

264 i‡(--
¨gc
 < 1Ë
bad
;

265 
keyf‹m
=
	`°r2fmt
(*(++
¨gv
));

267 i‡(
	`°rcmp
(*
¨gv
,"-in") == 0)

269 i‡(--
¨gc
 < 1Ë
bad
;

270 
öfûe
*(++
¨gv
);

272 i‡(
	`°rcmp
(*
¨gv
,"-out") == 0)

274 i‡(--
¨gc
 < 1Ë
bad
;

275 
outfûe
*(++
¨gv
);

277 i‡(
	`°rcmp
(*
¨gv
,"-keyout") == 0)

279 i‡(--
¨gc
 < 1Ë
bad
;

280 
keyout
*(++
¨gv
);

282 i‡(
	`°rcmp
(*
¨gv
,"-passin") == 0)

284 i‡(--
¨gc
 < 1Ë
bad
;

285 
∑sßrgö
*(++
¨gv
);

287 i‡(
	`°rcmp
(*
¨gv
,"-passout") == 0)

289 i‡(--
¨gc
 < 1Ë
bad
;

290 
∑sßrgout
*(++
¨gv
);

292 i‡(
	`°rcmp
(*
¨gv
,"-rand") == 0)

294 i‡(--
¨gc
 < 1Ë
bad
;

295 
öønd
*(++
¨gv
);

297 i‡(
	`°rcmp
(*
¨gv
,"-newkey") == 0)

299 i‡(--
¨gc
 < 1)

300 
bad
;

301 
keyÆg
 = *(++
¨gv
);

302 
√wªq
=1;

304 i‡(
	`°rcmp
(*
¨gv
,"-pkeyopt") == 0)

306 i‡(--
¨gc
 < 1)

307 
bad
;

308 i‡(!
pkey›ts
)

309 
pkey›ts
 = 
	`sk_OPENSSL_STRING_√w_nuŒ
();

310 i‡(!
pkey›ts
 || !
	`sk_OPENSSL_STRING_push
’key›ts, *(++
¨gv
)))

311 
bad
;

313 i‡(
	`°rcmp
(*
¨gv
,"-sigopt") == 0)

315 i‡(--
¨gc
 < 1)

316 
bad
;

317 i‡(!
sig›ts
)

318 
sig›ts
 = 
	`sk_OPENSSL_STRING_√w_nuŒ
();

319 i‡(!
sig›ts
 || !
	`sk_OPENSSL_STRING_push
(sig›ts, *(++
¨gv
)))

320 
bad
;

322 i‡(
	`°rcmp
(*
¨gv
,"-batch") == 0)

323 
b©ch
=1;

324 i‡(
	`°rcmp
(*
¨gv
,"-newhdr") == 0)

325 
√whdr
=1;

326 i‡(
	`°rcmp
(*
¨gv
,"-modulus") == 0)

327 
modulus
=1;

328 i‡(
	`°rcmp
(*
¨gv
,"-verify") == 0)

329 
vîify
=1;

330 i‡(
	`°rcmp
(*
¨gv
,"-nodes") == 0)

331 
nodes
=1;

332 i‡(
	`°rcmp
(*
¨gv
,"-noout") == 0)

333 
noout
=1;

334 i‡(
	`°rcmp
(*
¨gv
,"-verbose") == 0)

335 
vîbo£
=1;

336 i‡(
	`°rcmp
(*
¨gv
,"-utf8") == 0)

337 
chty≥
 = 
MBSTRING_UTF8
;

338 i‡(
	`°rcmp
(*
¨gv
,"-nameopt") == 0)

340 i‡(--
¨gc
 < 1Ë
bad
;

341 i‡(!
	`£t_«me_ex
(&
nmÊag
, *(++
¨gv
))Ë
bad
;

343 i‡(
	`°rcmp
(*
¨gv
,"-reqopt") == 0)

345 i‡(--
¨gc
 < 1Ë
bad
;

346 i‡(!
	`£t_˚π_ex
(&
ªqÊag
, *(++
¨gv
))Ë
bad
;

348 i‡(
	`°rcmp
(*
¨gv
,"-subject") == 0)

349 
subje˘
=1;

350 i‡(
	`°rcmp
(*
¨gv
,"-text") == 0)

351 
ãxt
=1;

352 i‡(
	`°rcmp
(*
¨gv
,"-x509") == 0)

353 
x509
=1;

354 i‡(
	`°rcmp
(*
¨gv
,"-asn1-kludge") == 0)

355 
kludge
=1;

356 i‡(
	`°rcmp
(*
¨gv
,"-no-asn1-kludge") == 0)

357 
kludge
=0;

358 i‡(
	`°rcmp
(*
¨gv
,"-subj") == 0)

360 i‡(--
¨gc
 < 1Ë
bad
;

361 
subj
*(++
¨gv
);

363 i‡(
	`°rcmp
(*
¨gv
,"-multivalue-rdn") == 0)

364 
mu…údn
=1;

365 i‡(
	`°rcmp
(*
¨gv
,"-days") == 0)

367 i‡(--
¨gc
 < 1Ë
bad
;

368 
days

	`©oi
(*(++
¨gv
));

369 i‡(
days
 == 0) days=30;

371 i‡(
	`°rcmp
(*
¨gv
,"-set_serial") == 0)

373 i‡(--
¨gc
 < 1Ë
bad
;

374 
£rül
 = 
	`s2i_ASN1_INTEGER
(
NULL
, *(++
¨gv
));

375 i‡(!
£rül
Ë
bad
;

377 i‡(
	`°rcmp
(*
¨gv
,"-extensions") == 0)

379 i‡(--
¨gc
 < 1Ë
bad
;

380 
exãnsi⁄s
 = *(++
¨gv
);

382 i‡(
	`°rcmp
(*
¨gv
,"-reqexts") == 0)

384 i‡(--
¨gc
 < 1Ë
bad
;

385 
ªq_exts
 = *(++
¨gv
);

387 i‡((
md_Æg
=
	`EVP_gë_dige°by«me
(&((*
¨gv
)[1]))Ë!
NULL
)

390 
dige°
=
md_Æg
;

394 
	`BIO_¥ötf
(
bio_îr
,"unknow¿›ti⁄ %s\n",*
¨gv
);

395 
bad›s
=1;

398 
¨gc
--;

399 
¨gv
++;

402 i‡(
bad›s
)

404 
bad
:

405 
	`BIO_¥ötf
(
bio_îr
,"%†[›ti⁄s] <öfûê>outfûe\n",
¥og
);

406 
	`BIO_¥ötf
(
bio_îr
,"where optionsáre\n");

407 
	`BIO_¥ötf
(
bio_îr
," -informárg input format - DER or PEM\n");

408 
	`BIO_¥ötf
(
bio_îr
," -outformárg output format - DER or PEM\n");

409 
	`BIO_¥ötf
(
bio_îr
," -inárg input file\n");

410 
	`BIO_¥ötf
(
bio_îr
," -outárg output file\n");

411 
	`BIO_¥ötf
(
bio_îr
," -textÅext form ofÑequest\n");

412 
	`BIO_¥ötf
(
bio_îr
," -pubkey outputÖublic key\n");

413 
	`BIO_¥ötf
(
bio_îr
," -noout doÇot output REQ\n");

414 
	`BIO_¥ötf
(
bio_îr
," -verify verify signature on REQ\n");

415 
	`BIO_¥ötf
(
bio_îr
," -modulus RSA modulus\n");

416 
	`BIO_¥ötf
(
bio_îr
," -nodes don'tÉncryptÅhe output key\n");

417 #i‚de‡
OPENSSL_NO_ENGINE


418 
	`BIO_¥ötf
(
bio_îr
," -engineÉ useÉngineÉ,Öossiblyá hardware device\n");

420 
	`BIO_¥ötf
(
bio_îr
," -subject outputÅheÑequest's subject\n");

421 
	`BIO_¥ötf
(
bio_îr
," -passinÖrivate keyÖassword source\n");

422 
	`BIO_¥ötf
(
bio_îr
," -key file useÅheÖrivate key contained in file\n");

423 
	`BIO_¥ötf
(
bio_îr
," -keyformárg key file format\n");

424 
	`BIO_¥ötf
(
bio_îr
," -keyoutárg fileÅo sendÅhe keyÅo\n");

425 
	`BIO_¥ötf
(
bio_îr
," -ønd fûe%cfûe%c...\n", 
LIST_SEPARATOR_CHAR
, LIST_SEPARATOR_CHAR);

426 
	`BIO_¥ötf
(
bio_îr
,"ÜoadÅhe file (orÅhe files inÅhe directory) into\n");

427 
	`BIO_¥ötf
(
bio_îr
,"ÅheÑandomÇumber generator\n");

428 
	`BIO_¥ötf
(
bio_îr
," -newkeyÑsa:bits generateáÇew RSA key of 'bits' in size\n");

429 
	`BIO_¥ötf
(
bio_îr
," -newkey dsa:file generateáÇew DSA key,ÖarametersÅaken from CA in 'file'\n");

430 #i‚de‡
OPENSSL_NO_ECDSA


431 
	`BIO_¥ötf
(
bio_îr
," -newkeyÉc:file generateáÇew EC key,ÖarametersÅaken from CA in 'file'\n");

433 
	`BIO_¥ötf
(
bio_îr
," -[digest] DigestÅo sign with (md5, sha1, md2, mdc2, md4)\n");

434 
	`BIO_¥ötf
(
bio_îr
," -config fileÑequestÅemplate file.\n");

435 
	`BIO_¥ötf
(
bio_îr
," -subjárg set or modifyÑequest subject\n");

436 
	`BIO_¥ötf
(
bio_îr
," -multivalue-rdnÉnable support for multivalued RDNs\n");

437 
	`BIO_¥ötf
(
bio_îr
," -newÇewÑequest.\n");

438 
	`BIO_¥ötf
(
bio_îr
," -batch doÇotáskánything duringÑequest generation\n");

439 
	`BIO_¥ötf
(
bio_îr
," -x509 outputá x509 structure instead ofá cert.Ñeq.\n");

440 
	`BIO_¥ötf
(
bio_îr
," -daysÇumber of daysá certificate generated by -x509 is valid for.\n");

441 
	`BIO_¥ötf
(
bio_îr
," -set_serial serialÇumberÅo use forá certificate generated by -x509.\n");

442 
	`BIO_¥ötf
(
bio_îr
," -newhdr output \"NEW\" inÅhe headerÜines\n");

443 
	`BIO_¥ötf
(
bio_îr
," -asn1-kludge OutputÅhe 'request' iná formatÅhat is wrong but some CA's\n");

444 
	`BIO_¥ötf
(
bio_îr
," have beenÑeportedásÑequiring\n");

445 
	`BIO_¥ötf
(
bio_îr
," -extensions .. specify certificateÉxtension section (override value in config file)\n");

446 
	`BIO_¥ötf
(
bio_îr
," -reqexts .. specifyÑequestÉxtension section (override value in config file)\n");

447 
	`BIO_¥ötf
(
bio_îr
," -utf8 input charactersáre UTF8 (default ASCII)\n");

448 
	`BIO_¥ötf
(
bio_îr
," -nameoptárg - various certificateÇame options\n");

449 
	`BIO_¥ötf
(
bio_îr
," -reqoptárg - variousÑequestÅext options\n\n");

450 
íd
;

453 
	`ERR_lﬂd_¸y±o_°rögs
();

454 if(!
	`≠p_∑sswd
(
bio_îr
, 
∑sßrgö
, 
∑sßrgout
, &
∑ssö
, &
∑ssout
)) {

455 
	`BIO_¥ötf
(
bio_îr
, "Error gettingÖasswords\n");

456 
íd
;

459 #i‚de‡
MONOLITH


461 
p
=
	`gëív
("OPENSSL_CONF");

462 i‡(
p
 =
NULL
)

463 
p
=
	`gëív
("SSLEAY_CONF");

464 i‡(
p
 =
NULL
)

465 
p
=
to_‰ì
=
	`make_c⁄fig_«me
();

466 
deÁu…_c⁄fig_fûe
=
p
;

467 
c⁄fig
=
	`NCONF_√w
(
NULL
);

468 
i
=
	`NCONF_lﬂd
(
c⁄fig
, 
p
, &
îæöe
);

471 i‡(
ãm∂©e
 !
NULL
)

473 
îæöe
 = -1;

475 if–
vîbo£
 )

476 
	`BIO_¥ötf
(
bio_îr
,"Usög c⁄figuøti⁄ from %s\n",
ãm∂©e
);

477 
ªq_c⁄f
=
	`NCONF_√w
(
NULL
);

478 
i
=
	`NCONF_lﬂd
(
ªq_c⁄f
,
ãm∂©e
,&
îæöe
);

479 i‡(
i
 == 0)

481 
	`BIO_¥ötf
(
bio_îr
,"îr‹ o¿löê%ld o‡%s\n",
îæöe
,
ãm∂©e
);

482 
íd
;

487 
ªq_c⁄f
=
c⁄fig
;

489 i‡(
ªq_c⁄f
 =
NULL
)

491 
	`BIO_¥ötf
(
bio_îr
,"U«bÀÅÿlﬂd c⁄fig infÿ‰om %s\n", 
deÁu…_c⁄fig_fûe
);

492 i‡(
√wªq
)

493 
íd
;

495 if–
vîbo£
 )

496 
	`BIO_¥ötf
(
bio_îr
,"Using configuration from %s\n",

497 
deÁu…_c⁄fig_fûe
);

500 i‡(
ªq_c⁄f
 !
NULL
)

502 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
ªq_c⁄f
))

503 
íd
;

504 
p
=
	`NCONF_gë_°rög
(
ªq_c⁄f
,
NULL
,"oid_file");

505 i‡(
p
 =
NULL
)

506 
	`ERR_˛ór_îr‹
();

507 i‡(
p
 !
NULL
)

509 
BIO
 *
oid_bio
;

511 
oid_bio
=
	`BIO_√w_fûe
(
p
,"r");

512 i‡(
oid_bio
 =
NULL
)

521 
	`OBJ_¸óã_obje˘s
(
oid_bio
);

522 
	`BIO_‰ì
(
oid_bio
);

526 if(!
	`add_oid_£˘i⁄
(
bio_îr
, 
ªq_c⁄f
)Ë
íd
;

528 i‡(
md_Æg
 =
NULL
)

530 
p
=
	`NCONF_gë_°rög
(
ªq_c⁄f
,
SECTION
,"default_md");

531 i‡(
p
 =
NULL
)

532 
	`ERR_˛ór_îr‹
();

533 i‡(
p
 !
NULL
)

535 i‡((
md_Æg
=
	`EVP_gë_dige°by«me
(
p
)Ë!
NULL
)

536 
dige°
=
md_Æg
;

540 i‡(!
exãnsi⁄s
)

542 
exãnsi⁄s
 = 
	`NCONF_gë_°rög
(
ªq_c⁄f
, 
SECTION
, 
V3_EXTENSIONS
);

543 i‡(!
exãnsi⁄s
)

544 
	`ERR_˛ór_îr‹
();

546 i‡(
exãnsi⁄s
) {

548 
X509V3_CTX
 
˘x
;

549 
	`X509V3_£t_˘x_ã°
(&
˘x
);

550 
	`X509V3_£t_nc⁄f
(&
˘x
, 
ªq_c⁄f
);

551 if(!
	`X509V3_EXT_add_nc⁄f
(
ªq_c⁄f
, &
˘x
, 
exãnsi⁄s
, 
NULL
)) {

552 
	`BIO_¥ötf
(
bio_îr
,

553 "Eº‹ LﬂdögÉxãnsi⁄ se˘i⁄ %s\n", 
exãnsi⁄s
);

554 
íd
;

558 if(!
∑ssö
)

560 
∑ssö
 = 
	`NCONF_gë_°rög
(
ªq_c⁄f
, 
SECTION
, "input_password");

561 i‡(!
∑ssö
)

562 
	`ERR_˛ór_îr‹
();

565 if(!
∑ssout
)

567 
∑ssout
 = 
	`NCONF_gë_°rög
(
ªq_c⁄f
, 
SECTION
, "output_password");

568 i‡(!
∑ssout
)

569 
	`ERR_˛ór_îr‹
();

572 
p
 = 
	`NCONF_gë_°rög
(
ªq_c⁄f
, 
SECTION
, 
STRING_MASK
);

573 i‡(!
p
)

574 
	`ERR_˛ór_îr‹
();

576 if(
p
 && !
	`ASN1_STRING_£t_deÁu…_mask_asc
(p)) {

577 
	`BIO_¥ötf
(
bio_îr
, "InvÆid globÆ såög mask sëtög %s\n", 
p
);

578 
íd
;

581 i‡(
chty≥
 !
MBSTRING_UTF8
)

583 
p
 = 
	`NCONF_gë_°rög
(
ªq_c⁄f
, 
SECTION
, 
UTF8_IN
);

584 i‡(!
p
)

585 
	`ERR_˛ór_îr‹
();

586 i‡(!
	`°rcmp
(
p
, "yes"))

587 
chty≥
 = 
MBSTRING_UTF8
;

591 if(!
ªq_exts
)

593 
ªq_exts
 = 
	`NCONF_gë_°rög
(
ªq_c⁄f
, 
SECTION
, 
REQ_EXTENSIONS
);

594 i‡(!
ªq_exts
)

595 
	`ERR_˛ór_îr‹
();

597 if(
ªq_exts
) {

599 
X509V3_CTX
 
˘x
;

600 
	`X509V3_£t_˘x_ã°
(&
˘x
);

601 
	`X509V3_£t_nc⁄f
(&
˘x
, 
ªq_c⁄f
);

602 if(!
	`X509V3_EXT_add_nc⁄f
(
ªq_c⁄f
, &
˘x
, 
ªq_exts
, 
NULL
)) {

603 
	`BIO_¥ötf
(
bio_îr
,

605 
ªq_exts
);

606 
íd
;

610 
ö
=
	`BIO_√w
(
	`BIO_s_fûe
());

611 
out
=
	`BIO_√w
(
	`BIO_s_fûe
());

612 i‡((
ö
 =
NULL
Ë|| (
out
 == NULL))

613 
íd
;

615 #i‚de‡
OPENSSL_NO_ENGINE


616 
e
 = 
	`£tup_ígöe
(
bio_îr
, 
ígöe
, 0);

619 i‡(
keyfûe
 !
NULL
)

621 
pkey
 = 
	`lﬂd_key
(
bio_îr
, 
keyfûe
, 
keyf‹m
, 0, 
∑ssö
, 
e
,

623 i‡(!
pkey
)

627 
íd
;

631 *
øndfûe
 = 
	`NCONF_gë_°rög
(
ªq_c⁄f
,
SECTION
,"RANDFILE");

632 i‡(
øndfûe
 =
NULL
)

633 
	`ERR_˛ór_îr‹
();

634 
	`≠p_RAND_lﬂd_fûe
(
øndfûe
, 
bio_îr
, 0);

638 i‡(
√wªq
 && (
pkey
 =
NULL
))

640 *
øndfûe
 = 
	`NCONF_gë_°rög
(
ªq_c⁄f
,
SECTION
,"RANDFILE");

641 i‡(
øndfûe
 =
NULL
)

642 
	`ERR_˛ór_îr‹
();

643 
	`≠p_RAND_lﬂd_fûe
(
øndfûe
, 
bio_îr
, 0);

644 i‡(
öønd
)

645 
	`≠p_RAND_lﬂd_fûes
(
öønd
);

647 i‡(!
	`NCONF_gë_numbî
(
ªq_c⁄f
,
SECTION
,
BITS
, &
√wkey
))

649 
√wkey
=
DEFAULT_KEY_LENGTH
;

652 i‡(
keyÆg
)

654 
gí˘x
 = 
	`£t_keygí_˘x
(
bio_îr
, 
keyÆg
, &
pkey_ty≥
, &
√wkey
,

655 &
keyÆg°r
, 
gí_íg
);

656 i‡(!
gí˘x
)

657 
íd
;

660 i‡(
√wkey
 < 
MIN_KEY_LENGTH
 && (
pkey_ty≥
 =
EVP_PKEY_RSA
 ||Ökey_ty≥ =
EVP_PKEY_DSA
))

662 
	`BIO_¥ötf
(
bio_îr
,"private keyÜength isÅoo short,\n");

663 
	`BIO_¥ötf
(
bio_îr
,"ôÇìd†tÿbê©Üó° %d bôs,ÇŸ %ld\n",
MIN_KEY_LENGTH
,
√wkey
);

664 
íd
;

667 i‡(!
gí˘x
)

669 
gí˘x
 = 
	`£t_keygí_˘x
(
bio_îr
, 
NULL
, &
pkey_ty≥
, &
√wkey
,

670 &
keyÆg°r
, 
gí_íg
);

671 i‡(!
gí˘x
)

672 
íd
;

675 i‡(
pkey›ts
)

677 *
gí›t
;

678 
i
 = 0; i < 
	`sk_OPENSSL_STRING_num
(
pkey›ts
); i++)

680 
gí›t
 = 
	`sk_OPENSSL_STRING_vÆue
(
pkey›ts
, 
i
);

681 i‡(
	`pkey_˘æ_°rög
(
gí˘x
, 
gí›t
) <= 0)

683 
	`BIO_¥ötf
(
bio_îr
,

685 
gí›t
);

686 
	`ERR_¥öt_îr‹s
(
bio_îr
);

687 
íd
;

692 
	`BIO_¥ötf
(
bio_îr
,"Generatingá %ld bit %sÖrivate key\n",

693 
√wkey
, 
keyÆg°r
);

695 
	`EVP_PKEY_CTX_£t_cb
(
gí˘x
, 
gípkey_cb
);

696 
	`EVP_PKEY_CTX_£t_≠p_d©a
(
gí˘x
, 
bio_îr
);

698 i‡(
	`EVP_PKEY_keygí
(
gí˘x
, &
pkey
) <= 0)

700 
	`BIO_puts
(
bio_îr
, "Error Generating Key\n");

701 
íd
;

704 
	`EVP_PKEY_CTX_‰ì
(
gí˘x
);

705 
gí˘x
 = 
NULL
;

707 
	`≠p_RAND_wrôe_fûe
(
øndfûe
, 
bio_îr
);

709 i‡(
keyout
 =
NULL
)

711 
keyout
=
	`NCONF_gë_°rög
(
ªq_c⁄f
,
SECTION
,
KEYFILE
);

712 i‡(
keyout
 =
NULL
)

713 
	`ERR_˛ór_îr‹
();

716 i‡(
keyout
 =
NULL
)

718 
	`BIO_¥ötf
(
bio_îr
,"writingÇewÖrivate keyÅo stdout\n");

719 
	`BIO_£t_Â
(
out
,
°dout
,
BIO_NOCLOSE
);

720 #ifde‡
OPENSSL_SYS_VMS


722 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

723 
out
 = 
	`BIO_push
(
tmpbio
, out);

729 
	`BIO_¥ötf
(
bio_îr
,"wrôögÇewÖriv©êkeyÅÿ'%s'\n",
keyout
);

730 i‡(
	`BIO_wrôe_fûíame
(
out
,
keyout
) <= 0)

732 
	`≥º‹
(
keyout
);

733 
íd
;

737 
p
=
	`NCONF_gë_°rög
(
ªq_c⁄f
,
SECTION
,"encrypt_rsa_key");

738 i‡(
p
 =
NULL
)

740 
	`ERR_˛ór_îr‹
();

741 
p
=
	`NCONF_gë_°rög
(
ªq_c⁄f
,
SECTION
,"encrypt_key");

742 i‡(
p
 =
NULL
)

743 
	`ERR_˛ór_îr‹
();

745 i‡((
p
 !
NULL
Ë&& (
	`°rcmp
(p,"no") == 0))

746 
cùhî
=
NULL
;

747 i‡(
nodes
Ë
cùhî
=
NULL
;

749 
i
=0;

750 
lo›
:

751 i‡(!
	`PEM_wrôe_bio_Priv©eKey
(
out
,
pkey
,
cùhî
,

752 
NULL
,0,NULL,
∑ssout
))

754 i‡((
	`ERR_GET_REASON
(
	`ERR_≥ek_îr‹
()) ==

755 
PEM_R_PROBLEMS_GETTING_PASSWORD
Ë&& (
i
 < 3))

757 
	`ERR_˛ór_îr‹
();

758 
i
++;

759 
lo›
;

761 
íd
;

763 
	`BIO_¥ötf
(
bio_îr
,"-----\n");

766 i‡(!
√wªq
)

771 
kludge
= -1;

772 i‡(
öfûe
 =
NULL
)

773 
	`BIO_£t_Â
(
ö
,
°dö
,
BIO_NOCLOSE
);

776 i‡(
	`BIO_ªad_fûíame
(
ö
,
öfûe
) <= 0)

778 
	`≥º‹
(
öfûe
);

779 
íd
;

783 i‡(
öf‹m©
 =
FORMAT_ASN1
)

784 
ªq
=
	`d2i_X509_REQ_bio
(
ö
,
NULL
);

785 i‡(
öf‹m©
 =
FORMAT_PEM
)

786 
ªq
=
	`PEM_ªad_bio_X509_REQ
(
ö
,
NULL
,NULL,NULL);

789 
	`BIO_¥ötf
(
bio_îr
,"bad input format specified for X509Ñequest\n");

790 
íd
;

792 i‡(
ªq
 =
NULL
)

794 
	`BIO_¥ötf
(
bio_îr
,"unableÅoÜoad X509Ñequest\n");

795 
íd
;

799 i‡(
√wªq
 || 
x509
)

801 i‡(
pkey
 =
NULL
)

803 
	`BIO_¥ötf
(
bio_îr
,"youÇeedÅo specifyáÖrivate key\n");

804 
íd
;

807 i‡(
ªq
 =
NULL
)

809 
ªq
=
	`X509_REQ_√w
();

810 i‡(
ªq
 =
NULL
)

812 
íd
;

815 
i
=
	`make_REQ
(
ªq
,
pkey
,
subj
,
mu…údn
,!
x509
, 
chty≥
);

816 
subj
=
NULL
;

817 i‡((
kludge
 > 0Ë&& !
	`sk_X509_ATTRIBUTE_num
(
ªq
->
ªq_öfo
->
©åibuãs
))

819 
	`sk_X509_ATTRIBUTE_‰ì
(
ªq
->
ªq_öfo
->
©åibuãs
);

820 
ªq
->
ªq_öfo
->
©åibuãs
 = 
NULL
;

822 i‡(!
i
)

824 
	`BIO_¥ötf
(
bio_îr
,"problems making Certificate Request\n");

825 
íd
;

828 i‡(
x509
)

830 
EVP_PKEY
 *
tmµkey
;

831 
X509V3_CTX
 
ext_˘x
;

832 i‡((
x509ss
=
	`X509_√w
()Ë=
NULL
Ë
íd
;

835 if(
exãnsi⁄s
 && !
	`X509_£t_vîsi⁄
(
x509ss
, 2)Ë
íd
;

836 i‡(
£rül
)

838 i‡(!
	`X509_£t_£rülNumbî
(
x509ss
, 
£rül
)Ë
íd
;

842 i‡(!
	`ønd_£rül
(
NULL
,

843 
	`X509_gë_£rülNumbî
(
x509ss
)))

844 
íd
;

847 i‡(!
	`X509_£t_issuî_«me
(
x509ss
, 
	`X509_REQ_gë_subje˘_«me
(
ªq
))Ë
íd
;

848 i‡(!
	`X509_gmtime_adj
(
	`X509_gë_nŸBef‹e
(
x509ss
),0)Ë
íd
;

849 i‡(!
	`X509_time_adj_ex
(
	`X509_gë_nŸA·î
(
x509ss
), 
days
, 0, 
NULL
)Ë
íd
;

850 i‡(!
	`X509_£t_subje˘_«me
(
x509ss
, 
	`X509_REQ_gë_subje˘_«me
(
ªq
))Ë
íd
;

851 
tmµkey
 = 
	`X509_REQ_gë_pubkey
(
ªq
);

852 i‡(!
tmµkey
 || !
	`X509_£t_pubkey
(
x509ss
,tmµkey)Ë
íd
;

853 
	`EVP_PKEY_‰ì
(
tmµkey
);

857 
	`X509V3_£t_˘x
(&
ext_˘x
, 
x509ss
, x509ss, 
NULL
, NULL, 0);

858 
	`X509V3_£t_nc⁄f
(&
ext_˘x
, 
ªq_c⁄f
);

861 if(
exãnsi⁄s
 && !
	`X509V3_EXT_add_nc⁄f
(
ªq_c⁄f
,

862 &
ext_˘x
, 
exãnsi⁄s
, 
x509ss
))

864 
	`BIO_¥ötf
(
bio_îr
,

866 
exãnsi⁄s
);

867 
íd
;

870 
i
=
	`do_X509_sign
(
bio_îr
, 
x509ss
, 
pkey
, 
dige°
, 
sig›ts
);

871 i‡(!
i
)

873 
	`ERR_¥öt_îr‹s
(
bio_îr
);

874 
íd
;

879 
X509V3_CTX
 
ext_˘x
;

883 
	`X509V3_£t_˘x
(&
ext_˘x
, 
NULL
, NULL, 
ªq
, NULL, 0);

884 
	`X509V3_£t_nc⁄f
(&
ext_˘x
, 
ªq_c⁄f
);

887 if(
ªq_exts
 && !
	`X509V3_EXT_REQ_add_nc⁄f
(
ªq_c⁄f
,

888 &
ext_˘x
, 
ªq_exts
, 
ªq
))

890 
	`BIO_¥ötf
(
bio_îr
,

892 
ªq_exts
);

893 
íd
;

895 
i
=
	`do_X509_REQ_sign
(
bio_îr
, 
ªq
, 
pkey
, 
dige°
, 
sig›ts
);

896 i‡(!
i
)

898 
	`ERR_¥öt_îr‹s
(
bio_îr
);

899 
íd
;

904 i‡(
subj
 && 
x509
)

906 
	`BIO_¥ötf
(
bio_îr
, "Cannot modifiy certificate subject\n");

907 
íd
;

910 i‡(
subj
 && !
x509
)

912 i‡(
vîbo£
)

914 
	`BIO_¥ötf
(
bio_îr
, "Modifying Request's Subject\n");

915 
	`¥öt_«me
(
bio_îr
, "ﬁd subje˘=", 
	`X509_REQ_gë_subje˘_«me
(
ªq
), 
nmÊag
);

918 i‡(
	`buûd_subje˘
(
ªq
, 
subj
, 
chty≥
, 
mu…údn
) == 0)

920 
	`BIO_¥ötf
(
bio_îr
, "ERROR: cannot modify subject\n");

921 
ex
=1;

922 
íd
;

925 
ªq
->
ªq_öfo
->
íc
.
modifõd
 = 1;

927 i‡(
vîbo£
)

929 
	`¥öt_«me
(
bio_îr
, "√w subje˘=", 
	`X509_REQ_gë_subje˘_«me
(
ªq
), 
nmÊag
);

933 i‡(
vîify
 && !
x509
)

935 
tmp
=0;

937 i‡(
pkey
 =
NULL
)

939 
pkey
=
	`X509_REQ_gë_pubkey
(
ªq
);

940 
tmp
=1;

941 i‡(
pkey
 =
NULL
Ë
íd
;

944 
i
=
	`X509_REQ_vîify
(
ªq
,
pkey
);

945 i‡(
tmp
) {

946 
	`EVP_PKEY_‰ì
(
pkey
);

947 
pkey
=
NULL
;

950 i‡(
i
 < 0)

952 
íd
;

954 i‡(
i
 == 0)

956 
	`BIO_¥ötf
(
bio_îr
,"verify failure\n");

957 
	`ERR_¥öt_îr‹s
(
bio_îr
);

960 
	`BIO_¥ötf
(
bio_îr
,"verify OK\n");

963 i‡(
noout
 && !
ãxt
 && !
modulus
 && !
subje˘
 && !
pubkey
)

965 
ex
=0;

966 
íd
;

969 i‡(
outfûe
 =
NULL
)

971 
	`BIO_£t_Â
(
out
,
°dout
,
BIO_NOCLOSE
);

972 #ifde‡
OPENSSL_SYS_VMS


974 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

975 
out
 = 
	`BIO_push
(
tmpbio
, out);

981 i‡((
keyout
 !
NULL
Ë&& (
	`°rcmp
(
outfûe
,keyout) == 0))

982 
i
=()
	`BIO_≠≥nd_fûíame
(
out
,
outfûe
);

984 
i
=()
	`BIO_wrôe_fûíame
(
out
,
outfûe
);

985 i‡(!
i
)

987 
	`≥º‹
(
outfûe
);

988 
íd
;

992 i‡(
pubkey
)

994 
EVP_PKEY
 *
çubkey
;

995 
çubkey
=
	`X509_REQ_gë_pubkey
(
ªq
);

996 i‡(
çubkey
 =
NULL
)

998 
	`BIO_¥ötf
(
bio_îr
,"Error gettingÖublic key\n");

999 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1000 
íd
;

1002 
	`PEM_wrôe_bio_PUBKEY
(
out
, 
çubkey
);

1003 
	`EVP_PKEY_‰ì
(
çubkey
);

1006 i‡(
ãxt
)

1008 i‡(
x509
)

1009 
	`X509_¥öt_ex
(
out
, 
x509ss
, 
nmÊag
, 
ªqÊag
);

1011 
	`X509_REQ_¥öt_ex
(
out
, 
ªq
, 
nmÊag
, 
ªqÊag
);

1014 if(
subje˘
)

1016 if(
x509
)

1017 
	`¥öt_«me
(
out
, "subje˘=", 
	`X509_gë_subje˘_«me
(
x509ss
), 
nmÊag
);

1019 
	`¥öt_«me
(
out
, "subje˘=", 
	`X509_REQ_gë_subje˘_«me
(
ªq
), 
nmÊag
);

1022 i‡(
modulus
)

1024 
EVP_PKEY
 *
çubkey
;

1026 i‡(
x509
)

1027 
çubkey
=
	`X509_gë_pubkey
(
x509ss
);

1029 
çubkey
=
	`X509_REQ_gë_pubkey
(
ªq
);

1030 i‡(
çubkey
 =
NULL
)

1032 
	`Ârötf
(
°dout
,"Modulus=unavailable\n");

1033 
íd
;

1035 
	`Ârötf
(
°dout
,"Modulus=");

1036 #i‚de‡
OPENSSL_NO_RSA


1037 i‡(
	`EVP_PKEY_ba£_id
(
çubkey
Ë=
EVP_PKEY_RSA
)

1038 
	`BN_¥öt
(
out
,
çubkey
->
pkey
.
rß
->
n
);

1041 
	`Ârötf
(
°dout
,"Wrong AlgorithmÅype");

1042 
	`EVP_PKEY_‰ì
(
çubkey
);

1043 
	`Ârötf
(
°dout
,"\n");

1046 i‡(!
noout
 && !
x509
)

1048 i‡(
outf‹m©
 =
FORMAT_ASN1
)

1049 
i
=
	`i2d_X509_REQ_bio
(
out
,
ªq
);

1050 i‡(
outf‹m©
 =
FORMAT_PEM
) {

1051 if(
√whdr
Ë
i
=
	`PEM_wrôe_bio_X509_REQ_NEW
(
out
,
ªq
);

1052 
i
=
	`PEM_wrôe_bio_X509_REQ
(
out
,
ªq
);

1054 
	`BIO_¥ötf
(
bio_îr
,"bad output format specified for outfile\n");

1055 
íd
;

1057 i‡(!
i
)

1059 
	`BIO_¥ötf
(
bio_îr
,"unableÅo write X509Ñequest\n");

1060 
íd
;

1063 i‡(!
noout
 && 
x509
 && (
x509ss
 !
NULL
))

1065 i‡(
outf‹m©
 =
FORMAT_ASN1
)

1066 
i
=
	`i2d_X509_bio
(
out
,
x509ss
);

1067 i‡(
outf‹m©
 =
FORMAT_PEM
)

1068 
i
=
	`PEM_wrôe_bio_X509
(
out
,
x509ss
);

1070 
	`BIO_¥ötf
(
bio_îr
,"bad output format specified for outfile\n");

1071 
íd
;

1073 i‡(!
i
)

1075 
	`BIO_¥ötf
(
bio_îr
,"unableÅo write X509 certificate\n");

1076 
íd
;

1079 
ex
=0;

1080 
íd
:

1081 #i‚de‡
MONOLITH


1082 if(
to_‰ì
)

1083 
	`OPENSSL_‰ì
(
to_‰ì
);

1085 i‡(
ex
)

1087 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1089 i‡((
ªq_c⁄f
 !
NULL
Ë&& (ªq_c⁄‡!
c⁄fig
)Ë
	`NCONF_‰ì
(req_conf);

1090 
	`BIO_‰ì
(
ö
);

1091 
	`BIO_‰ì_Æl
(
out
);

1092 
	`EVP_PKEY_‰ì
(
pkey
);

1093 i‡(
gí˘x
)

1094 
	`EVP_PKEY_CTX_‰ì
(
gí˘x
);

1095 i‡(
pkey›ts
)

1096 
	`sk_OPENSSL_STRING_‰ì
(
pkey›ts
);

1097 i‡(
sig›ts
)

1098 
	`sk_OPENSSL_STRING_‰ì
(
sig›ts
);

1099 #i‚de‡
OPENSSL_NO_ENGINE


1100 i‡(
gí_íg
)

1101 
	`ENGINE_‰ì
(
gí_íg
);

1103 i‡(
keyÆg°r
)

1104 
	`OPENSSL_‰ì
(
keyÆg°r
);

1105 
	`X509_REQ_‰ì
(
ªq
);

1106 
	`X509_‰ì
(
x509ss
);

1107 
	`ASN1_INTEGER_‰ì
(
£rül
);

1108 if(
∑sßrgö
 && 
∑ssö
Ë
	`OPENSSL_‰ì
(passin);

1109 if(
∑sßrgout
 && 
∑ssout
Ë
	`OPENSSL_‰ì
(passout);

1110 
	`OBJ_˛ónup
();

1111 
	`≠ps_shutdown
();

1112 
	`OPENSSL_EXIT
(
ex
);

1113 
	}
}

1115 
	$make_REQ
(
X509_REQ
 *
ªq
, 
EVP_PKEY
 *
pkey
, *
subj
, 
mu…údn
,

1116 
©åibs
, 
chty≥
)

1118 
ªt
=0,
i
;

1119 
no_¥om±
 = 0;

1120 
	`STACK_OF
(
CONF_VALUE
Ë*
dn_sk
, *
©å_sk
 = 
NULL
;

1121 *
tmp
, *
dn_£˘
,*
©å_£˘
;

1123 
tmp
=
	`NCONF_gë_°rög
(
ªq_c⁄f
,
SECTION
,
PROMPT
);

1124 i‡(
tmp
 =
NULL
)

1125 
	`ERR_˛ór_îr‹
();

1126 if((
tmp
 !
NULL
Ë&& !
	`°rcmp
—mp, "no")Ë
no_¥om±
 = 1;

1128 
dn_£˘
=
	`NCONF_gë_°rög
(
ªq_c⁄f
,
SECTION
,
DISTINGUISHED_NAME
);

1129 i‡(
dn_£˘
 =
NULL
)

1131 
	`BIO_¥ötf
(
bio_îr
,"unableÅo find '%s' in config\n",

1132 
DISTINGUISHED_NAME
);

1133 
îr
;

1135 
dn_sk
=
	`NCONF_gë_£˘i⁄
(
ªq_c⁄f
,
dn_£˘
);

1136 i‡(
dn_sk
 =
NULL
)

1138 
	`BIO_¥ötf
(
bio_îr
,"u«bÀÅÿgë '%s' se˘i⁄\n",
dn_£˘
);

1139 
îr
;

1142 
©å_£˘
=
	`NCONF_gë_°rög
(
ªq_c⁄f
,
SECTION
,
ATTRIBUTES
);

1143 i‡(
©å_£˘
 =
NULL
)

1145 
	`ERR_˛ór_îr‹
();

1146 
©å_sk
=
NULL
;

1150 
©å_sk
=
	`NCONF_gë_£˘i⁄
(
ªq_c⁄f
,
©å_£˘
);

1151 i‡(
©å_sk
 =
NULL
)

1153 
	`BIO_¥ötf
(
bio_îr
,"u«bÀÅÿgë '%s' se˘i⁄\n",
©å_£˘
);

1154 
îr
;

1159 i‡(!
	`X509_REQ_£t_vîsi⁄
(
ªq
,0L)Ë
îr
;

1161 i‡(
no_¥om±
)

1162 
i
 = 
	`auto_öfo
(
ªq
, 
dn_sk
, 
©å_sk
, 
©åibs
, 
chty≥
);

1165 i‡(
subj
)

1166 
i
 = 
	`buûd_subje˘
(
ªq
, 
subj
, 
chty≥
, 
mu…údn
);

1168 
i
 = 
	`¥om±_öfo
(
ªq
, 
dn_sk
, 
dn_£˘
, 
©å_sk
, 
©å_£˘
, 
©åibs
, 
chty≥
);

1170 if(!
i
Ë
îr
;

1172 i‡(!
	`X509_REQ_£t_pubkey
(
ªq
,
pkey
)Ë
îr
;

1174 
ªt
=1;

1175 
îr
:

1176 (
ªt
);

1177 
	}
}

1183 
	$buûd_subje˘
(
X509_REQ
 *
ªq
, *
subje˘
, 
chty≥
, 
mu…údn
)

1185 
X509_NAME
 *
n
;

1187 i‡(!(
n
 = 
	`∑r£_«me
(
subje˘
, 
chty≥
, 
mu…údn
)))

1190 i‡(!
	`X509_REQ_£t_subje˘_«me
(
ªq
, 
n
))

1192 
	`X509_NAME_‰ì
(
n
);

1195 
	`X509_NAME_‰ì
(
n
);

1197 
	}
}

1200 
¥om±_öfo
(
X509_REQ
 *
ªq
,

1201 
STACK_OF
(
CONF_VALUE
Ë*
dn_sk
, *
dn_£˘
,

1202 
STACK_OF
(
CONF_VALUE
Ë*
©å_sk
, *
©å_£˘
, 
©åibs
,

1203 
chty≥
)

1205 
	gi
;

1206 *
	gp
,*
	gq
;

1207 
	gbuf
[100];

1208 
	gnid
, 
	gmvÆ
;

1209 
	gn_mö
,
	gn_max
;

1210 *
	gty≥
, *
	gvÆue
;

1211 c⁄° *
	gdef
;

1212 
CONF_VALUE
 *
	gv
;

1213 
X509_NAME
 *
	gsubj
;

1214 
	gsubj
 = 
X509_REQ_gë_subje˘_«me
(
ªq
);

1216 if(!
	gb©ch
)

1218 
BIO_¥ötf
(
bio_îr
,"YouáreáboutÅo beáskedÅoÉnter informationÅhat will be incorporated\n");

1219 
BIO_¥ötf
(
bio_îr
,"into your certificateÑequest.\n");

1220 
BIO_¥ötf
(
bio_îr
,"What youáreáboutÅoÉnter is what is calledá Distinguished Name orá DN.\n");

1221 
BIO_¥ötf
(
bio_îr
,"Thereáre quiteá few fields but you canÜeave some blank\n");

1222 
BIO_¥ötf
(
bio_îr
,"For some fieldsÅhere will beá default value,\n");

1223 
BIO_¥ötf
(
bio_îr
,"If youÉnter '.',Åhe field will beÜeft blank.\n");

1224 
BIO_¥ötf
(
bio_îr
,"-----\n");

1228 i‡(
sk_CONF_VALUE_num
(
dn_sk
))

1230 
	gi
= -1;

1231 
	g°¨t
: ;;)

1233 
	gi
++;

1234 i‡(
sk_CONF_VALUE_num
(
dn_sk
Ë<
i
) ;

1236 
	gv
=
sk_CONF_VALUE_vÆue
(
dn_sk
,
i
);

1237 
	gp
=
q
=
NULL
;

1238 
	gty≥
=
v
->
«me
;

1239 if(!
check_íd
(
ty≥
,"_min") || !check_end(type,"_max") ||

1240 !
check_íd
(
ty≥
,"_default") ||

1241 !
check_íd
(
ty≥
,"_value")) ;

1245 
	gp
 = 
v
->
«me
; *p ;Ö++)

1246 i‡((*
	gp
 =':'Ë|| (*
p
 == ',') ||

1247 (*
p
 == '.')) {

1248 
p
++;

1249 if(*
	gp
Ë
	gty≥
 = 
p
;

1252 i‡(*
	gty≥
 == '+')

1254 
mvÆ
 = -1;

1255 
	gty≥
++;

1258 
	gmvÆ
 = 0;

1260 i‡((
	gnid
=
OBJ_txt2nid
(
ty≥
)Ë=
NID_undef
Ë
°¨t
;

1261 i‡(
BIO_¢¥ötf
(
buf
, buf,"%s_deÁu…",
v
->
«me
)

1262 >()(
buf
))

1264 
BIO_¥ötf
(
bio_îr
,"Namê'%s'Åoÿl⁄g\n",
v
->
«me
);

1268 i‡((
	gdef
=
NCONF_gë_°rög
(
ªq_c⁄f
,
dn_£˘
,
buf
)Ë=
NULL
)

1270 
ERR_˛ór_îr‹
();

1271 
	gdef
="";

1274 
BIO_¢¥ötf
(
buf
, buf,"%s_vÆue",
v
->
«me
);

1275 i‡((
	gvÆue
=
NCONF_gë_°rög
(
ªq_c⁄f
,
dn_£˘
,
buf
)Ë=
NULL
)

1277 
ERR_˛ór_îr‹
();

1278 
	gvÆue
=
NULL
;

1281 
BIO_¢¥ötf
(
buf
, buf,"%s_mö",
v
->
«me
);

1282 i‡(!
NCONF_gë_numbî
(
ªq_c⁄f
,
dn_£˘
,
buf
, &
n_mö
))

1284 
ERR_˛ór_îr‹
();

1285 
	gn_mö
 = -1;

1288 
BIO_¢¥ötf
(
buf
, buf,"%s_max",
v
->
«me
);

1289 i‡(!
NCONF_gë_numbî
(
ªq_c⁄f
,
dn_£˘
,
buf
, &
n_max
))

1291 
ERR_˛ór_îr‹
();

1292 
	gn_max
 = -1;

1295 i‡(!
add_DN_obje˘
(
subj
,
v
->
vÆue
,
def
,vÆue,
nid
,

1296 
n_mö
,
n_max
, 
chty≥
, 
mvÆ
))

1299 i‡(
X509_NAME_íåy_cou¡
(
subj
) == 0)

1301 
BIO_¥ötf
(
bio_îr
,"error,Ço objects specified in config file\n");

1305 i‡(
	g©åibs
)

1307 i‡((
	g©å_sk
 !
NULL
Ë&& (
sk_CONF_VALUE_num
(
©å_sk
Ë> 0Ë&& (!
b©ch
))

1309 
BIO_¥ötf
(
bio_îr
,"\nPleaseÉnterÅhe following 'extra'áttributes\n");

1310 
BIO_¥ötf
(
bio_îr
,"to be sent with your certificateÑequest\n");

1313 
	gi
= -1;

1314 
	g°¨t2
: ;;)

1316 
	gi
++;

1317 i‡((
	g©å_sk
 =
NULL
) ||

1318 (
sk_CONF_VALUE_num
(
©å_sk
Ë<
i
))

1321 
	gv
=
sk_CONF_VALUE_vÆue
(
©å_sk
,
i
);

1322 
	gty≥
=
v
->
«me
;

1323 i‡((
	gnid
=
OBJ_txt2nid
(
ty≥
)Ë=
NID_undef
)

1324 
°¨t2
;

1326 i‡(
BIO_¢¥ötf
(
buf
, buf,"%s_deÁu…",
ty≥
)

1327 >()(
buf
))

1329 
BIO_¥ötf
(
bio_îr
,"Namê'%s'Åoÿl⁄g\n",
v
->
«me
);

1333 i‡((
	gdef
=
NCONF_gë_°rög
(
ªq_c⁄f
,
©å_£˘
,
buf
))

1334 =
NULL
)

1336 
ERR_˛ór_îr‹
();

1337 
	gdef
="";

1341 
BIO_¢¥ötf
(
buf
, buf,"%s_vÆue",
ty≥
);

1342 i‡((
	gvÆue
=
NCONF_gë_°rög
(
ªq_c⁄f
,
©å_£˘
,
buf
))

1343 =
NULL
)

1345 
ERR_˛ór_îr‹
();

1346 
	gvÆue
=
NULL
;

1349 
BIO_¢¥ötf
(
buf
, buf,"%s_mö",
ty≥
);

1350 i‡(!
NCONF_gë_numbî
(
ªq_c⁄f
,
©å_£˘
,
buf
, &
n_mö
))

1352 
ERR_˛ór_îr‹
();

1353 
	gn_mö
 = -1;

1356 
BIO_¢¥ötf
(
buf
, buf,"%s_max",
ty≥
);

1357 i‡(!
NCONF_gë_numbî
(
ªq_c⁄f
,
©å_£˘
,
buf
, &
n_max
))

1359 
ERR_˛ór_îr‹
();

1360 
	gn_max
 = -1;

1363 i‡(!
add_©åibuã_obje˘
(
ªq
,

1364 
v
->
vÆue
,
def
,vÆue,
nid
,
n_mö
,
n_max
, 
chty≥
))

1371 
BIO_¥ötf
(
bio_îr
,"NoÅemplate,Ölease set one up.\n");

1379 
auto_öfo
(
X509_REQ
 *
ªq
, 
STACK_OF
(
CONF_VALUE
Ë*
dn_sk
,

1380 
STACK_OF
(
CONF_VALUE
Ë*
©å_sk
, 
©åibs
, 
chty≥
)

1382 
	gi
;

1383 *
	gp
,*
	gq
;

1384 *
	gty≥
;

1385 
CONF_VALUE
 *
	gv
;

1386 
X509_NAME
 *
	gsubj
;

1388 
	gsubj
 = 
X509_REQ_gë_subje˘_«me
(
ªq
);

1390 
	gi
 = 0; i < 
sk_CONF_VALUE_num
(
dn_sk
); i++)

1392 
	gmvÆ
;

1393 
	gv
=
sk_CONF_VALUE_vÆue
(
dn_sk
,
i
);

1394 
	gp
=
q
=
NULL
;

1395 
	gty≥
=
v
->
«me
;

1399 
	gp
 = 
v
->
«me
; *p ;Ö++)

1400 #i‚de‡
CHARSET_EBCDIC


1401 i‡((*
	gp
 =':'Ë|| (*
p
 == ',') || (*p == '.')) {

1403 i‡((*
p
 =
os_tﬂscii
[':']) || (*p == os_toascii[',']) || (*p == os_toascii['.'])) {

1405 
p
++;

1406 if(*
	gp
Ë
	gty≥
 = 
p
;

1409 #i‚de‡
CHARSET_EBCDIC


1410 i‡(*
	gp
 == '+')

1412 i‡(*
p
 =
os_tﬂscii
['+'])

1415 
p
++;

1416 
	gmvÆ
 = -1;

1419 
	gmvÆ
 = 0;

1420 i‡(!
X509_NAME_add_íåy_by_txt
(
subj
,
ty≥
, 
chty≥
,

1421 (*Ë
v
->
vÆue
,-1,-1,
mvÆ
))  0;

1425 i‡(!
X509_NAME_íåy_cou¡
(
subj
))

1427 
BIO_¥ötf
(
bio_îr
,"error,Ço objects specified in config file\n");

1430 i‡(
	g©åibs
)

1432 
	gi
 = 0; i < 
sk_CONF_VALUE_num
(
©å_sk
); i++)

1434 
	gv
=
sk_CONF_VALUE_vÆue
(
©å_sk
,
i
);

1435 if(!
X509_REQ_add1_©å_by_txt
(
ªq
, 
v
->
«me
, 
chty≥
,

1436 (*)
v
->
vÆue
, -1))  0;

1443 
	$add_DN_obje˘
(
X509_NAME
 *
n
, *
ãxt
, c⁄° *
def
, *
vÆue
,

1444 
nid
, 
n_mö
, 
n_max
, 
chty≥
, 
mvÆ
)

1446 
i
,
ªt
=0;

1447 
MS_STATIC
 
buf
[1024];

1448 
°¨t
:

1449 i‡(!
b©ch
Ë
	`BIO_¥ötf
(
bio_îr
,"%†[%s]:",
ãxt
,
def
);

1450 ()
	`BIO_Êush
(
bio_îr
);

1451 if(
vÆue
 !
NULL
)

1453 
	`BUF_°æ˝y
(
buf
,
vÆue
, buf);

1454 
	`BUF_°æˇt
(
buf
,"\n", buf);

1455 
	`BIO_¥ötf
(
bio_îr
,"%s\n",
vÆue
);

1459 
buf
[0]='\0';

1460 i‡(!
b©ch
)

1462 i‡(!
	`fgës
(
buf
, buf,
°dö
))

1467 
buf
[0] = '\n';

1468 
buf
[1] = '\0';

1472 i‡(
buf
[0] == '\0') (0);

1473 i‡(
buf
[0] == '\n')

1475 i‡((
def
 =
NULL
) || (def[0] == '\0'))

1477 
	`BUF_°æ˝y
(
buf
,
def
, buf);

1478 
	`BUF_°æˇt
(
buf
,"\n", buf);

1480 i‡((
buf
[0] == '.') && (buf[1] == '\n')) (1);

1482 
i
=
	`°æí
(
buf
);

1483 i‡(
buf
[
i
-1] != '\n')

1485 
	`BIO_¥ötf
(
bio_îr
,"weird input :-(\n");

1488 
buf
[--
i
]='\0';

1489 #ifde‡
CHARSET_EBCDIC


1490 
	`ebcdic2ascii
(
buf
, buf, 
i
);

1492 if(!
	`ªq_check_Àn
(
i
, 
n_mö
, 
n_max
)Ë
°¨t
;

1493 i‡(!
	`X509_NAME_add_íåy_by_NID
(
n
,
nid
, 
chty≥
,

1494 (*Ë
buf
, -1,-1,
mvÆ
)Ë
îr
;

1495 
ªt
=1;

1496 
îr
:

1497 (
ªt
);

1498 
	}
}

1500 
	$add_©åibuã_obje˘
(
X509_REQ
 *
ªq
, *
ãxt
, c⁄° *
def
,

1501 *
vÆue
, 
nid
, 
n_mö
,

1502 
n_max
, 
chty≥
)

1504 
i
;

1505 
buf
[1024];

1507 
°¨t
:

1508 i‡(!
b©ch
Ë
	`BIO_¥ötf
(
bio_îr
,"%†[%s]:",
ãxt
,
def
);

1509 ()
	`BIO_Êush
(
bio_îr
);

1510 i‡(
vÆue
 !
NULL
)

1512 
	`BUF_°æ˝y
(
buf
,
vÆue
, buf);

1513 
	`BUF_°æˇt
(
buf
,"\n", buf);

1514 
	`BIO_¥ötf
(
bio_îr
,"%s\n",
vÆue
);

1518 
buf
[0]='\0';

1519 i‡(!
b©ch
)

1521 i‡(!
	`fgës
(
buf
, buf,
°dö
))

1526 
buf
[0] = '\n';

1527 
buf
[1] = '\0';

1531 i‡(
buf
[0] == '\0') (0);

1532 i‡(
buf
[0] == '\n')

1534 i‡((
def
 =
NULL
) || (def[0] == '\0'))

1536 
	`BUF_°æ˝y
(
buf
,
def
, buf);

1537 
	`BUF_°æˇt
(
buf
,"\n", buf);

1539 i‡((
buf
[0] == '.') && (buf[1] == '\n')) (1);

1541 
i
=
	`°æí
(
buf
);

1542 i‡(
buf
[
i
-1] != '\n')

1544 
	`BIO_¥ötf
(
bio_îr
,"weird input :-(\n");

1547 
buf
[--
i
]='\0';

1548 #ifde‡
CHARSET_EBCDIC


1549 
	`ebcdic2ascii
(
buf
, buf, 
i
);

1551 if(!
	`ªq_check_Àn
(
i
, 
n_mö
, 
n_max
)Ë
°¨t
;

1553 if(!
	`X509_REQ_add1_©å_by_NID
(
ªq
, 
nid
, 
chty≥
,

1554 (*)
buf
, -1)) {

1555 
	`BIO_¥ötf
(
bio_îr
, "Erroráddingáttribute\n");

1556 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1557 
îr
;

1561 
îr
:

1563 
	}
}

1565 
	$ªq_check_Àn
(
Àn
, 
n_mö
, 
n_max
)

1567 i‡((
n_mö
 > 0Ë&& (
Àn
 <Ç_min))

1569 
	`BIO_¥ötf
(
bio_îr
,"°rög i†toÿsh‹t, ià√ed†tÿbê©Üó° %d byã†l⁄g\n",
n_mö
);

1572 i‡((
n_max
 >0Ë&& (
Àn
 >Ç_max))

1574 
	`BIO_¥ötf
(
bio_îr
,"°rög i†toÿl⁄g, ià√ed†tÿbêÀs†th™ %d byã†l⁄g\n",
n_max
);

1578 
	}
}

1581 
	$check_íd
(c⁄° *
°r
, c⁄° *
íd
)

1583 
ñí
, 
¶í
;

1584 c⁄° *
tmp
;

1585 
ñí
 = 
	`°æí
(
íd
);

1586 
¶í
 = 
	`°æí
(
°r
);

1587 if(
ñí
 > 
¶í
)  1;

1588 
tmp
 = 
°r
 + 
¶í
 - 
ñí
;

1589  
	`°rcmp
(
tmp
, 
íd
);

1590 
	}
}

1592 
EVP_PKEY_CTX
 *
	$£t_keygí_˘x
(
BIO
 *
îr
, c⁄° *
g°r
, *
pkey_ty≥
,

1593 *
pkeyÀn
, **
∑lg«m
,

1594 
ENGINE
 *
keygí_ígöe
)

1596 
EVP_PKEY_CTX
 *
g˘x
 = 
NULL
;

1597 
EVP_PKEY
 *
∑øm
 = 
NULL
;

1598 
keyÀn
 = -1;

1599 
BIO
 *
pbio
 = 
NULL
;

1600 c⁄° *
∑ømfûe
 = 
NULL
;

1602 i‡(
g°r
 =
NULL
)

1604 *
pkey_ty≥
 = 
EVP_PKEY_RSA
;

1605 
keyÀn
 = *
pkeyÀn
;

1607 i‡(
g°r
[0] >= '0' && gstr[0] <= '9')

1609 *
pkey_ty≥
 = 
EVP_PKEY_RSA
;

1610 
keyÀn
 = 
	`©ﬁ
(
g°r
);

1611 *
pkeyÀn
 = 
keyÀn
;

1613 i‡(!
	`°∫cmp
(
g°r
, "param:", 6))

1614 
∑ømfûe
 = 
g°r
 + 6;

1617 c⁄° *
p
 = 
	`°rchr
(
g°r
, ':');

1618 
Àn
;

1619 
ENGINE
 *
tm≥ng
;

1620 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
;

1622 i‡(
p
)

1623 
Àn
 = 
p
 - 
g°r
;

1625 
Àn
 = 
	`°æí
(
g°r
);

1630 
amëh
 = 
	`EVP_PKEY_a¢1_föd_°r
(&
tm≥ng
, 
g°r
, 
Àn
);

1632 i‡(!
amëh
)

1634 
	`BIO_¥ötf
(
îr
, "Unknow¿Æg‹ôhm %.*s\n", 
Àn
, 
g°r
);

1635  
NULL
;

1638 
	`EVP_PKEY_a¢1_gë0_öfo
(
NULL
, 
pkey_ty≥
, NULL, NULL, NULL,

1639 
amëh
);

1640 #i‚de‡
OPENSSL_NO_ENGINE


1641 i‡(
tm≥ng
)

1642 
	`ENGINE_föish
(
tm≥ng
);

1644 i‡(*
pkey_ty≥
 =
EVP_PKEY_RSA
)

1646 i‡(
p
)

1648 
keyÀn
 = 
	`©ﬁ
(
p
 + 1);

1649 *
pkeyÀn
 = 
keyÀn
;

1652 
keyÀn
 = *
pkeyÀn
;

1654 i‡(
p
)

1655 
∑ømfûe
 = 
p
 + 1;

1658 i‡(
∑ømfûe
)

1660 
pbio
 = 
	`BIO_√w_fûe
(
∑ømfûe
, "r");

1661 i‡(!
pbio
)

1663 
	`BIO_¥ötf
(
îr
, "Can't openÖarameter file %s\n",

1664 
∑ømfûe
);

1665  
NULL
;

1667 
∑øm
 = 
	`PEM_ªad_bio_P¨amëîs
(
pbio
, 
NULL
);

1669 i‡(!
∑øm
)

1671 
X509
 *
x
;

1672 ()
	`BIO_ª£t
(
pbio
);

1673 
x
 = 
	`PEM_ªad_bio_X509
(
pbio
, 
NULL
, NULL, NULL);

1674 i‡(
x
)

1676 
∑øm
 = 
	`X509_gë_pubkey
(
x
);

1677 
	`X509_‰ì
(
x
);

1681 
	`BIO_‰ì
(
pbio
);

1683 i‡(!
∑øm
)

1685 
	`BIO_¥ötf
(
îr
, "ErrorÑeadingÖarameter file %s\n",

1686 
∑ømfûe
);

1687  
NULL
;

1689 i‡(*
pkey_ty≥
 == -1)

1690 *
pkey_ty≥
 = 
	`EVP_PKEY_id
(
∑øm
);

1691 i‡(*
pkey_ty≥
 !
	`EVP_PKEY_ba£_id
(
∑øm
))

1693 
	`BIO_¥ötf
(
îr
, "Key Type doesÇot matchÖarameters\n");

1694 
	`EVP_PKEY_‰ì
(
∑øm
);

1695  
NULL
;

1699 i‡(
∑lg«m
)

1701 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
;

1702 
ENGINE
 *
tm≥ng
;

1703 c⁄° *
™am
;

1704 
amëh
 = 
	`EVP_PKEY_a¢1_föd
(&
tm≥ng
, *
pkey_ty≥
);

1705 i‡(!
amëh
)

1707 
	`BIO_puts
(
îr
, "InternalÉrror: can't find keyálgorithm\n");

1708  
NULL
;

1710 
	`EVP_PKEY_a¢1_gë0_öfo
(
NULL
, NULL, NULL, NULL, &
™am
, 
amëh
);

1711 *
∑lg«m
 = 
	`BUF_°rdup
(
™am
);

1712 #i‚de‡
OPENSSL_NO_ENGINE


1713 i‡(
tm≥ng
)

1714 
	`ENGINE_föish
(
tm≥ng
);

1718 i‡(
∑øm
)

1720 
g˘x
 = 
	`EVP_PKEY_CTX_√w
(
∑øm
, 
keygí_ígöe
);

1721 *
pkeyÀn
 = 
	`EVP_PKEY_bôs
(
∑øm
);

1722 
	`EVP_PKEY_‰ì
(
∑øm
);

1725 
g˘x
 = 
	`EVP_PKEY_CTX_√w_id
(*
pkey_ty≥
, 
keygí_ígöe
);

1727 i‡(!
g˘x
)

1729 
	`BIO_puts
(
îr
, "Errorállocating keygen context\n");

1730 
	`ERR_¥öt_îr‹s
(
îr
);

1731  
NULL
;

1734 i‡(
	`EVP_PKEY_keygí_öô
(
g˘x
) <= 0)

1736 
	`BIO_puts
(
îr
, "Error initializing keygen context\n");

1737 
	`ERR_¥öt_îr‹s
(
îr
);

1738  
NULL
;

1740 #i‚de‡
OPENSSL_NO_RSA


1741 i‡((*
pkey_ty≥
 =
EVP_PKEY_RSA
Ë&& (
keyÀn
 != -1))

1743 i‡(
	`EVP_PKEY_CTX_£t_rß_keygí_bôs
(
g˘x
, 
keyÀn
) <= 0)

1745 
	`BIO_puts
(
îr
, "Error setting RSA keysize\n");

1746 
	`ERR_¥öt_îr‹s
(
îr
);

1747 
	`EVP_PKEY_CTX_‰ì
(
g˘x
);

1748  
NULL
;

1753  
g˘x
;

1754 
	}
}

1756 
	$gípkey_cb
(
EVP_PKEY_CTX
 *
˘x
)

1758 
c
='*';

1759 
BIO
 *
b
 = 
	`EVP_PKEY_CTX_gë_≠p_d©a
(
˘x
);

1760 
p
;

1761 
p
 = 
	`EVP_PKEY_CTX_gë_keygí_öfo
(
˘x
, 0);

1762 i‡(
p
 =0Ë
c
='.';

1763 i‡(
p
 =1Ë
c
='+';

1764 i‡(
p
 =2Ë
c
='*';

1765 i‡(
p
 =3Ë
c
='\n';

1766 
	`BIO_wrôe
(
b
,&
c
,1);

1767 ()
	`BIO_Êush
(
b
);

1768 #ifde‡
LINT


1769 
p
=
n
;

1772 
	}
}

1774 
do_sign_öô
(
BIO
 *
îr
, 
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
,

1775 c⁄° 
EVP_MD
 *
md
, 
STACK_OF
(
OPENSSL_STRING
Ë*
sig›ts
)

1777 
EVP_PKEY_CTX
 *
	gpk˘x
 = 
NULL
;

1778 
	gi
;

1779 
EVP_MD_CTX_öô
(
˘x
);

1780 i‡(!
EVP_Dige°SignInô
(
˘x
, &
pk˘x
, 
md
, 
NULL
, 
pkey
))

1782 
	gi
 = 0; i < 
sk_OPENSSL_STRING_num
(
sig›ts
); i++)

1784 *
	gsig›t
 = 
sk_OPENSSL_STRING_vÆue
(
sig›ts
, 
i
);

1785 i‡(
pkey_˘æ_°rög
(
pk˘x
, 
sig›t
) <= 0)

1787 
BIO_¥ötf
(
îr
, "∑ømëîÉº‹ \"%s\"\n", 
sig›t
);

1788 
ERR_¥öt_îr‹s
(
bio_îr
);

1795 
do_X509_sign
(
BIO
 *
îr
, 
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
,

1796 
STACK_OF
(
OPENSSL_STRING
Ë*
sig›ts
)

1798 
	grv
;

1799 
EVP_MD_CTX
 
	gm˘x
;

1800 
EVP_MD_CTX_öô
(&
m˘x
);

1801 
	grv
 = 
do_sign_öô
(
îr
, &
m˘x
, 
pkey
, 
md
, 
sig›ts
);

1802 i‡(
	grv
 > 0)

1803 
	grv
 = 
X509_sign_˘x
(
x
, &
m˘x
);

1804 
EVP_MD_CTX_˛ónup
(&
m˘x
);

1805  
	grv
 > 0 ? 1 : 0;

1809 
do_X509_REQ_sign
(
BIO
 *
îr
, 
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
,

1810 
STACK_OF
(
OPENSSL_STRING
Ë*
sig›ts
)

1812 
	grv
;

1813 
EVP_MD_CTX
 
	gm˘x
;

1814 
EVP_MD_CTX_öô
(&
m˘x
);

1815 
	grv
 = 
do_sign_öô
(
îr
, &
m˘x
, 
pkey
, 
md
, 
sig›ts
);

1816 i‡(
	grv
 > 0)

1817 
	grv
 = 
X509_REQ_sign_˘x
(
x
, &
m˘x
);

1818 
EVP_MD_CTX_˛ónup
(&
m˘x
);

1819  
	grv
 > 0 ? 1 : 0;

1824 
do_X509_CRL_sign
(
BIO
 *
îr
, 
X509_CRL
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
,

1825 
STACK_OF
(
OPENSSL_STRING
Ë*
sig›ts
)

1827 
	grv
;

1828 
EVP_MD_CTX
 
	gm˘x
;

1829 
EVP_MD_CTX_öô
(&
m˘x
);

1830 
	grv
 = 
do_sign_öô
(
îr
, &
m˘x
, 
pkey
, 
md
, 
sig›ts
);

1831 i‡(
	grv
 > 0)

1832 
	grv
 = 
X509_CRL_sign_˘x
(
x
, &
m˘x
);

1833 
EVP_MD_CTX_˛ónup
(&
m˘x
);

1834  
	grv
 > 0 ? 1 : 0;

	@rsa.c

59 
	~<›ís¶/›ís¶c⁄f.h
>

60 #i‚de‡
OPENSSL_NO_RSA


61 
	~<°dio.h
>

62 
	~<°dlib.h
>

63 
	~<°rög.h
>

64 
	~<time.h
>

65 
	~"≠ps.h
"

66 
	~<›ís¶/bio.h
>

67 
	~<›ís¶/îr.h
>

68 
	~<›ís¶/rß.h
>

69 
	~<›ís¶/evp.h
>

70 
	~<›ís¶/x509.h
>

71 
	~<›ís¶/≥m.h
>

72 
	~<›ís¶/bn.h
>

74 #unde‡
PROG


75 
	#PROG
 
rß_maö


	)

98 
MAIN
(, **);

100 
	$MAIN
(
¨gc
, **
¨gv
)

102 
ENGINE
 *
e
 = 
NULL
;

103 
ªt
=1;

104 
RSA
 *
rß
=
NULL
;

105 
i
,
bad›s
=0, 
sgckey
=0;

106 c⁄° 
EVP_CIPHER
 *
íc
=
NULL
;

107 
BIO
 *
out
=
NULL
;

108 
öf‹m©
,
outf‹m©
,
ãxt
=0,
check
=0,
noout
=0;

109 
pubö
 = 0, 
pubout
 = 0;

110 *
öfûe
,*
outfûe
,*
¥og
;

111 *
∑sßrgö
 = 
NULL
, *
∑sßrgout
 = NULL;

112 *
∑ssö
 = 
NULL
, *
∑ssout
 = NULL;

113 #i‚de‡
OPENSSL_NO_ENGINE


114 *
ígöe
=
NULL
;

116 
modulus
=0;

118 
pvk_í¸
 = 2;

120 
	`≠ps_°¨tup
();

122 i‡(
bio_îr
 =
NULL
)

123 i‡((
bio_îr
=
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

124 
	`BIO_£t_Â
(
bio_îr
,
°dîr
,
BIO_NOCLOSE
|
BIO_FP_TEXT
);

126 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

127 
íd
;

129 
öfûe
=
NULL
;

130 
outfûe
=
NULL
;

131 
öf‹m©
=
FORMAT_PEM
;

132 
outf‹m©
=
FORMAT_PEM
;

134 
¥og
=
¨gv
[0];

135 
¨gc
--;

136 
¨gv
++;

137 
¨gc
 >= 1)

139 i‡(
	`°rcmp
(*
¨gv
,"-inform") == 0)

141 i‡(--
¨gc
 < 1Ë
bad
;

142 
öf‹m©
=
	`°r2fmt
(*(++
¨gv
));

144 i‡(
	`°rcmp
(*
¨gv
,"-outform") == 0)

146 i‡(--
¨gc
 < 1Ë
bad
;

147 
outf‹m©
=
	`°r2fmt
(*(++
¨gv
));

149 i‡(
	`°rcmp
(*
¨gv
,"-in") == 0)

151 i‡(--
¨gc
 < 1Ë
bad
;

152 
öfûe
*(++
¨gv
);

154 i‡(
	`°rcmp
(*
¨gv
,"-out") == 0)

156 i‡(--
¨gc
 < 1Ë
bad
;

157 
outfûe
*(++
¨gv
);

159 i‡(
	`°rcmp
(*
¨gv
,"-passin") == 0)

161 i‡(--
¨gc
 < 1Ë
bad
;

162 
∑sßrgö
*(++
¨gv
);

164 i‡(
	`°rcmp
(*
¨gv
,"-passout") == 0)

166 i‡(--
¨gc
 < 1Ë
bad
;

167 
∑sßrgout
*(++
¨gv
);

169 #i‚de‡
OPENSSL_NO_ENGINE


170 i‡(
	`°rcmp
(*
¨gv
,"-engine") == 0)

172 i‡(--
¨gc
 < 1Ë
bad
;

173 
ígöe
*(++
¨gv
);

176 i‡(
	`°rcmp
(*
¨gv
,"-sgckey") == 0)

177 
sgckey
=1;

178 i‡(
	`°rcmp
(*
¨gv
,"-pubin") == 0)

179 
pubö
=1;

180 i‡(
	`°rcmp
(*
¨gv
,"-pubout") == 0)

181 
pubout
=1;

182 i‡(
	`°rcmp
(*
¨gv
,"-RSAPublicKey_in") == 0)

183 
pubö
 = 2;

184 i‡(
	`°rcmp
(*
¨gv
,"-RSAPublicKey_out") == 0)

185 
pubout
 = 2;

186 i‡(
	`°rcmp
(*
¨gv
,"-pvk-strong") == 0)

187 
pvk_í¸
=2;

188 i‡(
	`°rcmp
(*
¨gv
,"-pvk-weak") == 0)

189 
pvk_í¸
=1;

190 i‡(
	`°rcmp
(*
¨gv
,"-pvk-none") == 0)

191 
pvk_í¸
=0;

192 i‡(
	`°rcmp
(*
¨gv
,"-noout") == 0)

193 
noout
=1;

194 i‡(
	`°rcmp
(*
¨gv
,"-text") == 0)

195 
ãxt
=1;

196 i‡(
	`°rcmp
(*
¨gv
,"-modulus") == 0)

197 
modulus
=1;

198 i‡(
	`°rcmp
(*
¨gv
,"-check") == 0)

199 
check
=1;

200 i‡((
íc
=
	`EVP_gë_cùhîby«me
(&(
¨gv
[0][1]))Ë=
NULL
)

202 
	`BIO_¥ötf
(
bio_îr
,"unknow¿›ti⁄ %s\n",*
¨gv
);

203 
bad›s
=1;

206 
¨gc
--;

207 
¨gv
++;

210 i‡(
bad›s
)

212 
bad
:

213 
	`BIO_¥ötf
(
bio_îr
,"%†[›ti⁄s] <öfûê>outfûe\n",
¥og
);

214 
	`BIO_¥ötf
(
bio_îr
,"where optionsáre\n");

215 
	`BIO_¥ötf
(
bio_îr
," -informárg input format - one of DER NET PEM\n");

216 
	`BIO_¥ötf
(
bio_îr
," -outformárg output format - one of DER NET PEM\n");

217 
	`BIO_¥ötf
(
bio_îr
," -inárg input file\n");

218 
	`BIO_¥ötf
(
bio_îr
," -sgckey Use IIS SGC key format\n");

219 
	`BIO_¥ötf
(
bio_îr
," -passinárg input fileÖassÖhrase source\n");

220 
	`BIO_¥ötf
(
bio_îr
," -outárg output file\n");

221 
	`BIO_¥ötf
(
bio_îr
," -passoutárg output fileÖassÖhrase source\n");

222 
	`BIO_¥ötf
(
bio_îr
," -desÉncrypt PEM output with cbc des\n");

223 
	`BIO_¥ötf
(
bio_îr
," -des3Éncrypt PEM output withÉde cbc des using 168 bit key\n");

224 #i‚de‡
OPENSSL_NO_IDEA


225 
	`BIO_¥ötf
(
bio_îr
," -ideaÉncrypt PEM output with cbc idea\n");

227 #i‚de‡
OPENSSL_NO_SEED


228 
	`BIO_¥ötf
(
bio_îr
," -seedÉncrypt PEM output with cbc seed\n");

230 #i‚de‡
OPENSSL_NO_AES


231 
	`BIO_¥ötf
(
bio_îr
," -aes128, -aes192, -aes256\n");

232 
	`BIO_¥ötf
(
bio_îr
,"Éncrypt PEM output with cbcáes\n");

234 #i‚de‡
OPENSSL_NO_CAMELLIA


235 
	`BIO_¥ötf
(
bio_îr
," -camellia128, -camellia192, -camellia256\n");

236 
	`BIO_¥ötf
(
bio_îr
,"Éncrypt PEM output with cbc camellia\n");

238 
	`BIO_¥ötf
(
bio_îr
," -textÖrintÅhe key inÅext\n");

239 
	`BIO_¥ötf
(
bio_îr
," -noout don'tÖrint key out\n");

240 
	`BIO_¥ötf
(
bio_îr
," -modulusÖrintÅhe RSA key modulus\n");

241 
	`BIO_¥ötf
(
bio_îr
," -check verify key consistency\n");

242 
	`BIO_¥ötf
(
bio_îr
," -pubinÉxpectáÖublic key in input file\n");

243 
	`BIO_¥ötf
(
bio_îr
," -pubout outputáÖublic key\n");

244 #i‚de‡
OPENSSL_NO_ENGINE


245 
	`BIO_¥ötf
(
bio_îr
," -engineÉ useÉngineÉ,Öossiblyá hardware device.\n");

247 
íd
;

250 
	`ERR_lﬂd_¸y±o_°rögs
();

252 #i‚de‡
OPENSSL_NO_ENGINE


253 
e
 = 
	`£tup_ígöe
(
bio_îr
, 
ígöe
, 0);

256 if(!
	`≠p_∑sswd
(
bio_îr
, 
∑sßrgö
, 
∑sßrgout
, &
∑ssö
, &
∑ssout
)) {

257 
	`BIO_¥ötf
(
bio_îr
, "Error gettingÖasswords\n");

258 
íd
;

261 if(
check
 && 
pubö
) {

262 
	`BIO_¥ötf
(
bio_îr
, "OnlyÖrivate keys can be checked\n");

263 
íd
;

266 
out
=
	`BIO_√w
(
	`BIO_s_fûe
());

269 
EVP_PKEY
 *
pkey
;

271 i‡(
pubö
)

273 
tmpf‹m©
=-1;

274 i‡(
pubö
 == 2)

276 i‡(
öf‹m©
 =
FORMAT_PEM
)

277 
tmpf‹m©
 = 
FORMAT_PEMRSA
;

278 i‡(
öf‹m©
 =
FORMAT_ASN1
)

279 
tmpf‹m©
 = 
FORMAT_ASN1RSA
;

281 i‡(
öf‹m©
 =
FORMAT_NETSCAPE
 && 
sgckey
)

282 
tmpf‹m©
 = 
FORMAT_IISSGC
;

284 
tmpf‹m©
 = 
öf‹m©
;

286 
pkey
 = 
	`lﬂd_pubkey
(
bio_îr
, 
öfûe
, 
tmpf‹m©
, 1,

287 
∑ssö
, 
e
, "Public Key");

290 
pkey
 = 
	`lﬂd_key
(
bio_îr
, 
öfûe
,

291 (
öf‹m©
 =
FORMAT_NETSCAPE
 && 
sgckey
 ?

292 
FORMAT_IISSGC
 : 
öf‹m©
), 1,

293 
∑ssö
, 
e
, "Private Key");

295 i‡(
pkey
 !
NULL
)

296 
rß
 = 
	`EVP_PKEY_gë1_RSA
(
pkey
);

297 
	`EVP_PKEY_‰ì
(
pkey
);

300 i‡(
rß
 =
NULL
)

302 
	`ERR_¥öt_îr‹s
(
bio_îr
);

303 
íd
;

306 i‡(
outfûe
 =
NULL
)

308 
	`BIO_£t_Â
(
out
,
°dout
,
BIO_NOCLOSE
);

309 #ifde‡
OPENSSL_SYS_VMS


311 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

312 
out
 = 
	`BIO_push
(
tmpbio
, out);

318 i‡(
	`BIO_wrôe_fûíame
(
out
,
outfûe
) <= 0)

320 
	`≥º‹
(
outfûe
);

321 
íd
;

325 i‡(
ãxt
)

326 i‡(!
	`RSA_¥öt
(
out
,
rß
,0))

328 
	`≥º‹
(
outfûe
);

329 
	`ERR_¥öt_îr‹s
(
bio_îr
);

330 
íd
;

333 i‡(
modulus
)

335 
	`BIO_¥ötf
(
out
,"Modulus=");

336 
	`BN_¥öt
(
out
,
rß
->
n
);

337 
	`BIO_¥ötf
(
out
,"\n");

340 i‡(
check
)

342 
r
 = 
	`RSA_check_key
(
rß
);

344 i‡(
r
 == 1)

345 
	`BIO_¥ötf
(
out
,"RSA key ok\n");

346 i‡(
r
 == 0)

348 
îr
;

350 (
îr
 = 
	`ERR_≥ek_îr‹
()) != 0 &&

351 
	`ERR_GET_LIB
(
îr
Ë=
ERR_LIB_RSA
 &&

352 
	`ERR_GET_FUNC
(
îr
Ë=
RSA_F_RSA_CHECK_KEY
 &&

353 
	`ERR_GET_REASON
(
îr
Ë!
ERR_R_MALLOC_FAILURE
)

355 
	`BIO_¥ötf
(
out
, "RSA keyÉº‹: %s\n", 
	`ERR_ªas⁄_îr‹_°rög
(
îr
));

356 
	`ERR_gë_îr‹
();

360 i‡(
r
 =-1 || 
	`ERR_≥ek_îr‹
() != 0)

362 
	`ERR_¥öt_îr‹s
(
bio_îr
);

363 
íd
;

367 i‡(
noout
)

369 
ªt
 = 0;

370 
íd
;

372 
	`BIO_¥ötf
(
bio_îr
,"writing RSA key\n");

373 i‡(
outf‹m©
 =
FORMAT_ASN1
) {

374 if(
pubout
 || 
pubö
)

376 i‡(
pubout
 == 2)

377 
i
=
	`i2d_RSAPublicKey_bio
(
out
,
rß
);

379 
i
=
	`i2d_RSA_PUBKEY_bio
(
out
,
rß
);

381 
i
=
	`i2d_RSAPriv©eKey_bio
(
out
,
rß
);

383 #i‚de‡
OPENSSL_NO_RC4


384 i‡(
outf‹m©
 =
FORMAT_NETSCAPE
)

386 *
p
,*
µ
;

387 
size
;

389 
i
=1;

390 
size
=
	`i2d_RSA_NET
(
rß
,
NULL
,NULL, 
sgckey
);

391 i‡((
p
=(*)
	`OPENSSL_mÆloc
(
size
)Ë=
NULL
)

393 
	`BIO_¥ötf
(
bio_îr
,"Memoryállocation failure\n");

394 
íd
;

396 
µ
=
p
;

397 
	`i2d_RSA_NET
(
rß
,&
p
,
NULL
, 
sgckey
);

398 
	`BIO_wrôe
(
out
,(*)
µ
,
size
);

399 
	`OPENSSL_‰ì
(
µ
);

402 i‡(
outf‹m©
 =
FORMAT_PEM
) {

403 if(
pubout
 || 
pubö
)

405 i‡(
pubout
 == 2)

406 
i
=
	`PEM_wrôe_bio_RSAPublicKey
(
out
,
rß
);

408 
i
=
	`PEM_wrôe_bio_RSA_PUBKEY
(
out
,
rß
);

410 
i
=
	`PEM_wrôe_bio_RSAPriv©eKey
(
out
,
rß
,

411 
íc
,
NULL
,0,NULL,
∑ssout
);

412 #i‡!
	`deföed
(
OPENSSL_NO_DSA
Ë&& !deföed(
OPENSSL_NO_RC4
)

413 } i‡(
outf‹m©
 =
FORMAT_MSBLOB
 || outf‹m© =
FORMAT_PVK
) {

414 
EVP_PKEY
 *
pk
;

415 
pk
 = 
	`EVP_PKEY_√w
();

416 
	`EVP_PKEY_£t1_RSA
(
pk
, 
rß
);

417 i‡(
outf‹m©
 =
FORMAT_PVK
)

418 
i
 = 
	`i2b_PVK_bio
(
out
, 
pk
, 
pvk_í¸
, 0, 
∑ssout
);

419 i‡(
pubö
 || 
pubout
)

420 
i
 = 
	`i2b_PublicKey_bio
(
out
, 
pk
);

422 
i
 = 
	`i2b_Priv©eKey_bio
(
out
, 
pk
);

423 
	`EVP_PKEY_‰ì
(
pk
);

426 
	`BIO_¥ötf
(
bio_îr
,"bad output format specified for outfile\n");

427 
íd
;

429 i‡(
i
 <= 0)

431 
	`BIO_¥ötf
(
bio_îr
,"unableÅo write key\n");

432 
	`ERR_¥öt_îr‹s
(
bio_îr
);

435 
ªt
=0;

436 
íd
:

437 if(
out
 !
NULL
Ë
	`BIO_‰ì_Æl
(out);

438 if(
rß
 !
NULL
Ë
	`RSA_‰ì
(rsa);

439 if(
∑ssö
Ë
	`OPENSSL_‰ì
(passin);

440 if(
∑ssout
Ë
	`OPENSSL_‰ì
(passout);

441 
	`≠ps_shutdown
();

442 
	`OPENSSL_EXIT
(
ªt
);

443 
	}
}

446 #i‡
PEDANTIC


447 *
	gdummy
=&
dummy
;

	@rsautl.c

59 
	~<›ís¶/›ís¶c⁄f.h
>

60 #i‚de‡
OPENSSL_NO_RSA


62 
	~"≠ps.h
"

63 
	~<°rög.h
>

64 
	~<›ís¶/îr.h
>

65 
	~<›ís¶/≥m.h
>

66 
	~<›ís¶/rß.h
>

68 
	#RSA_SIGN
 1

	)

69 
	#RSA_VERIFY
 2

	)

70 
	#RSA_ENCRYPT
 3

	)

71 
	#RSA_DECRYPT
 4

	)

73 
	#KEY_PRIVKEY
 1

	)

74 
	#KEY_PUBKEY
 2

	)

75 
	#KEY_CERT
 3

	)

77 
ußge
();

79 #unde‡
PROG


81 
	#PROG
 
rßué_maö


	)

83 
MAIN
(
¨gc
, **);

85 
	$MAIN
(
¨gc
, **
¨gv
)

87 
ENGINE
 *
e
 = 
NULL
;

88 
BIO
 *
ö
 = 
NULL
, *
out
 = NULL;

89 *
öfûe
 = 
NULL
, *
outfûe
 = NULL;

90 #i‚de‡
OPENSSL_NO_ENGINE


91 *
ígöe
 = 
NULL
;

93 *
keyfûe
 = 
NULL
;

94 
rß_mode
 = 
RSA_VERIFY
, 
key_ty≥
 = 
KEY_PRIVKEY
;

95 
keyf‹m
 = 
FORMAT_PEM
;

96 
√ed_¥iv
 = 0, 
bad¨g
 = 0, 
ªv
 = 0;

97 
hexdump
 = 0, 
a¢1∑r£
 = 0;

98 
X509
 *
x
;

99 
EVP_PKEY
 *
pkey
 = 
NULL
;

100 
RSA
 *
rß
 = 
NULL
;

101 *
rß_ö
 = 
NULL
, *
rß_out
 = NULL, 
∑d
;

102 *
∑sßrgö
 = 
NULL
, *
∑ssö
 = NULL;

103 
rß_öÀn
, 
rß_ouéí
 = 0;

104 
keysize
;

106 
ªt
 = 1;

108 
¨gc
--;

109 
¨gv
++;

111 if(!
bio_îr
Ëbio_î∏
	`BIO_√w_Â
(
°dîr
, 
BIO_NOCLOSE
);

113 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

114 
íd
;

115 
	`ERR_lﬂd_¸y±o_°rögs
();

116 
	`O≥nSSL_add_Æl_Æg‹ôhms
();

117 
∑d
 = 
RSA_PKCS1_PADDING
;

119 
¨gc
 >= 1)

121 i‡(!
	`°rcmp
(*
¨gv
,"-in")) {

122 i‡(--
¨gc
 < 1)

123 
bad¨g
 = 1;

125 
öfûe
*(++
¨gv
);

126 } i‡(!
	`°rcmp
(*
¨gv
,"-out")) {

127 i‡(--
¨gc
 < 1)

128 
bad¨g
 = 1;

130 
outfûe
*(++
¨gv
);

131 } if(!
	`°rcmp
(*
¨gv
, "-inkey")) {

132 i‡(--
¨gc
 < 1)

133 
bad¨g
 = 1;

135 
keyfûe
 = *(++
¨gv
);

136 } i‡(!
	`°rcmp
(*
¨gv
,"-passin")) {

137 i‡(--
¨gc
 < 1)

138 
bad¨g
 = 1;

140 
∑sßrgö
*(++
¨gv
);

141 } i‡(
	`°rcmp
(*
¨gv
,"-keyform") == 0) {

142 i‡(--
¨gc
 < 1)

143 
bad¨g
 = 1;

145 
keyf‹m
=
	`°r2fmt
(*(++
¨gv
));

146 #i‚de‡
OPENSSL_NO_ENGINE


147 } if(!
	`°rcmp
(*
¨gv
, "-engine")) {

148 i‡(--
¨gc
 < 1)

149 
bad¨g
 = 1;

151 
ígöe
 = *(++
¨gv
);

153 } if(!
	`°rcmp
(*
¨gv
, "-pubin")) {

154 
key_ty≥
 = 
KEY_PUBKEY
;

155 } if(!
	`°rcmp
(*
¨gv
, "-certin")) {

156 
key_ty≥
 = 
KEY_CERT
;

158 if(!
	`°rcmp
(*
¨gv
, "-a¢1∑r£")Ë
a¢1∑r£
 = 1;

159 if(!
	`°rcmp
(*
¨gv
, "-hexdump")Ë
hexdump
 = 1;

160 if(!
	`°rcmp
(*
¨gv
, "-øw")Ë
∑d
 = 
RSA_NO_PADDING
;

161 if(!
	`°rcmp
(*
¨gv
, "-ﬂï")Ë
∑d
 = 
RSA_PKCS1_OAEP_PADDING
;

162 if(!
	`°rcmp
(*
¨gv
, "-s¶")Ë
∑d
 = 
RSA_SSLV23_PADDING
;

163 if(!
	`°rcmp
(*
¨gv
, "-pkcs")Ë
∑d
 = 
RSA_PKCS1_PADDING
;

164 if(!
	`°rcmp
(*
¨gv
, "-x931")Ë
∑d
 = 
RSA_X931_PADDING
;

165 if(!
	`°rcmp
(*
¨gv
, "-sign")) {

166 
rß_mode
 = 
RSA_SIGN
;

167 
√ed_¥iv
 = 1;

168 } if(!
	`°rcmp
(*
¨gv
, "-vîify")Ë
rß_mode
 = 
RSA_VERIFY
;

169 if(!
	`°rcmp
(*
¨gv
, "-ªv")Ë
ªv
 = 1;

170 if(!
	`°rcmp
(*
¨gv
, "-í¸y±")Ë
rß_mode
 = 
RSA_ENCRYPT
;

171 if(!
	`°rcmp
(*
¨gv
, "-decrypt")) {

172 
rß_mode
 = 
RSA_DECRYPT
;

173 
√ed_¥iv
 = 1;

174 } 
bad¨g
 = 1;

175 if(
bad¨g
) {

176 
	`ußge
();

177 
íd
;

179 
¨gc
--;

180 
¨gv
++;

183 if(
√ed_¥iv
 && (
key_ty≥
 !
KEY_PRIVKEY
)) {

184 
	`BIO_¥ötf
(
bio_îr
, "AÖrivate key isÇeeded forÅhis operation\n");

185 
íd
;

188 #i‚de‡
OPENSSL_NO_ENGINE


189 
e
 = 
	`£tup_ígöe
(
bio_îr
, 
ígöe
, 0);

191 if(!
	`≠p_∑sswd
(
bio_îr
, 
∑sßrgö
, 
NULL
, &
∑ssö
, NULL)) {

192 
	`BIO_¥ötf
(
bio_îr
, "Error gettingÖassword\n");

193 
íd
;

197 
	`≠p_RAND_lﬂd_fûe
(
NULL
, 
bio_îr
, 0);

199 
key_ty≥
) {

200 
KEY_PRIVKEY
:

201 
pkey
 = 
	`lﬂd_key
(
bio_îr
, 
keyfûe
, 
keyf‹m
, 0,

202 
∑ssö
, 
e
, "Private Key");

205 
KEY_PUBKEY
:

206 
pkey
 = 
	`lﬂd_pubkey
(
bio_îr
, 
keyfûe
, 
keyf‹m
, 0,

207 
NULL
, 
e
, "Public Key");

210 
KEY_CERT
:

211 
x
 = 
	`lﬂd_˚π
(
bio_îr
, 
keyfûe
, 
keyf‹m
,

212 
NULL
, 
e
, "Certificate");

213 if(
x
) {

214 
pkey
 = 
	`X509_gë_pubkey
(
x
);

215 
	`X509_‰ì
(
x
);

220 if(!
pkey
) {

224 
rß
 = 
	`EVP_PKEY_gë1_RSA
(
pkey
);

225 
	`EVP_PKEY_‰ì
(
pkey
);

227 if(!
rß
) {

228 
	`BIO_¥ötf
(
bio_îr
, "Error getting RSA key\n");

229 
	`ERR_¥öt_îr‹s
(
bio_îr
);

230 
íd
;

234 if(
öfûe
) {

235 if(!(
ö
 = 
	`BIO_√w_fûe
(
öfûe
, "rb"))) {

236 
	`BIO_¥ötf
(
bio_îr
, "Error Reading Input File\n");

237 
	`ERR_¥öt_îr‹s
(
bio_îr
);

238 
íd
;

240 } 
ö
 = 
	`BIO_√w_Â
(
°dö
, 
BIO_NOCLOSE
);

242 if(
outfûe
) {

243 if(!(
out
 = 
	`BIO_√w_fûe
(
outfûe
, "wb"))) {

244 
	`BIO_¥ötf
(
bio_îr
, "Error Reading Output File\n");

245 
	`ERR_¥öt_îr‹s
(
bio_îr
);

246 
íd
;

249 
out
 = 
	`BIO_√w_Â
(
°dout
, 
BIO_NOCLOSE
);

250 #ifde‡
OPENSSL_SYS_VMS


252 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

253 
out
 = 
	`BIO_push
(
tmpbio
, out);

258 
keysize
 = 
	`RSA_size
(
rß
);

260 
rß_ö
 = 
	`OPENSSL_mÆloc
(
keysize
 * 2);

261 
rß_out
 = 
	`OPENSSL_mÆloc
(
keysize
);

264 
rß_öÀn
 = 
	`BIO_ªad
(
ö
, 
rß_ö
, 
keysize
 * 2);

265 if(
rß_öÀn
 <= 0) {

266 
	`BIO_¥ötf
(
bio_îr
, "ErrorÑeading input Data\n");

267 
	`exô
(1);

269 if(
ªv
) {

270 
i
;

271 
˘mp
;

272 
i
 = 0; i < 
rß_öÀn
/2; i++) {

273 
˘mp
 = 
rß_ö
[
i
];

274 
rß_ö
[
i
] =Ñß_ö[
rß_öÀn
 - 1 - i];

275 
rß_ö
[
rß_öÀn
 - 1 - 
i
] = 
˘mp
;

278 
rß_mode
) {

280 
RSA_VERIFY
:

281 
rß_ouéí
 = 
	`RSA_public_de¸y±
(
rß_öÀn
, 
rß_ö
, 
rß_out
, 
rß
, 
∑d
);

284 
RSA_SIGN
:

285 
rß_ouéí
 = 
	`RSA_¥iv©e_í¸y±
(
rß_öÀn
, 
rß_ö
, 
rß_out
, 
rß
, 
∑d
);

288 
RSA_ENCRYPT
:

289 
rß_ouéí
 = 
	`RSA_public_í¸y±
(
rß_öÀn
, 
rß_ö
, 
rß_out
, 
rß
, 
∑d
);

292 
RSA_DECRYPT
:

293 
rß_ouéí
 = 
	`RSA_¥iv©e_de¸y±
(
rß_öÀn
, 
rß_ö
, 
rß_out
, 
rß
, 
∑d
);

298 if(
rß_ouéí
 <= 0) {

299 
	`BIO_¥ötf
(
bio_îr
, "RSA operationÉrror\n");

300 
	`ERR_¥öt_îr‹s
(
bio_îr
);

301 
íd
;

303 
ªt
 = 0;

304 if(
a¢1∑r£
) {

305 if(!
	`ASN1_∑r£_dump
(
out
, 
rß_out
, 
rß_ouéí
, 1, -1)) {

306 
	`ERR_¥öt_îr‹s
(
bio_îr
);

308 } if(
hexdump
Ë
	`BIO_dump
(
out
, (*)
rß_out
, 
rß_ouéí
);

309 
	`BIO_wrôe
(
out
, 
rß_out
, 
rß_ouéí
);

310 
íd
:

311 
	`RSA_‰ì
(
rß
);

312 
	`BIO_‰ì
(
ö
);

313 
	`BIO_‰ì_Æl
(
out
);

314 if(
rß_ö
Ë
	`OPENSSL_‰ì
(rsa_in);

315 if(
rß_out
Ë
	`OPENSSL_‰ì
(rsa_out);

316 if(
∑ssö
Ë
	`OPENSSL_‰ì
(passin);

317  
ªt
;

318 
	}
}

320 
	$ußge
()

322 
	`BIO_¥ötf
(
bio_îr
, "Usage:Ñsautl [options]\n");

323 
	`BIO_¥ötf
(
bio_îr
, "-in file input file\n");

324 
	`BIO_¥ötf
(
bio_îr
, "-out file output file\n");

325 
	`BIO_¥ötf
(
bio_îr
, "-inkey file input key\n");

326 
	`BIO_¥ötf
(
bio_îr
, "-keyformárgÖrivate key format - default PEM\n");

327 
	`BIO_¥ötf
(
bio_îr
, "-pubin input isán RSAÖublic\n");

328 
	`BIO_¥ötf
(
bio_îr
, "-certin input isá certificate carryingán RSAÖublic key\n");

329 
	`BIO_¥ötf
(
bio_îr
, "-ssl use SSL v2Öadding\n");

330 
	`BIO_¥ötf
(
bio_îr
, "-raw useÇoÖadding\n");

331 
	`BIO_¥ötf
(
bio_îr
, "-pkcs use PKCS#1 v1.5Öadding (default)\n");

332 
	`BIO_¥ötf
(
bio_îr
, "-oaep use PKCS#1 OAEP\n");

333 
	`BIO_¥ötf
(
bio_îr
, "-sign sign withÖrivate key\n");

334 
	`BIO_¥ötf
(
bio_îr
, "-verify verify withÖublic key\n");

335 
	`BIO_¥ötf
(
bio_îr
, "-encryptÉncrypt withÖublic key\n");

336 
	`BIO_¥ötf
(
bio_îr
, "-decrypt decrypt withÖrivate key\n");

337 
	`BIO_¥ötf
(
bio_îr
, "-hexdump hex dump output\n");

338 #i‚de‡
OPENSSL_NO_ENGINE


339 
	`BIO_¥ötf
(
bio_îr
, "-engineÉ useÉngineÉ,Öossiblyá hardware device.\n");

340 
	`BIO_¥ötf
 (
bio_îr
, "-passinárgÖassÖhrase source\n");

343 
	}
}

347 #i‡
PEDANTIC


348 *
	gdummy
=&
dummy
;

	@s_apps.h

111 #i‡!
deföed
(
OPENSSL_SYS_NETWARE
)

112 
	~<sys/ty≥s.h
>

114 
	~<›ís¶/›ís¶c⁄f.h
>

116 #i‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë|| deföed(
OPENSSL_SYS_MSDOS
)

117 
	~<c⁄io.h
>

120 #i‡
deföed
(
OPENSSL_SYS_MSDOS
Ë&& !deföed(
_WIN32
)

121 
	#_kbhô
 
kbhô


	)

124 #i‡
deföed
(
OPENSSL_SYS_VMS
Ë&& !deföed(
FD_SET
)

127 
	#MAX_NOFILE
 32

	)

128 
	#NBBY
 8

	)

130 #i‚def 
FD_SETSIZE


131 
	#FD_SETSIZE
 
MAX_NOFILE


	)

135 
	#MAXSELFD
 
MAX_NOFILE


	)

136 
	tfd_mask
;

137 
	#NFDBITS
 ((
fd_mask
Ë* 
NBBY
Ë

	)

138 
	#NFDSHIFT
 5

	)

140 
fd_mask
 
	tfd_£t
;

141 
	#FD_SET
(
n
, 
p
Ë(*’Ë|(1 << (“Ë% 
NFDBITS
)))

	)

142 
	#FD_CLR
(
n
, 
p
Ë(*’Ë&~(1 << (“Ë% 
NFDBITS
)))

	)

143 
	#FD_ISSET
(
n
, 
p
Ë(*’Ë& (1 << (“Ë% 
NFDBITS
)))

	)

144 
	#FD_ZERO
(
p
Ë
	`mem£t
((*)’), 0, (*’)))

	)

147 
	#PORT
 4433

	)

148 
	#PORT_STR
 "4433"

	)

149 
	#PROTOCOL
 "t˝"

	)

151 
do_£rvî
(
p‹t
, 
ty≥
, *
ªt
, (*
cb
Ë(*
ho°«me
, 
s
, *
c⁄ãxt
), *context);

152 #ifde‡
HEADER_X509_H


153 
MS_CALLBACK
 
	`vîify_ˇŒback
(
ok
, 
X509_STORE_CTX
 *
˘x
);

155 #ifde‡
HEADER_SSL_H


156 
	`£t_˚π_°uff
(
SSL_CTX
 *
˘x
, *
˚π_fûe
, *
key_fûe
);

157 
	`£t_˚π_key_°uff
(
SSL_CTX
 *
˘x
, 
X509
 *
˚π
, 
EVP_PKEY
 *
key
);

159 
	`öô_˛õ¡
(*
sock
, *
£rvî
, 
p‹t
, 
ty≥
);

160 
	`should_ªåy
(
i
);

161 
	`exåa˘_p‹t
(*
°r
, *
p‹t_±r
);

162 
	`exåa˘_ho°_p‹t
(*
°r
,**
ho°_±r
,*
ù
,*
p
);

164 
MS_CALLBACK
 
	`bio_dump_ˇŒback
(
BIO
 *
bio
, 
cmd
, c⁄° *
¨gp
,

165 
¨gi
, 
¨gl
, 
ªt
);

167 #ifde‡
HEADER_SSL_H


168 
MS_CALLBACK
 
	`≠ps_s¶_öfo_ˇŒback
(c⁄° 
SSL
 *
s
, 
whîe
, 
ªt
);

169 
MS_CALLBACK
 
	`msg_cb
(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
);

170 
MS_CALLBACK
 
	`é£xt_cb
(
SSL
 *
s
, 
˛õ¡_£rvî
, 
ty≥
,

171 *
d©a
, 
Àn
,

172 *
¨g
);

175 
MS_CALLBACK
 
	`gíî©e_cookõ_ˇŒback
(
SSL
 *
s¶
, *
cookõ
, *
cookõ_Àn
);

176 
MS_CALLBACK
 
	`vîify_cookõ_ˇŒback
(
SSL
 *
s¶
, *
cookõ
, 
cookõ_Àn
);

	@s_cb.c

112 
	~<°dio.h
>

113 
	~<°dlib.h
>

114 
	#USE_SOCKETS


	)

115 
	#NON_MAIN


	)

116 
	~"≠ps.h
"

117 #unde‡
NON_MAIN


118 #unde‡
USE_SOCKETS


119 
	~<›ís¶/îr.h
>

120 
	~<›ís¶/ønd.h
>

121 
	~<›ís¶/x509.h
>

122 
	~<›ís¶/s¶.h
>

123 
	~"s_≠ps.h
"

125 
	#COOKIE_SECRET_LENGTH
 16

	)

127 
	gvîify_dïth
=0;

128 
	gvîify_îr‹
=
X509_V_OK
;

129 
	gvîify_ªtu∫_îr‹
=0;

130 
	gcookõ_£¸ë
[
COOKIE_SECRET_LENGTH
];

131 
	gcookõ_öôülized
=0;

133 
MS_CALLBACK
 
	$vîify_ˇŒback
(
ok
, 
X509_STORE_CTX
 *
˘x
)

135 
X509
 *
îr_˚π
;

136 
îr
,
dïth
;

138 
îr_˚π
=
	`X509_STORE_CTX_gë_cuºít_˚π
(
˘x
);

139 
îr

	`X509_STORE_CTX_gë_îr‹
(
˘x
);

140 
dïth

	`X509_STORE_CTX_gë_îr‹_dïth
(
˘x
);

143 i‡(
îr_˚π
)

150 
	`BIO_puts
(
bio_îr
, "<no cert>\n");

151 i‡(!
ok
)

153 
	`BIO_¥ötf
(
bio_îr
,"vîifyÉº‹:num=%d:%s\n",
îr
,

154 
	`X509_vîify_˚π_îr‹_°rög
(
îr
));

155 i‡(
vîify_dïth
 >
dïth
)

157 i‡(!
vîify_ªtu∫_îr‹
)

158 
ok
=1;

159 
vîify_îr‹
=
X509_V_OK
;

163 
ok
=0;

164 
vîify_îr‹
=
X509_V_ERR_CERT_CHAIN_TOO_LONG
;

167 
îr
)

169 
X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT
:

170 
	`BIO_puts
(
bio_îr
,"issuer= ");

171 
	`X509_NAME_¥öt_ex
(
bio_îr
, 
	`X509_gë_issuî_«me
(
îr_˚π
),

172 0, 
XN_FLAG_ONELINE
);

173 
	`BIO_puts
(
bio_îr
, "\n");

175 
X509_V_ERR_CERT_NOT_YET_VALID
:

176 
X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD
:

177 
	`BIO_¥ötf
(
bio_îr
,"notBefore=");

178 
	`ASN1_TIME_¥öt
(
bio_îr
,
	`X509_gë_nŸBef‹e
(
îr_˚π
));

179 
	`BIO_¥ötf
(
bio_îr
,"\n");

181 
X509_V_ERR_CERT_HAS_EXPIRED
:

182 
X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD
:

183 
	`BIO_¥ötf
(
bio_îr
,"notAfter=");

184 
	`ASN1_TIME_¥öt
(
bio_îr
,
	`X509_gë_nŸA·î
(
îr_˚π
));

185 
	`BIO_¥ötf
(
bio_îr
,"\n");

187 
X509_V_ERR_NO_EXPLICIT_POLICY
:

188 
	`pﬁicõs_¥öt
(
bio_îr
, 
˘x
);

191 i‡(
îr
 =
X509_V_OK
 && 
ok
 == 2)

192 
	`pﬁicõs_¥öt
(
bio_îr
, 
˘x
);

195 (
ok
);

196 
	}
}

198 
	$£t_˚π_°uff
(
SSL_CTX
 *
˘x
, *
˚π_fûe
, *
key_fûe
)

200 i‡(
˚π_fûe
 !
NULL
)

207 i‡(
	`SSL_CTX_u£_˚πifiˇã_fûe
(
˘x
,
˚π_fûe
,

208 
SSL_FILETYPE_PEM
) <= 0)

210 
	`BIO_¥ötf
(
bio_îr
,"u«bÀÅÿgë cîtifiˇã from '%s'\n",
˚π_fûe
);

211 
	`ERR_¥öt_îr‹s
(
bio_îr
);

214 i‡(
key_fûe
 =
NULL
Ëkey_fûe=
˚π_fûe
;

215 i‡(
	`SSL_CTX_u£_Priv©eKey_fûe
(
˘x
,
key_fûe
,

216 
SSL_FILETYPE_PEM
) <= 0)

218 
	`BIO_¥ötf
(
bio_îr
,"u«bÀÅÿgëÖriv©êkey from '%s'\n",
key_fûe
);

219 
	`ERR_¥öt_îr‹s
(
bio_îr
);

244 i‡(!
	`SSL_CTX_check_¥iv©e_key
(
˘x
))

246 
	`BIO_¥ötf
(
bio_îr
,"Private key doesÇot matchÅhe certificateÖublic key\n");

251 
	}
}

253 
	$£t_˚π_key_°uff
(
SSL_CTX
 *
˘x
, 
X509
 *
˚π
, 
EVP_PKEY
 *
key
)

255 i‡(
˚π
 =
NULL
)

257 i‡(
	`SSL_CTX_u£_˚πifiˇã
(
˘x
,
˚π
) <= 0)

259 
	`BIO_¥ötf
(
bio_îr
,"error setting certificate\n");

260 
	`ERR_¥öt_îr‹s
(
bio_îr
);

263 i‡(
	`SSL_CTX_u£_Priv©eKey
(
˘x
,
key
) <= 0)

265 
	`BIO_¥ötf
(
bio_îr
,"error settingÖrivate key\n");

266 
	`ERR_¥öt_îr‹s
(
bio_îr
);

273 i‡(!
	`SSL_CTX_check_¥iv©e_key
(
˘x
))

275 
	`BIO_¥ötf
(
bio_îr
,"Private key doesÇot matchÅhe certificateÖublic key\n");

279 
	}
}

281 
MS_CALLBACK
 
	$bio_dump_ˇŒback
(
BIO
 *
bio
, 
cmd
, c⁄° *
¨gp
,

282 
¨gi
, 
¨gl
, 
ªt
)

284 
BIO
 *
out
;

286 
out
=(
BIO
 *)
	`BIO_gë_ˇŒback_¨g
(
bio
);

287 i‡(
out
 =
NULL
Ë(
ªt
);

289 i‡(
cmd
 =(
BIO_CB_READ
|
BIO_CB_RETURN
))

291 
	`BIO_¥ötf
(
out
,"read from %p [%p] (%lu bytes => %ld (0x%lX))\n",

292 (*)
bio
,
¨gp
,()
¨gi
,
ªt
,ret);

293 
	`BIO_dump
(
out
,
¨gp
,()
ªt
);

294 (
ªt
);

296 i‡(
cmd
 =(
BIO_CB_WRITE
|
BIO_CB_RETURN
))

298 
	`BIO_¥ötf
(
out
,"writeÅo %p [%p] (%lu bytes => %ld (0x%lX))\n",

299 (*)
bio
,
¨gp
,()
¨gi
,
ªt
,ret);

300 
	`BIO_dump
(
out
,
¨gp
,()
ªt
);

302 (
ªt
);

303 
	}
}

305 
MS_CALLBACK
 
	$≠ps_s¶_öfo_ˇŒback
(c⁄° 
SSL
 *
s
, 
whîe
, 
ªt
)

307 c⁄° *
°r
;

308 
w
;

310 
w
=
whîe
& ~
SSL_ST_MASK
;

312 i‡(
w
 & 
SSL_ST_CONNECT
Ë
°r
="SSL_connect";

313 i‡(
w
 & 
SSL_ST_ACCEPT
Ë
°r
="SSL_accept";

314 
°r
="undefined";

316 i‡(
whîe
 & 
SSL_CB_LOOP
)

318 
	`BIO_¥ötf
(
bio_îr
,"%s:%s\n",
°r
,
	`SSL_°©e_°rög_l⁄g
(
s
));

320 i‡(
whîe
 & 
SSL_CB_ALERT
)

322 
°r
=(
whîe
 & 
SSL_CB_READ
)?"read":"write";

323 
	`BIO_¥ötf
(
bio_îr
,"SSL3álert %s:%s:%s\n",

324 
°r
,

325 
	`SSL_Æît_ty≥_°rög_l⁄g
(
ªt
),

326 
	`SSL_Æît_desc_°rög_l⁄g
(
ªt
));

328 i‡(
whîe
 & 
SSL_CB_EXIT
)

330 i‡(
ªt
 == 0)

331 
	`BIO_¥ötf
(
bio_îr
,"%s:failed in %s\n",

332 
°r
,
	`SSL_°©e_°rög_l⁄g
(
s
));

333 i‡(
ªt
 < 0)

335 
	`BIO_¥ötf
(
bio_îr
,"%s:error in %s\n",

336 
°r
,
	`SSL_°©e_°rög_l⁄g
(
s
));

339 
	}
}

342 
MS_CALLBACK
 
	$msg_cb
(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
)

344 
BIO
 *
bio
 = 
¨g
;

345 c⁄° *
°r_wrôe_p
, *
°r_vîsi⁄
, *
°r_c⁄ã¡_ty≥
 = "", *
°r_dëaûs1
 = "", *
°r_dëaûs2
= "";

347 
°r_wrôe_p
 = 
wrôe_p
 ? ">>>" : "<<<";

349 
vîsi⁄
)

351 
SSL2_VERSION
:

352 
°r_vîsi⁄
 = "SSL 2.0";

354 
SSL3_VERSION
:

355 
°r_vîsi⁄
 = "SSL 3.0 ";

357 
TLS1_VERSION
:

358 
°r_vîsi⁄
 = "TLS 1.0 ";

360 
TLS1_1_VERSION
:

361 
°r_vîsi⁄
 = "TLS 1.1 ";

363 
TLS1_2_VERSION
:

364 
°r_vîsi⁄
 = "TLS 1.2 ";

366 
DTLS1_VERSION
:

367 
°r_vîsi⁄
 = "DTLS 1.0 ";

369 
DTLS1_BAD_VER
:

370 
°r_vîsi⁄
 = "DTLS 1.0 (bad) ";

373 
°r_vîsi⁄
 = "???";

376 i‡(
vîsi⁄
 =
SSL2_VERSION
)

378 
°r_dëaûs1
 = "???";

380 i‡(
Àn
 > 0)

382 ((c⁄° *)
buf
)[0])

385 
°r_dëaûs1
 = ", ERROR:";

386 
°r_dëaûs2
 = " ???";

387 i‡(
Àn
 >= 3)

389 
îr
 = (((c⁄° *)
buf
)[1]<<8) + ((const *)buf)[2];

391 
îr
)

394 
°r_dëaûs2
 = " NO-CIPHER-ERROR";

397 
°r_dëaûs2
 = " NO-CERTIFICATE-ERROR";

400 
°r_dëaûs2
 = " BAD-CERTIFICATE-ERROR";

403 
°r_dëaûs2
 = " UNSUPPORTED-CERTIFICATE-TYPE-ERROR";

410 
°r_dëaûs1
 = ", CLIENT-HELLO";

413 
°r_dëaûs1
 = ", CLIENT-MASTER-KEY";

416 
°r_dëaûs1
 = ", CLIENT-FINISHED";

419 
°r_dëaûs1
 = ", SERVER-HELLO";

422 
°r_dëaûs1
 = ", SERVER-VERIFY";

425 
°r_dëaûs1
 = ", SERVER-FINISHED";

428 
°r_dëaûs1
 = ", REQUEST-CERTIFICATE";

431 
°r_dëaûs1
 = ", CLIENT-CERTIFICATE";

437 i‡(
vîsi⁄
 =
SSL3_VERSION
 ||

438 
vîsi⁄
 =
TLS1_VERSION
 ||

439 
vîsi⁄
 =
TLS1_1_VERSION
 ||

440 
vîsi⁄
 =
TLS1_2_VERSION
 ||

441 
vîsi⁄
 =
DTLS1_VERSION
 ||

442 
vîsi⁄
 =
DTLS1_BAD_VER
)

444 
c⁄ã¡_ty≥
)

447 
°r_c⁄ã¡_ty≥
 = "ChangeCipherSpec";

450 
°r_c⁄ã¡_ty≥
 = "Alert";

453 
°r_c⁄ã¡_ty≥
 = "Handshake";

457 i‡(
c⁄ã¡_ty≥
 == 21)

459 
°r_dëaûs1
 = ", ???";

461 i‡(
Àn
 == 2)

463 ((c⁄° *)
buf
)[0])

466 
°r_dëaûs1
 = ", warning";

469 
°r_dëaûs1
 = ", fatal";

473 
°r_dëaûs2
 = " ???";

474 ((c⁄° *)
buf
)[1])

477 
°r_dëaûs2
 = " close_notify";

480 
°r_dëaûs2
 = " unexpected_message";

483 
°r_dëaûs2
 = " bad_record_mac";

486 
°r_dëaûs2
 = " decryption_failed";

489 
°r_dëaûs2
 = "Ñecord_overflow";

492 
°r_dëaûs2
 = " decompression_failure";

495 
°r_dëaûs2
 = " handshake_failure";

498 
°r_dëaûs2
 = " bad_certificate";

501 
°r_dëaûs2
 = " unsupported_certificate";

504 
°r_dëaûs2
 = " certificate_revoked";

507 
°r_dëaûs2
 = " certificate_expired";

510 
°r_dëaûs2
 = " certificate_unknown";

513 
°r_dëaûs2
 = " illegal_parameter";

516 
°r_dëaûs2
 = " unknown_ca";

519 
°r_dëaûs2
 = "áccess_denied";

522 
°r_dëaûs2
 = " decode_error";

525 
°r_dëaûs2
 = " decrypt_error";

528 
°r_dëaûs2
 = "Éxport_restriction";

531 
°r_dëaûs2
 = "Örotocol_version";

534 
°r_dëaûs2
 = " insufficient_security";

537 
°r_dëaûs2
 = " internal_error";

540 
°r_dëaûs2
 = " user_canceled";

543 
°r_dëaûs2
 = "Ço_renegotiation";

546 
°r_dëaûs2
 = " unsupported_extension";

549 
°r_dëaûs2
 = " certificate_unobtainable";

552 
°r_dëaûs2
 = " unrecognized_name";

555 
°r_dëaûs2
 = " bad_certificate_status_response";

558 
°r_dëaûs2
 = " bad_certificate_hash_value";

561 
°r_dëaûs2
 = " unknown_psk_identity";

567 i‡(
c⁄ã¡_ty≥
 == 22)

569 
°r_dëaûs1
 = "???";

571 i‡(
Àn
 > 0)

573 ((c⁄° *)
buf
)[0])

576 
°r_dëaûs1
 = ", HelloRequest";

579 
°r_dëaûs1
 = ", ClientHello";

582 
°r_dëaûs1
 = ", ServerHello";

585 
°r_dëaûs1
 = ", HelloVerifyRequest";

588 
°r_dëaûs1
 = ", Certificate";

591 
°r_dëaûs1
 = ", ServerKeyExchange";

594 
°r_dëaûs1
 = ", CertificateRequest";

597 
°r_dëaûs1
 = ", ServerHelloDone";

600 
°r_dëaûs1
 = ", CertificateVerify";

603 
°r_dëaûs1
 = ", ClientKeyExchange";

606 
°r_dëaûs1
 = ", Finished";

612 #i‚de‡
OPENSSL_NO_HEARTBEATS


613 i‡(
c⁄ã¡_ty≥
 == 24)

615 
°r_dëaûs1
 = ", Heartbeat";

617 i‡(
Àn
 > 0)

619 ((c⁄° *)
buf
)[0])

622 
°r_dëaûs1
 = ", HeartbeatRequest";

625 
°r_dëaûs1
 = ", HeartbeatResponse";

633 
	`BIO_¥ötf
(
bio
, "%†%s%†[Àngth %04lx]%s%s\n", 
°r_wrôe_p
, 
°r_vîsi⁄
, 
°r_c⁄ã¡_ty≥
, ()
Àn
, 
°r_dëaûs1
, 
°r_dëaûs2
);

635 i‡(
Àn
 > 0)

637 
size_t
 
num
, 
i
;

639 
	`BIO_¥ötf
(
bio
, " ");

640 
num
 = 
Àn
;

642 i‡(
num
 > 16)

643 
num
 = 16;

645 
i
 = 0; i < 
num
; i++)

647 i‡(
i
 % 16 == 0 && i > 0)

648 
	`BIO_¥ötf
(
bio
, "\n ");

649 
	`BIO_¥ötf
(
bio
, " %02x", ((c⁄° *)
buf
)[
i
]);

651 i‡(
i
 < 
Àn
)

652 
	`BIO_¥ötf
(
bio
, " ...");

653 
	`BIO_¥ötf
(
bio
, "\n");

655 ()
	`BIO_Êush
(
bio
);

656 
	}
}

658 
MS_CALLBACK
 
	$é£xt_cb
(
SSL
 *
s
, 
˛õ¡_£rvî
, 
ty≥
,

659 *
d©a
, 
Àn
,

660 *
¨g
)

662 
BIO
 *
bio
 = 
¨g
;

663 *
exäame
;

665 
ty≥
)

667 
TLSEXT_TYPE_£rvî_«me
:

668 
exäame
 = "serverÇame";

671 
TLSEXT_TYPE_max_‰agmít_Àngth
:

672 
exäame
 = "max fragmentÜength";

675 
TLSEXT_TYPE_˛õ¡_˚πifiˇã_uæ
:

676 
exäame
 = "client certificate URL";

679 
TLSEXT_TYPE_åu°ed_ˇ_keys
:

680 
exäame
 = "trusted CA keys";

683 
TLSEXT_TYPE_åunˇãd_hmac
:

684 
exäame
 = "truncated HMAC";

687 
TLSEXT_TYPE_°©us_ªque°
:

688 
exäame
 = "statusÑequest";

691 
TLSEXT_TYPE_u£r_m≠pög
:

692 
exäame
 = "user mapping";

695 
TLSEXT_TYPE_˛õ¡_authz
:

696 
exäame
 = "clientáuthz";

699 
TLSEXT_TYPE_£rvî_authz
:

700 
exäame
 = "serveráuthz";

703 
TLSEXT_TYPE_˚π_ty≥
:

704 
exäame
 = "certÅype";

707 
TLSEXT_TYPE_ñlùtic_curves
:

708 
exäame
 = "elliptic curves";

711 
TLSEXT_TYPE_ec_poöt_f‹m©s
:

712 
exäame
 = "ECÖoint formats";

715 
TLSEXT_TYPE_§p
:

716 
exäame
 = "SRP";

719 
TLSEXT_TYPE_sig«tuª_Æg‹ôhms
:

720 
exäame
 = "signatureálgorithms";

723 
TLSEXT_TYPE_u£_§ç
:

724 
exäame
 = "use SRTP";

727 
TLSEXT_TYPE_hóπbót
:

728 
exäame
 = "heartbeat";

731 
TLSEXT_TYPE_£ssi⁄_tickë
:

732 
exäame
 = "sessionÅicket";

735 
TLSEXT_TYPE_ª√gŸüã
:

736 
exäame
 = "renegotiation info";

739 #ifde‡
TLSEXT_TYPE_›aque_¥f_öput


740 
TLSEXT_TYPE_›aque_¥f_öput
:

741 
exäame
 = "opaque PRF input";

744 #ifde‡
TLSEXT_TYPE_√xt_¥Ÿo_√g


745 
TLSEXT_TYPE_√xt_¥Ÿo_√g
:

746 
exäame
 = "nextÖrotocol";

751 
exäame
 = "unknown";

756 
	`BIO_¥ötf
(
bio
, "TLS %sÉxtension \"%s\" (id=%d),Üen=%d\n",

757 
˛õ¡_£rvî
 ? "server": "client",

758 
exäame
, 
ty≥
, 
Àn
);

759 
	`BIO_dump
(
bio
, (*)
d©a
, 
Àn
);

760 ()
	`BIO_Êush
(
bio
);

761 
	}
}

763 
MS_CALLBACK
 
	$gíî©e_cookõ_ˇŒback
(
SSL
 *
s¶
, *
cookõ
, *
cookõ_Àn
)

765 *
buf„r
, 
ªsu…
[
EVP_MAX_MD_SIZE
];

766 
Àngth
, 
ªsu…Àngth
;

768 
sockaddr
 
ß
;

769 
sockaddr_ö
 
s4
;

770 #i‡
OPENSSL_USE_IPV6


771 
sockaddr_ö6
 
s6
;

773 } 
≥î
;

776 i‡(!
cookõ_öôülized
)

778 i‡(!
	`RAND_byãs
(
cookõ_£¸ë
, 
COOKIE_SECRET_LENGTH
))

780 
	`BIO_¥ötf
(
bio_îr
,"error settingÑandom cookie secret\n");

783 
cookõ_öôülized
 = 1;

787 ()
	`BIO_dgøm_gë_≥î
(
	`SSL_gë_rbio
(
s¶
), &
≥î
);

790 
Àngth
 = 0;

791 
≥î
.
ß
.
ß_Ámûy
)

793 
AF_INET
:

794 
Àngth
 +(
ö_addr
);

795 
Àngth
 +(
≥î
.
s4
.
sö_p‹t
);

797 #i‡
OPENSSL_USE_IPV6


798 
AF_INET6
:

799 
Àngth
 +(
ö6_addr
);

800 
Àngth
 +(
≥î
.
s6
.
sö6_p‹t
);

804 
	`OPENSSL_as£π
(0);

807 
buf„r
 = 
	`OPENSSL_mÆloc
(
Àngth
);

809 i‡(
buf„r
 =
NULL
)

811 
	`BIO_¥ötf
(
bio_îr
,"out of memory\n");

815 
≥î
.
ß
.
ß_Ámûy
)

817 
AF_INET
:

818 
	`mem˝y
(
buf„r
,

819 &
≥î
.
s4
.
sö_p‹t
,

820 (
≥î
.
s4
.
sö_p‹t
));

821 
	`mem˝y
(
buf„r
 + (
≥î
.
s4
.
sö_p‹t
),

822 &
≥î
.
s4
.
sö_addr
,

823 (
ö_addr
));

825 #i‡
OPENSSL_USE_IPV6


826 
AF_INET6
:

827 
	`mem˝y
(
buf„r
,

828 &
≥î
.
s6
.
sö6_p‹t
,

829 (
≥î
.
s6
.
sö6_p‹t
));

830 
	`mem˝y
(
buf„r
 + (
≥î
.
s6
.
sö6_p‹t
),

831 &
≥î
.
s6
.
sö6_addr
,

832 (
ö6_addr
));

836 
	`OPENSSL_as£π
(0);

841 
	`HMAC
(
	`EVP_sha1
(), 
cookõ_£¸ë
, 
COOKIE_SECRET_LENGTH
,

842 
buf„r
, 
Àngth
, 
ªsu…
, &
ªsu…Àngth
);

843 
	`OPENSSL_‰ì
(
buf„r
);

845 
	`mem˝y
(
cookõ
, 
ªsu…
, 
ªsu…Àngth
);

846 *
cookõ_Àn
 = 
ªsu…Àngth
;

849 
	}
}

851 
MS_CALLBACK
 
	$vîify_cookõ_ˇŒback
(
SSL
 *
s¶
, *
cookõ
, 
cookõ_Àn
)

853 *
buf„r
, 
ªsu…
[
EVP_MAX_MD_SIZE
];

854 
Àngth
, 
ªsu…Àngth
;

856 
sockaddr
 
ß
;

857 
sockaddr_ö
 
s4
;

858 #i‡
OPENSSL_USE_IPV6


859 
sockaddr_ö6
 
s6
;

861 } 
≥î
;

864 i‡(!
cookõ_öôülized
)

868 ()
	`BIO_dgøm_gë_≥î
(
	`SSL_gë_rbio
(
s¶
), &
≥î
);

871 
Àngth
 = 0;

872 
≥î
.
ß
.
ß_Ámûy
)

874 
AF_INET
:

875 
Àngth
 +(
ö_addr
);

876 
Àngth
 +(
≥î
.
s4
.
sö_p‹t
);

878 #i‡
OPENSSL_USE_IPV6


879 
AF_INET6
:

880 
Àngth
 +(
ö6_addr
);

881 
Àngth
 +(
≥î
.
s6
.
sö6_p‹t
);

885 
	`OPENSSL_as£π
(0);

888 
buf„r
 = 
	`OPENSSL_mÆloc
(
Àngth
);

890 i‡(
buf„r
 =
NULL
)

892 
	`BIO_¥ötf
(
bio_îr
,"out of memory\n");

896 
≥î
.
ß
.
ß_Ámûy
)

898 
AF_INET
:

899 
	`mem˝y
(
buf„r
,

900 &
≥î
.
s4
.
sö_p‹t
,

901 (
≥î
.
s4
.
sö_p‹t
));

902 
	`mem˝y
(
buf„r
 + (
≥î
.
s4
.
sö_p‹t
),

903 &
≥î
.
s4
.
sö_addr
,

904 (
ö_addr
));

906 #i‡
OPENSSL_USE_IPV6


907 
AF_INET6
:

908 
	`mem˝y
(
buf„r
,

909 &
≥î
.
s6
.
sö6_p‹t
,

910 (
≥î
.
s6
.
sö6_p‹t
));

911 
	`mem˝y
(
buf„r
 + (
≥î
.
s6
.
sö6_p‹t
),

912 &
≥î
.
s6
.
sö6_addr
,

913 (
ö6_addr
));

917 
	`OPENSSL_as£π
(0);

922 
	`HMAC
(
	`EVP_sha1
(), 
cookõ_£¸ë
, 
COOKIE_SECRET_LENGTH
,

923 
buf„r
, 
Àngth
, 
ªsu…
, &
ªsu…Àngth
);

924 
	`OPENSSL_‰ì
(
buf„r
);

926 i‡(
cookõ_Àn
 =
ªsu…Àngth
 && 
	`memcmp
(
ªsu…
, 
cookõ
,Ñesultlength) == 0)

930 
	}
}

	@s_client.c

138 
	~<as£π.h
>

139 
	~<˘y≥.h
>

140 
	~<°dio.h
>

141 
	~<°dlib.h
>

142 
	~<°rög.h
>

143 
	~<›ís¶/e_os2.h
>

144 #ifde‡
OPENSSL_NO_STDIO


145 
	#APPS_WIN16


	)

152 #i‡
deföed
(
OPENSSL_SYS_VMS_DECC
Ë&& !deföed(
__U_INT
)

153 
	#__U_INT


	)

154 
	tu_öt
;

157 
	#USE_SOCKETS


	)

158 
	~"≠ps.h
"

159 
	~<›ís¶/x509.h
>

160 
	~"›ís¶/s¶.h
"

161 
	~<›ís¶/îr.h
>

162 
	~<›ís¶/≥m.h
>

163 
	~<›ís¶/ønd.h
>

164 
	~<›ís¶/oc•.h
>

165 
	~<›ís¶/bn.h
>

166 #i‚de‡
OPENSSL_NO_SRP


167 
	~<›ís¶/§p.h
>

169 
	~"s_≠ps.h
"

170 
	~"timeouts.h
"

171 
	~"s¶/s¶.h
"

173 #i‡(
deföed
(
OPENSSL_SYS_VMS
Ë&& 
__VMS_VER
 < 70000000)

175 #unde‡
FIONBIO


178 #i‡
deföed
(
OPENSSL_SYS_BEOS_R5
)

179 
	~<f˙é.h
>

182 #unde‡
PROG


183 
	#PROG
 
s_˛õ¡_maö


	)

187 
	#SSL_HOST_NAME
 "loˇlho°"

	)

191 #unde‡
BUFSIZZ


192 
	#BUFSIZZ
 1024*8

	)

194 
vîify_dïth
;

195 
vîify_îr‹
;

196 
vîify_ªtu∫_îr‹
;

198 #ifde‡
FIONBIO


199 
	gc_nbio
=0;

201 
	gc_Pau£
=0;

202 
	gc_debug
=0;

203 #i‚de‡
OPENSSL_NO_TLSEXT


204 
	gc_é£xtdebug
=0;

205 
	gc_°©us_ªq
=0;

207 
	gc_msg
=0;

208 
	gc_show˚πs
=0;

210 *
	gkeym©exp‹éabñ
=
NULL
;

211 
	gkeym©exp‹éí
=20;

213 
sc_ußge
();

214 
¥öt_°uff
(
BIO
 *
bîr
,
SSL
 *
c⁄
,
fuŒ
);

215 #i‚de‡
OPENSSL_NO_TLSEXT


216 
oc•_ª•_cb
(
SSL
 *
s
, *
¨g
);

218 
BIO
 *
	gbio_c_out
=
NULL
;

219 
	gc_quõt
=0;

220 
	gc_ign_eof
=0;

222 #i‚de‡
OPENSSL_NO_PSK


224 *
	gpsk_idítôy
="Client_identity";

227 
	$psk_˛õ¡_cb
(
SSL
 *
s¶
, c⁄° *
höt
, *
idítôy
,

228 
max_idítôy_Àn
, *
psk
,

229 
max_psk_Àn
)

231 
psk_Àn
 = 0;

232 
ªt
;

233 
BIGNUM
 *
bn
=
NULL
;

235 i‡(
c_debug
)

236 
	`BIO_¥ötf
(
bio_c_out
, "psk_client_cb\n");

237 i‡(!
höt
)

240 i‡(
c_debug
)

241 
	`BIO_¥ötf
(
bio_c_out
,"NULLÑeceived PSK identity hint, continuingányway\n");

243 i‡(
c_debug
)

244 
	`BIO_¥ötf
(
bio_c_out
, "Re˚ived PSK idítôy höà'%s'\n", 
höt
);

247 
ªt
 = 
	`BIO_¢¥ötf
(
idítôy
, 
max_idítôy_Àn
, "%s", 
psk_idítôy
);

248 i‡(
ªt
 < 0 || (Ïë > 
max_idítôy_Àn
)

249 
out_îr
;

250 i‡(
c_debug
)

251 
	`BIO_¥ötf
(
bio_c_out
, "¸óãd idítôy '%s'Üí=%d\n", 
idítôy
, 
ªt
);

252 
ªt
=
	`BN_hex2bn
(&
bn
, 
psk_key
);

253 i‡(!
ªt
)

255 
	`BIO_¥ötf
(
bio_îr
,"CouldÇŸ c⁄vîàPSK key '%s'ÅÿBIGNUM\n", 
psk_key
);

256 i‡(
bn
)

257 
	`BN_‰ì
(
bn
);

261 i‡(()
	`BN_num_byãs
(
bn
Ë> 
max_psk_Àn
)

263 
	`BIO_¥ötf
(
bio_îr
,"psk buffer of callback isÅoo small (%d) for key (%d)\n",

264 
max_psk_Àn
, 
	`BN_num_byãs
(
bn
));

265 
	`BN_‰ì
(
bn
);

269 
psk_Àn
=
	`BN_bn2bö
(
bn
, 
psk
);

270 
	`BN_‰ì
(
bn
);

271 i‡(
psk_Àn
 == 0)

272 
out_îr
;

274 i‡(
c_debug
)

275 
	`BIO_¥ötf
(
bio_c_out
, "¸óãd PSKÜí=%d\n", 
psk_Àn
);

277  
psk_Àn
;

278 
out_îr
:

279 i‡(
c_debug
)

280 
	`BIO_¥ötf
(
bio_îr
, "Error in PSK client callback\n");

282 
	}
}

285 
	$sc_ußge
()

287 
	`BIO_¥ötf
(
bio_îr
,"usage: s_clientárgs\n");

288 
	`BIO_¥ötf
(
bio_îr
,"\n");

289 
	`BIO_¥ötf
(
bio_îr
," -host host - use -connect instead\n");

290 
	`BIO_¥ötf
(
bio_îr
," -portÖort - use -connect instead\n");

291 
	`BIO_¥ötf
(
bio_îr
," -c⁄√˘ ho°:p‹à- whÿtÿc⁄√˘Åÿ(deÁu… i†%s:%s)\n",
SSL_HOST_NAME
,
PORT_STR
);

293 
	`BIO_¥ötf
(
bio_îr
," -verifyárg -Åurn onÖeer certificate verification\n");

294 
	`BIO_¥ötf
(
bio_îr
," -certárg - certificate fileÅo use, PEM formatássumed\n");

295 
	`BIO_¥ötf
(
bio_îr
," -certformárg - certificate format (PEM or DER) PEM default\n");

296 
	`BIO_¥ötf
(
bio_îr
," -keyárg - Private key fileÅo use, in cert file if\n");

297 
	`BIO_¥ötf
(
bio_îr
,"Çot specified but cert file is.\n");

298 
	`BIO_¥ötf
(
bio_îr
," -keyformárg - key format (PEM or DER) PEM default\n");

299 
	`BIO_¥ötf
(
bio_îr
," -passárg -Örivate key fileÖassÖhrase source\n");

300 
	`BIO_¥ötf
(
bio_îr
," -CApathárg - PEM format directory of CA's\n");

301 
	`BIO_¥ötf
(
bio_îr
," -CAfileárg - PEM format file of CA's\n");

302 
	`BIO_¥ötf
(
bio_îr
," -reconnect - DropándÑe-makeÅhe connection withÅhe same Session-ID\n");

303 
	`BIO_¥ötf
(
bio_îr
," -pause - sleep(1)áfterÉachÑead(2)ánd write(2) system call\n");

304 
	`BIO_¥ötf
(
bio_îr
," -showcerts - showáll certificates inÅhe chain\n");

305 
	`BIO_¥ötf
(
bio_îr
," -debug -Éxtra output\n");

306 #ifde‡
WATT32


307 
	`BIO_¥ötf
(
bio_îr
," -wdebug - WATT-32Åcp debugging\n");

309 
	`BIO_¥ötf
(
bio_îr
," -msg - ShowÖrotocol messages\n");

310 
	`BIO_¥ötf
(
bio_îr
," -nbio_test - more sslÖrotocolÅesting\n");

311 
	`BIO_¥ötf
(
bio_îr
," -state -ÖrintÅhe 'ssl' states\n");

312 #ifde‡
FIONBIO


313 
	`BIO_¥ötf
(
bio_îr
," -nbio - Run withÇon-blocking IO\n");

315 
	`BIO_¥ötf
(
bio_îr
," -crlf - convert LF fromÅerminal into CRLF\n");

316 
	`BIO_¥ötf
(
bio_îr
," -quiet -Ço s_client output\n");

317 
	`BIO_¥ötf
(
bio_îr
," -ign_eof - ignore inputÉof (default when -quiet)\n");

318 
	`BIO_¥ötf
(
bio_îr
," -no_ign_eof - don't ignore inputÉof\n");

319 #i‚de‡
OPENSSL_NO_PSK


320 
	`BIO_¥ötf
(
bio_îr
," -psk_identityárg - PSK identity\n");

321 
	`BIO_¥ötf
(
bio_îr
," -pskárg - PSK in hex (without 0x)\n");

322 #i‚de‡
OPENSSL_NO_JPAKE


323 
	`BIO_¥ötf
(
bio_îr
," -jpakeárg - JPAKE secretÅo use\n");

326 #i‚de‡
OPENSSL_NO_SRP


327 
	`BIO_¥ötf
(
bio_îr
," -srpuser user - SRPáuthentification for 'user'\n");

328 
	`BIO_¥ötf
(
bio_îr
," -srppassárg -Öassword for 'user'\n");

329 
	`BIO_¥ötf
(
bio_îr
," -srp_lateuser - SRP username into second ClientHello message\n");

330 
	`BIO_¥ötf
(
bio_îr
," -srp_moregroups - Tolerate otherÅhanÅhe known g N values.\n");

331 
	`BIO_¥ötf
(
bio_îr
," -§p_°ªngth i¡ - möimÆ mígth i¿bô†f‹ N (deÁu… %d).\n",
SRP_MINIMAL_N
);

333 
	`BIO_¥ötf
(
bio_îr
," -ssl2 - just use SSLv2\n");

334 
	`BIO_¥ötf
(
bio_îr
," -ssl3 - just use SSLv3\n");

335 
	`BIO_¥ötf
(
bio_îr
," -tls1_2 - just use TLSv1.2\n");

336 
	`BIO_¥ötf
(
bio_îr
," -tls1_1 - just use TLSv1.1\n");

337 
	`BIO_¥ötf
(
bio_îr
," -tls1 - just use TLSv1\n");

338 
	`BIO_¥ötf
(
bio_îr
," -dtls1 - just use DTLSv1\n");

339 
	`BIO_¥ötf
(
bio_îr
," -mtu - setÅheÜinkÜayer MTU\n");

340 
	`BIO_¥ötf
(
bio_îr
," -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 -Åurn offÅhatÖrotocol\n");

341 
	`BIO_¥ötf
(
bio_îr
," -bugs - Switch onáll SSL implementation bug workarounds\n");

342 
	`BIO_¥ötf
(
bio_îr
," -serverpref - Use server's cipherÖreferences (only SSLv2)\n");

343 
	`BIO_¥ötf
(
bio_îr
," -cipher -Öreferred cipherÅo use, useÅhe 'openssl ciphers'\n");

344 
	`BIO_¥ötf
(
bio_îr
," commandÅo see what isávailable\n");

345 
	`BIO_¥ötf
(
bio_îr
," -starttlsÖrot - useÅhe STARTTLS command before starting TLS\n");

346 
	`BIO_¥ötf
(
bio_îr
," forÅhoseÖrotocolsÅhat support it, where\n");

347 
	`BIO_¥ötf
(
bio_îr
," 'prot' defines which oneÅoássume. Currently,\n");

348 
	`BIO_¥ötf
(
bio_îr
," only \"smtp\", \"pop3\", \"imap\", \"ftp\"ánd \"xmpp\"\n");

349 
	`BIO_¥ötf
(
bio_îr
,"áre supported.\n");

350 #i‚de‡
OPENSSL_NO_ENGINE


351 
	`BIO_¥ötf
(
bio_îr
," -engine id - Initialiseánd useÅhe specifiedÉngine\n");

353 
	`BIO_¥ötf
(
bio_îr
," -ønd fûe%cfûe%c...\n", 
LIST_SEPARATOR_CHAR
, LIST_SEPARATOR_CHAR);

354 
	`BIO_¥ötf
(
bio_îr
," -sess_outárg - fileÅo write SSL sessionÅo\n");

355 
	`BIO_¥ötf
(
bio_îr
," -sess_inárg - fileÅoÑead SSL session from\n");

356 #i‚de‡
OPENSSL_NO_TLSEXT


357 
	`BIO_¥ötf
(
bio_îr
," -servername host - Set TLSÉxtension servername in ClientHello\n");

358 
	`BIO_¥ötf
(
bio_îr
," -tlsextdebug - hex dump ofáll TLSÉxtensionsÑeceived\n");

359 
	`BIO_¥ötf
(
bio_îr
," -status -Ñequest certificate status from server\n");

360 
	`BIO_¥ötf
(
bio_îr
," -no_ticket - disable use of RFC4507bis sessionÅickets\n");

361 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


362 
	`BIO_¥ötf
(
bio_îr
," -nextprotonegárg -Énable NPNÉxtension, consideringÇamedÖrotocols supported (comma-separatedÜist)\n");

365 
	`BIO_¥ötf
(
bio_îr
," -legacy_renegotiation -Énable use ofÜegacyÑenegotiation (dangerous)\n");

366 #i‚de‡
OPENSSL_NO_SRTP


367 
	`BIO_¥ötf
(
bio_îr
," -use_srtpÖrofiles - Offer SRTP key management withá colon-separatedÖrofileÜist\n");

369 
	`BIO_¥ötf
(
bio_îr
," -keymatexportÜabel - Export keying material usingÜabel\n");

370 
	`BIO_¥ötf
(
bio_îr
," -keymatexportlenÜen - ExportÜen bytes of keying material (default 20)\n");

371 
	}
}

373 #i‚de‡
OPENSSL_NO_TLSEXT


376 
	sé£xt˘x_°
 {

377 
BIO
 * 
	mbiodebug
;

378 
	mack
;

379 } 
	té£xt˘x
;

382 
MS_CALLBACK
 
	$s¶_£rvî«me_cb
(
SSL
 *
s
, *
ad
, *
¨g
)

384 
é£xt˘x
 * 
p
 = (é£xt˘x *Ë
¨g
;

385 c⁄° * 
hn

	`SSL_gë_£rvî«me
(
s
, 
TLSEXT_NAMETYPE_ho°_«me
);

386 i‡(
	`SSL_gë_£rvî«me_ty≥
(
s
) != -1)

387 
p
->
ack
 = !
	`SSL_£ssi⁄_ªu£d
(
s
Ë&& 
hn
 !
NULL
;

389 
	`BIO_¥ötf
(
bio_îr
,"Can't use SSL_get_servername\n");

391  
SSL_TLSEXT_ERR_OK
;

392 
	}
}

394 #i‚de‡
OPENSSL_NO_SRP


397 
	s§p_¨g_°


399 *
	m§µassö
;

400 *
	m§∂ogö
;

401 
	mmsg
;

402 
	mdebug
;

403 
	mamp
;

404 
	m°ªngth
 ;

405 } 
	tSRP_ARG
;

407 
	#SRP_NUMBER_ITERATIONS_FOR_PRIME
 64

	)

409 
	$§p_Vîify_N_™d_g
(
BIGNUM
 *
N
, BIGNUM *
g
)

411 
BN_CTX
 *
bn_˘x
 = 
	`BN_CTX_√w
();

412 
BIGNUM
 *
p
 = 
	`BN_√w
();

413 
BIGNUM
 *
r
 = 
	`BN_√w
();

414 
ªt
 =

415 
g
 !
NULL
 && 
N
 !NULL && 
bn_˘x
 !NULL && 
	`BN_is_odd
(N) &&

416 
	`BN_is_¥ime_ex
(
N
, 
SRP_NUMBER_ITERATIONS_FOR_PRIME
, 
bn_˘x
, 
NULL
) &&

417 
p
 !
NULL
 && 
	`BN_rshi·1
’, 
N
) &&

420 
	`BN_is_¥ime_ex
(
p
, 
SRP_NUMBER_ITERATIONS_FOR_PRIME
, 
bn_˘x
, 
NULL
) &&

421 
r
 !
NULL
 &&

424 
	`BN_mod_exp
(
r
, 
g
, 
p
, 
N
, 
bn_˘x
) &&

425 
	`BN_add_w‹d
(
r
, 1) &&

426 
	`BN_cmp
(
r
, 
N
) == 0;

428 if(
r
)

429 
	`BN_‰ì
(
r
);

430 if(
p
)

431 
	`BN_‰ì
(
p
);

432 if(
bn_˘x
)

433 
	`BN_CTX_‰ì
(
bn_˘x
);

434  
ªt
;

435 
	}
}

452 
MS_CALLBACK
 
	$s¶_§p_vîify_∑øm_cb
(
SSL
 *
s
, *
¨g
)

454 
SRP_ARG
 *
§p_¨g
 = (SRP_ARG *)
¨g
;

455 
BIGNUM
 *
N
 = 
NULL
, *
g
 = NULL;

456 i‡(!(
N
 = 
	`SSL_gë_§p_N
(
s
)Ë|| !(
g
 = 
	`SSL_gë_§p_g
(s)))

458 i‡(
§p_¨g
->
debug
 || sΩ_¨g->
msg
 || sΩ_¨g->
amp
 == 1)

460 
	`BIO_¥ötf
(
bio_îr
, "SRPÖarameters:\n");

461 
	`BIO_¥ötf
(
bio_îr
,"\tN="); 
	`BN_¥öt
(bio_îr,
N
);

462 
	`BIO_¥ötf
(
bio_îr
,"\n\tg="); 
	`BN_¥öt
(bio_îr,
g
);

463 
	`BIO_¥ötf
(
bio_îr
,"\n");

466 i‡(
	`SRP_check_known_gN_∑øm
(
g
,
N
))

469 i‡(
§p_¨g
->
amp
 == 1)

471 i‡(
§p_¨g
->
debug
)

472 
	`BIO_¥ötf
(
bio_îr
, "SRPÖaram Nánd gáreÇot knownÖarams, goingÅo check deeper.\n");

478 i‡(
	`BN_num_bôs
(
g
Ë<
BN_BITS
 && 
	`§p_Vîify_N_™d_g
(
N
,g))

481 
	`BIO_¥ötf
(
bio_îr
, "SRPÖaram Nánd gÑejected.\n");

483 
	}
}

485 
	#PWD_STRLEN
 1024

	)

487 * 
MS_CALLBACK
 
	$s¶_give_§p_˛õ¡_pwd_cb
(
SSL
 *
s
, *
¨g
)

489 
SRP_ARG
 *
§p_¨g
 = (SRP_ARG *)
¨g
;

490 *
∑ss
 = (*)
	`OPENSSL_mÆloc
(
PWD_STRLEN
+1);

491 
PW_CB_DATA
 
cb_tmp
;

492 
l
;

494 
cb_tmp
.
∑ssw‹d
 = (*)
§p_¨g
->
§µassö
;

495 
cb_tmp
.
¥om±_öfo
 = "SRP user";

496 i‡((
l
 = 
	`∑ssw‹d_ˇŒback
(
∑ss
, 
PWD_STRLEN
, 0, &
cb_tmp
))<0)

498 
	`BIO_¥ötf
 (
bio_îr
, "Can'tÑead Password\n");

499 
	`OPENSSL_‰ì
(
∑ss
);

500  
NULL
;

502 *(
∑ss
+
l
)= '\0';

504  
∑ss
;

505 
	}
}

508 #i‚de‡
OPENSSL_NO_SRTP


509 *
	g§ç_¥ofûes
 = 
NULL
;

512 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


514 
	sé£xäexçrŸo˘x_°
 {

515 *
	md©a
;

516 
	mÀn
;

517 
	m°©us
;

518 } 
	té£xäexçrŸo˘x
;

520 
é£xäexçrŸo˘x
 
	g√xt_¥Ÿo
;

522 
	$√xt_¥Ÿo_cb
(
SSL
 *
s
, **
out
, *
ouéí
, c⁄° *
ö
, 
öÀn
, *
¨g
)

524 
é£xäexçrŸo˘x
 *
˘x
 = 
¨g
;

526 i‡(!
c_quõt
)

529 
i
;

530 
	`BIO_¥ötf
(
bio_c_out
, "Protocolsádvertised by server: ");

531 
i
 = 0; i < 
öÀn
; )

533 i‡(
i
)

534 
	`BIO_wrôe
(
bio_c_out
, ", ", 2);

535 
	`BIO_wrôe
(
bio_c_out
, &
ö
[
i
 + 1], in[i]);

536 
i
 +
ö
[i] + 1;

538 
	`BIO_wrôe
(
bio_c_out
, "\n", 1);

541 
˘x
->
°©us
 = 
	`SSL_£À˘_√xt_¥Ÿo
(
out
, 
ouéí
, 
ö
, 
öÀn
, ctx->
d©a
, ctx->
Àn
);

542  
SSL_TLSEXT_ERR_OK
;

543 
	}
}

549 
	mPROTO_OFF
 = 0,

550 
	mPROTO_SMTP
,

551 
	mPROTO_POP3
,

552 
	mPROTO_IMAP
,

553 
	mPROTO_FTP
,

554 
	mPROTO_XMPP


557 
SSL_£t_no_em±y_‰ag
(
SSL
 *);

558 
MAIN
(, **);

560 
	$MAIN
(
¨gc
, **
¨gv
)

562 
off
=0, 
˛r
=0;

563 
SSL
 *
c⁄
=
NULL
;

564 #i‚de‡
OPENSSL_NO_KRB5


565 
KSSL_CTX
 *
k˘x
;

567 
s
,
k
,
width
,
°©e
=0;

568 *
cbuf
=
NULL
,*
sbuf
=NULL,*
mbuf
=NULL;

569 
cbuf_Àn
,
cbuf_off
;

570 
sbuf_Àn
,
sbuf_off
;

571 
fd_£t
 
ªadfds
,
wrôefds
;

572 
p‹t
=
PORT
;

573 
fuŒ_log
=1;

574 *
ho°
=
SSL_HOST_NAME
;

575 *
˚π_fûe
=
NULL
,*
key_fûe
=NULL;

576 
˚π_f‹m©
 = 
FORMAT_PEM
, 
key_f‹m©
 = FORMAT_PEM;

577 *
∑sßrg
 = 
NULL
, *
∑ss
 = NULL;

578 
X509
 *
˚π
 = 
NULL
;

579 
EVP_PKEY
 *
key
 = 
NULL
;

580 *
CA∑th
=
NULL
,*
CAfûe
=NULL,*
cùhî
=NULL;

581 
ªc⁄√˘
=0,
bad›
=0,
vîify
=
SSL_VERIFY_NONE
,
bugs
=0;

582 
¸lf
=0;

583 
wrôe_ây
,
ªad_ây
,
wrôe_s¶
,
ªad_s¶
,
ây_⁄
,
s¶_≥ndög
;

584 
SSL_CTX
 *
˘x
=
NULL
;

585 
ªt
=1,
ö_öô
=1,
i
,
nbio_ã°
=0;

586 
°¨âls_¥Ÿo
 = 
PROTO_OFF
;

587 
¥exô
 = 0;

588 
X509_VERIFY_PARAM
 *
vpm
 = 
NULL
;

589 
bad¨g
 = 0;

590 c⁄° 
SSL_METHOD
 *
mëh
=
NULL
;

591 
sockë_ty≥
=
SOCK_STREAM
;

592 
BIO
 *
sbio
;

593 *
öønd
=
NULL
;

594 
mbuf_Àn
=0;

595 
timevÆ
 
timeout
, *
timeouç
;

596 #i‚de‡
OPENSSL_NO_ENGINE


597 *
ígöe_id
=
NULL
;

598 *
s¶_˛õ¡_ígöe_id
=
NULL
;

599 
ENGINE
 *
s¶_˛õ¡_ígöe
=
NULL
;

601 
ENGINE
 *
e
=
NULL
;

602 #i‡
	`deföed
(
OPENSSL_SYS_WINDOWS
Ë|| deföed(
OPENSSL_SYS_MSDOS
Ë|| deföed(
OPENSSL_SYS_NETWARE
Ë|| deföed(
OPENSSL_SYS_BEOS_R5
)

603 
timevÆ
 
tv
;

604 #i‡
	`deföed
(
OPENSSL_SYS_BEOS_R5
)

605 
°dö_£t
 = 0;

608 #i‚de‡
OPENSSL_NO_TLSEXT


609 *
£rvî«me
 = 
NULL
;

610 
é£xt˘x
 
é£xtcbp
 =

611 {
NULL
,0};

612 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


613 c⁄° *
√xt_¥Ÿo_√g_ö
 = 
NULL
;

616 *
£ss_ö
 = 
NULL
;

617 *
£ss_out
 = 
NULL
;

618 
sockaddr
 
≥î
;

619 
≥îÀn
 = (
≥î
);

620 
íabÀ_timeouts
 = 0 ;

621 
sockë_mtu
 = 0;

622 #i‚de‡
OPENSSL_NO_JPAKE


623 *
j∑ke_£¸ë
 = 
NULL
;

625 #i‚de‡
OPENSSL_NO_SRP


626 * 
§µass
 = 
NULL
;

627 
§p_œãu£r
 = 0;

628 
SRP_ARG
 
§p_¨g
 = {
NULL
,NULL,0,0,0,1024};

631 
mëh
=
	`SSLv23_˛õ¡_mëhod
();

633 
	`≠ps_°¨tup
();

634 
c_Pau£
=0;

635 
c_quõt
=0;

636 
c_ign_eof
=0;

637 
c_debug
=0;

638 
c_msg
=0;

639 
c_show˚πs
=0;

641 i‡(
bio_îr
 =
NULL
)

642 
bio_îr
=
	`BIO_√w_Â
(
°dîr
,
BIO_NOCLOSE
);

644 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

645 
íd
;

647 i‡–((
cbuf
=
	`OPENSSL_mÆloc
(
BUFSIZZ
)Ë=
NULL
) ||

648 ((
sbuf
=
	`OPENSSL_mÆloc
(
BUFSIZZ
)Ë=
NULL
) ||

649 ((
mbuf
=
	`OPENSSL_mÆloc
(
BUFSIZZ
)Ë=
NULL
))

651 
	`BIO_¥ötf
(
bio_îr
,"out of memory\n");

652 
íd
;

655 
vîify_dïth
=0;

656 
vîify_îr‹
=
X509_V_OK
;

657 #ifde‡
FIONBIO


658 
c_nbio
=0;

661 
¨gc
--;

662 
¨gv
++;

663 
¨gc
 >= 1)

665 i‡(
	`°rcmp
(*
¨gv
,"-host") == 0)

667 i‡(--
¨gc
 < 1Ë
bad
;

668 
ho°
*(++
¨gv
);

670 i‡(
	`°rcmp
(*
¨gv
,"-port") == 0)

672 i‡(--
¨gc
 < 1Ë
bad
;

673 
p‹t
=
	`©oi
(*(++
¨gv
));

674 i‡(
p‹t
 =0Ë
bad
;

676 i‡(
	`°rcmp
(*
¨gv
,"-connect") == 0)

678 i‡(--
¨gc
 < 1Ë
bad
;

679 i‡(!
	`exåa˘_ho°_p‹t
(*(++
¨gv
),&
ho°
,
NULL
,&
p‹t
))

680 
bad
;

682 i‡(
	`°rcmp
(*
¨gv
,"-verify") == 0)

684 
vîify
=
SSL_VERIFY_PEER
;

685 i‡(--
¨gc
 < 1Ë
bad
;

686 
vîify_dïth
=
	`©oi
(*(++
¨gv
));

687 
	`BIO_¥ötf
(
bio_îr
,"vîify dïth i†%d\n",
vîify_dïth
);

689 i‡(
	`°rcmp
(*
¨gv
,"-cert") == 0)

691 i‡(--
¨gc
 < 1Ë
bad
;

692 
˚π_fûe
*(++
¨gv
);

694 i‡(
	`°rcmp
(*
¨gv
,"-sess_out") == 0)

696 i‡(--
¨gc
 < 1Ë
bad
;

697 
£ss_out
 = *(++
¨gv
);

699 i‡(
	`°rcmp
(*
¨gv
,"-sess_in") == 0)

701 i‡(--
¨gc
 < 1Ë
bad
;

702 
£ss_ö
 = *(++
¨gv
);

704 i‡(
	`°rcmp
(*
¨gv
,"-certform") == 0)

706 i‡(--
¨gc
 < 1Ë
bad
;

707 
˚π_f‹m©
 = 
	`°r2fmt
(*(++
¨gv
));

709 i‡(
	`¨gs_vîify
(&
¨gv
, &
¨gc
, &
bad¨g
, 
bio_îr
, &
vpm
))

711 i‡(
bad¨g
)

712 
bad
;

715 i‡(
	`°rcmp
(*
¨gv
,"-verify_return_error") == 0)

716 
vîify_ªtu∫_îr‹
 = 1;

717 i‡(
	`°rcmp
(*
¨gv
,"-prexit") == 0)

718 
¥exô
=1;

719 i‡(
	`°rcmp
(*
¨gv
,"-crlf") == 0)

720 
¸lf
=1;

721 i‡(
	`°rcmp
(*
¨gv
,"-quiet") == 0)

723 
c_quõt
=1;

724 
c_ign_eof
=1;

726 i‡(
	`°rcmp
(*
¨gv
,"-ign_eof") == 0)

727 
c_ign_eof
=1;

728 i‡(
	`°rcmp
(*
¨gv
,"-no_ign_eof") == 0)

729 
c_ign_eof
=0;

730 i‡(
	`°rcmp
(*
¨gv
,"-pause") == 0)

731 
c_Pau£
=1;

732 i‡(
	`°rcmp
(*
¨gv
,"-debug") == 0)

733 
c_debug
=1;

734 #i‚de‡
OPENSSL_NO_TLSEXT


735 i‡(
	`°rcmp
(*
¨gv
,"-tlsextdebug") == 0)

736 
c_é£xtdebug
=1;

737 i‡(
	`°rcmp
(*
¨gv
,"-status") == 0)

738 
c_°©us_ªq
=1;

740 #ifde‡
WATT32


741 i‡(
	`°rcmp
(*
¨gv
,"-wdebug") == 0)

742 
	`dbug_öô
();

744 i‡(
	`°rcmp
(*
¨gv
,"-msg") == 0)

745 
c_msg
=1;

746 i‡(
	`°rcmp
(*
¨gv
,"-showcerts") == 0)

747 
c_show˚πs
=1;

748 i‡(
	`°rcmp
(*
¨gv
,"-nbio_test") == 0)

749 
nbio_ã°
=1;

750 i‡(
	`°rcmp
(*
¨gv
,"-state") == 0)

751 
°©e
=1;

752 #i‚de‡
OPENSSL_NO_PSK


753 i‡(
	`°rcmp
(*
¨gv
,"-psk_identity") == 0)

755 i‡(--
¨gc
 < 1Ë
bad
;

756 
psk_idítôy
=*(++
¨gv
);

758 i‡(
	`°rcmp
(*
¨gv
,"-psk") == 0)

760 
size_t
 
j
;

762 i‡(--
¨gc
 < 1Ë
bad
;

763 
psk_key
=*(++
¨gv
);

764 
j
 = 0; j < 
	`°æí
(
psk_key
); j++)

766 i‡(
	`isxdigô
(()
psk_key
[
j
]))

768 
	`BIO_¥ötf
(
bio_îr
,"NŸá hexÇumbî '%s'\n",*
¨gv
);

769 
bad
;

773 #i‚de‡
OPENSSL_NO_SRP


774 i‡(
	`°rcmp
(*
¨gv
,"-srpuser") == 0)

776 i‡(--
¨gc
 < 1Ë
bad
;

777 
§p_¨g
.
§∂ogö
*(++
¨gv
);

778 
mëh
=
	`TLSv1_˛õ¡_mëhod
();

780 i‡(
	`°rcmp
(*
¨gv
,"-srppass") == 0)

782 i‡(--
¨gc
 < 1Ë
bad
;

783 
§µass
*(++
¨gv
);

784 
mëh
=
	`TLSv1_˛õ¡_mëhod
();

786 i‡(
	`°rcmp
(*
¨gv
,"-srp_strength") == 0)

788 i‡(--
¨gc
 < 1Ë
bad
;

789 
§p_¨g
.
°ªngth
=
	`©oi
(*(++
¨gv
));

790 
	`BIO_¥ötf
(
bio_îr
,"SRP möimÆÜígth f‹ N i†%d\n",
§p_¨g
.
°ªngth
);

791 
mëh
=
	`TLSv1_˛õ¡_mëhod
();

793 i‡(
	`°rcmp
(*
¨gv
,"-srp_lateuser") == 0)

795 
§p_œãu£r
= 1;

796 
mëh
=
	`TLSv1_˛õ¡_mëhod
();

798 i‡(
	`°rcmp
(*
¨gv
,"-srp_moregroups") == 0)

800 
§p_¨g
.
amp
=1;

801 
mëh
=
	`TLSv1_˛õ¡_mëhod
();

804 #i‚de‡
OPENSSL_NO_SSL2


805 i‡(
	`°rcmp
(*
¨gv
,"-ssl2") == 0)

806 
mëh
=
	`SSLv2_˛õ¡_mëhod
();

808 #i‚de‡
OPENSSL_NO_SSL3


809 i‡(
	`°rcmp
(*
¨gv
,"-ssl3") == 0)

810 
mëh
=
	`SSLv3_˛õ¡_mëhod
();

812 #i‚de‡
OPENSSL_NO_TLS1


813 i‡(
	`°rcmp
(*
¨gv
,"-tls1_2") == 0)

814 
mëh
=
	`TLSv1_2_˛õ¡_mëhod
();

815 i‡(
	`°rcmp
(*
¨gv
,"-tls1_1") == 0)

816 
mëh
=
	`TLSv1_1_˛õ¡_mëhod
();

817 i‡(
	`°rcmp
(*
¨gv
,"-tls1") == 0)

818 
mëh
=
	`TLSv1_˛õ¡_mëhod
();

820 #i‚de‡
OPENSSL_NO_DTLS1


821 i‡(
	`°rcmp
(*
¨gv
,"-dtls1") == 0)

823 
mëh
=
	`DTLSv1_˛õ¡_mëhod
();

824 
sockë_ty≥
=
SOCK_DGRAM
;

826 i‡(
	`°rcmp
(*
¨gv
,"-timeout") == 0)

827 
íabÀ_timeouts
=1;

828 i‡(
	`°rcmp
(*
¨gv
,"-mtu") == 0)

830 i‡(--
¨gc
 < 1Ë
bad
;

831 
sockë_mtu
 = 
	`©ﬁ
(*(++
¨gv
));

834 i‡(
	`°rcmp
(*
¨gv
,"-bugs") == 0)

835 
bugs
=1;

836 i‡(
	`°rcmp
(*
¨gv
,"-keyform") == 0)

838 i‡(--
¨gc
 < 1Ë
bad
;

839 
key_f‹m©
 = 
	`°r2fmt
(*(++
¨gv
));

841 i‡(
	`°rcmp
(*
¨gv
,"-pass") == 0)

843 i‡(--
¨gc
 < 1Ë
bad
;

844 
∑sßrg
 = *(++
¨gv
);

846 i‡(
	`°rcmp
(*
¨gv
,"-key") == 0)

848 i‡(--
¨gc
 < 1Ë
bad
;

849 
key_fûe
*(++
¨gv
);

851 i‡(
	`°rcmp
(*
¨gv
,"-reconnect") == 0)

853 
ªc⁄√˘
=5;

855 i‡(
	`°rcmp
(*
¨gv
,"-CApath") == 0)

857 i‡(--
¨gc
 < 1Ë
bad
;

858 
CA∑th
*(++
¨gv
);

860 i‡(
	`°rcmp
(*
¨gv
,"-CAfile") == 0)

862 i‡(--
¨gc
 < 1Ë
bad
;

863 
CAfûe
*(++
¨gv
);

865 i‡(
	`°rcmp
(*
¨gv
,"-no_tls1_2") == 0)

866 
off
|=
SSL_OP_NO_TLSv1_2
;

867 i‡(
	`°rcmp
(*
¨gv
,"-no_tls1_1") == 0)

868 
off
|=
SSL_OP_NO_TLSv1_1
;

869 i‡(
	`°rcmp
(*
¨gv
,"-no_tls1") == 0)

870 
off
|=
SSL_OP_NO_TLSv1
;

871 i‡(
	`°rcmp
(*
¨gv
,"-no_ssl3") == 0)

872 
off
|=
SSL_OP_NO_SSLv3
;

873 i‡(
	`°rcmp
(*
¨gv
,"-no_ssl2") == 0)

874 
off
|=
SSL_OP_NO_SSLv2
;

875 i‡(
	`°rcmp
(*
¨gv
,"-no_comp") == 0)

876 { 
off
|=
SSL_OP_NO_COMPRESSION
; }

877 #i‚de‡
OPENSSL_NO_TLSEXT


878 i‡(
	`°rcmp
(*
¨gv
,"-no_ticket") == 0)

879 { 
off
|=
SSL_OP_NO_TICKET
; }

880 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


881 i‡(
	`°rcmp
(*
¨gv
,"-nextprotoneg") == 0)

883 i‡(--
¨gc
 < 1Ë
bad
;

884 
√xt_¥Ÿo_√g_ö
 = *(++
¨gv
);

888 i‡(
	`°rcmp
(*
¨gv
,"-serverpref") == 0)

889 
off
|=
SSL_OP_CIPHER_SERVER_PREFERENCE
;

890 i‡(
	`°rcmp
(*
¨gv
,"-legacy_renegotiation") == 0)

891 
off
|=
SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION
;

892 i‡(
	`°rcmp
(*
¨gv
,"-legacy_server_connect") == 0)

893 { 
off
|=
SSL_OP_LEGACY_SERVER_CONNECT
; }

894 i‡(
	`°rcmp
(*
¨gv
,"-no_legacy_server_connect") == 0)

895 { 
˛r
|=
SSL_OP_LEGACY_SERVER_CONNECT
; }

896 i‡(
	`°rcmp
(*
¨gv
,"-cipher") == 0)

898 i‡(--
¨gc
 < 1Ë
bad
;

899 
cùhî
*(++
¨gv
);

901 #ifde‡
FIONBIO


902 i‡(
	`°rcmp
(*
¨gv
,"-nbio") == 0)

903 { 
c_nbio
=1; }

905 i‡(
	`°rcmp
(*
¨gv
,"-starttls") == 0)

907 i‡(--
¨gc
 < 1Ë
bad
;

908 ++
¨gv
;

909 i‡(
	`°rcmp
(*
¨gv
,"smtp") == 0)

910 
°¨âls_¥Ÿo
 = 
PROTO_SMTP
;

911 i‡(
	`°rcmp
(*
¨gv
,"pop3") == 0)

912 
°¨âls_¥Ÿo
 = 
PROTO_POP3
;

913 i‡(
	`°rcmp
(*
¨gv
,"imap") == 0)

914 
°¨âls_¥Ÿo
 = 
PROTO_IMAP
;

915 i‡(
	`°rcmp
(*
¨gv
,"ftp") == 0)

916 
°¨âls_¥Ÿo
 = 
PROTO_FTP
;

917 i‡(
	`°rcmp
(*
¨gv
, "xmpp") == 0)

918 
°¨âls_¥Ÿo
 = 
PROTO_XMPP
;

920 
bad
;

922 #i‚de‡
OPENSSL_NO_ENGINE


923 i‡(
	`°rcmp
(*
¨gv
,"-engine") == 0)

925 i‡(--
¨gc
 < 1Ë
bad
;

926 
ígöe_id
 = *(++
¨gv
);

928 i‡(
	`°rcmp
(*
¨gv
,"-ssl_client_engine") == 0)

930 i‡(--
¨gc
 < 1Ë
bad
;

931 
s¶_˛õ¡_ígöe_id
 = *(++
¨gv
);

934 i‡(
	`°rcmp
(*
¨gv
,"-rand") == 0)

936 i‡(--
¨gc
 < 1Ë
bad
;

937 
öønd
*(++
¨gv
);

939 #i‚de‡
OPENSSL_NO_TLSEXT


940 i‡(
	`°rcmp
(*
¨gv
,"-servername") == 0)

942 i‡(--
¨gc
 < 1Ë
bad
;

943 
£rvî«me
*(++
¨gv
);

947 #i‚de‡
OPENSSL_NO_JPAKE


948 i‡(
	`°rcmp
(*
¨gv
,"-jpake") == 0)

950 i‡(--
¨gc
 < 1Ë
bad
;

951 
j∑ke_£¸ë
 = *++
¨gv
;

954 #i‚de‡
OPENSSL_NO_SRTP


955 i‡(
	`°rcmp
(*
¨gv
,"-use_srtp") == 0)

957 i‡(--
¨gc
 < 1Ë
bad
;

958 
§ç_¥ofûes
 = *(++
¨gv
);

961 i‡(
	`°rcmp
(*
¨gv
,"-keymatexport") == 0)

963 i‡(--
¨gc
 < 1Ë
bad
;

964 
keym©exp‹éabñ
*(++
¨gv
);

966 i‡(
	`°rcmp
(*
¨gv
,"-keymatexportlen") == 0)

968 i‡(--
¨gc
 < 1Ë
bad
;

969 
keym©exp‹éí
=
	`©oi
(*(++
¨gv
));

970 i‡(
keym©exp‹éí
 =0Ë
bad
;

974 
	`BIO_¥ötf
(
bio_îr
,"unknow¿›ti⁄ %s\n",*
¨gv
);

975 
bad›
=1;

978 
¨gc
--;

979 
¨gv
++;

981 i‡(
bad›
)

983 
bad
:

984 
	`sc_ußge
();

985 
íd
;

988 #i‡!
	`deföed
(
OPENSSL_NO_JPAKE
Ë&& !deföed(
OPENSSL_NO_PSK
)

989 i‡(
j∑ke_£¸ë
)

991 i‡(
psk_key
)

993 
	`BIO_¥ötf
(
bio_îr
,

995 
íd
;

997 
psk_idítôy
 = "JPAKE";

998 i‡(
cùhî
)

1000 
	`BIO_¥ötf
(
bio_îr
, "JPAKE sets cipherÅo PSK\n");

1001 
íd
;

1003 
cùhî
 = "PSK";

1007 
	`O≥nSSL_add_s¶_Æg‹ôhms
();

1008 
	`SSL_lﬂd_îr‹_°rögs
();

1010 #i‡!
	`deföed
(
OPENSSL_NO_TLSEXT
Ë&& !deföed(
OPENSSL_NO_NEXTPROTONEG
)

1011 
√xt_¥Ÿo
.
°©us
 = -1;

1012 i‡(
√xt_¥Ÿo_√g_ö
)

1014 
√xt_¥Ÿo
.
d©a
 = 
	`√xt_¥Ÿos_∑r£
(&√xt_¥Ÿo.
Àn
, 
√xt_¥Ÿo_√g_ö
);

1015 i‡(
√xt_¥Ÿo
.
d©a
 =
NULL
)

1017 
	`BIO_¥ötf
(
bio_îr
, "ErrorÖarsing -nextprotonegárgument\n");

1018 
íd
;

1022 
√xt_¥Ÿo
.
d©a
 = 
NULL
;

1025 #i‚de‡
OPENSSL_NO_ENGINE


1026 
e
 = 
	`£tup_ígöe
(
bio_îr
, 
ígöe_id
, 1);

1027 i‡(
s¶_˛õ¡_ígöe_id
)

1029 
s¶_˛õ¡_ígöe
 = 
	`ENGINE_by_id
(
s¶_˛õ¡_ígöe_id
);

1030 i‡(!
s¶_˛õ¡_ígöe
)

1032 
	`BIO_¥ötf
(
bio_îr
,

1034 
íd
;

1039 i‡(!
	`≠p_∑sswd
(
bio_îr
, 
∑sßrg
, 
NULL
, &
∑ss
, NULL))

1041 
	`BIO_¥ötf
(
bio_îr
, "Error gettingÖassword\n");

1042 
íd
;

1045 i‡(
key_fûe
 =
NULL
)

1046 
key_fûe
 = 
˚π_fûe
;

1049 i‡(
key_fûe
)

1053 
key
 = 
	`lﬂd_key
(
bio_îr
, 
key_fûe
, 
key_f‹m©
, 0, 
∑ss
, 
e
,

1055 i‡(!
key
)

1057 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1058 
íd
;

1063 i‡(
˚π_fûe
)

1066 
˚π
 = 
	`lﬂd_˚π
(
bio_îr
,
˚π_fûe
,
˚π_f‹m©
,

1067 
NULL
, 
e
, "client certificate file");

1069 i‡(!
˚π
)

1071 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1072 
íd
;

1076 i‡(!
	`≠p_RAND_lﬂd_fûe
(
NULL
, 
bio_îr
, 1Ë&& 
öønd
 == NULL

1077 && !
	`RAND_°©us
())

1079 
	`BIO_¥ötf
(
bio_îr
,"warning,Çot muchÉxtraÑandom data, consider usingÅhe -rand option\n");

1081 i‡(
öønd
 !
NULL
)

1082 
	`BIO_¥ötf
(
bio_îr
,"%ld semi-random bytesÜoaded\n",

1083 
	`≠p_RAND_lﬂd_fûes
(
öønd
));

1085 i‡(
bio_c_out
 =
NULL
)

1087 i‡(
c_quõt
 && !
c_debug
 && !
c_msg
)

1089 
bio_c_out
=
	`BIO_√w
(
	`BIO_s_nuŒ
());

1093 i‡(
bio_c_out
 =
NULL
)

1094 
bio_c_out
=
	`BIO_√w_Â
(
°dout
,
BIO_NOCLOSE
);

1098 #i‚de‡
OPENSSL_NO_SRP


1099 if(!
	`≠p_∑sswd
(
bio_îr
, 
§µass
, 
NULL
, &
§p_¨g
.
§µassö
, NULL))

1101 
	`BIO_¥ötf
(
bio_îr
, "Error gettingÖassword\n");

1102 
íd
;

1106 
˘x
=
	`SSL_CTX_√w
(
mëh
);

1107 i‡(
˘x
 =
NULL
)

1109 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1110 
íd
;

1113 i‡(
vpm
)

1114 
	`SSL_CTX_£t1_∑øm
(
˘x
, 
vpm
);

1116 #i‚de‡
OPENSSL_NO_ENGINE


1117 i‡(
s¶_˛õ¡_ígöe
)

1119 i‡(!
	`SSL_CTX_£t_˛õ¡_˚π_ígöe
(
˘x
, 
s¶_˛õ¡_ígöe
))

1121 
	`BIO_puts
(
bio_îr
, "Error setting clientáuthÉngine\n");

1122 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1123 
	`ENGINE_‰ì
(
s¶_˛õ¡_ígöe
);

1124 
íd
;

1126 
	`ENGINE_‰ì
(
s¶_˛õ¡_ígöe
);

1130 #i‚de‡
OPENSSL_NO_PSK


1131 #ifde‡
OPENSSL_NO_JPAKE


1132 i‡(
psk_key
 !
NULL
)

1134 i‡(
psk_key
 !
NULL
 || 
j∑ke_£¸ë
)

1137 i‡(
c_debug
)

1138 
	`BIO_¥ötf
(
bio_c_out
, "PSK key given or JPAKE in use, setting client callback\n");

1139 
	`SSL_CTX_£t_psk_˛õ¡_ˇŒback
(
˘x
, 
psk_˛õ¡_cb
);

1142 #i‚de‡
OPENSSL_NO_SRTP


1143 i‡(
§ç_¥ofûes
 !
NULL
)

1144 
	`SSL_CTX_£t_é£xt_u£_§ç
(
˘x
, 
§ç_¥ofûes
);

1146 i‡(
bugs
)

1147 
	`SSL_CTX_£t_›ti⁄s
(
˘x
,
SSL_OP_ALL
|
off
);

1149 
	`SSL_CTX_£t_›ti⁄s
(
˘x
,
off
);

1151 i‡(
˛r
)

1152 
	`SSL_CTX_˛ór_›ti⁄s
(
˘x
, 
˛r
);

1156 i‡(
sockë_ty≥
 =
SOCK_DGRAM
Ë
	`SSL_CTX_£t_ªad_ahód
(
˘x
, 1);

1158 #i‡!
	`deföed
(
OPENSSL_NO_TLSEXT
Ë&& !deföed(
OPENSSL_NO_NEXTPROTONEG
)

1159 i‡(
√xt_¥Ÿo
.
d©a
)

1160 
	`SSL_CTX_£t_√xt_¥Ÿo_£À˘_cb
(
˘x
, 
√xt_¥Ÿo_cb
, &
√xt_¥Ÿo
);

1163 i‡(
°©e
Ë
	`SSL_CTX_£t_öfo_ˇŒback
(
˘x
,
≠ps_s¶_öfo_ˇŒback
);

1164 i‡(
cùhî
 !
NULL
)

1165 if(!
	`SSL_CTX_£t_cùhî_li°
(
˘x
,
cùhî
)) {

1166 
	`BIO_¥ötf
(
bio_îr
,"error setting cipherÜist\n");

1167 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1168 
íd
;

1172 
	`SSL_CTX_£t_cùhî_li°
(
˘x
,
	`gëív
("SSL_CIPHER"));

1175 
	`SSL_CTX_£t_vîify
(
˘x
,
vîify
,
vîify_ˇŒback
);

1176 i‡(!
	`£t_˚π_key_°uff
(
˘x
,
˚π
,
key
))

1177 
íd
;

1179 i‡((!
	`SSL_CTX_lﬂd_vîify_loˇti⁄s
(
˘x
,
CAfûe
,
CA∑th
)) ||

1180 (!
	`SSL_CTX_£t_deÁu…_vîify_∑ths
(
˘x
)))

1183 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1187 #i‚de‡
OPENSSL_NO_TLSEXT


1188 i‡(
£rvî«me
 !
NULL
)

1190 
é£xtcbp
.
biodebug
 = 
bio_îr
;

1191 
	`SSL_CTX_£t_é£xt_£rvî«me_ˇŒback
(
˘x
, 
s¶_£rvî«me_cb
);

1192 
	`SSL_CTX_£t_é£xt_£rvî«me_¨g
(
˘x
, &
é£xtcbp
);

1194 #i‚de‡
OPENSSL_NO_SRP


1195 i‡(
§p_¨g
.
§∂ogö
)

1197 i‡(!
§p_œãu£r
 && !
	`SSL_CTX_£t_§p_u£∫ame
(
˘x
, 
§p_¨g
.
§∂ogö
))

1199 
	`BIO_¥ötf
(
bio_îr
,"UnableÅo set SRP username\n");

1200 
íd
;

1202 
§p_¨g
.
msg
 = 
c_msg
;

1203 
§p_¨g
.
debug
 = 
c_debug
 ;

1204 
	`SSL_CTX_£t_§p_cb_¨g
(
˘x
,&
§p_¨g
);

1205 
	`SSL_CTX_£t_§p_˛õ¡_pwd_ˇŒback
(
˘x
, 
s¶_give_§p_˛õ¡_pwd_cb
);

1206 
	`SSL_CTX_£t_§p_°ªngth
(
˘x
, 
§p_¨g
.
°ªngth
);

1207 i‡(
c_msg
 || 
c_debug
 || 
§p_¨g
.
amp
 == 0)

1208 
	`SSL_CTX_£t_§p_vîify_∑øm_ˇŒback
(
˘x
, 
s¶_§p_vîify_∑øm_cb
);

1214 
c⁄
=
	`SSL_√w
(
˘x
);

1216 #ifde‡
ASHOKE_TOOL


1217 
	`SSL_£t_no_em±y_‰ag
(
c⁄
);

1218 
	`SSL_£t_buf_cc
(
c⁄
);

1219 
	`SSL_£t_buf_cke
(
c⁄
);

1222 i‡(
£ss_ö
)

1224 
SSL_SESSION
 *
£ss
;

1225 
BIO
 *
°mp
 = 
	`BIO_√w_fûe
(
£ss_ö
, "r");

1226 i‡(!
°mp
)

1228 
	`BIO_¥ötf
(
bio_îr
, "Can't open session file %s\n",

1229 
£ss_ö
);

1230 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1231 
íd
;

1233 
£ss
 = 
	`PEM_ªad_bio_SSL_SESSION
(
°mp
, 
NULL
, 0, NULL);

1234 
	`BIO_‰ì
(
°mp
);

1235 i‡(!
£ss
)

1237 
	`BIO_¥ötf
(
bio_îr
, "Can't open session file %s\n",

1238 
£ss_ö
);

1239 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1240 
íd
;

1242 
	`SSL_£t_£ssi⁄
(
c⁄
, 
£ss
);

1243 
	`SSL_SESSION_‰ì
(
£ss
);

1245 #i‚de‡
OPENSSL_NO_TLSEXT


1246 i‡(
£rvî«me
 !
NULL
)

1248 i‡(!
	`SSL_£t_é£xt_ho°_«me
(
c⁄
,
£rvî«me
))

1250 
	`BIO_¥ötf
(
bio_îr
,"UnableÅo set TLS servernameÉxtension.\n");

1251 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1252 
íd
;

1256 #i‚de‡
OPENSSL_NO_KRB5


1257 i‡(
c⁄
 && (
k˘x
 = 
	`ks¶_˘x_√w
()Ë!
NULL
)

1259 
	`SSL_£t0_ks¶_˘x
(
c⁄
, 
k˘x
);

1260 
	`ks¶_˘x_£t°rög
(
k˘x
, 
KSSL_SERVER
, 
ho°
);

1265 #ifde‡
TLSEXT_TYPE_›aque_¥f_öput


1266 
	`SSL_£t_é£xt_›aque_¥f_öput
(
c⁄
, "Test client", 11);

1270 
ª_°¨t
:

1272 i‡(
	`öô_˛õ¡
(&
s
,
ho°
,
p‹t
,
sockë_ty≥
) == 0)

1274 
	`BIO_¥ötf
(
bio_îr
,"c⁄√˘:î∫o=%d\n",
	`gë_œ°_sockë_îr‹
());

1275 
	`SHUTDOWN
(
s
);

1276 
íd
;

1278 
	`BIO_¥ötf
(
bio_c_out
,"CONNECTED(%08X)\n",
s
);

1280 #ifde‡
FIONBIO


1281 i‡(
c_nbio
)

1283 
l
=1;

1284 
	`BIO_¥ötf
(
bio_c_out
,"turning onÇon blocking io\n");

1285 i‡(
	`BIO_sockë_io˘l
(
s
,
FIONBIO
,&
l
) < 0)

1287 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1288 
íd
;

1292 i‡(
c_Pau£
 & 0x01Ë
	`SSL_£t_debug
(
c⁄
, 1);

1294 i‡–
	`SSL_vîsi⁄
(
c⁄
Ë=
DTLS1_VERSION
)

1297 
sbio
=
	`BIO_√w_dgøm
(
s
,
BIO_NOCLOSE
);

1298 i‡(
	`gësock«me
(
s
, &
≥î
, (*)&
≥îÀn
) < 0)

1300 
	`BIO_¥ötf
(
bio_îr
, "getsockname:errno=%d\n",

1301 
	`gë_œ°_sockë_îr‹
());

1302 
	`SHUTDOWN
(
s
);

1303 
íd
;

1306 ()
	`BIO_˘æ_£t_c⁄√˘ed
(
sbio
, 1, &
≥î
);

1308 i‡(
íabÀ_timeouts
)

1310 
timeout
.
tv_£c
 = 0;

1311 
timeout
.
tv_u£c
 = 
DGRAM_RCV_TIMEOUT
;

1312 
	`BIO_˘æ
(
sbio
, 
BIO_CTRL_DGRAM_SET_RECV_TIMEOUT
, 0, &
timeout
);

1314 
timeout
.
tv_£c
 = 0;

1315 
timeout
.
tv_u£c
 = 
DGRAM_SND_TIMEOUT
;

1316 
	`BIO_˘æ
(
sbio
, 
BIO_CTRL_DGRAM_SET_SEND_TIMEOUT
, 0, &
timeout
);

1319 i‡(
sockë_mtu
 > 28)

1321 
	`SSL_£t_›ti⁄s
(
c⁄
, 
SSL_OP_NO_QUERY_MTU
);

1322 
	`SSL_£t_mtu
(
c⁄
, 
sockë_mtu
 - 28);

1326 
	`BIO_˘æ
(
sbio
, 
BIO_CTRL_DGRAM_MTU_DISCOVER
, 0, 
NULL
);

1329 
sbio
=
	`BIO_√w_sockë
(
s
,
BIO_NOCLOSE
);

1331 i‡(
nbio_ã°
)

1333 
BIO
 *
ã°
;

1335 
ã°
=
	`BIO_√w
(
	`BIO_f_nbio_ã°
());

1336 
sbio
=
	`BIO_push
(
ã°
,sbio);

1339 i‡(
c_debug
)

1341 
	`SSL_£t_debug
(
c⁄
, 1);

1342 
	`BIO_£t_ˇŒback
(
sbio
,
bio_dump_ˇŒback
);

1343 
	`BIO_£t_ˇŒback_¨g
(
sbio
,(*)
bio_c_out
);

1345 i‡(
c_msg
)

1347 
	`SSL_£t_msg_ˇŒback
(
c⁄
, 
msg_cb
);

1348 
	`SSL_£t_msg_ˇŒback_¨g
(
c⁄
, 
bio_c_out
);

1350 #i‚de‡
OPENSSL_NO_TLSEXT


1351 i‡(
c_é£xtdebug
)

1353 
	`SSL_£t_é£xt_debug_ˇŒback
(
c⁄
, 
é£xt_cb
);

1354 
	`SSL_£t_é£xt_debug_¨g
(
c⁄
, 
bio_c_out
);

1356 i‡(
c_°©us_ªq
)

1358 
	`SSL_£t_é£xt_°©us_ty≥
(
c⁄
, 
TLSEXT_STATUSTYPE_oc•
);

1359 
	`SSL_CTX_£t_é£xt_°©us_cb
(
˘x
, 
oc•_ª•_cb
);

1360 
	`SSL_CTX_£t_é£xt_°©us_¨g
(
˘x
, 
bio_c_out
);

1363 
	`STACK_OF
(
OCSP_RESPID
Ë*
ids
 = 
	`sk_OCSP_RESPID_√w_nuŒ
();

1364 
OCSP_RESPID
 *
id
 = 
	`OCSP_RESPID_√w
();

1365 
id
->
vÆue
.
byKey
 = 
	`ASN1_OCTET_STRING_√w
();

1366 
id
->
ty≥
 = 
V_OCSP_RESPID_KEY
;

1367 
	`ASN1_STRING_£t
(
id
->
vÆue
.
byKey
, "Hello World", -1);

1368 
	`sk_OCSP_RESPID_push
(
ids
, 
id
);

1369 
	`SSL_£t_é£xt_°©us_ids
(
c⁄
, 
ids
);

1374 #i‚de‡
OPENSSL_NO_JPAKE


1375 i‡(
j∑ke_£¸ë
)

1376 
	`j∑ke_˛õ¡_auth
(
bio_c_out
, 
sbio
, 
j∑ke_£¸ë
);

1379 
	`SSL_£t_bio
(
c⁄
,
sbio
,sbio);

1380 
	`SSL_£t_c⁄√˘_°©e
(
c⁄
);

1383 
width
=
	`SSL_gë_fd
(
c⁄
)+1;

1385 
ªad_ây
=1;

1386 
wrôe_ây
=0;

1387 
ây_⁄
=0;

1388 
ªad_s¶
=1;

1389 
wrôe_s¶
=1;

1391 
cbuf_Àn
=0;

1392 
cbuf_off
=0;

1393 
sbuf_Àn
=0;

1394 
sbuf_off
=0;

1403 i‡(
°¨âls_¥Ÿo
 =
PROTO_SMTP
)

1405 
foundô
=0;

1406 
BIO
 *
fbio
 = 
	`BIO_√w
(
	`BIO_f_buf„r
());

1407 
	`BIO_push
(
fbio
, 
sbio
);

1411 
mbuf_Àn
 = 
	`BIO_gës
(
fbio
,
mbuf
,
BUFSIZZ
);

1413 
mbuf_Àn
>3 && 
mbuf
[3]=='-');

1415 
	`BIO_¥ötf
(
fbio
,"EHLO openssl.client.net\r\n");

1416 ()
	`BIO_Êush
(
fbio
);

1420 
mbuf_Àn
 = 
	`BIO_gës
(
fbio
,
mbuf
,
BUFSIZZ
);

1421 i‡(
	`°r°r
(
mbuf
,"STARTTLS"))

1422 
foundô
=1;

1424 
mbuf_Àn
>3 && 
mbuf
[3]=='-');

1425 ()
	`BIO_Êush
(
fbio
);

1426 
	`BIO_p›
(
fbio
);

1427 
	`BIO_‰ì
(
fbio
);

1428 i‡(!
foundô
)

1429 
	`BIO_¥ötf
(
bio_îr
,

1432 
	`BIO_¥ötf
(
sbio
,"STARTTLS\r\n");

1433 
	`BIO_ªad
(
sbio
,
sbuf
,
BUFSIZZ
);

1435 i‡(
°¨âls_¥Ÿo
 =
PROTO_POP3
)

1437 
	`BIO_ªad
(
sbio
,
mbuf
,
BUFSIZZ
);

1438 
	`BIO_¥ötf
(
sbio
,"STLS\r\n");

1439 
	`BIO_ªad
(
sbio
,
sbuf
,
BUFSIZZ
);

1441 i‡(
°¨âls_¥Ÿo
 =
PROTO_IMAP
)

1443 
foundô
=0;

1444 
BIO
 *
fbio
 = 
	`BIO_√w
(
	`BIO_f_buf„r
());

1445 
	`BIO_push
(
fbio
, 
sbio
);

1446 
	`BIO_gës
(
fbio
,
mbuf
,
BUFSIZZ
);

1448 
	`BIO_¥ötf
(
fbio
,". CAPABILITY\r\n");

1449 ()
	`BIO_Êush
(
fbio
);

1453 
mbuf_Àn
 = 
	`BIO_gës
(
fbio
,
mbuf
,
BUFSIZZ
);

1454 i‡(
	`°r°r
(
mbuf
,"STARTTLS"))

1455 
foundô
=1;

1457 
mbuf_Àn
>3 && 
mbuf
[0]!='.');

1458 ()
	`BIO_Êush
(
fbio
);

1459 
	`BIO_p›
(
fbio
);

1460 
	`BIO_‰ì
(
fbio
);

1461 i‡(!
foundô
)

1462 
	`BIO_¥ötf
(
bio_îr
,

1465 
	`BIO_¥ötf
(
sbio
,". STARTTLS\r\n");

1466 
	`BIO_ªad
(
sbio
,
sbuf
,
BUFSIZZ
);

1468 i‡(
°¨âls_¥Ÿo
 =
PROTO_FTP
)

1470 
BIO
 *
fbio
 = 
	`BIO_√w
(
	`BIO_f_buf„r
());

1471 
	`BIO_push
(
fbio
, 
sbio
);

1475 
mbuf_Àn
 = 
	`BIO_gës
(
fbio
,
mbuf
,
BUFSIZZ
);

1477 
mbuf_Àn
>3 && 
mbuf
[3]=='-');

1478 ()
	`BIO_Êush
(
fbio
);

1479 
	`BIO_p›
(
fbio
);

1480 
	`BIO_‰ì
(
fbio
);

1481 
	`BIO_¥ötf
(
sbio
,"AUTH TLS\r\n");

1482 
	`BIO_ªad
(
sbio
,
sbuf
,
BUFSIZZ
);

1484 i‡(
°¨âls_¥Ÿo
 =
PROTO_XMPP
)

1486 
£í
 = 0;

1487 
	`BIO_¥ötf
(
sbio
,"<stream:stream "

1489 "xm s='jabbî:˛õ¡'Åo='%s' vîsi⁄='1.0'>", 
ho°
);

1490 
£í
 = 
	`BIO_ªad
(
sbio
,
mbuf
,
BUFSIZZ
);

1491 
mbuf
[
£í
] = 0;

1492 !
	`°r°r
(
mbuf
, "<starttls xmlns='urn:ietf:params:xml:ns:xmpp-tls'"))

1494 i‡(
	`°r°r
(
mbuf
, "/stream:features>"))

1495 
shut
;

1496 
£í
 = 
	`BIO_ªad
(
sbio
,
mbuf
,
BUFSIZZ
);

1497 
mbuf
[
£í
] = 0;

1499 
	`BIO_¥ötf
(
sbio
, "<starttls xmlns='urn:ietf:params:xml:ns:xmpp-tls'/>");

1500 
£í
 = 
	`BIO_ªad
(
sbio
,
sbuf
,
BUFSIZZ
);

1501 
sbuf
[
£í
] = 0;

1502 i‡(!
	`°r°r
(
sbuf
, "<proceed"))

1503 
shut
;

1504 
mbuf
[0] = 0;

1509 
	`FD_ZERO
(&
ªadfds
);

1510 
	`FD_ZERO
(&
wrôefds
);

1512 i‡((
	`SSL_vîsi⁄
(
c⁄
Ë=
DTLS1_VERSION
) &&

1513 
	`DTLSv1_gë_timeout
(
c⁄
, &
timeout
))

1514 
timeouç
 = &
timeout
;

1516 
timeouç
 = 
NULL
;

1518 i‡(
	`SSL_ö_öô
(
c⁄
Ë&& !
	`SSL_tŸÆ_ª√gŸüti⁄s
(con))

1520 
ö_öô
=1;

1521 
ây_⁄
=0;

1525 
ây_⁄
=1;

1526 i‡(
ö_öô
)

1528 
ö_öô
=0;

1530 #i‚de‡
OPENSSL_NO_TLSEXT


1531 i‡(
£rvî«me
 !
NULL
 && !
	`SSL_£ssi⁄_ªu£d
(
c⁄
))

1533 
	`BIO_¥ötf
(
bio_c_out
,"Sîvî did %ßcknowÀdgê£rvî«mêexãnsi⁄.\n",
é£xtcbp
.
ack
?"":"not ");

1537 i‡(
£ss_out
)

1539 
BIO
 *
°mp
 = 
	`BIO_√w_fûe
(
£ss_out
, "w");

1540 i‡(
°mp
)

1542 
	`PEM_wrôe_bio_SSL_SESSION
(
°mp
, 
	`SSL_gë_£ssi⁄
(
c⁄
));

1543 
	`BIO_‰ì
(
°mp
);

1546 
	`BIO_¥ötf
(
bio_îr
, "Eº‹ wrôög sessi⁄ fûê%s\n", 
£ss_out
);

1548 
	`¥öt_°uff
(
bio_c_out
,
c⁄
,
fuŒ_log
);

1549 i‡(
fuŒ_log
 > 0) full_log--;

1551 i‡(
°¨âls_¥Ÿo
)

1553 
	`BIO_¥ötf
(
bio_îr
,"%s",
mbuf
);

1555 
°¨âls_¥Ÿo
 = 
PROTO_OFF
;

1558 i‡(
ªc⁄√˘
)

1560 
ªc⁄√˘
--;

1561 
	`BIO_¥ötf
(
bio_c_out
,"drop connectionándÅhenÑeconnect\n");

1562 
	`SSL_shutdown
(
c⁄
);

1563 
	`SSL_£t_c⁄√˘_°©e
(
c⁄
);

1564 
	`SHUTDOWN
(
	`SSL_gë_fd
(
c⁄
));

1565 
ª_°¨t
;

1570 
s¶_≥ndög
 = 
ªad_s¶
 && 
	`SSL_≥ndög
(
c⁄
);

1572 i‡(!
s¶_≥ndög
)

1574 #i‡!
	`deföed
(
OPENSSL_SYS_WINDOWS
Ë&& !deföed(
OPENSSL_SYS_MSDOS
Ë&& !deföed(
OPENSSL_SYS_NETWARE
Ë&& !deföed (
OPENSSL_SYS_BEOS_R5
)

1575 i‡(
ây_⁄
)

1577 i‡(
ªad_ây
Ë
	`›ís¶_fd£t
(
	`fûío
(
°dö
),&
ªadfds
);

1578 i‡(
wrôe_ây
Ë
	`›ís¶_fd£t
(
	`fûío
(
°dout
),&
wrôefds
);

1580 i‡(
ªad_s¶
)

1581 
	`›ís¶_fd£t
(
	`SSL_gë_fd
(
c⁄
),&
ªadfds
);

1582 i‡(
wrôe_s¶
)

1583 
	`›ís¶_fd£t
(
	`SSL_gë_fd
(
c⁄
),&
wrôefds
);

1585 if(!
ây_⁄
 || !
wrôe_ây
) {

1586 i‡(
ªad_s¶
)

1587 
	`›ís¶_fd£t
(
	`SSL_gë_fd
(
c⁄
),&
ªadfds
);

1588 i‡(
wrôe_s¶
)

1589 
	`›ís¶_fd£t
(
	`SSL_gë_fd
(
c⁄
),&
wrôefds
);

1601 #i‡
	`deföed
(
OPENSSL_SYS_WINDOWS
Ë|| deföed(
OPENSSL_SYS_MSDOS
)

1609 
i
=0;

1610 if(!
wrôe_ây
) {

1611 if(
ªad_ây
) {

1612 
tv
.
tv_£c
 = 1;

1613 
tv
.
tv_u£c
 = 0;

1614 
i
=
	`£À˘
(
width
,(*)&
ªadfds
,(*)&
wrôefds
,

1615 
NULL
,&
tv
);

1616 #i‡
	`deföed
(
OPENSSL_SYS_WINCE
Ë|| deföed(
OPENSSL_SYS_MSDOS
)

1617 if(!
i
 && (!
	`_kbhô
(Ë|| !
ªad_ây
) ) ;

1619 if(!
i
 && (!((
	`_kbhô
()Ë|| (
WAIT_OBJECT_0
 =
	`WaôF‹SögÀObje˘
(
	`GëStdH™dÀ
(
STD_INPUT_HANDLE
), 0))Ë|| !
ªad_ây
) ) ;

1621 } 
i
=
	`£À˘
(
width
,(*)&
ªadfds
,(*)&
wrôefds
,

1622 
NULL
,
timeouç
);

1624 #ñi‡
	`deföed
(
OPENSSL_SYS_NETWARE
)

1625 if(!
wrôe_ây
) {

1626 if(
ªad_ây
) {

1627 
tv
.
tv_£c
 = 1;

1628 
tv
.
tv_u£c
 = 0;

1629 
i
=
	`£À˘
(
width
,(*)&
ªadfds
,(*)&
wrôefds
,

1630 
NULL
,&
tv
);

1631 } 
i
=
	`£À˘
(
width
,(*)&
ªadfds
,(*)&
wrôefds
,

1632 
NULL
,
timeouç
);

1634 #ñi‡
	`deföed
(
OPENSSL_SYS_BEOS_R5
)

1636 
i
=0;

1637 
°dö_£t
 = 0;

1638 ()
	`f˙é
(
	`fûío
(
°dö
), 
F_SETFL
, 
O_NONBLOCK
);

1639 if(!
wrôe_ây
) {

1640 if(
ªad_ây
) {

1641 
tv
.
tv_£c
 = 1;

1642 
tv
.
tv_u£c
 = 0;

1643 
i
=
	`£À˘
(
width
,(*)&
ªadfds
,(*)&
wrôefds
,

1644 
NULL
,&
tv
);

1645 i‡(
	`ªad
(
	`fûío
(
°dö
), 
sbuf
, 0) >= 0)

1646 
°dö_£t
 = 1;

1647 i‡(!
i
 && (
°dö_£t
 !1 || !
ªad_ây
))

1649 } 
i
=
	`£À˘
(
width
,(*)&
ªadfds
,(*)&
wrôefds
,

1650 
NULL
,
timeouç
);

1652 ()
	`f˙é
(
	`fûío
(
°dö
), 
F_SETFL
, 0);

1654 
i
=
	`£À˘
(
width
,(*)&
ªadfds
,(*)&
wrôefds
,

1655 
NULL
,
timeouç
);

1657 i‡–
i
 < 0)

1659 
	`BIO_¥ötf
(
bio_îr
,"bad select %d\n",

1660 
	`gë_œ°_sockë_îr‹
());

1661 
shut
;

1666 i‡((
	`SSL_vîsi⁄
(
c⁄
Ë=
DTLS1_VERSION
Ë&& 
	`DTLSv1_h™dÀ_timeout
(con) > 0)

1668 
	`BIO_¥ötf
(
bio_îr
,"TIMEOUT occured\n");

1671 i‡(!
s¶_≥ndög
 && 
	`FD_ISSET
(
	`SSL_gë_fd
(
c⁄
),&
wrôefds
))

1673 
k
=
	`SSL_wrôe
(
c⁄
,&(
cbuf
[
cbuf_off
]),

1674 ()
cbuf_Àn
);

1675 
	`SSL_gë_îr‹
(
c⁄
,
k
))

1677 
SSL_ERROR_NONE
:

1678 
cbuf_off
+=
k
;

1679 
cbuf_Àn
-=
k
;

1680 i‡(
k
 <0Ë
íd
;

1682 i‡(
cbuf_Àn
 <= 0)

1684 
ªad_ây
=1;

1685 
wrôe_s¶
=0;

1689 
ªad_ây
=0;

1690 
wrôe_s¶
=1;

1693 
SSL_ERROR_WANT_WRITE
:

1694 
	`BIO_¥ötf
(
bio_c_out
,"write W BLOCK\n");

1695 
wrôe_s¶
=1;

1696 
ªad_ây
=0;

1698 
SSL_ERROR_WANT_READ
:

1699 
	`BIO_¥ötf
(
bio_c_out
,"write R BLOCK\n");

1700 
wrôe_ây
=0;

1701 
ªad_s¶
=1;

1702 
wrôe_s¶
=0;

1704 
SSL_ERROR_WANT_X509_LOOKUP
:

1705 
	`BIO_¥ötf
(
bio_c_out
,"write X BLOCK\n");

1707 
SSL_ERROR_ZERO_RETURN
:

1708 i‡(
cbuf_Àn
 != 0)

1710 
	`BIO_¥ötf
(
bio_c_out
,"shutdown\n");

1711 
ªt
 = 0;

1712 
shut
;

1716 
ªad_ây
=1;

1717 
wrôe_s¶
=0;

1721 
SSL_ERROR_SYSCALL
:

1722 i‡((
k
 !0Ë|| (
cbuf_Àn
 != 0))

1724 
	`BIO_¥ötf
(
bio_îr
,"write:errno=%d\n",

1725 
	`gë_œ°_sockë_îr‹
());

1726 
shut
;

1730 
ªad_ây
=1;

1731 
wrôe_s¶
=0;

1734 
SSL_ERROR_SSL
:

1735 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1736 
shut
;

1739 #i‡
	`deföed
(
OPENSSL_SYS_WINDOWS
Ë|| deföed(
OPENSSL_SYS_MSDOS
Ë|| deföed(
OPENSSL_SYS_NETWARE
Ë|| deföed(
OPENSSL_SYS_BEOS_R5
)

1741 i‡(!
s¶_≥ndög
 && 
wrôe_ây
)

1743 i‡(!
s¶_≥ndög
 && 
	`FD_ISSET
(
	`fûío
(
°dout
),&
wrôefds
))

1746 #ifde‡
CHARSET_EBCDIC


1747 
	`ascii2ebcdic
(&(
sbuf
[
sbuf_off
]),&(sbuf[sbuf_off]),
sbuf_Àn
);

1749 
i
=
	`øw_wrôe_°dout
(&(
sbuf
[
sbuf_off
]),
sbuf_Àn
);

1751 i‡(
i
 <= 0)

1753 
	`BIO_¥ötf
(
bio_c_out
,"DONE\n");

1754 
ªt
 = 0;

1755 
shut
;

1759 
sbuf_Àn
-=
i
;;

1760 
sbuf_off
+=
i
;

1761 i‡(
sbuf_Àn
 <= 0)

1763 
ªad_s¶
=1;

1764 
wrôe_ây
=0;

1767 i‡(
s¶_≥ndög
 || 
	`FD_ISSET
(
	`SSL_gë_fd
(
c⁄
),&
ªadfds
))

1769 #ifde‡
RENEG


1770 { 
iiii
; i‡(++iiiò=52Ë{ 
	`SSL_ª√gŸüã
(
c⁄
); iiii=0; } }

1773 
k
=
	`SSL_ªad
(
c⁄
,
sbuf
,1024 );

1776 
k
=
	`SSL_ªad
(
c⁄
,
sbuf
,16);

1777 { 
zbuf
[10240];

1778 
	`¥ötf
("ªad=%dÖídög=%dÖìk=%d\n",
k
,
	`SSL_≥ndög
(
c⁄
),
	`SSL_≥ek
(c⁄,
zbuf
,10240));

1782 
	`SSL_gë_îr‹
(
c⁄
,
k
))

1784 
SSL_ERROR_NONE
:

1785 i‡(
k
 <= 0)

1786 
íd
;

1787 
sbuf_off
=0;

1788 
sbuf_Àn
=
k
;

1790 
ªad_s¶
=0;

1791 
wrôe_ây
=1;

1793 
SSL_ERROR_WANT_WRITE
:

1794 
	`BIO_¥ötf
(
bio_c_out
,"read W BLOCK\n");

1795 
wrôe_s¶
=1;

1796 
ªad_ây
=0;

1798 
SSL_ERROR_WANT_READ
:

1799 
	`BIO_¥ötf
(
bio_c_out
,"read R BLOCK\n");

1800 
wrôe_ây
=0;

1801 
ªad_s¶
=1;

1802 i‡((
ªad_ây
 =0Ë&& (
wrôe_s¶
 == 0))

1803 
wrôe_s¶
=1;

1805 
SSL_ERROR_WANT_X509_LOOKUP
:

1806 
	`BIO_¥ötf
(
bio_c_out
,"read X BLOCK\n");

1808 
SSL_ERROR_SYSCALL
:

1809 
ªt
=
	`gë_œ°_sockë_îr‹
();

1810 
	`BIO_¥ötf
(
bio_îr
,"ªad:î∫o=%d\n",
ªt
);

1811 
shut
;

1812 
SSL_ERROR_ZERO_RETURN
:

1813 
	`BIO_¥ötf
(
bio_c_out
,"closed\n");

1814 
ªt
=0;

1815 
shut
;

1816 
SSL_ERROR_SSL
:

1817 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1818 
shut
;

1823 #i‡
	`deföed
(
OPENSSL_SYS_WINDOWS
Ë|| deföed(
OPENSSL_SYS_MSDOS
)

1824 #i‡
	`deföed
(
OPENSSL_SYS_WINCE
Ë|| deföed(
OPENSSL_SYS_MSDOS
)

1825 i‡(
	`_kbhô
())

1827 i‡((
	`_kbhô
()Ë|| (
WAIT_OBJECT_0
 =
	`WaôF‹SögÀObje˘
(
	`GëStdH™dÀ
(
STD_INPUT_HANDLE
), 0)))

1829 #ñi‡
	`deföed
 (
OPENSSL_SYS_NETWARE
)

1830 i‡(
	`_kbhô
())

1831 #ñi‡
	`deföed
(
OPENSSL_SYS_BEOS_R5
)

1832 i‡(
°dö_£t
)

1834 i‡(
	`FD_ISSET
(
	`fûío
(
°dö
),&
ªadfds
))

1837 i‡(
¸lf
)

1839 
j
, 
lf_num
;

1841 
i
=
	`øw_ªad_°dö
(
cbuf
,
BUFSIZZ
/2);

1842 
lf_num
 = 0;

1844 
j
 = 0; j < 
i
; j++)

1845 i‡(
cbuf
[
j
] == '\n')

1846 
lf_num
++;

1847 
j
 = 
i
-1; j >= 0; j--)

1849 
cbuf
[
j
+
lf_num
] = cbuf[j];

1850 i‡(
cbuf
[
j
] == '\n')

1852 
lf_num
--;

1853 
i
++;

1854 
cbuf
[
j
+
lf_num
] = '\r';

1857 
	`as£π
(
lf_num
 == 0);

1860 
i
=
	`øw_ªad_°dö
(
cbuf
,
BUFSIZZ
);

1862 i‡((!
c_ign_eof
Ë&& ((
i
 <0Ë|| (
cbuf
[0] == 'Q')))

1864 
	`BIO_¥ötf
(
bio_îr
,"DONE\n");

1865 
ªt
=0;

1866 
shut
;

1869 i‡((!
c_ign_eof
Ë&& (
cbuf
[0] == 'R'))

1871 
	`BIO_¥ötf
(
bio_îr
,"RENEGOTIATING\n");

1872 
	`SSL_ª√gŸüã
(
c⁄
);

1873 
cbuf_Àn
=0;

1875 #i‚de‡
OPENSSL_NO_HEARTBEATS


1876 i‡((!
c_ign_eof
Ë&& (
cbuf
[0] == 'B'))

1878 
	`BIO_¥ötf
(
bio_îr
,"HEARTBEATING\n");

1879 
	`SSL_hóπbót
(
c⁄
);

1880 
cbuf_Àn
=0;

1885 
cbuf_Àn
=
i
;

1886 
cbuf_off
=0;

1887 #ifde‡
CHARSET_EBCDIC


1888 
	`ebcdic2ascii
(
cbuf
, cbuf, 
i
);

1892 
wrôe_s¶
=1;

1893 
ªad_ây
=0;

1897 
ªt
=0;

1898 
shut
:

1899 i‡(
ö_öô
)

1900 
	`¥öt_°uff
(
bio_c_out
,
c⁄
,
fuŒ_log
);

1901 
	`SSL_shutdown
(
c⁄
);

1902 
	`SHUTDOWN
(
	`SSL_gë_fd
(
c⁄
));

1903 
íd
:

1904 i‡(
c⁄
 !
NULL
)

1906 i‡(
¥exô
 != 0)

1907 
	`¥öt_°uff
(
bio_c_out
,
c⁄
,1);

1908 
	`SSL_‰ì
(
c⁄
);

1910 #i‡!
	`deföed
(
OPENSSL_NO_TLSEXT
Ë&& !deföed(
OPENSSL_NO_NEXTPROTONEG
)

1911 i‡(
√xt_¥Ÿo
.
d©a
)

1912 
	`OPENSSL_‰ì
(
√xt_¥Ÿo
.
d©a
);

1914 i‡(
˘x
 !
NULL
Ë
	`SSL_CTX_‰ì
(ctx);

1915 i‡(
˚π
)

1916 
	`X509_‰ì
(
˚π
);

1917 i‡(
key
)

1918 
	`EVP_PKEY_‰ì
(
key
);

1919 i‡(
∑ss
)

1920 
	`OPENSSL_‰ì
(
∑ss
);

1921 i‡(
vpm
)

1922 
	`X509_VERIFY_PARAM_‰ì
(
vpm
);

1923 i‡(
cbuf
 !
NULL
Ë{ 
	`OPENSSL_˛ón£
(cbuf,
BUFSIZZ
); 
	`OPENSSL_‰ì
(cbuf); }

1924 i‡(
sbuf
 !
NULL
Ë{ 
	`OPENSSL_˛ón£
(sbuf,
BUFSIZZ
); 
	`OPENSSL_‰ì
(sbuf); }

1925 i‡(
mbuf
 !
NULL
Ë{ 
	`OPENSSL_˛ón£
(mbuf,
BUFSIZZ
); 
	`OPENSSL_‰ì
(mbuf); }

1926 i‡(
bio_c_out
 !
NULL
)

1928 
	`BIO_‰ì
(
bio_c_out
);

1929 
bio_c_out
=
NULL
;

1931 
	`≠ps_shutdown
();

1932 
	`OPENSSL_EXIT
(
ªt
);

1933 
	}
}

1936 
	$¥öt_°uff
(
BIO
 *
bio
, 
SSL
 *
s
, 
fuŒ
)

1938 
X509
 *
≥î
=
NULL
;

1939 *
p
;

1940 c⁄° *
•a˚
=" ";

1941 
buf
[
BUFSIZ
];

1942 
	`STACK_OF
(
X509
Ë*
sk
;

1943 
	`STACK_OF
(
X509_NAME
Ë*
sk2
;

1944 c⁄° 
SSL_CIPHER
 *
c
;

1945 
X509_NAME
 *
xn
;

1946 
j
,
i
;

1947 #i‚de‡
OPENSSL_NO_COMP


1948 c⁄° 
COMP_METHOD
 *
comp
, *
ex∑nsi⁄
;

1950 *
exp‹ãdkeym©
;

1952 i‡(
fuŒ
)

1954 
gŸ_a_chaö
 = 0;

1956 
sk
=
	`SSL_gë_≥î_˚π_chaö
(
s
);

1957 i‡(
sk
 !
NULL
)

1959 
gŸ_a_chaö
 = 1;

1961 
	`BIO_¥ötf
(
bio
,"---\nCertificate chain\n");

1962 
i
=0; i<
	`sk_X509_num
(
sk
); i++)

1964 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(

1965 
	`sk_X509_vÆue
(
sk
,
i
)),
buf
, buf);

1966 
	`BIO_¥ötf
(
bio
,"%2d s:%s\n",
i
,
buf
);

1967 
	`X509_NAME_⁄ñöe
(
	`X509_gë_issuî_«me
(

1968 
	`sk_X509_vÆue
(
sk
,
i
)),
buf
, buf);

1969 
	`BIO_¥ötf
(
bio
," i:%s\n",
buf
);

1970 i‡(
c_show˚πs
)

1971 
	`PEM_wrôe_bio_X509
(
bio
,
	`sk_X509_vÆue
(
sk
,
i
));

1975 
	`BIO_¥ötf
(
bio
,"---\n");

1976 
≥î
=
	`SSL_gë_≥î_˚πifiˇã
(
s
);

1977 i‡(
≥î
 !
NULL
)

1979 
	`BIO_¥ötf
(
bio
,"Server certificate\n");

1980 i‡(!(
c_show˚πs
 && 
gŸ_a_chaö
))

1981 
	`PEM_wrôe_bio_X509
(
bio
,
≥î
);

1982 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
≥î
),

1983 
buf
, buf);

1984 
	`BIO_¥ötf
(
bio
,"subje˘=%s\n",
buf
);

1985 
	`X509_NAME_⁄ñöe
(
	`X509_gë_issuî_«me
(
≥î
),

1986 
buf
, buf);

1987 
	`BIO_¥ötf
(
bio
,"issuî=%s\n",
buf
);

1990 
	`BIO_¥ötf
(
bio
,"noÖeer certificateávailable\n");

1992 
sk2
=
	`SSL_gë_˛õ¡_CA_li°
(
s
);

1993 i‡((
sk2
 !
NULL
Ë&& (
	`sk_X509_NAME_num
(sk2) > 0))

1995 
	`BIO_¥ötf
(
bio
,"---\nAcceptable client certificate CAÇames\n");

1996 
i
=0; i<
	`sk_X509_NAME_num
(
sk2
); i++)

1998 
xn
=
	`sk_X509_NAME_vÆue
(
sk2
,
i
);

1999 
	`X509_NAME_⁄ñöe
(
xn
,
buf
,(buf));

2000 
	`BIO_wrôe
(
bio
,
buf
,
	`°æí
(buf));

2001 
	`BIO_wrôe
(
bio
,"\n",1);

2006 
	`BIO_¥ötf
(
bio
,"---\nNo client certificate CAÇames sent\n");

2008 
p
=
	`SSL_gë_sh¨ed_cùhîs
(
s
,
buf
, buf);

2009 i‡(
p
 !
NULL
)

2016 
	`BIO_¥ötf
(
bio
,"---\nCiphers common between both SSLÉndpoints:\n");

2017 
j
=
i
=0;

2018 *
p
)

2020 i‡(*
p
 == ':')

2022 
	`BIO_wrôe
(
bio
,
•a˚
,15-
j
%25);

2023 
i
++;

2024 
j
=0;

2025 
	`BIO_wrôe
(
bio
,((
i
%3)?" ":"\n"),1);

2029 
	`BIO_wrôe
(
bio
,
p
,1);

2030 
j
++;

2032 
p
++;

2034 
	`BIO_wrôe
(
bio
,"\n",1);

2037 
	`BIO_¥ötf
(
bio
,"---\nSSL handshake hasÑead %ld bytesánd written %ld bytes\n",

2038 
	`BIO_numbî_ªad
(
	`SSL_gë_rbio
(
s
)),

2039 
	`BIO_numbî_wrôãn
(
	`SSL_gë_wbio
(
s
)));

2041 
	`BIO_¥ötf
(
bio
,(
	`SSL_ˇche_hô
(
s
)?"---\nReused, ":"---\nNew, "));

2042 
c
=
	`SSL_gë_cuºít_cùhî
(
s
);

2043 
	`BIO_¥ötf
(
bio
,"%s, Cipher is %s\n",

2044 
	`SSL_CIPHER_gë_vîsi⁄
(
c
),

2045 
	`SSL_CIPHER_gë_«me
(
c
));

2046 i‡(
≥î
 !
NULL
) {

2047 
EVP_PKEY
 *
pktmp
;

2048 
pktmp
 = 
	`X509_gë_pubkey
(
≥î
);

2049 
	`BIO_¥ötf
(
bio
,"ServerÖublic key is %d bit\n",

2050 
	`EVP_PKEY_bôs
(
pktmp
));

2051 
	`EVP_PKEY_‰ì
(
pktmp
);

2053 
	`BIO_¥ötf
(
bio
, "Secure Renegotiation IS%s supported\n",

2054 
	`SSL_gë_£cuª_ª√gŸüti⁄_suµ‹t
(
s
) ? "" : " NOT");

2055 #i‚de‡
OPENSSL_NO_COMP


2056 
comp
=
	`SSL_gë_cuºít_com¥essi⁄
(
s
);

2057 
ex∑nsi⁄
=
	`SSL_gë_cuºít_ex∑nsi⁄
(
s
);

2058 
	`BIO_¥ötf
(
bio
,"Compression: %s\n",

2059 
comp
 ? 
	`SSL_COMP_gë_«me
(comp) : "NONE");

2060 
	`BIO_¥ötf
(
bio
,"Expansion: %s\n",

2061 
ex∑nsi⁄
 ? 
	`SSL_COMP_gë_«me
(expansion) : "NONE");

2064 #ifde‡
SSL_DEBUG


2067 
sock
;

2068 
sockaddr_ö
 
œdd
;

2069 
sockÀn_t
 
œdd_size
 = (
œdd
);

2070 
sock
 = 
	`SSL_gë_fd
(
s
);

2071 
	`gësock«me
(
sock
, (
sockaddr
 *)&
œdd
, &
œdd_size
);

2072 
	`BIO_¥ötf
(
bio_c_out
, "LOCAL PORT i†%u\n", 
	`¡ohs
(
œdd
.
sö_p‹t
));

2076 #i‡!
	`deföed
(
OPENSSL_NO_TLSEXT
Ë&& !deföed(
OPENSSL_NO_NEXTPROTONEG
)

2077 i‡(
√xt_¥Ÿo
.
°©us
 != -1) {

2078 c⁄° *
¥Ÿo
;

2079 
¥Ÿo_Àn
;

2080 
	`SSL_gë0_√xt_¥Ÿo_√gŸüãd
(
s
, &
¥Ÿo
, &
¥Ÿo_Àn
);

2081 
	`BIO_¥ötf
(
bio
, "Nexà¥Ÿocﬁ: (%dË", 
√xt_¥Ÿo
.
°©us
);

2082 
	`BIO_wrôe
(
bio
, 
¥Ÿo
, 
¥Ÿo_Àn
);

2083 
	`BIO_wrôe
(
bio
, "\n", 1);

2087 #i‚de‡
OPENSSL_NO_SRTP


2089 
SRTP_PROTECTION_PROFILE
 *
§ç_¥ofûe
=
	`SSL_gë_£À˘ed_§ç_¥ofûe
(
s
);

2091 if(
§ç_¥ofûe
)

2092 
	`BIO_¥ötf
(
bio
,"SRTP ExtensionÇegotiated,Örofile=%s\n",

2093 
§ç_¥ofûe
->
«me
);

2097 
	`SSL_SESSION_¥öt
(
bio
,
	`SSL_gë_£ssi⁄
(
s
));

2098 i‡(
keym©exp‹éabñ
 !
NULL
)

2100 
	`BIO_¥ötf
(
bio
, "Keying materialÉxporter:\n");

2101 
	`BIO_¥ötf
(
bio
, " Labñ: '%s'\n", 
keym©exp‹éabñ
);

2102 
	`BIO_¥ötf
(
bio
, " Lígth: %òbyãs\n", 
keym©exp‹éí
);

2103 
exp‹ãdkeym©
 = 
	`OPENSSL_mÆloc
(
keym©exp‹éí
);

2104 i‡(
exp‹ãdkeym©
 !
NULL
)

2106 i‡(!
	`SSL_exp‹t_keyög_m©îül
(
s
, 
exp‹ãdkeym©
,

2107 
keym©exp‹éí
,

2108 
keym©exp‹éabñ
,

2109 
	`°æí
(
keym©exp‹éabñ
),

2110 
NULL
, 0, 0))

2112 
	`BIO_¥ötf
(
bio
, " Error\n");

2116 
	`BIO_¥ötf
(
bio
, " Keying material: ");

2117 
i
=0; i<
keym©exp‹éí
; i++)

2118 
	`BIO_¥ötf
(
bio
, "%02X",

2119 
exp‹ãdkeym©
[
i
]);

2120 
	`BIO_¥ötf
(
bio
, "\n");

2122 
	`OPENSSL_‰ì
(
exp‹ãdkeym©
);

2125 
	`BIO_¥ötf
(
bio
,"---\n");

2126 i‡(
≥î
 !
NULL
)

2127 
	`X509_‰ì
(
≥î
);

2129 ()
	`BIO_Êush
(
bio
);

2130 
	}
}

2132 #i‚de‡
OPENSSL_NO_TLSEXT


2134 
	$oc•_ª•_cb
(
SSL
 *
s
, *
¨g
)

2136 c⁄° *
p
;

2137 
Àn
;

2138 
OCSP_RESPONSE
 *
r•
;

2139 
Àn
 = 
	`SSL_gë_é£xt_°©us_oc•_ª•
(
s
, &
p
);

2140 
	`BIO_puts
(
¨g
, "OCSPÑesponse: ");

2141 i‡(!
p
)

2143 
	`BIO_puts
(
¨g
, "noÑesponse sent\n");

2146 
r•
 = 
	`d2i_OCSP_RESPONSE
(
NULL
, &
p
, 
Àn
);

2147 i‡(!
r•
)

2149 
	`BIO_puts
(
¨g
, "responseÖarseÉrror\n");

2150 
	`BIO_dump_ödít
(
¨g
, (*)
p
, 
Àn
, 4);

2153 
	`BIO_puts
(
¨g
, "\n======================================\n");

2154 
	`OCSP_RESPONSE_¥öt
(
¨g
, 
r•
, 0);

2155 
	`BIO_puts
(
¨g
, "======================================\n");

2156 
	`OCSP_RESPONSE_‰ì
(
r•
);

2158 
	}
}

	@s_server.c

145 #ifde‡
OPENSSL_NO_DEPRECATED


146 #unde‡
OPENSSL_NO_DEPRECATED


149 
	~<as£π.h
>

150 
	~<˘y≥.h
>

151 
	~<°dio.h
>

152 
	~<°dlib.h
>

153 
	~<°rög.h
>

155 
	~<›ís¶/e_os2.h
>

156 #ifde‡
OPENSSL_NO_STDIO


157 
	#APPS_WIN16


	)

160 #i‡!
deföed
(
OPENSSL_SYS_NETWARE
)

161 
	~<sys/ty≥s.h
>

168 #i‡
deföed
(
OPENSSL_SYS_VMS_DECC
Ë&& !deföed(
__U_INT
)

169 
	#__U_INT


	)

170 
	tu_öt
;

173 
	~<›ís¶/lhash.h
>

174 
	~<›ís¶/bn.h
>

175 
	#USE_SOCKETS


	)

176 
	~"≠ps.h
"

177 
	~<›ís¶/îr.h
>

178 
	~<›ís¶/≥m.h
>

179 
	~<›ís¶/x509.h
>

180 
	~<›ís¶/s¶.h
>

181 
	~<›ís¶/ønd.h
>

182 
	~<›ís¶/oc•.h
>

183 #i‚de‡
OPENSSL_NO_DH


184 
	~<›ís¶/dh.h
>

186 #i‚de‡
OPENSSL_NO_RSA


187 
	~<›ís¶/rß.h
>

189 #i‚de‡
OPENSSL_NO_SRP


190 
	~<›ís¶/§p.h
>

192 
	~"s_≠ps.h
"

193 
	~"timeouts.h
"

195 #i‡(
deföed
(
OPENSSL_SYS_VMS
Ë&& 
__VMS_VER
 < 70000000)

197 #unde‡
FIONBIO


200 #i‡
deföed
(
OPENSSL_SYS_BEOS_R5
)

201 
	~<f˙é.h
>

204 #i‚de‡
OPENSSL_NO_RSA


205 
RSA
 
MS_CALLBACK
 *
tmp_rß_cb
(
SSL
 *
s
, 
is_exp‹t
, 
keyÀngth
);

207 
sv_body
(*
ho°«me
, 
s
, *
c⁄ãxt
);

208 
www_body
(*
ho°«me
, 
s
, *
c⁄ãxt
);

209 
˛o£_ac˚±_sockë
();

210 
sv_ußge
();

211 
öô_s¶_c⁄√˘i⁄
(
SSL
 *
s
);

212 
¥öt_°©s
(
BIO
 *
bp
,
SSL_CTX
 *
˘x
);

213 
gíî©e_£ssi⁄_id
(c⁄° 
SSL
 *
s¶
, *
id
,

214 *
id_Àn
);

215 #i‚de‡
OPENSSL_NO_DH


216 
DH
 *
lﬂd_dh_∑øm
(c⁄° *
dhfûe
);

217 
DH
 *
gë_dh512
();

220 #ifde‡
MONOLITH


221 
s_£rvî_öô
();

224 #i‚de‡
OPENSSL_NO_DH


225 
	gdh512_p
[]={

233 
	gdh512_g
[]={

237 
DH
 *
	$gë_dh512
()

239 
DH
 *
dh
=
NULL
;

241 i‡((
dh
=
	`DH_√w
()Ë=
NULL
) (NULL);

242 
dh
->
p
=
	`BN_bö2bn
(
dh512_p
,(dh512_p),
NULL
);

243 
dh
->
g
=
	`BN_bö2bn
(
dh512_g
,(dh512_g),
NULL
);

244 i‡((
dh
->
p
 =
NULL
Ë|| (dh->
g
 == NULL))

245 (
NULL
);

246 (
dh
);

247 
	}
}

253 #unde‡
BUFSIZZ


254 
	#BUFSIZZ
 16*1024

	)

255 
	gbufsize
=
BUFSIZZ
;

256 
	gac˚±_sockë
= -1;

258 
	#TEST_CERT
 "£rvî.≥m"

	)

259 #i‚de‡
OPENSSL_NO_TLSEXT


260 
	#TEST_CERT2
 "£rvî2.≥m"

	)

262 #unde‡
PROG


263 
	#PROG
 
s_£rvî_maö


	)

265 
vîify_dïth
, 
vîify_ªtu∫_îr‹
;

266 
ªu£Cou¡
;

267 
rŸ©eCùhî
;

269 *
	gcùhî
=
NULL
;

270 
	gs_£rvî_vîify
=
SSL_VERIFY_NONE
;

271 
	gs_£rvî_£ssi⁄_id_c⁄ãxt
 = 1;

272 c⁄° *
	gs_˚π_fûe
=
TEST_CERT
,*
	gs_key_fûe
=
NULL
;

273 #i‚de‡
OPENSSL_NO_TLSEXT


274 c⁄° *
	gs_˚π_fûe2
=
TEST_CERT2
,*
	gs_key_fûe2
=
NULL
;

276 *
	gs_d˚π_fûe
=
NULL
,*
	gs_dkey_fûe
=NULL;

277 #ifde‡
FIONBIO


278 
	gs_nbio
=0;

280 
	gs_nbio_ã°
=0;

281 
	gs_¸lf
=0;

282 
SSL_CTX
 *
	g˘x
=
NULL
;

283 #i‚de‡
OPENSSL_NO_TLSEXT


284 
SSL_CTX
 *
	g˘x2
=
NULL
;

286 
	gwww
=0;

288 
BIO
 *
	gbio_s_out
=
NULL
;

289 
	gs_debug
=0;

290 #i‚de‡
OPENSSL_NO_TLSEXT


291 
	gs_é£xtdebug
=0;

292 
	gs_é£xt°©us
=0;

293 
˚π_°©us_cb
(
SSL
 *
s
, *
¨g
);

295 
	gs_msg
=0;

296 
	gs_quõt
=0;

298 *
	gkeym©exp‹éabñ
=
NULL
;

299 
	gkeym©exp‹éí
=20;

301 
	ghack
=0;

302 #i‚de‡
OPENSSL_NO_ENGINE


303 *
	gígöe_id
=
NULL
;

305 c⁄° *
	g£ssi⁄_id_¥efix
=
NULL
;

307 
	gíabÀ_timeouts
 = 0;

308 
	gsockë_mtu
;

309 #i‚de‡
OPENSSL_NO_DTLS1


310 
	g˚π_chaö
 = 0;

314 #i‚de‡
OPENSSL_NO_PSK


315 *
	gpsk_idítôy
="Client_identity";

316 *
	gpsk_key
=
NULL
;

318 
	$psk_£rvî_cb
(
SSL
 *
s¶
, c⁄° *
idítôy
,

319 *
psk
, 
max_psk_Àn
)

321 
psk_Àn
 = 0;

322 
ªt
;

323 
BIGNUM
 *
bn
 = 
NULL
;

325 i‡(
s_debug
)

326 
	`BIO_¥ötf
(
bio_s_out
,"psk_server_cb\n");

327 i‡(!
idítôy
)

329 
	`BIO_¥ötf
(
bio_îr
,"Error: client didÇot send PSK identity\n");

330 
out_îr
;

332 i‡(
s_debug
)

333 
	`BIO_¥ötf
(
bio_s_out
,"identity_len=%d identity=%s\n",

334 
idítôy
 ? ()
	`°æí
(identity) : 0, identity);

337 i‡(
	`°rcmp
(
idítôy
, 
psk_idítôy
) != 0)

339 
	`BIO_¥ötf
(
bio_s_out
, "PSKÉrror: client identityÇot found"

340 " (gŸ '%s'Éx≥˘ed '%s')\n", 
idítôy
,

341 
psk_idítôy
);

342 
out_îr
;

344 i‡(
s_debug
)

345 
	`BIO_¥ötf
(
bio_s_out
, "PSK client identity found\n");

348 
ªt
 = 
	`BN_hex2bn
(&
bn
, 
psk_key
);

349 i‡(!
ªt
)

351 
	`BIO_¥ötf
(
bio_îr
,"CouldÇŸ c⁄vîàPSK key '%s'ÅÿBIGNUM\n", 
psk_key
);

352 i‡(
bn
)

353 
	`BN_‰ì
(
bn
);

356 i‡(
	`BN_num_byãs
(
bn
Ë> ()
max_psk_Àn
)

358 
	`BIO_¥ötf
(
bio_îr
,"psk buffer of callback isÅoo small (%d) for key (%d)\n",

359 
max_psk_Àn
, 
	`BN_num_byãs
(
bn
));

360 
	`BN_‰ì
(
bn
);

364 
ªt
 = 
	`BN_bn2bö
(
bn
, 
psk
);

365 
	`BN_‰ì
(
bn
);

367 i‡(
ªt
 < 0)

368 
out_îr
;

369 
psk_Àn
 = ()
ªt
;

371 i‡(
s_debug
)

372 
	`BIO_¥ötf
(
bio_s_out
, "„tched PSKÜí=%d\n", 
psk_Àn
);

373  
psk_Àn
;

374 
out_îr
:

375 i‡(
s_debug
)

376 
	`BIO_¥ötf
(
bio_îr
, "Error in PSK server callback\n");

378 
	}
}

381 #i‚de‡
OPENSSL_NO_SRP


383 
	s§p§v∑rm_°


385 *
	mlogö
;

386 
SRP_VBASE
 *
	mvb
;

387 
SRP_u£r_pwd
 *
	mu£r
;

388 } 
	t§p§v∑rm
;

397 
MS_CALLBACK
 
	$s¶_§p_£rvî_∑øm_cb
(
SSL
 *
s
, *
ad
, *
¨g
)

399 
§p§v∑rm
 *
p
 = (§p§v∑rm *)
¨g
;

400 i‡(
p
->
logö
 =
NULL
 &&Ö->
u£r
 == NULL )

402 
p
->
logö
 = 
	`SSL_gë_§p_u£∫ame
(
s
);

403 
	`BIO_¥ötf
(
bio_îr
, "SRP u£∫amê\"%s\"\n", 
p
->
logö
);

407 i‡(
p
->
u£r
 =
NULL
)

409 
	`BIO_¥ötf
(
bio_îr
, "U£∏%†d€¢'àexi°\n", 
p
->
logö
);

410  
SSL3_AL_FATAL
;

412 i‡(
	`SSL_£t_§p_£rvî_∑øm
(
s
, 
p
->
u£r
->
N
,Ö->u£r->
g
,Ö->u£r->s,Ö->u£r->
v
,

413 
p
->
u£r
->
öfo
) < 0)

415 *
ad
 = 
SSL_AD_INTERNAL_ERROR
;

416  
SSL3_AL_FATAL
;

418 
	`BIO_¥ötf
(
bio_îr
, "SRPÖ¨amëî†£t: u£∫amê\"%s\" info=\"%s\" \n", 
p
->
logö
,p->
u£r
->
öfo
);

420 
p
->
u£r
 = 
NULL
;

421 
p
->
logö
 = 
NULL
;

422  
SSL_ERROR_NONE
;

423 
	}
}

427 #ifde‡
MONOLITH


428 
	$s_£rvî_öô
()

430 
ac˚±_sockë
=-1;

431 
cùhî
=
NULL
;

432 
s_£rvî_vîify
=
SSL_VERIFY_NONE
;

433 
s_d˚π_fûe
=
NULL
;

434 
s_dkey_fûe
=
NULL
;

435 
s_˚π_fûe
=
TEST_CERT
;

436 
s_key_fûe
=
NULL
;

437 #i‚de‡
OPENSSL_NO_TLSEXT


438 
s_˚π_fûe2
=
TEST_CERT2
;

439 
s_key_fûe2
=
NULL
;

440 
˘x2
=
NULL
;

442 #ifde‡
FIONBIO


443 
s_nbio
=0;

445 
s_nbio_ã°
=0;

446 
˘x
=
NULL
;

447 
www
=0;

449 
bio_s_out
=
NULL
;

450 
s_debug
=0;

451 
s_msg
=0;

452 
s_quõt
=0;

453 
hack
=0;

454 #i‚de‡
OPENSSL_NO_ENGINE


455 
ígöe_id
=
NULL
;

457 
	}
}

460 
	$sv_ußge
()

462 
	`BIO_¥ötf
(
bio_îr
,"usage: s_server [args ...]\n");

463 
	`BIO_¥ötf
(
bio_îr
,"\n");

464 
	`BIO_¥ötf
(
bio_îr
," -ac˚±árg -Ö‹àtÿac˚± o¿(deÁu… i†%d)\n",
PORT
);

465 
	`BIO_¥ötf
(
bio_îr
," -contextárg - set session ID context\n");

466 
	`BIO_¥ötf
(
bio_îr
," -verifyárg -Åurn onÖeer certificate verification\n");

467 
	`BIO_¥ötf
(
bio_îr
," -Verifyárg -Åurn onÖeer certificate verification, must haveá cert.\n");

468 
	`BIO_¥ötf
(
bio_îr
," -certárg - certificate fileÅo use\n");

469 
	`BIO_¥ötf
(
bio_îr
," (deÁu… i†%s)\n",
TEST_CERT
);

470 
	`BIO_¥ötf
(
bio_îr
," -crl_check - checkÅheÖeer certificate hasÇot beenÑevoked by its CA.\n" \

472 
	`BIO_¥ötf
(
bio_îr
," -crl_check_all - checkÅheÖeer certificate hasÇot beenÑevoked by its CA\n" \

475 
	`BIO_¥ötf
(
bio_îr
," -certformárg - certificate format (PEM or DER) PEM default\n");

476 
	`BIO_¥ötf
(
bio_îr
," -keyárg - Private Key fileÅo use, in cert file if\n");

477 
	`BIO_¥ötf
(
bio_îr
,"ÇŸ s≥cifõd (deÁu… i†%s)\n",
TEST_CERT
);

478 
	`BIO_¥ötf
(
bio_îr
," -keyformárg - key format (PEM, DER or ENGINE) PEM default\n");

479 
	`BIO_¥ötf
(
bio_îr
," -passárg -Örivate key fileÖassÖhrase source\n");

480 
	`BIO_¥ötf
(
bio_îr
," -dcertárg - second certificate fileÅo use (usually for DSA)\n");

481 
	`BIO_¥ötf
(
bio_îr
," -dcertform x - second certificate format (PEM or DER) PEM default\n");

482 
	`BIO_¥ötf
(
bio_îr
," -dkeyárg - secondÖrivate key fileÅo use (usually for DSA)\n");

483 
	`BIO_¥ötf
(
bio_îr
," -dkeyformárg - second key format (PEM, DER or ENGINE) PEM default\n");

484 
	`BIO_¥ötf
(
bio_îr
," -dpassárg - secondÖrivate key fileÖassÖhrase source\n");

485 
	`BIO_¥ötf
(
bio_îr
," -dhparamárg - DHÖarameter fileÅo use, in cert file ifÇot specified\n");

486 
	`BIO_¥ötf
(
bio_îr
," orá default set ofÖarameters is used\n");

487 #i‚de‡
OPENSSL_NO_ECDH


488 
	`BIO_¥ötf
(
bio_îr
," -named_curveárg - Elliptic curveÇameÅo use forÉphemeral ECDH keys.\n" \

492 #ifde‡
FIONBIO


493 
	`BIO_¥ötf
(
bio_îr
," -nbio - Run withÇon-blocking IO\n");

495 
	`BIO_¥ötf
(
bio_îr
," -nbio_test -Åest withÅheÇon-blockingÅest bio\n");

496 
	`BIO_¥ötf
(
bio_îr
," -crlf - convert LF fromÅerminal into CRLF\n");

497 
	`BIO_¥ötf
(
bio_îr
," -debug - Print more output\n");

498 
	`BIO_¥ötf
(
bio_îr
," -msg - ShowÖrotocol messages\n");

499 
	`BIO_¥ötf
(
bio_îr
," -state - PrintÅhe SSL states\n");

500 
	`BIO_¥ötf
(
bio_îr
," -CApathárg - PEM format directory of CA's\n");

501 
	`BIO_¥ötf
(
bio_îr
," -CAfileárg - PEM format file of CA's\n");

502 
	`BIO_¥ötf
(
bio_îr
," -nocert - Don't useány certificates (Anon-DH)\n");

503 
	`BIO_¥ötf
(
bio_îr
," -cipherárg -Ölay with 'openssl ciphers'Åo see what goes here\n");

504 
	`BIO_¥ötf
(
bio_îr
," -serverpref - Use server's cipherÖreferences\n");

505 
	`BIO_¥ötf
(
bio_îr
," -quiet - No server output\n");

506 
	`BIO_¥ötf
(
bio_îr
," -no_tmp_rsa - DoÇot generateáÅmp RSA key\n");

507 #i‚de‡
OPENSSL_NO_PSK


508 
	`BIO_¥ötf
(
bio_îr
," -psk_hintárg - PSK identity hintÅo use\n");

509 
	`BIO_¥ötf
(
bio_îr
," -pskárg - PSK in hex (without 0x)\n");

510 #i‚de‡
OPENSSL_NO_JPAKE


511 
	`BIO_¥ötf
(
bio_îr
," -jpakeárg - JPAKE secretÅo use\n");

514 #i‚de‡
OPENSSL_NO_SRP


515 
	`BIO_¥ötf
(
bio_îr
," -srpvfile file - The verifier file for SRP\n");

516 
	`BIO_¥ötf
(
bio_îr
," -srpuserseed string - A seed string forá default user salt.\n");

518 
	`BIO_¥ötf
(
bio_îr
," -ssl2 - JustÅalk SSLv2\n");

519 
	`BIO_¥ötf
(
bio_îr
," -ssl3 - JustÅalk SSLv3\n");

520 
	`BIO_¥ötf
(
bio_îr
," -tls1_2 - JustÅalk TLSv1.2\n");

521 
	`BIO_¥ötf
(
bio_îr
," -tls1_1 - JustÅalk TLSv1.1\n");

522 
	`BIO_¥ötf
(
bio_îr
," -tls1 - JustÅalk TLSv1\n");

523 
	`BIO_¥ötf
(
bio_îr
," -dtls1 - JustÅalk DTLSv1\n");

524 
	`BIO_¥ötf
(
bio_îr
," -timeout - EnableÅimeouts\n");

525 
	`BIO_¥ötf
(
bio_îr
," -mtu - SetÜinkÜayer MTU\n");

526 
	`BIO_¥ötf
(
bio_îr
," -chain - Readá certificate chain\n");

527 
	`BIO_¥ötf
(
bio_îr
," -no_ssl2 - Just disable SSLv2\n");

528 
	`BIO_¥ötf
(
bio_îr
," -no_ssl3 - Just disable SSLv3\n");

529 
	`BIO_¥ötf
(
bio_îr
," -no_tls1 - Just disable TLSv1\n");

530 
	`BIO_¥ötf
(
bio_îr
," -no_tls1_1 - Just disable TLSv1.1\n");

531 
	`BIO_¥ötf
(
bio_îr
," -no_tls1_2 - Just disable TLSv1.2\n");

532 #i‚de‡
OPENSSL_NO_DH


533 
	`BIO_¥ötf
(
bio_îr
," -no_dhe - DisableÉphemeral DH\n");

535 #i‚de‡
OPENSSL_NO_ECDH


536 
	`BIO_¥ötf
(
bio_îr
," -no_ecdhe - DisableÉphemeral ECDH\n");

538 
	`BIO_¥ötf
(
bio_îr
," -bugs - Turn on SSL bug compatibility\n");

539 
	`BIO_¥ötf
(
bio_îr
," -www - RespondÅoá 'GET /' withá statusÖage\n");

540 
	`BIO_¥ötf
(
bio_îr
," -WWW - RespondÅoá 'GET /<path> HTTP/1.0' with file ./<path>\n");

541 
	`BIO_¥ötf
(
bio_îr
," -HTTP - RespondÅoá 'GET /<path> HTTP/1.0' with file ./<path>\n");

542 
	`BIO_¥ötf
(
bio_îr
," withÅheássumption it containsá complete HTTPÑesponse.\n");

543 #i‚de‡
OPENSSL_NO_ENGINE


544 
	`BIO_¥ötf
(
bio_îr
," -engine id - Initialiseánd useÅhe specifiedÉngine\n");

546 
	`BIO_¥ötf
(
bio_îr
," -id_prefixárg - Generate SSL/TLS session IDsÖrefixed by 'arg'\n");

547 
	`BIO_¥ötf
(
bio_îr
," -ønd fûe%cfûe%c...\n", 
LIST_SEPARATOR_CHAR
, LIST_SEPARATOR_CHAR);

548 #i‚de‡
OPENSSL_NO_TLSEXT


549 
	`BIO_¥ötf
(
bio_îr
," -servername host - servername for HostName TLSÉxtension\n");

550 
	`BIO_¥ötf
(
bio_îr
," -servername_fatal - on mismatch send fatalálert (default warningálert)\n");

551 
	`BIO_¥ötf
(
bio_îr
," -cert2árg - certificate fileÅo use for servername\n");

552 
	`BIO_¥ötf
(
bio_îr
," (deÁu… i†%s)\n",
TEST_CERT2
);

553 
	`BIO_¥ötf
(
bio_îr
," -key2árg - Private Key fileÅo use for servername, in cert file if\n");

554 
	`BIO_¥ötf
(
bio_îr
,"ÇŸ s≥cifõd (deÁu… i†%s)\n",
TEST_CERT2
);

555 
	`BIO_¥ötf
(
bio_îr
," -tlsextdebug - hex dump ofáll TLSÉxtensionsÑeceived\n");

556 
	`BIO_¥ötf
(
bio_îr
," -no_ticket - disable use of RFC4507bis sessionÅickets\n");

557 
	`BIO_¥ötf
(
bio_îr
," -legacy_renegotiation -Énable use ofÜegacyÑenegotiation (dangerous)\n");

558 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


559 
	`BIO_¥ötf
(
bio_îr
," -nextprotonegárg - setÅheádvertisedÖrotocols forÅhe NPNÉxtension (comma-separatedÜist)\n");

561 #i‚de‡
OPENSSL_NO_SRTP


562 
	`BIO_¥ötf
(
bio_îr
," -use_srtpÖrofiles - Offer SRTP key management withá colon-separatedÖrofileÜist\n");

565 
	`BIO_¥ötf
(
bio_îr
," -keymatexportÜabel - Export keying material usingÜabel\n");

566 
	`BIO_¥ötf
(
bio_îr
," -keymatexportlenÜen - ExportÜen bytes of keying material (default 20)\n");

567 
	}
}

569 
	gloˇl_¨gc
=0;

570 **
	gloˇl_¨gv
;

572 #ifde‡
CHARSET_EBCDIC


573 
ebcdic_√w
(
BIO
 *
bi
);

574 
ebcdic_‰ì
(
BIO
 *
a
);

575 
ebcdic_ªad
(
BIO
 *
b
, *
out
, 
oué
);

576 
ebcdic_wrôe
(
BIO
 *
b
, c⁄° *
ö
, 
öl
);

577 
ebcdic_˘æ
(
BIO
 *
b
, 
cmd
, 
num
, *
±r
);

578 
ebcdic_gës
(
BIO
 *
bp
, *
buf
, 
size
);

579 
ebcdic_puts
(
BIO
 *
bp
, c⁄° *
°r
);

581 
	#BIO_TYPE_EBCDIC_FILTER
 (18|0x0200)

	)

582 
BIO_METHOD
 
	gmëhods_ebcdic
=

584 
BIO_TYPE_EBCDIC_FILTER
,

586 
ebcdic_wrôe
,

587 
ebcdic_ªad
,

588 
ebcdic_puts
,

589 
ebcdic_gës
,

590 
ebcdic_˘æ
,

591 
ebcdic_√w
,

592 
ebcdic_‰ì
,

597 
size_t
 
	mÆlo˚d
;

598 
	mbuff
[1];

599 } 
	tEBCDIC_OUTBUFF
;

601 
BIO_METHOD
 *
	$BIO_f_ebcdic_fûãr
()

603 (&
mëhods_ebcdic
);

604 
	}
}

606 
	$ebcdic_√w
(
BIO
 *
bi
)

608 
EBCDIC_OUTBUFF
 *
wbuf
;

610 
wbuf
 = (
EBCDIC_OUTBUFF
 *)
	`OPENSSL_mÆloc
((EBCDIC_OUTBUFF) + 1024);

611 
wbuf
->
Ælo˚d
 = 1024;

612 
wbuf
->
buff
[0] = '\0';

614 
bi
->
±r
=(*)
wbuf
;

615 
bi
->
öô
=1;

616 
bi
->
Êags
=0;

618 
	}
}

620 
	$ebcdic_‰ì
(
BIO
 *
a
)

622 i‡(
a
 =
NULL
) (0);

623 i‡(
a
->
±r
 !
NULL
)

624 
	`OPENSSL_‰ì
(
a
->
±r
);

625 
a
->
±r
=
NULL
;

626 
a
->
öô
=0;

627 
a
->
Êags
=0;

629 
	}
}

631 
	$ebcdic_ªad
(
BIO
 *
b
, *
out
, 
oué
)

633 
ªt
=0;

635 i‡(
out
 =
NULL
 || 
oué
 == 0) (0);

636 i‡(
b
->
√xt_bio
 =
NULL
) (0);

638 
ªt
=
	`BIO_ªad
(
b
->
√xt_bio
,
out
,
oué
);

639 i‡(
ªt
 > 0)

640 
	`ascii2ebcdic
(
out
,out,
ªt
);

641 (
ªt
);

642 
	}
}

644 
	$ebcdic_wrôe
(
BIO
 *
b
, c⁄° *
ö
, 
öl
)

646 
EBCDIC_OUTBUFF
 *
wbuf
;

647 
ªt
=0;

648 
num
;

649 
n
;

651 i‡((
ö
 =
NULL
Ë|| (
öl
 <= 0)) (0);

652 i‡(
b
->
√xt_bio
 =
NULL
) (0);

654 
wbuf
=(
EBCDIC_OUTBUFF
 *)
b
->
±r
;

656 i‡(
öl
 > (
num
 = 
wbuf
->
Ælo˚d
))

658 
num
 =Çum +Çum;

659 i‡(
num
 < 
öl
)

660 
num
 = 
öl
;

661 
	`OPENSSL_‰ì
(
wbuf
);

662 
wbuf
=(
EBCDIC_OUTBUFF
 *)
	`OPENSSL_mÆloc
((EBCDIC_OUTBUFFË+ 
num
);

664 
wbuf
->
Ælo˚d
 = 
num
;

665 
wbuf
->
buff
[0] = '\0';

667 
b
->
±r
=(*)
wbuf
;

670 
	`ebcdic2ascii
(
wbuf
->
buff
, 
ö
, 
öl
);

672 
ªt
=
	`BIO_wrôe
(
b
->
√xt_bio
, 
wbuf
->
buff
, 
öl
);

674 (
ªt
);

675 
	}
}

677 
	$ebcdic_˘æ
(
BIO
 *
b
, 
cmd
, 
num
, *
±r
)

679 
ªt
;

681 i‡(
b
->
√xt_bio
 =
NULL
) (0);

682 
cmd
)

684 
BIO_CTRL_DUP
:

685 
ªt
=0L;

688 
ªt
=
	`BIO_˘æ
(
b
->
√xt_bio
,
cmd
,
num
,
±r
);

691 (
ªt
);

692 
	}
}

694 
	$ebcdic_gës
(
BIO
 *
bp
, *
buf
, 
size
)

696 
i
, 
ªt
=0;

697 i‡(
bp
->
√xt_bio
 =
NULL
) (0);

699 
i
=0; i<
size
-1; ++i)

701 
ªt
 = 
	`ebcdic_ªad
(
bp
,&
buf
[
i
],1);

702 i‡(
ªt
 <= 0)

704 i‡(
buf
[
i
] == '\n')

706 ++
i
;

710 i‡(
i
 < 
size
)

711 
buf
[
i
] = '\0';

712  (
ªt
 < 0 && 
i
 == 0) ?Ñet : i;

713 
	}
}

715 
	$ebcdic_puts
(
BIO
 *
bp
, c⁄° *
°r
)

717 i‡(
bp
->
√xt_bio
 =
NULL
) (0);

718  
	`ebcdic_wrôe
(
bp
, 
°r
, 
	`°æí
(str));

719 
	}
}

722 #i‚de‡
OPENSSL_NO_TLSEXT


725 
	sé£xt˘x_°
 {

726 * 
	m£rvî«me
;

727 
BIO
 * 
	mbiodebug
;

728 
	mexãnsi⁄_îr‹
;

729 } 
	té£xt˘x
;

732 
MS_CALLBACK
 
	$s¶_£rvî«me_cb
(
SSL
 *
s
, *
ad
, *
¨g
)

734 
é£xt˘x
 * 
p
 = (é£xt˘x *Ë
¨g
;

735 c⁄° * 
£rvî«me
 = 
	`SSL_gë_£rvî«me
(
s
, 
TLSEXT_NAMETYPE_ho°_«me
);

736 i‡(
£rvî«me
 && 
p
->
biodebug
)

737 
	`BIO_¥ötf
(
p
->
biodebug
,"Ho°«mêö TLSÉxãnsi⁄: \"%s\"\n",
£rvî«me
);

739 i‡(!
p
->
£rvî«me
)

740  
SSL_TLSEXT_ERR_NOACK
;

742 i‡(
£rvî«me
)

744 i‡(
	`°rcmp
(
£rvî«me
,
p
->servername))

745  
p
->
exãnsi⁄_îr‹
;

746 i‡(
˘x2
)

748 
	`BIO_¥ötf
(
p
->
biodebug
,"Switching server context.\n");

749 
	`SSL_£t_SSL_CTX
(
s
,
˘x2
);

752  
SSL_TLSEXT_ERR_OK
;

753 
	}
}

757 
	sé£xt°©us˘x_°
 {

759 *
	mho°
, *
	m∑th
, *
	mp‹t
;

760 
	mu£_s¶
;

761 
	mtimeout
;

762 
BIO
 *
	mîr
;

763 
	mvîbo£
;

764 } 
	té£xt°©us˘x
;

766 
é£xt°©us˘x
 
	gésc°©p
 = {
NULL
, NULL, NULL, 0, -1, NULL, 0};

779 
	$˚π_°©us_cb
(
SSL
 *
s
, *
¨g
)

781 
é£xt°©us˘x
 *
§˘x
 = 
¨g
;

782 
BIO
 *
îr
 = 
§˘x
->err;

783 *
ho°
, *
p‹t
, *
∑th
;

784 
u£_s¶
;

785 *
r•dî
 = 
NULL
;

786 
r•dîÀn
;

787 
	`STACK_OF
(
OPENSSL_STRING
Ë*
aü
 = 
NULL
;

788 
X509
 *
x
 = 
NULL
;

789 
X509_STORE_CTX
 
ö˘x
;

790 
X509_OBJECT
 
obj
;

791 
OCSP_REQUEST
 *
ªq
 = 
NULL
;

792 
OCSP_RESPONSE
 *
ª•
 = 
NULL
;

793 
OCSP_CERTID
 *
id
 = 
NULL
;

794 
	`STACK_OF
(
X509_EXTENSION
Ë*
exts
;

795 
ªt
 = 
SSL_TLSEXT_ERR_NOACK
;

796 
i
;

798 
	`STACK_OF
(
OCSP_RESPID
Ë*
ids
;

799 
	`SSL_gë_é£xt_°©us_ids
(
s
, &
ids
);

800 
	`BIO_¥ötf
(
îr
, "˚π_°©us:Ñe˚ived %d ids\n", 
	`sk_OCSP_RESPID_num
(
ids
));

802 i‡(
§˘x
->
vîbo£
)

803 
	`BIO_puts
(
îr
, "cert_status: callback called\n");

805 
x
 = 
	`SSL_gë_˚πifiˇã
(
s
);

806 
aü
 = 
	`X509_gë1_oc•
(
x
);

807 i‡(
aü
)

809 i‡(!
	`OCSP_∑r£_uæ
(
	`sk_OPENSSL_STRING_vÆue
(
aü
, 0),

810 &
ho°
, &
p‹t
, &
∑th
, &
u£_s¶
))

812 
	`BIO_puts
(
îr
, "cert_status: can'tÖarse AIA URL\n");

813 
îr
;

815 i‡(
§˘x
->
vîbo£
)

816 
	`BIO_¥ötf
(
îr
, "cert_status: AIA URL: %s\n",

817 
	`sk_OPENSSL_STRING_vÆue
(
aü
, 0));

821 i‡(!
§˘x
->
ho°
)

823 
	`BIO_puts
(
§˘x
->
îr
, "cert_status:Ço AIAándÇo defaultÑesponder URL\n");

824 
d⁄e
;

826 
ho°
 = 
§˘x
->host;

827 
∑th
 = 
§˘x
->path;

828 
p‹t
 = 
§˘x
->port;

829 
u£_s¶
 = 
§˘x
->use_ssl;

832 i‡(!
	`X509_STORE_CTX_öô
(&
ö˘x
,

833 
	`SSL_CTX_gë_˚π_°‹e
(
	`SSL_gë_SSL_CTX
(
s
)),

834 
NULL
, NULL))

835 
îr
;

836 i‡(
	`X509_STORE_gë_by_subje˘
(&
ö˘x
,
X509_LU_X509
,

837 
	`X509_gë_issuî_«me
(
x
),&
obj
) <= 0)

839 
	`BIO_puts
(
îr
, "cert_status: Can'tÑetrieve issuer certificate.\n");

840 
	`X509_STORE_CTX_˛ónup
(&
ö˘x
);

841 
d⁄e
;

843 
ªq
 = 
	`OCSP_REQUEST_√w
();

844 i‡(!
ªq
)

845 
îr
;

846 
id
 = 
	`OCSP_˚π_to_id
(
NULL
, 
x
, 
obj
.
d©a
.
x509
);

847 
	`X509_‰ì
(
obj
.
d©a
.
x509
);

848 
	`X509_STORE_CTX_˛ónup
(&
ö˘x
);

849 i‡(!
id
)

850 
îr
;

851 i‡(!
	`OCSP_ªque°_add0_id
(
ªq
, 
id
))

852 
îr
;

853 
id
 = 
NULL
;

855 
	`SSL_gë_é£xt_°©us_exts
(
s
, &
exts
);

856 
i
 = 0; i < 
	`sk_X509_EXTENSION_num
(
exts
); i++)

858 
X509_EXTENSION
 *
ext
 = 
	`sk_X509_EXTENSION_vÆue
(
exts
, 
i
);

859 i‡(!
	`OCSP_REQUEST_add_ext
(
ªq
, 
ext
, -1))

860 
îr
;

862 
ª•
 = 
	`¥o˚ss_ª•⁄dî
(
îr
, 
ªq
, 
ho°
, 
∑th
, 
p‹t
, 
u£_s¶
, 
NULL
,

863 
§˘x
->
timeout
);

864 i‡(!
ª•
)

866 
	`BIO_puts
(
îr
, "cert_status:Érror queryingÑesponder\n");

867 
d⁄e
;

869 
r•dîÀn
 = 
	`i2d_OCSP_RESPONSE
(
ª•
, &
r•dî
);

870 i‡(
r•dîÀn
 <= 0)

871 
îr
;

872 
	`SSL_£t_é£xt_°©us_oc•_ª•
(
s
, 
r•dî
, 
r•dîÀn
);

873 i‡(
§˘x
->
vîbo£
)

875 
	`BIO_puts
(
îr
, "cert_status: ocspÑesponse sent:\n");

876 
	`OCSP_RESPONSE_¥öt
(
îr
, 
ª•
, 2);

878 
ªt
 = 
SSL_TLSEXT_ERR_OK
;

879 
d⁄e
:

880 i‡(
ªt
 !
SSL_TLSEXT_ERR_OK
)

881 
	`ERR_¥öt_îr‹s
(
îr
);

882 i‡(
aü
)

884 
	`OPENSSL_‰ì
(
ho°
);

885 
	`OPENSSL_‰ì
(
∑th
);

886 
	`OPENSSL_‰ì
(
p‹t
);

887 
	`X509_emaû_‰ì
(
aü
);

889 i‡(
id
)

890 
	`OCSP_CERTID_‰ì
(
id
);

891 i‡(
ªq
)

892 
	`OCSP_REQUEST_‰ì
(
ªq
);

893 i‡(
ª•
)

894 
	`OCSP_RESPONSE_‰ì
(
ª•
);

895  
ªt
;

896 
îr
:

897 
ªt
 = 
SSL_TLSEXT_ERR_ALERT_FATAL
;

898 
d⁄e
;

899 
	}
}

901 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


903 
	sé£xäexçrŸo˘x_°
 {

904 *
	md©a
;

905 
	mÀn
;

906 } 
	té£xäexçrŸo˘x
;

908 
	$√xt_¥Ÿo_cb
(
SSL
 *
s
, c⁄° **
d©a
, *
Àn
, *
¨g
)

910 
é£xäexçrŸo˘x
 *
√xt_¥Ÿo
 = 
¨g
;

912 *
d©a
 = 
√xt_¥Ÿo
->data;

913 *
Àn
 = 
√xt_¥Ÿo
->len;

915  
SSL_TLSEXT_ERR_OK
;

916 
	}
}

922 
MAIN
(, **);

924 #i‚de‡
OPENSSL_NO_JPAKE


925 *
	gj∑ke_£¸ë
 = 
NULL
;

927 #i‚de‡
OPENSSL_NO_SRP


928 
§p§v∑rm
 
	g§p_ˇŒback_∑rm
;

930 #i‚de‡
OPENSSL_NO_SRTP


931 *
	g§ç_¥ofûes
 = 
NULL
;

934 
	$MAIN
(
¨gc
, *
¨gv
[])

936 
X509_VERIFY_PARAM
 *
vpm
 = 
NULL
;

937 
bad¨g
 = 0;

938 
p‹t
=
PORT
;

939 *
CA∑th
=
NULL
,*
CAfûe
=NULL;

940 *
c⁄ãxt
 = 
NULL
;

941 *
dhfûe
 = 
NULL
;

942 #i‚de‡
OPENSSL_NO_ECDH


943 *
«med_curve
 = 
NULL
;

945 
bad›
=0,
bugs
=0;

946 
ªt
=1;

947 
off
=0;

948 
no_tmp_rß
=0,
no_dhe
=0,
no_ecdhe
=0,
no˚π
=0;

949 
°©e
=0;

950 c⁄° 
SSL_METHOD
 *
mëh
=
NULL
;

951 
sockë_ty≥
=
SOCK_STREAM
;

952 
ENGINE
 *
e
=
NULL
;

953 *
öønd
=
NULL
;

954 
s_˚π_f‹m©
 = 
FORMAT_PEM
, 
s_key_f‹m©
 = FORMAT_PEM;

955 *
∑sßrg
 = 
NULL
, *
∑ss
 = NULL;

956 *
d∑sßrg
 = 
NULL
, *
d∑ss
 = NULL;

957 
s_d˚π_f‹m©
 = 
FORMAT_PEM
, 
s_dkey_f‹m©
 = FORMAT_PEM;

958 
X509
 *
s_˚π
 = 
NULL
, *
s_d˚π
 = NULL;

959 
EVP_PKEY
 *
s_key
 = 
NULL
, *
s_dkey
 = NULL;

960 
no_ˇche
 = 0;

961 #i‚de‡
OPENSSL_NO_TLSEXT


962 
EVP_PKEY
 *
s_key2
 = 
NULL
;

963 
X509
 *
s_˚π2
 = 
NULL
;

964 
é£xt˘x
 
é£xtcbp
 = {
NULL
, NULL, 
SSL_TLSEXT_ERR_ALERT_WARNING
};

965 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


966 c⁄° *
√xt_¥Ÿo_√g_ö
 = 
NULL
;

967 
é£xäexçrŸo˘x
 
√xt_¥Ÿo
;

970 #i‚de‡
OPENSSL_NO_PSK


972 *
psk_idítôy_höt
=
NULL
;

974 #i‚de‡
OPENSSL_NO_SRP


975 *
§pu£r£ed
 = 
NULL
;

976 *
§p_vîifõr_fûe
 = 
NULL
;

978 
mëh
=
	`SSLv23_£rvî_mëhod
();

980 
loˇl_¨gc
=
¨gc
;

981 
loˇl_¨gv
=
¨gv
;

983 
	`≠ps_°¨tup
();

984 #ifde‡
MONOLITH


985 
	`s_£rvî_öô
();

988 i‡(
bio_îr
 =
NULL
)

989 
bio_îr
=
	`BIO_√w_Â
(
°dîr
,
BIO_NOCLOSE
);

991 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

992 
íd
;

994 
vîify_dïth
=0;

995 #ifde‡
FIONBIO


996 
s_nbio
=0;

998 
s_nbio_ã°
=0;

1000 
¨gc
--;

1001 
¨gv
++;

1003 
¨gc
 >= 1)

1005 i‡((
	`°rcmp
(*
¨gv
,"-port") == 0) ||

1006 (
	`°rcmp
(*
¨gv
,"-accept") == 0))

1008 i‡(--
¨gc
 < 1Ë
bad
;

1009 i‡(!
	`exåa˘_p‹t
(*(++
¨gv
),&
p‹t
))

1010 
bad
;

1012 i‡(
	`°rcmp
(*
¨gv
,"-verify") == 0)

1014 
s_£rvî_vîify
=
SSL_VERIFY_PEER
|
SSL_VERIFY_CLIENT_ONCE
;

1015 i‡(--
¨gc
 < 1Ë
bad
;

1016 
vîify_dïth
=
	`©oi
(*(++
¨gv
));

1017 
	`BIO_¥ötf
(
bio_îr
,"vîify dïth i†%d\n",
vîify_dïth
);

1019 i‡(
	`°rcmp
(*
¨gv
,"-Verify") == 0)

1021 
s_£rvî_vîify
=
SSL_VERIFY_PEER
|
SSL_VERIFY_FAIL_IF_NO_PEER_CERT
|

1022 
SSL_VERIFY_CLIENT_ONCE
;

1023 i‡(--
¨gc
 < 1Ë
bad
;

1024 
vîify_dïth
=
	`©oi
(*(++
¨gv
));

1025 
	`BIO_¥ötf
(
bio_îr
,"vîify dïth i†%d, mu°Ñëu∫á cîtifiˇã\n",
vîify_dïth
);

1027 i‡(
	`°rcmp
(*
¨gv
,"-context") == 0)

1029 i‡(--
¨gc
 < 1Ë
bad
;

1030 
c⁄ãxt
(*)*(++
¨gv
);

1032 i‡(
	`°rcmp
(*
¨gv
,"-cert") == 0)

1034 i‡(--
¨gc
 < 1Ë
bad
;

1035 
s_˚π_fûe
*(++
¨gv
);

1037 i‡(
	`°rcmp
(*
¨gv
,"-certform") == 0)

1039 i‡(--
¨gc
 < 1Ë
bad
;

1040 
s_˚π_f‹m©
 = 
	`°r2fmt
(*(++
¨gv
));

1042 i‡(
	`°rcmp
(*
¨gv
,"-key") == 0)

1044 i‡(--
¨gc
 < 1Ë
bad
;

1045 
s_key_fûe
*(++
¨gv
);

1047 i‡(
	`°rcmp
(*
¨gv
,"-keyform") == 0)

1049 i‡(--
¨gc
 < 1Ë
bad
;

1050 
s_key_f‹m©
 = 
	`°r2fmt
(*(++
¨gv
));

1052 i‡(
	`°rcmp
(*
¨gv
,"-pass") == 0)

1054 i‡(--
¨gc
 < 1Ë
bad
;

1055 
∑sßrg
 = *(++
¨gv
);

1057 i‡(
	`°rcmp
(*
¨gv
,"-dhparam") == 0)

1059 i‡(--
¨gc
 < 1Ë
bad
;

1060 
dhfûe
 = *(++
¨gv
);

1062 #i‚de‡
OPENSSL_NO_ECDH


1063 i‡(
	`°rcmp
(*
¨gv
,"-named_curve") == 0)

1065 i‡(--
¨gc
 < 1Ë
bad
;

1066 
«med_curve
 = *(++
¨gv
);

1069 i‡(
	`°rcmp
(*
¨gv
,"-dcertform") == 0)

1071 i‡(--
¨gc
 < 1Ë
bad
;

1072 
s_d˚π_f‹m©
 = 
	`°r2fmt
(*(++
¨gv
));

1074 i‡(
	`°rcmp
(*
¨gv
,"-dcert") == 0)

1076 i‡(--
¨gc
 < 1Ë
bad
;

1077 
s_d˚π_fûe
*(++
¨gv
);

1079 i‡(
	`°rcmp
(*
¨gv
,"-dkeyform") == 0)

1081 i‡(--
¨gc
 < 1Ë
bad
;

1082 
s_dkey_f‹m©
 = 
	`°r2fmt
(*(++
¨gv
));

1084 i‡(
	`°rcmp
(*
¨gv
,"-dpass") == 0)

1086 i‡(--
¨gc
 < 1Ë
bad
;

1087 
d∑sßrg
 = *(++
¨gv
);

1089 i‡(
	`°rcmp
(*
¨gv
,"-dkey") == 0)

1091 i‡(--
¨gc
 < 1Ë
bad
;

1092 
s_dkey_fûe
*(++
¨gv
);

1094 i‡(
	`°rcmp
(*
¨gv
,"-nocert") == 0)

1096 
no˚π
=1;

1098 i‡(
	`°rcmp
(*
¨gv
,"-CApath") == 0)

1100 i‡(--
¨gc
 < 1Ë
bad
;

1101 
CA∑th
*(++
¨gv
);

1103 i‡(
	`°rcmp
(*
¨gv
,"-no_cache") == 0)

1104 
no_ˇche
 = 1;

1105 i‡(
	`¨gs_vîify
(&
¨gv
, &
¨gc
, &
bad¨g
, 
bio_îr
, &
vpm
))

1107 i‡(
bad¨g
)

1108 
bad
;

1111 i‡(
	`°rcmp
(*
¨gv
,"-verify_return_error") == 0)

1112 
vîify_ªtu∫_îr‹
 = 1;

1113 i‡(
	`°rcmp
(*
¨gv
,"-serverpref") == 0)

1114 { 
off
|=
SSL_OP_CIPHER_SERVER_PREFERENCE
; }

1115 i‡(
	`°rcmp
(*
¨gv
,"-legacy_renegotiation") == 0)

1116 
off
|=
SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION
;

1117 i‡(
	`°rcmp
(*
¨gv
,"-cipher") == 0)

1119 i‡(--
¨gc
 < 1Ë
bad
;

1120 
cùhî
*(++
¨gv
);

1122 i‡(
	`°rcmp
(*
¨gv
,"-CAfile") == 0)

1124 i‡(--
¨gc
 < 1Ë
bad
;

1125 
CAfûe
*(++
¨gv
);

1127 #ifde‡
FIONBIO


1128 i‡(
	`°rcmp
(*
¨gv
,"-nbio") == 0)

1129 { 
s_nbio
=1; }

1131 i‡(
	`°rcmp
(*
¨gv
,"-nbio_test") == 0)

1133 #ifde‡
FIONBIO


1134 
s_nbio
=1;

1136 
s_nbio_ã°
=1;

1138 i‡(
	`°rcmp
(*
¨gv
,"-debug") == 0)

1139 { 
s_debug
=1; }

1140 #i‚de‡
OPENSSL_NO_TLSEXT


1141 i‡(
	`°rcmp
(*
¨gv
,"-tlsextdebug") == 0)

1142 
s_é£xtdebug
=1;

1143 i‡(
	`°rcmp
(*
¨gv
,"-status") == 0)

1144 
s_é£xt°©us
=1;

1145 i‡(
	`°rcmp
(*
¨gv
,"-status_verbose") == 0)

1147 
s_é£xt°©us
=1;

1148 
ésc°©p
.
vîbo£
 = 1;

1150 i‡(!
	`°rcmp
(*
¨gv
, "-status_timeout"))

1152 
s_é£xt°©us
=1;

1153 i‡(--
¨gc
 < 1Ë
bad
;

1154 
ésc°©p
.
timeout
 = 
	`©oi
(*(++
¨gv
));

1156 i‡(!
	`°rcmp
(*
¨gv
, "-status_url"))

1158 
s_é£xt°©us
=1;

1159 i‡(--
¨gc
 < 1Ë
bad
;

1160 i‡(!
	`OCSP_∑r£_uæ
(*(++
¨gv
),

1161 &
ésc°©p
.
ho°
,

1162 &
ésc°©p
.
p‹t
,

1163 &
ésc°©p
.
∑th
,

1164 &
ésc°©p
.
u£_s¶
))

1166 
	`BIO_¥ötf
(
bio_îr
, "ErrorÖarsing URL\n");

1167 
bad
;

1171 i‡(
	`°rcmp
(*
¨gv
,"-msg") == 0)

1172 { 
s_msg
=1; }

1173 i‡(
	`°rcmp
(*
¨gv
,"-hack") == 0)

1174 { 
hack
=1; }

1175 i‡(
	`°rcmp
(*
¨gv
,"-state") == 0)

1176 { 
°©e
=1; }

1177 i‡(
	`°rcmp
(*
¨gv
,"-crlf") == 0)

1178 { 
s_¸lf
=1; }

1179 i‡(
	`°rcmp
(*
¨gv
,"-quiet") == 0)

1180 { 
s_quõt
=1; }

1181 i‡(
	`°rcmp
(*
¨gv
,"-bugs") == 0)

1182 { 
bugs
=1; }

1183 i‡(
	`°rcmp
(*
¨gv
,"-no_tmp_rsa") == 0)

1184 { 
no_tmp_rß
=1; }

1185 i‡(
	`°rcmp
(*
¨gv
,"-no_dhe") == 0)

1186 { 
no_dhe
=1; }

1187 i‡(
	`°rcmp
(*
¨gv
,"-no_ecdhe") == 0)

1188 { 
no_ecdhe
=1; }

1189 #i‚de‡
OPENSSL_NO_PSK


1190 i‡(
	`°rcmp
(*
¨gv
,"-psk_hint") == 0)

1192 i‡(--
¨gc
 < 1Ë
bad
;

1193 
psk_idítôy_höt
*(++
¨gv
);

1195 i‡(
	`°rcmp
(*
¨gv
,"-psk") == 0)

1197 
size_t
 
i
;

1199 i‡(--
¨gc
 < 1Ë
bad
;

1200 
psk_key
=*(++
¨gv
);

1201 
i
=0; i<
	`°æí
(
psk_key
); i++)

1203 i‡(
	`isxdigô
(()
psk_key
[
i
]))

1205 
	`BIO_¥ötf
(
bio_îr
,"NŸá hexÇumbî '%s'\n",*
¨gv
);

1206 
bad
;

1210 #i‚de‡
OPENSSL_NO_SRP


1211 i‡(
	`°rcmp
(*
¨gv
, "-srpvfile") == 0)

1213 i‡(--
¨gc
 < 1Ë
bad
;

1214 
§p_vîifõr_fûe
 = *(++
¨gv
);

1215 
mëh
 = 
	`TLSv1_£rvî_mëhod
();

1217 i‡(
	`°rcmp
(*
¨gv
, "-srpuserseed") == 0)

1219 i‡(--
¨gc
 < 1Ë
bad
;

1220 
§pu£r£ed
 = *(++
¨gv
);

1221 
mëh
 = 
	`TLSv1_£rvî_mëhod
();

1224 i‡(
	`°rcmp
(*
¨gv
,"-www") == 0)

1225 { 
www
=1; }

1226 i‡(
	`°rcmp
(*
¨gv
,"-WWW") == 0)

1227 { 
www
=2; }

1228 i‡(
	`°rcmp
(*
¨gv
,"-HTTP") == 0)

1229 { 
www
=3; }

1230 i‡(
	`°rcmp
(*
¨gv
,"-no_ssl2") == 0)

1231 { 
off
|=
SSL_OP_NO_SSLv2
; }

1232 i‡(
	`°rcmp
(*
¨gv
,"-no_ssl3") == 0)

1233 { 
off
|=
SSL_OP_NO_SSLv3
; }

1234 i‡(
	`°rcmp
(*
¨gv
,"-no_tls1") == 0)

1235 { 
off
|=
SSL_OP_NO_TLSv1
; }

1236 i‡(
	`°rcmp
(*
¨gv
,"-no_tls1_1") == 0)

1237 { 
off
|=
SSL_OP_NO_TLSv1_1
; }

1238 i‡(
	`°rcmp
(*
¨gv
,"-no_tls1_2") == 0)

1239 { 
off
|=
SSL_OP_NO_TLSv1_2
; }

1240 i‡(
	`°rcmp
(*
¨gv
,"-no_comp") == 0)

1241 { 
off
|=
SSL_OP_NO_COMPRESSION
; }

1242 #i‚de‡
OPENSSL_NO_TLSEXT


1243 i‡(
	`°rcmp
(*
¨gv
,"-no_ticket") == 0)

1244 { 
off
|=
SSL_OP_NO_TICKET
; }

1246 #i‚de‡
OPENSSL_NO_SSL2


1247 i‡(
	`°rcmp
(*
¨gv
,"-ssl2") == 0)

1248 { 
mëh
=
	`SSLv2_£rvî_mëhod
(); }

1250 #i‚de‡
OPENSSL_NO_SSL3


1251 i‡(
	`°rcmp
(*
¨gv
,"-ssl3") == 0)

1252 { 
mëh
=
	`SSLv3_£rvî_mëhod
(); }

1254 #i‚de‡
OPENSSL_NO_TLS1


1255 i‡(
	`°rcmp
(*
¨gv
,"-tls1") == 0)

1256 { 
mëh
=
	`TLSv1_£rvî_mëhod
(); }

1257 i‡(
	`°rcmp
(*
¨gv
,"-tls1_1") == 0)

1258 { 
mëh
=
	`TLSv1_1_£rvî_mëhod
(); }

1259 i‡(
	`°rcmp
(*
¨gv
,"-tls1_2") == 0)

1260 { 
mëh
=
	`TLSv1_2_£rvî_mëhod
(); }

1262 #i‚de‡
OPENSSL_NO_DTLS1


1263 i‡(
	`°rcmp
(*
¨gv
,"-dtls1") == 0)

1265 
mëh
=
	`DTLSv1_£rvî_mëhod
();

1266 
sockë_ty≥
 = 
SOCK_DGRAM
;

1268 i‡(
	`°rcmp
(*
¨gv
,"-timeout") == 0)

1269 
íabÀ_timeouts
 = 1;

1270 i‡(
	`°rcmp
(*
¨gv
,"-mtu") == 0)

1272 i‡(--
¨gc
 < 1Ë
bad
;

1273 
sockë_mtu
 = 
	`©ﬁ
(*(++
¨gv
));

1275 i‡(
	`°rcmp
(*
¨gv
, "-chain") == 0)

1276 
˚π_chaö
 = 1;

1278 i‡(
	`°rcmp
(*
¨gv
, "-id_prefix") == 0)

1280 i‡(--
¨gc
 < 1Ë
bad
;

1281 
£ssi⁄_id_¥efix
 = *(++
¨gv
);

1283 #i‚de‡
OPENSSL_NO_ENGINE


1284 i‡(
	`°rcmp
(*
¨gv
,"-engine") == 0)

1286 i‡(--
¨gc
 < 1Ë
bad
;

1287 
ígöe_id
*(++
¨gv
);

1290 i‡(
	`°rcmp
(*
¨gv
,"-rand") == 0)

1292 i‡(--
¨gc
 < 1Ë
bad
;

1293 
öønd
*(++
¨gv
);

1295 #i‚de‡
OPENSSL_NO_TLSEXT


1296 i‡(
	`°rcmp
(*
¨gv
,"-servername") == 0)

1298 i‡(--
¨gc
 < 1Ë
bad
;

1299 
é£xtcbp
.
£rvî«me
*(++
¨gv
);

1301 i‡(
	`°rcmp
(*
¨gv
,"-servername_fatal") == 0)

1302 { 
é£xtcbp
.
exãnsi⁄_îr‹
 = 
SSL_TLSEXT_ERR_ALERT_FATAL
; }

1303 i‡(
	`°rcmp
(*
¨gv
,"-cert2") == 0)

1305 i‡(--
¨gc
 < 1Ë
bad
;

1306 
s_˚π_fûe2
*(++
¨gv
);

1308 i‡(
	`°rcmp
(*
¨gv
,"-key2") == 0)

1310 i‡(--
¨gc
 < 1Ë
bad
;

1311 
s_key_fûe2
*(++
¨gv
);

1313 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


1314 i‡(
	`°rcmp
(*
¨gv
,"-nextprotoneg") == 0)

1316 i‡(--
¨gc
 < 1Ë
bad
;

1317 
√xt_¥Ÿo_√g_ö
 = *(++
¨gv
);

1321 #i‡!
	`deföed
(
OPENSSL_NO_JPAKE
Ë&& !deföed(
OPENSSL_NO_PSK
)

1322 i‡(
	`°rcmp
(*
¨gv
,"-jpake") == 0)

1324 i‡(--
¨gc
 < 1Ë
bad
;

1325 
j∑ke_£¸ë
 = *(++
¨gv
);

1328 #i‚de‡
OPENSSL_NO_SRTP


1329 i‡(
	`°rcmp
(*
¨gv
,"-use_srtp") == 0)

1331 i‡(--
¨gc
 < 1Ë
bad
;

1332 
§ç_¥ofûes
 = *(++
¨gv
);

1335 i‡(
	`°rcmp
(*
¨gv
,"-keymatexport") == 0)

1337 i‡(--
¨gc
 < 1Ë
bad
;

1338 
keym©exp‹éabñ
*(++
¨gv
);

1340 i‡(
	`°rcmp
(*
¨gv
,"-keymatexportlen") == 0)

1342 i‡(--
¨gc
 < 1Ë
bad
;

1343 
keym©exp‹éí
=
	`©oi
(*(++
¨gv
));

1344 i‡(
keym©exp‹éí
 =0Ë
bad
;

1346 #ifdef 
ASHOKE_TOOL


1347 i‡(
	`°rcmp
(*
¨gv
,"-reuseCount") == 0)

1349 i‡(--
¨gc
 < 1Ë
bad
;

1350 
ªu£Cou¡
=
	`©oi
(*(++
¨gv
));

1352 i‡(
	`°rcmp
(*
¨gv
,"-rotateCipher") == 0)

1354 
rŸ©eCùhî
 = 1;

1359 
	`BIO_¥ötf
(
bio_îr
,"unknow¿›ti⁄ %s\n",*
¨gv
);

1360 
bad›
=1;

1363 
¨gc
--;

1364 
¨gv
++;

1366 i‡(
bad›
)

1368 
bad
:

1369 
	`sv_ußge
();

1370 
íd
;

1373 #i‡!
	`deföed
(
OPENSSL_NO_JPAKE
Ë&& !deföed(
OPENSSL_NO_PSK
)

1374 i‡(
j∑ke_£¸ë
)

1376 i‡(
psk_key
)

1378 
	`BIO_¥ötf
(
bio_îr
,

1380 
íd
;

1382 
psk_idítôy
 = "JPAKE";

1383 i‡(
cùhî
)

1385 
	`BIO_¥ötf
(
bio_îr
, "JPAKE sets cipherÅo PSK\n");

1386 
íd
;

1388 
cùhî
 = "PSK";

1393 
	`SSL_lﬂd_îr‹_°rögs
();

1394 
	`O≥nSSL_add_s¶_Æg‹ôhms
();

1396 #i‚de‡
OPENSSL_NO_ENGINE


1397 
e
 = 
	`£tup_ígöe
(
bio_îr
, 
ígöe_id
, 1);

1400 i‡(!
	`≠p_∑sswd
(
bio_îr
, 
∑sßrg
, 
d∑sßrg
, &
∑ss
, &
d∑ss
))

1402 
	`BIO_¥ötf
(
bio_îr
, "Error gettingÖassword\n");

1403 
íd
;

1407 i‡(
s_key_fûe
 =
NULL
)

1408 
s_key_fûe
 = 
s_˚π_fûe
;

1409 #i‚de‡
OPENSSL_NO_TLSEXT


1410 i‡(
s_key_fûe2
 =
NULL
)

1411 
s_key_fûe2
 = 
s_˚π_fûe2
;

1414 i‡(
no˚π
 == 0)

1416 
s_key
 = 
	`lﬂd_key
(
bio_îr
, 
s_key_fûe
, 
s_key_f‹m©
, 0, 
∑ss
, 
e
,

1418 i‡(!
s_key
)

1420 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1421 
íd
;

1424 
s_˚π
 = 
	`lﬂd_˚π
(
bio_îr
,
s_˚π_fûe
,
s_˚π_f‹m©
,

1425 
NULL
, 
e
, "server certificate file");

1427 i‡(!
s_˚π
)

1429 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1430 
íd
;

1433 #i‚de‡
OPENSSL_NO_TLSEXT


1434 i‡(
é£xtcbp
.
£rvî«me
)

1436 
s_key2
 = 
	`lﬂd_key
(
bio_îr
, 
s_key_fûe2
, 
s_key_f‹m©
, 0, 
∑ss
, 
e
,

1438 i‡(!
s_key2
)

1440 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1441 
íd
;

1444 
s_˚π2
 = 
	`lﬂd_˚π
(
bio_îr
,
s_˚π_fûe2
,
s_˚π_f‹m©
,

1445 
NULL
, 
e
, "second server certificate file");

1447 i‡(!
s_˚π2
)

1449 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1450 
íd
;

1456 #i‡!
	`deföed
(
OPENSSL_NO_TLSEXT
Ë&& !deföed(
OPENSSL_NO_NEXTPROTONEG
)

1457 i‡(
√xt_¥Ÿo_√g_ö
)

1459 
Àn
;

1460 
√xt_¥Ÿo
.
d©a
 = 
	`√xt_¥Ÿos_∑r£
(&
Àn
, 
√xt_¥Ÿo_√g_ö
);

1461 i‡(
√xt_¥Ÿo
.
d©a
 =
NULL
)

1462 
íd
;

1463 
√xt_¥Ÿo
.
Àn
 =Üen;

1467 
√xt_¥Ÿo
.
d©a
 = 
NULL
;

1472 i‡(
s_d˚π_fûe
)

1475 i‡(
s_dkey_fûe
 =
NULL
)

1476 
s_dkey_fûe
 = 
s_d˚π_fûe
;

1478 
s_dkey
 = 
	`lﬂd_key
(
bio_îr
, 
s_dkey_fûe
, 
s_dkey_f‹m©
,

1479 0, 
d∑ss
, 
e
,

1481 i‡(!
s_dkey
)

1483 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1484 
íd
;

1487 
s_d˚π
 = 
	`lﬂd_˚π
(
bio_îr
,
s_d˚π_fûe
,
s_d˚π_f‹m©
,

1488 
NULL
, 
e
, "second server certificate file");

1490 i‡(!
s_d˚π
)

1492 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1493 
íd
;

1498 i‡(!
	`≠p_RAND_lﬂd_fûe
(
NULL
, 
bio_îr
, 1Ë&& 
öønd
 == NULL

1499 && !
	`RAND_°©us
())

1501 
	`BIO_¥ötf
(
bio_îr
,"warning,Çot muchÉxtraÑandom data, consider usingÅhe -rand option\n");

1503 i‡(
öønd
 !
NULL
)

1504 
	`BIO_¥ötf
(
bio_îr
,"%ld semi-random bytesÜoaded\n",

1505 
	`≠p_RAND_lﬂd_fûes
(
öønd
));

1507 i‡(
bio_s_out
 =
NULL
)

1509 i‡(
s_quõt
 && !
s_debug
 && !
s_msg
)

1511 
bio_s_out
=
	`BIO_√w
(
	`BIO_s_nuŒ
());

1515 i‡(
bio_s_out
 =
NULL
)

1516 
bio_s_out
=
	`BIO_√w_Â
(
°dout
,
BIO_NOCLOSE
);

1520 #i‡!
	`deföed
(
OPENSSL_NO_RSA
Ë|| !deföed(
OPENSSL_NO_DSA
Ë|| !deföed(
OPENSSL_NO_ECDSA
)

1521 i‡(
no˚π
)

1524 
s_˚π_fûe
=
NULL
;

1525 
s_key_fûe
=
NULL
;

1526 
s_d˚π_fûe
=
NULL
;

1527 
s_dkey_fûe
=
NULL
;

1528 #i‚de‡
OPENSSL_NO_TLSEXT


1529 
s_˚π_fûe2
=
NULL
;

1530 
s_key_fûe2
=
NULL
;

1534 
˘x
=
	`SSL_CTX_√w
(
mëh
);

1535 i‡(
˘x
 =
NULL
)

1537 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1538 
íd
;

1540 i‡(
£ssi⁄_id_¥efix
)

1542 if(
	`°æí
(
£ssi⁄_id_¥efix
) >= 32)

1543 
	`BIO_¥ötf
(
bio_îr
,

1545 if(
	`°æí
(
£ssi⁄_id_¥efix
) >= 16)

1546 
	`BIO_¥ötf
(
bio_îr
,

1548 if(!
	`SSL_CTX_£t_gíî©e_£ssi⁄_id
(
˘x
, 
gíî©e_£ssi⁄_id
))

1550 
	`BIO_¥ötf
(
bio_îr
,"error setting 'id_prefix'\n");

1551 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1552 
íd
;

1554 
	`BIO_¥ötf
(
bio_îr
,"id_¥efix '%s' së.\n", 
£ssi⁄_id_¥efix
);

1556 
	`SSL_CTX_£t_quõt_shutdown
(
˘x
,1);

1557 i‡(
bugs
Ë
	`SSL_CTX_£t_›ti⁄s
(
˘x
,
SSL_OP_ALL
);

1558 i‡(
hack
Ë
	`SSL_CTX_£t_›ti⁄s
(
˘x
,
SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG
);

1559 
	`SSL_CTX_£t_›ti⁄s
(
˘x
,
off
);

1563 i‡(
sockë_ty≥
 =
SOCK_DGRAM
Ë
	`SSL_CTX_£t_ªad_ahód
(
˘x
, 1);

1565 i‡(
°©e
Ë
	`SSL_CTX_£t_öfo_ˇŒback
(
˘x
,
≠ps_s¶_öfo_ˇŒback
);

1566 i‡(
no_ˇche
)

1567 
	`SSL_CTX_£t_£ssi⁄_ˇche_mode
(
˘x
, 
SSL_SESS_CACHE_OFF
);

1569 
	`SSL_CTX_£ss_£t_ˇche_size
(
˘x
,128);

1571 #i‚de‡
OPENSSL_NO_SRTP


1572 i‡(
§ç_¥ofûes
 !
NULL
)

1573 
	`SSL_CTX_£t_é£xt_u£_§ç
(
˘x
, 
§ç_¥ofûes
);

1577 i‡(
cùhî
 =
NULL
Ëcùhî=
	`gëív
("SSL_CIPHER");

1581 i‡(
s_˚π_fûe
 =
NULL
)

1583 
	`BIO_¥ötf
(
bio_îr
,"You must specifyá certificate file forÅhe serverÅo use\n");

1584 
íd
;

1588 i‡((!
	`SSL_CTX_lﬂd_vîify_loˇti⁄s
(
˘x
,
CAfûe
,
CA∑th
)) ||

1589 (!
	`SSL_CTX_£t_deÁu…_vîify_∑ths
(
˘x
)))

1592 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1595 i‡(
vpm
)

1596 
	`SSL_CTX_£t1_∑øm
(
˘x
, 
vpm
);

1598 #i‚de‡
OPENSSL_NO_TLSEXT


1599 i‡(
s_˚π2
)

1601 
˘x2
=
	`SSL_CTX_√w
(
mëh
);

1602 i‡(
˘x2
 =
NULL
)

1604 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1605 
íd
;

1609 i‡(
˘x2
)

1611 
	`BIO_¥ötf
(
bio_s_out
,"Setting secondary ctxÖarameters\n");

1613 i‡(
£ssi⁄_id_¥efix
)

1615 if(
	`°æí
(
£ssi⁄_id_¥efix
) >= 32)

1616 
	`BIO_¥ötf
(
bio_îr
,

1618 if(
	`°æí
(
£ssi⁄_id_¥efix
) >= 16)

1619 
	`BIO_¥ötf
(
bio_îr
,

1621 if(!
	`SSL_CTX_£t_gíî©e_£ssi⁄_id
(
˘x2
, 
gíî©e_£ssi⁄_id
))

1623 
	`BIO_¥ötf
(
bio_îr
,"error setting 'id_prefix'\n");

1624 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1625 
íd
;

1627 
	`BIO_¥ötf
(
bio_îr
,"id_¥efix '%s' së.\n", 
£ssi⁄_id_¥efix
);

1629 
	`SSL_CTX_£t_quõt_shutdown
(
˘x2
,1);

1630 i‡(
bugs
Ë
	`SSL_CTX_£t_›ti⁄s
(
˘x2
,
SSL_OP_ALL
);

1631 i‡(
hack
Ë
	`SSL_CTX_£t_›ti⁄s
(
˘x2
,
SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG
);

1632 
	`SSL_CTX_£t_›ti⁄s
(
˘x2
,
off
);

1636 i‡(
sockë_ty≥
 =
SOCK_DGRAM
Ë
	`SSL_CTX_£t_ªad_ahód
(
˘x2
, 1);

1638 i‡(
°©e
Ë
	`SSL_CTX_£t_öfo_ˇŒback
(
˘x2
,
≠ps_s¶_öfo_ˇŒback
);

1640 i‡(
no_ˇche
)

1641 
	`SSL_CTX_£t_£ssi⁄_ˇche_mode
(
˘x2
,
SSL_SESS_CACHE_OFF
);

1643 
	`SSL_CTX_£ss_£t_ˇche_size
(
˘x2
,128);

1645 i‡((!
	`SSL_CTX_lﬂd_vîify_loˇti⁄s
(
˘x2
,
CAfûe
,
CA∑th
)) ||

1646 (!
	`SSL_CTX_£t_deÁu…_vîify_∑ths
(
˘x2
)))

1648 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1650 i‡(
vpm
)

1651 
	`SSL_CTX_£t1_∑øm
(
˘x2
, 
vpm
);

1654 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


1655 i‡(
√xt_¥Ÿo
.
d©a
)

1656 
	`SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb
(
˘x
, 
√xt_¥Ÿo_cb
, &
√xt_¥Ÿo
);

1660 #i‚de‡
OPENSSL_NO_DH


1661 i‡(!
no_dhe
)

1663 
DH
 *
dh
=
NULL
;

1665 i‡(
dhfûe
)

1666 
dh
 = 
	`lﬂd_dh_∑øm
(
dhfûe
);

1667 i‡(
s_˚π_fûe
)

1668 
dh
 = 
	`lﬂd_dh_∑øm
(
s_˚π_fûe
);

1670 i‡(
dh
 !
NULL
)

1672 
	`BIO_¥ötf
(
bio_s_out
,"SettingÅemp DHÖarameters\n");

1676 
	`BIO_¥ötf
(
bio_s_out
,"Using defaultÅemp DHÖarameters\n");

1677 
dh
=
	`gë_dh512
();

1679 ()
	`BIO_Êush
(
bio_s_out
);

1681 
	`SSL_CTX_£t_tmp_dh
(
˘x
,
dh
);

1682 #i‚de‡
OPENSSL_NO_TLSEXT


1683 i‡(
˘x2
)

1685 i‡(!
dhfûe
)

1687 
DH
 *
dh2
=
	`lﬂd_dh_∑øm
(
s_˚π_fûe2
);

1688 i‡(
dh2
 !
NULL
)

1690 
	`BIO_¥ötf
(
bio_s_out
,"SettingÅemp DHÖarameters\n");

1691 ()
	`BIO_Êush
(
bio_s_out
);

1693 
	`DH_‰ì
(
dh
);

1694 
dh
 = 
dh2
;

1697 
	`SSL_CTX_£t_tmp_dh
(
˘x2
,
dh
);

1700 
	`DH_‰ì
(
dh
);

1704 #i‚de‡
OPENSSL_NO_ECDH


1705 i‡(!
no_ecdhe
)

1707 
EC_KEY
 *
ecdh
=
NULL
;

1709 i‡(
«med_curve
)

1711 
nid
 = 
	`OBJ_¢2nid
(
«med_curve
);

1713 i‡(
nid
 == 0)

1715 
	`BIO_¥ötf
(
bio_îr
, "unknown curveÇame (%s)\n",

1716 
«med_curve
);

1717 
íd
;

1719 
ecdh
 = 
	`EC_KEY_√w_by_curve_«me
(
nid
);

1720 i‡(
ecdh
 =
NULL
)

1722 
	`BIO_¥ötf
(
bio_îr
, "unableÅo create curve (%s)\n",

1723 
«med_curve
);

1724 
íd
;

1728 i‡(
ecdh
 !
NULL
)

1730 
	`BIO_¥ötf
(
bio_s_out
,"SettingÅemp ECDHÖarameters\n");

1734 
	`BIO_¥ötf
(
bio_s_out
,"Using defaultÅemp ECDHÖarameters\n");

1735 
ecdh
 = 
	`EC_KEY_√w_by_curve_«me
(
NID_X9_62_¥ime256v1
);

1736 i‡(
ecdh
 =
NULL
)

1738 
	`BIO_¥ötf
(
bio_îr
, "unableÅo create curve (nistp256)\n");

1739 
íd
;

1742 ()
	`BIO_Êush
(
bio_s_out
);

1744 
	`SSL_CTX_£t_tmp_ecdh
(
˘x
,
ecdh
);

1745 #i‚de‡
OPENSSL_NO_TLSEXT


1746 i‡(
˘x2
)

1747 
	`SSL_CTX_£t_tmp_ecdh
(
˘x2
,
ecdh
);

1749 
	`EC_KEY_‰ì
(
ecdh
);

1753 i‡(!
	`£t_˚π_key_°uff
(
˘x
, 
s_˚π
, 
s_key
))

1754 
íd
;

1755 #i‚de‡
OPENSSL_NO_TLSEXT


1756 i‡(
˘x2
 && !
	`£t_˚π_key_°uff
(˘x2,
s_˚π2
,
s_key2
))

1757 
íd
;

1759 i‡(
s_d˚π
 !
NULL
)

1761 i‡(!
	`£t_˚π_key_°uff
(
˘x
, 
s_d˚π
, 
s_dkey
))

1762 
íd
;

1765 #i‚de‡
OPENSSL_NO_RSA


1767 i‡(!
no_tmp_rß
)

1769 
	`SSL_CTX_£t_tmp_rß_ˇŒback
(
˘x
,
tmp_rß_cb
);

1770 #i‚de‡
OPENSSL_NO_TLSEXT


1771 i‡(
˘x2
)

1772 
	`SSL_CTX_£t_tmp_rß_ˇŒback
(
˘x2
,
tmp_rß_cb
);

1776 i‡(!
no_tmp_rß
 && 
	`SSL_CTX_√ed_tmp_RSA
(
˘x
))

1778 
RSA
 *
rß
;

1780 
	`BIO_¥ötf
(
bio_s_out
,"GeneratingÅemp (512 bit) RSA key...");

1781 
	`BIO_Êush
(
bio_s_out
);

1783 
rß
=
	`RSA_gíî©e_key
(512,
RSA_F4
,
NULL
);

1785 i‡(!
	`SSL_CTX_£t_tmp_rß
(
˘x
,
rß
))

1787 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1788 
íd
;

1790 #i‚de‡
OPENSSL_NO_TLSEXT


1791 i‡(
˘x2
)

1793 i‡(!
	`SSL_CTX_£t_tmp_rß
(
˘x2
,
rß
))

1795 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1796 
íd
;

1800 
	`RSA_‰ì
(
rß
);

1801 
	`BIO_¥ötf
(
bio_s_out
,"\n");

1806 #i‚de‡
OPENSSL_NO_PSK


1807 #ifde‡
OPENSSL_NO_JPAKE


1808 i‡(
psk_key
 !
NULL
)

1810 i‡(
psk_key
 !
NULL
 || 
j∑ke_£¸ë
)

1813 i‡(
s_debug
)

1814 
	`BIO_¥ötf
(
bio_s_out
, "PSK key given or JPAKE in use, setting server callback\n");

1815 
	`SSL_CTX_£t_psk_£rvî_ˇŒback
(
˘x
, 
psk_£rvî_cb
);

1818 i‡(!
	`SSL_CTX_u£_psk_idítôy_höt
(
˘x
, 
psk_idítôy_höt
))

1820 
	`BIO_¥ötf
(
bio_îr
,"error setting PSK identity hintÅo context\n");

1821 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1822 
íd
;

1826 i‡(
cùhî
 !
NULL
)

1828 if(!
	`SSL_CTX_£t_cùhî_li°
(
˘x
,
cùhî
))

1830 
	`BIO_¥ötf
(
bio_îr
,"error setting cipherÜist\n");

1831 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1832 
íd
;

1834 #i‚de‡
OPENSSL_NO_TLSEXT


1835 i‡(
˘x2
 && !
	`SSL_CTX_£t_cùhî_li°
(˘x2,
cùhî
))

1837 
	`BIO_¥ötf
(
bio_îr
,"error setting cipherÜist\n");

1838 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1839 
íd
;

1843 
	`SSL_CTX_£t_vîify
(
˘x
,
s_£rvî_vîify
,
vîify_ˇŒback
);

1844 
	`SSL_CTX_£t_£ssi⁄_id_c⁄ãxt
(
˘x
,(*)&
s_£rvî_£ssi⁄_id_c⁄ãxt
,

1845  
s_£rvî_£ssi⁄_id_c⁄ãxt
);

1848 
	`SSL_CTX_£t_cookõ_gíî©e_cb
(
˘x
, 
gíî©e_cookõ_ˇŒback
);

1849 
	`SSL_CTX_£t_cookõ_vîify_cb
(
˘x
, 
vîify_cookõ_ˇŒback
);

1851 #i‚de‡
OPENSSL_NO_TLSEXT


1852 i‡(
˘x2
)

1854 
	`SSL_CTX_£t_vîify
(
˘x2
,
s_£rvî_vîify
,
vîify_ˇŒback
);

1855 
	`SSL_CTX_£t_£ssi⁄_id_c⁄ãxt
(
˘x2
,(*)&
s_£rvî_£ssi⁄_id_c⁄ãxt
,

1856  
s_£rvî_£ssi⁄_id_c⁄ãxt
);

1858 
é£xtcbp
.
biodebug
 = 
bio_s_out
;

1859 
	`SSL_CTX_£t_é£xt_£rvî«me_ˇŒback
(
˘x2
, 
s¶_£rvî«me_cb
);

1860 
	`SSL_CTX_£t_é£xt_£rvî«me_¨g
(
˘x2
, &
é£xtcbp
);

1861 
	`SSL_CTX_£t_é£xt_£rvî«me_ˇŒback
(
˘x
, 
s¶_£rvî«me_cb
);

1862 
	`SSL_CTX_£t_é£xt_£rvî«me_¨g
(
˘x
, &
é£xtcbp
);

1866 #i‚de‡
OPENSSL_NO_SRP


1867 i‡(
§p_vîifõr_fûe
 !
NULL
)

1869 
§p_ˇŒback_∑rm
.
vb
 = 
	`SRP_VBASE_√w
(
§pu£r£ed
);

1870 
§p_ˇŒback_∑rm
.
u£r
 = 
NULL
;

1871 
§p_ˇŒback_∑rm
.
logö
 = 
NULL
;

1872 i‡((
ªt
 = 
	`SRP_VBASE_öô
(
§p_ˇŒback_∑rm
.
vb
, 
§p_vîifõr_fûe
)Ë!
SRP_NO_ERROR
)

1874 
	`BIO_¥ötf
(
bio_îr
,

1876 
§p_vîifõr_fûe
, 
ªt
);

1877 
íd
;

1879 
	`SSL_CTX_£t_vîify
(
˘x
, 
SSL_VERIFY_NONE
,
vîify_ˇŒback
);

1880 
	`SSL_CTX_£t_§p_cb_¨g
(
˘x
, &
§p_ˇŒback_∑rm
);

1881 
	`SSL_CTX_£t_§p_u£∫ame_ˇŒback
(
˘x
, 
s¶_§p_£rvî_∑øm_cb
);

1885 i‡(
CAfûe
 !
NULL
)

1887 
	`SSL_CTX_£t_˛õ¡_CA_li°
(
˘x
,
	`SSL_lﬂd_˛õ¡_CA_fûe
(
CAfûe
));

1888 #i‚de‡
OPENSSL_NO_TLSEXT


1889 i‡(
˘x2
)

1890 
	`SSL_CTX_£t_˛õ¡_CA_li°
(
˘x2
,
	`SSL_lﬂd_˛õ¡_CA_fûe
(
CAfûe
));

1894 
	`BIO_¥ötf
(
bio_s_out
,"ACCEPT\n");

1895 ()
	`BIO_Êush
(
bio_s_out
);

1897 i‡(
www
)

1898 
	`do_£rvî
(
p‹t
,
sockë_ty≥
,&
ac˚±_sockë
,
www_body
, 
c⁄ãxt
);

1900 
	`do_£rvî
(
p‹t
,
sockë_ty≥
,&
ac˚±_sockë
,
sv_body
, 
c⁄ãxt
);

1902 
	`¥öt_°©s
(
bio_s_out
,
˘x
);

1903 
ªt
=0;

1905 
íd
:

1906 i‡(
˘x
 !
NULL
Ë
	`SSL_CTX_‰ì
(ctx);

1907 i‡(
s_˚π
)

1908 
	`X509_‰ì
(
s_˚π
);

1909 i‡(
s_d˚π
)

1910 
	`X509_‰ì
(
s_d˚π
);

1911 i‡(
s_key
)

1912 
	`EVP_PKEY_‰ì
(
s_key
);

1913 i‡(
s_dkey
)

1914 
	`EVP_PKEY_‰ì
(
s_dkey
);

1915 i‡(
∑ss
)

1916 
	`OPENSSL_‰ì
(
∑ss
);

1917 i‡(
d∑ss
)

1918 
	`OPENSSL_‰ì
(
d∑ss
);

1919 i‡(
vpm
)

1920 
	`X509_VERIFY_PARAM_‰ì
(
vpm
);

1921 #i‚de‡
OPENSSL_NO_TLSEXT


1922 i‡(
ésc°©p
.
ho°
)

1923 
	`OPENSSL_‰ì
(
ésc°©p
.
ho°
);

1924 i‡(
ésc°©p
.
p‹t
)

1925 
	`OPENSSL_‰ì
(
ésc°©p
.
p‹t
);

1926 i‡(
ésc°©p
.
∑th
)

1927 
	`OPENSSL_‰ì
(
ésc°©p
.
∑th
);

1928 i‡(
˘x2
 !
NULL
Ë
	`SSL_CTX_‰ì
(ctx2);

1929 i‡(
s_˚π2
)

1930 
	`X509_‰ì
(
s_˚π2
);

1931 i‡(
s_key2
)

1932 
	`EVP_PKEY_‰ì
(
s_key2
);

1934 i‡(
bio_s_out
 !
NULL
)

1936 
	`BIO_‰ì
(
bio_s_out
);

1937 
bio_s_out
=
NULL
;

1939 
	`≠ps_shutdown
();

1940 
	`OPENSSL_EXIT
(
ªt
);

1941 
	}
}

1943 
	$¥öt_°©s
(
BIO
 *
bio
, 
SSL_CTX
 *
s¶_˘x
)

1945 
	`BIO_¥ötf
(
bio
,"%4ld items inÅhe session cache\n",

1946 
	`SSL_CTX_£ss_numbî
(
s¶_˘x
));

1947 
	`BIO_¥ötf
(
bio
,"%4ld client connects (SSL_connect())\n",

1948 
	`SSL_CTX_£ss_c⁄√˘
(
s¶_˘x
));

1949 
	`BIO_¥ötf
(
bio
,"%4ld clientÑenegotiates (SSL_connect())\n",

1950 
	`SSL_CTX_£ss_c⁄√˘_ª√gŸüã
(
s¶_˘x
));

1951 
	`BIO_¥ötf
(
bio
,"%4ld client connectsÅhat finished\n",

1952 
	`SSL_CTX_£ss_c⁄√˘_good
(
s¶_˘x
));

1953 
	`BIO_¥ötf
(
bio
,"%4ld serveráccepts (SSL_accept())\n",

1954 
	`SSL_CTX_£ss_ac˚±
(
s¶_˘x
));

1955 
	`BIO_¥ötf
(
bio
,"%4ld serverÑenegotiates (SSL_accept())\n",

1956 
	`SSL_CTX_£ss_ac˚±_ª√gŸüã
(
s¶_˘x
));

1957 
	`BIO_¥ötf
(
bio
,"%4ld serverácceptsÅhat finished\n",

1958 
	`SSL_CTX_£ss_ac˚±_good
(
s¶_˘x
));

1959 
	`BIO_¥ötf
(
bio
,"%4ld sessi⁄ cachêhôs\n",
	`SSL_CTX_£ss_hôs
(
s¶_˘x
));

1960 
	`BIO_¥ötf
(
bio
,"%4ld sessi⁄ cachêmis£s\n",
	`SSL_CTX_£ss_mis£s
(
s¶_˘x
));

1961 
	`BIO_¥ötf
(
bio
,"%4ld sessi⁄ cachêtimeouts\n",
	`SSL_CTX_£ss_timeouts
(
s¶_˘x
));

1962 
	`BIO_¥ötf
(
bio
,"%4ld cÆlback cachêhôs\n",
	`SSL_CTX_£ss_cb_hôs
(
s¶_˘x
));

1963 
	`BIO_¥ötf
(
bio
,"%4ld cache full overflows (%ldállowed)\n",

1964 
	`SSL_CTX_£ss_ˇche_fuŒ
(
s¶_˘x
),

1965 
	`SSL_CTX_£ss_gë_ˇche_size
(
s¶_˘x
));

1966 
	}
}

1968 
	$sv_body
(*
ho°«me
, 
s
, *
c⁄ãxt
)

1970 *
buf
=
NULL
;

1971 
fd_£t
 
ªadfds
;

1972 
ªt
=1,
width
;

1973 
k
,
i
;

1974 
l
;

1975 
SSL
 *
c⁄
=
NULL
;

1976 
BIO
 *
sbio
;

1977 #i‚de‡
OPENSSL_NO_KRB5


1978 
KSSL_CTX
 *
k˘x
;

1980 
timevÆ
 
timeout
;

1981 #i‡
	`deföed
(
OPENSSL_SYS_WINDOWS
Ë|| deföed(
OPENSSL_SYS_MSDOS
Ë|| deföed(
OPENSSL_SYS_NETWARE
Ë|| deföed(
OPENSSL_SYS_BEOS_R5
)

1982 
timevÆ
 
tv
;

1984 
timevÆ
 *
timeouç
;

1987 #ifdef 
ASHOKE_TOOL


1988 
cidx
 = 0;

1989 *
˛i°
[3] = {"AES128-SHA","AES256-SHA","RC4-MD5"};

1993 i‡((
buf
=
	`OPENSSL_mÆloc
(
bufsize
)Ë=
NULL
)

1995 
	`BIO_¥ötf
(
bio_îr
,"out of memory\n");

1996 
îr
;

1998 #ifde‡
FIONBIO


1999 i‡(
s_nbio
)

2001 
¶
=1;

2003 i‡(!
s_quõt
)

2004 
	`BIO_¥ötf
(
bio_îr
,"turning onÇon blocking io\n");

2005 i‡(
	`BIO_sockë_io˘l
(
s
,
FIONBIO
,&
¶
) < 0)

2006 
	`ERR_¥öt_îr‹s
(
bio_îr
);

2010 i‡(
c⁄
 =
NULL
)

2012 
c⁄
=
	`SSL_√w
(
˘x
);

2014 #i‚de‡
OPENSSL_NO_TLSEXT


2015 i‡(
s_é£xtdebug
)

2017 
	`SSL_£t_é£xt_debug_ˇŒback
(
c⁄
, 
é£xt_cb
);

2018 
	`SSL_£t_é£xt_debug_¨g
(
c⁄
, 
bio_s_out
);

2020 i‡(
s_é£xt°©us
)

2022 
	`SSL_CTX_£t_é£xt_°©us_cb
(
˘x
, 
˚π_°©us_cb
);

2023 
ésc°©p
.
îr
 = 
bio_îr
;

2024 
	`SSL_CTX_£t_é£xt_°©us_¨g
(
˘x
, &
ésc°©p
);

2027 #i‚de‡
OPENSSL_NO_KRB5


2028 i‡((
k˘x
 = 
	`ks¶_˘x_√w
()Ë!
NULL
)

2030 
	`SSL_£t0_ks¶_˘x
(
c⁄
, 
k˘x
);

2031 
	`ks¶_˘x_£t°rög
(
k˘x
, 
KSSL_SERVICE
, 
KRB5SVC
);

2032 
	`ks¶_˘x_£t°rög
(
k˘x
, 
KSSL_KEYTAB
, 
KRB5KEYTAB
);

2035 if(
c⁄ãxt
)

2036 
	`SSL_£t_£ssi⁄_id_c⁄ãxt
(
c⁄
, 
c⁄ãxt
,
	`°æí
((*)context));

2038 
	`SSL_˛ór
(
c⁄
);

2041 i‡(
	`SSL_vîsi⁄
(
c⁄
Ë=
DTLS1_VERSION
)

2044 
sbio
=
	`BIO_√w_dgøm
(
s
,
BIO_NOCLOSE
);

2046 i‡(
íabÀ_timeouts
)

2048 
timeout
.
tv_£c
 = 0;

2049 
timeout
.
tv_u£c
 = 
DGRAM_RCV_TIMEOUT
;

2050 
	`BIO_˘æ
(
sbio
, 
BIO_CTRL_DGRAM_SET_RECV_TIMEOUT
, 0, &
timeout
);

2052 
timeout
.
tv_£c
 = 0;

2053 
timeout
.
tv_u£c
 = 
DGRAM_SND_TIMEOUT
;

2054 
	`BIO_˘æ
(
sbio
, 
BIO_CTRL_DGRAM_SET_SEND_TIMEOUT
, 0, &
timeout
);

2057 i‡(
sockë_mtu
 > 28)

2059 
	`SSL_£t_›ti⁄s
(
c⁄
, 
SSL_OP_NO_QUERY_MTU
);

2060 
	`SSL_£t_mtu
(
c⁄
, 
sockë_mtu
 - 28);

2064 
	`BIO_˘æ
(
sbio
, 
BIO_CTRL_DGRAM_MTU_DISCOVER
, 0, 
NULL
);

2067 
	`SSL_£t_›ti⁄s
(
c⁄
, 
SSL_OP_COOKIE_EXCHANGE
);

2070 
sbio
=
	`BIO_√w_sockë
(
s
,
BIO_NOCLOSE
);

2072 i‡(
s_nbio_ã°
)

2074 
BIO
 *
ã°
;

2076 
ã°
=
	`BIO_√w
(
	`BIO_f_nbio_ã°
());

2077 
sbio
=
	`BIO_push
(
ã°
,sbio);

2079 #i‚de‡
OPENSSL_NO_JPAKE


2080 if(
j∑ke_£¸ë
)

2081 
	`j∑ke_£rvî_auth
(
bio_s_out
, 
sbio
, 
j∑ke_£¸ë
);

2084 
	`SSL_£t_bio
(
c⁄
,
sbio
,sbio);

2085 
	`SSL_£t_ac˚±_°©e
(
c⁄
);

2088 i‡(
s_debug
)

2090 
	`SSL_£t_debug
(
c⁄
, 1);

2091 
	`BIO_£t_ˇŒback
(
	`SSL_gë_rbio
(
c⁄
),
bio_dump_ˇŒback
);

2092 
	`BIO_£t_ˇŒback_¨g
(
	`SSL_gë_rbio
(
c⁄
),(*)
bio_s_out
);

2094 i‡(
s_msg
)

2096 
	`SSL_£t_msg_ˇŒback
(
c⁄
, 
msg_cb
);

2097 
	`SSL_£t_msg_ˇŒback_¨g
(
c⁄
, 
bio_s_out
);

2099 #i‚de‡
OPENSSL_NO_TLSEXT


2100 i‡(
s_é£xtdebug
)

2102 
	`SSL_£t_é£xt_debug_ˇŒback
(
c⁄
, 
é£xt_cb
);

2103 
	`SSL_£t_é£xt_debug_¨g
(
c⁄
, 
bio_s_out
);

2107 
width
=
s
+1;

2110 
ªad_‰om_ãrmöÆ
;

2111 
ªad_‰om_s¶c⁄
;

2113 
ªad_‰om_ãrmöÆ
 = 0;

2114 
ªad_‰om_s¶c⁄
 = 
	`SSL_≥ndög
(
c⁄
);

2116 i‡(!
ªad_‰om_s¶c⁄
)

2118 
	`FD_ZERO
(&
ªadfds
);

2119 #i‡!
	`deföed
(
OPENSSL_SYS_WINDOWS
Ë&& !deföed(
OPENSSL_SYS_MSDOS
Ë&& !deföed(
OPENSSL_SYS_NETWARE
Ë&& !deföed(
OPENSSL_SYS_BEOS_R5
)

2120 
	`›ís¶_fd£t
(
	`fûío
(
°dö
),&
ªadfds
);

2122 
	`›ís¶_fd£t
(
s
,&
ªadfds
);

2129 #i‡
	`deföed
(
OPENSSL_SYS_WINDOWS
Ë|| deföed(
OPENSSL_SYS_MSDOS
Ë|| deföed(
OPENSSL_SYS_NETWARE
)

2135 
tv
.
tv_£c
 = 1;

2136 
tv
.
tv_u£c
 = 0;

2137 
i
=
	`£À˘
(
width
,(*)&
ªadfds
,
NULL
,NULL,&
tv
);

2138 if((
i
 < 0Ë|| (!ò&& !
	`_kbhô
() ) );

2139 if(
	`_kbhô
())

2140 
ªad_‰om_ãrmöÆ
 = 1;

2141 #ñi‡
	`deföed
(
OPENSSL_SYS_BEOS_R5
)

2143 
tv
.
tv_£c
 = 1;

2144 
tv
.
tv_u£c
 = 0;

2145 ()
	`f˙é
(
	`fûío
(
°dö
), 
F_SETFL
, 
O_NONBLOCK
);

2146 
i
=
	`£À˘
(
width
,(*)&
ªadfds
,
NULL
,NULL,&
tv
);

2147 i‡((
i
 < 0Ë|| (!ò&& 
	`ªad
(
	`fûío
(
°dö
), 
buf
, 0) < 0))

2149 i‡(
	`ªad
(
	`fûío
(
°dö
), 
buf
, 0) >= 0)

2150 
ªad_‰om_ãrmöÆ
 = 1;

2151 ()
	`f˙é
(
	`fûío
(
°dö
), 
F_SETFL
, 0);

2153 i‡((
	`SSL_vîsi⁄
(
c⁄
Ë=
DTLS1_VERSION
) &&

2154 
	`DTLSv1_gë_timeout
(
c⁄
, &
timeout
))

2155 
timeouç
 = &
timeout
;

2157 
timeouç
 = 
NULL
;

2159 
i
=
	`£À˘
(
width
,(*)&
ªadfds
,
NULL
,NULL,
timeouç
);

2161 i‡((
	`SSL_vîsi⁄
(
c⁄
Ë=
DTLS1_VERSION
Ë&& 
	`DTLSv1_h™dÀ_timeout
(con) > 0)

2163 
	`BIO_¥ötf
(
bio_îr
,"TIMEOUT occured\n");

2166 i‡(
i
 <= 0) ;

2167 i‡(
	`FD_ISSET
(
	`fûío
(
°dö
),&
ªadfds
))

2168 
ªad_‰om_ãrmöÆ
 = 1;

2170 i‡(
	`FD_ISSET
(
s
,&
ªadfds
))

2171 
ªad_‰om_s¶c⁄
 = 1;

2173 i‡(
ªad_‰om_ãrmöÆ
)

2175 i‡(
s_¸lf
)

2177 
j
, 
lf_num
;

2179 
i
=
	`øw_ªad_°dö
(
buf
, 
bufsize
/2);

2180 
lf_num
 = 0;

2182 
j
 = 0; j < 
i
; j++)

2183 i‡(
buf
[
j
] == '\n')

2184 
lf_num
++;

2185 
j
 = 
i
-1; j >= 0; j--)

2187 
buf
[
j
+
lf_num
] = buf[j];

2188 i‡(
buf
[
j
] == '\n')

2190 
lf_num
--;

2191 
i
++;

2192 
buf
[
j
+
lf_num
] = '\r';

2195 
	`as£π
(
lf_num
 == 0);

2198 
i
=
	`øw_ªad_°dö
(
buf
,
bufsize
);

2199 i‡(!
s_quõt
)

2201 i‡((
i
 <0Ë|| (
buf
[0] == 'Q'))

2203 
	`BIO_¥ötf
(
bio_s_out
,"DONE\n");

2204 
	`SHUTDOWN
(
s
);

2205 
	`˛o£_ac˚±_sockë
();

2206 
ªt
= -11;

2207 
îr
;

2209 i‡((
i
 <0Ë|| (
buf
[0] == 'q'))

2211 
	`BIO_¥ötf
(
bio_s_out
,"DONE\n");

2212 i‡(
	`SSL_vîsi⁄
(
c⁄
Ë!
DTLS1_VERSION
)

2213 
	`SHUTDOWN
(
s
);

2216 
îr
;

2219 #i‚de‡
OPENSSL_NO_HEARTBEATS


2220 i‡((
buf
[0] == 'B') &&

2221 ((
buf
[1] == '\n') || (buf[1] == '\r')))

2223 
	`BIO_¥ötf
(
bio_îr
,"HEARTBEATING\n");

2224 
	`SSL_hóπbót
(
c⁄
);

2225 
i
=0;

2229 i‡((
buf
[0] == 'r') &&

2230 ((
buf
[1] == '\n') || (buf[1] == '\r')))

2232 
	`SSL_ª√gŸüã
(
c⁄
);

2233 
i
=
	`SSL_do_h™dshake
(
c⁄
);

2234 
	`¥ötf
("SSL_do_h™dshakê-> %d\n",
i
);

2235 
i
=0;

2239 i‡((
buf
[0] == 'R') &&

2240 ((
buf
[1] == '\n') || (buf[1] == '\r')))

2242 
	`SSL_£t_vîify
(
c⁄
,

2243 
SSL_VERIFY_PEER
|
SSL_VERIFY_CLIENT_ONCE
,
NULL
);

2244 
	`SSL_ª√gŸüã
(
c⁄
);

2245 
i
=
	`SSL_do_h™dshake
(
c⁄
);

2246 
	`¥ötf
("SSL_do_h™dshakê-> %d\n",
i
);

2247 
i
=0;

2251 i‡(
buf
[0] == 'P')

2253 c⁄° *
°r
="LetsÖrint some clearÅext\n";

2254 
	`BIO_wrôe
(
	`SSL_gë_wbio
(
c⁄
),
°r
,
	`°æí
(str));

2256 i‡(
buf
[0] == 'S')

2258 
	`¥öt_°©s
(
bio_s_out
,
	`SSL_gë_SSL_CTX
(
c⁄
));

2261 #ifde‡
CHARSET_EBCDIC


2262 
	`ebcdic2ascii
(
buf
,buf,
i
);

2264 
l
=
k
=0;

2268 #ifde‡
RENEG


2269 { 
cou¡
=0; i‡(++cou¡ =100Ë{ cou¡=0; 
	`SSL_ª√gŸüã
(
c⁄
); } }

2271 
k
=
	`SSL_wrôe
(
c⁄
,&(
buf
[
l
]),()
i
);

2272 #i‚de‡
OPENSSL_NO_SRP


2273 
	`SSL_gë_îr‹
(
c⁄
,
k
Ë=
SSL_ERROR_WANT_X509_LOOKUP
)

2275 
	`BIO_¥ötf
(
bio_s_out
,"LOOKUPÑenego during write\n");

2276 
§p_ˇŒback_∑rm
.
u£r
 = 
	`SRP_VBASE_gë_by_u£r
(§p_ˇŒback_∑rm.
vb
, sΩ_ˇŒback_∑rm.
logö
);

2277 i‡(
§p_ˇŒback_∑rm
.
u£r
)

2278 
	`BIO_¥ötf
(
bio_s_out
,"LOOKUP d⁄ê%s\n",
§p_ˇŒback_∑rm
.
u£r
->
öfo
);

2280 
	`BIO_¥ötf
(
bio_s_out
,"LOOKUPÇot successful\n");

2281 
k
=
	`SSL_wrôe
(
c⁄
,&(
buf
[
l
]),()
i
);

2284 
	`SSL_gë_îr‹
(
c⁄
,
k
))

2286 
SSL_ERROR_NONE
:

2288 
SSL_ERROR_WANT_WRITE
:

2289 
SSL_ERROR_WANT_READ
:

2290 
SSL_ERROR_WANT_X509_LOOKUP
:

2291 
	`BIO_¥ötf
(
bio_s_out
,"Write BLOCK\n");

2293 
SSL_ERROR_SYSCALL
:

2294 
SSL_ERROR_SSL
:

2295 
	`BIO_¥ötf
(
bio_s_out
,"ERROR\n");

2296 
	`ERR_¥öt_îr‹s
(
bio_îr
);

2297 
ªt
=1;

2298 
îr
;

2300 
SSL_ERROR_ZERO_RETURN
:

2301 
	`BIO_¥ötf
(
bio_s_out
,"DONE\n");

2302 
ªt
=1;

2303 
îr
;

2305 
l
+=
k
;

2306 
i
-=
k
;

2307 i‡(
i
 <= 0) ;

2310 i‡(
ªad_‰om_s¶c⁄
)

2312 i‡(!
	`SSL_is_öô_föished
(
c⁄
))

2314 
i
=
	`öô_s¶_c⁄√˘i⁄
(
c⁄
);

2316 i‡(
i
 < 0)

2318 
ªt
=0;

2319 
îr
;

2321 i‡(
i
 == 0)

2323 
ªt
=1;

2324 
îr
;

2329 
agaö
:

2330 
i
=
	`SSL_ªad
(
c⁄
,(*)
buf
,
bufsize
);

2331 #i‚de‡
OPENSSL_NO_SRP


2332 
	`SSL_gë_îr‹
(
c⁄
,
i
Ë=
SSL_ERROR_WANT_X509_LOOKUP
)

2334 
	`BIO_¥ötf
(
bio_s_out
,"LOOKUPÑenego duringÑead\n");

2335 
§p_ˇŒback_∑rm
.
u£r
 = 
	`SRP_VBASE_gë_by_u£r
(§p_ˇŒback_∑rm.
vb
, sΩ_ˇŒback_∑rm.
logö
);

2336 i‡(
§p_ˇŒback_∑rm
.
u£r
)

2337 
	`BIO_¥ötf
(
bio_s_out
,"LOOKUP d⁄ê%s\n",
§p_ˇŒback_∑rm
.
u£r
->
öfo
);

2339 
	`BIO_¥ötf
(
bio_s_out
,"LOOKUPÇot successful\n");

2340 
i
=
	`SSL_ªad
(
c⁄
,(*)
buf
,
bufsize
);

2343 
	`SSL_gë_îr‹
(
c⁄
,
i
))

2345 
SSL_ERROR_NONE
:

2346 #ifde‡
CHARSET_EBCDIC


2347 
	`ascii2ebcdic
(
buf
,buf,
i
);

2349 
	`øw_wrôe_°dout
(
buf
,

2350 ()
i
);

2351 i‡(
	`SSL_≥ndög
(
c⁄
)Ë
agaö
;

2353 
SSL_ERROR_WANT_WRITE
:

2354 
SSL_ERROR_WANT_READ
:

2355 
	`BIO_¥ötf
(
bio_s_out
,"Read BLOCK\n");

2357 
SSL_ERROR_SYSCALL
:

2358 
SSL_ERROR_SSL
:

2359 
	`BIO_¥ötf
(
bio_s_out
,"ERROR\n");

2360 
	`ERR_¥öt_îr‹s
(
bio_îr
);

2361 
ªt
=1;

2362 
îr
;

2363 
SSL_ERROR_ZERO_RETURN
:

2364 
	`BIO_¥ötf
(
bio_s_out
,"DONE\n");

2365 
ªt
=1;

2366 
îr
;

2371 
îr
:

2372 i‡(
c⁄
 !
NULL
)

2374 
	`BIO_¥ötf
(
bio_s_out
,"shutting down SSL\n");

2376 
	`SSL_£t_shutdown
(
c⁄
,
SSL_SENT_SHUTDOWN
|
SSL_RECEIVED_SHUTDOWN
);

2378 
	`SSL_shutdown
(
c⁄
);

2380 
	`SSL_‰ì
(
c⁄
);

2382 
	`BIO_¥ötf
(
bio_s_out
,"CONNECTION CLOSED\n");

2383 i‡(
buf
 !
NULL
)

2385 
	`OPENSSL_˛ón£
(
buf
,
bufsize
);

2386 
	`OPENSSL_‰ì
(
buf
);

2388 i‡(
ªt
 >= 0)

2389 
	`BIO_¥ötf
(
bio_s_out
,"ACCEPT\n");

2390 (
ªt
);

2391 
	}
}

2393 
	$˛o£_ac˚±_sockë
()

2395 
	`BIO_¥ötf
(
bio_îr
,"shutdownáccept socket\n");

2396 i‡(
ac˚±_sockë
 >= 0)

2398 
	`SHUTDOWN2
(
ac˚±_sockë
);

2400 
	}
}

2402 
	$öô_s¶_c⁄√˘i⁄
(
SSL
 *
c⁄
)

2404 
i
;

2405 c⁄° *
°r
;

2406 
X509
 *
≥î
;

2407 
vîify_îr‹
;

2408 
MS_STATIC
 
buf
[
BUFSIZ
];

2409 #i‚de‡
OPENSSL_NO_KRB5


2410 *
˛õ¡_¥öc
;

2412 #i‡!
	`deföed
(
OPENSSL_NO_TLSEXT
Ë&& !deföed(
OPENSSL_NO_NEXTPROTONEG
)

2413 c⁄° *
√xt_¥Ÿo_√g
;

2414 
√xt_¥Ÿo_√g_Àn
;

2416 *
exp‹ãdkeym©
;

2419 
i
=
	`SSL_ac˚±
(
c⁄
);

2420 #i‚de‡
OPENSSL_NO_SRP


2421 
i
 <0 && 
	`SSL_gë_îr‹
(
c⁄
,iË=
SSL_ERROR_WANT_X509_LOOKUP
)

2423 
	`BIO_¥ötf
(
bio_s_out
,"LOOKUP durögác˚± %s\n",
§p_ˇŒback_∑rm
.
logö
);

2424 
§p_ˇŒback_∑rm
.
u£r
 = 
	`SRP_VBASE_gë_by_u£r
(§p_ˇŒback_∑rm.
vb
, sΩ_ˇŒback_∑rm.
logö
);

2425 i‡(
§p_ˇŒback_∑rm
.
u£r
)

2426 
	`BIO_¥ötf
(
bio_s_out
,"LOOKUP d⁄ê%s\n",
§p_ˇŒback_∑rm
.
u£r
->
öfo
);

2428 
	`BIO_¥ötf
(
bio_s_out
,"LOOKUPÇot successful\n");

2429 
i
=
	`SSL_ac˚±
(
c⁄
);

2432 i‡(
i
 <= 0)

2434 i‡(
	`BIO_sock_should_ªåy
(
i
))

2436 
	`BIO_¥ötf
(
bio_s_out
,"DELAY\n");

2440 
	`BIO_¥ötf
(
bio_îr
,"ERROR\n");

2441 
vîify_îr‹
=
	`SSL_gë_vîify_ªsu…
(
c⁄
);

2442 i‡(
vîify_îr‹
 !
X509_V_OK
)

2444 
	`BIO_¥ötf
(
bio_îr
,"verifyÉrror:%s\n",

2445 
	`X509_vîify_˚π_îr‹_°rög
(
vîify_îr‹
));

2448 
	`ERR_¥öt_îr‹s
(
bio_îr
);

2452 
	`PEM_wrôe_bio_SSL_SESSION
(
bio_s_out
,
	`SSL_gë_£ssi⁄
(
c⁄
));

2454 
≥î
=
	`SSL_gë_≥î_˚πifiˇã
(
c⁄
);

2455 i‡(
≥î
 !
NULL
)

2457 
	`BIO_¥ötf
(
bio_s_out
,"Client certificate\n");

2458 
	`PEM_wrôe_bio_X509
(
bio_s_out
,
≥î
);

2459 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
≥î
),
buf
, buf);

2460 
	`BIO_¥ötf
(
bio_s_out
,"subje˘=%s\n",
buf
);

2461 
	`X509_NAME_⁄ñöe
(
	`X509_gë_issuî_«me
(
≥î
),
buf
, buf);

2462 
	`BIO_¥ötf
(
bio_s_out
,"issuî=%s\n",
buf
);

2463 
	`X509_‰ì
(
≥î
);

2466 i‡(
	`SSL_gë_sh¨ed_cùhîs
(
c⁄
,
buf
, bufË!
NULL
)

2467 
	`BIO_¥ötf
(
bio_s_out
,"Sh¨ed cùhîs:%s\n",
buf
);

2468 
°r
=
	`SSL_CIPHER_gë_«me
(
	`SSL_gë_cuºít_cùhî
(
c⁄
));

2469 
	`BIO_¥ötf
(
bio_s_out
,"CIPHER i†%s\n",(
°r
 !
NULL
)?str:"(NONE)");

2471 #i‡!
	`deföed
(
OPENSSL_NO_TLSEXT
Ë&& !deföed(
OPENSSL_NO_NEXTPROTONEG
)

2472 
	`SSL_gë0_√xt_¥Ÿo_√gŸüãd
(
c⁄
, &
√xt_¥Ÿo_√g
, &
√xt_¥Ÿo_√g_Àn
);

2473 i‡(
√xt_¥Ÿo_√g
)

2475 
	`BIO_¥ötf
(
bio_s_out
,"NEXTPROTO is ");

2476 
	`BIO_wrôe
(
bio_s_out
, 
√xt_¥Ÿo_√g
, 
√xt_¥Ÿo_√g_Àn
);

2477 
	`BIO_¥ötf
(
bio_s_out
, "\n");

2480 #i‚de‡
OPENSSL_NO_SRTP


2482 
SRTP_PROTECTION_PROFILE
 *
§ç_¥ofûe


2483 
	`SSL_gë_£À˘ed_§ç_¥ofûe
(
c⁄
);

2485 if(
§ç_¥ofûe
)

2486 
	`BIO_¥ötf
(
bio_s_out
,"SRTP ExtensionÇegotiated,Örofile=%s\n",

2487 
§ç_¥ofûe
->
«me
);

2490 i‡(
	`SSL_ˇche_hô
(
c⁄
)Ë
	`BIO_¥ötf
(
bio_s_out
,"Reused session-id\n");

2491 i‡(
	`SSL_˘æ
(
c⁄
,
SSL_CTRL_GET_FLAGS
,0,
NULL
) &

2492 
TLS1_FLAGS_TLS_PADDING_BUG
)

2493 
	`BIO_¥ötf
(
bio_s_out
,

2495 #i‚de‡
OPENSSL_NO_KRB5


2496 
˛õ¡_¥öc
 = 
	`ks¶_˘x_gë0_˛õ¡_¥öc
(
	`SSL_gë0_ks¶_˘x
(
c⁄
));

2497 i‡(
˛õ¡_¥öc
 !
NULL
)

2499 
	`BIO_¥ötf
(
bio_s_out
,"KerberosÖeerÖrincipal is %s\n",

2500 
˛õ¡_¥öc
);

2503 
	`BIO_¥ötf
(
bio_s_out
, "Secure Renegotiation IS%s supported\n",

2504 
	`SSL_gë_£cuª_ª√gŸüti⁄_suµ‹t
(
c⁄
) ? "" : " NOT");

2505 i‡(
keym©exp‹éabñ
 !
NULL
)

2507 
	`BIO_¥ötf
(
bio_s_out
, "Keying materialÉxporter:\n");

2508 
	`BIO_¥ötf
(
bio_s_out
, " Labñ: '%s'\n", 
keym©exp‹éabñ
);

2509 
	`BIO_¥ötf
(
bio_s_out
, " Length: %i bytes\n",

2510 
keym©exp‹éí
);

2511 
exp‹ãdkeym©
 = 
	`OPENSSL_mÆloc
(
keym©exp‹éí
);

2512 i‡(
exp‹ãdkeym©
 !
NULL
)

2514 i‡(!
	`SSL_exp‹t_keyög_m©îül
(
c⁄
, 
exp‹ãdkeym©
,

2515 
keym©exp‹éí
,

2516 
keym©exp‹éabñ
,

2517 
	`°æí
(
keym©exp‹éabñ
),

2518 
NULL
, 0, 0))

2520 
	`BIO_¥ötf
(
bio_s_out
, " Error\n");

2524 
	`BIO_¥ötf
(
bio_s_out
, " Keying material: ");

2525 
i
=0; i<
keym©exp‹éí
; i++)

2526 
	`BIO_¥ötf
(
bio_s_out
, "%02X",

2527 
exp‹ãdkeym©
[
i
]);

2528 
	`BIO_¥ötf
(
bio_s_out
, "\n");

2530 
	`OPENSSL_‰ì
(
exp‹ãdkeym©
);

2535 
	}
}

2537 #i‚de‡
OPENSSL_NO_DH


2538 
DH
 *
	$lﬂd_dh_∑øm
(c⁄° *
dhfûe
)

2540 
DH
 *
ªt
=
NULL
;

2541 
BIO
 *
bio
;

2543 i‡((
bio
=
	`BIO_√w_fûe
(
dhfûe
,"r")Ë=
NULL
)

2544 
îr
;

2545 
ªt
=
	`PEM_ªad_bio_DH∑øms
(
bio
,
NULL
,NULL,NULL);

2546 
îr
:

2547 i‡(
bio
 !
NULL
Ë
	`BIO_‰ì
(bio);

2548 (
ªt
);

2549 
	}
}

2551 #i‚de‡
OPENSSL_NO_KRB5


2552 *
	g˛õ¡_¥öc
;

2556 
	$lﬂd_CA
(
SSL_CTX
 *
˘x
, *
fûe
)

2558 
FILE
 *
ö
;

2559 
X509
 *
x
=
NULL
;

2561 i‡((
ö
=
	`f›í
(
fûe
,"r")Ë=
NULL
)

2566 i‡(
	`PEM_ªad_X509
(
ö
,&
x
,
NULL
) == NULL)

2568 
	`SSL_CTX_add_˛õ¡_CA
(
˘x
,
x
);

2570 i‡(
x
 !
NULL
Ë
	`X509_‰ì
(x);

2571 
	`f˛o£
(
ö
);

2573 
	}
}

2576 
	$www_body
(*
ho°«me
, 
s
, *
c⁄ãxt
)

2578 *
buf
=
NULL
;

2579 
ªt
=1;

2580 
i
,
j
,
k
,
dŸ
;

2581 
SSL
 *
c⁄
;

2582 c⁄° 
SSL_CIPHER
 *
c
;

2583 
BIO
 *
io
,*
s¶_bio
,*
sbio
;

2584 #i‚de‡
OPENSSL_NO_KRB5


2585 
KSSL_CTX
 *
k˘x
;

2588 #ifdef 
ASHOKE_TOOL


2589 
cidx
 = 0;

2590 *
˛i°
[] = {"DHE-RSA-AES256-SHA","DHE-RSA-AES128-SHA","AES256-SHA","ADH-AES128-SHA","RC4-MD5","DES-CBC-SHA","ADH-DES-CBC-SHA",
NULL
};

2593 
buf
=
	`OPENSSL_mÆloc
(
bufsize
);

2594 i‡(
buf
 =
NULL
) (0);

2595 
io
=
	`BIO_√w
(
	`BIO_f_buf„r
());

2596 
s¶_bio
=
	`BIO_√w
(
	`BIO_f_s¶
());

2597 i‡((
io
 =
NULL
Ë|| (
s¶_bio
 =NULL)Ë
îr
;

2599 #ifde‡
FIONBIO


2600 i‡(
s_nbio
)

2602 
¶
=1;

2604 i‡(!
s_quõt
)

2605 
	`BIO_¥ötf
(
bio_îr
,"turning onÇon blocking io\n");

2606 i‡(
	`BIO_sockë_io˘l
(
s
,
FIONBIO
,&
¶
) < 0)

2607 
	`ERR_¥öt_îr‹s
(
bio_îr
);

2612 i‡(!
	`BIO_£t_wrôe_buf„r_size
(
io
,
bufsize
)Ë
îr
;

2614 i‡((
c⁄
=
	`SSL_√w
(
˘x
)Ë=
NULL
Ë
îr
;

2616 #ifde‡ 
ASHOKE_TOOL


2617 if(
rŸ©eCùhî
)

2619 if(
˛i°
[
cidx
] =
NULL
) cidx = 0;

2620 
	`¥ötf
("cho£¿cùhî:%s\n",
˛i°
[
cidx
]);

2621 
	`SSL_£t_cùhî_li°
(
c⁄
,
˛i°
[
cidx
]);

2626 #i‚de‡
OPENSSL_NO_TLSEXT


2627 i‡(
s_é£xtdebug
)

2629 
	`SSL_£t_é£xt_debug_ˇŒback
(
c⁄
, 
é£xt_cb
);

2630 
	`SSL_£t_é£xt_debug_¨g
(
c⁄
, 
bio_s_out
);

2633 #i‚de‡
OPENSSL_NO_KRB5


2634 i‡((
k˘x
 = 
	`ks¶_˘x_√w
()Ë!
NULL
)

2636 
	`ks¶_˘x_£t°rög
(
k˘x
, 
KSSL_SERVICE
, 
KRB5SVC
);

2637 
	`ks¶_˘x_£t°rög
(
k˘x
, 
KSSL_KEYTAB
, 
KRB5KEYTAB
);

2640 if(
c⁄ãxt
Ë
	`SSL_£t_£ssi⁄_id_c⁄ãxt
(
c⁄
, c⁄ãxt, 
	`°æí
((*)context));

2642 
sbio
=
	`BIO_√w_sockë
(
s
,
BIO_NOCLOSE
);

2643 i‡(
s_nbio_ã°
)

2645 
BIO
 *
ã°
;

2647 
ã°
=
	`BIO_√w
(
	`BIO_f_nbio_ã°
());

2648 
sbio
=
	`BIO_push
(
ã°
,sbio);

2650 
	`SSL_£t_bio
(
c⁄
,
sbio
,sbio);

2651 
	`SSL_£t_ac˚±_°©e
(
c⁄
);

2654 
	`BIO_£t_s¶
(
s¶_bio
,
c⁄
,
BIO_CLOSE
);

2655 
	`BIO_push
(
io
,
s¶_bio
);

2657 #ifde‡
CHARSET_EBCDIC


2658 
io
 = 
	`BIO_push
(
	`BIO_√w
(
	`BIO_f_ebcdic_fûãr
()),io);

2661 i‡(
s_debug
)

2663 
	`SSL_£t_debug
(
c⁄
, 1);

2664 
	`BIO_£t_ˇŒback
(
	`SSL_gë_rbio
(
c⁄
),
bio_dump_ˇŒback
);

2665 
	`BIO_£t_ˇŒback_¨g
(
	`SSL_gë_rbio
(
c⁄
),(*)
bio_s_out
);

2667 i‡(
s_msg
)

2669 
	`SSL_£t_msg_ˇŒback
(
c⁄
, 
msg_cb
);

2670 
	`SSL_£t_msg_ˇŒback_¨g
(
c⁄
, 
bio_s_out
);

2673 
	`¥ötf
("www-body-0 bef‹êf‹Üo› %Œu\n",
	`time
(
NULL
));

2676 i‡(
hack
)

2678 
i
=
	`SSL_ac˚±
(
c⁄
);

2679 #i‚de‡
OPENSSL_NO_SRP


2680 
i
 <0 && 
	`SSL_gë_îr‹
(
c⁄
,iË=
SSL_ERROR_WANT_X509_LOOKUP
)

2682 
	`BIO_¥ötf
(
bio_s_out
,"LOOKUP durögác˚± %s\n",
§p_ˇŒback_∑rm
.
logö
);

2683 
§p_ˇŒback_∑rm
.
u£r
 = 
	`SRP_VBASE_gë_by_u£r
(§p_ˇŒback_∑rm.
vb
, sΩ_ˇŒback_∑rm.
logö
);

2684 i‡(
§p_ˇŒback_∑rm
.
u£r
)

2685 
	`BIO_¥ötf
(
bio_s_out
,"LOOKUP d⁄ê%s\n",
§p_ˇŒback_∑rm
.
u£r
->
öfo
);

2687 
	`BIO_¥ötf
(
bio_s_out
,"LOOKUPÇot successful\n");

2688 
i
=
	`SSL_ac˚±
(
c⁄
);

2691 
	`SSL_gë_îr‹
(
c⁄
,
i
))

2693 
SSL_ERROR_NONE
:

2695 
SSL_ERROR_WANT_WRITE
:

2696 
SSL_ERROR_WANT_READ
:

2697 
SSL_ERROR_WANT_X509_LOOKUP
:

2699 
SSL_ERROR_SYSCALL
:

2700 
SSL_ERROR_SSL
:

2701 
SSL_ERROR_ZERO_RETURN
:

2702 
ªt
=1;

2703 
îr
;

2707 
	`SSL_ª√gŸüã
(
c⁄
);

2708 
	`SSL_wrôe
(
c⁄
,
NULL
,0);

2711 
	`¥ötf
("www-body-1 bef‹ê%Œu\n",
	`time
(
NULL
));

2712 
i
=
	`SSL_ac˚±
(
c⁄
);

2713 if(
i
<=0)

2714 
îr
;

2715 
i
=
	`BIO_gës
(
io
,
buf
,
bufsize
-1);

2716 
	`¥ötf
("www-body-1á·î %Œu\n",
	`time
(
NULL
));

2717 i‡(
i
 < 0)

2719 
	`¥ötf
("%s:%d Faûuª\n",
__FUNCTION__
,
__LINE__
);

2720 
	`¥ötf
("www-body-0á·î f‹Üo› %Œu\n",
	`time
(
NULL
));

2721 i‡(!
	`BIO_should_ªåy
(
io
))

2723 
	`ERR_¥öt_îr‹s
(
bio_îr
);

2724 
îr
;

2728 
	`BIO_¥ötf
(
bio_s_out
,"read R BLOCK\n");

2729 
	`¶ìp
(1);

2733 i‡(
i
 == 0)

2735 
	`¥ötf
("%s:%d Faûuª\n",
__FUNCTION__
,
__LINE__
);

2736 
	`¥ötf
("www-body-0á·î f‹Üo› %Œu\n",
	`time
(
NULL
));

2737 
ªt
=1;

2738 
íd
;

2742 i‡(((
www
 =1Ë&& (
	`°∫cmp
("GET ",
buf
,4) == 0)) ||

2743 ((
www
 =2Ë&& (
	`°∫cmp
("GET /°©†",
buf
,10) == 0)))

2745 #ifde‡
ASHOKE_TOOL


2746 
cidx
++;

2748 *
p
;

2749 
X509
 *
≥î
;

2750 
	`STACK_OF
(
SSL_CIPHER
Ë*
sk
;

2751 c⁄° *
•a˚
=" ";

2753 
	`BIO_puts
(
io
,"HTTP/1.0 200 ok\r\nContent-type:Åext/html\r\n\r\n");

2754 
	`BIO_puts
(
io
,"<HTML><BODY BGCOLOR=\"#ffffff\">\n");

2755 
	`BIO_puts
(
io
,"<pre>\n");

2756 
	`BIO_puts
(
io
,"\n");

2758 
i
=0; i<
loˇl_¨gc
; i++)

2760 
	`BIO_puts
(
io
,
loˇl_¨gv
[
i
]);

2761 
	`BIO_wrôe
(
io
," ",1);

2763 
	`BIO_puts
(
io
,"\n");

2765 
	`BIO_¥ötf
(
io
,

2767 
	`SSL_gë_£cuª_ª√gŸüti⁄_suµ‹t
(
c⁄
) ?

2770 
	`BIO_¥ötf
(
io
,"Ciphers supported in s_server binary\n");

2771 
sk
=
	`SSL_gë_cùhîs
(
c⁄
);

2772 
j
=
	`sk_SSL_CIPHER_num
(
sk
);

2773 
i
=0; i<
j
; i++)

2775 
c
=
	`sk_SSL_CIPHER_vÆue
(
sk
,
i
);

2776 
	`BIO_¥ötf
(
io
,"%-11s:%-25s", 
	`SSL_CIPHER_gë_vîsi⁄
(
c
),

2777 
	`SSL_CIPHER_gë_«me
(
c
));

2778 i‡((((
i
+1)%2Ë=0Ë&& (i+1 !
j
))

2779 
	`BIO_puts
(
io
,"\n");

2781 
	`BIO_puts
(
io
,"\n");

2783 
p
=
	`SSL_gë_sh¨ed_cùhîs
(
c⁄
,
buf
,
bufsize
);

2784 i‡(
p
 !
NULL
)

2786 
	`BIO_¥ötf
(
io
,"---\nCiphers common between both SSLÉndÖoints:\n");

2787 
j
=
i
=0;

2788 *
p
)

2790 i‡(*
p
 == ':')

2792 
	`BIO_wrôe
(
io
,
•a˚
,26-
j
);

2793 
i
++;

2794 
j
=0;

2795 
	`BIO_wrôe
(
io
,((
i
%3)?" ":"\n"),1);

2799 
	`BIO_wrôe
(
io
,
p
,1);

2800 
j
++;

2802 
p
++;

2804 
	`BIO_puts
(
io
,"\n");

2807 
	`BIO_¥ötf
(
io
,(
	`SSL_ˇche_hô
(
c⁄
) ?"---\nReused, " :"---\nNew, "));

2809 
c
=
	`SSL_gë_cuºít_cùhî
(
c⁄
);

2810 
	`BIO_¥ötf
(
io
,"%s, Cipher is %s\n",

2811 
	`SSL_CIPHER_gë_vîsi⁄
(
c
),

2812 
	`SSL_CIPHER_gë_«me
(
c
));

2814 
	`SSL_SESSION_¥öt
(
io
,
	`SSL_gë_£ssi⁄
(
c⁄
));

2815 
	`BIO_¥ötf
(
io
,"---\n");

2816 
	`¥öt_°©s
(
io
,
	`SSL_gë_SSL_CTX
(
c⁄
));

2817 
	`BIO_¥ötf
(
io
,"---\n");

2819 
≥î
=
	`SSL_gë_≥î_˚πifiˇã
(
c⁄
);

2820 i‡(
≥î
 !
NULL
)

2822 
	`BIO_¥ötf
(
io
,"Client certificate\n");

2823 
	`X509_¥öt
(
io
,
≥î
);

2824 
	`PEM_wrôe_bio_X509
(
io
,
≥î
);

2827 
	`BIO_puts
(
io
,"no client certificateávailable\n");

2828 
	`BIO_puts
(
io
,"</BODY></HTML>\r\n\r\n");

2829 
	`BIO_puts
(
io
,"I AM DONE\n");

2832 i‡((
www
 =2 || www =3Ë&& (
	`°∫cmp
("GET /",
buf
,5) == 0))

2834 
BIO
 *
fûe
;

2835 *
p
,*
e
;

2836 c⁄° *
ãxt
="HTTP/1.0 200 ok\r\nContent-type:Åext/plain\r\n\r\n";

2838 #ifde‡
ASHOKE_TOOL


2839 
cidx
++;

2843 
p
&(
buf
[5]);

2845 
dŸ
 = 1;

2846 
e
=
p
; *e != '\0';É++)

2848 i‡(
e
[0] == ' ')

2851 
dŸ
)

2854 
dŸ
 = (
e
[0] == '.') ? 2 : 0;

2857 
dŸ
 = (
e
[0] == '.') ? 3 : 0;

2860 
dŸ
 = (
e
[0] == '/') ? -1 : 0;

2863 i‡(
dŸ
 == 0)

2864 
dŸ
 = (
e
[0] == '/') ? 1 : 0;

2866 
dŸ
 = (dot == 3) || (dot == -1);

2868 i‡(*
e
 == '\0')

2870 
	`¥ötf
("%s:%d Faûuª\n",
__FUNCTION__
,
__LINE__
);

2871 
	`BIO_puts
(
io
,
ãxt
);

2872 
	`BIO_¥ötf
(
io
,"'%s' i†™ invÆid fûê«me\r\n",
p
);

2875 *
e
='\0';

2877 i‡(
dŸ
)

2879 
	`¥ötf
("%s:%d Faûuª\n",
__FUNCTION__
,
__LINE__
);

2880 
	`BIO_puts
(
io
,
ãxt
);

2881 
	`BIO_¥ötf
(
io
,"'%s' c⁄èö†'..'Ñe„ªn˚\r\n",
p
);

2885 i‡(*
p
 == '/')

2887 
	`¥ötf
("%s:%d Faûuª\n",
__FUNCTION__
,
__LINE__
);

2888 
	`BIO_puts
(
io
,
ãxt
);

2889 
	`BIO_¥ötf
(
io
,"'%s' i†™ invÆidÖ©h\r\n",
p
);

2895 i‡(
e
[-1] == '/')

2896 
	`°rˇt
(
p
,"index.html");

2900 i‡(
	`≠p_isdú
(
p
)>0)

2903 
	`°rˇt
(
p
,"/index.html");

2905 
	`BIO_puts
(
io
,
ãxt
);

2906 
	`BIO_¥ötf
(
io
,"'%s' i†®dúe˘‹y\r\n",
p
);

2911 i‡((
fûe
=
	`BIO_√w_fûe
(
p
,"r")Ë=
NULL
)

2913 
	`¥ötf
("%s:%d Faûuª\n",
__FUNCTION__
,
__LINE__
);

2914 
	`BIO_puts
(
io
,
ãxt
);

2915 
	`BIO_¥ötf
(
io
,"Eº‹ o≥nög '%s'\r\n",
p
);

2916 
	`ERR_¥öt_îr‹s
(
io
);

2920 i‡(!
s_quõt
)

2921 
	`BIO_¥ötf
(
bio_îr
,"FILE:%s\n",
p
);

2923 i‡(
www
 == 2)

2925 
i
=
	`°æí
(
p
);

2926 i‡–((
i
 > 5Ë&& (
	`°rcmp
(&(
p
[i-5]),".html") == 0)) ||

2927 ((
i
 > 4Ë&& (
	`°rcmp
(&(
p
[i-4]),".php") == 0)) ||

2928 ((
i
 > 4Ë&& (
	`°rcmp
(&(
p
[i-4]),".htm") == 0)))

2929 
	`BIO_puts
(
io
,"HTTP/1.0 200 ok\r\nContent-type:Åext/html\r\n\r\n");

2931 
	`BIO_puts
(
io
,"HTTP/1.0 200 ok\r\nContent-type:Åext/plain\r\n\r\n");

2936 
i
=
	`BIO_ªad
(
fûe
,
buf
,
bufsize
);

2937 i‡(
i
 <= 0) ;

2939 #ifde‡
RENEG


2940 
tŸÆ_byãs
+=
i
;

2941 
	`Ârötf
(
°dîr
,"%d\n",
i
);

2942 i‡(
tŸÆ_byãs
 > 3*1024)

2944 
tŸÆ_byãs
=0;

2945 
	`Ârötf
(
°dîr
,"RENEGOTIATE\n");

2946 
	`SSL_ª√gŸüã
(
c⁄
);

2950 
j
=0; j<
i
; )

2952 #ifde‡
RENEG


2953 { 
cou¡
=0; i‡(++cou¡ =13Ë{ 
	`SSL_ª√gŸüã
(
c⁄
); } }

2955 
k
=
	`BIO_wrôe
(
io
,&(
buf
[
j
]),
i
-j);

2956 i‡(
k
 <= 0)

2958 
	`¥ötf
("%s:%d Faûuª\n",
__FUNCTION__
,
__LINE__
);

2959 i‡(!
	`BIO_should_ªåy
(
io
))

2960 
wrôe_îr‹
;

2963 
	`BIO_¥ötf
(
bio_s_out
,"rwrite W BLOCK\n");

2968 
j
+=
k
;

2972 
wrôe_îr‹
:

2973 
	`¥ötf
("%s:%d Faûuª\n",
__FUNCTION__
,
__LINE__
);

2974 
	`BIO_‰ì
(
fûe
);

2978 
	`¥ötf
("www-body-0á·î f‹Üo› %Œu\n",
	`time
(
NULL
));

2982 
i
=()
	`BIO_Êush
(
io
);

2983 i‡(
i
 <= 0)

2985 i‡(!
	`BIO_should_ªåy
(
io
))

2991 
íd
:

2993 
	`SSL_£t_shutdown
(
c⁄
,
SSL_SENT_SHUTDOWN
|
SSL_RECEIVED_SHUTDOWN
);

2999 
îr
:

3001 i‡(
ªt
 >= 0)

3002 
	`BIO_¥ötf
(
bio_s_out
,"ACCEPT\n");

3004 i‡(
buf
 !
NULL
Ë
	`OPENSSL_‰ì
(buf);

3005 i‡(
io
 !
NULL
Ë
	`BIO_‰ì_Æl
(io);

3006 (
ªt
);

3007 
	}
}

3009 #i‚de‡
OPENSSL_NO_RSA


3010 
RSA
 
MS_CALLBACK
 *
	$tmp_rß_cb
(
SSL
 *
s
, 
is_exp‹t
, 
keyÀngth
)

3012 
BIGNUM
 *
bn
 = 
NULL
;

3013 
RSA
 *
rß_tmp
=
NULL
;

3015 i‡(!
rß_tmp
 && ((
bn
 = 
	`BN_√w
()Ë=
NULL
))

3016 
	`BIO_¥ötf
(
bio_îr
,"AllocationÉrror in generating RSA key\n");

3017 i‡(!
rß_tmp
 && 
bn
)

3019 i‡(!
s_quõt
)

3021 
	`BIO_¥ötf
(
bio_îr
,"Gíî©ögÅem∞(%d bôËRSA key...",
keyÀngth
);

3022 ()
	`BIO_Êush
(
bio_îr
);

3024 if(!
	`BN_£t_w‹d
(
bn
, 
RSA_F4
Ë|| ((
rß_tmp
 = 
	`RSA_√w
()Ë=
NULL
) ||

3025 !
	`RSA_gíî©e_key_ex
(
rß_tmp
, 
keyÀngth
, 
bn
, 
NULL
))

3027 if(
rß_tmp
Ë
	`RSA_‰ì
(rsa_tmp);

3028 
rß_tmp
 = 
NULL
;

3030 i‡(!
s_quõt
)

3032 
	`BIO_¥ötf
(
bio_îr
,"\n");

3033 ()
	`BIO_Êush
(
bio_îr
);

3035 
	`BN_‰ì
(
bn
);

3037 (
rß_tmp
);

3038 
	}
}

3041 
	#MAX_SESSION_ID_ATTEMPTS
 10

	)

3042 
	$gíî©e_£ssi⁄_id
(c⁄° 
SSL
 *
s¶
, *
id
,

3043 *
id_Àn
)

3045 
cou¡
 = 0;

3047 
	`RAND_p£udo_byãs
(
id
, *
id_Àn
);

3053 
	`mem˝y
(
id
, 
£ssi⁄_id_¥efix
,

3054 (
	`°æí
(
£ssi⁄_id_¥efix
Ë< *
id_Àn
) ?

3055 
	`°æí
(
£ssi⁄_id_¥efix
Ë: *
id_Àn
);

3057 
	`SSL_has_m©chög_£ssi⁄_id
(
s¶
, 
id
, *
id_Àn
) &&

3058 (++
cou¡
 < 
MAX_SESSION_ID_ATTEMPTS
));

3059 if(
cou¡
 >
MAX_SESSION_ID_ATTEMPTS
)

3062 
	}
}

	@s_socket.c

59 
	~<°dio.h
>

60 
	~<°dlib.h
>

61 
	~<°rög.h
>

62 
	~<î∫o.h
>

63 
	~<sig«l.h
>

65 #ifde‡
FLAT_INC


66 
	~"e_os2.h
"

68 
	~"../e_os2.h
"

75 #i‡
deföed
(
OPENSSL_SYS_VMS_DECC
Ë&& !deföed(
__U_INT
)

76 
	#__U_INT


	)

77 
	tu_öt
;

80 
	#USE_SOCKETS


	)

81 
	#NON_MAIN


	)

82 
	~"≠ps.h
"

83 #unde‡
USE_SOCKETS


84 #unde‡
NON_MAIN


85 
	~"s_≠ps.h
"

86 
	~<›ís¶/s¶.h
>

88 #ifde‡
FLAT_INC


89 
	~"e_os.h
"

91 
	~"../e_os.h
"

94 #i‚de‡
OPENSSL_NO_SOCK


96 #i‡
deföed
(
OPENSSL_SYS_NETWARE
Ë&& deföed(
NETWARE_BSDSOCK
)

97 
	~"√tdb.h
"

100 
ho°ít
 *
GëHo°ByName
(*
«me
);

101 #i‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë|| (deföed(
OPENSSL_SYS_NETWARE
Ë&& !deföed(
NETWARE_BSDSOCK
))

102 
s¶_sock_˛ónup
();

104 
s¶_sock_öô
();

105 
öô_˛õ¡_ù
(*
sock
,
ù
[4], 
p‹t
, 
ty≥
);

106 
öô_£rvî
(*
sock
, 
p‹t
, 
ty≥
);

107 
öô_£rvî_l⁄g
(*
sock
, 
p‹t
,*
ù
, 
ty≥
);

108 
do_ac˚±
(
acc_sock
, *
sock
, **
ho°
);

109 
ho°_ù
(*
°r
, 
ù
[4]);

111 #ifde‡
OPENSSL_SYS_WIN16


112 
	#SOCKET_PROTOCOL
 0

	)

114 
	#SOCKET_PROTOCOL
 
IPPROTO_TCP


	)

117 #i‡
deföed
(
OPENSSL_SYS_NETWARE
Ë&& !deföed(
NETWARE_BSDSOCK
)

118 
	gwß_öô_d⁄e
=0;

121 #ifde‡
OPENSSL_SYS_WINDOWS


122 
WSAD©a
 
	gwß_°©e
;

123 
	gwß_öô_d⁄e
=0;

125 #ifde‡
OPENSSL_SYS_WIN16


126 
HWND
 
	gt›Wnd
=0;

127 
FARPROC
 
	gÕT›WndProc
=
NULL
;

128 
FARPROC
 
	gÕT›HookProc
=
NULL
;

129 
HINSTANCE
 
_hIn°™˚
;

131 
LONG
 
FAR
 
PASCAL
 
	$t›HookProc
(
HWND
 
hwnd
, 
UINT
 
mesßge
, 
WPARAM
 
wP¨am
,

132 
LPARAM
 
lP¨am
)

134 i‡(
hwnd
 =
t›Wnd
)

136 
mesßge
)

138 
WM_DESTROY
:

139 
WM_CLOSE
:

140 
	`SëWödowL⁄g
(
t›Wnd
,
GWL_WNDPROC
,(
LONG
)
ÕT›WndProc
);

141 
	`s¶_sock_˛ónup
();

145  
	`CÆlWödowProc
(
ÕT›WndProc
,
hwnd
,
mesßge
,
wP¨am
,
lP¨am
);

146 
	}
}

148 
BOOL
 
CALLBACK
 
	$íum¥oc
(
HWND
 
hwnd
,
LPARAM
 
lP¨am
)

150 
t›Wnd
=
hwnd
;

151 (
FALSE
);

152 
	}
}

157 #ifde‡
OPENSSL_SYS_WINDOWS


158 
	$s¶_sock_˛ónup
()

160 i‡(
wß_öô_d⁄e
)

162 
wß_öô_d⁄e
=0;

163 #i‚de‡
OPENSSL_SYS_WINCE


164 
	`WSAC™˚lBlockögCÆl
();

166 
	`WSACÀ™up
();

168 
	}
}

169 #ñi‡
deföed
(
OPENSSL_SYS_NETWARE
Ë&& !deföed(
NETWARE_BSDSOCK
)

170 
	$sock_˛ónup
()

172 i‡(
wß_öô_d⁄e
)

174 
wß_öô_d⁄e
=0;

175 
	`WSACÀ™up
();

177 
	}
}

180 
	$s¶_sock_öô
()

182 #ifde‡
WATT32


183 
_w©t_do_exô
;

184 
_w©t_do_exô
 = 0;

185 i‡(
	`sock_öô
())

187 #ñi‡
	`deföed
(
OPENSSL_SYS_WINDOWS
)

188 i‡(!
wß_öô_d⁄e
)

190 
îr
;

192 #ifde‡
SIGINT


193 
	`sig«l
(
SIGINT
,((*)())
s¶_sock_˛ónup
);

195 
wß_öô_d⁄e
=1;

196 
	`mem£t
(&
wß_°©e
,0,(wsa_state));

197 i‡(
	`WSASèπup
(0x0101,&
wß_°©e
)!=0)

199 
îr
=
	`WSAGëLa°Eº‹
();

200 
	`BIO_¥ötf
(
bio_îr
,"u«bÀÅÿ°¨àWINSOCK,Éº‹ code=%d\n",
îr
);

204 #ifde‡
OPENSSL_SYS_WIN16


205 
	`EnumTaskWödows
(
	`GëCuºítTask
(),
íum¥oc
,0L);

206 
ÕT›WndProc
=(
FARPROC
)
	`GëWödowL⁄g
(
t›Wnd
,
GWL_WNDPROC
);

207 
ÕT›HookProc
=
	`MakeProcIn°™˚
((
FARPROC
)
t›HookProc
,
_hIn°™˚
);

209 
	`SëWödowL⁄g
(
t›Wnd
,
GWL_WNDPROC
,(
LONG
)
ÕT›HookProc
);

212 #ñi‡
	`deföed
(
OPENSSL_SYS_NETWARE
Ë&& !deföed(
NETWARE_BSDSOCK
)

213 
WORD
 
wVîReq
;

214 
WSADATA
 
wßD©a
;

215 
îr
;

217 i‡(!
wß_öô_d⁄e
)

220 #ifde‡
SIGINT


221 
	`sig«l
(
SIGINT
,((*)())
sock_˛ónup
);

224 
wß_öô_d⁄e
=1;

225 
wVîReq
 = 
	`MAKEWORD
( 2, 0 );

226 
îr
 = 
	`WSASèπup
(
wVîReq
,&
wßD©a
);

227 i‡(
îr
 != 0)

229 
	`BIO_¥ötf
(
bio_îr
,"u«bÀÅÿ°¨àWINSOCK2,Éº‹ code=%d\n",
îr
);

235 
	}
}

237 
	$öô_˛õ¡
(*
sock
, *
ho°
, 
p‹t
, 
ty≥
)

239 
ù
[4];

241 
	`mem£t
(
ù
, '\0',  ip);

242 i‡(!
	`ho°_ù
(
ho°
,&(
ù
[0])))

244  
	`öô_˛õ¡_ù
(
sock
,
ù
,
p‹t
,
ty≥
);

245 
	}
}

247 
	$öô_˛õ¡_ù
(*
sock
, 
ù
[4], 
p‹t
, 
ty≥
)

249 
addr
;

250 
sockaddr_ö
 
them
;

251 
s
,
i
;

253 i‡(!
	`s¶_sock_öô
()) (0);

255 
	`mem£t
((*)&
them
,0,(them));

256 
them
.
sö_Ámûy
=
AF_INET
;

257 
them
.
sö_p‹t
=
	`ht⁄s
(()
p‹t
);

258 
addr
=()

259 (()
ù
[0]<<24L)|

260 (()
ù
[1]<<16L)|

261 (()
ù
[2]<< 8L)|

262 (()
ù
[3]);

263 
them
.
sö_addr
.
s_addr
=
	`ht⁄l
(
addr
);

265 i‡(
ty≥
 =
SOCK_STREAM
)

266 
s
=
	`sockë
(
AF_INET
,
SOCK_STREAM
,
SOCKET_PROTOCOL
);

268 
s
=
	`sockë
(
AF_INET
,
SOCK_DGRAM
,
IPPROTO_UDP
);

270 i‡(
s
 =
INVALID_SOCKET
Ë{ 
	`≥º‹
("socket"); (0); }

272 #i‡
	`deföed
(
SO_KEEPALIVE
Ë&& !deföed(
OPENSSL_SYS_MPE
)

273 i‡(
ty≥
 =
SOCK_STREAM
)

275 
i
=0;

276 
i
=
	`£tsock›t
(
s
,
SOL_SOCKET
,
SO_KEEPALIVE
,(*)&i,(i));

277 i‡(
i
 < 0Ë{ 
	`≥º‹
("keepalive"); (0); }

281 i‡(
	`c⁄√˘
(
s
,(
sockaddr
 *)&
them
,(them)) == -1)

282 { 
	`˛o£sockë
(
s
); 
	`≥º‹
("connect"); (0); }

283 *
sock
=
s
;

285 
	}
}

287 
do_£rvî
(
p‹t
, 
ty≥
, *
ªt
, (*
cb
)(*
ho°«me
, 
s
, *
c⁄ãxt
), *context)

289 
sock
;

290 *
«me
 = 
NULL
;

291 
ac˚±_sockë
 = 0;

292 
i
;

294 i‡(!
	`öô_£rvî
(&
ac˚±_sockë
,
p‹t
,
ty≥
)) (0);

296 i‡(
ªt
 !
NULL
)

298 *
ªt
=
ac˚±_sockë
;

303 i‡(
ty≥
==
SOCK_STREAM
)

305 i‡(
	`do_ac˚±
(
ac˚±_sockë
,&
sock
,&
«me
) == 0)

307 
	`¥ötf
("%s:%d Faûuª\n",
__FUNCTION__
,
__LINE__
);

308 
	`SHUTDOWN
(
ac˚±_sockë
);

313 
sock
 = 
ac˚±_sockë
;

315 
	`¥ötf
("bef‹êcb %Œu\n",
	`time
(
NULL
));

316 
i
=(*
cb
)(
«me
,
sock
, 
c⁄ãxt
);

317 
	`¥ötf
("a·î cb %Œu\n",
	`time
(
NULL
));

318 i‡(
«me
 !
NULL
Ë
	`OPENSSL_‰ì
(name);

320 i‡(
ty≥
==
SOCK_STREAM
)

323 
	`SHUTDOWN2
(
sock
);

326 i‡(
i
 < 0)

328 
	`¥ötf
("%s:%d Faûuª\n",
__FUNCTION__
,
__LINE__
);

329 
	`SHUTDOWN2
(
ac˚±_sockë
);

330 (
i
);

333 
	}
}

335 
	$öô_£rvî_l⁄g
(*
sock
, 
p‹t
, *
ù
, 
ty≥
)

337 
ªt
=0;

338 
sockaddr_ö
 
£rvî
;

339 
s
= -1;

341 i‡(!
	`s¶_sock_öô
()) (0);

343 
	`mem£t
((*)&
£rvî
,0,(server));

344 
£rvî
.
sö_Ámûy
=
AF_INET
;

345 
£rvî
.
sö_p‹t
=
	`ht⁄s
(()
p‹t
);

346 i‡(
ù
 =
NULL
)

347 
£rvî
.
sö_addr
.
s_addr
=
INADDR_ANY
;

350 #i‚de‡
BIT_FIELD_LIMITS


351 
	`mem˝y
(&
£rvî
.
sö_addr
.
s_addr
,
ù
,4);

353 
	`mem˝y
(&
£rvî
.
sö_addr
,
ù
,4);

356 i‡(
ty≥
 =
SOCK_STREAM
)

357 
s
=
	`sockë
(
AF_INET
,
SOCK_STREAM
,
SOCKET_PROTOCOL
);

359 
s
=
	`sockë
(
AF_INET
, 
SOCK_DGRAM
,
IPPROTO_UDP
);

361 i‡(
s
 =
INVALID_SOCKET
Ë
îr
;

362 #i‡
deföed
 
SOL_SOCKET
 && deföed 
SO_REUSEADDR


364 
j
 = 1;

365 
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_REUSEADDR
,

366 (*Ë&
j
,  j);

369 i‡(
	`böd
(
s
,(
sockaddr
 *)&
£rvî
,(server)) == -1)

371 #i‚de‡
OPENSSL_SYS_WINDOWS


372 
	`≥º‹
("bind");

374 
îr
;

377 i‡(
ty≥
==
SOCK_STREAM
 && 
	`li°í
(
s
,128Ë=-1Ë
îr
;

378 *
sock
=
s
;

379 
ªt
=1;

380 
îr
:

381 i‡((
ªt
 =0Ë&& (
s
 != -1))

383 
	`SHUTDOWN
(
s
);

385 (
ªt
);

386 
	}
}

388 
	$öô_£rvî
(*
sock
, 
p‹t
, 
ty≥
)

390 (
	`öô_£rvî_l⁄g
(
sock
, 
p‹t
, 
NULL
, 
ty≥
));

391 
	}
}

393 
	$do_ac˚±
(
acc_sock
, *
sock
, **
ho°
)

395 
ªt
;

396 
ho°ít
 *
h1
,*
h2
;

397 
sockaddr_ö
 
‰om
;

398 
Àn
;

401 i‡(!
	`s¶_sock_öô
()) (0);

403 #i‚de‡
OPENSSL_SYS_WINDOWS


404 
ªdoô
:

407 
	`mem£t
((*)&
‰om
,0,(from));

408 
Àn
=(
‰om
);

414 
ªt
=
	`ac˚±
(
acc_sock
,(
sockaddr
 *)&
‰om
,(*)&
Àn
);

415 i‡(
ªt
 =
INVALID_SOCKET
)

417 #i‡
	`deföed
(
OPENSSL_SYS_WINDOWS
Ë|| (deföed(
OPENSSL_SYS_NETWARE
Ë&& !deföed(
NETWARE_BSDSOCK
))

418 
i
;

419 
i
=
	`WSAGëLa°Eº‹
();

420 
	`BIO_¥ötf
(
bio_îr
,"ac˚±Éº‹ %d\n",
i
);

422 i‡(
î∫o
 =
EINTR
)

425 
ªdoô
;

427 
	`Ârötf
(
°dîr
,"î∫o=%d ",
î∫o
);

428 
	`≥º‹
("accept");

443 i‡(
ho°
 =
NULL
Ë
íd
;

444 #i‚de‡
BIT_FIELD_LIMITS


446 
h1
=
	`gëho°byaddr
((*)&
‰om
.
sö_addr
.
s_addr
,

447 (
‰om
.
sö_addr
.
s_addr
),
AF_INET
);

449 
h1
=
	`gëho°byaddr
((*)&
‰om
.
sö_addr
,

450 (
ö_addr
),
AF_INET
);

452 i‡(
h1
 =
NULL
)

455 *
ho°
=
NULL
;

460 i‡((*
ho°
=(*)
	`OPENSSL_mÆloc
(
	`°æí
(
h1
->
h_«me
)+1)Ë=
NULL
)

462 
	`≥º‹
("OPENSSL_malloc");

465 
	`BUF_°æ˝y
(*
ho°
,
h1
->
h_«me
,
	`°æí
(h1->h_name)+1);

467 
h2
=
	`GëHo°ByName
(*
ho°
);

468 i‡(
h2
 =
NULL
)

470 
	`BIO_¥ötf
(
bio_îr
,"gethostbyname failure\n");

473 i‡(
h2
->
h_addπy≥
 !
AF_INET
)

475 
	`BIO_¥ötf
(
bio_îr
,"gethostbynameáddr isÇot AF_INET\n");

479 
íd
:

480 *
sock
=
ªt
;

482 
	}
}

484 
	$exåa˘_ho°_p‹t
(*
°r
, **
ho°_±r
, *
ù
,

485 *
p‹t_±r
)

487 *
h
,*
p
;

489 
h
=
°r
;

490 
p
=
	`°rchr
(
°r
,':');

491 i‡(
p
 =
NULL
)

493 
	`BIO_¥ötf
(
bio_îr
,"noÖort defined\n");

496 *(
p
++)='\0';

498 i‡((
ù
 !
NULL
Ë&& !
	`ho°_ù
(
°r
,ip))

499 
îr
;

500 i‡(
ho°_±r
 !
NULL
Ë*ho°_±r=
h
;

502 i‡(!
	`exåa˘_p‹t
(
p
,
p‹t_±r
))

503 
îr
;

505 
îr
:

507 
	}
}

509 
	$ho°_ù
(*
°r
, 
ù
[4])

511 
ö
[4];

512 
i
;

514 i‡(
	`ssˇnf
(
°r
,"%u.%u.%u.%u",&(
ö
[0]),&(in[1]),&(in[2]),&(in[3])) == 4)

516 
i
=0; i<4; i++)

517 i‡(
ö
[
i
] > 255)

519 
	`BIO_¥ötf
(
bio_îr
,"invalid IPáddress\n");

520 
îr
;

522 
ù
[0]=
ö
[0];

523 
ù
[1]=
ö
[1];

524 
ù
[2]=
ö
[2];

525 
ù
[3]=
ö
[3];

529 
ho°ít
 *
he
;

531 i‡(!
	`s¶_sock_öô
()) (0);

533 
he
=
	`GëHo°ByName
(
°r
);

534 i‡(
he
 =
NULL
)

536 
	`BIO_¥ötf
(
bio_îr
,"gethostbyname failure\n");

537 
îr
;

540 i‡(()
he
->
h_addπy≥
 !
AF_INET
)

542 
	`BIO_¥ötf
(
bio_îr
,"gethostbynameáddr isÇot AF_INET\n");

545 
ù
[0]=
he
->
h_addr_li°
[0][0];

546 
ù
[1]=
he
->
h_addr_li°
[0][1];

547 
ù
[2]=
he
->
h_addr_li°
[0][2];

548 
ù
[3]=
he
->
h_addr_li°
[0][3];

551 
îr
:

553 
	}
}

555 
	$exåa˘_p‹t
(*
°r
, *
p‹t_±r
)

557 
i
;

558 
£rvít
 *
s
;

560 
i
=
	`©oi
(
°r
);

561 i‡(
i
 != 0)

562 *
p‹t_±r
=()
i
;

565 
s
=
	`gë£rvby«me
(
°r
,"tcp");

566 i‡(
s
 =
NULL
)

568 
	`BIO_¥ötf
(
bio_îr
,"gë£rvby«mêÁûuª f‹ %s\n",
°r
);

571 *
p‹t_±r
=
	`¡ohs
(()
s
->
s_p‹t
);

574 
	}
}

576 
	#GHBN_NUM
 4

	)

577 
	sghbn_ˇche_°


579 
	m«me
[128];

580 
ho°ít
 
	mít
;

581 
	m‹dî
;

582 } 
	gghbn_ˇche
[
GHBN_NUM
];

584 
	gghbn_hôs
=0L;

585 
	gghbn_miss
=0L;

587 
ho°ít
 *
	$GëHo°ByName
(*
«me
)

589 
ho°ít
 *
ªt
;

590 
i
,
lowi
=0;

591 
low
= ()-1;

593 
i
=0; i<
GHBN_NUM
; i++)

595 i‡(
low
 > 
ghbn_ˇche
[
i
].
‹dî
)

597 
low
=
ghbn_ˇche
[
i
].
‹dî
;

598 
lowi
=
i
;

600 i‡(
ghbn_ˇche
[
i
].
‹dî
 > 0)

602 i‡(
	`°∫cmp
(
«me
,
ghbn_ˇche
[
i
].name,128) == 0)

606 i‡(
i
 =
GHBN_NUM
)

608 
ghbn_miss
++;

609 
ªt
=
	`gëho°by«me
(
«me
);

610 i‡(
ªt
 =
NULL
) (NULL);

612 if(
	`°æí
(
«me
Ë<  
ghbn_ˇche
[0].name)

614 
	`°r˝y
(
ghbn_ˇche
[
lowi
].
«me
,name);

615 
	`mem˝y
((*)&(
ghbn_ˇche
[
lowi
].
ít
),
ªt
,(
ho°ít
));

616 
ghbn_ˇche
[
lowi
].
‹dî
=
ghbn_miss
+
ghbn_hôs
;

618 (
ªt
);

622 
ghbn_hôs
++;

623 
ªt
&(
ghbn_ˇche
[
i
].
ít
);

624 
ghbn_ˇche
[
i
].
‹dî
=
ghbn_miss
+
ghbn_hôs
;

625 (
ªt
);

627 
	}
}

	@s_time.c

59 
	#NO_SHUTDOWN


	)

66 
	~<°dio.h
>

67 
	~<°dlib.h
>

68 
	~<°rög.h
>

70 
	#USE_SOCKETS


	)

71 
	~"≠ps.h
"

72 #ifde‡
OPENSSL_NO_STDIO


73 
	#APPS_WIN16


	)

75 
	~<›ís¶/x509.h
>

76 
	~<›ís¶/s¶.h
>

77 
	~<›ís¶/≥m.h
>

78 
	~"s_≠ps.h
"

79 
	~<›ís¶/îr.h
>

80 #ifde‡
WIN32_STUFF


81 
	~"wömaö.h
"

82 
	~"wöãxt.h
"

84 #i‡!
deföed
(
OPENSSL_SYS_MSDOS
)

85 #ö˛udê
OPENSSL_UNISTD


88 #unde‡
PROG


89 
	#PROG
 
s_time_maö


	)

91 #unde‡
io˘l


92 
	#io˘l
 
io˘lsockë


	)

94 
	#SSL_CONNECT_NAME
 "loˇlho°:4433"

	)

98 #unde‡
BUFSIZZ


99 
	#BUFSIZZ
 1024*10

	)

101 
	#MYBUFSIZ
 1024*8

	)

103 #unde‡
mö


104 #unde‡
max


105 
	#mö
(
a
,
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

106 
	#max
(
a
,
b
Ë((◊Ë> (b)Ë? (aË: (b))

	)

108 #unde‡
SECONDS


109 
	#SECONDS
 30

	)

110 
vîify_dïth
;

111 
vîify_îr‹
;

113 
s_time_ußge
();

114 
∑r£Args
–
¨gc
, **
¨gv
 );

115 
SSL
 *
doC⁄√˘i⁄
–SSL *
sc⁄
 );

116 
s_time_öô
();

123 *
	gho°
=
SSL_CONNECT_NAME
;

124 *
	gt_˚π_fûe
=
NULL
;

125 *
	gt_key_fûe
=
NULL
;

126 *
	gCA∑th
=
NULL
;

127 *
	gCAfûe
=
NULL
;

128 *
	gtm_cùhî
=
NULL
;

129 
	gtm_vîify
 = 
SSL_VERIFY_NONE
;

130 
	gmaxTime
 = 
SECONDS
;

131 
SSL_CTX
 *
	gtm_˘x
=
NULL
;

132 c⁄° 
SSL_METHOD
 *
	gs_time_mëh
=
NULL
;

133 *
	gs_www_∑th
=
NULL
;

134 
	gbyãs_ªad
=0;

135 
	g°_bugs
=0;

136 
	g≥rf‹m
=0;

137 #ifde‡
FIONBIO


138 
	gt_nbio
=0;

140 #ifde‡
OPENSSL_SYS_WIN32


141 
	gexôNow
 = 0;

144 
	$s_time_öô
()

146 
ho°
=
SSL_CONNECT_NAME
;

147 
t_˚π_fûe
=
NULL
;

148 
t_key_fûe
=
NULL
;

149 
CA∑th
=
NULL
;

150 
CAfûe
=
NULL
;

151 
tm_cùhî
=
NULL
;

152 
tm_vîify
 = 
SSL_VERIFY_NONE
;

153 
maxTime
 = 
SECONDS
;

154 
tm_˘x
=
NULL
;

155 
s_time_mëh
=
NULL
;

156 
s_www_∑th
=
NULL
;

157 
byãs_ªad
=0;

158 
°_bugs
=0;

159 
≥rf‹m
=0;

161 #ifde‡
FIONBIO


162 
t_nbio
=0;

164 #ifde‡
OPENSSL_SYS_WIN32


165 
exôNow
 = 0;

167 
	}
}

172 
	$s_time_ußge
()

174 
umsg
[] = "\
-timeárg - maxÇumber of secondsÅo collect data, default %d\n\
-verifyárg -Åurn onÖeer certificate verification,árg == depth\n\
-certárg - certificate fileÅo use, PEM formatássumed\n\
-keyárg - RSA fileÅo use, PEM formatássumed, key is in cert file\n\
 ifÇot specified byÅhis option\n\
-CApathárg - PEM format directory of CA's\n\
-CAfileárg - PEM format file of CA's\n\
-cipher -Öreferred cipherÅo use,Ölay with 'openssl ciphers'\n\n";

184 
	`¥ötf
( "usage: s_time <args>\n\n" );

186 
	`¥ötf
("-c⁄√˘ ho°:p‹à- ho°:p‹àtÿc⁄√˘Åÿ(deÁu… i†%s)\n",
SSL_CONNECT_NAME
);

187 #ifde‡
FIONBIO


188 
	`¥ötf
("-nbio - Run withÇon-blocking IO\n");

189 
	`¥ötf
("-ssl2 - Just use SSLv2\n");

190 
	`¥ötf
("-ssl3 - Just use SSLv3\n");

191 
	`¥ötf
("-bugs - Turn on SSL bug compatibility\n");

192 
	`¥ötf
("-new - JustÅimeÇew connections\n");

193 
	`¥ötf
("-reuse - JustÅime connectionÑeuse\n");

194 
	`¥ötf
("-wwwÖage - Retrieve 'page' fromÅhe site\n");

196 
	`¥ötf
–
umsg
,
SECONDS
 );

197 
	}
}

204 
	$∑r£Args
(
¨gc
, **
¨gv
)

206 
bad›
 = 0;

208 
vîify_dïth
=0;

209 
vîify_îr‹
=
X509_V_OK
;

211 
¨gc
--;

212 
¨gv
++;

214 
¨gc
 >= 1) {

215 i‡(
	`°rcmp
(*
¨gv
,"-connect") == 0)

217 i‡(--
¨gc
 < 1Ë
bad
;

218 
ho°
*(++
¨gv
);

221 if–
	`°rcmp
(*
¨gv
,"-host") == 0)

223 i‡(--
¨gc
 < 1Ë
bad
;

224 
ho°
*(++
¨gv
);

226 if–
	`°rcmp
(*
¨gv
,"-port") == 0)

228 i‡(--
¨gc
 < 1Ë
bad
;

229 
p‹t
*(++
¨gv
);

232 i‡(
	`°rcmp
(*
¨gv
,"-reuse") == 0)

233 
≥rf‹m
=2;

234 i‡(
	`°rcmp
(*
¨gv
,"-new") == 0)

235 
≥rf‹m
=1;

236 if–
	`°rcmp
(*
¨gv
,"-verify") == 0) {

238 
tm_vîify
=
SSL_VERIFY_PEER
|
SSL_VERIFY_CLIENT_ONCE
;

239 i‡(--
¨gc
 < 1Ë
bad
;

240 
vîify_dïth
=
	`©oi
(*(++
¨gv
));

241 
	`BIO_¥ötf
(
bio_îr
,"vîify dïth i†%d\n",
vîify_dïth
);

243 } if–
	`°rcmp
(*
¨gv
,"-cert") == 0) {

245 i‡(--
¨gc
 < 1Ë
bad
;

246 
t_˚π_fûe
*(++
¨gv
);

248 } if–
	`°rcmp
(*
¨gv
,"-key") == 0) {

250 i‡(--
¨gc
 < 1Ë
bad
;

251 
t_key_fûe
*(++
¨gv
);

253 } if–
	`°rcmp
(*
¨gv
,"-CApath") == 0) {

255 i‡(--
¨gc
 < 1Ë
bad
;

256 
CA∑th
*(++
¨gv
);

258 } if–
	`°rcmp
(*
¨gv
,"-CAfile") == 0) {

260 i‡(--
¨gc
 < 1Ë
bad
;

261 
CAfûe
*(++
¨gv
);

263 } if–
	`°rcmp
(*
¨gv
,"-cipher") == 0) {

265 i‡(--
¨gc
 < 1Ë
bad
;

266 
tm_cùhî
*(++
¨gv
);

268 #ifde‡
FIONBIO


269 if(
	`°rcmp
(*
¨gv
,"-nbio") == 0) {

270 
t_nbio
=1;

273 if(
	`°rcmp
(*
¨gv
,"-www") == 0)

275 i‡(--
¨gc
 < 1Ë
bad
;

276 
s_www_∑th
*(++
¨gv
);

277 if(
	`°æí
(
s_www_∑th
Ë> 
MYBUFSIZ
-100)

279 
	`BIO_¥ötf
(
bio_îr
,"-www optionÅooÜong\n");

280 
bad›
=1;

283 if(
	`°rcmp
(*
¨gv
,"-bugs") == 0)

284 
°_bugs
=1;

285 #i‚de‡
OPENSSL_NO_SSL2


286 if(
	`°rcmp
(*
¨gv
,"-ssl2") == 0)

287 
s_time_mëh
=
	`SSLv2_˛õ¡_mëhod
();

289 #i‚de‡
OPENSSL_NO_SSL3


290 if(
	`°rcmp
(*
¨gv
,"-ssl3") == 0)

291 
s_time_mëh
=
	`SSLv3_˛õ¡_mëhod
();

293 if–
	`°rcmp
(*
¨gv
,"-time") == 0) {

295 i‡(--
¨gc
 < 1Ë
bad
;

296 
maxTime

	`©oi
(*(++
¨gv
));

299 
	`BIO_¥ötf
(
bio_îr
,"unknow¿›ti⁄ %s\n",*
¨gv
);

300 
bad›
=1;

304 
¨gc
--;

305 
¨gv
++;

308 i‡(
≥rf‹m
 == 0)Öerform=3;

310 if(
bad›
) {

311 
bad
:

312 
	`s_time_ußge
();

317 
	}
}

322 
	#START
 0

	)

323 
	#STOP
 1

	)

325 
	$tm_Time_F
(
s
)

327  
	`≠p_tmöãrvÆ
(
s
,1);

328 
	}
}

334 
MAIN
(, **);

336 
	$MAIN
(
¨gc
, **
¨gv
)

338 
tŸÆTime
 = 0.0;

339 
nC⁄n
 = 0;

340 
SSL
 *
sc⁄
=
NULL
;

341 
föishtime
=0;

342 
ªt
=1,
i
;

343 
MS_STATIC
 
buf
[1024*8];

344 
vî
;

346 
	`≠ps_°¨tup
();

347 
	`s_time_öô
();

349 i‡(
bio_îr
 =
NULL
)

350 
bio_îr
=
	`BIO_√w_Â
(
°dîr
,
BIO_NOCLOSE
);

352 #i‡!
	`deföed
(
OPENSSL_NO_SSL2
Ë&& !deföed(
OPENSSL_NO_SSL3
)

353 
s_time_mëh
=
	`SSLv23_˛õ¡_mëhod
();

354 #ñi‡!
	`deföed
(
OPENSSL_NO_SSL3
)

355 
s_time_mëh
=
	`SSLv3_˛õ¡_mëhod
();

356 #ñi‡!
	`deföed
(
OPENSSL_NO_SSL2
)

357 
s_time_mëh
=
	`SSLv2_˛õ¡_mëhod
();

361 if–
	`∑r£Args
–
¨gc
, 
¨gv
 ) < 0 )

362 
íd
;

364 
	`O≥nSSL_add_s¶_Æg‹ôhms
();

365 i‡((
tm_˘x
=
	`SSL_CTX_√w
(
s_time_mëh
)Ë=
NULL
) (1);

367 
	`SSL_CTX_£t_quõt_shutdown
(
tm_˘x
,1);

369 i‡(
°_bugs
Ë
	`SSL_CTX_£t_›ti⁄s
(
tm_˘x
,
SSL_OP_ALL
);

370 
	`SSL_CTX_£t_cùhî_li°
(
tm_˘x
,
tm_cùhî
);

371 if(!
	`£t_˚π_°uff
(
tm_˘x
,
t_˚π_fûe
,
t_key_fûe
))

372 
íd
;

374 
	`SSL_lﬂd_îr‹_°rögs
();

376 i‡((!
	`SSL_CTX_lﬂd_vîify_loˇti⁄s
(
tm_˘x
,
CAfûe
,
CA∑th
)) ||

377 (!
	`SSL_CTX_£t_deÁu…_vîify_∑ths
(
tm_˘x
)))

380 
	`ERR_¥öt_îr‹s
(
bio_îr
);

384 i‡(
tm_cùhî
 =
NULL
)

385 
tm_cùhî
 = 
	`gëív
("SSL_CIPHER");

387 i‡(
tm_cùhî
 =
NULL
 ) {

388 
	`Ârötf
–
°dîr
, "No CIPHER specified\n" );

391 i‡(!(
≥rf‹m
 & 1)Ë
√xt
;

392 
	`¥ötf
–"CﬁÀ˘ög c⁄√˘i⁄ sèti°ic†f‹ %d sec⁄ds\n", 
maxTime
 );

396 
byãs_ªad
=0;

397 
föishtime
=()
	`time
(
NULL
)+
maxTime
;

398 
	`tm_Time_F
(
START
);

401 i‡(
föishtime
 < ()
	`time
(
NULL
)) ;

402 #ifde‡
WIN32_STUFF


404 if–
	`ÊushWöMsgs
(0) == -1 )

405 
íd
;

407 if–
waôögToDõ
 || 
exôNow
 )

408 
íd
;

411 if–(
sc⁄
 = 
	`doC⁄√˘i⁄
–
NULL
 )) == NULL )

412 
íd
;

414 i‡(
s_www_∑th
 !
NULL
)

416 
	`BIO_¢¥ötf
(
buf
, buf,"GET %†HTTP/1.0\r\n\r\n",
s_www_∑th
);

417 
	`SSL_wrôe
(
sc⁄
,
buf
,
	`°æí
(buf));

418 (
i
=
	`SSL_ªad
(
sc⁄
,
buf
,(buf))) > 0)

419 
byãs_ªad
+=
i
;

422 #ifde‡
NO_SHUTDOWN


423 
	`SSL_£t_shutdown
(
sc⁄
,
SSL_SENT_SHUTDOWN
|
SSL_RECEIVED_SHUTDOWN
);

425 
	`SSL_shutdown
(
sc⁄
);

427 
	`SHUTDOWN2
(
	`SSL_gë_fd
(
sc⁄
));

429 
nC⁄n
 += 1;

430 i‡(
	`SSL_£ssi⁄_ªu£d
(
sc⁄
))

431 
vî
='r';

434 
vî
=
	`SSL_vîsi⁄
(
sc⁄
);

435 i‡(
vî
 =
TLS1_VERSION
)

436 
vî
='t';

437 i‡(
vî
 =
SSL3_VERSION
)

438 
vî
='3';

439 i‡(
vî
 =
SSL2_VERSION
)

440 
vî
='2';

442 
vî
='*';

444 
	`Âutc
(
vî
,
°dout
);

445 
	`fÊush
(
°dout
);

447 
	`SSL_‰ì
–
sc⁄
 );

448 
sc⁄
=
NULL
;

450 
tŸÆTime
 +
	`tm_Time_F
(
STOP
);

452 
i
=()(()
	`time
(
NULL
)-
föishtime
+
maxTime
);

453 
	`¥ötf
–"\n\n%d c⁄√˘i⁄†ö %.2fs; %.2‡c⁄√˘i⁄s/u£∏£c, byã†ªad %ld\n", 
nC⁄n
, 
tŸÆTime
, ((ÍC⁄n/tŸÆTime),
byãs_ªad
);

454 
	`¥ötf
–"%d c⁄√˘i⁄†ö %ldÑó»£c⁄ds, %ld byã†ªadÖî c⁄√˘i⁄\n",
nC⁄n
,()
	`time
(
NULL
)-
föishtime
+
maxTime
,
byãs_ªad
/nConn);

458 
√xt
:

459 i‡(!(
≥rf‹m
 & 2)Ë
íd
;

460 
	`¥ötf
( "\n\nNowÅiming with session idÑeuse.\n" );

463 if–(
sc⁄
 = 
	`doC⁄√˘i⁄
–
NULL
 )) == NULL )

465 
	`Ârötf
–
°dîr
, "UnableÅo get connection\n" );

466 
íd
;

469 i‡(
s_www_∑th
 !
NULL
)

471 
	`BIO_¢¥ötf
(
buf
, buf,"GET %†HTTP/1.0\r\n\r\n",
s_www_∑th
);

472 
	`SSL_wrôe
(
sc⁄
,
buf
,
	`°æí
(buf));

473 
	`SSL_ªad
(
sc⁄
,
buf
,(buf)) > 0)

476 #ifde‡
NO_SHUTDOWN


477 
	`SSL_£t_shutdown
(
sc⁄
,
SSL_SENT_SHUTDOWN
|
SSL_RECEIVED_SHUTDOWN
);

479 
	`SSL_shutdown
(
sc⁄
);

481 
	`SHUTDOWN2
(
	`SSL_gë_fd
(
sc⁄
));

483 
nC⁄n
 = 0;

484 
tŸÆTime
 = 0.0;

486 
föishtime
=()
	`time
(
NULL
)+
maxTime
;

488 
	`¥ötf
( "starting\n" );

489 
byãs_ªad
=0;

490 
	`tm_Time_F
(
START
);

494 i‡(
föishtime
 < ()
	`time
(
NULL
)) ;

496 #ifde‡
WIN32_STUFF


497 if–
	`ÊushWöMsgs
(0) == -1 )

498 
íd
;

500 if–
waôögToDõ
 || 
exôNow
 )

501 
íd
;

504 if–(
	`doC⁄√˘i⁄
–
sc⁄
 )Ë=
NULL
 )

505 
íd
;

507 i‡(
s_www_∑th
)

509 
	`BIO_¢¥ötf
(
buf
, buf,"GET %†HTTP/1.0\r\n\r\n",
s_www_∑th
);

510 
	`SSL_wrôe
(
sc⁄
,
buf
,
	`°æí
(buf));

511 (
i
=
	`SSL_ªad
(
sc⁄
,
buf
,(buf))) > 0)

512 
byãs_ªad
+=
i
;

515 #ifde‡
NO_SHUTDOWN


516 
	`SSL_£t_shutdown
(
sc⁄
,
SSL_SENT_SHUTDOWN
|
SSL_RECEIVED_SHUTDOWN
);

518 
	`SSL_shutdown
(
sc⁄
);

520 
	`SHUTDOWN2
(
	`SSL_gë_fd
(
sc⁄
));

522 
nC⁄n
 += 1;

523 i‡(
	`SSL_£ssi⁄_ªu£d
(
sc⁄
))

524 
vî
='r';

527 
vî
=
	`SSL_vîsi⁄
(
sc⁄
);

528 i‡(
vî
 =
TLS1_VERSION
)

529 
vî
='t';

530 i‡(
vî
 =
SSL3_VERSION
)

531 
vî
='3';

532 i‡(
vî
 =
SSL2_VERSION
)

533 
vî
='2';

535 
vî
='*';

537 
	`Âutc
(
vî
,
°dout
);

538 
	`fÊush
(
°dout
);

540 
tŸÆTime
 +
	`tm_Time_F
(
STOP
);

543 
	`¥ötf
–"\n\n%d c⁄√˘i⁄†ö %.2fs; %.2‡c⁄√˘i⁄s/u£∏£c, byã†ªad %ld\n", 
nC⁄n
, 
tŸÆTime
, ((ÍC⁄n/tŸÆTime),
byãs_ªad
);

544 
	`¥ötf
–"%d c⁄√˘i⁄†ö %ldÑó»£c⁄ds, %ld byã†ªadÖî c⁄√˘i⁄\n",
nC⁄n
,()
	`time
(
NULL
)-
föishtime
+
maxTime
,
byãs_ªad
/nConn);

546 
ªt
=0;

547 
íd
:

548 i‡(
sc⁄
 !
NULL
Ë
	`SSL_‰ì
(scon);

550 i‡(
tm_˘x
 !
NULL
)

552 
	`SSL_CTX_‰ì
(
tm_˘x
);

553 
tm_˘x
=
NULL
;

555 
	`≠ps_shutdown
();

556 
	`OPENSSL_EXIT
(
ªt
);

557 
	}
}

566 
SSL
 *
	$doC⁄√˘i⁄
(
SSL
 *
sc⁄
)

568 
BIO
 *
c⁄n
;

569 
SSL
 *
£rvîC⁄
;

570 
width
, 
i
;

571 
fd_£t
 
ªadfds
;

573 i‡((
c⁄n
=
	`BIO_√w
(
	`BIO_s_c⁄√˘
())Ë=
NULL
)

574 (
NULL
);

577 
	`BIO_£t_c⁄n_ho°«me
(
c⁄n
,
ho°
);

579 i‡(
sc⁄
 =
NULL
)

580 
£rvîC⁄
=
	`SSL_√w
(
tm_˘x
);

583 
£rvîC⁄
=
sc⁄
;

584 
	`SSL_£t_c⁄√˘_°©e
(
£rvîC⁄
);

587 
	`SSL_£t_bio
(
£rvîC⁄
,
c⁄n
,conn);

590 if–
sc⁄
 !
NULL
 )

591 
	`SSL_£t_£ssi⁄
(
£rvîC⁄
,
	`SSL_gë_£ssi⁄
(
sc⁄
));

596 
i
=
	`SSL_c⁄√˘
(
£rvîC⁄
);

597 i‡(
	`BIO_sock_should_ªåy
(
i
))

599 
	`BIO_¥ötf
(
bio_îr
,"DELAY\n");

601 
i
=
	`SSL_gë_fd
(
£rvîC⁄
);

602 
width
=
i
+1;

603 
	`FD_ZERO
(&
ªadfds
);

604 
	`›ís¶_fd£t
(
i
,&
ªadfds
);

611 
	`£À˘
(
width
,(*)&
ªadfds
,
NULL
,NULL,NULL);

616 if(
i
 <= 0)

618 
	`BIO_¥ötf
(
bio_îr
,"ERROR\n");

619 i‡(
vîify_îr‹
 !
X509_V_OK
)

620 
	`BIO_¥ötf
(
bio_îr
,"verifyÉrror:%s\n",

621 
	`X509_vîify_˚π_îr‹_°rög
(
vîify_îr‹
));

623 
	`ERR_¥öt_îr‹s
(
bio_îr
);

624 i‡(
sc⁄
 =
NULL
)

625 
	`SSL_‰ì
(
£rvîC⁄
);

626  
NULL
;

629  
£rvîC⁄
;

630 
	}
}

	@sess_id.c

59 
	~<°dio.h
>

60 
	~<°dlib.h
>

61 
	~<°rög.h
>

62 
	~"≠ps.h
"

63 
	~<›ís¶/bio.h
>

64 
	~<›ís¶/îr.h
>

65 
	~<›ís¶/x509.h
>

66 
	~<›ís¶/≥m.h
>

67 
	~<›ís¶/s¶.h
>

69 #unde‡
PROG


70 
	#PROG
 
£ss_id_maö


	)

72 c⁄° *
	g£ss_id_ußge
[]={

83 
NULL


86 
SSL_SESSION
 *
lﬂd_£ss_id
(*
fûe
, 
f‹m©
);

88 
MAIN
(, **);

90 
	$MAIN
(
¨gc
, **
¨gv
)

92 
SSL_SESSION
 *
x
=
NULL
;

93 
X509
 *
≥î
 = 
NULL
;

94 
ªt
=1,
i
,
num
,
bad›s
=0;

95 
BIO
 *
out
=
NULL
;

96 
öf‹m©
,
outf‹m©
;

97 *
öfûe
=
NULL
,*
outfûe
=NULL,*
c⁄ãxt
=NULL;

98 
˚π
=0,
noout
=0,
ãxt
=0;

99 c⁄° **
µ
;

101 
	`≠ps_°¨tup
();

103 i‡(
bio_îr
 =
NULL
)

104 i‡((
bio_îr
=
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

105 
	`BIO_£t_Â
(
bio_îr
,
°dîr
,
BIO_NOCLOSE
|
BIO_FP_TEXT
);

107 
öf‹m©
=
FORMAT_PEM
;

108 
outf‹m©
=
FORMAT_PEM
;

110 
¨gc
--;

111 
¨gv
++;

112 
num
=0;

113 
¨gc
 >= 1)

115 i‡(
	`°rcmp
(*
¨gv
,"-inform") == 0)

117 i‡(--
¨gc
 < 1Ë
bad
;

118 
öf‹m©
=
	`°r2fmt
(*(++
¨gv
));

120 i‡(
	`°rcmp
(*
¨gv
,"-outform") == 0)

122 i‡(--
¨gc
 < 1Ë
bad
;

123 
outf‹m©
=
	`°r2fmt
(*(++
¨gv
));

125 i‡(
	`°rcmp
(*
¨gv
,"-in") == 0)

127 i‡(--
¨gc
 < 1Ë
bad
;

128 
öfûe
*(++
¨gv
);

130 i‡(
	`°rcmp
(*
¨gv
,"-out") == 0)

132 i‡(--
¨gc
 < 1Ë
bad
;

133 
outfûe
*(++
¨gv
);

135 i‡(
	`°rcmp
(*
¨gv
,"-text") == 0)

136 
ãxt
++
num
;

137 i‡(
	`°rcmp
(*
¨gv
,"-cert") == 0)

138 
˚π
++
num
;

139 i‡(
	`°rcmp
(*
¨gv
,"-noout") == 0)

140 
noout
++
num
;

141 i‡(
	`°rcmp
(*
¨gv
,"-context") == 0)

143 if(--
¨gc
 < 1Ë
bad
;

144 
c⁄ãxt
=*++
¨gv
;

148 
	`BIO_¥ötf
(
bio_îr
,"unknow¿›ti⁄ %s\n",*
¨gv
);

149 
bad›s
=1;

152 
¨gc
--;

153 
¨gv
++;

156 i‡(
bad›s
)

158 
bad
:

159 
µ
=
£ss_id_ußge
; (*µ !
NULL
);Öp++)

160 
	`BIO_¥ötf
(
bio_îr
,"%s",*
µ
);

161 
íd
;

164 
	`ERR_lﬂd_¸y±o_°rögs
();

165 
x
=
	`lﬂd_£ss_id
(
öfûe
,
öf‹m©
);

166 i‡(
x
 =
NULL
Ë{ 
íd
; }

167 
≥î
 = 
	`SSL_SESSION_gë0_≥î
(
x
);

169 if(
c⁄ãxt
)

171 
size_t
 
˘x_Àn
 = 
	`°æí
(
c⁄ãxt
);

172 if(
˘x_Àn
 > 
SSL_MAX_SID_CTX_LENGTH
)

174 
	`BIO_¥ötf
(
bio_îr
,"ContextÅooÜong\n");

175 
íd
;

177 
	`SSL_SESSION_£t1_id_c⁄ãxt
(
x
, (*)
c⁄ãxt
, 
˘x_Àn
);

180 #ifde‡
undef


183 
SSL_SESSION
 *
s
;

184 
buf
[1024*10],*
p
;

185 
i
;

187 
s
=
	`SSL_SESSION_√w
();

189 
p
&
buf
;

190 
i
=
	`i2d_SSL_SESSION
(
x
,&
p
);

191 
p
&
buf
;

192 
	`d2i_SSL_SESSION
(&
s
,&
p
,()
i
);

193 
p
&
buf
;

194 
	`d2i_SSL_SESSION
(&
s
,&
p
,()
i
);

195 
p
&
buf
;

196 
	`d2i_SSL_SESSION
(&
s
,&
p
,()
i
);

197 
	`SSL_SESSION_‰ì
(
s
);

201 i‡(!
noout
 || 
ãxt
)

203 
out
=
	`BIO_√w
(
	`BIO_s_fûe
());

204 i‡(
out
 =
NULL
)

206 
	`ERR_¥öt_îr‹s
(
bio_îr
);

207 
íd
;

210 i‡(
outfûe
 =
NULL
)

212 
	`BIO_£t_Â
(
out
,
°dout
,
BIO_NOCLOSE
);

213 #ifde‡
OPENSSL_SYS_VMS


215 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

216 
out
 = 
	`BIO_push
(
tmpbio
, out);

222 i‡(
	`BIO_wrôe_fûíame
(
out
,
outfûe
) <= 0)

224 
	`≥º‹
(
outfûe
);

225 
íd
;

230 i‡(
ãxt
)

232 
	`SSL_SESSION_¥öt
(
out
,
x
);

234 i‡(
˚π
)

236 i‡(
≥î
 =
NULL
)

237 
	`BIO_puts
(
out
,"No certificateÖresent\n");

239 
	`X509_¥öt
(
out
,
≥î
);

243 i‡(!
noout
 && !
˚π
)

245 i‡(
outf‹m©
 =
FORMAT_ASN1
)

246 
i
=
	`i2d_SSL_SESSION_bio
(
out
,
x
);

247 i‡(
outf‹m©
 =
FORMAT_PEM
)

248 
i
=
	`PEM_wrôe_bio_SSL_SESSION
(
out
,
x
);

250 
	`BIO_¥ötf
(
bio_îr
,"bad output format specified for outfile\n");

251 
íd
;

253 i‡(!
i
) {

254 
	`BIO_¥ötf
(
bio_îr
,"unableÅo write SSL_SESSION\n");

255 
íd
;

258 i‡(!
noout
 && (
≥î
 !
NULL
))

260 i‡(
outf‹m©
 =
FORMAT_ASN1
)

261 
i
=()
	`i2d_X509_bio
(
out
,
≥î
);

262 i‡(
outf‹m©
 =
FORMAT_PEM
)

263 
i
=
	`PEM_wrôe_bio_X509
(
out
,
≥î
);

265 
	`BIO_¥ötf
(
bio_îr
,"bad output format specified for outfile\n");

266 
íd
;

268 i‡(!
i
) {

269 
	`BIO_¥ötf
(
bio_îr
,"unableÅo write X509\n");

270 
íd
;

273 
ªt
=0;

274 
íd
:

275 i‡(
out
 !
NULL
Ë
	`BIO_‰ì_Æl
(out);

276 i‡(
x
 !
NULL
Ë
	`SSL_SESSION_‰ì
(x);

277 
	`≠ps_shutdown
();

278 
	`OPENSSL_EXIT
(
ªt
);

279 
	}
}

281 
SSL_SESSION
 *
	$lﬂd_£ss_id
(*
öfûe
, 
f‹m©
)

283 
SSL_SESSION
 *
x
=
NULL
;

284 
BIO
 *
ö
=
NULL
;

286 
ö
=
	`BIO_√w
(
	`BIO_s_fûe
());

287 i‡(
ö
 =
NULL
)

289 
	`ERR_¥öt_îr‹s
(
bio_îr
);

290 
íd
;

293 i‡(
öfûe
 =
NULL
)

294 
	`BIO_£t_Â
(
ö
,
°dö
,
BIO_NOCLOSE
);

297 i‡(
	`BIO_ªad_fûíame
(
ö
,
öfûe
) <= 0)

299 
	`≥º‹
(
öfûe
);

300 
íd
;

303 i‡(
f‹m©
 =
FORMAT_ASN1
)

304 
x
=
	`d2i_SSL_SESSION_bio
(
ö
,
NULL
);

305 i‡(
f‹m©
 =
FORMAT_PEM
)

306 
x
=
	`PEM_ªad_bio_SSL_SESSION
(
ö
,
NULL
,NULL,NULL);

308 
	`BIO_¥ötf
(
bio_îr
,"bad input format specified for input crl\n");

309 
íd
;

311 i‡(
x
 =
NULL
)

313 
	`BIO_¥ötf
(
bio_îr
,"unableÅoÜoad SSL_SESSION\n");

314 
	`ERR_¥öt_îr‹s
(
bio_îr
);

315 
íd
;

318 
íd
:

319 i‡(
ö
 !
NULL
Ë
	`BIO_‰ì
(in);

320 (
x
);

321 
	}
}

	@smime.c

61 
	~<°dio.h
>

62 
	~<°rög.h
>

63 
	~"≠ps.h
"

64 
	~<›ís¶/¸y±o.h
>

65 
	~<›ís¶/≥m.h
>

66 
	~<›ís¶/îr.h
>

67 
	~<›ís¶/x509_vfy.h
>

68 
	~<›ís¶/x509v3.h
>

70 #unde‡
PROG


71 
	#PROG
 
smime_maö


	)

72 
ßve_˚πs
(*
sig√rfûe
, 
STACK_OF
(
X509
Ë*
sig√rs
);

73 
smime_cb
(
ok
, 
X509_STORE_CTX
 *
˘x
);

75 
	#SMIME_OP
 0x10

	)

76 
	#SMIME_IP
 0x20

	)

77 
	#SMIME_SIGNERS
 0x40

	)

78 
	#SMIME_ENCRYPT
 (1 | 
SMIME_OP
)

	)

79 
	#SMIME_DECRYPT
 (2 | 
SMIME_IP
)

	)

80 
	#SMIME_SIGN
 (3 | 
SMIME_OP
 | 
SMIME_SIGNERS
)

	)

81 
	#SMIME_VERIFY
 (4 | 
SMIME_IP
)

	)

82 
	#SMIME_PK7OUT
 (5 | 
SMIME_IP
 | 
SMIME_OP
)

	)

83 
	#SMIME_RESIGN
 (6 | 
SMIME_IP
 | 
SMIME_OP
 | 
SMIME_SIGNERS
)

	)

85 
MAIN
(, **);

87 
	$MAIN
(
¨gc
, **
¨gv
)

89 
ENGINE
 *
e
 = 
NULL
;

90 
›î©i⁄
 = 0;

91 
ªt
 = 0;

92 **
¨gs
;

93 c⁄° *
ömode
 = "r", *
outmode
 = "w";

94 *
öfûe
 = 
NULL
, *
outfûe
 = NULL;

95 *
sig√rfûe
 = 
NULL
, *
ªcùfûe
 = NULL;

96 
	`STACK_OF
(
OPENSSL_STRING
Ë*
sksig√rs
 = 
NULL
, *
skkeys
 = NULL;

97 *
˚πfûe
 = 
NULL
, *
keyfûe
 = NULL, *
c⁄tfûe
=NULL;

98 c⁄° 
EVP_CIPHER
 *
cùhî
 = 
NULL
;

99 
PKCS7
 *
p7
 = 
NULL
;

100 
X509_STORE
 *
°‹e
 = 
NULL
;

101 
X509
 *
˚π
 = 
NULL
, *
ªcù
 = NULL, *
sig√r
 = NULL;

102 
EVP_PKEY
 *
key
 = 
NULL
;

103 
	`STACK_OF
(
X509
Ë*
í˚πs
 = 
NULL
, *
Ÿhî
 = NULL;

104 
BIO
 *
ö
 = 
NULL
, *
out
 = NULL, *
öd©a
 = NULL;

105 
bad¨g
 = 0;

106 
Êags
 = 
PKCS7_DETACHED
;

107 *
to
 = 
NULL
, *
‰om
 = NULL, *
subje˘
 = NULL;

108 *
CAfûe
 = 
NULL
, *
CA∑th
 = NULL;

109 *
∑sßrgö
 = 
NULL
, *
∑ssö
 = NULL;

110 *
öønd
 = 
NULL
;

111 
√ed_ønd
 = 0;

112 
ödef
 = 0;

113 c⁄° 
EVP_MD
 *
sign_md
 = 
NULL
;

114 
öf‹m©
 = 
FORMAT_SMIME
, 
outf‹m©
 = FORMAT_SMIME;

115 
keyf‹m
 = 
FORMAT_PEM
;

116 #i‚de‡
OPENSSL_NO_ENGINE


117 *
ígöe
=
NULL
;

120 
X509_VERIFY_PARAM
 *
vpm
 = 
NULL
;

122 
¨gs
 = 
¨gv
 + 1;

123 
ªt
 = 1;

125 
	`≠ps_°¨tup
();

127 i‡(
bio_îr
 =
NULL
)

129 i‡((
bio_îr
 = 
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

130 
	`BIO_£t_Â
(
bio_îr
, 
°dîr
, 
BIO_NOCLOSE
|
BIO_FP_TEXT
);

133 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

134 
íd
;

136 !
bad¨g
 && *
¨gs
 && *args[0] == '-')

138 i‡(!
	`°rcmp
 (*
¨gs
, "-encrypt"))

139 
›î©i⁄
 = 
SMIME_ENCRYPT
;

140 i‡(!
	`°rcmp
 (*
¨gs
, "-decrypt"))

141 
›î©i⁄
 = 
SMIME_DECRYPT
;

142 i‡(!
	`°rcmp
 (*
¨gs
, "-sign"))

143 
›î©i⁄
 = 
SMIME_SIGN
;

144 i‡(!
	`°rcmp
 (*
¨gs
, "-resign"))

145 
›î©i⁄
 = 
SMIME_RESIGN
;

146 i‡(!
	`°rcmp
 (*
¨gs
, "-verify"))

147 
›î©i⁄
 = 
SMIME_VERIFY
;

148 i‡(!
	`°rcmp
 (*
¨gs
, "-pk7out"))

149 
›î©i⁄
 = 
SMIME_PK7OUT
;

150 #i‚de‡
OPENSSL_NO_DES


151 i‡(!
	`°rcmp
 (*
¨gs
, "-des3"))

152 
cùhî
 = 
	`EVP_des_ede3_cbc
();

153 i‡(!
	`°rcmp
 (*
¨gs
, "-des"))

154 
cùhî
 = 
	`EVP_des_cbc
();

156 #i‚de‡
OPENSSL_NO_SEED


157 i‡(!
	`°rcmp
 (*
¨gs
, "-seed"))

158 
cùhî
 = 
	`EVP_£ed_cbc
();

160 #i‚de‡
OPENSSL_NO_RC2


161 i‡(!
	`°rcmp
 (*
¨gs
, "-rc2-40"))

162 
cùhî
 = 
	`EVP_rc2_40_cbc
();

163 i‡(!
	`°rcmp
 (*
¨gs
, "-rc2-128"))

164 
cùhî
 = 
	`EVP_rc2_cbc
();

165 i‡(!
	`°rcmp
 (*
¨gs
, "-rc2-64"))

166 
cùhî
 = 
	`EVP_rc2_64_cbc
();

168 #i‚de‡
OPENSSL_NO_AES


169 i‡(!
	`°rcmp
(*
¨gs
,"-aes128"))

170 
cùhî
 = 
	`EVP_´s_128_cbc
();

171 i‡(!
	`°rcmp
(*
¨gs
,"-aes192"))

172 
cùhî
 = 
	`EVP_´s_192_cbc
();

173 i‡(!
	`°rcmp
(*
¨gs
,"-aes256"))

174 
cùhî
 = 
	`EVP_´s_256_cbc
();

176 #i‚de‡
OPENSSL_NO_CAMELLIA


177 i‡(!
	`°rcmp
(*
¨gs
,"-camellia128"))

178 
cùhî
 = 
	`EVP_ˇmñlü_128_cbc
();

179 i‡(!
	`°rcmp
(*
¨gs
,"-camellia192"))

180 
cùhî
 = 
	`EVP_ˇmñlü_192_cbc
();

181 i‡(!
	`°rcmp
(*
¨gs
,"-camellia256"))

182 
cùhî
 = 
	`EVP_ˇmñlü_256_cbc
();

184 i‡(!
	`°rcmp
 (*
¨gs
, "-text"))

185 
Êags
 |
PKCS7_TEXT
;

186 i‡(!
	`°rcmp
 (*
¨gs
, "-nointern"))

187 
Êags
 |
PKCS7_NOINTERN
;

188 i‡(!
	`°rcmp
 (*
¨gs
, "-noverify"))

189 
Êags
 |
PKCS7_NOVERIFY
;

190 i‡(!
	`°rcmp
 (*
¨gs
, "-nochain"))

191 
Êags
 |
PKCS7_NOCHAIN
;

192 i‡(!
	`°rcmp
 (*
¨gs
, "-nocerts"))

193 
Êags
 |
PKCS7_NOCERTS
;

194 i‡(!
	`°rcmp
 (*
¨gs
, "-noattr"))

195 
Êags
 |
PKCS7_NOATTR
;

196 i‡(!
	`°rcmp
 (*
¨gs
, "-nodetach"))

197 
Êags
 &~
PKCS7_DETACHED
;

198 i‡(!
	`°rcmp
 (*
¨gs
, "-nosmimecap"))

199 
Êags
 |
PKCS7_NOSMIMECAP
;

200 i‡(!
	`°rcmp
 (*
¨gs
, "-binary"))

201 
Êags
 |
PKCS7_BINARY
;

202 i‡(!
	`°rcmp
 (*
¨gs
, "-nosigs"))

203 
Êags
 |
PKCS7_NOSIGS
;

204 i‡(!
	`°rcmp
 (*
¨gs
, "-stream"))

205 
ödef
 = 1;

206 i‡(!
	`°rcmp
 (*
¨gs
, "-indef"))

207 
ödef
 = 1;

208 i‡(!
	`°rcmp
 (*
¨gs
, "-noindef"))

209 
ödef
 = 0;

210 i‡(!
	`°rcmp
 (*
¨gs
, "-nooldmime"))

211 
Êags
 |
PKCS7_NOOLDMIMETYPE
;

212 i‡(!
	`°rcmp
 (*
¨gs
, "-crlfeol"))

213 
Êags
 |
PKCS7_CRLFEOL
;

214 i‡(!
	`°rcmp
(*
¨gs
,"-rand"))

216 i‡(!
¨gs
[1])

217 
¨gîr
;

218 
¨gs
++;

219 
öønd
 = *
¨gs
;

220 
√ed_ønd
 = 1;

222 #i‚de‡
OPENSSL_NO_ENGINE


223 i‡(!
	`°rcmp
(*
¨gs
,"-engine"))

225 i‡(!
¨gs
[1])

226 
¨gîr
;

227 
ígöe
 = *++
¨gs
;

230 i‡(!
	`°rcmp
(*
¨gs
,"-passin"))

232 i‡(!
¨gs
[1])

233 
¨gîr
;

234 
∑sßrgö
 = *++
¨gs
;

236 i‡(!
	`°rcmp
 (*
¨gs
, "-to"))

238 i‡(!
¨gs
[1])

239 
¨gîr
;

240 
to
 = *++
¨gs
;

242 i‡(!
	`°rcmp
 (*
¨gs
, "-from"))

244 i‡(!
¨gs
[1])

245 
¨gîr
;

246 
‰om
 = *++
¨gs
;

248 i‡(!
	`°rcmp
 (*
¨gs
, "-subject"))

250 i‡(!
¨gs
[1])

251 
¨gîr
;

252 
subje˘
 = *++
¨gs
;

254 i‡(!
	`°rcmp
 (*
¨gs
, "-signer"))

256 i‡(!
¨gs
[1])

257 
¨gîr
;

260 i‡(
sig√rfûe
)

262 i‡(!
sksig√rs
)

263 
sksig√rs
 = 
	`sk_OPENSSL_STRING_√w_nuŒ
();

264 
	`sk_OPENSSL_STRING_push
(
sksig√rs
, 
sig√rfûe
);

265 i‡(!
keyfûe
)

266 
keyfûe
 = 
sig√rfûe
;

267 i‡(!
skkeys
)

268 
skkeys
 = 
	`sk_OPENSSL_STRING_√w_nuŒ
();

269 
	`sk_OPENSSL_STRING_push
(
skkeys
, 
keyfûe
);

270 
keyfûe
 = 
NULL
;

272 
sig√rfûe
 = *++
¨gs
;

274 i‡(!
	`°rcmp
 (*
¨gs
, "-recip"))

276 i‡(!
¨gs
[1])

277 
¨gîr
;

278 
ªcùfûe
 = *++
¨gs
;

280 i‡(!
	`°rcmp
 (*
¨gs
, "-md"))

282 i‡(!
¨gs
[1])

283 
¨gîr
;

284 
sign_md
 = 
	`EVP_gë_dige°by«me
(*++
¨gs
);

285 i‡(
sign_md
 =
NULL
)

287 
	`BIO_¥ötf
(
bio_îr
, "Unknown digest %s\n",

288 *
¨gs
);

289 
¨gîr
;

292 i‡(!
	`°rcmp
 (*
¨gs
, "-inkey"))

294 i‡(!
¨gs
[1])

295 
¨gîr
;

297 i‡(
keyfûe
)

299 i‡(!
sig√rfûe
)

301 
	`BIO_puts
(
bio_îr
, "Illegal -inkey without -signer\n");

302 
¨gîr
;

304 i‡(!
sksig√rs
)

305 
sksig√rs
 = 
	`sk_OPENSSL_STRING_√w_nuŒ
();

306 
	`sk_OPENSSL_STRING_push
(
sksig√rs
, 
sig√rfûe
);

307 
sig√rfûe
 = 
NULL
;

308 i‡(!
skkeys
)

309 
skkeys
 = 
	`sk_OPENSSL_STRING_√w_nuŒ
();

310 
	`sk_OPENSSL_STRING_push
(
skkeys
, 
keyfûe
);

312 
keyfûe
 = *++
¨gs
;

314 i‡(!
	`°rcmp
 (*
¨gs
, "-keyform"))

316 i‡(!
¨gs
[1])

317 
¨gîr
;

318 
keyf‹m
 = 
	`°r2fmt
(*++
¨gs
);

320 i‡(!
	`°rcmp
 (*
¨gs
, "-certfile"))

322 i‡(!
¨gs
[1])

323 
¨gîr
;

324 
˚πfûe
 = *++
¨gs
;

326 i‡(!
	`°rcmp
 (*
¨gs
, "-CAfile"))

328 i‡(!
¨gs
[1])

329 
¨gîr
;

330 
CAfûe
 = *++
¨gs
;

332 i‡(!
	`°rcmp
 (*
¨gs
, "-CApath"))

334 i‡(!
¨gs
[1])

335 
¨gîr
;

336 
CA∑th
 = *++
¨gs
;

338 i‡(!
	`°rcmp
 (*
¨gs
, "-in"))

340 i‡(!
¨gs
[1])

341 
¨gîr
;

342 
öfûe
 = *++
¨gs
;

344 i‡(!
	`°rcmp
 (*
¨gs
, "-inform"))

346 i‡(!
¨gs
[1])

347 
¨gîr
;

348 
öf‹m©
 = 
	`°r2fmt
(*++
¨gs
);

350 i‡(!
	`°rcmp
 (*
¨gs
, "-outform"))

352 i‡(!
¨gs
[1])

353 
¨gîr
;

354 
outf‹m©
 = 
	`°r2fmt
(*++
¨gs
);

356 i‡(!
	`°rcmp
 (*
¨gs
, "-out"))

358 i‡(!
¨gs
[1])

359 
¨gîr
;

360 
outfûe
 = *++
¨gs
;

362 i‡(!
	`°rcmp
 (*
¨gs
, "-content"))

364 i‡(!
¨gs
[1])

365 
¨gîr
;

366 
c⁄tfûe
 = *++
¨gs
;

368 i‡(
	`¨gs_vîify
(&
¨gs
, 
NULL
, &
bad¨g
, 
bio_îr
, &
vpm
))

370 i‡((
cùhî
 = 
	`EVP_gë_cùhîby«me
(*
¨gs
 + 1)Ë=
NULL
)

371 
bad¨g
 = 1;

372 
¨gs
++;

375 i‡(!(
›î©i⁄
 & 
SMIME_SIGNERS
Ë&& (
skkeys
 || 
sksig√rs
))

377 
	`BIO_puts
(
bio_îr
, "Multiple signers or keysÇotállowed\n");

378 
¨gîr
;

381 i‡(
›î©i⁄
 & 
SMIME_SIGNERS
)

384 i‡(
keyfûe
 && !
sig√rfûe
)

386 
	`BIO_puts
(
bio_îr
, "Illegal -inkey without -signer\n");

387 
¨gîr
;

389 i‡(
sig√rfûe
)

391 i‡(!
sksig√rs
)

392 
sksig√rs
 = 
	`sk_OPENSSL_STRING_√w_nuŒ
();

393 
	`sk_OPENSSL_STRING_push
(
sksig√rs
, 
sig√rfûe
);

394 i‡(!
skkeys
)

395 
skkeys
 = 
	`sk_OPENSSL_STRING_√w_nuŒ
();

396 i‡(!
keyfûe
)

397 
keyfûe
 = 
sig√rfûe
;

398 
	`sk_OPENSSL_STRING_push
(
skkeys
, 
keyfûe
);

400 i‡(!
sksig√rs
)

402 
	`BIO_¥ötf
(
bio_îr
, "No signer certificate specified\n");

403 
bad¨g
 = 1;

405 
sig√rfûe
 = 
NULL
;

406 
keyfûe
 = 
NULL
;

407 
√ed_ønd
 = 1;

409 i‡(
›î©i⁄
 =
SMIME_DECRYPT
)

411 i‡(!
ªcùfûe
 && !
keyfûe
)

413 
	`BIO_¥ötf
(
bio_îr
, "NoÑecipient certificate or key specified\n");

414 
bad¨g
 = 1;

417 i‡(
›î©i⁄
 =
SMIME_ENCRYPT
)

419 i‡(!*
¨gs
)

421 
	`BIO_¥ötf
(
bio_îr
, "NoÑecipient(s) certificate(s) specified\n");

422 
bad¨g
 = 1;

424 
√ed_ønd
 = 1;

426 i‡(!
›î©i⁄
)

427 
bad¨g
 = 1;

429 i‡(
bad¨g
)

431 
¨gîr
:

432 
	`BIO_¥ötf
 (
bio_îr
, "Usage smime [options] cert.pem ...\n");

433 
	`BIO_¥ötf
 (
bio_îr
, "where optionsáre\n");

434 
	`BIO_¥ötf
 (
bio_îr
, "-encryptÉncrypt message\n");

435 
	`BIO_¥ötf
 (
bio_îr
, "-decrypt decryptÉncrypted message\n");

436 
	`BIO_¥ötf
 (
bio_îr
, "-sign sign message\n");

437 
	`BIO_¥ötf
 (
bio_îr
, "-verify verify signed message\n");

438 
	`BIO_¥ötf
 (
bio_îr
, "-pk7out output PKCS#7 structure\n");

439 #i‚de‡
OPENSSL_NO_DES


440 
	`BIO_¥ötf
 (
bio_îr
, "-des3Éncrypt withÅriple DES\n");

441 
	`BIO_¥ötf
 (
bio_îr
, "-desÉncrypt with DES\n");

443 #i‚de‡
OPENSSL_NO_SEED


444 
	`BIO_¥ötf
 (
bio_îr
, "-seedÉncrypt with SEED\n");

446 #i‚de‡
OPENSSL_NO_RC2


447 
	`BIO_¥ötf
 (
bio_îr
, "-rc2-40Éncrypt with RC2-40 (default)\n");

448 
	`BIO_¥ötf
 (
bio_îr
, "-rc2-64Éncrypt with RC2-64\n");

449 
	`BIO_¥ötf
 (
bio_îr
, "-rc2-128Éncrypt with RC2-128\n");

451 #i‚de‡
OPENSSL_NO_AES


452 
	`BIO_¥ötf
 (
bio_îr
, "-aes128, -aes192, -aes256\n");

453 
	`BIO_¥ötf
 (
bio_îr
, "Éncrypt PEM output with cbcáes\n");

455 #i‚de‡
OPENSSL_NO_CAMELLIA


456 
	`BIO_¥ötf
 (
bio_îr
, "-camellia128, -camellia192, -camellia256\n");

457 
	`BIO_¥ötf
 (
bio_îr
, "Éncrypt PEM output with cbc camellia\n");

459 
	`BIO_¥ötf
 (
bio_îr
, "-nointern don't search certificates in message for signer\n");

460 
	`BIO_¥ötf
 (
bio_îr
, "-nosigs don't verify message signature\n");

461 
	`BIO_¥ötf
 (
bio_îr
, "-noverify don't verify signers certificate\n");

462 
	`BIO_¥ötf
 (
bio_îr
, "-nocerts don't include signers certificate when signing\n");

463 
	`BIO_¥ötf
 (
bio_îr
, "-nodetach use opaque signing\n");

464 
	`BIO_¥ötf
 (
bio_îr
, "-noattr don't includeány signedáttributes\n");

465 
	`BIO_¥ötf
 (
bio_îr
, "-binary don'tÅranslate messageÅoÅext\n");

466 
	`BIO_¥ötf
 (
bio_îr
, "-certfile file other certificates file\n");

467 
	`BIO_¥ötf
 (
bio_îr
, "-signer file signer certificate file\n");

468 
	`BIO_¥ötf
 (
bio_îr
, "-recip fileÑecipient certificate file for decryption\n");

469 
	`BIO_¥ötf
 (
bio_îr
, "-in file input file\n");

470 
	`BIO_¥ötf
 (
bio_îr
, "-informárg input format SMIME (default), PEM or DER\n");

471 
	`BIO_¥ötf
 (
bio_îr
, "-inkey file inputÖrivate key (ifÇot signer orÑecipient)\n");

472 
	`BIO_¥ötf
 (
bio_îr
, "-keyformárg inputÖrivate key format (PEM or ENGINE)\n");

473 
	`BIO_¥ötf
 (
bio_îr
, "-out file output file\n");

474 
	`BIO_¥ötf
 (
bio_îr
, "-outformárg output format SMIME (default), PEM or DER\n");

475 
	`BIO_¥ötf
 (
bio_îr
, "-content file supply or override content for detached signature\n");

476 
	`BIO_¥ötf
 (
bio_îr
, "-toáddrÅoáddress\n");

477 
	`BIO_¥ötf
 (
bio_îr
, "-fromád fromáddress\n");

478 
	`BIO_¥ötf
 (
bio_îr
, "-subject s subject\n");

479 
	`BIO_¥ötf
 (
bio_îr
, "-text include or deleteÅext MIME headers\n");

480 
	`BIO_¥ötf
 (
bio_îr
, "-CApath dirÅrusted certificates directory\n");

481 
	`BIO_¥ötf
 (
bio_îr
, "-CAfile fileÅrusted certificates file\n");

482 
	`BIO_¥ötf
 (
bio_îr
, "-crl_check checkÑevocation status of signer's certificate using CRLs\n");

483 
	`BIO_¥ötf
 (
bio_îr
, "-crl_check_all checkÑevocation status of signer's certificate chain using CRLs\n");

484 #i‚de‡
OPENSSL_NO_ENGINE


485 
	`BIO_¥ötf
 (
bio_îr
, "-engineÉ useÉngineÉ,Öossiblyá hardware device.\n");

487 
	`BIO_¥ötf
 (
bio_îr
, "-passinárg input fileÖassÖhrase source\n");

488 
	`BIO_¥ötf
(
bio_îr
, "-ønd fûe%cfûe%c...\n", 
LIST_SEPARATOR_CHAR
, LIST_SEPARATOR_CHAR);

489 
	`BIO_¥ötf
(
bio_îr
, "ÜoadÅhe file (orÅhe files inÅhe directory) into\n");

490 
	`BIO_¥ötf
(
bio_îr
, "ÅheÑandomÇumber generator\n");

491 
	`BIO_¥ötf
 (
bio_îr
, "cert.pemÑecipient certificate(s) forÉncryption\n");

492 
íd
;

495 #i‚de‡
OPENSSL_NO_ENGINE


496 
e
 = 
	`£tup_ígöe
(
bio_îr
, 
ígöe
, 0);

499 i‡(!
	`≠p_∑sswd
(
bio_îr
, 
∑sßrgö
, 
NULL
, &
∑ssö
, NULL))

501 
	`BIO_¥ötf
(
bio_îr
, "Error gettingÖassword\n");

502 
íd
;

505 i‡(
√ed_ønd
)

507 
	`≠p_RAND_lﬂd_fûe
(
NULL
, 
bio_îr
, (
öønd
 != NULL));

508 i‡(
öønd
 !
NULL
)

509 
	`BIO_¥ötf
(
bio_îr
,"%ld semi-random bytesÜoaded\n",

510 
	`≠p_RAND_lﬂd_fûes
(
öønd
));

513 
ªt
 = 2;

515 i‡(!(
›î©i⁄
 & 
SMIME_SIGNERS
))

516 
Êags
 &~
PKCS7_DETACHED
;

518 i‡(
›î©i⁄
 & 
SMIME_OP
)

520 i‡(
outf‹m©
 =
FORMAT_ASN1
)

521 
outmode
 = "wb";

525 i‡(
Êags
 & 
PKCS7_BINARY
)

526 
outmode
 = "wb";

529 i‡(
›î©i⁄
 & 
SMIME_IP
)

531 i‡(
öf‹m©
 =
FORMAT_ASN1
)

532 
ömode
 = "rb";

536 i‡(
Êags
 & 
PKCS7_BINARY
)

537 
ömode
 = "rb";

540 i‡(
›î©i⁄
 =
SMIME_ENCRYPT
)

542 i‡(!
cùhî
)

544 #i‚de‡
OPENSSL_NO_RC2


545 
cùhî
 = 
	`EVP_rc2_40_cbc
();

547 
	`BIO_¥ötf
(
bio_îr
, "No cipher selected\n");

548 
íd
;

551 
í˚πs
 = 
	`sk_X509_√w_nuŒ
();

552 *
¨gs
)

554 i‡(!(
˚π
 = 
	`lﬂd_˚π
(
bio_îr
,*
¨gs
,
FORMAT_PEM
,

555 
NULL
, 
e
, "recipient certificate file")))

558 
	`BIO_¥ötf
(
bio_îr
, "C™'àªadÑecùõ¡ cîtifiˇã fûê%s\n", *
¨gs
);

560 
íd
;

562 
	`sk_X509_push
(
í˚πs
, 
˚π
);

563 
˚π
 = 
NULL
;

564 
¨gs
++;

568 i‡(
˚πfûe
)

570 i‡(!(
Ÿhî
 = 
	`lﬂd_˚πs
(
bio_îr
,
˚πfûe
,
FORMAT_PEM
, 
NULL
,

571 
e
, "certificate file")))

573 
	`ERR_¥öt_îr‹s
(
bio_îr
);

574 
íd
;

578 i‡(
ªcùfûe
 && (
›î©i⁄
 =
SMIME_DECRYPT
))

580 i‡(!(
ªcù
 = 
	`lﬂd_˚π
(
bio_îr
,
ªcùfûe
,
FORMAT_PEM
,
NULL
,

581 
e
, "recipient certificate file")))

583 
	`ERR_¥öt_îr‹s
(
bio_îr
);

584 
íd
;

588 i‡(
›î©i⁄
 =
SMIME_DECRYPT
)

590 i‡(!
keyfûe
)

591 
keyfûe
 = 
ªcùfûe
;

593 i‡(
›î©i⁄
 =
SMIME_SIGN
)

595 i‡(!
keyfûe
)

596 
keyfûe
 = 
sig√rfûe
;

598 
keyfûe
 = 
NULL
;

600 i‡(
keyfûe
)

602 
key
 = 
	`lﬂd_key
(
bio_îr
, 
keyfûe
, 
keyf‹m
, 0, 
∑ssö
, 
e
,

604 i‡(!
key
)

605 
íd
;

608 i‡(
öfûe
)

610 i‡(!(
ö
 = 
	`BIO_√w_fûe
(
öfûe
, 
ömode
)))

612 
	`BIO_¥ötf
 (
bio_îr
,

613 "C™'à›í i≈uàfûê%s\n", 
öfûe
);

614 
íd
;

618 
ö
 = 
	`BIO_√w_Â
(
°dö
, 
BIO_NOCLOSE
);

620 i‡(
›î©i⁄
 & 
SMIME_IP
)

622 i‡(
öf‹m©
 =
FORMAT_SMIME
)

623 
p7
 = 
	`SMIME_ªad_PKCS7
(
ö
, &
öd©a
);

624 i‡(
öf‹m©
 =
FORMAT_PEM
)

625 
p7
 = 
	`PEM_ªad_bio_PKCS7
(
ö
, 
NULL
, NULL, NULL);

626 i‡(
öf‹m©
 =
FORMAT_ASN1
)

627 
p7
 = 
	`d2i_PKCS7_bio
(
ö
, 
NULL
);

630 
	`BIO_¥ötf
(
bio_îr
, "Bad input format for PKCS#7 file\n");

631 
íd
;

634 i‡(!
p7
)

636 
	`BIO_¥ötf
(
bio_îr
, "ErrorÑeading S/MIME message\n");

637 
íd
;

639 i‡(
c⁄tfûe
)

641 
	`BIO_‰ì
(
öd©a
);

642 i‡(!(
öd©a
 = 
	`BIO_√w_fûe
(
c⁄tfûe
, "rb")))

644 
	`BIO_¥ötf
(
bio_îr
, "C™'àªad c⁄ã¡ fûê%s\n", 
c⁄tfûe
);

645 
íd
;

650 i‡(
outfûe
)

652 i‡(!(
out
 = 
	`BIO_√w_fûe
(
outfûe
, 
outmode
)))

654 
	`BIO_¥ötf
 (
bio_îr
,

655 "C™'à›í ouçuàfûê%s\n", 
outfûe
);

656 
íd
;

661 
out
 = 
	`BIO_√w_Â
(
°dout
, 
BIO_NOCLOSE
);

662 #ifde‡
OPENSSL_SYS_VMS


664 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

665 
out
 = 
	`BIO_push
(
tmpbio
, out);

670 i‡(
›î©i⁄
 =
SMIME_VERIFY
)

672 i‡(!(
°‹e
 = 
	`£tup_vîify
(
bio_îr
, 
CAfûe
, 
CA∑th
)))

673 
íd
;

674 
	`X509_STORE_£t_vîify_cb
(
°‹e
, 
smime_cb
);

675 i‡(
vpm
)

676 
	`X509_STORE_£t1_∑øm
(
°‹e
, 
vpm
);

680 
ªt
 = 3;

682 i‡(
›î©i⁄
 =
SMIME_ENCRYPT
)

684 i‡(
ödef
)

685 
Êags
 |
PKCS7_STREAM
;

686 
p7
 = 
	`PKCS7_í¸y±
(
í˚πs
, 
ö
, 
cùhî
, 
Êags
);

688 i‡(
›î©i⁄
 & 
SMIME_SIGNERS
)

690 
i
;

694 i‡(
›î©i⁄
 =
SMIME_SIGN
)

696 i‡(
Êags
 & 
PKCS7_DETACHED
)

698 i‡(
outf‹m©
 =
FORMAT_SMIME
)

699 
Êags
 |
PKCS7_STREAM
;

701 i‡(
ödef
)

702 
Êags
 |
PKCS7_STREAM
;

703 
Êags
 |
PKCS7_PARTIAL
;

704 
p7
 = 
	`PKCS7_sign
(
NULL
, NULL, 
Ÿhî
, 
ö
, 
Êags
);

705 i‡(!
p7
)

706 
íd
;

709 
Êags
 |
PKCS7_REUSE_DIGEST
;

710 
i
 = 0; i < 
	`sk_OPENSSL_STRING_num
(
sksig√rs
); i++)

712 
sig√rfûe
 = 
	`sk_OPENSSL_STRING_vÆue
(
sksig√rs
, 
i
);

713 
keyfûe
 = 
	`sk_OPENSSL_STRING_vÆue
(
skkeys
, 
i
);

714 
sig√r
 = 
	`lﬂd_˚π
(
bio_îr
, 
sig√rfûe
,
FORMAT_PEM
, 
NULL
,

715 
e
, "signer certificate");

716 i‡(!
sig√r
)

717 
íd
;

718 
key
 = 
	`lﬂd_key
(
bio_îr
, 
keyfûe
, 
keyf‹m
, 0, 
∑ssö
, 
e
,

720 i‡(!
key
)

721 
íd
;

722 i‡(!
	`PKCS7_sign_add_sig√r
(
p7
, 
sig√r
, 
key
,

723 
sign_md
, 
Êags
))

724 
íd
;

725 
	`X509_‰ì
(
sig√r
);

726 
sig√r
 = 
NULL
;

727 
	`EVP_PKEY_‰ì
(
key
);

728 
key
 = 
NULL
;

731 i‡((
›î©i⁄
 =
SMIME_SIGN
Ë&& !(
Êags
 & 
PKCS7_STREAM
))

733 i‡(!
	`PKCS7_föÆ
(
p7
, 
ö
, 
Êags
))

734 
íd
;

738 i‡(!
p7
)

740 
	`BIO_¥ötf
(
bio_îr
, "Error creating PKCS#7 structure\n");

741 
íd
;

744 
ªt
 = 4;

745 i‡(
›î©i⁄
 =
SMIME_DECRYPT
)

747 i‡(!
	`PKCS7_de¸y±
(
p7
, 
key
, 
ªcù
, 
out
, 
Êags
))

749 
	`BIO_¥ötf
(
bio_îr
, "Error decrypting PKCS#7 structure\n");

750 
íd
;

753 i‡(
›î©i⁄
 =
SMIME_VERIFY
)

755 
	`STACK_OF
(
X509
Ë*
sig√rs
;

756 i‡(
	`PKCS7_vîify
(
p7
, 
Ÿhî
, 
°‹e
, 
öd©a
, 
out
, 
Êags
))

757 
	`BIO_¥ötf
(
bio_îr
, "Verification successful\n");

760 
	`BIO_¥ötf
(
bio_îr
, "Verification failure\n");

761 
íd
;

763 
sig√rs
 = 
	`PKCS7_gë0_sig√rs
(
p7
, 
Ÿhî
, 
Êags
);

764 i‡(!
	`ßve_˚πs
(
sig√rfûe
, 
sig√rs
))

766 
	`BIO_¥ötf
(
bio_îr
, "Error writing signersÅo %s\n",

767 
sig√rfûe
);

768 
ªt
 = 5;

769 
íd
;

771 
	`sk_X509_‰ì
(
sig√rs
);

773 i‡(
›î©i⁄
 =
SMIME_PK7OUT
)

774 
	`PEM_wrôe_bio_PKCS7
(
out
, 
p7
);

777 i‡(
to
)

778 
	`BIO_¥ötf
(
out
, "To: %s\n", 
to
);

779 i‡(
‰om
)

780 
	`BIO_¥ötf
(
out
, "From: %s\n", 
‰om
);

781 i‡(
subje˘
)

782 
	`BIO_¥ötf
(
out
, "Subje˘: %s\n", 
subje˘
);

783 i‡(
outf‹m©
 =
FORMAT_SMIME
)

785 i‡(
›î©i⁄
 =
SMIME_RESIGN
)

786 
	`SMIME_wrôe_PKCS7
(
out
, 
p7
, 
öd©a
, 
Êags
);

788 
	`SMIME_wrôe_PKCS7
(
out
, 
p7
, 
ö
, 
Êags
);

790 i‡(
outf‹m©
 =
FORMAT_PEM
)

791 
	`PEM_wrôe_bio_PKCS7_°ªam
(
out
, 
p7
, 
ö
, 
Êags
);

792 i‡(
outf‹m©
 =
FORMAT_ASN1
)

793 
	`i2d_PKCS7_bio_°ªam
(
out
,
p7
, 
ö
, 
Êags
);

796 
	`BIO_¥ötf
(
bio_îr
, "Bad output format for PKCS#7 file\n");

797 
íd
;

800 
ªt
 = 0;

801 
íd
:

802 i‡(
√ed_ønd
)

803 
	`≠p_RAND_wrôe_fûe
(
NULL
, 
bio_îr
);

804 i‡(
ªt
Ë
	`ERR_¥öt_îr‹s
(
bio_îr
);

805 
	`sk_X509_p›_‰ì
(
í˚πs
, 
X509_‰ì
);

806 
	`sk_X509_p›_‰ì
(
Ÿhî
, 
X509_‰ì
);

807 i‡(
vpm
)

808 
	`X509_VERIFY_PARAM_‰ì
(
vpm
);

809 i‡(
sksig√rs
)

810 
	`sk_OPENSSL_STRING_‰ì
(
sksig√rs
);

811 i‡(
skkeys
)

812 
	`sk_OPENSSL_STRING_‰ì
(
skkeys
);

813 
	`X509_STORE_‰ì
(
°‹e
);

814 
	`X509_‰ì
(
˚π
);

815 
	`X509_‰ì
(
ªcù
);

816 
	`X509_‰ì
(
sig√r
);

817 
	`EVP_PKEY_‰ì
(
key
);

818 
	`PKCS7_‰ì
(
p7
);

819 
	`BIO_‰ì
(
ö
);

820 
	`BIO_‰ì
(
öd©a
);

821 
	`BIO_‰ì_Æl
(
out
);

822 i‡(
∑ssö
Ë
	`OPENSSL_‰ì
(passin);

823  (
ªt
);

824 
	}
}

826 
ßve_˚πs
(*
sig√rfûe
, 
STACK_OF
(
X509
Ë*
sig√rs
)

828 
	gi
;

829 
BIO
 *
	gtmp
;

830 i‡(!
	gsig√rfûe
)

832 
	gtmp
 = 
BIO_√w_fûe
(
sig√rfûe
, "w");

833 i‡(!
	gtmp
)  0;

834 
	gi
 = 0; i < 
sk_X509_num
(
sig√rs
); i++)

835 
PEM_wrôe_bio_X509
(
tmp
, 
sk_X509_vÆue
(
sig√rs
, 
i
));

836 
BIO_‰ì
(
tmp
);

843 
	$smime_cb
(
ok
, 
X509_STORE_CTX
 *
˘x
)

845 
îr‹
;

847 
îr‹
 = 
	`X509_STORE_CTX_gë_îr‹
(
˘x
);

849 i‡((
îr‹
 !
X509_V_ERR_NO_EXPLICIT_POLICY
)

850 && ((
îr‹
 !
X509_V_OK
Ë|| (
ok
 != 2)))

851  
ok
;

853 
	`pﬁicõs_¥öt
(
NULL
, 
˘x
);

855  
ok
;

857 
	}
}

	@speed.c

74 #i‚de‡
OPENSSL_NO_SPEED


76 #unde‡
SECONDS


77 
	#SECONDS
 3

	)

78 
	#RSA_SECONDS
 10

	)

79 
	#DSA_SECONDS
 10

	)

80 
	#ECDSA_SECONDS
 10

	)

81 
	#ECDH_SECONDS
 10

	)

86 #unde‡
PROG


87 
	#PROG
 
•ìd_maö


	)

89 
	~<°dio.h
>

90 
	~<°dlib.h
>

92 
	~<°rög.h
>

93 
	~<m©h.h
>

94 
	~"≠ps.h
"

95 #ifde‡
OPENSSL_NO_STDIO


96 
	#APPS_WIN16


	)

98 
	~<›ís¶/¸y±o.h
>

99 
	~<›ís¶/ønd.h
>

100 
	~<›ís¶/îr.h
>

101 
	~<›ís¶/evp.h
>

102 
	~<›ís¶/obje˘s.h
>

103 #i‡!
deföed
(
OPENSSL_SYS_MSDOS
)

104 #ö˛udê
OPENSSL_UNISTD


107 #i‚de‡
OPENSSL_SYS_NETWARE


108 
	~<sig«l.h
>

111 #i‡
deföed
(
_WIN32
Ë|| deföed(
__CYGWIN__
)

112 
	~<wödows.h
>

113 #i‡
deföed
(
__CYGWIN__
Ë&& !deföed(
_WIN32
)

116 
	#_WIN32


	)

121 
	~<›ís¶/bn.h
>

122 #i‚de‡
OPENSSL_NO_DES


123 
	~<›ís¶/des.h
>

125 #i‚de‡
OPENSSL_NO_AES


126 
	~<›ís¶/´s.h
>

128 #i‚de‡
OPENSSL_NO_CAMELLIA


129 
	~<›ís¶/ˇmñlü.h
>

131 #i‚de‡
OPENSSL_NO_MD2


132 
	~<›ís¶/md2.h
>

134 #i‚de‡
OPENSSL_NO_MDC2


135 
	~<›ís¶/mdc2.h
>

137 #i‚de‡
OPENSSL_NO_MD4


138 
	~<›ís¶/md4.h
>

140 #i‚de‡
OPENSSL_NO_MD5


141 
	~<›ís¶/md5.h
>

143 #i‚de‡
OPENSSL_NO_HMAC


144 
	~<›ís¶/hmac.h
>

146 
	~<›ís¶/evp.h
>

147 #i‚de‡
OPENSSL_NO_SHA


148 
	~<›ís¶/sha.h
>

150 #i‚de‡
OPENSSL_NO_RIPEMD


151 
	~<›ís¶/rùemd.h
>

153 #i‚de‡
OPENSSL_NO_WHIRLPOOL


154 
	~<›ís¶/whæpoﬁ.h
>

156 #i‚de‡
OPENSSL_NO_RC4


157 
	~<›ís¶/rc4.h
>

159 #i‚de‡
OPENSSL_NO_RC5


160 
	~<›ís¶/rc5.h
>

162 #i‚de‡
OPENSSL_NO_RC2


163 
	~<›ís¶/rc2.h
>

165 #i‚de‡
OPENSSL_NO_IDEA


166 
	~<›ís¶/idó.h
>

168 #i‚de‡
OPENSSL_NO_SEED


169 
	~<›ís¶/£ed.h
>

171 #i‚de‡
OPENSSL_NO_BF


172 
	~<›ís¶/blowfish.h
>

174 #i‚de‡
OPENSSL_NO_CAST


175 
	~<›ís¶/ˇ°.h
>

177 #i‚de‡
OPENSSL_NO_RSA


178 
	~<›ís¶/rß.h
>

179 
	~"ã°rß.h
"

181 
	~<›ís¶/x509.h
>

182 #i‚de‡
OPENSSL_NO_DSA


183 
	~<›ís¶/dß.h
>

184 
	~"ã°dß.h
"

186 #i‚de‡
OPENSSL_NO_ECDSA


187 
	~<›ís¶/ecdß.h
>

189 #i‚de‡
OPENSSL_NO_ECDH


190 
	~<›ís¶/ecdh.h
>

192 
	~<›ís¶/modes.h
>

194 #ifde‡
OPENSSL_FIPS


195 #ifde‡
OPENSSL_DOING_MAKEDEPEND


196 #unde‡
AES_£t_í¸y±_key


197 #unde‡
AES_£t_de¸y±_key


198 #unde‡
DES_£t_key_unchecked


200 
	#BF_£t_key
 
¥iv©e_BF_£t_key


	)

201 
	#CAST_£t_key
 
¥iv©e_CAST_£t_key


	)

202 
	#idó_£t_í¸y±_key
 
¥iv©e_idó_£t_í¸y±_key


	)

203 
	#SEED_£t_key
 
¥iv©e_SEED_£t_key


	)

204 
	#RC2_£t_key
 
¥iv©e_RC2_£t_key


	)

205 
	#RC4_£t_key
 
¥iv©e_RC4_£t_key


	)

206 
	#DES_£t_key_unchecked
 
¥iv©e_DES_£t_key_unchecked


	)

207 
	#AES_£t_í¸y±_key
 
¥iv©e_AES_£t_í¸y±_key


	)

208 
	#AES_£t_de¸y±_key
 
¥iv©e_AES_£t_de¸y±_key


	)

209 
	#Camñlü_£t_key
 
¥iv©e_Camñlü_£t_key


	)

212 #i‚de‡
HAVE_FORK


213 #i‡
deföed
(
OPENSSL_SYS_VMS
Ë|| deföed(
OPENSSL_SYS_WINDOWS
Ë|| deföed(
OPENSSL_SYS_MACINTOSH_CLASSIC
Ë|| deföed(
OPENSSL_SYS_OS2
Ë|| deföed(
OPENSSL_SYS_NETWARE
)

214 
	#HAVE_FORK
 0

	)

216 
	#HAVE_FORK
 1

	)

220 #i‡
HAVE_FORK


221 #unde‡
NO_FORK


223 
	#NO_FORK


	)

226 #unde‡
BUFSIZE


227 
	#BUFSIZE
 (()1024*8+1)

	)

228 
	grun
=0;

230 
	gmr
=0;

231 
	gu£πime
=1;

233 
Time_F
(
s
);

234 
¥öt_mesßge
(c⁄° *
s
,
num
,
Àngth
);

235 
pkey_¥öt_mesßge
(c⁄° *
°r
, c⁄° *
°r2
,

236 
num
, 
bôs
, 
£c
);

237 
¥öt_ªsu…
(
Æg
,
run_no
,
cou¡
,
time_u£d
);

238 #i‚de‡
NO_FORK


239 
do_mu…i
(
mu…i
);

242 
	#ALGOR_NUM
 30

	)

243 
	#SIZE_NUM
 5

	)

244 
	#RSA_NUM
 4

	)

245 
	#DSA_NUM
 3

	)

247 
	#EC_NUM
 16

	)

248 
	#MAX_ECDH_SIZE
 256

	)

250 c⁄° *
	g«mes
[
ALGOR_NUM
]={

258 
	gªsu…s
[
ALGOR_NUM
][
SIZE_NUM
];

259 
	gÀngths
[
SIZE_NUM
]={16,64,256,1024,8*1024};

260 #i‚de‡
OPENSSL_NO_RSA


261 
	grß_ªsu…s
[
RSA_NUM
][2];

263 #i‚de‡
OPENSSL_NO_DSA


264 
	gdß_ªsu…s
[
DSA_NUM
][2];

266 #i‚de‡
OPENSSL_NO_ECDSA


267 
	gecdß_ªsu…s
[
EC_NUM
][2];

269 #i‚de‡
OPENSSL_NO_ECDH


270 
	gecdh_ªsu…s
[
EC_NUM
][1];

273 #i‡
deföed
(
OPENSSL_NO_DSA
Ë&& !(deföed(
OPENSSL_NO_ECDSA
Ë&& deföed(
OPENSSL_NO_ECDH
))

274 c⁄° 
	g∫d_£ed
[] = "stringÅo makeÅheÑandomÇumber generatorÅhink it hasÉntropy";

275 
	g∫d_Áke
 = 0;

278 #ifde‡
SIGALRM


279 #i‡
deföed
(
__STDC__
Ë|| deföed(
sgi
Ë|| deföed(
_AIX
)

280 
	#SIGRETTYPE
 

	)

282 
	#SIGRETTYPE
 

	)

285 
SIGRETTYPE
 
sig_d⁄e
(
sig
);

286 
SIGRETTYPE
 
	$sig_d⁄e
(
sig
)

288 
	`sig«l
(
SIGALRM
,
sig_d⁄e
);

289 
run
=0;

290 #ifde‡
LINT


291 
sig
=sig;

293 
	}
}

296 
	#START
 0

	)

297 
	#STOP
 1

	)

299 #i‡
deföed
(
_WIN32
)

301 #i‡!
deföed
(
SIGALRM
)

302 
	#SIGALRM


	)

304 
	gœp£
,
	gschlock
;

305 
	$Æ¨m_wö32
(
£cs
Ë{ 
œp£
 = secs*1000; 
	}
}

306 
	#Æ¨m
 
Æ¨m_wö32


	)

308 
DWORD
 
WINAPI
 
	$¶ìpy
(
VOID
 *
¨g
)

310 
schlock
 = 1;

311 
	`SÀï
(
œp£
);

312 
run
 = 0;

314 
	}
}

316 
	$Time_F
(
s
)

318 i‡(
s
 =
START
)

320 
HANDLE
 
thr
;

321 
schlock
 = 0;

322 
thr
 = 
	`Cª©eThªad
(
NULL
,4096,
¶ìpy
,NULL,0,NULL);

323 i‡(
thr
==
NULL
)

325 
DWORD
 
ªt
=
	`GëLa°Eº‹
();

326 
	`BIO_¥ötf
(
bio_îr
,"u«bÀÅÿCª©eThªad (%d)",
ªt
);

327 
	`ExôPro˚ss
(
ªt
);

329 
	`Clo£H™dÀ
(
thr
);

330 !
schlock
Ë
	`SÀï
(0);

333  
	`≠p_tmöãrvÆ
(
s
,
u£πime
);

334 
	}
}

337 
	$Time_F
(
s
)

339  
	`≠p_tmöãrvÆ
(
s
,
u£πime
);

340 
	}
}

344 #i‚de‡
OPENSSL_NO_ECDH


345 c⁄° 
	gKDF1_SHA1_Àn
 = 20;

346 *
	$KDF1_SHA1
(c⁄° *
ö
, 
size_t
 
öÀn
, *
out
, size_à*
ouéí
)

348 #i‚de‡
OPENSSL_NO_SHA


349 i‡(*
ouéí
 < 
SHA_DIGEST_LENGTH
)

350  
NULL
;

352 *
ouéí
 = 
SHA_DIGEST_LENGTH
;

353  
	`SHA1
(
ö
, 
öÀn
, 
out
);

355  
NULL
;

357 
	}
}

361 
MAIN
(, **);

363 
	$MAIN
(
¨gc
, **
¨gv
)

365 *
buf
=
NULL
,*
buf2
=NULL;

366 
mªt
=1;

367 
cou¡
=0,
ßve_cou¡
=0;

368 
i
,
j
,
k
;

369 #i‡!
	`deföed
(
OPENSSL_NO_RSA
Ë|| !deföed(
OPENSSL_NO_DSA
)

370 
rß_cou¡
;

372 #i‚de‡
OPENSSL_NO_RSA


373 
rß_num
;

375 
md
[
EVP_MAX_MD_SIZE
];

376 #i‚de‡
OPENSSL_NO_MD2


377 
md2
[
MD2_DIGEST_LENGTH
];

379 #i‚de‡
OPENSSL_NO_MDC2


380 
mdc2
[
MDC2_DIGEST_LENGTH
];

382 #i‚de‡
OPENSSL_NO_MD4


383 
md4
[
MD4_DIGEST_LENGTH
];

385 #i‚de‡
OPENSSL_NO_MD5


386 
md5
[
MD5_DIGEST_LENGTH
];

387 
hmac
[
MD5_DIGEST_LENGTH
];

389 #i‚de‡
OPENSSL_NO_SHA


390 
sha
[
SHA_DIGEST_LENGTH
];

391 #i‚de‡
OPENSSL_NO_SHA256


392 
sha256
[
SHA256_DIGEST_LENGTH
];

394 #i‚de‡
OPENSSL_NO_SHA512


395 
sha512
[
SHA512_DIGEST_LENGTH
];

398 #i‚de‡
OPENSSL_NO_WHIRLPOOL


399 
whúÕoﬁ
[
WHIRLPOOL_DIGEST_LENGTH
];

401 #i‚de‡
OPENSSL_NO_RIPEMD


402 
rmd160
[
RIPEMD160_DIGEST_LENGTH
];

404 #i‚de‡
OPENSSL_NO_RC4


405 
RC4_KEY
 
rc4_ks
;

407 #i‚de‡
OPENSSL_NO_RC5


408 
RC5_32_KEY
 
rc5_ks
;

410 #i‚de‡
OPENSSL_NO_RC2


411 
RC2_KEY
 
rc2_ks
;

413 #i‚de‡
OPENSSL_NO_IDEA


414 
IDEA_KEY_SCHEDULE
 
idó_ks
;

416 #i‚de‡
OPENSSL_NO_SEED


417 
SEED_KEY_SCHEDULE
 
£ed_ks
;

419 #i‚de‡
OPENSSL_NO_BF


420 
BF_KEY
 
bf_ks
;

422 #i‚de‡
OPENSSL_NO_CAST


423 
CAST_KEY
 
ˇ°_ks
;

425 c⁄° 
key16
[16]=

428 #i‚de‡
OPENSSL_NO_AES


429 c⁄° 
key24
[24]=

433 c⁄° 
key32
[32]=

439 #i‚de‡
OPENSSL_NO_CAMELLIA


440 c⁄° 
ckey24
[24]=

444 c⁄° 
ckey32
[32]=

450 #i‚de‡
OPENSSL_NO_AES


451 
	#MAX_BLOCK_SIZE
 128

	)

453 
	#MAX_BLOCK_SIZE
 64

	)

455 
DES_iv
[8];

456 
iv
[2*
MAX_BLOCK_SIZE
/8];

457 #i‚de‡
OPENSSL_NO_DES


458 
DES_cblock
 
key
 ={0x12,0x34,0x56,0x78,0x9a,0xbc,0xde,0xf0};

459 
DES_cblock
 
key2
={0x34,0x56,0x78,0x9a,0xbc,0xde,0xf0,0x12};

460 
DES_cblock
 
key3
={0x56,0x78,0x9a,0xbc,0xde,0xf0,0x12,0x34};

461 
DES_key_scheduÀ
 
sch
;

462 
DES_key_scheduÀ
 
sch2
;

463 
DES_key_scheduÀ
 
sch3
;

465 #i‚de‡
OPENSSL_NO_AES


466 
AES_KEY
 
´s_ks1
, 
´s_ks2
, 
´s_ks3
;

468 #i‚de‡
OPENSSL_NO_CAMELLIA


469 
CAMELLIA_KEY
 
ˇmñlü_ks1
, 
ˇmñlü_ks2
, 
ˇmñlü_ks3
;

471 
	#D_MD2
 0

	)

472 
	#D_MDC2
 1

	)

473 
	#D_MD4
 2

	)

474 
	#D_MD5
 3

	)

475 
	#D_HMAC
 4

	)

476 
	#D_SHA1
 5

	)

477 
	#D_RMD160
 6

	)

478 
	#D_RC4
 7

	)

479 
	#D_CBC_DES
 8

	)

480 
	#D_EDE3_DES
 9

	)

481 
	#D_CBC_IDEA
 10

	)

482 
	#D_CBC_SEED
 11

	)

483 
	#D_CBC_RC2
 12

	)

484 
	#D_CBC_RC5
 13

	)

485 
	#D_CBC_BF
 14

	)

486 
	#D_CBC_CAST
 15

	)

487 
	#D_CBC_128_AES
 16

	)

488 
	#D_CBC_192_AES
 17

	)

489 
	#D_CBC_256_AES
 18

	)

490 
	#D_CBC_128_CML
 19

	)

491 
	#D_CBC_192_CML
 20

	)

492 
	#D_CBC_256_CML
 21

	)

493 
	#D_EVP
 22

	)

494 
	#D_SHA256
 23

	)

495 
	#D_SHA512
 24

	)

496 
	#D_WHIRLPOOL
 25

	)

497 
	#D_IGE_128_AES
 26

	)

498 
	#D_IGE_192_AES
 27

	)

499 
	#D_IGE_256_AES
 28

	)

500 
	#D_GHASH
 29

	)

501 
d
=0.0;

502 
c
[
ALGOR_NUM
][
SIZE_NUM
];

503 
	#R_DSA_512
 0

	)

504 
	#R_DSA_1024
 1

	)

505 
	#R_DSA_2048
 2

	)

506 
	#R_RSA_512
 0

	)

507 
	#R_RSA_1024
 1

	)

508 
	#R_RSA_2048
 2

	)

509 
	#R_RSA_4096
 3

	)

511 
	#R_EC_P160
 0

	)

512 
	#R_EC_P192
 1

	)

513 
	#R_EC_P224
 2

	)

514 
	#R_EC_P256
 3

	)

515 
	#R_EC_P384
 4

	)

516 
	#R_EC_P521
 5

	)

517 
	#R_EC_K163
 6

	)

518 
	#R_EC_K233
 7

	)

519 
	#R_EC_K283
 8

	)

520 
	#R_EC_K409
 9

	)

521 
	#R_EC_K571
 10

	)

522 
	#R_EC_B163
 11

	)

523 
	#R_EC_B233
 12

	)

524 
	#R_EC_B283
 13

	)

525 
	#R_EC_B409
 14

	)

526 
	#R_EC_B571
 15

	)

528 #i‚de‡
OPENSSL_NO_RSA


529 
RSA
 *
rß_key
[
RSA_NUM
];

530 
rß_c
[
RSA_NUM
][2];

531 
rß_bôs
[
RSA_NUM
]={512,1024,2048,4096};

532 *
rß_d©a
[
RSA_NUM
]=

533 {
ã°512
,
ã°1024
,
ã°2048
,
ã°4096
};

534 
rß_d©a_Àngth
[
RSA_NUM
]={

535 (
ã°512
),(
ã°1024
),

536 (
ã°2048
),(
ã°4096
)};

538 #i‚de‡
OPENSSL_NO_DSA


539 
DSA
 *
dß_key
[
DSA_NUM
];

540 
dß_c
[
DSA_NUM
][2];

541 
dß_bôs
[
DSA_NUM
]={512,1024,2048};

543 #i‚de‡
OPENSSL_NO_EC


549 
ã°_curves
[
EC_NUM
] =

552 
NID_£˝160r1
,

553 
NID_X9_62_¥ime192v1
,

554 
NID_£˝224r1
,

555 
NID_X9_62_¥ime256v1
,

556 
NID_£˝384r1
,

557 
NID_£˝521r1
,

559 
NID_£˘163k1
,

560 
NID_£˘233k1
,

561 
NID_£˘283k1
,

562 
NID_£˘409k1
,

563 
NID_£˘571k1
,

564 
NID_£˘163r2
,

565 
NID_£˘233r1
,

566 
NID_£˘283r1
,

567 
NID_£˘409r1
,

568 
NID_£˘571r1


570 c⁄° * 
ã°_curves_«mes
[
EC_NUM
] =

591 
ã°_curves_bôs
[
EC_NUM
] =

600 #i‚de‡
OPENSSL_NO_ECDSA


601 
ecdßsig
[256];

602 
ecdßsigÀn
;

603 
EC_KEY
 *
ecdß
[
EC_NUM
];

604 
ecdß_c
[
EC_NUM
][2];

607 #i‚de‡
OPENSSL_NO_ECDH


608 
EC_KEY
 *
ecdh_a
[
EC_NUM
], *
ecdh_b
[EC_NUM];

609 
£¸ë_a
[
MAX_ECDH_SIZE
], 
£¸ë_b
[MAX_ECDH_SIZE];

610 
£¸ë_size_a
, 
£¸ë_size_b
;

611 
ecdh_checks
 = 0;

612 
£¸ë_idx
 = 0;

613 
ecdh_c
[
EC_NUM
][2];

616 
rß_doô
[
RSA_NUM
];

617 
dß_doô
[
DSA_NUM
];

618 #i‚de‡
OPENSSL_NO_ECDSA


619 
ecdß_doô
[
EC_NUM
];

621 #i‚de‡
OPENSSL_NO_ECDH


622 
ecdh_doô
[
EC_NUM
];

624 
doô
[
ALGOR_NUM
];

625 
¥_hódî
=0;

626 c⁄° 
EVP_CIPHER
 *
evp_cùhî
=
NULL
;

627 c⁄° 
EVP_MD
 *
evp_md
=
NULL
;

628 
de¸y±
=0;

629 #i‚de‡
NO_FORK


630 
mu…i
=0;

633 #i‚de‡
TIMES


634 
u£πime
=-1;

637 
	`≠ps_°¨tup
();

638 
	`mem£t
(
ªsu…s
, 0, (results));

639 #i‚de‡
OPENSSL_NO_DSA


640 
	`mem£t
(
dß_key
,0,(dsa_key));

642 #i‚de‡
OPENSSL_NO_ECDSA


643 
i
=0; i<
EC_NUM
; i++Ë
ecdß
[i] = 
NULL
;

645 #i‚de‡
OPENSSL_NO_ECDH


646 
i
=0; i<
EC_NUM
; i++)

648 
ecdh_a
[
i
] = 
NULL
;

649 
ecdh_b
[
i
] = 
NULL
;

654 i‡(
bio_îr
 =
NULL
)

655 i‡((
bio_îr
=
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

656 
	`BIO_£t_Â
(
bio_îr
,
°dîr
,
BIO_NOCLOSE
|
BIO_FP_TEXT
);

658 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

659 
íd
;

661 #i‚de‡
OPENSSL_NO_RSA


662 
	`mem£t
(
rß_key
,0,(rsa_key));

663 
i
=0; i<
RSA_NUM
; i++)

664 
rß_key
[
i
]=
NULL
;

667 i‡((
buf
=(*)
	`OPENSSL_mÆloc
(()
BUFSIZE
)Ë=
NULL
)

669 
	`BIO_¥ötf
(
bio_îr
,"out of memory\n");

670 
íd
;

672 i‡((
buf2
=(*)
	`OPENSSL_mÆloc
(()
BUFSIZE
)Ë=
NULL
)

674 
	`BIO_¥ötf
(
bio_îr
,"out of memory\n");

675 
íd
;

678 
	`mem£t
(
c
,0,(c));

679 
	`mem£t
(
DES_iv
,0,(DES_iv));

680 
	`mem£t
(
iv
,0,(iv));

682 
i
=0; i<
ALGOR_NUM
; i++)

683 
doô
[
i
]=0;

684 
i
=0; i<
RSA_NUM
; i++)

685 
rß_doô
[
i
]=0;

686 
i
=0; i<
DSA_NUM
; i++)

687 
dß_doô
[
i
]=0;

688 #i‚de‡
OPENSSL_NO_ECDSA


689 
i
=0; i<
EC_NUM
; i++)

690 
ecdß_doô
[
i
]=0;

692 #i‚de‡
OPENSSL_NO_ECDH


693 
i
=0; i<
EC_NUM
; i++)

694 
ecdh_doô
[
i
]=0;

698 
j
=0;

699 
¨gc
--;

700 
¨gv
++;

701 
¨gc
)

703 i‡((
¨gc
 > 0Ë&& (
	`°rcmp
(*
¨gv
,"-elapsed") == 0))

705 
u£πime
 = 0;

706 
j
--;

709 i‡((
¨gc
 > 0Ë&& (
	`°rcmp
(*
¨gv
,"-evp") == 0))

711 
¨gc
--;

712 
¨gv
++;

713 if(
¨gc
 == 0)

715 
	`BIO_¥ötf
(
bio_îr
,"no EVP given\n");

716 
íd
;

718 
evp_cùhî
=
	`EVP_gë_cùhîby«me
(*
¨gv
);

719 if(!
evp_cùhî
)

721 
evp_md
=
	`EVP_gë_dige°by«me
(*
¨gv
);

723 if(!
evp_cùhî
 && !
evp_md
)

725 
	`BIO_¥ötf
(
bio_îr
,"%†i†™ unknow¿cùhî o∏dige°\n",*
¨gv
);

726 
íd
;

728 
doô
[
D_EVP
]=1;

730 i‡(
¨gc
 > 0 && !
	`°rcmp
(*
¨gv
,"-decrypt"))

732 
de¸y±
=1;

733 
j
--;

736 #i‚de‡
OPENSSL_NO_ENGINE


737 i‡((
¨gc
 > 0Ë&& (
	`°rcmp
(*
¨gv
,"-engine") == 0))

739 
¨gc
--;

740 
¨gv
++;

741 if(
¨gc
 == 0)

743 
	`BIO_¥ötf
(
bio_îr
,"noÉngine given\n");

744 
íd
;

746 
	`£tup_ígöe
(
bio_îr
, *
¨gv
, 0);

751 
j
--;

754 #i‚de‡
NO_FORK


755 i‡((
¨gc
 > 0Ë&& (
	`°rcmp
(*
¨gv
,"-multi") == 0))

757 
¨gc
--;

758 
¨gv
++;

759 if(
¨gc
 == 0)

761 
	`BIO_¥ötf
(
bio_îr
,"no multi count given\n");

762 
íd
;

764 
mu…i
=
	`©oi
(
¨gv
[0]);

765 if(
mu…i
 <= 0)

767 
	`BIO_¥ötf
(
bio_îr
,"bad multi count\n");

768 
íd
;

770 
j
--;

774 i‡(
¨gc
 > 0 && !
	`°rcmp
(*
¨gv
,"-mr"))

776 
mr
=1;

777 
j
--;

781 #i‚de‡
OPENSSL_NO_MD2


782 i‡(
	`°rcmp
(*
¨gv
,"md2"Ë=0Ë
doô
[
D_MD2
]=1;

785 #i‚de‡
OPENSSL_NO_MDC2


786 i‡(
	`°rcmp
(*
¨gv
,"mdc2"Ë=0Ë
doô
[
D_MDC2
]=1;

789 #i‚de‡
OPENSSL_NO_MD4


790 i‡(
	`°rcmp
(*
¨gv
,"md4"Ë=0Ë
doô
[
D_MD4
]=1;

793 #i‚de‡
OPENSSL_NO_MD5


794 i‡(
	`°rcmp
(*
¨gv
,"md5"Ë=0Ë
doô
[
D_MD5
]=1;

797 #i‚de‡
OPENSSL_NO_MD5


798 i‡(
	`°rcmp
(*
¨gv
,"hmac"Ë=0Ë
doô
[
D_HMAC
]=1;

801 #i‚de‡
OPENSSL_NO_SHA


802 i‡(
	`°rcmp
(*
¨gv
,"sha1"Ë=0Ë
doô
[
D_SHA1
]=1;

804 i‡(
	`°rcmp
(*
¨gv
,"sha"Ë=0Ë
doô
[
D_SHA1
]=1,

805 
doô
[
D_SHA256
]=1,

806 
doô
[
D_SHA512
]=1;

808 #i‚de‡
OPENSSL_NO_SHA256


809 i‡(
	`°rcmp
(*
¨gv
,"sha256"Ë=0Ë
doô
[
D_SHA256
]=1;

812 #i‚de‡
OPENSSL_NO_SHA512


813 i‡(
	`°rcmp
(*
¨gv
,"sha512"Ë=0Ë
doô
[
D_SHA512
]=1;

817 #i‚de‡
OPENSSL_NO_WHIRLPOOL


818 i‡(
	`°rcmp
(*
¨gv
,"whúÕoﬁ"Ë=0Ë
doô
[
D_WHIRLPOOL
]=1;

821 #i‚de‡
OPENSSL_NO_RIPEMD


822 i‡(
	`°rcmp
(*
¨gv
,"rùemd"Ë=0Ë
doô
[
D_RMD160
]=1;

824 i‡(
	`°rcmp
(*
¨gv
,"rmd160"Ë=0Ë
doô
[
D_RMD160
]=1;

826 i‡(
	`°rcmp
(*
¨gv
,"rùemd160"Ë=0Ë
doô
[
D_RMD160
]=1;

829 #i‚de‡
OPENSSL_NO_RC4


830 i‡(
	`°rcmp
(*
¨gv
,"rc4"Ë=0Ë
doô
[
D_RC4
]=1;

833 #i‚de‡
OPENSSL_NO_DES


834 i‡(
	`°rcmp
(*
¨gv
,"des-cbc"Ë=0Ë
doô
[
D_CBC_DES
]=1;

835 i‡(
	`°rcmp
(*
¨gv
,"des-ede3"Ë=0Ë
doô
[
D_EDE3_DES
]=1;

838 #i‚de‡
OPENSSL_NO_AES


839 i‡(
	`°rcmp
(*
¨gv
,"´s-128-cbc"Ë=0Ë
doô
[
D_CBC_128_AES
]=1;

840 i‡(
	`°rcmp
(*
¨gv
,"´s-192-cbc"Ë=0Ë
doô
[
D_CBC_192_AES
]=1;

841 i‡(
	`°rcmp
(*
¨gv
,"´s-256-cbc"Ë=0Ë
doô
[
D_CBC_256_AES
]=1;

842 i‡(
	`°rcmp
(*
¨gv
,"´s-128-ige"Ë=0Ë
doô
[
D_IGE_128_AES
]=1;

843 i‡(
	`°rcmp
(*
¨gv
,"´s-192-ige"Ë=0Ë
doô
[
D_IGE_192_AES
]=1;

844 i‡(
	`°rcmp
(*
¨gv
,"´s-256-ige"Ë=0Ë
doô
[
D_IGE_256_AES
]=1;

847 #i‚de‡
OPENSSL_NO_CAMELLIA


848 i‡(
	`°rcmp
(*
¨gv
,"ˇmñlü-128-cbc"Ë=0Ë
doô
[
D_CBC_128_CML
]=1;

849 i‡(
	`°rcmp
(*
¨gv
,"ˇmñlü-192-cbc"Ë=0Ë
doô
[
D_CBC_192_CML
]=1;

850 i‡(
	`°rcmp
(*
¨gv
,"ˇmñlü-256-cbc"Ë=0Ë
doô
[
D_CBC_256_CML
]=1;

853 #i‚de‡
OPENSSL_NO_RSA


855 i‡(
	`°rcmp
(*
¨gv
,"rsaref") == 0)

857 
	`RSA_£t_deÁu…_›ís¶_mëhod
(
	`RSA_PKCS1_RSAªf
());

858 
j
--;

862 #i‚de‡
RSA_NULL


863 i‡(
	`°rcmp
(*
¨gv
,"openssl") == 0)

865 
	`RSA_£t_deÁu…_mëhod
(
	`RSA_PKCS1_SSLóy
());

866 
j
--;

871 i‡(
	`°rcmp
(*
¨gv
,"dß512"Ë=0Ë
dß_doô
[
R_DSA_512
]=2;

872 i‡(
	`°rcmp
(*
¨gv
,"dß1024"Ë=0Ë
dß_doô
[
R_DSA_1024
]=2;

873 i‡(
	`°rcmp
(*
¨gv
,"dß2048"Ë=0Ë
dß_doô
[
R_DSA_2048
]=2;

874 i‡(
	`°rcmp
(*
¨gv
,"rß512"Ë=0Ë
rß_doô
[
R_RSA_512
]=2;

875 i‡(
	`°rcmp
(*
¨gv
,"rß1024"Ë=0Ë
rß_doô
[
R_RSA_1024
]=2;

876 i‡(
	`°rcmp
(*
¨gv
,"rß2048"Ë=0Ë
rß_doô
[
R_RSA_2048
]=2;

877 i‡(
	`°rcmp
(*
¨gv
,"rß4096"Ë=0Ë
rß_doô
[
R_RSA_4096
]=2;

879 #i‚de‡
OPENSSL_NO_RC2


880 i‡(
	`°rcmp
(*
¨gv
,"rc2-cbc"Ë=0Ë
doô
[
D_CBC_RC2
]=1;

881 i‡(
	`°rcmp
(*
¨gv
,"rc2"Ë=0Ë
doô
[
D_CBC_RC2
]=1;

884 #i‚de‡
OPENSSL_NO_RC5


885 i‡(
	`°rcmp
(*
¨gv
,"rc5-cbc"Ë=0Ë
doô
[
D_CBC_RC5
]=1;

886 i‡(
	`°rcmp
(*
¨gv
,"rc5"Ë=0Ë
doô
[
D_CBC_RC5
]=1;

889 #i‚de‡
OPENSSL_NO_IDEA


890 i‡(
	`°rcmp
(*
¨gv
,"idó-cbc"Ë=0Ë
doô
[
D_CBC_IDEA
]=1;

891 i‡(
	`°rcmp
(*
¨gv
,"idó"Ë=0Ë
doô
[
D_CBC_IDEA
]=1;

894 #i‚de‡
OPENSSL_NO_SEED


895 i‡(
	`°rcmp
(*
¨gv
,"£ed-cbc"Ë=0Ë
doô
[
D_CBC_SEED
]=1;

896 i‡(
	`°rcmp
(*
¨gv
,"£ed"Ë=0Ë
doô
[
D_CBC_SEED
]=1;

899 #i‚de‡
OPENSSL_NO_BF


900 i‡(
	`°rcmp
(*
¨gv
,"bf-cbc"Ë=0Ë
doô
[
D_CBC_BF
]=1;

901 i‡(
	`°rcmp
(*
¨gv
,"blowfish"Ë=0Ë
doô
[
D_CBC_BF
]=1;

902 i‡(
	`°rcmp
(*
¨gv
,"bf"Ë=0Ë
doô
[
D_CBC_BF
]=1;

905 #i‚de‡
OPENSSL_NO_CAST


906 i‡(
	`°rcmp
(*
¨gv
,"ˇ°-cbc"Ë=0Ë
doô
[
D_CBC_CAST
]=1;

907 i‡(
	`°rcmp
(*
¨gv
,"ˇ°"Ë=0Ë
doô
[
D_CBC_CAST
]=1;

908 i‡(
	`°rcmp
(*
¨gv
,"ˇ°5"Ë=0Ë
doô
[
D_CBC_CAST
]=1;

911 #i‚de‡
OPENSSL_NO_DES


912 i‡(
	`°rcmp
(*
¨gv
,"des") == 0)

914 
doô
[
D_CBC_DES
]=1;

915 
doô
[
D_EDE3_DES
]=1;

919 #i‚de‡
OPENSSL_NO_AES


920 i‡(
	`°rcmp
(*
¨gv
,"aes") == 0)

922 
doô
[
D_CBC_128_AES
]=1;

923 
doô
[
D_CBC_192_AES
]=1;

924 
doô
[
D_CBC_256_AES
]=1;

926 i‡(
	`°rcmp
(*
¨gv
,"ghash") == 0)

928 
doô
[
D_GHASH
]=1;

932 #i‚de‡
OPENSSL_NO_CAMELLIA


933 i‡(
	`°rcmp
(*
¨gv
,"camellia") == 0)

935 
doô
[
D_CBC_128_CML
]=1;

936 
doô
[
D_CBC_192_CML
]=1;

937 
doô
[
D_CBC_256_CML
]=1;

941 #i‚de‡
OPENSSL_NO_RSA


942 i‡(
	`°rcmp
(*
¨gv
,"rsa") == 0)

944 
rß_doô
[
R_RSA_512
]=1;

945 
rß_doô
[
R_RSA_1024
]=1;

946 
rß_doô
[
R_RSA_2048
]=1;

947 
rß_doô
[
R_RSA_4096
]=1;

951 #i‚de‡
OPENSSL_NO_DSA


952 i‡(
	`°rcmp
(*
¨gv
,"dsa") == 0)

954 
dß_doô
[
R_DSA_512
]=1;

955 
dß_doô
[
R_DSA_1024
]=1;

956 
dß_doô
[
R_DSA_2048
]=1;

960 #i‚de‡
OPENSSL_NO_ECDSA


961 i‡(
	`°rcmp
(*
¨gv
,"ecdßp160"Ë=0Ë
ecdß_doô
[
R_EC_P160
]=2;

962 i‡(
	`°rcmp
(*
¨gv
,"ecdßp192"Ë=0Ë
ecdß_doô
[
R_EC_P192
]=2;

963 i‡(
	`°rcmp
(*
¨gv
,"ecdßp224"Ë=0Ë
ecdß_doô
[
R_EC_P224
]=2;

964 i‡(
	`°rcmp
(*
¨gv
,"ecdßp256"Ë=0Ë
ecdß_doô
[
R_EC_P256
]=2;

965 i‡(
	`°rcmp
(*
¨gv
,"ecdßp384"Ë=0Ë
ecdß_doô
[
R_EC_P384
]=2;

966 i‡(
	`°rcmp
(*
¨gv
,"ecdßp521"Ë=0Ë
ecdß_doô
[
R_EC_P521
]=2;

967 i‡(
	`°rcmp
(*
¨gv
,"ecdßk163"Ë=0Ë
ecdß_doô
[
R_EC_K163
]=2;

968 i‡(
	`°rcmp
(*
¨gv
,"ecdßk233"Ë=0Ë
ecdß_doô
[
R_EC_K233
]=2;

969 i‡(
	`°rcmp
(*
¨gv
,"ecdßk283"Ë=0Ë
ecdß_doô
[
R_EC_K283
]=2;

970 i‡(
	`°rcmp
(*
¨gv
,"ecdßk409"Ë=0Ë
ecdß_doô
[
R_EC_K409
]=2;

971 i‡(
	`°rcmp
(*
¨gv
,"ecdßk571"Ë=0Ë
ecdß_doô
[
R_EC_K571
]=2;

972 i‡(
	`°rcmp
(*
¨gv
,"ecdßb163"Ë=0Ë
ecdß_doô
[
R_EC_B163
]=2;

973 i‡(
	`°rcmp
(*
¨gv
,"ecdßb233"Ë=0Ë
ecdß_doô
[
R_EC_B233
]=2;

974 i‡(
	`°rcmp
(*
¨gv
,"ecdßb283"Ë=0Ë
ecdß_doô
[
R_EC_B283
]=2;

975 i‡(
	`°rcmp
(*
¨gv
,"ecdßb409"Ë=0Ë
ecdß_doô
[
R_EC_B409
]=2;

976 i‡(
	`°rcmp
(*
¨gv
,"ecdßb571"Ë=0Ë
ecdß_doô
[
R_EC_B571
]=2;

977 i‡(
	`°rcmp
(*
¨gv
,"ecdsa") == 0)

979 
i
=0; i < 
EC_NUM
; i++)

980 
ecdß_doô
[
i
]=1;

984 #i‚de‡
OPENSSL_NO_ECDH


985 i‡(
	`°rcmp
(*
¨gv
,"ecdhp160"Ë=0Ë
ecdh_doô
[
R_EC_P160
]=2;

986 i‡(
	`°rcmp
(*
¨gv
,"ecdhp192"Ë=0Ë
ecdh_doô
[
R_EC_P192
]=2;

987 i‡(
	`°rcmp
(*
¨gv
,"ecdhp224"Ë=0Ë
ecdh_doô
[
R_EC_P224
]=2;

988 i‡(
	`°rcmp
(*
¨gv
,"ecdhp256"Ë=0Ë
ecdh_doô
[
R_EC_P256
]=2;

989 i‡(
	`°rcmp
(*
¨gv
,"ecdhp384"Ë=0Ë
ecdh_doô
[
R_EC_P384
]=2;

990 i‡(
	`°rcmp
(*
¨gv
,"ecdhp521"Ë=0Ë
ecdh_doô
[
R_EC_P521
]=2;

991 i‡(
	`°rcmp
(*
¨gv
,"ecdhk163"Ë=0Ë
ecdh_doô
[
R_EC_K163
]=2;

992 i‡(
	`°rcmp
(*
¨gv
,"ecdhk233"Ë=0Ë
ecdh_doô
[
R_EC_K233
]=2;

993 i‡(
	`°rcmp
(*
¨gv
,"ecdhk283"Ë=0Ë
ecdh_doô
[
R_EC_K283
]=2;

994 i‡(
	`°rcmp
(*
¨gv
,"ecdhk409"Ë=0Ë
ecdh_doô
[
R_EC_K409
]=2;

995 i‡(
	`°rcmp
(*
¨gv
,"ecdhk571"Ë=0Ë
ecdh_doô
[
R_EC_K571
]=2;

996 i‡(
	`°rcmp
(*
¨gv
,"ecdhb163"Ë=0Ë
ecdh_doô
[
R_EC_B163
]=2;

997 i‡(
	`°rcmp
(*
¨gv
,"ecdhb233"Ë=0Ë
ecdh_doô
[
R_EC_B233
]=2;

998 i‡(
	`°rcmp
(*
¨gv
,"ecdhb283"Ë=0Ë
ecdh_doô
[
R_EC_B283
]=2;

999 i‡(
	`°rcmp
(*
¨gv
,"ecdhb409"Ë=0Ë
ecdh_doô
[
R_EC_B409
]=2;

1000 i‡(
	`°rcmp
(*
¨gv
,"ecdhb571"Ë=0Ë
ecdh_doô
[
R_EC_B571
]=2;

1001 i‡(
	`°rcmp
(*
¨gv
,"ecdh") == 0)

1003 
i
=0; i < 
EC_NUM
; i++)

1004 
ecdh_doô
[
i
]=1;

1009 
	`BIO_¥ötf
(
bio_îr
,"Error: bad option or value\n");

1010 
	`BIO_¥ötf
(
bio_îr
,"\n");

1011 
	`BIO_¥ötf
(
bio_îr
,"Available values:\n");

1012 #i‚de‡
OPENSSL_NO_MD2


1013 
	`BIO_¥ötf
(
bio_îr
,"md2 ");

1015 #i‚de‡
OPENSSL_NO_MDC2


1016 
	`BIO_¥ötf
(
bio_îr
,"mdc2 ");

1018 #i‚de‡
OPENSSL_NO_MD4


1019 
	`BIO_¥ötf
(
bio_îr
,"md4 ");

1021 #i‚de‡
OPENSSL_NO_MD5


1022 
	`BIO_¥ötf
(
bio_îr
,"md5 ");

1023 #i‚de‡
OPENSSL_NO_HMAC


1024 
	`BIO_¥ötf
(
bio_îr
,"hmac ");

1027 #i‚de‡
OPENSSL_NO_SHA1


1028 
	`BIO_¥ötf
(
bio_îr
,"sha1 ");

1030 #i‚de‡
OPENSSL_NO_SHA256


1031 
	`BIO_¥ötf
(
bio_îr
,"sha256 ");

1033 #i‚de‡
OPENSSL_NO_SHA512


1034 
	`BIO_¥ötf
(
bio_îr
,"sha512 ");

1036 #i‚de‡
OPENSSL_NO_WHIRLPOOL


1037 
	`BIO_¥ötf
(
bio_îr
,"whirlpool");

1039 #i‚de‡
OPENSSL_NO_RIPEMD160


1040 
	`BIO_¥ötf
(
bio_îr
,"rmd160");

1042 #i‡!
	`deföed
(
OPENSSL_NO_MD2
Ë|| !deföed(
OPENSSL_NO_MDC2
) || \

1043 !
	`deföed
(
OPENSSL_NO_MD4
Ë|| !deföed(
OPENSSL_NO_MD5
) || \

1044 !
	`deföed
(
OPENSSL_NO_SHA1
Ë|| !deföed(
OPENSSL_NO_RIPEMD160
) || \

1045 !
	`deföed
(
OPENSSL_NO_WHIRLPOOL
)

1046 
	`BIO_¥ötf
(
bio_îr
,"\n");

1049 #i‚de‡
OPENSSL_NO_IDEA


1050 
	`BIO_¥ötf
(
bio_îr
,"idea-cbc ");

1052 #i‚de‡
OPENSSL_NO_SEED


1053 
	`BIO_¥ötf
(
bio_îr
,"seed-cbc ");

1055 #i‚de‡
OPENSSL_NO_RC2


1056 
	`BIO_¥ötf
(
bio_îr
,"rc2-cbc ");

1058 #i‚de‡
OPENSSL_NO_RC5


1059 
	`BIO_¥ötf
(
bio_îr
,"rc5-cbc ");

1061 #i‚de‡
OPENSSL_NO_BF


1062 
	`BIO_¥ötf
(
bio_îr
,"bf-cbc");

1064 #i‡!
	`deföed
(
OPENSSL_NO_IDEA
Ë|| !deföed(
OPENSSL_NO_SEED
Ë|| !deföed(
OPENSSL_NO_RC2
) || \

1065 !
	`deföed
(
OPENSSL_NO_BF
Ë|| !deföed(
OPENSSL_NO_RC5
)

1066 
	`BIO_¥ötf
(
bio_îr
,"\n");

1068 #i‚de‡
OPENSSL_NO_DES


1069 
	`BIO_¥ötf
(
bio_îr
,"des-cbc des-ede3 ");

1071 #i‚de‡
OPENSSL_NO_AES


1072 
	`BIO_¥ötf
(
bio_îr
,"aes-128-cbcáes-192-cbcáes-256-cbc ");

1073 
	`BIO_¥ötf
(
bio_îr
,"aes-128-igeáes-192-igeáes-256-ige ");

1075 #i‚de‡
OPENSSL_NO_CAMELLIA


1076 
	`BIO_¥ötf
(
bio_îr
,"\n");

1077 
	`BIO_¥ötf
(
bio_îr
,"camellia-128-cbc camellia-192-cbc camellia-256-cbc ");

1079 #i‚de‡
OPENSSL_NO_RC4


1080 
	`BIO_¥ötf
(
bio_îr
,"rc4");

1082 
	`BIO_¥ötf
(
bio_îr
,"\n");

1084 #i‚de‡
OPENSSL_NO_RSA


1085 
	`BIO_¥ötf
(
bio_îr
,"rsa512Ñsa1024Ñsa2048Ñsa4096\n");

1088 #i‚de‡
OPENSSL_NO_DSA


1089 
	`BIO_¥ötf
(
bio_îr
,"dsa512 dsa1024 dsa2048\n");

1091 #i‚de‡
OPENSSL_NO_ECDSA


1092 
	`BIO_¥ötf
(
bio_îr
,"ecdsap160Écdsap192Écdsap224Écdsap256Écdsap384Écdsap521\n");

1093 
	`BIO_¥ötf
(
bio_îr
,"ecdsak163Écdsak233Écdsak283Écdsak409Écdsak571\n");

1094 
	`BIO_¥ötf
(
bio_îr
,"ecdsab163Écdsab233Écdsab283Écdsab409Écdsab571\n");

1095 
	`BIO_¥ötf
(
bio_îr
,"ecdsa\n");

1097 #i‚de‡
OPENSSL_NO_ECDH


1098 
	`BIO_¥ötf
(
bio_îr
,"ecdhp160Écdhp192Écdhp224Écdhp256Écdhp384Écdhp521\n");

1099 
	`BIO_¥ötf
(
bio_îr
,"ecdhk163Écdhk233Écdhk283Écdhk409Écdhk571\n");

1100 
	`BIO_¥ötf
(
bio_îr
,"ecdhb163Écdhb233Écdhb283Écdhb409Écdhb571\n");

1101 
	`BIO_¥ötf
(
bio_îr
,"ecdh\n");

1104 #i‚de‡
OPENSSL_NO_IDEA


1105 
	`BIO_¥ötf
(
bio_îr
,"idea ");

1107 #i‚de‡
OPENSSL_NO_SEED


1108 
	`BIO_¥ötf
(
bio_îr
,"seed ");

1110 #i‚de‡
OPENSSL_NO_RC2


1111 
	`BIO_¥ötf
(
bio_îr
,"rc2 ");

1113 #i‚de‡
OPENSSL_NO_DES


1114 
	`BIO_¥ötf
(
bio_îr
,"des ");

1116 #i‚de‡
OPENSSL_NO_AES


1117 
	`BIO_¥ötf
(
bio_îr
,"aes ");

1119 #i‚de‡
OPENSSL_NO_CAMELLIA


1120 
	`BIO_¥ötf
(
bio_îr
,"camellia ");

1122 #i‚de‡
OPENSSL_NO_RSA


1123 
	`BIO_¥ötf
(
bio_îr
,"rsa ");

1125 #i‚de‡
OPENSSL_NO_BF


1126 
	`BIO_¥ötf
(
bio_îr
,"blowfish");

1128 #i‡!
	`deföed
(
OPENSSL_NO_IDEA
Ë|| !deföed(
OPENSSL_NO_SEED
) || \

1129 !
	`deföed
(
OPENSSL_NO_RC2
Ë|| !deföed(
OPENSSL_NO_DES
) || \

1130 !
	`deföed
(
OPENSSL_NO_RSA
Ë|| !deföed(
OPENSSL_NO_BF
) || \

1131 !
	`deföed
(
OPENSSL_NO_AES
Ë|| !deföed(
OPENSSL_NO_CAMELLIA
)

1132 
	`BIO_¥ötf
(
bio_îr
,"\n");

1135 
	`BIO_¥ötf
(
bio_îr
,"\n");

1136 
	`BIO_¥ötf
(
bio_îr
,"Available options:\n");

1137 #i‡
	`deföed
(
TIMES
Ë|| deföed(
USE_TOD
)

1138 
	`BIO_¥ötf
(
bio_îr
,"-elapsed measureÅime inÑealÅime instead of CPU userÅime.\n");

1140 #i‚de‡
OPENSSL_NO_ENGINE


1141 
	`BIO_¥ötf
(
bio_îr
,"-engineÉ useÉngineÉ,Öossiblyá hardware device.\n");

1143 
	`BIO_¥ötf
(
bio_îr
,"-evpÉ use EVPÉ.\n");

1144 
	`BIO_¥ötf
(
bio_îr
,"-decryptÅime decryption instead ofÉncryption (only EVP).\n");

1145 
	`BIO_¥ötf
(
bio_îr
,"-mrÖroduce machineÑeadable output.\n");

1146 #i‚de‡
NO_FORK


1147 
	`BIO_¥ötf
(
bio_îr
,"-multiÇÑunÇ benchmarks inÖarallel.\n");

1149 
íd
;

1151 
¨gc
--;

1152 
¨gv
++;

1153 
j
++;

1156 #i‚de‡
NO_FORK


1157 if(
mu…i
 && 
	`do_mu…i
(multi))

1158 
show_ªs
;

1161 i‡(
j
 == 0)

1163 
i
=0; i<
ALGOR_NUM
; i++)

1165 i‡(
i
 !
D_EVP
)

1166 
doô
[
i
]=1;

1168 
i
=0; i<
RSA_NUM
; i++)

1169 
rß_doô
[
i
]=1;

1170 
i
=0; i<
DSA_NUM
; i++)

1171 
dß_doô
[
i
]=1;

1172 #i‚de‡
OPENSSL_NO_ECDSA


1173 
i
=0; i<
EC_NUM
; i++)

1174 
ecdß_doô
[
i
]=1;

1176 #i‚de‡
OPENSSL_NO_ECDH


1177 
i
=0; i<
EC_NUM
; i++)

1178 
ecdh_doô
[
i
]=1;

1181 
i
=0; i<
ALGOR_NUM
; i++)

1182 i‡(
doô
[
i
]Ë
¥_hódî
++;

1184 i‡(
u£πime
 =0 && !
mr
)

1185 
	`BIO_¥ötf
(
bio_îr
,"You have chosenÅo measureÉlapsedÅime instead of user CPUÅime.\n");

1187 #i‚de‡
OPENSSL_NO_RSA


1188 
i
=0; i<
RSA_NUM
; i++)

1190 c⁄° *
p
;

1192 
p
=
rß_d©a
[
i
];

1193 
rß_key
[
i
]=
	`d2i_RSAPriv©eKey
(
NULL
,&
p
,
rß_d©a_Àngth
[i]);

1194 i‡(
rß_key
[
i
] =
NULL
)

1196 
	`BIO_¥ötf
(
bio_îr
,"öã∫ÆÉº‹Üﬂdög RSA keyÇumbî %d\n",
i
);

1197 
íd
;

1202 
	`BIO_¥ötf
(
bio_îr
,
mr
 ? "+RK:%d:"

1204 
	`BN_num_bôs
(
rß_key
[
i
]->
n
));

1205 
	`BN_¥öt
(
bio_îr
,
rß_key
[
i
]->
e
);

1206 
	`BIO_¥ötf
(
bio_îr
,"\n");

1212 #i‚de‡
OPENSSL_NO_DSA


1213 
dß_key
[0]=
	`gë_dß512
();

1214 
dß_key
[1]=
	`gë_dß1024
();

1215 
dß_key
[2]=
	`gë_dß2048
();

1218 #i‚de‡
OPENSSL_NO_DES


1219 
	`DES_£t_key_unchecked
(&
key
,&
sch
);

1220 
	`DES_£t_key_unchecked
(&
key2
,&
sch2
);

1221 
	`DES_£t_key_unchecked
(&
key3
,&
sch3
);

1223 #i‚de‡
OPENSSL_NO_AES


1224 
	`AES_£t_í¸y±_key
(
key16
,128,&
´s_ks1
);

1225 
	`AES_£t_í¸y±_key
(
key24
,192,&
´s_ks2
);

1226 
	`AES_£t_í¸y±_key
(
key32
,256,&
´s_ks3
);

1228 #i‚de‡
OPENSSL_NO_CAMELLIA


1229 
	`Camñlü_£t_key
(
key16
,128,&
ˇmñlü_ks1
);

1230 
	`Camñlü_£t_key
(
ckey24
,192,&
ˇmñlü_ks2
);

1231 
	`Camñlü_£t_key
(
ckey32
,256,&
ˇmñlü_ks3
);

1233 #i‚de‡
OPENSSL_NO_IDEA


1234 
	`idó_£t_í¸y±_key
(
key16
,&
idó_ks
);

1236 #i‚de‡
OPENSSL_NO_SEED


1237 
	`SEED_£t_key
(
key16
,&
£ed_ks
);

1239 #i‚de‡
OPENSSL_NO_RC4


1240 
	`RC4_£t_key
(&
rc4_ks
,16,
key16
);

1242 #i‚de‡
OPENSSL_NO_RC2


1243 
	`RC2_£t_key
(&
rc2_ks
,16,
key16
,128);

1245 #i‚de‡
OPENSSL_NO_RC5


1246 
	`RC5_32_£t_key
(&
rc5_ks
,16,
key16
,12);

1248 #i‚de‡
OPENSSL_NO_BF


1249 
	`BF_£t_key
(&
bf_ks
,16,
key16
);

1251 #i‚de‡
OPENSSL_NO_CAST


1252 
	`CAST_£t_key
(&
ˇ°_ks
,16,
key16
);

1254 #i‚de‡
OPENSSL_NO_RSA


1255 
	`mem£t
(
rß_c
,0,(rsa_c));

1257 #i‚de‡
SIGALRM


1258 #i‚de‡
OPENSSL_NO_DES


1259 
	`BIO_¥ötf
(
bio_îr
,"First we calculateÅheápproximate speed ...\n");

1260 
cou¡
=10;

1262 
ô
;

1263 
cou¡
*=2;

1264 
	`Time_F
(
START
);

1265 
ô
=
cou¡
; it; it--)

1266 
	`DES_ecb_í¸y±
((
DES_cblock
 *)
buf
,

1267 (
DES_cblock
 *)
buf
,

1268 &
sch
,
DES_ENCRYPT
);

1269 
d
=
	`Time_F
(
STOP
);

1270 } 
d
 <3);

1271 
ßve_cou¡
=
cou¡
;

1272 
c
[
D_MD2
][0]=
cou¡
/10;

1273 
c
[
D_MDC2
][0]=
cou¡
/10;

1274 
c
[
D_MD4
][0]=
cou¡
;

1275 
c
[
D_MD5
][0]=
cou¡
;

1276 
c
[
D_HMAC
][0]=
cou¡
;

1277 
c
[
D_SHA1
][0]=
cou¡
;

1278 
c
[
D_RMD160
][0]=
cou¡
;

1279 
c
[
D_RC4
][0]=
cou¡
*5;

1280 
c
[
D_CBC_DES
][0]=
cou¡
;

1281 
c
[
D_EDE3_DES
][0]=
cou¡
/3;

1282 
c
[
D_CBC_IDEA
][0]=
cou¡
;

1283 
c
[
D_CBC_SEED
][0]=
cou¡
;

1284 
c
[
D_CBC_RC2
][0]=
cou¡
;

1285 
c
[
D_CBC_RC5
][0]=
cou¡
;

1286 
c
[
D_CBC_BF
][0]=
cou¡
;

1287 
c
[
D_CBC_CAST
][0]=
cou¡
;

1288 
c
[
D_CBC_128_AES
][0]=
cou¡
;

1289 
c
[
D_CBC_192_AES
][0]=
cou¡
;

1290 
c
[
D_CBC_256_AES
][0]=
cou¡
;

1291 
c
[
D_CBC_128_CML
][0]=
cou¡
;

1292 
c
[
D_CBC_192_CML
][0]=
cou¡
;

1293 
c
[
D_CBC_256_CML
][0]=
cou¡
;

1294 
c
[
D_SHA256
][0]=
cou¡
;

1295 
c
[
D_SHA512
][0]=
cou¡
;

1296 
c
[
D_WHIRLPOOL
][0]=
cou¡
;

1297 
c
[
D_IGE_128_AES
][0]=
cou¡
;

1298 
c
[
D_IGE_192_AES
][0]=
cou¡
;

1299 
c
[
D_IGE_256_AES
][0]=
cou¡
;

1300 
c
[
D_GHASH
][0]=
cou¡
;

1302 
i
=1; i<
SIZE_NUM
; i++)

1304 
c
[
D_MD2
][
i
]=c[D_MD2][0]*4*
Àngths
[0]/lengths[i];

1305 
c
[
D_MDC2
][
i
]=c[D_MDC2][0]*4*
Àngths
[0]/lengths[i];

1306 
c
[
D_MD4
][
i
]=c[D_MD4][0]*4*
Àngths
[0]/lengths[i];

1307 
c
[
D_MD5
][
i
]=c[D_MD5][0]*4*
Àngths
[0]/lengths[i];

1308 
c
[
D_HMAC
][
i
]=c[D_HMAC][0]*4*
Àngths
[0]/lengths[i];

1309 
c
[
D_SHA1
][
i
]=c[D_SHA1][0]*4*
Àngths
[0]/lengths[i];

1310 
c
[
D_RMD160
][
i
]=c[D_RMD160][0]*4*
Àngths
[0]/lengths[i];

1311 
c
[
D_SHA256
][
i
]=c[D_SHA256][0]*4*
Àngths
[0]/lengths[i];

1312 
c
[
D_SHA512
][
i
]=c[D_SHA512][0]*4*
Àngths
[0]/lengths[i];

1313 
c
[
D_WHIRLPOOL
][
i
]=c[D_WHIRLPOOL][0]*4*
Àngths
[0]/lengths[i];

1315 
i
=1; i<
SIZE_NUM
; i++)

1317 
l0
,
l1
;

1319 
l0
=()
Àngths
[
i
-1];

1320 
l1
=()
Àngths
[
i
];

1321 
c
[
D_RC4
][
i
]=c[D_RC4][i-1]*
l0
/
l1
;

1322 
c
[
D_CBC_DES
][
i
]=c[D_CBC_DES][i-1]*
l0
/
l1
;

1323 
c
[
D_EDE3_DES
][
i
]=c[D_EDE3_DES][i-1]*
l0
/
l1
;

1324 
c
[
D_CBC_IDEA
][
i
]=c[D_CBC_IDEA][i-1]*
l0
/
l1
;

1325 
c
[
D_CBC_SEED
][
i
]=c[D_CBC_SEED][i-1]*
l0
/
l1
;

1326 
c
[
D_CBC_RC2
][
i
]=c[D_CBC_RC2][i-1]*
l0
/
l1
;

1327 
c
[
D_CBC_RC5
][
i
]=c[D_CBC_RC5][i-1]*
l0
/
l1
;

1328 
c
[
D_CBC_BF
][
i
]=c[D_CBC_BF][i-1]*
l0
/
l1
;

1329 
c
[
D_CBC_CAST
][
i
]=c[D_CBC_CAST][i-1]*
l0
/
l1
;

1330 
c
[
D_CBC_128_AES
][
i
]=c[D_CBC_128_AES][i-1]*
l0
/
l1
;

1331 
c
[
D_CBC_192_AES
][
i
]=c[D_CBC_192_AES][i-1]*
l0
/
l1
;

1332 
c
[
D_CBC_256_AES
][
i
]=c[D_CBC_256_AES][i-1]*
l0
/
l1
;

1333 
c
[
D_CBC_128_CML
][
i
]=c[D_CBC_128_CML][i-1]*
l0
/
l1
;

1334 
c
[
D_CBC_192_CML
][
i
]=c[D_CBC_192_CML][i-1]*
l0
/
l1
;

1335 
c
[
D_CBC_256_CML
][
i
]=c[D_CBC_256_CML][i-1]*
l0
/
l1
;

1336 
c
[
D_IGE_128_AES
][
i
]=c[D_IGE_128_AES][i-1]*
l0
/
l1
;

1337 
c
[
D_IGE_192_AES
][
i
]=c[D_IGE_192_AES][i-1]*
l0
/
l1
;

1338 
c
[
D_IGE_256_AES
][
i
]=c[D_IGE_256_AES][i-1]*
l0
/
l1
;

1340 #i‚de‡
OPENSSL_NO_RSA


1341 
rß_c
[
R_RSA_512
][0]=
cou¡
/2000;

1342 
rß_c
[
R_RSA_512
][1]=
cou¡
/400;

1343 
i
=1; i<
RSA_NUM
; i++)

1345 
rß_c
[
i
][0]=rsa_c[i-1][0]/8;

1346 
rß_c
[
i
][1]=rsa_c[i-1][1]/4;

1347 i‡((
rß_doô
[
i
] <1Ë&& (
rß_c
[i][0] == 0))

1348 
rß_doô
[
i
]=0;

1351 i‡(
rß_c
[
i
][0] == 0)

1353 
rß_c
[
i
][0]=1;

1354 
rß_c
[
i
][1]=20;

1360 #i‚de‡
OPENSSL_NO_DSA


1361 
dß_c
[
R_DSA_512
][0]=
cou¡
/1000;

1362 
dß_c
[
R_DSA_512
][1]=
cou¡
/1000/2;

1363 
i
=1; i<
DSA_NUM
; i++)

1365 
dß_c
[
i
][0]=dsa_c[i-1][0]/4;

1366 
dß_c
[
i
][1]=dsa_c[i-1][1]/4;

1367 i‡((
dß_doô
[
i
] <1Ë&& (
dß_c
[i][0] == 0))

1368 
dß_doô
[
i
]=0;

1371 i‡(
dß_c
[
i
] == 0)

1373 
dß_c
[
i
][0]=1;

1374 
dß_c
[
i
][1]=1;

1380 #i‚de‡
OPENSSL_NO_ECDSA


1381 
ecdß_c
[
R_EC_P160
][0]=
cou¡
/1000;

1382 
ecdß_c
[
R_EC_P160
][1]=
cou¡
/1000/2;

1383 
i
=
R_EC_P192
; i<=
R_EC_P521
; i++)

1385 
ecdß_c
[
i
][0]=ecdsa_c[i-1][0]/2;

1386 
ecdß_c
[
i
][1]=ecdsa_c[i-1][1]/2;

1387 i‡((
ecdß_doô
[
i
] <1Ë&& (
ecdß_c
[i][0] == 0))

1388 
ecdß_doô
[
i
]=0;

1391 i‡(
ecdß_c
[
i
] == 0)

1393 
ecdß_c
[
i
][0]=1;

1394 
ecdß_c
[
i
][1]=1;

1398 
ecdß_c
[
R_EC_K163
][0]=
cou¡
/1000;

1399 
ecdß_c
[
R_EC_K163
][1]=
cou¡
/1000/2;

1400 
i
=
R_EC_K233
; i<=
R_EC_K571
; i++)

1402 
ecdß_c
[
i
][0]=ecdsa_c[i-1][0]/2;

1403 
ecdß_c
[
i
][1]=ecdsa_c[i-1][1]/2;

1404 i‡((
ecdß_doô
[
i
] <1Ë&& (
ecdß_c
[i][0] == 0))

1405 
ecdß_doô
[
i
]=0;

1408 i‡(
ecdß_c
[
i
] == 0)

1410 
ecdß_c
[
i
][0]=1;

1411 
ecdß_c
[
i
][1]=1;

1415 
ecdß_c
[
R_EC_B163
][0]=
cou¡
/1000;

1416 
ecdß_c
[
R_EC_B163
][1]=
cou¡
/1000/2;

1417 
i
=
R_EC_B233
; i<=
R_EC_B571
; i++)

1419 
ecdß_c
[
i
][0]=ecdsa_c[i-1][0]/2;

1420 
ecdß_c
[
i
][1]=ecdsa_c[i-1][1]/2;

1421 i‡((
ecdß_doô
[
i
] <1Ë&& (
ecdß_c
[i][0] == 0))

1422 
ecdß_doô
[
i
]=0;

1425 i‡(
ecdß_c
[
i
] == 0)

1427 
ecdß_c
[
i
][0]=1;

1428 
ecdß_c
[
i
][1]=1;

1434 #i‚de‡
OPENSSL_NO_ECDH


1435 
ecdh_c
[
R_EC_P160
][0]=
cou¡
/1000;

1436 
ecdh_c
[
R_EC_P160
][1]=
cou¡
/1000;

1437 
i
=
R_EC_P192
; i<=
R_EC_P521
; i++)

1439 
ecdh_c
[
i
][0]=ecdh_c[i-1][0]/2;

1440 
ecdh_c
[
i
][1]=ecdh_c[i-1][1]/2;

1441 i‡((
ecdh_doô
[
i
] <1Ë&& (
ecdh_c
[i][0] == 0))

1442 
ecdh_doô
[
i
]=0;

1445 i‡(
ecdh_c
[
i
] == 0)

1447 
ecdh_c
[
i
][0]=1;

1448 
ecdh_c
[
i
][1]=1;

1452 
ecdh_c
[
R_EC_K163
][0]=
cou¡
/1000;

1453 
ecdh_c
[
R_EC_K163
][1]=
cou¡
/1000;

1454 
i
=
R_EC_K233
; i<=
R_EC_K571
; i++)

1456 
ecdh_c
[
i
][0]=ecdh_c[i-1][0]/2;

1457 
ecdh_c
[
i
][1]=ecdh_c[i-1][1]/2;

1458 i‡((
ecdh_doô
[
i
] <1Ë&& (
ecdh_c
[i][0] == 0))

1459 
ecdh_doô
[
i
]=0;

1462 i‡(
ecdh_c
[
i
] == 0)

1464 
ecdh_c
[
i
][0]=1;

1465 
ecdh_c
[
i
][1]=1;

1469 
ecdh_c
[
R_EC_B163
][0]=
cou¡
/1000;

1470 
ecdh_c
[
R_EC_B163
][1]=
cou¡
/1000;

1471 
i
=
R_EC_B233
; i<=
R_EC_B571
; i++)

1473 
ecdh_c
[
i
][0]=ecdh_c[i-1][0]/2;

1474 
ecdh_c
[
i
][1]=ecdh_c[i-1][1]/2;

1475 i‡((
ecdh_doô
[
i
] <1Ë&& (
ecdh_c
[i][0] == 0))

1476 
ecdh_doô
[
i
]=0;

1479 i‡(
ecdh_c
[
i
] == 0)

1481 
ecdh_c
[
i
][0]=1;

1482 
ecdh_c
[
i
][1]=1;

1488 
	#COND
(
d
Ë(
cou¡
 < (d))

	)

1489 
	#COUNT
(
d
Ë(d)

	)

1495 
	#COND
(
c
Ë(
run
 && 
cou¡
<0x7fffffff)

	)

1496 
	#COUNT
(
d
Ë(
cou¡
)

	)

1497 #i‚de‡
_WIN32


1498 
	`sig«l
(
SIGALRM
,
sig_d⁄e
);

1502 #i‚de‡
OPENSSL_NO_MD2


1503 i‡(
doô
[
D_MD2
])

1505 
j
=0; j<
SIZE_NUM
; j++)

1507 
	`¥öt_mesßge
(
«mes
[
D_MD2
],
c
[D_MD2][
j
],
Àngths
[j]);

1508 
	`Time_F
(
START
);

1509 
cou¡
=0,
run
=1; 
	`COND
(
c
[
D_MD2
][
j
]); count++)

1510 
	`EVP_Dige°
(
buf
,()
Àngths
[
j
],&(
md2
[0]),
NULL
,
	`EVP_md2
(),NULL);

1511 
d
=
	`Time_F
(
STOP
);

1512 
	`¥öt_ªsu…
(
D_MD2
,
j
,
cou¡
,
d
);

1516 #i‚de‡
OPENSSL_NO_MDC2


1517 i‡(
doô
[
D_MDC2
])

1519 
j
=0; j<
SIZE_NUM
; j++)

1521 
	`¥öt_mesßge
(
«mes
[
D_MDC2
],
c
[D_MDC2][
j
],
Àngths
[j]);

1522 
	`Time_F
(
START
);

1523 
cou¡
=0,
run
=1; 
	`COND
(
c
[
D_MDC2
][
j
]); count++)

1524 
	`EVP_Dige°
(
buf
,()
Àngths
[
j
],&(
mdc2
[0]),
NULL
,
	`EVP_mdc2
(),NULL);

1525 
d
=
	`Time_F
(
STOP
);

1526 
	`¥öt_ªsu…
(
D_MDC2
,
j
,
cou¡
,
d
);

1531 #i‚de‡
OPENSSL_NO_MD4


1532 i‡(
doô
[
D_MD4
])

1534 
j
=0; j<
SIZE_NUM
; j++)

1536 
	`¥öt_mesßge
(
«mes
[
D_MD4
],
c
[D_MD4][
j
],
Àngths
[j]);

1537 
	`Time_F
(
START
);

1538 
cou¡
=0,
run
=1; 
	`COND
(
c
[
D_MD4
][
j
]); count++)

1539 
	`EVP_Dige°
(&(
buf
[0]),()
Àngths
[
j
],&(
md4
[0]),
NULL
,
	`EVP_md4
(),NULL);

1540 
d
=
	`Time_F
(
STOP
);

1541 
	`¥öt_ªsu…
(
D_MD4
,
j
,
cou¡
,
d
);

1546 #i‚de‡
OPENSSL_NO_MD5


1547 i‡(
doô
[
D_MD5
])

1549 
j
=0; j<
SIZE_NUM
; j++)

1551 
	`¥öt_mesßge
(
«mes
[
D_MD5
],
c
[D_MD5][
j
],
Àngths
[j]);

1552 
	`Time_F
(
START
);

1553 
cou¡
=0,
run
=1; 
	`COND
(
c
[
D_MD5
][
j
]); count++)

1554 
	`EVP_Dige°
(&(
buf
[0]),()
Àngths
[
j
],&(
md5
[0]),
NULL
,
	`EVP_gë_dige°by«me
("md5"),NULL);

1555 
d
=
	`Time_F
(
STOP
);

1556 
	`¥öt_ªsu…
(
D_MD5
,
j
,
cou¡
,
d
);

1561 #i‡!
	`deföed
(
OPENSSL_NO_MD5
Ë&& !deföed(
OPENSSL_NO_HMAC
)

1562 i‡(
doô
[
D_HMAC
])

1564 
HMAC_CTX
 
h˘x
;

1566 
	`HMAC_CTX_öô
(&
h˘x
);

1567 
	`HMAC_Inô_ex
(&
h˘x
,(*)"This isá key...",

1568 16,
	`EVP_md5
(), 
NULL
);

1570 
j
=0; j<
SIZE_NUM
; j++)

1572 
	`¥öt_mesßge
(
«mes
[
D_HMAC
],
c
[D_HMAC][
j
],
Àngths
[j]);

1573 
	`Time_F
(
START
);

1574 
cou¡
=0,
run
=1; 
	`COND
(
c
[
D_HMAC
][
j
]); count++)

1576 
	`HMAC_Inô_ex
(&
h˘x
,
NULL
,0,NULL,NULL);

1577 
	`HMAC_Upd©e
(&
h˘x
,
buf
,
Àngths
[
j
]);

1578 
	`HMAC_FöÆ
(&
h˘x
,&(
hmac
[0]),
NULL
);

1580 
d
=
	`Time_F
(
STOP
);

1581 
	`¥öt_ªsu…
(
D_HMAC
,
j
,
cou¡
,
d
);

1583 
	`HMAC_CTX_˛ónup
(&
h˘x
);

1586 #i‚de‡
OPENSSL_NO_SHA


1587 i‡(
doô
[
D_SHA1
])

1589 
j
=0; j<
SIZE_NUM
; j++)

1591 
	`¥öt_mesßge
(
«mes
[
D_SHA1
],
c
[D_SHA1][
j
],
Àngths
[j]);

1592 
	`Time_F
(
START
);

1593 
cou¡
=0,
run
=1; 
	`COND
(
c
[
D_SHA1
][
j
]); count++)

1594 
	`EVP_Dige°
(
buf
,()
Àngths
[
j
],&(
sha
[0]),
NULL
,
	`EVP_sha1
(),NULL);

1595 
d
=
	`Time_F
(
STOP
);

1596 
	`¥öt_ªsu…
(
D_SHA1
,
j
,
cou¡
,
d
);

1600 #i‚de‡
OPENSSL_NO_SHA256


1601 i‡(
doô
[
D_SHA256
])

1603 
j
=0; j<
SIZE_NUM
; j++)

1605 
	`¥öt_mesßge
(
«mes
[
D_SHA256
],
c
[D_SHA256][
j
],
Àngths
[j]);

1606 
	`Time_F
(
START
);

1607 
cou¡
=0,
run
=1; 
	`COND
(
c
[
D_SHA256
][
j
]); count++)

1608 
	`SHA256
(
buf
,
Àngths
[
j
],
sha256
);

1609 
d
=
	`Time_F
(
STOP
);

1610 
	`¥öt_ªsu…
(
D_SHA256
,
j
,
cou¡
,
d
);

1615 #i‚de‡
OPENSSL_NO_SHA512


1616 i‡(
doô
[
D_SHA512
])

1618 
j
=0; j<
SIZE_NUM
; j++)

1620 
	`¥öt_mesßge
(
«mes
[
D_SHA512
],
c
[D_SHA512][
j
],
Àngths
[j]);

1621 
	`Time_F
(
START
);

1622 
cou¡
=0,
run
=1; 
	`COND
(
c
[
D_SHA512
][
j
]); count++)

1623 
	`SHA512
(
buf
,
Àngths
[
j
],
sha512
);

1624 
d
=
	`Time_F
(
STOP
);

1625 
	`¥öt_ªsu…
(
D_SHA512
,
j
,
cou¡
,
d
);

1631 #i‚de‡
OPENSSL_NO_WHIRLPOOL


1632 i‡(
doô
[
D_WHIRLPOOL
])

1634 
j
=0; j<
SIZE_NUM
; j++)

1636 
	`¥öt_mesßge
(
«mes
[
D_WHIRLPOOL
],
c
[D_WHIRLPOOL][
j
],
Àngths
[j]);

1637 
	`Time_F
(
START
);

1638 
cou¡
=0,
run
=1; 
	`COND
(
c
[
D_WHIRLPOOL
][
j
]); count++)

1639 
	`WHIRLPOOL
(
buf
,
Àngths
[
j
],
whúÕoﬁ
);

1640 
d
=
	`Time_F
(
STOP
);

1641 
	`¥öt_ªsu…
(
D_WHIRLPOOL
,
j
,
cou¡
,
d
);

1646 #i‚de‡
OPENSSL_NO_RIPEMD


1647 i‡(
doô
[
D_RMD160
])

1649 
j
=0; j<
SIZE_NUM
; j++)

1651 
	`¥öt_mesßge
(
«mes
[
D_RMD160
],
c
[D_RMD160][
j
],
Àngths
[j]);

1652 
	`Time_F
(
START
);

1653 
cou¡
=0,
run
=1; 
	`COND
(
c
[
D_RMD160
][
j
]); count++)

1654 
	`EVP_Dige°
(
buf
,()
Àngths
[
j
],&(
rmd160
[0]),
NULL
,
	`EVP_rùemd160
(),NULL);

1655 
d
=
	`Time_F
(
STOP
);

1656 
	`¥öt_ªsu…
(
D_RMD160
,
j
,
cou¡
,
d
);

1660 #i‚de‡
OPENSSL_NO_RC4


1661 i‡(
doô
[
D_RC4
])

1663 
j
=0; j<
SIZE_NUM
; j++)

1665 
	`¥öt_mesßge
(
«mes
[
D_RC4
],
c
[D_RC4][
j
],
Àngths
[j]);

1666 
	`Time_F
(
START
);

1667 
cou¡
=0,
run
=1; 
	`COND
(
c
[
D_RC4
][
j
]); count++)

1668 
	`RC4
(&
rc4_ks
,()
Àngths
[
j
],

1669 
buf
,buf);

1670 
d
=
	`Time_F
(
STOP
);

1671 
	`¥öt_ªsu…
(
D_RC4
,
j
,
cou¡
,
d
);

1675 #i‚de‡
OPENSSL_NO_DES


1676 i‡(
doô
[
D_CBC_DES
])

1678 
j
=0; j<
SIZE_NUM
; j++)

1680 
	`¥öt_mesßge
(
«mes
[
D_CBC_DES
],
c
[D_CBC_DES][
j
],
Àngths
[j]);

1681 
	`Time_F
(
START
);

1682 
cou¡
=0,
run
=1; 
	`COND
(
c
[
D_CBC_DES
][
j
]); count++)

1683 
	`DES_ncbc_í¸y±
(
buf
,buf,
Àngths
[
j
],&
sch
,

1684 &
DES_iv
,
DES_ENCRYPT
);

1685 
d
=
	`Time_F
(
STOP
);

1686 
	`¥öt_ªsu…
(
D_CBC_DES
,
j
,
cou¡
,
d
);

1690 i‡(
doô
[
D_EDE3_DES
])

1692 
j
=0; j<
SIZE_NUM
; j++)

1694 
	`¥öt_mesßge
(
«mes
[
D_EDE3_DES
],
c
[D_EDE3_DES][
j
],
Àngths
[j]);

1695 
	`Time_F
(
START
);

1696 
cou¡
=0,
run
=1; 
	`COND
(
c
[
D_EDE3_DES
][
j
]); count++)

1697 
	`DES_ede3_cbc_í¸y±
(
buf
,buf,
Àngths
[
j
],

1698 &
sch
,&
sch2
,&
sch3
,

1699 &
DES_iv
,
DES_ENCRYPT
);

1700 
d
=
	`Time_F
(
STOP
);

1701 
	`¥öt_ªsu…
(
D_EDE3_DES
,
j
,
cou¡
,
d
);

1705 #i‚de‡
OPENSSL_NO_AES


1706 i‡(
doô
[
D_CBC_128_AES
])

1708 
j
=0; j<
SIZE_NUM
; j++)

1710 
	`¥öt_mesßge
(
«mes
[
D_CBC_128_AES
],
c
[D_CBC_128_AES][
j
],
Àngths
[j]);

1711 
	`Time_F
(
START
);

1712 
cou¡
=0,
run
=1; 
	`COND
(
c
[
D_CBC_128_AES
][
j
]); count++)

1713 
	`AES_cbc_í¸y±
(
buf
,buf,

1714 ()
Àngths
[
j
],&
´s_ks1
,

1715 
iv
,
AES_ENCRYPT
);

1716 
d
=
	`Time_F
(
STOP
);

1717 
	`¥öt_ªsu…
(
D_CBC_128_AES
,
j
,
cou¡
,
d
);

1720 i‡(
doô
[
D_CBC_192_AES
])

1722 
j
=0; j<
SIZE_NUM
; j++)

1724 
	`¥öt_mesßge
(
«mes
[
D_CBC_192_AES
],
c
[D_CBC_192_AES][
j
],
Àngths
[j]);

1725 
	`Time_F
(
START
);

1726 
cou¡
=0,
run
=1; 
	`COND
(
c
[
D_CBC_192_AES
][
j
]); count++)

1727 
	`AES_cbc_í¸y±
(
buf
,buf,

1728 ()
Àngths
[
j
],&
´s_ks2
,

1729 
iv
,
AES_ENCRYPT
);

1730 
d
=
	`Time_F
(
STOP
);

1731 
	`¥öt_ªsu…
(
D_CBC_192_AES
,
j
,
cou¡
,
d
);

1734 i‡(
doô
[
D_CBC_256_AES
])

1736 
j
=0; j<
SIZE_NUM
; j++)

1738 
	`¥öt_mesßge
(
«mes
[
D_CBC_256_AES
],
c
[D_CBC_256_AES][
j
],
Àngths
[j]);

1739 
	`Time_F
(
START
);

1740 
cou¡
=0,
run
=1; 
	`COND
(
c
[
D_CBC_256_AES
][
j
]); count++)

1741 
	`AES_cbc_í¸y±
(
buf
,buf,

1742 ()
Àngths
[
j
],&
´s_ks3
,

1743 
iv
,
AES_ENCRYPT
);

1744 
d
=
	`Time_F
(
STOP
);

1745 
	`¥öt_ªsu…
(
D_CBC_256_AES
,
j
,
cou¡
,
d
);

1749 i‡(
doô
[
D_IGE_128_AES
])

1751 
j
=0; j<
SIZE_NUM
; j++)

1753 
	`¥öt_mesßge
(
«mes
[
D_IGE_128_AES
],
c
[D_IGE_128_AES][
j
],
Àngths
[j]);

1754 
	`Time_F
(
START
);

1755 
cou¡
=0,
run
=1; 
	`COND
(
c
[
D_IGE_128_AES
][
j
]); count++)

1756 
	`AES_ige_í¸y±
(
buf
,
buf2
,

1757 ()
Àngths
[
j
],&
´s_ks1
,

1758 
iv
,
AES_ENCRYPT
);

1759 
d
=
	`Time_F
(
STOP
);

1760 
	`¥öt_ªsu…
(
D_IGE_128_AES
,
j
,
cou¡
,
d
);

1763 i‡(
doô
[
D_IGE_192_AES
])

1765 
j
=0; j<
SIZE_NUM
; j++)

1767 
	`¥öt_mesßge
(
«mes
[
D_IGE_192_AES
],
c
[D_IGE_192_AES][
j
],
Àngths
[j]);

1768 
	`Time_F
(
START
);

1769 
cou¡
=0,
run
=1; 
	`COND
(
c
[
D_IGE_192_AES
][
j
]); count++)

1770 
	`AES_ige_í¸y±
(
buf
,
buf2
,

1771 ()
Àngths
[
j
],&
´s_ks2
,

1772 
iv
,
AES_ENCRYPT
);

1773 
d
=
	`Time_F
(
STOP
);

1774 
	`¥öt_ªsu…
(
D_IGE_192_AES
,
j
,
cou¡
,
d
);

1777 i‡(
doô
[
D_IGE_256_AES
])

1779 
j
=0; j<
SIZE_NUM
; j++)

1781 
	`¥öt_mesßge
(
«mes
[
D_IGE_256_AES
],
c
[D_IGE_256_AES][
j
],
Àngths
[j]);

1782 
	`Time_F
(
START
);

1783 
cou¡
=0,
run
=1; 
	`COND
(
c
[
D_IGE_256_AES
][
j
]); count++)

1784 
	`AES_ige_í¸y±
(
buf
,
buf2
,

1785 ()
Àngths
[
j
],&
´s_ks3
,

1786 
iv
,
AES_ENCRYPT
);

1787 
d
=
	`Time_F
(
STOP
);

1788 
	`¥öt_ªsu…
(
D_IGE_256_AES
,
j
,
cou¡
,
d
);

1791 i‡(
doô
[
D_GHASH
])

1793 
GCM128_CONTEXT
 *
˘x
 = 
	`CRYPTO_gcm128_√w
(&
´s_ks1
,(
block128_f
)
AES_í¸y±
);

1794 
	`CRYPTO_gcm128_£tiv
 (
˘x
,(*)"0123456789ab",12);

1796 
j
=0; j<
SIZE_NUM
; j++)

1798 
	`¥öt_mesßge
(
«mes
[
D_GHASH
],
c
[D_GHASH][
j
],
Àngths
[j]);

1799 
	`Time_F
(
START
);

1800 
cou¡
=0,
run
=1; 
	`COND
(
c
[
D_GHASH
][
j
]); count++)

1801 
	`CRYPTO_gcm128_Ød
(
˘x
,
buf
,
Àngths
[
j
]);

1802 
d
=
	`Time_F
(
STOP
);

1803 
	`¥öt_ªsu…
(
D_GHASH
,
j
,
cou¡
,
d
);

1805 
	`CRYPTO_gcm128_ªÀa£
(
˘x
);

1809 #i‚de‡
OPENSSL_NO_CAMELLIA


1810 i‡(
doô
[
D_CBC_128_CML
])

1812 
j
=0; j<
SIZE_NUM
; j++)

1814 
	`¥öt_mesßge
(
«mes
[
D_CBC_128_CML
],
c
[D_CBC_128_CML][
j
],
Àngths
[j]);

1815 
	`Time_F
(
START
);

1816 
cou¡
=0,
run
=1; 
	`COND
(
c
[
D_CBC_128_CML
][
j
]); count++)

1817 
	`Camñlü_cbc_í¸y±
(
buf
,buf,

1818 ()
Àngths
[
j
],&
ˇmñlü_ks1
,

1819 
iv
,
CAMELLIA_ENCRYPT
);

1820 
d
=
	`Time_F
(
STOP
);

1821 
	`¥öt_ªsu…
(
D_CBC_128_CML
,
j
,
cou¡
,
d
);

1824 i‡(
doô
[
D_CBC_192_CML
])

1826 
j
=0; j<
SIZE_NUM
; j++)

1828 
	`¥öt_mesßge
(
«mes
[
D_CBC_192_CML
],
c
[D_CBC_192_CML][
j
],
Àngths
[j]);

1829 
	`Time_F
(
START
);

1830 
cou¡
=0,
run
=1; 
	`COND
(
c
[
D_CBC_192_CML
][
j
]); count++)

1831 
	`Camñlü_cbc_í¸y±
(
buf
,buf,

1832 ()
Àngths
[
j
],&
ˇmñlü_ks2
,

1833 
iv
,
CAMELLIA_ENCRYPT
);

1834 
d
=
	`Time_F
(
STOP
);

1835 
	`¥öt_ªsu…
(
D_CBC_192_CML
,
j
,
cou¡
,
d
);

1838 i‡(
doô
[
D_CBC_256_CML
])

1840 
j
=0; j<
SIZE_NUM
; j++)

1842 
	`¥öt_mesßge
(
«mes
[
D_CBC_256_CML
],
c
[D_CBC_256_CML][
j
],
Àngths
[j]);

1843 
	`Time_F
(
START
);

1844 
cou¡
=0,
run
=1; 
	`COND
(
c
[
D_CBC_256_CML
][
j
]); count++)

1845 
	`Camñlü_cbc_í¸y±
(
buf
,buf,

1846 ()
Àngths
[
j
],&
ˇmñlü_ks3
,

1847 
iv
,
CAMELLIA_ENCRYPT
);

1848 
d
=
	`Time_F
(
STOP
);

1849 
	`¥öt_ªsu…
(
D_CBC_256_CML
,
j
,
cou¡
,
d
);

1854 #i‚de‡
OPENSSL_NO_IDEA


1855 i‡(
doô
[
D_CBC_IDEA
])

1857 
j
=0; j<
SIZE_NUM
; j++)

1859 
	`¥öt_mesßge
(
«mes
[
D_CBC_IDEA
],
c
[D_CBC_IDEA][
j
],
Àngths
[j]);

1860 
	`Time_F
(
START
);

1861 
cou¡
=0,
run
=1; 
	`COND
(
c
[
D_CBC_IDEA
][
j
]); count++)

1862 
	`idó_cbc_í¸y±
(
buf
,buf,

1863 ()
Àngths
[
j
],&
idó_ks
,

1864 
iv
,
IDEA_ENCRYPT
);

1865 
d
=
	`Time_F
(
STOP
);

1866 
	`¥öt_ªsu…
(
D_CBC_IDEA
,
j
,
cou¡
,
d
);

1870 #i‚de‡
OPENSSL_NO_SEED


1871 i‡(
doô
[
D_CBC_SEED
])

1873 
j
=0; j<
SIZE_NUM
; j++)

1875 
	`¥öt_mesßge
(
«mes
[
D_CBC_SEED
],
c
[D_CBC_SEED][
j
],
Àngths
[j]);

1876 
	`Time_F
(
START
);

1877 
cou¡
=0,
run
=1; 
	`COND
(
c
[
D_CBC_SEED
][
j
]); count++)

1878 
	`SEED_cbc_í¸y±
(
buf
,buf,

1879 ()
Àngths
[
j
],&
£ed_ks
,
iv
,1);

1880 
d
=
	`Time_F
(
STOP
);

1881 
	`¥öt_ªsu…
(
D_CBC_SEED
,
j
,
cou¡
,
d
);

1885 #i‚de‡
OPENSSL_NO_RC2


1886 i‡(
doô
[
D_CBC_RC2
])

1888 
j
=0; j<
SIZE_NUM
; j++)

1890 
	`¥öt_mesßge
(
«mes
[
D_CBC_RC2
],
c
[D_CBC_RC2][
j
],
Àngths
[j]);

1891 
	`Time_F
(
START
);

1892 
cou¡
=0,
run
=1; 
	`COND
(
c
[
D_CBC_RC2
][
j
]); count++)

1893 
	`RC2_cbc_í¸y±
(
buf
,buf,

1894 ()
Àngths
[
j
],&
rc2_ks
,

1895 
iv
,
RC2_ENCRYPT
);

1896 
d
=
	`Time_F
(
STOP
);

1897 
	`¥öt_ªsu…
(
D_CBC_RC2
,
j
,
cou¡
,
d
);

1901 #i‚de‡
OPENSSL_NO_RC5


1902 i‡(
doô
[
D_CBC_RC5
])

1904 
j
=0; j<
SIZE_NUM
; j++)

1906 
	`¥öt_mesßge
(
«mes
[
D_CBC_RC5
],
c
[D_CBC_RC5][
j
],
Àngths
[j]);

1907 
	`Time_F
(
START
);

1908 
cou¡
=0,
run
=1; 
	`COND
(
c
[
D_CBC_RC5
][
j
]); count++)

1909 
	`RC5_32_cbc_í¸y±
(
buf
,buf,

1910 ()
Àngths
[
j
],&
rc5_ks
,

1911 
iv
,
RC5_ENCRYPT
);

1912 
d
=
	`Time_F
(
STOP
);

1913 
	`¥öt_ªsu…
(
D_CBC_RC5
,
j
,
cou¡
,
d
);

1917 #i‚de‡
OPENSSL_NO_BF


1918 i‡(
doô
[
D_CBC_BF
])

1920 
j
=0; j<
SIZE_NUM
; j++)

1922 
	`¥öt_mesßge
(
«mes
[
D_CBC_BF
],
c
[D_CBC_BF][
j
],
Àngths
[j]);

1923 
	`Time_F
(
START
);

1924 
cou¡
=0,
run
=1; 
	`COND
(
c
[
D_CBC_BF
][
j
]); count++)

1925 
	`BF_cbc_í¸y±
(
buf
,buf,

1926 ()
Àngths
[
j
],&
bf_ks
,

1927 
iv
,
BF_ENCRYPT
);

1928 
d
=
	`Time_F
(
STOP
);

1929 
	`¥öt_ªsu…
(
D_CBC_BF
,
j
,
cou¡
,
d
);

1933 #i‚de‡
OPENSSL_NO_CAST


1934 i‡(
doô
[
D_CBC_CAST
])

1936 
j
=0; j<
SIZE_NUM
; j++)

1938 
	`¥öt_mesßge
(
«mes
[
D_CBC_CAST
],
c
[D_CBC_CAST][
j
],
Àngths
[j]);

1939 
	`Time_F
(
START
);

1940 
cou¡
=0,
run
=1; 
	`COND
(
c
[
D_CBC_CAST
][
j
]); count++)

1941 
	`CAST_cbc_í¸y±
(
buf
,buf,

1942 ()
Àngths
[
j
],&
ˇ°_ks
,

1943 
iv
,
CAST_ENCRYPT
);

1944 
d
=
	`Time_F
(
STOP
);

1945 
	`¥öt_ªsu…
(
D_CBC_CAST
,
j
,
cou¡
,
d
);

1950 i‡(
doô
[
D_EVP
])

1952 
j
=0; j<
SIZE_NUM
; j++)

1954 i‡(
evp_cùhî
)

1956 
EVP_CIPHER_CTX
 
˘x
;

1957 
oué
;

1959 
«mes
[
D_EVP
]=
	`OBJ_nid2 
(
evp_cùhî
->
nid
);

1963 
	`¥öt_mesßge
(
«mes
[
D_EVP
],
ßve_cou¡
,

1964 
Àngths
[
j
]);

1966 
	`EVP_CIPHER_CTX_öô
(&
˘x
);

1967 if(
de¸y±
)

1968 
	`EVP_De¸y±Inô_ex
(&
˘x
,
evp_cùhî
,
NULL
,
key16
,
iv
);

1970 
	`EVP_En¸y±Inô_ex
(&
˘x
,
evp_cùhî
,
NULL
,
key16
,
iv
);

1971 
	`EVP_CIPHER_CTX_£t_∑ddög
(&
˘x
, 0);

1973 
	`Time_F
(
START
);

1974 if(
de¸y±
)

1975 
cou¡
=0,
run
=1; 
	`COND
(
ßve_cou¡
*4*
Àngths
[0]/Àngths[
j
]); count++)

1976 
	`EVP_De¸y±Upd©e
(&
˘x
,
buf
,&
oué
,buf,
Àngths
[
j
]);

1978 
cou¡
=0,
run
=1; 
	`COND
(
ßve_cou¡
*4*
Àngths
[0]/Àngths[
j
]); count++)

1979 
	`EVP_En¸y±Upd©e
(&
˘x
,
buf
,&
oué
,buf,
Àngths
[
j
]);

1980 if(
de¸y±
)

1981 
	`EVP_De¸y±FöÆ_ex
(&
˘x
,
buf
,&
oué
);

1983 
	`EVP_En¸y±FöÆ_ex
(&
˘x
,
buf
,&
oué
);

1984 
d
=
	`Time_F
(
STOP
);

1985 
	`EVP_CIPHER_CTX_˛ónup
(&
˘x
);

1987 i‡(
evp_md
)

1989 
«mes
[
D_EVP
]=
	`OBJ_nid2 
(
evp_md
->
ty≥
);

1990 
	`¥öt_mesßge
(
«mes
[
D_EVP
],
ßve_cou¡
,

1991 
Àngths
[
j
]);

1993 
	`Time_F
(
START
);

1994 
cou¡
=0,
run
=1; 
	`COND
(
ßve_cou¡
*4*
Àngths
[0]/Àngths[
j
]); count++)

1995 
	`EVP_Dige°
(
buf
,
Àngths
[
j
],&(
md
[0]),
NULL
,
evp_md
,NULL);

1997 
d
=
	`Time_F
(
STOP
);

1999 
	`¥öt_ªsu…
(
D_EVP
,
j
,
cou¡
,
d
);

2003 
	`RAND_p£udo_byãs
(
buf
,36);

2004 #i‚de‡
OPENSSL_NO_RSA


2005 
j
=0; j<
RSA_NUM
; j++)

2007 
ªt
;

2008 i‡(!
rß_doô
[
j
]) ;

2009 
ªt
=
	`RSA_sign
(
NID_md5_sha1
, 
buf
,36, 
buf2
, &
rß_num
, 
rß_key
[
j
]);

2010 i‡(
ªt
 == 0)

2012 
	`BIO_¥ötf
(
bio_îr
,"RSA sign failure. No RSA sign will be done.\n");

2013 
	`ERR_¥öt_îr‹s
(
bio_îr
);

2014 
rß_cou¡
=1;

2018 
	`pkey_¥öt_mesßge
("private","rsa",

2019 
rß_c
[
j
][0],
rß_bôs
[j],

2020 
RSA_SECONDS
);

2022 
	`Time_F
(
START
);

2023 
cou¡
=0,
run
=1; 
	`COND
(
rß_c
[
j
][0]); count++)

2025 
ªt
=
	`RSA_sign
(
NID_md5_sha1
, 
buf
,36, 
buf2
,

2026 &
rß_num
, 
rß_key
[
j
]);

2027 i‡(
ªt
 == 0)

2029 
	`BIO_¥ötf
(
bio_îr
,

2031 
	`ERR_¥öt_îr‹s
(
bio_îr
);

2032 
cou¡
=1;

2036 
d
=
	`Time_F
(
STOP
);

2037 
	`BIO_¥ötf
(
bio_îr
,
mr
 ? "+R1:%ld:%d:%.2f\n"

2039 
cou¡
,
rß_bôs
[
j
],
d
);

2040 
rß_ªsu…s
[
j
][0]=
d
/()
cou¡
;

2041 
rß_cou¡
=
cou¡
;

2045 
ªt
=
	`RSA_vîify
(
NID_md5_sha1
, 
buf
,36, 
buf2
, 
rß_num
, 
rß_key
[
j
]);

2046 i‡(
ªt
 <= 0)

2048 
	`BIO_¥ötf
(
bio_îr
,"RSA verify failure. No RSA verify will be done.\n");

2049 
	`ERR_¥öt_îr‹s
(
bio_îr
);

2050 
rß_doô
[
j
] = 0;

2054 
	`pkey_¥öt_mesßge
("public","rsa",

2055 
rß_c
[
j
][1],
rß_bôs
[j],

2056 
RSA_SECONDS
);

2057 
	`Time_F
(
START
);

2058 
cou¡
=0,
run
=1; 
	`COND
(
rß_c
[
j
][1]); count++)

2060 
ªt
=
	`RSA_vîify
(
NID_md5_sha1
, 
buf
,36, 
buf2
,

2061 
rß_num
, 
rß_key
[
j
]);

2062 i‡(
ªt
 <= 0)

2064 
	`BIO_¥ötf
(
bio_îr
,

2066 
	`ERR_¥öt_îr‹s
(
bio_îr
);

2067 
cou¡
=1;

2071 
d
=
	`Time_F
(
STOP
);

2072 
	`BIO_¥ötf
(
bio_îr
,
mr
 ? "+R2:%ld:%d:%.2f\n"

2074 
cou¡
,
rß_bôs
[
j
],
d
);

2075 
rß_ªsu…s
[
j
][1]=
d
/()
cou¡
;

2079 i‡(
rß_cou¡
 <= 1)

2082 
j
++; j<
RSA_NUM
; j++)

2083 
rß_doô
[
j
]=0;

2088 
	`RAND_p£udo_byãs
(
buf
,20);

2089 #i‚de‡
OPENSSL_NO_DSA


2090 i‡(
	`RAND_°©us
() != 1)

2092 
	`RAND_£ed
(
∫d_£ed
, Ñnd_seed);

2093 
∫d_Áke
 = 1;

2095 
j
=0; j<
DSA_NUM
; j++)

2097 
kk
;

2098 
ªt
;

2100 i‡(!
dß_doô
[
j
]) ;

2103 
ªt
=
	`DSA_sign
(
EVP_PKEY_DSA
,
buf
,20,
buf2
,

2104 &
kk
,
dß_key
[
j
]);

2105 i‡(
ªt
 == 0)

2107 
	`BIO_¥ötf
(
bio_îr
,"DSA sign failure. No DSA sign will be done.\n");

2108 
	`ERR_¥öt_îr‹s
(
bio_îr
);

2109 
rß_cou¡
=1;

2113 
	`pkey_¥öt_mesßge
("sign","dsa",

2114 
dß_c
[
j
][0],
dß_bôs
[j],

2115 
DSA_SECONDS
);

2116 
	`Time_F
(
START
);

2117 
cou¡
=0,
run
=1; 
	`COND
(
dß_c
[
j
][0]); count++)

2119 
ªt
=
	`DSA_sign
(
EVP_PKEY_DSA
,
buf
,20,
buf2
,

2120 &
kk
,
dß_key
[
j
]);

2121 i‡(
ªt
 == 0)

2123 
	`BIO_¥ötf
(
bio_îr
,

2125 
	`ERR_¥öt_îr‹s
(
bio_îr
);

2126 
cou¡
=1;

2130 
d
=
	`Time_F
(
STOP
);

2131 
	`BIO_¥ötf
(
bio_îr
,
mr
 ? "+R3:%ld:%d:%.2f\n"

2133 
cou¡
,
dß_bôs
[
j
],
d
);

2134 
dß_ªsu…s
[
j
][0]=
d
/()
cou¡
;

2135 
rß_cou¡
=
cou¡
;

2138 
ªt
=
	`DSA_vîify
(
EVP_PKEY_DSA
,
buf
,20,
buf2
,

2139 
kk
,
dß_key
[
j
]);

2140 i‡(
ªt
 <= 0)

2142 
	`BIO_¥ötf
(
bio_îr
,"DSA verify failure. No DSA verify will be done.\n");

2143 
	`ERR_¥öt_îr‹s
(
bio_îr
);

2144 
dß_doô
[
j
] = 0;

2148 
	`pkey_¥öt_mesßge
("verify","dsa",

2149 
dß_c
[
j
][1],
dß_bôs
[j],

2150 
DSA_SECONDS
);

2151 
	`Time_F
(
START
);

2152 
cou¡
=0,
run
=1; 
	`COND
(
dß_c
[
j
][1]); count++)

2154 
ªt
=
	`DSA_vîify
(
EVP_PKEY_DSA
,
buf
,20,
buf2
,

2155 
kk
,
dß_key
[
j
]);

2156 i‡(
ªt
 <= 0)

2158 
	`BIO_¥ötf
(
bio_îr
,

2160 
	`ERR_¥öt_îr‹s
(
bio_îr
);

2161 
cou¡
=1;

2165 
d
=
	`Time_F
(
STOP
);

2166 
	`BIO_¥ötf
(
bio_îr
,
mr
 ? "+R4:%ld:%d:%.2f\n"

2168 
cou¡
,
dß_bôs
[
j
],
d
);

2169 
dß_ªsu…s
[
j
][1]=
d
/()
cou¡
;

2172 i‡(
rß_cou¡
 <= 1)

2175 
j
++; j<
DSA_NUM
; j++)

2176 
dß_doô
[
j
]=0;

2179 i‡(
∫d_Áke
Ë
	`RAND_˛ónup
();

2182 #i‚de‡
OPENSSL_NO_ECDSA


2183 i‡(
	`RAND_°©us
() != 1)

2185 
	`RAND_£ed
(
∫d_£ed
, Ñnd_seed);

2186 
∫d_Áke
 = 1;

2188 
j
=0; j<
EC_NUM
; j++)

2190 
ªt
;

2192 i‡(!
ecdß_doô
[
j
]) ;

2193 
ecdß
[
j
] = 
	`EC_KEY_√w_by_curve_«me
(
ã°_curves
[j]);

2194 i‡(
ecdß
[
j
] =
NULL
)

2196 
	`BIO_¥ötf
(
bio_îr
,"ECDSA failure.\n");

2197 
	`ERR_¥öt_îr‹s
(
bio_îr
);

2198 
rß_cou¡
=1;

2203 
	`EC_KEY_¥ecompuã_mu…
(
ecdß
[
j
], 
NULL
);

2206 
	`EC_KEY_gíî©e_key
(
ecdß
[
j
]);

2207 
ªt
 = 
	`ECDSA_sign
(0, 
buf
, 20, 
ecdßsig
,

2208 &
ecdßsigÀn
, 
ecdß
[
j
]);

2209 i‡(
ªt
 == 0)

2211 
	`BIO_¥ötf
(
bio_îr
,"ECDSA sign failure. No ECDSA sign will be done.\n");

2212 
	`ERR_¥öt_îr‹s
(
bio_îr
);

2213 
rß_cou¡
=1;

2217 
	`pkey_¥öt_mesßge
("sign","ecdsa",

2218 
ecdß_c
[
j
][0],

2219 
ã°_curves_bôs
[
j
],

2220 
ECDSA_SECONDS
);

2222 
	`Time_F
(
START
);

2223 
cou¡
=0,
run
=1; 
	`COND
(
ecdß_c
[
j
][0]);

2224 
cou¡
++)

2226 
ªt
=
	`ECDSA_sign
(0, 
buf
, 20,

2227 
ecdßsig
, &
ecdßsigÀn
,

2228 
ecdß
[
j
]);

2229 i‡(
ªt
 == 0)

2231 
	`BIO_¥ötf
(
bio_îr
, "ECDSA sign failure\n");

2232 
	`ERR_¥öt_îr‹s
(
bio_îr
);

2233 
cou¡
=1;

2237 
d
=
	`Time_F
(
STOP
);

2239 
	`BIO_¥ötf
(
bio_îr
, 
mr
 ? "+R5:%ld:%d:%.2f\n" :

2241 
cou¡
, 
ã°_curves_bôs
[
j
], 
d
);

2242 
ecdß_ªsu…s
[
j
][0]=
d
/()
cou¡
;

2243 
rß_cou¡
=
cou¡
;

2247 
ªt
=
	`ECDSA_vîify
(0, 
buf
, 20, 
ecdßsig
,

2248 
ecdßsigÀn
, 
ecdß
[
j
]);

2249 i‡(
ªt
 != 1)

2251 
	`BIO_¥ötf
(
bio_îr
,"ECDSA verify failure. No ECDSA verify will be done.\n");

2252 
	`ERR_¥öt_îr‹s
(
bio_îr
);

2253 
ecdß_doô
[
j
] = 0;

2257 
	`pkey_¥öt_mesßge
("verify","ecdsa",

2258 
ecdß_c
[
j
][1],

2259 
ã°_curves_bôs
[
j
],

2260 
ECDSA_SECONDS
);

2261 
	`Time_F
(
START
);

2262 
cou¡
=0,
run
=1; 
	`COND
(
ecdß_c
[
j
][1]); count++)

2264 
ªt
=
	`ECDSA_vîify
(0, 
buf
, 20, 
ecdßsig
, 
ecdßsigÀn
, 
ecdß
[
j
]);

2265 i‡(
ªt
 != 1)

2267 
	`BIO_¥ötf
(
bio_îr
, "ECDSA verify failure\n");

2268 
	`ERR_¥öt_îr‹s
(
bio_îr
);

2269 
cou¡
=1;

2273 
d
=
	`Time_F
(
STOP
);

2274 
	`BIO_¥ötf
(
bio_îr
, 
mr
? "+R6:%ld:%d:%.2f\n"

2276 
cou¡
, 
ã°_curves_bôs
[
j
], 
d
);

2277 
ecdß_ªsu…s
[
j
][1]=
d
/()
cou¡
;

2280 i‡(
rß_cou¡
 <= 1)

2283 
j
++; j<
EC_NUM
; j++)

2284 
ecdß_doô
[
j
]=0;

2288 i‡(
∫d_Áke
Ë
	`RAND_˛ónup
();

2291 #i‚de‡
OPENSSL_NO_ECDH


2292 i‡(
	`RAND_°©us
() != 1)

2294 
	`RAND_£ed
(
∫d_£ed
, Ñnd_seed);

2295 
∫d_Áke
 = 1;

2297 
j
=0; j<
EC_NUM
; j++)

2299 i‡(!
ecdh_doô
[
j
]) ;

2300 
ecdh_a
[
j
] = 
	`EC_KEY_√w_by_curve_«me
(
ã°_curves
[j]);

2301 
ecdh_b
[
j
] = 
	`EC_KEY_√w_by_curve_«me
(
ã°_curves
[j]);

2302 i‡((
ecdh_a
[
j
] =
NULL
Ë|| (
ecdh_b
[j] == NULL))

2304 
	`BIO_¥ötf
(
bio_îr
,"ECDH failure.\n");

2305 
	`ERR_¥öt_îr‹s
(
bio_îr
);

2306 
rß_cou¡
=1;

2311 i‡(!
	`EC_KEY_gíî©e_key
(
ecdh_a
[
j
]) ||

2312 !
	`EC_KEY_gíî©e_key
(
ecdh_b
[
j
]))

2314 
	`BIO_¥ötf
(
bio_îr
,"ECDH key generation failure.\n");

2315 
	`ERR_¥öt_îr‹s
(
bio_îr
);

2316 
rß_cou¡
=1;

2323 
fõld_size
, 
ouéí
;

2324 *(*
kdf
)(c⁄° *
ö
, 
size_t
 
öÀn
, *
out
, size_à*
xouéí
);

2325 
fõld_size
 = 
	`EC_GROUP_gë_degªe
(
	`EC_KEY_gë0_group
(
ecdh_a
[
j
]));

2326 i‡(
fõld_size
 <= 24 * 8)

2328 
ouéí
 = 
KDF1_SHA1_Àn
;

2329 
kdf
 = 
KDF1_SHA1
;

2333 
ouéí
 = (
fõld_size
+7)/8;

2334 
kdf
 = 
NULL
;

2336 
£¸ë_size_a
 = 
	`ECDH_compuã_key
(
£¸ë_a
, 
ouéí
,

2337 
	`EC_KEY_gë0_public_key
(
ecdh_b
[
j
]),

2338 
ecdh_a
[
j
], 
kdf
);

2339 
£¸ë_size_b
 = 
	`ECDH_compuã_key
(
£¸ë_b
, 
ouéí
,

2340 
	`EC_KEY_gë0_public_key
(
ecdh_a
[
j
]),

2341 
ecdh_b
[
j
], 
kdf
);

2342 i‡(
£¸ë_size_a
 !
£¸ë_size_b
)

2343 
ecdh_checks
 = 0;

2345 
ecdh_checks
 = 1;

2347 
£¸ë_idx
 = 0;

2348 (
£¸ë_idx
 < 
£¸ë_size_a
)

2349 && (
ecdh_checks
 == 1);

2350 
£¸ë_idx
++)

2352 i‡(
£¸ë_a
[
£¸ë_idx
] !
£¸ë_b
[secret_idx])

2353 
ecdh_checks
 = 0;

2356 i‡(
ecdh_checks
 == 0)

2358 
	`BIO_¥ötf
(
bio_îr
,"ECDH computations don't match.\n");

2359 
	`ERR_¥öt_îr‹s
(
bio_îr
);

2360 
rß_cou¡
=1;

2363 
	`pkey_¥öt_mesßge
("","ecdh",

2364 
ecdh_c
[
j
][0],

2365 
ã°_curves_bôs
[
j
],

2366 
ECDH_SECONDS
);

2367 
	`Time_F
(
START
);

2368 
cou¡
=0,
run
=1; 
	`COND
(
ecdh_c
[
j
][0]); count++)

2370 
	`ECDH_compuã_key
(
£¸ë_a
, 
ouéí
,

2371 
	`EC_KEY_gë0_public_key
(
ecdh_b
[
j
]),

2372 
ecdh_a
[
j
], 
kdf
);

2374 
d
=
	`Time_F
(
STOP
);

2375 
	`BIO_¥ötf
(
bio_îr
, 
mr
 ? "+R7:%ld:%d:%.2f\n" :"%ld %d-bit ECDH ops in %.2fs\n",

2376 
cou¡
, 
ã°_curves_bôs
[
j
], 
d
);

2377 
ecdh_ªsu…s
[
j
][0]=
d
/()
cou¡
;

2378 
rß_cou¡
=
cou¡
;

2383 i‡(
rß_cou¡
 <= 1)

2386 
j
++; j<
EC_NUM
; j++)

2387 
ecdh_doô
[
j
]=0;

2390 i‡(
∫d_Áke
Ë
	`RAND_˛ónup
();

2392 #i‚de‡
NO_FORK


2393 
show_ªs
:

2395 if(!
mr
)

2397 
	`Ârötf
(
°dout
,"%s\n",
	`SSLóy_vîsi⁄
(
SSLEAY_VERSION
));

2398 
	`Ârötf
(
°dout
,"%s\n",
	`SSLóy_vîsi⁄
(
SSLEAY_BUILT_ON
));

2399 
	`¥ötf
("options:");

2400 
	`¥ötf
("%†",
	`BN_›ti⁄s
());

2401 #i‚de‡
OPENSSL_NO_MD2


2402 
	`¥ötf
("%†",
	`MD2_›ti⁄s
());

2404 #i‚de‡
OPENSSL_NO_RC4


2405 
	`¥ötf
("%†",
	`RC4_›ti⁄s
());

2407 #i‚de‡
OPENSSL_NO_DES


2408 
	`¥ötf
("%†",
	`DES_›ti⁄s
());

2410 #i‚de‡
OPENSSL_NO_AES


2411 
	`¥ötf
("%†",
	`AES_›ti⁄s
());

2413 #i‚de‡
OPENSSL_NO_IDEA


2414 
	`¥ötf
("%†",
	`idó_›ti⁄s
());

2416 #i‚de‡
OPENSSL_NO_BF


2417 
	`¥ötf
("%†",
	`BF_›ti⁄s
());

2419 
	`Ârötf
(
°dout
,"\n%s\n",
	`SSLóy_vîsi⁄
(
SSLEAY_CFLAGS
));

2422 i‡(
¥_hódî
)

2424 if(
mr
)

2425 
	`Ârötf
(
°dout
,"+H");

2428 
	`Ârötf
(
°dout
,"The 'numbers'áre in 1000s of bytesÖer secondÖrocessed.\n");

2429 
	`Ârötf
(
°dout
,"type ");

2431 
j
=0; j<
SIZE_NUM
; j++)

2432 
	`Ârötf
(
°dout
,
mr
 ? ":%d" : "%7d byãs",
Àngths
[
j
]);

2433 
	`Ârötf
(
°dout
,"\n");

2436 
k
=0; k<
ALGOR_NUM
; k++)

2438 i‡(!
doô
[
k
]) ;

2439 if(
mr
)

2440 
	`Ârötf
(
°dout
,"+F:%d:%s",
k
,
«mes
[k]);

2442 
	`Ârötf
(
°dout
,"%-13s",
«mes
[
k
]);

2443 
j
=0; j<
SIZE_NUM
; j++)

2445 i‡(
ªsu…s
[
k
][
j
] > 10000 && !
mr
)

2446 
	`Ârötf
(
°dout
," %11.2fk",
ªsu…s
[
k
][
j
]/1e3);

2448 
	`Ârötf
(
°dout
,
mr
 ? ":%.2f" : " %11.2‡",
ªsu…s
[
k
][
j
]);

2450 
	`Ârötf
(
°dout
,"\n");

2452 #i‚de‡
OPENSSL_NO_RSA


2453 
j
=1;

2454 
k
=0; k<
RSA_NUM
; k++)

2456 i‡(!
rß_doô
[
k
]) ;

2457 i‡(
j
 && !
mr
)

2459 
	`¥ötf
("%18ssign verify sign/s verify/s\n"," ");

2460 
j
=0;

2462 if(
mr
)

2463 
	`Ârötf
(
°dout
,"+F2:%u:%u:%f:%f\n",

2464 
k
,
rß_bôs
[k],
rß_ªsu…s
[k][0],

2465 
rß_ªsu…s
[
k
][1]);

2467 
	`Ârötf
(
°dout
,"rsa %4u bits %8.6fs %8.6fs %8.1f %8.1f\n",

2468 
rß_bôs
[
k
],
rß_ªsu…s
[k][0],rsa_results[k][1],

2469 1.0/
rß_ªsu…s
[
k
][0],1.0/rsa_results[k][1]);

2472 #i‚de‡
OPENSSL_NO_DSA


2473 
j
=1;

2474 
k
=0; k<
DSA_NUM
; k++)

2476 i‡(!
dß_doô
[
k
]) ;

2477 i‡(
j
 && !
mr
)

2479 
	`¥ötf
("%18ssign verify sign/s verify/s\n"," ");

2480 
j
=0;

2482 if(
mr
)

2483 
	`Ârötf
(
°dout
,"+F3:%u:%u:%f:%f\n",

2484 
k
,
dß_bôs
[k],
dß_ªsu…s
[k][0],dsa_results[k][1]);

2486 
	`Ârötf
(
°dout
,"dsa %4u bits %8.6fs %8.6fs %8.1f %8.1f\n",

2487 
dß_bôs
[
k
],
dß_ªsu…s
[k][0],dsa_results[k][1],

2488 1.0/
dß_ªsu…s
[
k
][0],1.0/dsa_results[k][1]);

2491 #i‚de‡
OPENSSL_NO_ECDSA


2492 
j
=1;

2493 
k
=0; k<
EC_NUM
; k++)

2495 i‡(!
ecdß_doô
[
k
]) ;

2496 i‡(
j
 && !
mr
)

2498 
	`¥ötf
("%30ssign verify sign/s verify/s\n"," ");

2499 
j
=0;

2502 i‡(
mr
)

2503 
	`Ârötf
(
°dout
,"+F4:%u:%u:%f:%f\n",

2504 
k
, 
ã°_curves_bôs
[k],

2505 
ecdß_ªsu…s
[
k
][0],ecdsa_results[k][1]);

2507 
	`Ârötf
(
°dout
,

2509 
ã°_curves_bôs
[
k
],

2510 
ã°_curves_«mes
[
k
],

2511 
ecdß_ªsu…s
[
k
][0],ecdsa_results[k][1],

2512 1.0/
ecdß_ªsu…s
[
k
][0],1.0/ecdsa_results[k][1]);

2517 #i‚de‡
OPENSSL_NO_ECDH


2518 
j
=1;

2519 
k
=0; k<
EC_NUM
; k++)

2521 i‡(!
ecdh_doô
[
k
]) ;

2522 i‡(
j
 && !
mr
)

2524 
	`¥ötf
("%30sop op/s\n"," ");

2525 
j
=0;

2527 i‡(
mr
)

2528 
	`Ârötf
(
°dout
,"+F5:%u:%u:%f:%f\n",

2529 
k
, 
ã°_curves_bôs
[k],

2530 
ecdh_ªsu…s
[
k
][0], 1.0/ecdh_results[k][0]);

2533 
	`Ârötf
(
°dout
,"%4u bitÉcdh (%s) %8.4fs %8.1f\n",

2534 
ã°_curves_bôs
[
k
],

2535 
ã°_curves_«mes
[
k
],

2536 
ecdh_ªsu…s
[
k
][0], 1.0/ecdh_results[k][0]);

2540 
mªt
=0;

2542 
íd
:

2543 
	`ERR_¥öt_îr‹s
(
bio_îr
);

2544 i‡(
buf
 !
NULL
Ë
	`OPENSSL_‰ì
(buf);

2545 i‡(
buf2
 !
NULL
Ë
	`OPENSSL_‰ì
(buf2);

2546 #i‚de‡
OPENSSL_NO_RSA


2547 
i
=0; i<
RSA_NUM
; i++)

2548 i‡(
rß_key
[
i
] !
NULL
)

2549 
	`RSA_‰ì
(
rß_key
[
i
]);

2551 #i‚de‡
OPENSSL_NO_DSA


2552 
i
=0; i<
DSA_NUM
; i++)

2553 i‡(
dß_key
[
i
] !
NULL
)

2554 
	`DSA_‰ì
(
dß_key
[
i
]);

2557 #i‚de‡
OPENSSL_NO_ECDSA


2558 
i
=0; i<
EC_NUM
; i++)

2559 i‡(
ecdß
[
i
] !
NULL
)

2560 
	`EC_KEY_‰ì
(
ecdß
[
i
]);

2562 #i‚de‡
OPENSSL_NO_ECDH


2563 
i
=0; i<
EC_NUM
; i++)

2565 i‡(
ecdh_a
[
i
] !
NULL
)

2566 
	`EC_KEY_‰ì
(
ecdh_a
[
i
]);

2567 i‡(
ecdh_b
[
i
] !
NULL
)

2568 
	`EC_KEY_‰ì
(
ecdh_b
[
i
]);

2572 
	`≠ps_shutdown
();

2573 
	`OPENSSL_EXIT
(
mªt
);

2574 
	}
}

2576 
	$¥öt_mesßge
(c⁄° *
s
, 
num
, 
Àngth
)

2578 #ifde‡
SIGALRM


2579 
	`BIO_¥ötf
(
bio_îr
,
mr
 ? "+DT:%s:%d:%d\n"

2580 : "Doög %†f‹ %d†⁄ %d sizêblocks: ",
s
,
SECONDS
,
Àngth
);

2581 ()
	`BIO_Êush
(
bio_îr
);

2582 
	`Æ¨m
(
SECONDS
);

2584 
	`BIO_¥ötf
(
bio_îr
,
mr
 ? "+DN:%s:%ld:%d\n"

2585 : "Doög %†%ldÅime†⁄ %d sizêblocks: ",
s
,
num
,
Àngth
);

2586 ()
	`BIO_Êush
(
bio_îr
);

2588 #ifde‡
LINT


2589 
num
=num;

2591 
	}
}

2593 
	$pkey_¥öt_mesßge
(c⁄° *
°r
, c⁄° *
°r2
, 
num
,

2594 
bôs
, 
tm
)

2596 #ifde‡
SIGALRM


2597 
	`BIO_¥ötf
(
bio_îr
,
mr
 ? "+DTP:%d:%s:%s:%d\n"

2598 : "Doög %d bô %†%s'†f‹ %ds: ",
bôs
,
°r
,
°r2
,
tm
);

2599 ()
	`BIO_Êush
(
bio_îr
);

2600 
	`Æ¨m
(
tm
);

2602 
	`BIO_¥ötf
(
bio_îr
,
mr
 ? "+DNP:%ld:%d:%s:%s\n"

2603 : "Doög %ld %d bô %†%s's: ",
num
,
bôs
,
°r
,
°r2
);

2604 ()
	`BIO_Êush
(
bio_îr
);

2606 #ifde‡
LINT


2607 
num
=num;

2609 
	}
}

2611 
	$¥öt_ªsu…
(
Æg
,
run_no
,
cou¡
,
time_u£d
)

2613 
	`BIO_¥ötf
(
bio_îr
,
mr
 ? "+R:%d:%s:%f\n"

2614 : "%d %s'†ö %.2fs\n",
cou¡
,
«mes
[
Æg
],
time_u£d
);

2615 
ªsu…s
[
Æg
][
run_no
]=(()
cou¡
)/
time_u£d
*
Àngths
[run_no];

2616 
	}
}

2618 #i‚de‡
NO_FORK


2619 *
	$s°r£p
(**
°rög
, c⁄° *
dñim
)

2621 
isdñim
[256];

2622 *
tokí
 = *
°rög
;

2624 i‡(**
°rög
 == 0)

2625  
NULL
;

2627 
	`mem£t
(
isdñim
, 0,  isdelim);

2628 
isdñim
[0] = 1;

2630 *
dñim
)

2632 
isdñim
[()(*
dñim
)] = 1;

2633 
dñim
++;

2636 !
isdñim
[()(**
°rög
)])

2638 (*
°rög
)++;

2641 i‡(**
°rög
)

2643 **
°rög
 = 0;

2644 (*
°rög
)++;

2647  
tokí
;

2648 
	}
}

2650 
	$do_mu…i
(
mu…i
)

2652 
n
;

2653 
fd
[2];

2654 *
fds
;

2655 
£p
[]=":";

2657 
fds
=
	`mÆloc
(
mu…i
* *fds);

2658 
n
=0 ;Ç < 
mu…i
 ; ++n)

2660 i‡(
	`pùe
(
fd
) == -1)

2662 
	`Ârötf
(
°dîr
, "pipe failure\n");

2663 
	`exô
(1);

2665 
	`fÊush
(
°dout
);

2666 
	`fÊush
(
°dîr
);

2667 if(
	`f‹k
())

2669 
	`˛o£
(
fd
[1]);

2670 
fds
[
n
]=
fd
[0];

2674 
	`˛o£
(
fd
[0]);

2675 
	`˛o£
(1);

2676 i‡(
	`dup
(
fd
[1]) == -1)

2678 
	`Ârötf
(
°dîr
, "dup failed\n");

2679 
	`exô
(1);

2681 
	`˛o£
(
fd
[1]);

2682 
mr
=1;

2683 
u£πime
=0;

2684 
	`‰ì
(
fds
);

2687 
	`¥ötf
("F‹ked chûd %d\n",
n
);

2691 
n
=0 ;Ç < 
mu…i
 ; ++n)

2693 
FILE
 *
f
;

2694 
buf
[1024];

2695 *
p
;

2697 
f
=
	`fd›í
(
fds
[
n
],"r");

2698 
	`fgës
(
buf
, buf,
f
))

2700 
p
=
	`°rchr
(
buf
,'\n');

2701 if(
p
)

2702 *
p
='\0';

2703 if(
buf
[0] != '+')

2705 
	`Ârötf
(
°dîr
,"Don't understandÜine '%s' from child %d\n",

2706 
buf
,
n
);

2709 
	`¥ötf
("GŸ: %†‰om %d\n",
buf
,
n
);

2710 if(!
	`°∫cmp
(
buf
,"+F:",3))

2712 
Æg
;

2713 
j
;

2715 
p
=
buf
+3;

2716 
Æg
=
	`©oi
(
	`s°r£p
(&
p
,
£p
));

2717 
	`s°r£p
(&
p
,
£p
);

2718 
j
=0 ; j < 
SIZE_NUM
 ; ++j)

2719 
ªsu…s
[
Æg
][
j
]+=
	`©of
(
	`s°r£p
(&
p
,
£p
));

2721 if(!
	`°∫cmp
(
buf
,"+F2:",4))

2723 
k
;

2724 
d
;

2726 
p
=
buf
+4;

2727 
k
=
	`©oi
(
	`s°r£p
(&
p
,
£p
));

2728 
	`s°r£p
(&
p
,
£p
);

2730 
d
=
	`©of
(
	`s°r£p
(&
p
,
£p
));

2731 if(
n
)

2732 
rß_ªsu…s
[
k
][0]=1/(1/rß_ªsu…s[k][0]+1/
d
);

2734 
rß_ªsu…s
[
k
][0]=
d
;

2736 
d
=
	`©of
(
	`s°r£p
(&
p
,
£p
));

2737 if(
n
)

2738 
rß_ªsu…s
[
k
][1]=1/(1/rß_ªsu…s[k][1]+1/
d
);

2740 
rß_ªsu…s
[
k
][1]=
d
;

2742 if(!
	`°∫cmp
(
buf
,"+F2:",4))

2744 
k
;

2745 
d
;

2747 
p
=
buf
+4;

2748 
k
=
	`©oi
(
	`s°r£p
(&
p
,
£p
));

2749 
	`s°r£p
(&
p
,
£p
);

2751 
d
=
	`©of
(
	`s°r£p
(&
p
,
£p
));

2752 if(
n
)

2753 
rß_ªsu…s
[
k
][0]=1/(1/rß_ªsu…s[k][0]+1/
d
);

2755 
rß_ªsu…s
[
k
][0]=
d
;

2757 
d
=
	`©of
(
	`s°r£p
(&
p
,
£p
));

2758 if(
n
)

2759 
rß_ªsu…s
[
k
][1]=1/(1/rß_ªsu…s[k][1]+1/
d
);

2761 
rß_ªsu…s
[
k
][1]=
d
;

2763 #i‚de‡
OPENSSL_NO_DSA


2764 if(!
	`°∫cmp
(
buf
,"+F3:",4))

2766 
k
;

2767 
d
;

2769 
p
=
buf
+4;

2770 
k
=
	`©oi
(
	`s°r£p
(&
p
,
£p
));

2771 
	`s°r£p
(&
p
,
£p
);

2773 
d
=
	`©of
(
	`s°r£p
(&
p
,
£p
));

2774 if(
n
)

2775 
dß_ªsu…s
[
k
][0]=1/(1/dß_ªsu…s[k][0]+1/
d
);

2777 
dß_ªsu…s
[
k
][0]=
d
;

2779 
d
=
	`©of
(
	`s°r£p
(&
p
,
£p
));

2780 if(
n
)

2781 
dß_ªsu…s
[
k
][1]=1/(1/dß_ªsu…s[k][1]+1/
d
);

2783 
dß_ªsu…s
[
k
][1]=
d
;

2786 #i‚de‡
OPENSSL_NO_ECDSA


2787 if(!
	`°∫cmp
(
buf
,"+F4:",4))

2789 
k
;

2790 
d
;

2792 
p
=
buf
+4;

2793 
k
=
	`©oi
(
	`s°r£p
(&
p
,
£p
));

2794 
	`s°r£p
(&
p
,
£p
);

2796 
d
=
	`©of
(
	`s°r£p
(&
p
,
£p
));

2797 if(
n
)

2798 
ecdß_ªsu…s
[
k
][0]=1/(1/ecdß_ªsu…s[k][0]+1/
d
);

2800 
ecdß_ªsu…s
[
k
][0]=
d
;

2802 
d
=
	`©of
(
	`s°r£p
(&
p
,
£p
));

2803 if(
n
)

2804 
ecdß_ªsu…s
[
k
][1]=1/(1/ecdß_ªsu…s[k][1]+1/
d
);

2806 
ecdß_ªsu…s
[
k
][1]=
d
;

2810 #i‚de‡
OPENSSL_NO_ECDH


2811 if(!
	`°∫cmp
(
buf
,"+F5:",4))

2813 
k
;

2814 
d
;

2816 
p
=
buf
+4;

2817 
k
=
	`©oi
(
	`s°r£p
(&
p
,
£p
));

2818 
	`s°r£p
(&
p
,
£p
);

2820 
d
=
	`©of
(
	`s°r£p
(&
p
,
£p
));

2821 if(
n
)

2822 
ecdh_ªsu…s
[
k
][0]=1/(1/ecdh_ªsu…s[k][0]+1/
d
);

2824 
ecdh_ªsu…s
[
k
][0]=
d
;

2829 if(!
	`°∫cmp
(
buf
,"+H:",3))

2833 
	`Ârötf
(
°dîr
,"Unknow¿ty≥ '%s' from chûd %d\n",
buf
,
n
);

2836 
	`f˛o£
(
f
);

2838 
	`‰ì
(
fds
);

2840 
	}
}

	@spkac.c

60 
	~<°dio.h
>

61 
	~<°dlib.h
>

62 
	~<°rög.h
>

63 
	~<time.h
>

64 
	~"≠ps.h
"

65 
	~<›ís¶/bio.h
>

66 
	~<›ís¶/c⁄f.h
>

67 
	~<›ís¶/îr.h
>

68 
	~<›ís¶/evp.h
>

69 
	~<›ís¶/lhash.h
>

70 
	~<›ís¶/x509.h
>

71 
	~<›ís¶/≥m.h
>

73 #unde‡
PROG


74 
	#PROG
 
•kac_maö


	)

80 
MAIN
(, **);

82 
	$MAIN
(
¨gc
, **
¨gv
)

84 
ENGINE
 *
e
 = 
NULL
;

85 
i
,
bad›s
=0, 
ªt
 = 1;

86 
BIO
 *
ö
 = 
NULL
,*
out
 = NULL;

87 
vîify
=0,
noout
=0,
pubkey
=0;

88 *
öfûe
 = 
NULL
,*
outfûe
 = NULL,*
¥og
;

89 *
∑sßrgö
 = 
NULL
, *
∑ssö
 = NULL;

90 c⁄° *
•kac
 = "SPKAC", *
•k£˘
 = "default";

91 *
•k°r
 = 
NULL
;

92 *
chÆÀnge
 = 
NULL
, *
keyfûe
 = NULL;

93 
CONF
 *
c⁄f
 = 
NULL
;

94 
NETSCAPE_SPKI
 *
•ki
 = 
NULL
;

95 
EVP_PKEY
 *
pkey
 = 
NULL
;

96 #i‚de‡
OPENSSL_NO_ENGINE


97 *
ígöe
=
NULL
;

100 
	`≠ps_°¨tup
();

102 i‡(!
bio_îr
Ëbio_î∏
	`BIO_√w_Â
(
°dîr
, 
BIO_NOCLOSE
);

104 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

105 
íd
;

107 
¥og
=
¨gv
[0];

108 
¨gc
--;

109 
¨gv
++;

110 
¨gc
 >= 1)

112 i‡(
	`°rcmp
(*
¨gv
,"-in") == 0)

114 i‡(--
¨gc
 < 1Ë
bad
;

115 
öfûe
*(++
¨gv
);

117 i‡(
	`°rcmp
(*
¨gv
,"-out") == 0)

119 i‡(--
¨gc
 < 1Ë
bad
;

120 
outfûe
*(++
¨gv
);

122 i‡(
	`°rcmp
(*
¨gv
,"-passin") == 0)

124 i‡(--
¨gc
 < 1Ë
bad
;

125 
∑sßrgö
*(++
¨gv
);

127 i‡(
	`°rcmp
(*
¨gv
,"-key") == 0)

129 i‡(--
¨gc
 < 1Ë
bad
;

130 
keyfûe
*(++
¨gv
);

132 i‡(
	`°rcmp
(*
¨gv
,"-challenge") == 0)

134 i‡(--
¨gc
 < 1Ë
bad
;

135 
chÆÀnge
*(++
¨gv
);

137 i‡(
	`°rcmp
(*
¨gv
,"-spkac") == 0)

139 i‡(--
¨gc
 < 1Ë
bad
;

140 
•kac
*(++
¨gv
);

142 i‡(
	`°rcmp
(*
¨gv
,"-spksect") == 0)

144 i‡(--
¨gc
 < 1Ë
bad
;

145 
•k£˘
*(++
¨gv
);

147 #i‚de‡
OPENSSL_NO_ENGINE


148 i‡(
	`°rcmp
(*
¨gv
,"-engine") == 0)

150 i‡(--
¨gc
 < 1Ë
bad
;

151 
ígöe
*(++
¨gv
);

154 i‡(
	`°rcmp
(*
¨gv
,"-noout") == 0)

155 
noout
=1;

156 i‡(
	`°rcmp
(*
¨gv
,"-pubkey") == 0)

157 
pubkey
=1;

158 i‡(
	`°rcmp
(*
¨gv
,"-verify") == 0)

159 
vîify
=1;

160 
bad›s
 = 1;

161 
¨gc
--;

162 
¨gv
++;

165 i‡(
bad›s
)

167 
bad
:

168 
	`BIO_¥ötf
(
bio_îr
,"%†[›ti⁄s]\n",
¥og
);

169 
	`BIO_¥ötf
(
bio_îr
,"where optionsáre\n");

170 
	`BIO_¥ötf
(
bio_îr
," -inárg input file\n");

171 
	`BIO_¥ötf
(
bio_îr
," -outárg output file\n");

172 
	`BIO_¥ötf
(
bio_îr
," -keyárg create SPKAC usingÖrivate key\n");

173 
	`BIO_¥ötf
(
bio_îr
," -passinárg input fileÖassÖhrase source\n");

174 
	`BIO_¥ötf
(
bio_îr
," -challengeárg challenge string\n");

175 
	`BIO_¥ötf
(
bio_îr
," -spkacárgálternative SPKACÇame\n");

176 
	`BIO_¥ötf
(
bio_îr
," -noout don'tÖrint SPKAC\n");

177 
	`BIO_¥ötf
(
bio_îr
," -pubkey outputÖublic key\n");

178 
	`BIO_¥ötf
(
bio_îr
," -verify verify SPKAC signature\n");

179 #i‚de‡
OPENSSL_NO_ENGINE


180 
	`BIO_¥ötf
(
bio_îr
," -engineÉ useÉngineÉ,Öossiblyá hardware device.\n");

182 
íd
;

185 
	`ERR_lﬂd_¸y±o_°rögs
();

186 if(!
	`≠p_∑sswd
(
bio_îr
, 
∑sßrgö
, 
NULL
, &
∑ssö
, NULL)) {

187 
	`BIO_¥ötf
(
bio_îr
, "Error gettingÖassword\n");

188 
íd
;

191 #i‚de‡
OPENSSL_NO_ENGINE


192 
e
 = 
	`£tup_ígöe
(
bio_îr
, 
ígöe
, 0);

195 if(
keyfûe
) {

196 
pkey
 = 
	`lﬂd_key
(
bio_îr
,

197 
	`°rcmp
(
keyfûe
, "-"Ë? keyfûê: 
NULL
,

198 
FORMAT_PEM
, 1, 
∑ssö
, 
e
, "private key");

199 if(!
pkey
) {

200 
íd
;

202 
•ki
 = 
	`NETSCAPE_SPKI_√w
();

203 if(
chÆÀnge
Ë
	`ASN1_STRING_£t
(
•ki
->
•kac
->challenge,

204 
chÆÀnge
, ()
	`°æí
(challenge));

205 
	`NETSCAPE_SPKI_£t_pubkey
(
•ki
, 
pkey
);

206 
	`NETSCAPE_SPKI_sign
(
•ki
, 
pkey
, 
	`EVP_md5
());

207 
•k°r
 = 
	`NETSCAPE_SPKI_b64_ícode
(
•ki
);

209 i‡(
outfûe
Ë
out
 = 
	`BIO_√w_fûe
(outfile, "w");

211 
out
 = 
	`BIO_√w_Â
(
°dout
, 
BIO_NOCLOSE
);

212 #ifde‡
OPENSSL_SYS_VMS


214 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

215 
out
 = 
	`BIO_push
(
tmpbio
, out);

220 if(!
out
) {

221 
	`BIO_¥ötf
(
bio_îr
, "Error opening output file\n");

222 
	`ERR_¥öt_îr‹s
(
bio_îr
);

223 
íd
;

225 
	`BIO_¥ötf
(
out
, "SPKAC=%s\n", 
•k°r
);

226 
	`OPENSSL_‰ì
(
•k°r
);

227 
ªt
 = 0;

228 
íd
;

233 i‡(
öfûe
Ë
ö
 = 
	`BIO_√w_fûe
(infile, "r");

234 
ö
 = 
	`BIO_√w_Â
(
°dö
, 
BIO_NOCLOSE
);

236 if(!
ö
) {

237 
	`BIO_¥ötf
(
bio_îr
, "Error opening input file\n");

238 
	`ERR_¥öt_îr‹s
(
bio_îr
);

239 
íd
;

242 
c⁄f
 = 
	`NCONF_√w
(
NULL
);

243 
i
 = 
	`NCONF_lﬂd_bio
(
c⁄f
, 
ö
, 
NULL
);

245 if(!
i
) {

246 
	`BIO_¥ötf
(
bio_îr
, "ErrorÖarsing config file\n");

247 
	`ERR_¥öt_îr‹s
(
bio_îr
);

248 
íd
;

251 
•k°r
 = 
	`NCONF_gë_°rög
(
c⁄f
, 
•k£˘
, 
•kac
);

253 if(!
•k°r
) {

254 
	`BIO_¥ötf
(
bio_îr
, "C™'àföd SPKAC cÆÀd \"%s\"\n", 
•kac
);

255 
	`ERR_¥öt_îr‹s
(
bio_îr
);

256 
íd
;

259 
•ki
 = 
	`NETSCAPE_SPKI_b64_decode
(
•k°r
, -1);

261 if(!
•ki
) {

262 
	`BIO_¥ötf
(
bio_îr
, "ErrorÜoading SPKAC\n");

263 
	`ERR_¥öt_îr‹s
(
bio_îr
);

264 
íd
;

267 i‡(
outfûe
Ë
out
 = 
	`BIO_√w_fûe
(outfile, "w");

269 
out
 = 
	`BIO_√w_Â
(
°dout
, 
BIO_NOCLOSE
);

270 #ifde‡
OPENSSL_SYS_VMS


272 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

273 
out
 = 
	`BIO_push
(
tmpbio
, out);

278 if(!
out
) {

279 
	`BIO_¥ötf
(
bio_îr
, "Error opening output file\n");

280 
	`ERR_¥öt_îr‹s
(
bio_îr
);

281 
íd
;

284 if(!
noout
Ë
	`NETSCAPE_SPKI_¥öt
(
out
, 
•ki
);

285 
pkey
 = 
	`NETSCAPE_SPKI_gë_pubkey
(
•ki
);

286 if(
vîify
) {

287 
i
 = 
	`NETSCAPE_SPKI_vîify
(
•ki
, 
pkey
);

288 i‡(
i
 > 0Ë
	`BIO_¥ötf
(
bio_îr
, "Signature OK\n");

290 
	`BIO_¥ötf
(
bio_îr
, "Signature Failure\n");

291 
	`ERR_¥öt_îr‹s
(
bio_îr
);

292 
íd
;

295 if(
pubkey
Ë
	`PEM_wrôe_bio_PUBKEY
(
out
, 
pkey
);

297 
ªt
 = 0;

299 
íd
:

300 
	`NCONF_‰ì
(
c⁄f
);

301 
	`NETSCAPE_SPKI_‰ì
(
•ki
);

302 
	`BIO_‰ì
(
ö
);

303 
	`BIO_‰ì_Æl
(
out
);

304 
	`EVP_PKEY_‰ì
(
pkey
);

305 if(
∑ssö
Ë
	`OPENSSL_‰ì
(passin);

306 
	`≠ps_shutdown
();

307 
	`OPENSSL_EXIT
(
ªt
);

308 
	}
}

	@srp.c

58 
	~<›ís¶/›ís¶c⁄f.h
>

60 #i‚de‡
OPENSSL_NO_SRP


61 
	~<°dio.h
>

62 
	~<°dlib.h
>

63 
	~<°rög.h
>

64 
	~<›ís¶/c⁄f.h
>

65 
	~<›ís¶/bio.h
>

66 
	~<›ís¶/îr.h
>

67 
	~<›ís¶/txt_db.h
>

68 
	~<›ís¶/buf„r.h
>

69 
	~<›ís¶/§p.h
>

71 
	~"≠ps.h
"

73 #unde‡
PROG


74 
	#PROG
 
§p_maö


	)

76 
	#BASE_SECTION
 "§p"

	)

77 
	#CONFIG_FILE
 "›ís¶.˙f"

	)

79 
	#ENV_RANDFILE
 "RANDFILE"

	)

81 
	#ENV_DATABASE
 "§pvfûe"

	)

82 
	#ENV_DEFAULT_SRP
 "deÁu…_§p"

	)

84 *
	g§p_ußge
[]={

99 #i‚de‡
OPENSSL_NO_ENGINE


102 
NULL


105 #ifde‡
EFENCE


106 
EF_PROTECT_FREE
;

107 
EF_PROTECT_BELOW
;

108 
EF_ALIGNMENT
;

111 
CONF
 *
	gc⁄f
=
NULL
;

112 *
	g£˘i⁄
=
NULL
;

114 
	#VERBOSE
 i‡(
vîbo£
)

	)

115 
	#VVERBOSE
 i‡(
vîbo£
>1)

	)

118 
MAIN
(, **);

120 
	$gë_ödex
(
CA_DB
 *
db
, * 
id
, 
ty≥
)

122 ** 
µ
;

123 
i
;

124 i‡(
id
 =
NULL
)  -1;

125 i‡(
ty≥
 =
DB_SRP_INDEX
)

126 
i
 = 0; i < 
	`sk_OPENSSL_PSTRING_num
(
db
->db->
d©a
); i++)

128 
µ
 = 
	`sk_OPENSSL_PSTRING_vÆue
(
db
->db->
d©a
,
i
);

129 i‡(
µ
[
DB_§±y≥
][0] =
DB_SRP_INDEX
 && !
	`°rcmp
(
id
,µ[
DB_§pid
]))

130  
i
;

132 
i
 = 0; i < 
	`sk_OPENSSL_PSTRING_num
(
db
->db->
d©a
); i++)

134 
µ
 = 
	`sk_OPENSSL_PSTRING_vÆue
(
db
->db->
d©a
,
i
);

136 i‡(
µ
[
DB_§±y≥
][0] !
DB_SRP_INDEX
 && !
	`°rcmp
(
id
,µ[
DB_§pid
]))

137  
i
;

141 
	}
}

143 
	$¥öt_íåy
(
CA_DB
 *
db
, 
BIO
 *
bio
, 
ödx
, 
vîbo£
, *
s
)

145 i‡(
ödx
 >0 && 
vîbo£
)

147 
j
;

148 **
µ
 = 
	`sk_OPENSSL_PSTRING_vÆue
(
db
->db->
d©a
, 
ödx
);

149 
	`BIO_¥ötf
(
bio
, "%†\"%s\"\n", 
s
, 
µ
[
DB_§pid
]);

150 
j
 = 0; j < 
DB_NUMBER
; j++)

152 
	`BIO_¥ötf
(
bio_îr
," %d = \"%s\"\n", 
j
, 
µ
[j]);

155 
	}
}

157 
	$¥öt_ödex
(
CA_DB
 *
db
, 
BIO
 *
bio
, 
ödexödex
, 
vîbo£
)

159 
	`¥öt_íåy
(
db
, 
bio
, 
ödexödex
, 
vîbo£
, "g NÉntry") ;

160 
	}
}

162 
	$¥öt_u£r
(
CA_DB
 *
db
, 
BIO
 *
bio
, 
u£rödex
, 
vîbo£
)

164 i‡(
vîbo£
 > 0)

166 **
µ
 = 
	`sk_OPENSSL_PSTRING_vÆue
(
db
->db->
d©a
,
u£rödex
);

168 i‡(
µ
[
DB_§±y≥
][0] != 'I')

170 
	`¥öt_íåy
(
db
, 
bio
, 
u£rödex
, 
vîbo£
, "UserÉntry");

171 
	`¥öt_íåy
(
db
, 
bio
, 
	`gë_ödex
(db, 
µ
[
DB_§pgN
], 'I'), 
vîbo£
, "g NÉntry");

175 
	}
}

177 
	$upd©e_ödex
(
CA_DB
 *
db
, 
BIO
 *
bio
, **
row
)

179 ** 
úow
;

180 
i
;

182 i‡((
úow
=(**)
	`OPENSSL_mÆloc
((*)*(
DB_NUMBER
+1))Ë=
NULL
)

184 
	`BIO_¥ötf
(
bio_îr
,"Memoryállocation failure\n");

188 
i
=0; i<
DB_NUMBER
; i++)

190 
úow
[
i
]=
row
[i];

191 
row
[
i
]=
NULL
;

193 
úow
[
DB_NUMBER
]=
NULL
;

195 i‡(!
	`TXT_DB_ö£π
(
db
->db,
úow
))

197 
	`BIO_¥ötf
(
bio
,"failedÅo update srpvfile\n");

198 
	`BIO_¥ötf
(
bio
,"TXT_DBÉº‹Çumbî %ld\n",
db
->db->
îr‹
);

199 
	`OPENSSL_‰ì
(
úow
);

203 
	}
}

205 
	$lookup_Áû
(c⁄° *
«me
, *
èg
)

207 
	`BIO_¥ötf
(
bio_îr
,"v¨übÀÜooku∞Áûed f‹ %s::%s\n",
«me
,
èg
);

208 
	}
}

211 *
	$§p_vîify_u£r
(c⁄° *
u£r
, c⁄° *
§p_vîifõr
,

212 *
§p_u£rß…
, c⁄° *
g
, c⁄° *
N
,

213 c⁄° *
∑ssö
, 
BIO
 *
bio
, 
vîbo£
)

215 
∑ssw‹d
[1024];

216 
PW_CB_DATA
 
cb_tmp
;

217 *
vîifõr
 = 
NULL
;

218 *
gNid
 = 
NULL
;

220 
cb_tmp
.
¥om±_öfo
 = 
u£r
;

221 
cb_tmp
.
∑ssw‹d
 = 
∑ssö
;

223 i‡(
	`∑ssw‹d_ˇŒback
(
∑ssw‹d
, 1024, 0, &
cb_tmp
) >0)

225 
VERBOSE
 
	`BIO_¥ötf
(
bio
,"VÆid©ög\¿ u£r=\"%s\"\¿§p_vîifõr=\"%s\"\¿§p_u£rß…=\"%s\"\¿g=\"%s\"\¿N=\"%s\"\n",
u£r
,
§p_vîifõr
,
§p_u£rß…
, 
g
, 
N
);

226 
	`BIO_¥ötf
(
bio
, "Pas†%s\n", 
∑ssw‹d
);

228 i‡(!(
gNid
=
	`SRP_¸óã_vîifõr
(
u£r
, 
∑ssw‹d
, &
§p_u£rß…
, &
vîifõr
, 
N
, 
g
)))

230 
	`BIO_¥ötf
(
bio
, "InternalÉrror validating SRP verifier\n");

234 i‡(
	`°rcmp
(
vîifõr
, 
§p_vîifõr
))

235 
gNid
 = 
NULL
;

236 
	`OPENSSL_‰ì
(
vîifõr
);

239  
gNid
;

240 
	}
}

242 *
	$§p_¸óã_u£r
(*
u£r
, **
§p_vîifõr
,

243 **
§p_u£rß…
, *
g
, *
N
,

244 *
∑ssout
, 
BIO
 *
bio
, 
vîbo£
)

246 
∑ssw‹d
[1024];

247 
PW_CB_DATA
 
cb_tmp
;

248 *
gNid
 = 
NULL
;

249 *
ß…
 = 
NULL
;

250 
cb_tmp
.
¥om±_öfo
 = 
u£r
;

251 
cb_tmp
.
∑ssw‹d
 = 
∑ssout
;

253 i‡(
	`∑ssw‹d_ˇŒback
(
∑ssw‹d
,1024,1,&
cb_tmp
) >0)

255 
VERBOSE
 
	`BIO_¥ötf
(
bio
,"Cª©ög\¿u£r=\"%s\"\¿g=\"%s\"\¿N=\"%s\"\n",
u£r
,
g
,
N
);

256 i‡(!(
gNid
 =
	`SRP_¸óã_vîifõr
(
u£r
, 
∑ssw‹d
, &
ß…
, 
§p_vîifõr
, 
N
, 
g
)))

258 
	`BIO_¥ötf
(
bio
,"InternalÉrror creating SRP verifier\n");

261 *
§p_u£rß…
 = 
ß…
;

262 
VVERBOSE
 
	`BIO_¥ötf
(
bio
,"gNid=%†ß… =\"%s\"\¿vîifõ∏=\"%s\"\n", 
gNid
,
ß…
, *
§p_vîifõr
);

265  
gNid
;

266 
	}
}

268 
	$MAIN
(
¨gc
, **
¨gv
)

270 
add_u£r
 = 0;

271 
li°_u£r
= 0;

272 
dñëe_u£r
= 0;

273 
modify_u£r
= 0;

274 * 
u£r
 = 
NULL
;

276 *
∑sßrgö
 = 
NULL
, *
∑sßrgout
 = NULL;

277 *
∑ssö
 = 
NULL
, *
∑ssout
 = NULL;

278 * 
gN
 = 
NULL
;

279 
gNödex
 = -1;

280 ** 
gNrow
 = 
NULL
;

281 
maxgN
 = -1;

283 * 
u£röfo
 = 
NULL
;

285 
bad›s
=0;

286 
ªt
=1;

287 
îr‹s
=0;

288 
vîbo£
=0;

289 
doupd©edb
=0;

290 *
c⁄figfûe
=
NULL
;

291 *
dbfûe
=
NULL
;

292 
CA_DB
 *
db
=
NULL
;

293 **
µ
 ;

294 
i
;

295 
îr‹löe
 = -1;

296 *
øndfûe
=
NULL
;

297 #i‚de‡
OPENSSL_NO_ENGINE


298 *
ígöe
 = 
NULL
;

300 *
to‰ì
=
NULL
;

301 
DB_ATTR
 
db_©å
;

303 #ifde‡
EFENCE


304 
EF_PROTECT_FREE
=1;

305 
EF_PROTECT_BELOW
=1;

306 
EF_ALIGNMENT
=0;

309 
	`≠ps_°¨tup
();

311 
c⁄f
 = 
NULL
;

312 
£˘i⁄
 = 
NULL
;

314 i‡(
bio_îr
 =
NULL
)

315 i‡((
bio_îr
=
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

316 
	`BIO_£t_Â
(
bio_îr
,
°dîr
,
BIO_NOCLOSE
|
BIO_FP_TEXT
);

318 
¨gc
--;

319 
¨gv
++;

320 
¨gc
 >1 && 
bad›s
 == 0)

322 i‡(
	`°rcmp
(*
¨gv
,"-verbose") == 0)

323 
vîbo£
++;

324 i‡(
	`°rcmp
(*
¨gv
,"-config") == 0)

326 i‡(--
¨gc
 < 1Ë
bad
;

327 
c⁄figfûe
*(++
¨gv
);

329 i‡(
	`°rcmp
(*
¨gv
,"-name") == 0)

331 i‡(--
¨gc
 < 1Ë
bad
;

332 
£˘i⁄
*(++
¨gv
);

334 i‡(
	`°rcmp
(*
¨gv
,"-srpvfile") == 0)

336 i‡(--
¨gc
 < 1Ë
bad
;

337 
dbfûe
*(++
¨gv
);

339 i‡(
	`°rcmp
(*
¨gv
,"-add") == 0)

340 
add_u£r
=1;

341 i‡(
	`°rcmp
(*
¨gv
,"-delete") == 0)

342 
dñëe_u£r
=1;

343 i‡(
	`°rcmp
(*
¨gv
,"-modify") == 0)

344 
modify_u£r
=1;

345 i‡(
	`°rcmp
(*
¨gv
,"-list") == 0)

346 
li°_u£r
=1;

347 i‡(
	`°rcmp
(*
¨gv
,"-gn") == 0)

349 i‡(--
¨gc
 < 1Ë
bad
;

350 
gN
*(++
¨gv
);

352 i‡(
	`°rcmp
(*
¨gv
,"-userinfo") == 0)

354 i‡(--
¨gc
 < 1Ë
bad
;

355 
u£röfo
*(++
¨gv
);

357 i‡(
	`°rcmp
(*
¨gv
,"-passin") == 0)

359 i‡(--
¨gc
 < 1Ë
bad
;

360 
∑sßrgö
*(++
¨gv
);

362 i‡(
	`°rcmp
(*
¨gv
,"-passout") == 0)

364 i‡(--
¨gc
 < 1Ë
bad
;

365 
∑sßrgout
*(++
¨gv
);

367 #i‚de‡
OPENSSL_NO_ENGINE


368 i‡(
	`°rcmp
(*
¨gv
,"-engine") == 0)

370 i‡(--
¨gc
 < 1Ë
bad
;

371 
ígöe
*(++
¨gv
);

375 i‡(**
¨gv
 == '-')

377 
bad
:

378 
	`BIO_¥ötf
(
bio_îr
,"unknow¿›ti⁄ %s\n",*
¨gv
);

379 
bad›s
=1;

385 
¨gc
--;

386 
¨gv
++;

389 i‡(
dbfûe
 && 
c⁄figfûe
)

391 
	`BIO_¥ötf
(
bio_îr
,"-dbfileánd -configfile cannot be specifiedÅogether.\n");

392 
bad›s
 = 1;

394 i‡(
add_u£r
+
dñëe_u£r
+
modify_u£r
+
li°_u£r
 != 1)

396 
	`BIO_¥ötf
(
bio_îr
,"Exactly one ofÅhe options -add, -delete, -modify -list must be specified.\n");

397 
bad›s
 = 1;

399 i‡(
dñëe_u£r
+
modify_u£r
+dñëe_u£r=1 && 
¨gc
 <= 0)

401 
	`BIO_¥ötf
(
bio_îr
,"NeedátÜeast one user for options -add, -delete, -modify. \n");

402 
bad›s
 = 1;

404 i‡((
∑ssö
 || 
∑ssout
Ë&& 
¨gc
 != 1 )

406 
	`BIO_¥ötf
(
bio_îr
,"-passin, -passoutárguments only valid with one user.\n");

407 
bad›s
 = 1;

410 i‡(
bad›s
)

412 
µ
=
§p_ußge
; (*µ !
NULL
);Öp++)

413 
	`BIO_¥ötf
(
bio_îr
,"%s",*
µ
);

415 
	`BIO_¥ötf
(
bio_îr
," -ønd fûe%cfûe%c...\n", 
LIST_SEPARATOR_CHAR
, LIST_SEPARATOR_CHAR);

416 
	`BIO_¥ötf
(
bio_îr
,"ÜoadÅhe file (orÅhe files inÅhe directory) into\n");

417 
	`BIO_¥ötf
(
bio_îr
,"ÅheÑandomÇumber generator\n");

418 
îr
;

421 
	`ERR_lﬂd_¸y±o_°rögs
();

423 #i‚de‡
OPENSSL_NO_ENGINE


424 
	`£tup_ígöe
(
bio_îr
, 
ígöe
, 0);

427 if(!
	`≠p_∑sswd
(
bio_îr
, 
∑sßrgö
, 
∑sßrgout
, &
∑ssö
, &
∑ssout
))

429 
	`BIO_¥ötf
(
bio_îr
, "Error gettingÖasswords\n");

430 
îr
;

433 i‡(!
dbfûe
)

438 
to‰ì
=
NULL
;

439 i‡(
c⁄figfûe
 =
NULL
Ëc⁄figfûê
	`gëív
("OPENSSL_CONF");

440 i‡(
c⁄figfûe
 =
NULL
Ëc⁄figfûê
	`gëív
("SSLEAY_CONF");

441 i‡(
c⁄figfûe
 =
NULL
)

443 c⁄° *
s
=
	`X509_gë_deÁu…_˚π_¨ó
();

444 
size_t
 
Àn
;

446 #ifde‡
OPENSSL_SYS_VMS


447 
Àn
 = 
	`°æí
(
s
)+(
CONFIG_FILE
);

448 
to‰ì
=
	`OPENSSL_mÆloc
(
Àn
);

449 
	`°r˝y
(
to‰ì
,
s
);

451 
Àn
 = 
	`°æí
(
s
)+(
CONFIG_FILE
)+1;

452 
to‰ì
=
	`OPENSSL_mÆloc
(
Àn
);

453 
	`BUF_°æ˝y
(
to‰ì
,
s
,
Àn
);

454 
	`BUF_°æˇt
(
to‰ì
,"/",
Àn
);

456 
	`BUF_°æˇt
(
to‰ì
,
CONFIG_FILE
,
Àn
);

457 
c⁄figfûe
=
to‰ì
;

460 
VERBOSE
 
	`BIO_¥ötf
(
bio_îr
,"Usög c⁄figuøti⁄ from %s\n",
c⁄figfûe
);

461 
c⁄f
 = 
	`NCONF_√w
(
NULL
);

462 i‡(
	`NCONF_lﬂd
(
c⁄f
,
c⁄figfûe
,&
îr‹löe
) <= 0)

464 i‡(
îr‹löe
 <= 0)

465 
	`BIO_¥ötf
(
bio_îr
,"errorÜoadingÅhe config file '%s'\n",

466 
c⁄figfûe
);

468 
	`BIO_¥ötf
(
bio_îr
,"error onÜine %ld of config file '%s'\n"

469 ,
îr‹löe
,
c⁄figfûe
);

470 
îr
;

472 if(
to‰ì
)

474 
	`OPENSSL_‰ì
(
to‰ì
);

475 
to‰ì
 = 
NULL
;

478 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
c⁄f
))

479 
îr
;

482 i‡(
£˘i⁄
 =
NULL
)

484 
VERBOSE
 
	`BIO_¥ötf
(
bio_îr
,"åyögÅÿªad " 
ENV_DEFAULT_SRP
 " in \" BASE_SECTION \"\n");

486 
£˘i⁄
=
	`NCONF_gë_°rög
(
c⁄f
,
BASE_SECTION
,
ENV_DEFAULT_SRP
);

487 i‡(
£˘i⁄
 =
NULL
)

489 
	`lookup_Áû
(
BASE_SECTION
,
ENV_DEFAULT_SRP
);

490 
îr
;

494 i‡(
øndfûe
 =
NULL
 && 
c⁄f
)

495 
øndfûe
 = 
	`NCONF_gë_°rög
(
c⁄f
, 
BASE_SECTION
, "RANDFILE");

498 
VERBOSE
 
	`BIO_¥ötf
(
bio_îr
,"åyögÅÿªad " 
ENV_DATABASE
 " i¿£˘i⁄ \"%s\"\n",
£˘i⁄
);

500 i‡((
dbfûe
=
	`NCONF_gë_°rög
(
c⁄f
,
£˘i⁄
,
ENV_DATABASE
)Ë=
NULL
)

502 
	`lookup_Áû
(
£˘i⁄
,
ENV_DATABASE
);

503 
îr
;

507 i‡(
øndfûe
 =
NULL
)

508 
	`ERR_˛ór_îr‹
();

510 
	`≠p_RAND_lﬂd_fûe
(
øndfûe
, 
bio_îr
, 0);

512 
VERBOSE
 
	`BIO_¥ötf
(
bio_îr
,"TryögÅÿªad SRP vîifõ∏fûê\"%s\"\n",
dbfûe
);

514 
db
 = 
	`lﬂd_ödex
(
dbfûe
, &
db_©å
);

515 i‡(
db
 =
NULL
Ë
îr
;

518 
i
 = 0; i < 
	`sk_OPENSSL_PSTRING_num
(
db
->db->
d©a
); i++)

520 
µ
 = 
	`sk_OPENSSL_PSTRING_vÆue
(
db
->db->
d©a
, 
i
);

522 i‡(
µ
[
DB_§±y≥
][0] =
DB_SRP_INDEX
)

524 
maxgN
 = 
i
;

525 i‡(
gNödex
 < 0 && 
gN
 !
NULL
 && !
	`°rcmp
(gN, 
µ
[
DB_§pid
]))

526 
gNödex
 = 
i
;

528 
	`¥öt_ödex
(
db
, 
bio_îr
, 
i
, 
vîbo£
 > 1);

532 
VERBOSE
 
	`BIO_¥ötf
(
bio_îr
, "Database initialised\n");

534 i‡(
gNödex
 >= 0)

536 
gNrow
 = 
	`sk_OPENSSL_PSTRING_vÆue
(
db
->db->
d©a
,
gNödex
);

537 
	`¥öt_íåy
(
db
, 
bio_îr
, 
gNödex
, 
vîbo£
 > 1, "Default gánd N");

539 i‡(
maxgN
 > 0 && !
	`SRP_gë_deÁu…_gN
(
gN
))

541 
	`BIO_¥ötf
(
bio_îr
, "Nÿgánd N vÆuêf‹ index \"%s\"\n", 
gN
);

542 
îr
;

546 
VERBOSE
 
	`BIO_¥ötf
(
bio_îr
, "Database hasÇo g N information.\n");

547 
gNrow
 = 
NULL
;

551 
VVERBOSE
 
	`BIO_¥ötf
(
bio_îr
,"Starting userÖrocessing\n");

553 i‡(
¨gc
 > 0)

554 
u£r
 = *(
¨gv
++) ;

556 
li°_u£r
 || 
u£r
)

558 
u£rödex
 = -1;

559 i‡(
u£r
)

560 
VVERBOSE
 
	`BIO_¥ötf
(
bio_îr
, "Pro˚ssög u£∏\"%s\"\n", 
u£r
);

561 i‡((
u£rödex
 = 
	`gë_ödex
(
db
, 
u£r
, 'U')) >= 0)

563 
	`¥öt_u£r
(
db
, 
bio_îr
, 
u£rödex
, (
vîbo£
 > 0Ë|| 
li°_u£r
);

566 i‡(
li°_u£r
)

568 i‡(
u£r
 =
NULL
)

570 
	`BIO_¥ötf
(
bio_îr
,"Listáll users\n");

572 
i
 = 0; i < 
	`sk_OPENSSL_PSTRING_num
(
db
->db->
d©a
); i++)

574 
	`¥öt_u£r
(
db
,
bio_îr
, 
i
, 1);

576 
li°_u£r
 = 0;

578 i‡(
u£rödex
 < 0)

580 
	`BIO_¥ötf
(
bio_îr
, "user \"%s\" doesÇotÉxist, ignored.Å\n",

581 
u£r
);

582 
îr‹s
++;

585 i‡(
add_u£r
)

587 i‡(
u£rödex
 >= 0)

590 **
row
 = 
	`sk_OPENSSL_PSTRING_vÆue
(
db
->db->
d©a
, 
u£rödex
);

591 
	`BIO_¥ötf
(
bio_îr
, "u£∏\"%s\"Ñó˘iv©ed.\n", 
u£r
);

592 
row
[
DB_§±y≥
][0] = 'V';

594 
doupd©edb
 = 1;

598 *
row
[
DB_NUMBER
] ; *
gNid
;

599 
row
[
DB_§pvîifõr
] = 
NULL
;

600 
row
[
DB_§pß…
] = 
NULL
;

601 
row
[
DB_§pöfo
] = 
NULL
;

602 i‡(!(
gNid
 = 
	`§p_¸óã_u£r
(
u£r
,&(
row
[
DB_§pvîifõr
]), &‘ow[
DB_§pß…
]),
gNrow
?gNrow[DB_§pß…]:
gN
,gNrow?gNrow[DB_§pvîifõr]:
NULL
, 
∑ssout
, 
bio_îr
,
vîbo£
)))

604 
	`BIO_¥ötf
(
bio_îr
, "C™nŸ cª©ê§∞vîifõ∏f‹ u£∏\"%s\", o≥øti⁄áb™d⁄ed .\n", 
u£r
);

605 
îr‹s
++;

606 
îr
;

608 
row
[
DB_§pid
] = 
	`BUF_°rdup
(
u£r
);

609 
row
[
DB_§±y≥
] = 
	`BUF_°rdup
("v");

610 
row
[
DB_§pgN
] = 
	`BUF_°rdup
(
gNid
);

612 i‡(!
row
[
DB_§pid
] || !row[
DB_§pgN
] || !row[
DB_§±y≥
] || !row[
DB_§pvîifõr
] || !row[
DB_§pß…
] ||

613 (
u£röfo
 && (!(
row
[
DB_§pöfo
] = 
	`BUF_°rdup
(userinfo)))) ||

614 !
	`upd©e_ödex
(
db
, 
bio_îr
, 
row
))

616 i‡(
row
[
DB_§pid
]Ë
	`OPENSSL_‰ì
(row[DB_srpid]);

617 i‡(
row
[
DB_§pgN
]Ë
	`OPENSSL_‰ì
(row[DB_srpgN]);

618 i‡(
row
[
DB_§pöfo
]Ë
	`OPENSSL_‰ì
(row[DB_srpinfo]);

619 i‡(
row
[
DB_§±y≥
]Ë
	`OPENSSL_‰ì
(row[DB_srptype]);

620 i‡(
row
[
DB_§pvîifõr
]Ë
	`OPENSSL_‰ì
(row[DB_srpverifier]);

621 i‡(
row
[
DB_§pß…
]Ë
	`OPENSSL_‰ì
(row[DB_srpsalt]);

622 
îr
;

624 
doupd©edb
 = 1;

627 i‡(
modify_u£r
)

629 i‡(
u£rödex
 < 0)

631 
	`BIO_¥ötf
(
bio_îr
,"u£∏\"%s\" d€†nŸÉxi°, o≥øti⁄ ign‹ed.\n",
u£r
);

632 
îr‹s
++;

637 **
row
 = 
	`sk_OPENSSL_PSTRING_vÆue
(
db
->db->
d©a
, 
u£rödex
);

638 
ty≥
 = 
row
[
DB_§±y≥
][0];

639 i‡(
ty≥
 == 'v')

641 
	`BIO_¥ötf
(
bio_îr
,"u£∏\"%s\"áÃódy upd©ed, o≥øti⁄ ign‹ed.\n",
u£r
);

642 
îr‹s
++;

646 *
gNid
;

648 i‡(
row
[
DB_§±y≥
][0] == 'V')

650 
u£r_gN
;

651 **
úow
 = 
NULL
;

652 
VERBOSE
 
	`BIO_¥ötf
(
bio_îr
,"VîifyögÖassw‹d f‹ u£∏\"%s\"\n",
u£r
);

653 i‡–(
u£r_gN
 = 
	`gë_ödex
(
db
, 
row
[
DB_§pgN
], 
DB_SRP_INDEX
)) >= 0)

654 
úow
 = (**)
	`sk_OPENSSL_PSTRING_vÆue
(
db
->db->
d©a
, 
u£rödex
);

656 i‡(!
	`§p_vîify_u£r
(
u£r
, 
row
[
DB_§pvîifõr
],Ñow[
DB_§pß…
], 
úow
 ? irow[DB_§pß…] :Ñow[
DB_§pgN
], irow ? irow[DB_§pvîifõr] : 
NULL
, 
∑ssö
, 
bio_îr
, 
vîbo£
))

658 
	`BIO_¥ötf
(
bio_îr
, "InvÆidÖassw‹d f‹ u£∏\"%s\", o≥øti⁄áb™d⁄ed.\n", 
u£r
);

659 
îr‹s
++;

660 
îr
;

663 
VERBOSE
 
	`BIO_¥ötf
(
bio_îr
,"Passw‹d f‹ u£∏\"%s\" ok.\n",
u£r
);

665 i‡(!(
gNid
=
	`§p_¸óã_u£r
(
u£r
,&(
row
[
DB_§pvîifõr
]), &‘ow[
DB_§pß…
]),
gNrow
?gNrow[DB_§pß…]:
NULL
, gNrow?gNrow[DB_§pvîifõr]:NULL, 
∑ssout
, 
bio_îr
,
vîbo£
)))

667 
	`BIO_¥ötf
(
bio_îr
, "C™nŸ cª©ê§∞vîifõ∏f‹ u£∏\"%s\", o≥øti⁄áb™d⁄ed.\n", 
u£r
);

668 
îr‹s
++;

669 
îr
;

672 
row
[
DB_§±y≥
][0] = 'v';

673 
row
[
DB_§pgN
] = 
	`BUF_°rdup
(
gNid
);

675 i‡(!
row
[
DB_§pid
] || !row[
DB_§pgN
] || !row[
DB_§±y≥
] || !row[
DB_§pvîifõr
] || !row[
DB_§pß…
] ||

676 (
u£röfo
 && (!(
row
[
DB_§pöfo
] = 
	`BUF_°rdup
(userinfo)))))

677 
îr
;

679 
doupd©edb
 = 1;

683 i‡(
dñëe_u£r
)

685 i‡(
u£rödex
 < 0)

687 
	`BIO_¥ötf
(
bio_îr
, "u£∏\"%s\" d€†nŸÉxi°, o≥øti⁄ ign‹ed.Å\n", 
u£r
);

688 
îr‹s
++;

692 **
xµ
 = 
	`sk_OPENSSL_PSTRING_vÆue
(
db
->db->
d©a
,
u£rödex
);

693 
	`BIO_¥ötf
(
bio_îr
, "u£∏\"%s\"Ñevoked.Å\n", 
u£r
);

695 
xµ
[
DB_§±y≥
][0] = 'R';

697 
doupd©edb
 = 1;

700 i‡(--
¨gc
 > 0)

701 
u£r
 = *(
¨gv
++) ;

704 
u£r
 = 
NULL
;

705 
li°_u£r
 = 0;

709 
VERBOSE
 
	`BIO_¥ötf
(
bio_îr
,"UserÖrocession done.\n");

712 i‡(
doupd©edb
)

715 
i
 = 0; i < 
	`sk_OPENSSL_PSTRING_num
(
db
->db->
d©a
); i++)

717 
µ
 = 
	`sk_OPENSSL_PSTRING_vÆue
(
db
->db->
d©a
,
i
);

719 i‡(
µ
[
DB_§±y≥
][0] == 'v')

721 
µ
[
DB_§±y≥
][0] = 'V';

722 
	`¥öt_u£r
(
db
, 
bio_îr
, 
i
, 
vîbo£
);

726 
VERBOSE
 
	`BIO_¥ötf
(
bio_îr
, "TryingÅo update srpvfile.\n");

727 i‡(!
	`ßve_ödex
(
dbfûe
, "√w", 
db
)Ë
îr
;

729 
VERBOSE
 
	`BIO_¥ötf
(
bio_îr
, "Temporary srpvfile created.\n");

730 i‡(!
	`rŸ©e_ödex
(
dbfûe
, "√w", "ﬁd")Ë
îr
;

732 
VERBOSE
 
	`BIO_¥ötf
(
bio_îr
, "srpvfile updated.\n");

735 
ªt
 = (
îr‹s
 != 0);

736 
îr
:

737 i‡(
îr‹s
 != 0)

738 
VERBOSE
 
	`BIO_¥ötf
(
bio_îr
,"U£∏îr‹†%d.\n",
îr‹s
);

740 
VERBOSE
 
	`BIO_¥ötf
(
bio_îr
,"SRPÅîmö©ög wôh codê%d.\n",
ªt
);

741 if(
to‰ì
)

742 
	`OPENSSL_‰ì
(
to‰ì
);

743 i‡(
ªt
Ë
	`ERR_¥öt_îr‹s
(
bio_îr
);

744 i‡(
øndfûe
Ë
	`≠p_RAND_wrôe_fûe
‘™dfûe, 
bio_îr
);

745 i‡(
c⁄f
Ë
	`NCONF_‰ì
(conf);

746 i‡(
db
Ë
	`‰ì_ödex
(db);

748 
	`OBJ_˛ónup
();

749 
	`≠ps_shutdown
();

750 
	`OPENSSL_EXIT
(
ªt
);

751 
	}
}

	@test.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	$maö
()

5 
i
=0;

6 
buff
[100];

7 
	`•rötf
(
buff
, "%s", "echo / | ./openssl s_client -connect 10.102.28.134:443 -dtls1 -state ");

10 
	`¥ötf
("vÆuêo‡òi†%d\n", 
i
);

11 
	`sy°em
(
buff
);

12 
i
++;

14 
	}
}

	@testdsa.h

3 
DSA
 *
gë_dß512
();

4 
DSA
 *
gë_dß1024
();

5 
DSA
 *
gë_dß2048
();

6 
	gdß512_¥iv
[] = {

10 
	gdß512_pub
[] = {

18 
	gdß512_p
[]={

26 
	gdß512_q
[]={

30 
	gdß512_g
[]={

39 
DSA
 *
	$gë_dß512
()

41 
DSA
 *
dß
;

43 i‡((
dß
=
	`DSA_√w
()Ë=
NULL
) (NULL);

44 
dß
->
¥iv_key
=
	`BN_bö2bn
(
dß512_¥iv
,(dß512_¥iv),
NULL
);

45 
dß
->
pub_key
=
	`BN_bö2bn
(
dß512_pub
,(dß512_pub),
NULL
);

46 
dß
->
p
=
	`BN_bö2bn
(
dß512_p
,(dß512_p),
NULL
);

47 
dß
->
q
=
	`BN_bö2bn
(
dß512_q
,(dß512_q),
NULL
);

48 
dß
->
g
=
	`BN_bö2bn
(
dß512_g
,(dß512_g),
NULL
);

49 i‡((
dß
->
¥iv_key
 =
NULL
Ë|| (dß->
pub_key
 =NULLË|| (dß->
p
 == NULL) ||

50 (
dß
->
q
 =
NULL
Ë|| (dß->
g
 == NULL))

51 (
NULL
);

52 (
dß
);

53 
	}
}

55 
	gdß1024_¥iv
[]={

59 
	gdß1024_pub
[]={

72 
	gdß1024_p
[]={

85 
	gdß1024_q
[]={

89 
	gdß1024_g
[]={

103 
DSA
 *
	$gë_dß1024
()

105 
DSA
 *
dß
;

107 i‡((
dß
=
	`DSA_√w
()Ë=
NULL
) (NULL);

108 
dß
->
¥iv_key
=
	`BN_bö2bn
(
dß1024_¥iv
,(dß1024_¥iv),
NULL
);

109 
dß
->
pub_key
=
	`BN_bö2bn
(
dß1024_pub
,(dß1024_pub),
NULL
);

110 
dß
->
p
=
	`BN_bö2bn
(
dß1024_p
,(dß1024_p),
NULL
);

111 
dß
->
q
=
	`BN_bö2bn
(
dß1024_q
,(dß1024_q),
NULL
);

112 
dß
->
g
=
	`BN_bö2bn
(
dß1024_g
,(dß1024_g),
NULL
);

113 i‡((
dß
->
¥iv_key
 =
NULL
Ë|| (dß->
pub_key
 =NULLË|| (dß->
p
 == NULL) ||

114 (
dß
->
q
 =
NULL
Ë|| (dß->
g
 == NULL))

115 (
NULL
);

116 (
dß
);

117 
	}
}

119 
	gdß2048_¥iv
[]={

123 
	gdß2048_pub
[]={

147 
	gdß2048_p
[]={

171 
	gdß2048_q
[]={

175 
	gdß2048_g
[]={

200 
DSA
 *
	$gë_dß2048
()

202 
DSA
 *
dß
;

204 i‡((
dß
=
	`DSA_√w
()Ë=
NULL
) (NULL);

205 
dß
->
¥iv_key
=
	`BN_bö2bn
(
dß2048_¥iv
,(dß2048_¥iv),
NULL
);

206 
dß
->
pub_key
=
	`BN_bö2bn
(
dß2048_pub
,(dß2048_pub),
NULL
);

207 
dß
->
p
=
	`BN_bö2bn
(
dß2048_p
,(dß2048_p),
NULL
);

208 
dß
->
q
=
	`BN_bö2bn
(
dß2048_q
,(dß2048_q),
NULL
);

209 
dß
->
g
=
	`BN_bö2bn
(
dß2048_g
,(dß2048_g),
NULL
);

210 i‡((
dß
->
¥iv_key
 =
NULL
Ë|| (dß->
pub_key
 =NULLË|| (dß->
p
 == NULL) ||

211 (
dß
->
q
 =
NULL
Ë|| (dß->
g
 == NULL))

212 (
NULL
);

213 (
dß
);

214 
	}
}

216 c⁄° 
	g∫d_£ed
[] = "stringÅo makeÅheÑandomÇumber generatorÅhink it hasÉntropy";

217 
	g∫d_Áke
 = 0;

	@testrsa.h

60 
	gã°512
[]={

95 
	gã°1024
[]={

159 
	gã°2048
[]={

282 
	gã°4096
[]={

	@timeouts.h

60 #i‚de‡
INCLUDED_TIMEOUTS_H


61 
	#INCLUDED_TIMEOUTS_H


	)

64 
	#DGRAM_RCV_TIMEOUT
 250000

	)

65 
	#DGRAM_SND_TIMEOUT
 250000

	)

	@ts.c

59 
	~<°dio.h
>

60 
	~<°dlib.h
>

61 
	~<°rög.h
>

62 
	~"≠ps.h
"

63 
	~<›ís¶/bio.h
>

64 
	~<›ís¶/îr.h
>

65 
	~<›ís¶/≥m.h
>

66 
	~<›ís¶/ønd.h
>

67 
	~<›ís¶/ts.h
>

68 
	~<›ís¶/bn.h
>

70 #unde‡
PROG


71 
	#PROG
 
ts_maö


	)

74 
	#NONCE_LENGTH
 64

	)

77 
	#ENV_OID_FILE
 "oid_fûe"

	)

81 
ASN1_OBJECT
 *
txt2obj
(c⁄° *
oid
);

82 
CONF
 *
lﬂd_c⁄fig_fûe
(c⁄° *
c⁄figfûe
);

85 
quîy_comm™d
(c⁄° *
d©a
, *
dige°
,

86 c⁄° 
EVP_MD
 *
md
, c⁄° *
pﬁicy
, 
no_n⁄˚
,

87 
˚π
, c⁄° *
ö
, c⁄° *
out
, 
ãxt
);

88 
BIO
 *
BIO_›í_wôh_deÁu…
(c⁄° *
fûe
, c⁄° *
mode
,

89 
FILE
 *
deÁu…_Â
);

90 
TS_REQ
 *
¸óã_quîy
(
BIO
 *
d©a_bio
, *
dige°
, c⁄° 
EVP_MD
 *
md
,

91 c⁄° *
pﬁicy
, 
no_n⁄˚
, 
˚π
);

92 
¸óã_dige°
(
BIO
 *
öput
, *
dige°
,

93 c⁄° 
EVP_MD
 *
md
, **
md_vÆue
);

94 
ASN1_INTEGER
 *
¸óã_n⁄˚
(
bôs
);

97 
ª∂y_comm™d
(
CONF
 *
c⁄f
, *
£˘i⁄
, *
ígöe
,

98 *
quîyfûe
, *
∑ssö
, *
ökey
,

99 *
sig√r
, *
chaö
, c⁄° *
pﬁicy
,

100 *
ö
, 
tokí_ö
, *
out
, 
tokí_out
,

101 
ãxt
);

102 
TS_RESP
 *
ªad_PKCS7
(
BIO
 *
ö_bio
);

103 
TS_RESP
 *
¸óã_ª•⁄£
(
CONF
 *
c⁄f
, c⁄° *
£˘i⁄
, *
ígöe
,

104 *
quîyfûe
, *
∑ssö
, *
ökey
,

105 *
sig√r
, *
chaö
, c⁄° *
pﬁicy
);

106 
ASN1_INTEGER
 * 
MS_CALLBACK
 
£rül_cb
(
TS_RESP_CTX
 *
˘x
, *
d©a
);

107 
ASN1_INTEGER
 *
√xt_£rül
(c⁄° *
£rülfûe
);

108 
ßve_ts_£rül
(c⁄° *
£rülfûe
, 
ASN1_INTEGER
 *
£rül
);

111 
vîify_comm™d
(*
d©a
, *
dige°
, *
quîyfûe
,

112 *
ö
, 
tokí_ö
,

113 *
ˇ_∑th
, *
ˇ_fûe
, *
u¡ru°ed
);

114 
TS_VERIFY_CTX
 *
¸óã_vîify_˘x
(*
d©a
, *
dige°
,

115 *
quîyfûe
,

116 *
ˇ_∑th
, *
ˇ_fûe
,

117 *
u¡ru°ed
);

118 
X509_STORE
 *
¸óã_˚π_°‹e
(*
ˇ_∑th
, *
ˇ_fûe
);

119 
MS_CALLBACK
 
vîify_cb
(
ok
, 
X509_STORE_CTX
 *
˘x
);

122 
MAIN
(, **);

124 
	$MAIN
(
¨gc
, **
¨gv
)

126 
ªt
 = 1;

127 *
c⁄figfûe
 = 
NULL
;

128 *
£˘i⁄
 = 
NULL
;

129 
CONF
 *
c⁄f
 = 
NULL
;

130 
	emode
 {

131 
CMD_NONE
, 
CMD_QUERY
, 
CMD_REPLY
, 
CMD_VERIFY


132 } 
mode
 = 
CMD_NONE
;

133 *
d©a
 = 
NULL
;

134 *
dige°
 = 
NULL
;

135 c⁄° 
EVP_MD
 *
md
 = 
NULL
;

136 *
∫d
 = 
NULL
;

137 *
pﬁicy
 = 
NULL
;

138 
no_n⁄˚
 = 0;

139 
˚π
 = 0;

140 *
ö
 = 
NULL
;

141 *
out
 = 
NULL
;

142 
ãxt
 = 0;

143 *
quîyfûe
 = 
NULL
;

144 *
∑ssö
 = 
NULL
;

145 *
∑ssw‹d
 =
NULL
;

146 *
ökey
 = 
NULL
;

147 *
sig√r
 = 
NULL
;

148 *
chaö
 = 
NULL
;

149 *
ˇ_∑th
 = 
NULL
;

150 *
ˇ_fûe
 = 
NULL
;

151 *
u¡ru°ed
 = 
NULL
;

152 *
ígöe
 = 
NULL
;

154 
tokí_ö
 = 0;

156 
tokí_out
 = 0;

157 
‰ì_bio_îr
 = 0;

159 
	`ERR_lﬂd_¸y±o_°rögs
();

160 
	`≠ps_°¨tup
();

162 i‡(
bio_îr
 =
NULL
 && (bio_î∏
	`BIO_√w
(
	`BIO_s_fûe
())) != NULL)

164 
‰ì_bio_îr
 = 1;

165 
	`BIO_£t_Â
(
bio_îr
, 
°dîr
, 
BIO_NOCLOSE
 | 
BIO_FP_TEXT
);

168 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

169 
˛ónup
;

171 
¨gc
--, 
¨gv
++;árgc > 0;árgc--,árgv++)

173 i‡(
	`°rcmp
(*
¨gv
, "-config") == 0)

175 i‡(
¨gc
-- < 1Ë
ußge
;

176 
c⁄figfûe
 = *++
¨gv
;

178 i‡(
	`°rcmp
(*
¨gv
, "-section") == 0)

180 i‡(
¨gc
-- < 1Ë
ußge
;

181 
£˘i⁄
 = *++
¨gv
;

183 i‡(
	`°rcmp
(*
¨gv
, "-query") == 0)

185 i‡(
mode
 !
CMD_NONE
Ë
ußge
;

186 
mode
 = 
CMD_QUERY
;

188 i‡(
	`°rcmp
(*
¨gv
, "-data") == 0)

190 i‡(
¨gc
-- < 1Ë
ußge
;

191 
d©a
 = *++
¨gv
;

193 i‡(
	`°rcmp
(*
¨gv
, "-digest") == 0)

195 i‡(
¨gc
-- < 1Ë
ußge
;

196 
dige°
 = *++
¨gv
;

198 i‡(
	`°rcmp
(*
¨gv
, "-rand") == 0)

200 i‡(
¨gc
-- < 1Ë
ußge
;

201 
∫d
 = *++
¨gv
;

203 i‡(
	`°rcmp
(*
¨gv
, "-policy") == 0)

205 i‡(
¨gc
-- < 1Ë
ußge
;

206 
pﬁicy
 = *++
¨gv
;

208 i‡(
	`°rcmp
(*
¨gv
, "-no_nonce") == 0)

210 
no_n⁄˚
 = 1;

212 i‡(
	`°rcmp
(*
¨gv
, "-cert") == 0)

214 
˚π
 = 1;

216 i‡(
	`°rcmp
(*
¨gv
, "-in") == 0)

218 i‡(
¨gc
-- < 1Ë
ußge
;

219 
ö
 = *++
¨gv
;

221 i‡(
	`°rcmp
(*
¨gv
, "-token_in") == 0)

223 
tokí_ö
 = 1;

225 i‡(
	`°rcmp
(*
¨gv
, "-out") == 0)

227 i‡(
¨gc
-- < 1Ë
ußge
;

228 
out
 = *++
¨gv
;

230 i‡(
	`°rcmp
(*
¨gv
, "-token_out") == 0)

232 
tokí_out
 = 1;

234 i‡(
	`°rcmp
(*
¨gv
, "-text") == 0)

236 
ãxt
 = 1;

238 i‡(
	`°rcmp
(*
¨gv
, "-reply") == 0)

240 i‡(
mode
 !
CMD_NONE
Ë
ußge
;

241 
mode
 = 
CMD_REPLY
;

243 i‡(
	`°rcmp
(*
¨gv
, "-queryfile") == 0)

245 i‡(
¨gc
-- < 1Ë
ußge
;

246 
quîyfûe
 = *++
¨gv
;

248 i‡(
	`°rcmp
(*
¨gv
, "-passin") == 0)

250 i‡(
¨gc
-- < 1Ë
ußge
;

251 
∑ssö
 = *++
¨gv
;

253 i‡(
	`°rcmp
(*
¨gv
, "-inkey") == 0)

255 i‡(
¨gc
-- < 1Ë
ußge
;

256 
ökey
 = *++
¨gv
;

258 i‡(
	`°rcmp
(*
¨gv
, "-signer") == 0)

260 i‡(
¨gc
-- < 1Ë
ußge
;

261 
sig√r
 = *++
¨gv
;

263 i‡(
	`°rcmp
(*
¨gv
, "-chain") == 0)

265 i‡(
¨gc
-- < 1Ë
ußge
;

266 
chaö
 = *++
¨gv
;

268 i‡(
	`°rcmp
(*
¨gv
, "-verify") == 0)

270 i‡(
mode
 !
CMD_NONE
Ë
ußge
;

271 
mode
 = 
CMD_VERIFY
;

273 i‡(
	`°rcmp
(*
¨gv
, "-CApath") == 0)

275 i‡(
¨gc
-- < 1Ë
ußge
;

276 
ˇ_∑th
 = *++
¨gv
;

278 i‡(
	`°rcmp
(*
¨gv
, "-CAfile") == 0)

280 i‡(
¨gc
-- < 1Ë
ußge
;

281 
ˇ_fûe
 = *++
¨gv
;

283 i‡(
	`°rcmp
(*
¨gv
, "-untrusted") == 0)

285 i‡(
¨gc
-- < 1Ë
ußge
;

286 
u¡ru°ed
 = *++
¨gv
;

288 i‡(
	`°rcmp
(*
¨gv
, "-engine") == 0)

290 i‡(
¨gc
-- < 1Ë
ußge
;

291 
ígöe
 = *++
¨gv
;

293 i‡((
md
 = 
	`EVP_gë_dige°by«me
(*
¨gv
 + 1)Ë!
NULL
)

298 
ußge
;

302 i‡(
mode
 =
CMD_QUERY
 && !
no_n⁄˚
)

304 i‡(!
	`≠p_RAND_lﬂd_fûe
(
NULL
, 
bio_îr
, 1Ë&& 
∫d
 == NULL)

305 
	`BIO_¥ötf
(
bio_îr
, "warning,Çot muchÉxtraÑandom "

307 i‡(
∫d
 !
NULL
)

308 
	`BIO_¥ötf
(
bio_îr
,"%ld semi-random bytesÜoaded\n",

309 
	`≠p_RAND_lﬂd_fûes
(
∫d
));

313 if(
mode
 =
CMD_REPLY
 && 
∑ssö
 &&

314 !
	`≠p_∑sswd
(
bio_îr
, 
∑ssö
, 
NULL
, &
∑ssw‹d
, NULL))

316 
	`BIO_¥ötf
(
bio_îr
,"Error gettingÖassword.\n");

317 
˛ónup
;

322 
mode
)

324 
CMD_NONE
:

325 
ußge
;

326 
CMD_QUERY
:

329 
ªt
 = 
d©a
 !
NULL
 && 
dige°
 != NULL;

330 i‡(
ªt
Ë
ußge
;

332 
c⁄f
 = 
	`lﬂd_c⁄fig_fûe
(
c⁄figfûe
);

333 
ªt
 = !
	`quîy_comm™d
(
d©a
, 
dige°
, 
md
, 
pﬁicy
, 
no_n⁄˚
, 
˚π
,

334 
ö
, 
out
, 
ãxt
);

336 
CMD_REPLY
:

337 
c⁄f
 = 
	`lﬂd_c⁄fig_fûe
(
c⁄figfûe
);

338 i‡(
ö
 =
NULL
)

340 
ªt
 = !(
quîyfûe
 !
NULL
 && 
c⁄f
 !NULL && !
tokí_ö
);

341 i‡(
ªt
Ë
ußge
;

346 
ªt
 = !(
quîyfûe
 =
NULL
);

347 i‡(
ªt
Ë
ußge
;

350 
ªt
 = !
	`ª∂y_comm™d
(
c⁄f
, 
£˘i⁄
, 
ígöe
, 
quîyfûe
,

351 
∑ssw‹d
, 
ökey
, 
sig√r
, 
chaö
, 
pﬁicy
,

352 
ö
, 
tokí_ö
, 
out
, 
tokí_out
, 
ãxt
);

354 
CMD_VERIFY
:

355 
ªt
 = !(((
quîyfûe
 && !
d©a
 && !
dige°
)

356 || (!
quîyfûe
 && 
d©a
 && !
dige°
)

357 || (!
quîyfûe
 && !
d©a
 && 
dige°
))

358 && 
ö
 !
NULL
);

359 i‡(
ªt
Ë
ußge
;

361 
ªt
 = !
	`vîify_comm™d
(
d©a
, 
dige°
, 
quîyfûe
, 
ö
, 
tokí_ö
,

362 
ˇ_∑th
, 
ˇ_fûe
, 
u¡ru°ed
);

365 
˛ónup
;

367 
ußge
:

368 
	`BIO_¥ötf
(
bio_îr
, "usage:\n"

374 
LIST_SEPARATOR_CHAR
, LIST_SEPARATOR_CHAR);

375 
	`BIO_¥ötf
(
bio_îr
, "or\n"

382 
	`BIO_¥ötf
(
bio_îr
, "or\n"

388 
˛ónup
:

390 
	`≠p_RAND_wrôe_fûe
(
NULL
, 
bio_îr
);

391 
	`NCONF_‰ì
(
c⁄f
);

392 
	`OPENSSL_‰ì
(
∑ssw‹d
);

393 
	`OBJ_˛ónup
();

394 i‡(
‰ì_bio_îr
)

396 
	`BIO_‰ì_Æl
(
bio_îr
);

397 
bio_îr
 = 
NULL
;

400 
	`OPENSSL_EXIT
(
ªt
);

401 
	}
}

407 
ASN1_OBJECT
 *
	$txt2obj
(c⁄° *
oid
)

409 
ASN1_OBJECT
 *
oid_obj
 = 
NULL
;

411 i‡(!(
oid_obj
 = 
	`OBJ_txt2obj
(
oid
, 0)))

412 
	`BIO_¥ötf
(
bio_îr
, "ˇ¬Ÿ c⁄vîà%†tÿOID\n", 
oid
);

414  
oid_obj
;

415 
	}
}

417 
CONF
 *
	$lﬂd_c⁄fig_fûe
(c⁄° *
c⁄figfûe
)

419 
CONF
 *
c⁄f
 = 
NULL
;

420 
îr‹löe
 = -1;

422 i‡(!
c⁄figfûe
Ëc⁄figfûê
	`gëív
("OPENSSL_CONF");

423 i‡(!
c⁄figfûe
Ëc⁄figfûê
	`gëív
("SSLEAY_CONF");

425 i‡(
c⁄figfûe
 &&

426 (!(
c⁄f
 = 
	`NCONF_√w
(
NULL
)) ||

427 
	`NCONF_lﬂd
(
c⁄f
, 
c⁄figfûe
, &
îr‹löe
) <= 0))

429 i‡(
îr‹löe
 <= 0)

430 
	`BIO_¥ötf
(
bio_îr
, "errorÜoadingÅhe config file "

431 "'%s'\n", 
c⁄figfûe
);

433 
	`BIO_¥ötf
(
bio_îr
, "error onÜine %ld of config file "

434 "'%s'\n", 
îr‹löe
, 
c⁄figfûe
);

437 i‡(
c⁄f
 !
NULL
)

439 c⁄° *
p
;

441 
	`BIO_¥ötf
(
bio_îr
,"Usög c⁄figuøti⁄ from %s\n", 
c⁄figfûe
);

442 
p
 = 
	`NCONF_gë_°rög
(
c⁄f
, 
NULL
, 
ENV_OID_FILE
);

443 i‡(
p
 !
NULL
)

445 
BIO
 *
oid_bio
 = 
	`BIO_√w_fûe
(
p
, "r");

446 i‡(!
oid_bio
)

447 
	`ERR_¥öt_îr‹s
(
bio_îr
);

450 
	`OBJ_¸óã_obje˘s
(
oid_bio
);

451 
	`BIO_‰ì_Æl
(
oid_bio
);

455 
	`ERR_˛ór_îr‹
();

456 if(!
	`add_oid_£˘i⁄
(
bio_îr
, 
c⁄f
))

457 
	`ERR_¥öt_îr‹s
(
bio_îr
);

459  
c⁄f
;

460 
	}
}

466 
	$quîy_comm™d
(c⁄° *
d©a
, *
dige°
, c⁄° 
EVP_MD
 *
md
,

467 c⁄° *
pﬁicy
, 
no_n⁄˚
,

468 
˚π
, c⁄° *
ö
, c⁄° *
out
, 
ãxt
)

470 
ªt
 = 0;

471 
TS_REQ
 *
quîy
 = 
NULL
;

472 
BIO
 *
ö_bio
 = 
NULL
;

473 
BIO
 *
d©a_bio
 = 
NULL
;

474 
BIO
 *
out_bio
 = 
NULL
;

477 i‡(
ö
 !
NULL
)

479 i‡((
ö_bio
 = 
	`BIO_√w_fûe
(
ö
, "rb")Ë=
NULL
Ë
íd
;

480 
quîy
 = 
	`d2i_TS_REQ_bio
(
ö_bio
, 
NULL
);

485 i‡(!
dige°


486 && !(
d©a_bio
 = 
	`BIO_›í_wôh_deÁu…
(
d©a
, "rb", 
°dö
)))

487 
íd
;

489 
quîy
 = 
	`¸óã_quîy
(
d©a_bio
, 
dige°
, 
md
,

490 
pﬁicy
, 
no_n⁄˚
, 
˚π
);

493 i‡(
quîy
 =
NULL
Ë
íd
;

496 i‡((
out_bio
 = 
	`BIO_›í_wôh_deÁu…
(
out
, "wb", 
°dout
)Ë=
NULL
)

497 
íd
;

498 i‡(
ãxt
)

501 i‡(!
	`TS_REQ_¥öt_bio
(
out_bio
, 
quîy
))

502 
íd
;

507 i‡(!
	`i2d_TS_REQ_bio
(
out_bio
, 
quîy
))

508 
íd
;

511 
ªt
 = 1;

513 
íd
:

514 
	`ERR_¥öt_îr‹s
(
bio_îr
);

517 
	`BIO_‰ì_Æl
(
ö_bio
);

518 
	`BIO_‰ì_Æl
(
d©a_bio
);

519 
	`BIO_‰ì_Æl
(
out_bio
);

520 
	`TS_REQ_‰ì
(
quîy
);

522  
ªt
;

523 
	}
}

525 
BIO
 *
	$BIO_›í_wôh_deÁu…
(c⁄° *
fûe
, c⁄° *
mode
,

526 
FILE
 *
deÁu…_Â
)

528  
fûe
 =
NULL
 ?

529 
	`BIO_√w_Â
(
deÁu…_Â
, 
BIO_NOCLOSE
)

530 : 
	`BIO_√w_fûe
(
fûe
, 
mode
);

531 
	}
}

533 
TS_REQ
 *
	$¸óã_quîy
(
BIO
 *
d©a_bio
, *
dige°
, c⁄° 
EVP_MD
 *
md
,

534 c⁄° *
pﬁicy
, 
no_n⁄˚
, 
˚π
)

536 
ªt
 = 0;

537 
TS_REQ
 *
ts_ªq
 = 
NULL
;

538 
Àn
;

539 
TS_MSG_IMPRINT
 *
msg_im¥öt
 = 
NULL
;

540 
X509_ALGOR
 *
Ægo
 = 
NULL
;

541 *
d©a
 = 
NULL
;

542 
ASN1_OBJECT
 *
pﬁicy_obj
 = 
NULL
;

543 
ASN1_INTEGER
 *
n⁄˚_a¢1
 = 
NULL
;

546 i‡(!
md
 && !(md = 
	`EVP_gë_dige°by«me
("sha1"))Ë
îr
;

549 i‡(!(
ts_ªq
 = 
	`TS_REQ_√w
())Ë
îr
;

552 i‡(!
	`TS_REQ_£t_vîsi⁄
(
ts_ªq
, 1)Ë
îr
;

555 i‡(!(
msg_im¥öt
 = 
	`TS_MSG_IMPRINT_√w
())Ë
îr
;

558 i‡(!(
Ægo
 = 
	`X509_ALGOR_√w
())Ë
îr
;

559 i‡(!(
Ægo
->
Æg‹ôhm
 = 
	`OBJ_nid2obj
(
	`EVP_MD_ty≥
(
md
)))Ë
îr
;

560 i‡(!(
Ægo
->
∑ømëî
 = 
	`ASN1_TYPE_√w
())Ë
îr
;

561 
Ægo
->
∑ømëî
->
ty≥
 = 
V_ASN1_NULL
;

562 i‡(!
	`TS_MSG_IMPRINT_£t_Ægo
(
msg_im¥öt
, 
Ægo
)Ë
îr
;

565 i‡((
Àn
 = 
	`¸óã_dige°
(
d©a_bio
, 
dige°
, 
md
, &
d©a
)) == 0)

566 
îr
;

567 i‡(!
	`TS_MSG_IMPRINT_£t_msg
(
msg_im¥öt
, 
d©a
, 
Àn
)Ë
îr
;

569 i‡(!
	`TS_REQ_£t_msg_im¥öt
(
ts_ªq
, 
msg_im¥öt
)Ë
îr
;

572 i‡(
pﬁicy
 && !(
pﬁicy_obj
 = 
	`txt2obj
’ﬁicy))Ë
îr
;

573 i‡(
pﬁicy_obj
 && !
	`TS_REQ_£t_pﬁicy_id
(
ts_ªq
,Öﬁicy_obj)Ë
îr
;

576 i‡(!
no_n⁄˚
 && !(
n⁄˚_a¢1
 = 
	`¸óã_n⁄˚
(
NONCE_LENGTH
))Ë
îr
;

577 i‡(
n⁄˚_a¢1
 && !
	`TS_REQ_£t_n⁄˚
(
ts_ªq
,Ç⁄˚_a¢1)Ë
îr
;

580 i‡(!
	`TS_REQ_£t_˚π_ªq
(
ts_ªq
, 
˚π
)Ë
îr
;

582 
ªt
 = 1;

583 
îr
:

584 i‡(!
ªt
)

586 
	`TS_REQ_‰ì
(
ts_ªq
);

587 
ts_ªq
 = 
NULL
;

588 
	`BIO_¥ötf
(
bio_îr
, "couldÇot create query\n");

590 
	`TS_MSG_IMPRINT_‰ì
(
msg_im¥öt
);

591 
	`X509_ALGOR_‰ì
(
Ægo
);

592 
	`OPENSSL_‰ì
(
d©a
);

593 
	`ASN1_OBJECT_‰ì
(
pﬁicy_obj
);

594 
	`ASN1_INTEGER_‰ì
(
n⁄˚_a¢1
);

595  
ts_ªq
;

596 
	}
}

598 
	$¸óã_dige°
(
BIO
 *
öput
, *
dige°
, c⁄° 
EVP_MD
 *
md
,

599 **
md_vÆue
)

601 
md_vÆue_Àn
;

603 
md_vÆue_Àn
 = 
	`EVP_MD_size
(
md
);

604 i‡(
md_vÆue_Àn
 < 0)

605 
îr
;

606 i‡(
öput
)

609 
EVP_MD_CTX
 
md_˘x
;

610 
buf„r
[4096];

611 
Àngth
;

613 *
md_vÆue
 = 
	`OPENSSL_mÆloc
(
md_vÆue_Àn
);

614 i‡(*
md_vÆue
 =0Ë
îr
;

616 
	`EVP_Dige°Inô
(&
md_˘x
, 
md
);

617 (
Àngth
 = 
	`BIO_ªad
(
öput
, 
buf„r
, (buffer))) > 0)

619 
	`EVP_Dige°Upd©e
(&
md_˘x
, 
buf„r
, 
Àngth
);

621 
	`EVP_Dige°FöÆ
(&
md_˘x
, *
md_vÆue
, 
NULL
);

626 
dige°_Àn
;

627 *
md_vÆue
 = 
	`°rög_to_hex
(
dige°
, &
dige°_Àn
);

628 i‡(!*
md_vÆue
 || 
md_vÆue_Àn
 !
dige°_Àn
)

630 
	`OPENSSL_‰ì
(*
md_vÆue
);

631 *
md_vÆue
 = 
NULL
;

632 
	`BIO_¥ötf
(
bio_îr
, "bad digest, %d bytes "

633 "mu° bê•ecifõd\n", 
md_vÆue_Àn
);

634 
îr
;

638  
md_vÆue_Àn
;

639 
îr
:

641 
	}
}

643 
ASN1_INTEGER
 *
	$¸óã_n⁄˚
(
bôs
)

645 
buf
[20];

646 
ASN1_INTEGER
 *
n⁄˚
 = 
NULL
;

647 
Àn
 = (
bôs
 - 1) / 8 + 1;

648 
i
;

651 i‡(
Àn
 > ()(
buf
)Ë
îr
;

652 i‡(
	`RAND_byãs
(
buf
, 
Àn
Ë<0Ë
îr
;

655 
i
 = 0; i < 
Àn
 && !
buf
[i]; ++i);

656 i‡(!(
n⁄˚
 = 
	`ASN1_INTEGER_√w
())Ë
îr
;

657 
	`OPENSSL_‰ì
(
n⁄˚
->
d©a
);

659 
n⁄˚
->
Àngth
 = 
Àn
 - 
i
;

660 i‡(!(
n⁄˚
->
d©a
 = 
	`OPENSSL_mÆloc
“⁄˚->
Àngth
 + 1))Ë
îr
;

661 
	`mem˝y
(
n⁄˚
->
d©a
, 
buf
 + 
i
,Ç⁄˚->
Àngth
);

663  
n⁄˚
;

664 
îr
:

665 
	`BIO_¥ötf
(
bio_îr
, "couldÇot createÇonce\n");

666 
	`ASN1_INTEGER_‰ì
(
n⁄˚
);

667  
NULL
;

668 
	}
}

673 
	$ª∂y_comm™d
(
CONF
 *
c⁄f
, *
£˘i⁄
, *
ígöe
,

674 *
quîyfûe
, *
∑ssö
, *
ökey
,

675 *
sig√r
, *
chaö
, c⁄° *
pﬁicy
,

676 *
ö
, 
tokí_ö
,

677 *
out
, 
tokí_out
, 
ãxt
)

679 
ªt
 = 0;

680 
TS_RESP
 *
ª•⁄£
 = 
NULL
;

681 
BIO
 *
ö_bio
 = 
NULL
;

682 
BIO
 *
quîy_bio
 = 
NULL
;

683 
BIO
 *
ökey_bio
 = 
NULL
;

684 
BIO
 *
sig√r_bio
 = 
NULL
;

685 
BIO
 *
out_bio
 = 
NULL
;

688 i‡(
ö
 !
NULL
)

690 i‡((
ö_bio
 = 
	`BIO_√w_fûe
(
ö
, "rb")Ë=
NULL
Ë
íd
;

691 i‡(
tokí_ö
)

695 
ª•⁄£
 = 
	`ªad_PKCS7
(
ö_bio
);

700 
ª•⁄£
 = 
	`d2i_TS_RESP_bio
(
ö_bio
, 
NULL
);

705 
ª•⁄£
 = 
	`¸óã_ª•⁄£
(
c⁄f
, 
£˘i⁄
, 
ígöe
, 
quîyfûe
,

706 
∑ssö
, 
ökey
, 
sig√r
, 
chaö
,

707 
pﬁicy
);

708 i‡(
ª•⁄£
)

709 
	`BIO_¥ötf
(
bio_îr
, "Response has been generated.\n");

711 
	`BIO_¥ötf
(
bio_îr
, "Response isÇot generated.\n");

713 i‡(
ª•⁄£
 =
NULL
Ë
íd
;

716 i‡((
out_bio
 = 
	`BIO_›í_wôh_deÁu…
(
out
, "wb", 
°dout
)Ë=
NULL
)

717 
íd
;

718 i‡(
ãxt
)

721 i‡(
tokí_out
)

723 
TS_TST_INFO
 *
t°_öfo
 = 
	`TS_RESP_gë_t°_öfo
(
ª•⁄£
);

724 i‡(!
	`TS_TST_INFO_¥öt_bio
(
out_bio
, 
t°_öfo
)Ë
íd
;

728 i‡(!
	`TS_RESP_¥öt_bio
(
out_bio
, 
ª•⁄£
)Ë
íd
;

734 i‡(
tokí_out
)

736 
PKCS7
 *
tokí
 = 
	`TS_RESP_gë_tokí
(
ª•⁄£
);

737 i‡(!
	`i2d_PKCS7_bio
(
out_bio
, 
tokí
)Ë
íd
;

741 i‡(!
	`i2d_TS_RESP_bio
(
out_bio
, 
ª•⁄£
)Ë
íd
;

745 
ªt
 = 1;

747 
íd
:

748 
	`ERR_¥öt_îr‹s
(
bio_îr
);

751 
	`BIO_‰ì_Æl
(
ö_bio
);

752 
	`BIO_‰ì_Æl
(
quîy_bio
);

753 
	`BIO_‰ì_Æl
(
ökey_bio
);

754 
	`BIO_‰ì_Æl
(
sig√r_bio
);

755 
	`BIO_‰ì_Æl
(
out_bio
);

756 
	`TS_RESP_‰ì
(
ª•⁄£
);

758  
ªt
;

759 
	}
}

762 
TS_RESP
 *
	$ªad_PKCS7
(
BIO
 *
ö_bio
)

764 
ªt
 = 0;

765 
PKCS7
 *
tokí
 = 
NULL
;

766 
TS_TST_INFO
 *
t°_öfo
 = 
NULL
;

767 
TS_RESP
 *
ª•
 = 
NULL
;

768 
TS_STATUS_INFO
 *
si
 = 
NULL
;

771 i‡(!(
tokí
 = 
	`d2i_PKCS7_bio
(
ö_bio
, 
NULL
))Ë
íd
;

772 i‡(!(
t°_öfo
 = 
	`PKCS7_to_TS_TST_INFO
(
tokí
))Ë
íd
;

775 i‡(!(
ª•
 = 
	`TS_RESP_√w
())Ë
íd
;

778 i‡(!(
si
 = 
	`TS_STATUS_INFO_√w
())Ë
íd
;

779 i‡(!(
	`ASN1_INTEGER_£t
(
si
->
°©us
, 
TS_STATUS_GRANTED
))Ë
íd
;

780 i‡(!
	`TS_RESP_£t_°©us_öfo
(
ª•
, 
si
)Ë
íd
;

783 
	`TS_RESP_£t_t°_öfo
(
ª•
, 
tokí
, 
t°_öfo
);

784 
tokí
 = 
NULL
;

785 
t°_öfo
 = 
NULL
;

787 
ªt
 = 1;

788 
íd
:

789 
	`PKCS7_‰ì
(
tokí
);

790 
	`TS_TST_INFO_‰ì
(
t°_öfo
);

791 i‡(!
ªt
)

793 
	`TS_RESP_‰ì
(
ª•
);

794 
ª•
 = 
NULL
;

796 
	`TS_STATUS_INFO_‰ì
(
si
);

797  
ª•
;

798 
	}
}

800 
TS_RESP
 *
	$¸óã_ª•⁄£
(
CONF
 *
c⁄f
, c⁄° *
£˘i⁄
, *
ígöe
,

801 *
quîyfûe
, *
∑ssö
, *
ökey
,

802 *
sig√r
, *
chaö
, c⁄° *
pﬁicy
)

804 
ªt
 = 0;

805 
TS_RESP
 *
ª•⁄£
 = 
NULL
;

806 
BIO
 *
quîy_bio
 = 
NULL
;

807 
TS_RESP_CTX
 *
ª•_˘x
 = 
NULL
;

809 i‡(!(
quîy_bio
 = 
	`BIO_√w_fûe
(
quîyfûe
, "rb")))

810 
íd
;

813 i‡(!(
£˘i⁄
 = 
	`TS_CONF_gë_tß_£˘i⁄
(
c⁄f
, section)))

814 
íd
;

817 i‡(!(
ª•_˘x
 = 
	`TS_RESP_CTX_√w
())Ë
íd
;

820 i‡(!
	`TS_CONF_£t_£rül
(
c⁄f
, 
£˘i⁄
, 
£rül_cb
, 
ª•_˘x
)Ë
íd
;

821 #i‚de‡
OPENSSL_NO_ENGINE


823 i‡(!
	`TS_CONF_£t_¸y±o_devi˚
(
c⁄f
, 
£˘i⁄
, 
ígöe
)Ë
íd
;

827 i‡(!
	`TS_CONF_£t_sig√r_˚π
(
c⁄f
, 
£˘i⁄
, 
sig√r
, 
ª•_˘x
)Ë
íd
;

830 i‡(!
	`TS_CONF_£t_˚πs
(
c⁄f
, 
£˘i⁄
, 
chaö
, 
ª•_˘x
)Ë
íd
;

833 i‡(!
	`TS_CONF_£t_sig√r_key
(
c⁄f
, 
£˘i⁄
, 
ökey
, 
∑ssö
, 
ª•_˘x
))

834 
íd
;

837 i‡(!
	`TS_CONF_£t_def_pﬁicy
(
c⁄f
, 
£˘i⁄
, 
pﬁicy
, 
ª•_˘x
)Ë
íd
;

840 i‡(!
	`TS_CONF_£t_pﬁicõs
(
c⁄f
, 
£˘i⁄
, 
ª•_˘x
)Ë
íd
;

843 i‡(!
	`TS_CONF_£t_dige°s
(
c⁄f
, 
£˘i⁄
, 
ª•_˘x
)Ë
íd
;

846 i‡(!
	`TS_CONF_£t_accuøcy
(
c⁄f
, 
£˘i⁄
, 
ª•_˘x
)Ë
íd
;

849 i‡(!
	`TS_CONF_£t_˛ock_¥ecisi⁄_digôs
(
c⁄f
, 
£˘i⁄
, 
ª•_˘x
))

850 
íd
;

853 i‡(!
	`TS_CONF_£t_‹dîög
(
c⁄f
, 
£˘i⁄
, 
ª•_˘x
)Ë
íd
;

856 i‡(!
	`TS_CONF_£t_tß_«me
(
c⁄f
, 
£˘i⁄
, 
ª•_˘x
)Ë
íd
;

859 i‡(!
	`TS_CONF_£t_ess_˚π_id_chaö
(
c⁄f
, 
£˘i⁄
, 
ª•_˘x
)Ë
íd
;

862 i‡(!(
ª•⁄£
 = 
	`TS_RESP_¸óã_ª•⁄£
(
ª•_˘x
, 
quîy_bio
)))

863 
íd
;

865 
ªt
 = 1;

866 
íd
:

867 i‡(!
ªt
)

869 
	`TS_RESP_‰ì
(
ª•⁄£
);

870 
ª•⁄£
 = 
NULL
;

872 
	`TS_RESP_CTX_‰ì
(
ª•_˘x
);

873 
	`BIO_‰ì_Æl
(
quîy_bio
);

875  
ª•⁄£
;

876 
	}
}

878 
ASN1_INTEGER
 * 
MS_CALLBACK
 
	$£rül_cb
(
TS_RESP_CTX
 *
˘x
, *
d©a
)

880 c⁄° *
£rül_fûe
 = (c⁄° *Ë
d©a
;

881 
ASN1_INTEGER
 *
£rül
 = 
	`√xt_£rül
(
£rül_fûe
);

883 i‡(!
£rül
)

885 
	`TS_RESP_CTX_£t_°©us_öfo
(
˘x
, 
TS_STATUS_REJECTION
,

888 
	`TS_RESP_CTX_add_Áûuª_öfo
(
˘x
,

889 
TS_INFO_ADD_INFO_NOT_AVAILABLE
);

892 
	`ßve_ts_£rül
(
£rül_fûe
, 
£rül
);

894  
£rül
;

895 
	}
}

897 
ASN1_INTEGER
 *
	$√xt_£rül
(c⁄° *
£rülfûe
)

899 
ªt
 = 0;

900 
BIO
 *
ö
 = 
NULL
;

901 
ASN1_INTEGER
 *
£rül
 = 
NULL
;

902 
BIGNUM
 *
bn
 = 
NULL
;

904 i‡(!(
£rül
 = 
	`ASN1_INTEGER_√w
())Ë
îr
;

906 i‡(!(
ö
 = 
	`BIO_√w_fûe
(
£rülfûe
, "r")))

908 
	`ERR_˛ór_îr‹
();

909 
	`BIO_¥ötf
(
bio_îr
, "Warning: couldÇot open file %s for "

910 "ªadög, usög sîü»numbî: 1\n", 
£rülfûe
);

911 i‡(!
	`ASN1_INTEGER_£t
(
£rül
, 1)Ë
îr
;

915 
buf
[1024];

916 i‡(!
	`a2i_ASN1_INTEGER
(
ö
, 
£rül
, 
buf
, (buf)))

918 
	`BIO_¥ötf
(
bio_îr
, "unableÅoÜoadÇumber from %s\n",

919 
£rülfûe
);

920 
îr
;

922 i‡(!(
bn
 = 
	`ASN1_INTEGER_to_BN
(
£rül
, 
NULL
))Ë
îr
;

923 
	`ASN1_INTEGER_‰ì
(
£rül
);

924 
£rül
 = 
NULL
;

925 i‡(!
	`BN_add_w‹d
(
bn
, 1)Ë
îr
;

926 i‡(!(
£rül
 = 
	`BN_to_ASN1_INTEGER
(
bn
, 
NULL
))Ë
îr
;

928 
ªt
 = 1;

929 
îr
:

930 i‡(!
ªt
)

932 
	`ASN1_INTEGER_‰ì
(
£rül
);

933 
£rül
 = 
NULL
;

935 
	`BIO_‰ì_Æl
(
ö
);

936 
	`BN_‰ì
(
bn
);

937  
£rül
;

938 
	}
}

940 
	$ßve_ts_£rül
(c⁄° *
£rülfûe
, 
ASN1_INTEGER
 *
£rül
)

942 
ªt
 = 0;

943 
BIO
 *
out
 = 
NULL
;

945 i‡(!(
out
 = 
	`BIO_√w_fûe
(
£rülfûe
, "w"))Ë
îr
;

946 i‡(
	`i2a_ASN1_INTEGER
(
out
, 
£rül
Ë<0Ë
îr
;

947 i‡(
	`BIO_puts
(
out
, "\n"Ë<0Ë
îr
;

948 
ªt
 = 1;

949 
îr
:

950 i‡(!
ªt
)

951 
	`BIO_¥ötf
(
bio_îr
, "couldÇot save serialÇumberÅo %s\n",

952 
£rülfûe
);

953 
	`BIO_‰ì_Æl
(
out
);

954  
ªt
;

955 
	}
}

961 
	$vîify_comm™d
(*
d©a
, *
dige°
, *
quîyfûe
,

962 *
ö
, 
tokí_ö
,

963 *
ˇ_∑th
, *
ˇ_fûe
, *
u¡ru°ed
)

965 
BIO
 *
ö_bio
 = 
NULL
;

966 
PKCS7
 *
tokí
 = 
NULL
;

967 
TS_RESP
 *
ª•⁄£
 = 
NULL
;

968 
TS_VERIFY_CTX
 *
vîify_˘x
 = 
NULL
;

969 
ªt
 = 0;

972 i‡(!(
ö_bio
 = 
	`BIO_√w_fûe
(
ö
, "rb"))Ë
íd
;

973 i‡(
tokí_ö
)

975 i‡(!(
tokí
 = 
	`d2i_PKCS7_bio
(
ö_bio
, 
NULL
))Ë
íd
;

979 i‡(!(
ª•⁄£
 = 
	`d2i_TS_RESP_bio
(
ö_bio
, 
NULL
))Ë
íd
;

982 i‡(!(
vîify_˘x
 = 
	`¸óã_vîify_˘x
(
d©a
, 
dige°
, 
quîyfûe
,

983 
ˇ_∑th
, 
ˇ_fûe
, 
u¡ru°ed
)))

984 
íd
;

987 
ªt
 = 
tokí_ö
 ?

988 
	`TS_RESP_vîify_tokí
(
vîify_˘x
, 
tokí
) :

989 
	`TS_RESP_vîify_ª•⁄£
(
vîify_˘x
, 
ª•⁄£
);

991 
íd
:

992 
	`¥ötf
("Verification: ");

993 i‡(
ªt
)

994 
	`¥ötf
("OK\n");

997 
	`¥ötf
("FAILED\n");

999 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1003 
	`BIO_‰ì_Æl
(
ö_bio
);

1004 
	`PKCS7_‰ì
(
tokí
);

1005 
	`TS_RESP_‰ì
(
ª•⁄£
);

1006 
	`TS_VERIFY_CTX_‰ì
(
vîify_˘x
);

1007  
ªt
;

1008 
	}
}

1010 
TS_VERIFY_CTX
 *
	$¸óã_vîify_˘x
(*
d©a
, *
dige°
,

1011 *
quîyfûe
,

1012 *
ˇ_∑th
, *
ˇ_fûe
,

1013 *
u¡ru°ed
)

1015 
TS_VERIFY_CTX
 *
˘x
 = 
NULL
;

1016 
BIO
 *
öput
 = 
NULL
;

1017 
TS_REQ
 *
ªque°
 = 
NULL
;

1018 
ªt
 = 0;

1020 i‡(
d©a
 !
NULL
 || 
dige°
 != NULL)

1022 i‡(!(
˘x
 = 
	`TS_VERIFY_CTX_√w
())Ë
îr
;

1023 
˘x
->
Êags
 = 
TS_VFY_VERSION
 | 
TS_VFY_SIGNER
;

1024 i‡(
d©a
 !
NULL
)

1026 
˘x
->
Êags
 |
TS_VFY_DATA
;

1027 i‡(!(
˘x
->
d©a
 = 
	`BIO_√w_fûe
(d©a, "rb"))Ë
îr
;

1029 i‡(
dige°
 !
NULL
)

1031 
im¥öt_Àn
;

1032 
˘x
->
Êags
 |
TS_VFY_IMPRINT
;

1033 i‡(!(
˘x
->
im¥öt
 = 
	`°rög_to_hex
(
dige°
,

1034 &
im¥öt_Àn
)))

1036 
	`BIO_¥ötf
(
bio_îr
, "invalid digest string\n");

1037 
îr
;

1039 
˘x
->
im¥öt_Àn
 = imprint_len;

1043 i‡(
quîyfûe
 !
NULL
)

1047 i‡(!(
öput
 = 
	`BIO_√w_fûe
(
quîyfûe
, "rb"))Ë
îr
;

1048 i‡(!(
ªque°
 = 
	`d2i_TS_REQ_bio
(
öput
, 
NULL
))Ë
îr
;

1049 i‡(!(
˘x
 = 
	`TS_REQ_to_TS_VERIFY_CTX
(
ªque°
, 
NULL
))Ë
îr
;

1052  
NULL
;

1055 
˘x
->
Êags
 |
TS_VFY_SIGNATURE
;

1058 i‡(!(
˘x
->
°‹e
 = 
	`¸óã_˚π_°‹e
(
ˇ_∑th
, 
ˇ_fûe
))Ë
îr
;

1061 i‡(
u¡ru°ed
 && !(
˘x
->
˚πs
 = 
	`TS_CONF_lﬂd_˚πs
(untrusted)))

1062 
îr
;

1064 
ªt
 = 1;

1065 
îr
:

1066 i‡(!
ªt
)

1068 
	`TS_VERIFY_CTX_‰ì
(
˘x
);

1069 
˘x
 = 
NULL
;

1071 
	`BIO_‰ì_Æl
(
öput
);

1072 
	`TS_REQ_‰ì
(
ªque°
);

1073  
˘x
;

1074 
	}
}

1076 
X509_STORE
 *
	$¸óã_˚π_°‹e
(*
ˇ_∑th
, *
ˇ_fûe
)

1078 
X509_STORE
 *
˚π_˘x
 = 
NULL
;

1079 
X509_LOOKUP
 *
lookup
 = 
NULL
;

1080 
i
;

1083 
˚π_˘x
 = 
	`X509_STORE_√w
();

1086 
	`X509_STORE_£t_vîify_cb
(
˚π_˘x
, 
vîify_cb
);

1089 i‡(
ˇ_∑th
)

1091 
lookup
 = 
	`X509_STORE_add_lookup
(
˚π_˘x
,

1092 
	`X509_LOOKUP_hash_dú
());

1093 i‡(
lookup
 =
NULL
)

1095 
	`BIO_¥ötf
(
bio_îr
, "memoryállocation failure\n");

1096 
îr
;

1098 
i
 = 
	`X509_LOOKUP_add_dú
(
lookup
, 
ˇ_∑th
, 
X509_FILETYPE_PEM
);

1099 i‡(!
i
)

1101 
	`BIO_¥ötf
(
bio_îr
, "ErrorÜoading directory %s\n",

1102 
ˇ_∑th
);

1103 
îr
;

1108 i‡(
ˇ_fûe
)

1110 
lookup
 = 
	`X509_STORE_add_lookup
(
˚π_˘x
, 
	`X509_LOOKUP_fûe
());

1111 i‡(
lookup
 =
NULL
)

1113 
	`BIO_¥ötf
(
bio_îr
, "memoryállocation failure\n");

1114 
îr
;

1116 
i
 = 
	`X509_LOOKUP_lﬂd_fûe
(
lookup
, 
ˇ_fûe
, 
X509_FILETYPE_PEM
);

1117 i‡(!
i
)

1119 
	`BIO_¥ötf
(
bio_îr
, "Eº‹Üﬂdög fûê%s\n", 
ˇ_fûe
);

1120 
îr
;

1124  
˚π_˘x
;

1125 
îr
:

1126 
	`X509_STORE_‰ì
(
˚π_˘x
);

1127  
NULL
;

1128 
	}
}

1130 
MS_CALLBACK
 
	$vîify_cb
(
ok
, 
X509_STORE_CTX
 *
˘x
)

1146  
ok
;

1147 
	}
}

	@verify.c

59 
	~<°dio.h
>

60 
	~<°dlib.h
>

61 
	~<°rög.h
>

62 
	~"≠ps.h
"

63 
	~<›ís¶/bio.h
>

64 
	~<›ís¶/îr.h
>

65 
	~<›ís¶/x509.h
>

66 
	~<›ís¶/x509v3.h
>

67 
	~<›ís¶/≥m.h
>

69 #unde‡
PROG


70 
	#PROG
 
vîify_maö


	)

72 
MS_CALLBACK
 
cb
(
ok
, 
X509_STORE_CTX
 *
˘x
);

73 
check
(
X509_STORE
 *
˘x
, *
fûe
,

74 
STACK_OF
(
X509
Ë*
uchaö
, STACK_OF(X509Ë*
tchaö
,

75 
STACK_OF
(
X509_CRL
Ë*
¸ls
, 
ENGINE
 *
e
);

76 
	gv_vîbo£
=0, 
	gvÊags
 = 0;

78 
MAIN
(, **);

80 
	$MAIN
(
¨gc
, **
¨gv
)

82 
ENGINE
 *
e
 = 
NULL
;

83 
i
,
ªt
=1, 
bad¨g
 = 0;

84 *
CA∑th
=
NULL
,*
CAfûe
=NULL;

85 *
u¡fûe
 = 
NULL
, *
åu°fûe
 = NULL, *
¸lfûe
 = NULL;

86 
	`STACK_OF
(
X509
Ë*
u¡ru°ed
 = 
NULL
, *
åu°ed
 = NULL;

87 
	`STACK_OF
(
X509_CRL
Ë*
¸ls
 = 
NULL
;

88 
X509_STORE
 *
˚π_˘x
=
NULL
;

89 
X509_LOOKUP
 *
lookup
=
NULL
;

90 
X509_VERIFY_PARAM
 *
vpm
 = 
NULL
;

91 #i‚de‡
OPENSSL_NO_ENGINE


92 *
ígöe
=
NULL
;

95 
˚π_˘x
=
	`X509_STORE_√w
();

96 i‡(
˚π_˘x
 =
NULL
Ë
íd
;

97 
	`X509_STORE_£t_vîify_cb
(
˚π_˘x
,
cb
);

99 
	`ERR_lﬂd_¸y±o_°rögs
();

101 
	`≠ps_°¨tup
();

103 i‡(
bio_îr
 =
NULL
)

104 i‡((
bio_îr
=
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

105 
	`BIO_£t_Â
(
bio_îr
,
°dîr
,
BIO_NOCLOSE
|
BIO_FP_TEXT
);

107 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

108 
íd
;

110 
¨gc
--;

111 
¨gv
++;

114 i‡(
¨gc
 >= 1)

116 i‡(
	`°rcmp
(*
¨gv
,"-CApath") == 0)

118 i‡(
¨gc
-- < 1Ë
íd
;

119 
CA∑th
*(++
¨gv
);

121 i‡(
	`°rcmp
(*
¨gv
,"-CAfile") == 0)

123 i‡(
¨gc
-- < 1Ë
íd
;

124 
CAfûe
*(++
¨gv
);

126 i‡(
	`¨gs_vîify
(&
¨gv
, &
¨gc
, &
bad¨g
, 
bio_îr
,

127 &
vpm
))

129 i‡(
bad¨g
)

130 
íd
;

133 i‡(
	`°rcmp
(*
¨gv
,"-untrusted") == 0)

135 i‡(
¨gc
-- < 1Ë
íd
;

136 
u¡fûe
*(++
¨gv
);

138 i‡(
	`°rcmp
(*
¨gv
,"-trusted") == 0)

140 i‡(
¨gc
-- < 1Ë
íd
;

141 
åu°fûe
*(++
¨gv
);

143 i‡(
	`°rcmp
(*
¨gv
,"-CRLfile") == 0)

145 i‡(
¨gc
-- < 1Ë
íd
;

146 
¸lfûe
*(++
¨gv
);

148 #i‚de‡
OPENSSL_NO_ENGINE


149 i‡(
	`°rcmp
(*
¨gv
,"-engine") == 0)

151 i‡(--
¨gc
 < 1Ë
íd
;

152 
ígöe
*(++
¨gv
);

155 i‡(
	`°rcmp
(*
¨gv
,"-help") == 0)

156 
íd
;

157 i‡(
	`°rcmp
(*
¨gv
,"-verbose") == 0)

158 
v_vîbo£
=1;

159 i‡(
¨gv
[0][0] == '-')

160 
íd
;

163 
¨gc
--;

164 
¨gv
++;

170 #i‚de‡
OPENSSL_NO_ENGINE


171 
e
 = 
	`£tup_ígöe
(
bio_îr
, 
ígöe
, 0);

174 i‡(
vpm
)

175 
	`X509_STORE_£t1_∑øm
(
˚π_˘x
, 
vpm
);

177 
lookup
=
	`X509_STORE_add_lookup
(
˚π_˘x
,
	`X509_LOOKUP_fûe
());

178 i‡(
lookup
 =
NULL
Ë
	`ab‹t
();

179 i‡(
CAfûe
) {

180 
i
=
	`X509_LOOKUP_lﬂd_fûe
(
lookup
,
CAfûe
,
X509_FILETYPE_PEM
);

181 if(!
i
) {

182 
	`BIO_¥ötf
(
bio_îr
, "Eº‹Üﬂdög fûê%s\n", 
CAfûe
);

183 
	`ERR_¥öt_îr‹s
(
bio_îr
);

184 
íd
;

186 } 
	`X509_LOOKUP_lﬂd_fûe
(
lookup
,
NULL
,
X509_FILETYPE_DEFAULT
);

188 
lookup
=
	`X509_STORE_add_lookup
(
˚π_˘x
,
	`X509_LOOKUP_hash_dú
());

189 i‡(
lookup
 =
NULL
Ë
	`ab‹t
();

190 i‡(
CA∑th
) {

191 
i
=
	`X509_LOOKUP_add_dú
(
lookup
,
CA∑th
,
X509_FILETYPE_PEM
);

192 if(!
i
) {

193 
	`BIO_¥ötf
(
bio_îr
, "Eº‹Üﬂdög dúe˘‹y %s\n", 
CA∑th
);

194 
	`ERR_¥öt_îr‹s
(
bio_îr
);

195 
íd
;

197 } 
	`X509_LOOKUP_add_dú
(
lookup
,
NULL
,
X509_FILETYPE_DEFAULT
);

199 
	`ERR_˛ór_îr‹
();

201 if(
u¡fûe
)

203 
u¡ru°ed
 = 
	`lﬂd_˚πs
(
bio_îr
, 
u¡fûe
, 
FORMAT_PEM
,

204 
NULL
, 
e
, "untrusted certificates");

205 if(!
u¡ru°ed
)

206 
íd
;

209 if(
åu°fûe
)

211 
åu°ed
 = 
	`lﬂd_˚πs
(
bio_îr
, 
åu°fûe
, 
FORMAT_PEM
,

212 
NULL
, 
e
, "trusted certificates");

213 if(!
åu°ed
)

214 
íd
;

217 if(
¸lfûe
)

219 
¸ls
 = 
	`lﬂd_¸ls
(
bio_îr
, 
¸lfûe
, 
FORMAT_PEM
,

220 
NULL
, 
e
, "other CRLs");

221 if(!
¸ls
)

222 
íd
;

225 
ªt
 = 0;

226 i‡(
¨gc
 < 1)

228 i‡(1 !
	`check
(
˚π_˘x
, 
NULL
, 
u¡ru°ed
, 
åu°ed
, 
¸ls
, 
e
))

229 
ªt
 = -1;

233 
i
=0; i<
¨gc
; i++)

234 i‡(1 !
	`check
(
˚π_˘x
,
¨gv
[
i
], 
u¡ru°ed
, 
åu°ed
, 
¸ls
, 
e
))

235 
ªt
 = -1;

238 
íd
:

239 i‡(
ªt
 == 1) {

240 
	`BIO_¥ötf
(
bio_îr
,"usage: verify [-verbose] [-CApathÖath] [-CAfile file] [-purposeÖurpose] [-crl_check]");

241 
	`BIO_¥ötf
(
bio_îr
," [-attimeÅimestamp]");

242 #i‚de‡
OPENSSL_NO_ENGINE


243 
	`BIO_¥ötf
(
bio_îr
," [-engineÉ]");

245 
	`BIO_¥ötf
(
bio_îr
," cert1 cert2 ...\n");

247 
	`BIO_¥ötf
(
bio_îr
,"recognized usages:\n");

248 
i
 = 0; i < 
	`X509_PURPOSE_gë_cou¡
(); i++)

250 
X509_PURPOSE
 *
±mp
;

251 
±mp
 = 
	`X509_PURPOSE_gë0
(
i
);

252 
	`BIO_¥ötf
(
bio_îr
, "\t%-10s\t%s\n",

253 
	`X509_PURPOSE_gë0_¢ame
(
±mp
),

254 
	`X509_PURPOSE_gë0_«me
(
±mp
));

257 i‡(
vpm
Ë
	`X509_VERIFY_PARAM_‰ì
(vpm);

258 i‡(
˚π_˘x
 !
NULL
Ë
	`X509_STORE_‰ì
(cert_ctx);

259 
	`sk_X509_p›_‰ì
(
u¡ru°ed
, 
X509_‰ì
);

260 
	`sk_X509_p›_‰ì
(
åu°ed
, 
X509_‰ì
);

261 
	`sk_X509_CRL_p›_‰ì
(
¸ls
, 
X509_CRL_‰ì
);

262 
	`≠ps_shutdown
();

263 
	`OPENSSL_EXIT
(
ªt
 < 0 ? 2 :Ñet);

264 
	}
}

266 
check
(
X509_STORE
 *
˘x
, *
fûe
,

267 
STACK_OF
(
X509
Ë*
uchaö
, STACK_OF(X509Ë*
tchaö
,

268 
STACK_OF
(
X509_CRL
Ë*
¸ls
, 
ENGINE
 *
e
)

270 
X509
 *
	gx
=
NULL
;

271 
	gi
=0,
	gªt
=0;

272 
X509_STORE_CTX
 *
	gcsc
;

274 
	gx
 = 
lﬂd_˚π
(
bio_îr
, 
fûe
, 
FORMAT_PEM
, 
NULL
, 
e
, "certificate file");

275 i‡(
	gx
 =
NULL
)

276 
íd
;

277 
Ârötf
(
°dout
,"%s: ",(
fûe
 =
NULL
)?"stdin":file);

279 
	gcsc
 = 
X509_STORE_CTX_√w
();

280 i‡(
	gcsc
 =
NULL
)

282 
ERR_¥öt_îr‹s
(
bio_îr
);

283 
	gíd
;

285 
X509_STORE_£t_Êags
(
˘x
, 
vÊags
);

286 if(!
X509_STORE_CTX_öô
(
csc
,
˘x
,
x
,
uchaö
))

288 
ERR_¥öt_îr‹s
(
bio_îr
);

289 
	gíd
;

291 if(
	gtchaö
Ë
X509_STORE_CTX_åu°ed_°ack
(
csc
, 
tchaö
);

292 i‡(
	g¸ls
)

293 
X509_STORE_CTX_£t0_¸ls
(
csc
, 
¸ls
);

294 
	gi
=
X509_vîify_˚π
(
csc
);

295 
X509_STORE_CTX_‰ì
(
csc
);

297 
	gªt
=0;

298 
	gíd
:

299 i‡(
i
 > 0)

301 
Ârötf
(
°dout
,"OK\n");

302 
	gªt
=1;

305 
ERR_¥öt_îr‹s
(
bio_îr
);

306 i‡(
	gx
 !
NULL
Ë
X509_‰ì
(
x
);

308 (
	gªt
);

311 
MS_CALLBACK
 
	$cb
(
ok
, 
X509_STORE_CTX
 *
˘x
)

313 
˚π_îr‹
 = 
	`X509_STORE_CTX_gë_îr‹
(
˘x
);

314 
X509
 *
cuºít_˚π
 = 
	`X509_STORE_CTX_gë_cuºít_˚π
(
˘x
);

316 i‡(!
ok
)

318 i‡(
cuºít_˚π
)

320 
	`X509_NAME_¥öt_ex_Â
(
°dout
,

321 
	`X509_gë_subje˘_«me
(
cuºít_˚π
),

322 0, 
XN_FLAG_ONELINE
);

323 
	`¥ötf
("\n");

325 
	`¥ötf
("%serror %dát %d depthÜookup:%s\n",

326 
	`X509_STORE_CTX_gë0_∑ª¡_˘x
(
˘x
) ? "[CRLÖath]" : "",

327 
˚π_îr‹
,

328 
	`X509_STORE_CTX_gë_îr‹_dïth
(
˘x
),

329 
	`X509_vîify_˚π_îr‹_°rög
(
˚π_îr‹
));

330 
˚π_îr‹
)

332 
X509_V_ERR_NO_EXPLICIT_POLICY
:

333 
	`pﬁicõs_¥öt
(
NULL
, 
˘x
);

334 
X509_V_ERR_CERT_HAS_EXPIRED
:

341 
X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
:

343 
X509_V_ERR_INVALID_CA
:

344 
X509_V_ERR_INVALID_NON_CA
:

345 
X509_V_ERR_PATH_LENGTH_EXCEEDED
:

346 
X509_V_ERR_INVALID_PURPOSE
:

347 
X509_V_ERR_CRL_HAS_EXPIRED
:

348 
X509_V_ERR_CRL_NOT_YET_VALID
:

349 
X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION
:

350 
ok
 = 1;

354  
ok
;

357 i‡(
˚π_îr‹
 =
X509_V_OK
 && 
ok
 == 2)

358 
	`pﬁicõs_¥öt
(
NULL
, 
˘x
);

359 i‡(!
v_vîbo£
)

360 
	`ERR_˛ór_îr‹
();

361 (
ok
);

362 
	}
}

	@version.c

112 
	~<°dio.h
>

113 
	~<°dlib.h
>

114 
	~<°rög.h
>

115 
	~"≠ps.h
"

116 
	~<›ís¶/evp.h
>

117 
	~<›ís¶/¸y±o.h
>

118 
	~<›ís¶/bn.h
>

119 #i‚de‡
OPENSSL_NO_MD2


120 
	~<›ís¶/md2.h
>

122 #i‚de‡
OPENSSL_NO_RC4


123 
	~<›ís¶/rc4.h
>

125 #i‚de‡
OPENSSL_NO_DES


126 
	~<›ís¶/des.h
>

128 #i‚de‡
OPENSSL_NO_IDEA


129 
	~<›ís¶/idó.h
>

131 #i‚de‡
OPENSSL_NO_BF


132 
	~<›ís¶/blowfish.h
>

135 #unde‡
PROG


136 
	#PROG
 
vîsi⁄_maö


	)

138 
MAIN
(, **);

140 
	$MAIN
(
¨gc
, **
¨gv
)

142 
i
,
ªt
=0;

143 
cÊags
=0,
vîsi⁄
=0,
d©e
=0,
›ti⁄s
=0,
∂©f‹m
=0,
dú
=0;

145 
	`≠ps_°¨tup
();

147 i‡(
bio_îr
 =
NULL
)

148 i‡((
bio_îr
=
	`BIO_√w
(
	`BIO_s_fûe
())Ë!
NULL
)

149 
	`BIO_£t_Â
(
bio_îr
,
°dîr
,
BIO_NOCLOSE
|
BIO_FP_TEXT
);

151 i‡(
¨gc
 =1Ë
vîsi⁄
=1;

152 
i
=1; i<
¨gc
; i++)

154 i‡(
	`°rcmp
(
¨gv
[
i
],"-v") == 0)

155 
vîsi⁄
=1;

156 i‡(
	`°rcmp
(
¨gv
[
i
],"-b") == 0)

157 
d©e
=1;

158 i‡(
	`°rcmp
(
¨gv
[
i
],"-f") == 0)

159 
cÊags
=1;

160 i‡(
	`°rcmp
(
¨gv
[
i
],"-o") == 0)

161 
›ti⁄s
=1;

162 i‡(
	`°rcmp
(
¨gv
[
i
],"-p") == 0)

163 
∂©f‹m
=1;

164 i‡(
	`°rcmp
(
¨gv
[
i
],"-d") == 0)

165 
dú
=1;

166 i‡(
	`°rcmp
(
¨gv
[
i
],"-a") == 0)

167 
d©e
=
vîsi⁄
=
cÊags
=
›ti⁄s
=
∂©f‹m
=
dú
=1;

170 
	`BIO_¥ötf
(
bio_îr
,"usage:version -[avbofpd]\n");

171 
ªt
=1;

172 
íd
;

176 i‡(
vîsi⁄
)

178 i‡(
	`SSLóy
(Ë=
SSLEAY_VERSION_NUMBER
)

180 
	`¥ötf
("%s\n",
	`SSLóy_vîsi⁄
(
SSLEAY_VERSION
));

184 
	`¥ötf
("%s (Library: %s)\n",

185 
OPENSSL_VERSION_TEXT
,

186 
	`SSLóy_vîsi⁄
(
SSLEAY_VERSION
));

189 i‡(
d©e
Ë
	`¥ötf
("%s\n",
	`SSLóy_vîsi⁄
(
SSLEAY_BUILT_ON
));

190 i‡(
∂©f‹m
Ë
	`¥ötf
("%s\n",
	`SSLóy_vîsi⁄
(
SSLEAY_PLATFORM
));

191 i‡(
›ti⁄s
)

193 
	`¥ötf
("options: ");

194 
	`¥ötf
("%†",
	`BN_›ti⁄s
());

195 #i‚de‡
OPENSSL_NO_MD2


196 
	`¥ötf
("%†",
	`MD2_›ti⁄s
());

198 #i‚de‡
OPENSSL_NO_RC4


199 
	`¥ötf
("%†",
	`RC4_›ti⁄s
());

201 #i‚de‡
OPENSSL_NO_DES


202 
	`¥ötf
("%†",
	`DES_›ti⁄s
());

204 #i‚de‡
OPENSSL_NO_IDEA


205 
	`¥ötf
("%†",
	`idó_›ti⁄s
());

207 #i‚de‡
OPENSSL_NO_BF


208 
	`¥ötf
("%†",
	`BF_›ti⁄s
());

210 
	`¥ötf
("\n");

212 i‡(
cÊags
Ë
	`¥ötf
("%s\n",
	`SSLóy_vîsi⁄
(
SSLEAY_CFLAGS
));

213 i‡(
dú
Ë
	`¥ötf
("%s\n",
	`SSLóy_vîsi⁄
(
SSLEAY_DIR
));

214 
íd
:

215 
	`≠ps_shutdown
();

216 
	`OPENSSL_EXIT
(
ªt
);

217 
	}
}

	@vms_decc_init.c

1 #i‡
deföed
–
__VMS
Ë&& !deföed–
OPENSSL_NO_DECC_INIT
) && \

2 
deföed
–
__DECC
Ë&& !deföed–
__VAX
Ë&& (
	g__CRTL_VER
 >= 70301000)

3 
	#USE_DECC_INIT
 1

	)

6 #ifde‡
USE_DECC_INIT


21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<unixlib.h
>

30 
decc_öô_d⁄e
 = -1;

37 *
	m«me
;

38 
	mvÆue
;

39 } 
	tdecc_„©_t
;

46 
decc_„©_t
 
	gdecc_„©_¨øy
[] =

60 { (*)
NULL
, 0 }

66 
	$decc_öô
( )

68 *
›ís¶_debug_decc_öô
;

69 
vîbo£
 = 0;

70 
„©_ödex
;

71 
„©_vÆue
;

72 
„©_vÆue_max
;

73 
„©_vÆue_mö
;

74 
i
;

75 
°s
;

78 
›ís¶_debug_decc_öô
 = 
	`gëív
( "OPENSSL_DEBUG_DECC_INIT");

79 i‡(
›ís¶_debug_decc_öô
 !
NULL
)

81 
vîbo£
 = 
	`°πﬁ
–
›ís¶_debug_decc_öô
, 
NULL
, 10);

82 i‡(
vîbo£
 <= 0)

84 
vîbo£
 = 1;

89 
decc_öô_d⁄e
 = 1;

93 
i
 = 0; 
decc_„©_¨øy
[ i].
«me
 !
NULL
; i++)

96 
„©_ödex
 = 
	`decc$„©uª_gë_ödex
–
decc_„©_¨øy
[ 
i
].
«me
);

97 i‡(
„©_ödex
 >= 0)

100 
„©_vÆue
 = 
	`decc$„©uª_gë_vÆue
–
„©_ödex
, 1);

101 
„©_vÆue_mö
 = 
	`decc$„©uª_gë_vÆue
–
„©_ödex
, 2);

102 
„©_vÆue_max
 = 
	`decc$„©uª_gë_vÆue
–
„©_ödex
, 3);

105 i‡((
decc_„©_¨øy
[ 
i
].
vÆue
 >
„©_vÆue_mö
) &&

106 (
decc_„©_¨øy
[ 
i
].
vÆue
 <
„©_vÆue_max
))

109 i‡(
„©_vÆue
 !
decc_„©_¨øy
[ 
i
].
vÆue
)

111 
°s
 = 
	`decc$„©uª_£t_vÆue
–
„©_ödex
,

113 
decc_„©_¨øy
[ 
i
].
vÆue
);

115 i‡(
vîbo£
 > 1)

117 
	`Ârötf
–
°dîr
, " %s = %d, sts = %d.\n",

118 
decc_„©_¨øy
[ 
i
].
«me
,

119 
decc_„©_¨øy
[ 
i
].
vÆue
,

120 
°s
);

127 
	`Ârötf
–
°dîr
,

129 
„©_vÆue
,

130 
„©_vÆue_mö
, 
decc_„©_¨øy
[ 
i
].
«me
, 
„©_vÆue_max
);

136 
	`Ârötf
–
°dîr
,

137 " UNKNOWN DECC$FEATURE: %s.\n", 
decc_„©_¨øy
[ 
i
].
«me
);

141 i‡(
vîbo£
 > 0)

143 
	`Ârötf
–
°dîr
, " DECC_INIT complete.\n");

145 
	}
}

149 #¥agm®
no°™d¨d


154 #¥agm®
exã∫_modñ
 
ßve


156 #i‡
__INITIAL_POINTER_SIZE
 == 64

157 
	#PSECT_ALIGN
 3

	)

159 
	#PSECT_ALIGN
 2

	)

162 #¥agm®
exã∫_modñ
 
°ri˘_ªfdef
 "LIB$INITIALIZ" 
PSECT_ALIGN
, 
n›ic
, 
nowπ


163 c⁄° 
	g•¨e
[ 8] = { 0 };

165 #¥agm®
exã∫_modñ
 
°ri˘_ªfdef
 "LIB$INITIALIZE" 
PSECT_ALIGN
, 
n›ic
, 
nowπ


166 (*c⁄° 
	gx_decc_öô
)(Ë
decc_öô
;

168 #¥agm®
exã∫_modñ
 
ª°‹e


172 #¥agm®
exã∫_modñ
 
ßve


174 
LIB$INITIALIZE
( );

176 #¥agm®
exã∫_modñ
 
°ri˘_ªfdef


177 
	gdmy_lib$öôülize
 = (Ë
LIB$INITIALIZE
;

179 #¥agm®
exã∫_modñ
 
ª°‹e


181 #¥agm®
°™d¨d


186 
decc_öô_dummy
( );

	@winrand.c

62 
	~<wödows.h
>

63 
	~<›ís¶/›ís¶v.h
>

64 
	~<›ís¶/ønd.h
>

66 
LRESULT
 
CALLBACK
 
WndProc
(
HWND
, 
UINT
, 
WPARAM
, 
LPARAM
);

67 c⁄° *
	gfûíame
;

69 
WINAPI
 
	$WöMaö
(
HINSTANCE
 
hIn°™˚
, HINSTANCE 
hPªvIn°™˚
,

70 
PSTR
 
cmdlöe
, 
iCmdShow
)

72 
≠≤ame
[] = "OpenSSL";

73 
HWND
 
hwnd
;

74 
MSG
 
msg
;

75 
WNDCLASSEX
 
wnd˛ass
;

76 
buf„r
[200];

78 i‡(
cmdlöe
[0] == '\0')

79 
fûíame
 = 
	`RAND_fûe_«me
(
buf„r
,  buffer);

81 
fûíame
 = 
cmdlöe
;

83 
	`RAND_lﬂd_fûe
(
fûíame
, -1);

85 
wnd˛ass
.
cbSize
 = (wndclass);

86 
wnd˛ass
.
°yÀ
 = 
CS_HREDRAW
 | 
CS_VREDRAW
;

87 
wnd˛ass
.
Õ‚WndProc
 = 
WndProc
;

88 
wnd˛ass
.
cbClsExåa
 = 0;

89 
wnd˛ass
.
cbWndExåa
 = 0;

90 
wnd˛ass
.
hIn°™˚
 = hInstance;

91 
wnd˛ass
.
hIc⁄
 = 
	`LﬂdIc⁄
(
NULL
, 
IDI_APPLICATION
);

92 
wnd˛ass
.
hCurs‹
 = 
	`LﬂdCurs‹
(
NULL
, 
IDC_ARROW
);

93 
wnd˛ass
.
hbrBackground
 = (
HBRUSH
Ë
	`GëStockObje˘
(
WHITE_BRUSH
);

94 
wnd˛ass
.
ÕszMíuName
 = 
NULL
;

95 
wnd˛ass
.
ÕszCœssName
 = 
≠≤ame
;

96 
wnd˛ass
.
hIc⁄Sm
 = 
	`LﬂdIc⁄
(
NULL
, 
IDI_APPLICATION
);

97 
	`Regi°îCœssEx
(&
wnd˛ass
);

99 
hwnd
 = 
	`Cª©eWödow
(
≠≤ame
, 
OPENSSL_VERSION_TEXT
,

100 
WS_OVERLAPPEDWINDOW
, 
CW_USEDEFAULT
, CW_USEDEFAULT,

101 
CW_USEDEFAULT
, CW_USEDEFAULT, 
NULL
, NULL, 
hIn°™˚
, NULL);

103 
	`ShowWödow
(
hwnd
, 
iCmdShow
);

104 
	`Upd©eWödow
(
hwnd
);

107 
	`GëMesßge
(&
msg
, 
NULL
, 0, 0))

109 
	`Tøn¶©eMesßge
(&
msg
);

110 
	`Di•©chMesßge
(&
msg
);

113  
msg
.
wP¨am
;

114 
	}
}

116 
LRESULT
 
CALLBACK
 
	$WndProc
(
HWND
 
hwnd
, 
UINT
 
iMsg
, 
WPARAM
 
wP¨am
, 
LPARAM
 
lP¨am
)

118 
HDC
 
hdc
;

119 
PAINTSTRUCT
 
ps
;

120 
RECT
 
ª˘
;

121 
£eded
 = 0;

123 
iMsg
)

125 
WM_PAINT
:

126 
hdc
 = 
	`BegöPaöt
(
hwnd
, &
ps
);

127 
	`GëClõ¡Re˘
(
hwnd
, &
ª˘
);

128 
	`DøwText
(
hdc
, "SeedingÅhe PRNG. Please moveÅhe mouse!", -1,

129 &
ª˘
, 
DT_SINGLELINE
 | 
DT_CENTER
 | 
DT_VCENTER
);

130 
	`EndPaöt
(
hwnd
, &
ps
);

133 
WM_DESTROY
:

134 
	`Po°QuôMesßge
(0);

138 i‡(
	`RAND_evít
(
iMsg
, 
wP¨am
, 
lP¨am
Ë=1 && 
£eded
 == 0)

140 
£eded
 = 1;

141 i‡(
	`RAND_wrôe_fûe
(
fûíame
) <= 0)

142 
	`MesßgeBox
(
hwnd
, "Couldn't writeÑandom file!",

143 "O≥nSSL", 
MB_OK
 | 
MB_ICONERROR
);

144 
	`Po°QuôMesßge
(0);

147  
	`DefWödowProc
(
hwnd
, 
iMsg
, 
wP¨am
, 
lP¨am
);

148 
	}
}

	@x509.c

59 
	~<as£π.h
>

60 
	~<°dio.h
>

61 
	~<°dlib.h
>

62 
	~<°rög.h
>

63 #ifde‡
OPENSSL_NO_STDIO


64 
	#APPS_WIN16


	)

66 
	~"≠ps.h
"

67 
	~<›ís¶/bio.h
>

68 
	~<›ís¶/a¢1.h
>

69 
	~<›ís¶/îr.h
>

70 
	~<›ís¶/bn.h
>

71 
	~<›ís¶/evp.h
>

72 
	~<›ís¶/x509.h
>

73 
	~<›ís¶/x509v3.h
>

74 
	~<›ís¶/obje˘s.h
>

75 
	~<›ís¶/≥m.h
>

76 #i‚de‡
OPENSSL_NO_RSA


77 
	~<›ís¶/rß.h
>

79 #i‚de‡
OPENSSL_NO_DSA


80 
	~<›ís¶/dß.h
>

83 #unde‡
PROG


84 
	#PROG
 
x509_maö


	)

86 #unde‡
POSTFIX


87 
	#POSTFIX
 ".§l"

	)

88 
	#DEF_DAYS
 30

	)

90 c⁄° *
	gx509_ußge
[]={

102 #i‚de‡
OPENSSL_NO_MD5


106 #i‚de‡
OPENSSL_NO_MD5


149 #i‚de‡
OPENSSL_NO_ENGINE


153 
NULL


156 
MS_CALLBACK
 
ˇŒb
(
ok
, 
X509_STORE_CTX
 *
˘x
);

157 
sign
 (
X509
 *
x
, 
EVP_PKEY
 *
pkey
,
days
,
˛ªxt
, c⁄° 
EVP_MD
 *
dige°
,

158 
CONF
 *
c⁄f
, *
£˘i⁄
);

159 
x509_˚πify
 (
X509_STORE
 *
˘x
,*
CAfûe
,c⁄° 
EVP_MD
 *
dige°
,

160 
X509
 *
x
,X509 *
xˇ
,
EVP_PKEY
 *
pkey
,

161 
STACK_OF
(
OPENSSL_STRING
Ë*
sig›ts
,

162 *
£rül
, 
¸óã
 ,
days
, 
˛ªxt
,

163 
CONF
 *
c⁄f
, *
£˘i⁄
, 
ASN1_INTEGER
 *
¢o
);

164 
puΩo£_¥öt
(
BIO
 *
bio
, 
X509
 *
˚π
, 
X509_PURPOSE
 *
±
);

165 
	gªqfûe
=0;

167 
MAIN
(, **);

169 
	$MAIN
(
¨gc
, **
¨gv
)

171 
ENGINE
 *
e
 = 
NULL
;

172 
ªt
=1;

173 
X509_REQ
 *
ªq
=
NULL
;

174 
X509
 *
x
=
NULL
,*
xˇ
=NULL;

175 
ASN1_OBJECT
 *
objtmp
;

176 
	`STACK_OF
(
OPENSSL_STRING
Ë*
sig›ts
 = 
NULL
;

177 
EVP_PKEY
 *
Upkey
=
NULL
,*
CApkey
=NULL;

178 
ASN1_INTEGER
 *
¢o
 = 
NULL
;

179 
i
,
num
,
bad›s
=0;

180 
BIO
 *
out
=
NULL
;

181 
BIO
 *
STDout
=
NULL
;

182 
	`STACK_OF
(
ASN1_OBJECT
Ë*
åu°
 = 
NULL
, *
ªje˘
 = NULL;

183 
öf‹m©
,
outf‹m©
,
keyf‹m©
,
CAf‹m©
,
CAkeyf‹m©
;

184 *
öfûe
=
NULL
,*
outfûe
=NULL,*
keyfûe
=NULL,*
CAfûe
=NULL;

185 *
CAkeyfûe
=
NULL
,*
CA£rül
=NULL;

186 *
Æüs
=
NULL
;

187 
ãxt
=0,
£rül
=0,
subje˘
=0,
issuî
=0,
°¨td©e
=0,
ídd©e
=0;

188 
√xt_£rül
=0;

189 
subje˘_hash
=0,
issuî_hash
=0,
oc•id
=0;

190 #i‚de‡
OPENSSL_NO_MD5


191 
subje˘_hash_ﬁd
=0,
issuî_hash_ﬁd
=0;

193 
noout
=0,
sign_Êag
=0,
CA_Êag
=0,
CA_¸óã£rül
=0,
emaû
=0;

194 
oc•_uri
=0;

195 
åu°out
=0,
˛πru°
=0,
˛ºeje˘
=0,
Æüsout
=0,
˛ªxt
=0;

196 
C
=0;

197 
x509ªq
=0,
days
=
DEF_DAYS
,
modulus
=0,
pubkey
=0;

198 
µröt
 = 0;

199 c⁄° **
µ
;

200 
X509_STORE
 *
˘x
=
NULL
;

201 
X509_REQ
 *
rq
=
NULL
;

202 
fögî¥öt
=0;

203 
buf
[256];

204 c⁄° 
EVP_MD
 *
md_Æg
,*
dige°
=
NULL
;

205 
CONF
 *
extc⁄f
 = 
NULL
;

206 *
ext£˘
 = 
NULL
, *
extfûe
 = NULL, *
∑ssö
 = NULL, *
∑sßrgö
 = NULL;

207 
√ed_ønd
 = 0;

208 
checkíd
=0,
checkoff£t
=0;

209 
nmÊag
 = 0, 
˚πÊag
 = 0;

210 #i‚de‡
OPENSSL_NO_ENGINE


211 *
ígöe
=
NULL
;

214 
ªqfûe
=0;

216 
	`≠ps_°¨tup
();

218 i‡(
bio_îr
 =
NULL
)

219 
bio_îr
=
	`BIO_√w_Â
(
°dîr
,
BIO_NOCLOSE
);

221 i‡(!
	`lﬂd_c⁄fig
(
bio_îr
, 
NULL
))

222 
íd
;

223 
STDout
=
	`BIO_√w_Â
(
°dout
,
BIO_NOCLOSE
);

224 #ifde‡
OPENSSL_SYS_VMS


226 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

227 
STDout
 = 
	`BIO_push
(
tmpbio
, STDout);

231 
öf‹m©
=
FORMAT_PEM
;

232 
outf‹m©
=
FORMAT_PEM
;

233 
keyf‹m©
=
FORMAT_PEM
;

234 
CAf‹m©
=
FORMAT_PEM
;

235 
CAkeyf‹m©
=
FORMAT_PEM
;

237 
˘x
=
	`X509_STORE_√w
();

238 i‡(
˘x
 =
NULL
Ë
íd
;

239 
	`X509_STORE_£t_vîify_cb
(
˘x
,
ˇŒb
);

241 
¨gc
--;

242 
¨gv
++;

243 
num
=0;

244 
¨gc
 >= 1)

246 i‡(
	`°rcmp
(*
¨gv
,"-inform") == 0)

248 i‡(--
¨gc
 < 1Ë
bad
;

249 
öf‹m©
=
	`°r2fmt
(*(++
¨gv
));

251 i‡(
	`°rcmp
(*
¨gv
,"-outform") == 0)

253 i‡(--
¨gc
 < 1Ë
bad
;

254 
outf‹m©
=
	`°r2fmt
(*(++
¨gv
));

256 i‡(
	`°rcmp
(*
¨gv
,"-keyform") == 0)

258 i‡(--
¨gc
 < 1Ë
bad
;

259 
keyf‹m©
=
	`°r2fmt
(*(++
¨gv
));

261 i‡(
	`°rcmp
(*
¨gv
,"-req") == 0)

263 
ªqfûe
=1;

264 
√ed_ønd
 = 1;

266 i‡(
	`°rcmp
(*
¨gv
,"-CAform") == 0)

268 i‡(--
¨gc
 < 1Ë
bad
;

269 
CAf‹m©
=
	`°r2fmt
(*(++
¨gv
));

271 i‡(
	`°rcmp
(*
¨gv
,"-CAkeyform") == 0)

273 i‡(--
¨gc
 < 1Ë
bad
;

274 
CAkeyf‹m©
=
	`°r2fmt
(*(++
¨gv
));

276 i‡(
	`°rcmp
(*
¨gv
,"-sigopt") == 0)

278 i‡(--
¨gc
 < 1)

279 
bad
;

280 i‡(!
sig›ts
)

281 
sig›ts
 = 
	`sk_OPENSSL_STRING_√w_nuŒ
();

282 i‡(!
sig›ts
 || !
	`sk_OPENSSL_STRING_push
(sig›ts, *(++
¨gv
)))

283 
bad
;

285 i‡(
	`°rcmp
(*
¨gv
,"-days") == 0)

287 i‡(--
¨gc
 < 1Ë
bad
;

288 
days
=
	`©oi
(*(++
¨gv
));

289 i‡(
days
 == 0)

291 
	`BIO_¥ötf
(
bio_îr
,"badÇumber of days\n");

292 
bad
;

295 i‡(
	`°rcmp
(*
¨gv
,"-passin") == 0)

297 i‡(--
¨gc
 < 1Ë
bad
;

298 
∑sßrgö
*(++
¨gv
);

300 i‡(
	`°rcmp
(*
¨gv
,"-extfile") == 0)

302 i‡(--
¨gc
 < 1Ë
bad
;

303 
extfûe
*(++
¨gv
);

305 i‡(
	`°rcmp
(*
¨gv
,"-extensions") == 0)

307 i‡(--
¨gc
 < 1Ë
bad
;

308 
ext£˘
*(++
¨gv
);

310 i‡(
	`°rcmp
(*
¨gv
,"-in") == 0)

312 i‡(--
¨gc
 < 1Ë
bad
;

313 
öfûe
*(++
¨gv
);

315 i‡(
	`°rcmp
(*
¨gv
,"-out") == 0)

317 i‡(--
¨gc
 < 1Ë
bad
;

318 
outfûe
*(++
¨gv
);

320 i‡(
	`°rcmp
(*
¨gv
,"-signkey") == 0)

322 i‡(--
¨gc
 < 1Ë
bad
;

323 
keyfûe
*(++
¨gv
);

324 
sign_Êag
++
num
;

325 
√ed_ønd
 = 1;

327 i‡(
	`°rcmp
(*
¨gv
,"-CA") == 0)

329 i‡(--
¨gc
 < 1Ë
bad
;

330 
CAfûe
*(++
¨gv
);

331 
CA_Êag
++
num
;

332 
√ed_ønd
 = 1;

334 i‡(
	`°rcmp
(*
¨gv
,"-CAkey") == 0)

336 i‡(--
¨gc
 < 1Ë
bad
;

337 
CAkeyfûe
*(++
¨gv
);

339 i‡(
	`°rcmp
(*
¨gv
,"-CAserial") == 0)

341 i‡(--
¨gc
 < 1Ë
bad
;

342 
CA£rül
*(++
¨gv
);

344 i‡(
	`°rcmp
(*
¨gv
,"-set_serial") == 0)

346 i‡(--
¨gc
 < 1Ë
bad
;

347 i‡(!(
¢o
 = 
	`s2i_ASN1_INTEGER
(
NULL
, *(++
¨gv
))))

348 
bad
;

350 i‡(
	`°rcmp
(*
¨gv
,"-addtrust") == 0)

352 i‡(--
¨gc
 < 1Ë
bad
;

353 i‡(!(
objtmp
 = 
	`OBJ_txt2obj
(*(++
¨gv
), 0)))

355 
	`BIO_¥ötf
(
bio_îr
,

356 "InvÆidÅru° obje˘ vÆuê%s\n", *
¨gv
);

357 
bad
;

359 i‡(!
åu°
Ëåu° = 
	`sk_ASN1_OBJECT_√w_nuŒ
();

360 
	`sk_ASN1_OBJECT_push
(
åu°
, 
objtmp
);

361 
åu°out
 = 1;

363 i‡(
	`°rcmp
(*
¨gv
,"-addreject") == 0)

365 i‡(--
¨gc
 < 1Ë
bad
;

366 i‡(!(
objtmp
 = 
	`OBJ_txt2obj
(*(++
¨gv
), 0)))

368 
	`BIO_¥ötf
(
bio_îr
,

369 "InvÆidÑeje˘ obje˘ vÆuê%s\n", *
¨gv
);

370 
bad
;

372 i‡(!
ªje˘
Ëªje˘ = 
	`sk_ASN1_OBJECT_√w_nuŒ
();

373 
	`sk_ASN1_OBJECT_push
(
ªje˘
, 
objtmp
);

374 
åu°out
 = 1;

376 i‡(
	`°rcmp
(*
¨gv
,"-setalias") == 0)

378 i‡(--
¨gc
 < 1Ë
bad
;

379 
Æüs
*(++
¨gv
);

380 
åu°out
 = 1;

382 i‡(
	`°rcmp
(*
¨gv
,"-certopt") == 0)

384 i‡(--
¨gc
 < 1Ë
bad
;

385 i‡(!
	`£t_˚π_ex
(&
˚πÊag
, *(++
¨gv
))Ë
bad
;

387 i‡(
	`°rcmp
(*
¨gv
,"-nameopt") == 0)

389 i‡(--
¨gc
 < 1Ë
bad
;

390 i‡(!
	`£t_«me_ex
(&
nmÊag
, *(++
¨gv
))Ë
bad
;

392 #i‚de‡
OPENSSL_NO_ENGINE


393 i‡(
	`°rcmp
(*
¨gv
,"-engine") == 0)

395 i‡(--
¨gc
 < 1Ë
bad
;

396 
ígöe
*(++
¨gv
);

399 i‡(
	`°rcmp
(*
¨gv
,"-C") == 0)

400 
C
++
num
;

401 i‡(
	`°rcmp
(*
¨gv
,"-email") == 0)

402 
emaû
++
num
;

403 i‡(
	`°rcmp
(*
¨gv
,"-ocsp_uri") == 0)

404 
oc•_uri
++
num
;

405 i‡(
	`°rcmp
(*
¨gv
,"-serial") == 0)

406 
£rül
++
num
;

407 i‡(
	`°rcmp
(*
¨gv
,"-next_serial") == 0)

408 
√xt_£rül
++
num
;

409 i‡(
	`°rcmp
(*
¨gv
,"-modulus") == 0)

410 
modulus
++
num
;

411 i‡(
	`°rcmp
(*
¨gv
,"-pubkey") == 0)

412 
pubkey
++
num
;

413 i‡(
	`°rcmp
(*
¨gv
,"-x509toreq") == 0)

414 
x509ªq
++
num
;

415 i‡(
	`°rcmp
(*
¨gv
,"-text") == 0)

416 
ãxt
++
num
;

417 i‡(
	`°rcmp
(*
¨gv
,"-hash") == 0

418 || 
	`°rcmp
(*
¨gv
,"-subject_hash") == 0)

419 
subje˘_hash
++
num
;

420 #i‚de‡
OPENSSL_NO_MD5


421 i‡(
	`°rcmp
(*
¨gv
,"-subject_hash_old") == 0)

422 
subje˘_hash_ﬁd
++
num
;

424 i‡(
	`°rcmp
(*
¨gv
,"-issuer_hash") == 0)

425 
issuî_hash
++
num
;

426 #i‚de‡
OPENSSL_NO_MD5


427 i‡(
	`°rcmp
(*
¨gv
,"-issuer_hash_old") == 0)

428 
issuî_hash_ﬁd
++
num
;

430 i‡(
	`°rcmp
(*
¨gv
,"-subject") == 0)

431 
subje˘
++
num
;

432 i‡(
	`°rcmp
(*
¨gv
,"-issuer") == 0)

433 
issuî
++
num
;

434 i‡(
	`°rcmp
(*
¨gv
,"-fingerprint") == 0)

435 
fögî¥öt
++
num
;

436 i‡(
	`°rcmp
(*
¨gv
,"-dates") == 0)

438 
°¨td©e
++
num
;

439 
ídd©e
++
num
;

441 i‡(
	`°rcmp
(*
¨gv
,"-purpose") == 0)

442 
µröt
++
num
;

443 i‡(
	`°rcmp
(*
¨gv
,"-startdate") == 0)

444 
°¨td©e
++
num
;

445 i‡(
	`°rcmp
(*
¨gv
,"-enddate") == 0)

446 
ídd©e
++
num
;

447 i‡(
	`°rcmp
(*
¨gv
,"-checkend") == 0)

449 i‡(--
¨gc
 < 1Ë
bad
;

450 
checkoff£t
=
	`©oi
(*(++
¨gv
));

451 
checkíd
=1;

453 i‡(
	`°rcmp
(*
¨gv
,"-noout") == 0)

454 
noout
++
num
;

455 i‡(
	`°rcmp
(*
¨gv
,"-trustout") == 0)

456 
åu°out
= 1;

457 i‡(
	`°rcmp
(*
¨gv
,"-clrtrust") == 0)

458 
˛πru°
++
num
;

459 i‡(
	`°rcmp
(*
¨gv
,"-clrreject") == 0)

460 
˛ºeje˘
++
num
;

461 i‡(
	`°rcmp
(*
¨gv
,"-alias") == 0)

462 
Æüsout
++
num
;

463 i‡(
	`°rcmp
(*
¨gv
,"-CAcreateserial") == 0)

464 
CA_¸óã£rül
++
num
;

465 i‡(
	`°rcmp
(*
¨gv
,"-clrext") == 0)

466 
˛ªxt
 = 1;

468 i‡(
	`°rcmp
(*
¨gv
,"-crlext") == 0)

470 
	`BIO_¥ötf
(
bio_îr
,"use -clrext instead of -crlext\n");

471 
˛ªxt
 = 1;

474 i‡(
	`°rcmp
(*
¨gv
,"-ocspid") == 0)

475 
oc•id
++
num
;

476 i‡((
md_Æg
=
	`EVP_gë_dige°by«me
(*
¨gv
 + 1)))

479 
dige°
=
md_Æg
;

483 
	`BIO_¥ötf
(
bio_îr
,"unknow¿›ti⁄ %s\n",*
¨gv
);

484 
bad›s
=1;

487 
¨gc
--;

488 
¨gv
++;

491 i‡(
bad›s
)

493 
bad
:

494 
µ
=
x509_ußge
; (*µ !
NULL
);Öp++)

495 
	`BIO_¥ötf
(
bio_îr
,"%s",*
µ
);

496 
íd
;

499 #i‚de‡
OPENSSL_NO_ENGINE


500 
e
 = 
	`£tup_ígöe
(
bio_îr
, 
ígöe
, 0);

503 i‡(
√ed_ønd
)

504 
	`≠p_RAND_lﬂd_fûe
(
NULL
, 
bio_îr
, 0);

506 
	`ERR_lﬂd_¸y±o_°rögs
();

508 i‡(!
	`≠p_∑sswd
(
bio_îr
, 
∑sßrgö
, 
NULL
, &
∑ssö
, NULL))

510 
	`BIO_¥ötf
(
bio_îr
, "Error gettingÖassword\n");

511 
íd
;

514 i‡(!
	`X509_STORE_£t_deÁu…_∑ths
(
˘x
))

516 
	`ERR_¥öt_îr‹s
(
bio_îr
);

517 
íd
;

520 i‡((
CAkeyfûe
 =
NULL
Ë&& (
CA_Êag
Ë&& (
CAf‹m©
 =
FORMAT_PEM
))

521 { 
CAkeyfûe
=
CAfûe
; }

522 i‡((
CA_Êag
Ë&& (
CAkeyfûe
 =
NULL
))

524 
	`BIO_¥ötf
(
bio_îr
,"needÅo specifyá CAkey if usingÅhe CA command\n");

525 
íd
;

528 i‡(
extfûe
)

530 
îr‹löe
 = -1;

531 
X509V3_CTX
 
˘x2
;

532 
extc⁄f
 = 
	`NCONF_√w
(
NULL
);

533 i‡(!
	`NCONF_lﬂd
(
extc⁄f
, 
extfûe
,&
îr‹löe
))

535 i‡(
îr‹löe
 <= 0)

536 
	`BIO_¥ötf
(
bio_îr
,

538 
extfûe
);

540 
	`BIO_¥ötf
(
bio_îr
,

542 ,
îr‹löe
,
extfûe
);

543 
íd
;

545 i‡(!
ext£˘
)

547 
ext£˘
 = 
	`NCONF_gë_°rög
(
extc⁄f
, "default", "extensions");

548 i‡(!
ext£˘
)

550 
	`ERR_˛ór_îr‹
();

551 
ext£˘
 = "default";

554 
	`X509V3_£t_˘x_ã°
(&
˘x2
);

555 
	`X509V3_£t_nc⁄f
(&
˘x2
, 
extc⁄f
);

556 i‡(!
	`X509V3_EXT_add_nc⁄f
(
extc⁄f
, &
˘x2
, 
ext£˘
, 
NULL
))

558 
	`BIO_¥ötf
(
bio_îr
,

560 
ext£˘
);

561 
	`ERR_¥öt_îr‹s
(
bio_îr
);

562 
íd
;

567 i‡(
ªqfûe
)

569 
EVP_PKEY
 *
pkey
;

570 
BIO
 *
ö
;

572 i‡(!
sign_Êag
 && !
CA_Êag
)

574 
	`BIO_¥ötf
(
bio_îr
,"WeÇeedáÖrivate keyÅo sign with\n");

575 
íd
;

577 
ö
=
	`BIO_√w
(
	`BIO_s_fûe
());

578 i‡(
ö
 =
NULL
)

580 
	`ERR_¥öt_îr‹s
(
bio_îr
);

581 
íd
;

584 i‡(
öfûe
 =
NULL
)

585 
	`BIO_£t_Â
(
ö
,
°dö
,
BIO_NOCLOSE
|
BIO_FP_TEXT
);

588 i‡(
	`BIO_ªad_fûíame
(
ö
,
öfûe
) <= 0)

590 
	`≥º‹
(
öfûe
);

591 
	`BIO_‰ì
(
ö
);

592 
íd
;

595 
ªq
=
	`PEM_ªad_bio_X509_REQ
(
ö
,
NULL
,NULL,NULL);

596 
	`BIO_‰ì
(
ö
);

598 i‡(
ªq
 =
NULL
)

600 
	`ERR_¥öt_îr‹s
(
bio_îr
);

601 
íd
;

604 i‡–(
ªq
->
ªq_öfo
 =
NULL
) ||

605 (
ªq
->
ªq_öfo
->
pubkey
 =
NULL
) ||

606 (
ªq
->
ªq_öfo
->
pubkey
->
public_key
 =
NULL
) ||

607 (
ªq
->
ªq_öfo
->
pubkey
->
public_key
->
d©a
 =
NULL
))

609 
	`BIO_¥ötf
(
bio_îr
,"The certificateÑequestáppearsÅo corrupted\n");

610 
	`BIO_¥ötf
(
bio_îr
,"It doesÇot containáÖublic key\n");

611 
íd
;

613 i‡((
pkey
=
	`X509_REQ_gë_pubkey
(
ªq
)Ë=
NULL
)

615 
	`BIO_¥ötf
(
bio_îr
,"error unpackingÖublic key\n");

616 
íd
;

618 
i
=
	`X509_REQ_vîify
(
ªq
,
pkey
);

619 
	`EVP_PKEY_‰ì
(
pkey
);

620 i‡(
i
 < 0)

622 
	`BIO_¥ötf
(
bio_îr
,"Signature verificationÉrror\n");

623 
	`ERR_¥öt_îr‹s
(
bio_îr
);

624 
íd
;

626 i‡(
i
 == 0)

628 
	`BIO_¥ötf
(
bio_îr
,"Signature didÇot matchÅhe certificateÑequest\n");

629 
íd
;

632 
	`BIO_¥ötf
(
bio_îr
,"Signature ok\n");

634 
	`¥öt_«me
(
bio_îr
, "subje˘=", 
	`X509_REQ_gë_subje˘_«me
(
ªq
), 
nmÊag
);

636 i‡((
x
=
	`X509_√w
()Ë=
NULL
Ë
íd
;

638 i‡(
¢o
 =
NULL
)

640 
¢o
 = 
	`ASN1_INTEGER_√w
();

641 i‡(!
¢o
 || !
	`ønd_£rül
(
NULL
, sno))

642 
íd
;

643 i‡(!
	`X509_£t_£rülNumbî
(
x
, 
¢o
))

644 
íd
;

645 
	`ASN1_INTEGER_‰ì
(
¢o
);

646 
¢o
 = 
NULL
;

648 i‡(!
	`X509_£t_£rülNumbî
(
x
, 
¢o
))

649 
íd
;

651 i‡(!
	`X509_£t_issuî_«me
(
x
,
ªq
->
ªq_öfo
->
subje˘
)Ë
íd
;

652 i‡(!
	`X509_£t_subje˘_«me
(
x
,
ªq
->
ªq_öfo
->
subje˘
)Ë
íd
;

654 
	`X509_gmtime_adj
(
	`X509_gë_nŸBef‹e
(
x
),0);

655 
	`X509_time_adj_ex
(
	`X509_gë_nŸA·î
(
x
),
days
, 0, 
NULL
);

657 
pkey
 = 
	`X509_REQ_gë_pubkey
(
ªq
);

658 
	`X509_£t_pubkey
(
x
,
pkey
);

659 
	`EVP_PKEY_‰ì
(
pkey
);

662 
x
=
	`lﬂd_˚π
(
bio_îr
,
öfûe
,
öf‹m©
,
NULL
,
e
,"Certificate");

664 i‡(
x
 =
NULL
Ë
íd
;

665 i‡(
CA_Êag
)

667 
xˇ
=
	`lﬂd_˚π
(
bio_îr
,
CAfûe
,
CAf‹m©
,
NULL
,
e
,"CA Certificate");

668 i‡(
xˇ
 =
NULL
Ë
íd
;

671 i‡(!
noout
 || 
ãxt
 || 
√xt_£rül
)

673 
	`OBJ_¸óã
("2.99999.3",

676 
out
=
	`BIO_√w
(
	`BIO_s_fûe
());

677 i‡(
out
 =
NULL
)

679 
	`ERR_¥öt_îr‹s
(
bio_îr
);

680 
íd
;

682 i‡(
outfûe
 =
NULL
)

684 
	`BIO_£t_Â
(
out
,
°dout
,
BIO_NOCLOSE
);

685 #ifde‡
OPENSSL_SYS_VMS


687 
BIO
 *
tmpbio
 = 
	`BIO_√w
(
	`BIO_f_löebuf„r
());

688 
out
 = 
	`BIO_push
(
tmpbio
, out);

694 i‡(
	`BIO_wrôe_fûíame
(
out
,
outfûe
) <= 0)

696 
	`≥º‹
(
outfûe
);

697 
íd
;

702 i‡(
Æüs
Ë
	`X509_Æüs_£t1
(
x
, (*)alias, -1);

704 i‡(
˛πru°
Ë
	`X509_åu°_˛ór
(
x
);

705 i‡(
˛ºeje˘
Ë
	`X509_ªje˘_˛ór
(
x
);

707 i‡(
åu°
)

709 
i
 = 0; i < 
	`sk_ASN1_OBJECT_num
(
åu°
); i++)

711 
objtmp
 = 
	`sk_ASN1_OBJECT_vÆue
(
åu°
, 
i
);

712 
	`X509_add1_åu°_obje˘
(
x
, 
objtmp
);

716 i‡(
ªje˘
)

718 
i
 = 0; i < 
	`sk_ASN1_OBJECT_num
(
ªje˘
); i++)

720 
objtmp
 = 
	`sk_ASN1_OBJECT_vÆue
(
ªje˘
, 
i
);

721 
	`X509_add1_ªje˘_obje˘
(
x
, 
objtmp
);

725 i‡(
num
)

727 
i
=1; i<=
num
; i++)

729 i‡(
issuî
 =
i
)

731 
	`¥öt_«me
(
STDout
, "issuer= ",

732 
	`X509_gë_issuî_«me
(
x
), 
nmÊag
);

734 i‡(
subje˘
 =
i
)

736 
	`¥öt_«me
(
STDout
, "subject= ",

737 
	`X509_gë_subje˘_«me
(
x
), 
nmÊag
);

739 i‡(
£rül
 =
i
)

741 
	`BIO_¥ötf
(
STDout
,"serial=");

742 
	`i2a_ASN1_INTEGER
(
STDout
,

743 
	`X509_gë_£rülNumbî
(
x
));

744 
	`BIO_¥ötf
(
STDout
,"\n");

746 i‡(
√xt_£rül
 =
i
)

748 
BIGNUM
 *
bn£r
;

749 
ASN1_INTEGER
 *
£r
;

750 
£r
 = 
	`X509_gë_£rülNumbî
(
x
);

751 
bn£r
 = 
	`ASN1_INTEGER_to_BN
(
£r
, 
NULL
);

752 i‡(!
bn£r
)

753 
íd
;

754 i‡(!
	`BN_add_w‹d
(
bn£r
, 1))

755 
íd
;

756 
£r
 = 
	`BN_to_ASN1_INTEGER
(
bn£r
, 
NULL
);

757 i‡(!
£r
)

758 
íd
;

759 
	`BN_‰ì
(
bn£r
);

760 
	`i2a_ASN1_INTEGER
(
out
, 
£r
);

761 
	`ASN1_INTEGER_‰ì
(
£r
);

762 
	`BIO_puts
(
out
, "\n");

764 i‡((
emaû
 =
i
Ë|| (
oc•_uri
 == i))

766 
j
;

767 
	`STACK_OF
(
OPENSSL_STRING
Ë*
eml°
;

768 i‡(
emaû
 =
i
)

769 
eml°
 = 
	`X509_gë1_emaû
(
x
);

771 
eml°
 = 
	`X509_gë1_oc•
(
x
);

772 
j
 = 0; j < 
	`sk_OPENSSL_STRING_num
(
eml°
); j++)

773 
	`BIO_¥ötf
(
STDout
, "%s\n",

774 
	`sk_OPENSSL_STRING_vÆue
(
eml°
, 
j
));

775 
	`X509_emaû_‰ì
(
eml°
);

777 i‡(
Æüsout
 =
i
)

779 *
Æ°r
;

780 
Æ°r
 = 
	`X509_Æüs_gë0
(
x
, 
NULL
);

781 i‡(
Æ°r
Ë
	`BIO_¥ötf
(
STDout
,"%s\n",álstr);

782 
	`BIO_puts
(
STDout
,"<No Alias>\n");

784 i‡(
subje˘_hash
 =
i
)

786 
	`BIO_¥ötf
(
STDout
,"%08lx\n",
	`X509_subje˘_«me_hash
(
x
));

788 #i‚de‡
OPENSSL_NO_MD5


789 i‡(
subje˘_hash_ﬁd
 =
i
)

791 
	`BIO_¥ötf
(
STDout
,"%08lx\n",
	`X509_subje˘_«me_hash_ﬁd
(
x
));

794 i‡(
issuî_hash
 =
i
)

796 
	`BIO_¥ötf
(
STDout
,"%08lx\n",
	`X509_issuî_«me_hash
(
x
));

798 #i‚de‡
OPENSSL_NO_MD5


799 i‡(
issuî_hash_ﬁd
 =
i
)

801 
	`BIO_¥ötf
(
STDout
,"%08lx\n",
	`X509_issuî_«me_hash_ﬁd
(
x
));

804 i‡(
µröt
 =
i
)

806 
X509_PURPOSE
 *
±mp
;

807 
j
;

808 
	`BIO_¥ötf
(
STDout
, "CertificateÖurposes:\n");

809 
j
 = 0; j < 
	`X509_PURPOSE_gë_cou¡
(); j++)

811 
±mp
 = 
	`X509_PURPOSE_gë0
(
j
);

812 
	`puΩo£_¥öt
(
STDout
, 
x
, 
±mp
);

816 i‡(
modulus
 =
i
)

818 
EVP_PKEY
 *
pkey
;

820 
pkey
=
	`X509_gë_pubkey
(
x
);

821 i‡(
pkey
 =
NULL
)

823 
	`BIO_¥ötf
(
bio_îr
,"Modulus=unavailable\n");

824 
	`ERR_¥öt_îr‹s
(
bio_îr
);

825 
íd
;

827 
	`BIO_¥ötf
(
STDout
,"Modulus=");

828 #i‚de‡
OPENSSL_NO_RSA


829 i‡(
pkey
->
ty≥
 =
EVP_PKEY_RSA
)

830 
	`BN_¥öt
(
STDout
,
pkey
->pkey.
rß
->
n
);

833 #i‚de‡
OPENSSL_NO_DSA


834 i‡(
pkey
->
ty≥
 =
EVP_PKEY_DSA
)

835 
	`BN_¥öt
(
STDout
,
pkey
->pkey.
dß
->
pub_key
);

838 
	`BIO_¥ötf
(
STDout
,"Wrong AlgorithmÅype");

839 
	`BIO_¥ötf
(
STDout
,"\n");

840 
	`EVP_PKEY_‰ì
(
pkey
);

843 i‡(
pubkey
 =
i
)

845 
EVP_PKEY
 *
pkey
;

847 
pkey
=
	`X509_gë_pubkey
(
x
);

848 i‡(
pkey
 =
NULL
)

850 
	`BIO_¥ötf
(
bio_îr
,"Error gettingÖublic key\n");

851 
	`ERR_¥öt_îr‹s
(
bio_îr
);

852 
íd
;

854 
	`PEM_wrôe_bio_PUBKEY
(
STDout
, 
pkey
);

855 
	`EVP_PKEY_‰ì
(
pkey
);

858 i‡(
C
 =
i
)

860 *
d
;

861 *
m
;

862 
y
,
z
;

864 
	`X509_NAME_⁄ñöe
(
	`X509_gë_subje˘_«me
(
x
),

865 
buf
, buf);

866 
	`BIO_¥ötf
(
STDout
,"/* subje˘:%†*/\n",
buf
);

867 
m
=
	`X509_NAME_⁄ñöe
(

868 
	`X509_gë_issuî_«me
(
x
),
buf
,

869  
buf
);

870 
	`BIO_¥ötf
(
STDout
,"/* issuî :%†*/\n",
buf
);

872 
z
=
	`i2d_X509
(
x
,
NULL
);

873 
m
=
	`OPENSSL_mÆloc
(
z
);

875 
d
=(*)
m
;

876 
z
=
	`i2d_X509_NAME
(
	`X509_gë_subje˘_«me
(
x
),&
d
);

877 
	`BIO_¥ötf
(
STDout
,"unsig√d ch¨ XXX_subje˘_«me[%d]={\n",
z
);

878 
d
=(*)
m
;

879 
y
=0; y<
z
; y++)

881 
	`BIO_¥ötf
(
STDout
,"0x%02X,",
d
[
y
]);

882 i‡((
y
 & 0x0fË=0x0fË
	`BIO_¥ötf
(
STDout
,"\n");

884 i‡(
y
%16 !0Ë
	`BIO_¥ötf
(
STDout
,"\n");

885 
	`BIO_¥ötf
(
STDout
,"};\n");

887 
z
=
	`i2d_X509_PUBKEY
(
	`X509_gë_X509_PUBKEY
(
x
),&
d
);

888 
	`BIO_¥ötf
(
STDout
,"unsig√d ch¨ XXX_public_key[%d]={\n",
z
);

889 
d
=(*)
m
;

890 
y
=0; y<
z
; y++)

892 
	`BIO_¥ötf
(
STDout
,"0x%02X,",
d
[
y
]);

893 i‡((
y
 & 0x0f) == 0x0f)

894 
	`BIO_¥ötf
(
STDout
,"\n");

896 i‡(
y
%16 !0Ë
	`BIO_¥ötf
(
STDout
,"\n");

897 
	`BIO_¥ötf
(
STDout
,"};\n");

899 
z
=
	`i2d_X509
(
x
,&
d
);

900 
	`BIO_¥ötf
(
STDout
,"unsig√d ch¨ XXX_˚πifiˇã[%d]={\n",
z
);

901 
d
=(*)
m
;

902 
y
=0; y<
z
; y++)

904 
	`BIO_¥ötf
(
STDout
,"0x%02X,",
d
[
y
]);

905 i‡((
y
 & 0x0f) == 0x0f)

906 
	`BIO_¥ötf
(
STDout
,"\n");

908 i‡(
y
%16 !0Ë
	`BIO_¥ötf
(
STDout
,"\n");

909 
	`BIO_¥ötf
(
STDout
,"};\n");

911 
	`OPENSSL_‰ì
(
m
);

913 i‡(
ãxt
 =
i
)

915 
	`X509_¥öt_ex
(
STDout
,
x
,
nmÊag
, 
˚πÊag
);

917 i‡(
°¨td©e
 =
i
)

919 
	`BIO_puts
(
STDout
,"notBefore=");

920 
	`ASN1_TIME_¥öt
(
STDout
,
	`X509_gë_nŸBef‹e
(
x
));

921 
	`BIO_puts
(
STDout
,"\n");

923 i‡(
ídd©e
 =
i
)

925 
	`BIO_puts
(
STDout
,"notAfter=");

926 
	`ASN1_TIME_¥öt
(
STDout
,
	`X509_gë_nŸA·î
(
x
));

927 
	`BIO_puts
(
STDout
,"\n");

929 i‡(
fögî¥öt
 =
i
)

931 
j
;

932 
n
;

933 
md
[
EVP_MAX_MD_SIZE
];

934 c⁄° 
EVP_MD
 *
fdig
 = 
dige°
;

936 i‡(!
fdig
)

937 
fdig
 = 
	`EVP_sha1
();

939 i‡(!
	`X509_dige°
(
x
,
fdig
,
md
,&
n
))

941 
	`BIO_¥ötf
(
bio_îr
,"out of memory\n");

942 
íd
;

944 
	`BIO_¥ötf
(
STDout
,"%s Fingerprint=",

945 
	`OBJ_nid2¢
(
	`EVP_MD_ty≥
(
fdig
)));

946 
j
=0; j<()
n
; j++)

948 
	`BIO_¥ötf
(
STDout
,"%02X%c",
md
[
j
],

949 (
j
+1 =()
n
)

955 i‡((
sign_Êag
 =
i
Ë&& (
x509ªq
 == 0))

957 
	`BIO_¥ötf
(
bio_îr
,"Getting Private key\n");

958 i‡(
Upkey
 =
NULL
)

960 
Upkey
=
	`lﬂd_key
(
bio_îr
,

961 
keyfûe
, 
keyf‹m©
, 0,

962 
∑ssö
, 
e
, "Private key");

963 i‡(
Upkey
 =
NULL
Ë
íd
;

966 
	`as£π
(
√ed_ønd
);

967 i‡(!
	`sign
(
x
,
Upkey
,
days
,
˛ªxt
,
dige°
,

968 
extc⁄f
, 
ext£˘
)Ë
íd
;

970 i‡(
CA_Êag
 =
i
)

972 
	`BIO_¥ötf
(
bio_îr
,"Getting CA Private Key\n");

973 i‡(
CAkeyfûe
 !
NULL
)

975 
CApkey
=
	`lﬂd_key
(
bio_îr
,

976 
CAkeyfûe
, 
CAkeyf‹m©
,

977 0, 
∑ssö
, 
e
,

979 i‡(
CApkey
 =
NULL
Ë
íd
;

982 
	`as£π
(
√ed_ønd
);

983 i‡(!
	`x509_˚πify
(
˘x
,
CAfûe
,
dige°
,
x
,
xˇ
,

984 
CApkey
, 
sig›ts
,

985 
CA£rül
,
CA_¸óã£rül
,
days
, 
˛ªxt
,

986 
extc⁄f
, 
ext£˘
, 
¢o
))

987 
íd
;

989 i‡(
x509ªq
 =
i
)

991 
EVP_PKEY
 *
pk
;

993 
	`BIO_¥ötf
(
bio_îr
,"GettingÑequest Private Key\n");

994 i‡(
keyfûe
 =
NULL
)

996 
	`BIO_¥ötf
(
bio_îr
,"noÑequest key file specified\n");

997 
íd
;

1001 
pk
=
	`lﬂd_key
(
bio_îr
,

1002 
keyfûe
, 
keyf‹m©
, 0,

1003 
∑ssö
, 
e
, "request key");

1004 i‡(
pk
 =
NULL
Ë
íd
;

1007 
	`BIO_¥ötf
(
bio_îr
,"Generating certificateÑequest\n");

1009 
rq
=
	`X509_to_X509_REQ
(
x
,
pk
,
dige°
);

1010 
	`EVP_PKEY_‰ì
(
pk
);

1011 i‡(
rq
 =
NULL
)

1013 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1014 
íd
;

1016 i‡(!
noout
)

1018 
	`X509_REQ_¥öt
(
out
,
rq
);

1019 
	`PEM_wrôe_bio_X509_REQ
(
out
,
rq
);

1021 
noout
=1;

1023 i‡(
oc•id
 =
i
)

1025 
	`X509_oc•id_¥öt
(
out
, 
x
);

1030 i‡(
checkíd
)

1032 
time_t
 
tcheck
=
	`time
(
NULL
Ë+ 
checkoff£t
;

1034 i‡(
	`X509_cmp_time
(
	`X509_gë_nŸA·î
(
x
), &
tcheck
) < 0)

1036 
	`BIO_¥ötf
(
out
,"Certificate willÉxpire\n");

1037 
ªt
=1;

1041 
	`BIO_¥ötf
(
out
,"Certificate willÇotÉxpire\n");

1042 
ªt
=0;

1044 
íd
;

1047 i‡(
noout
)

1049 
ªt
=0;

1050 
íd
;

1053 i‡(
outf‹m©
 =
FORMAT_ASN1
)

1054 
i
=
	`i2d_X509_bio
(
out
,
x
);

1055 i‡(
outf‹m©
 =
FORMAT_PEM
)

1057 i‡(
åu°out
Ë
i
=
	`PEM_wrôe_bio_X509_AUX
(
out
,
x
);

1058 
i
=
	`PEM_wrôe_bio_X509
(
out
,
x
);

1060 i‡(
outf‹m©
 =
FORMAT_NETSCAPE
)

1062 
NETSCAPE_X509
 
nx
;

1063 
ASN1_OCTET_STRING
 
hdr
;

1065 
hdr
.
d©a
=(*)
NETSCAPE_CERT_HDR
;

1066 
hdr
.
Àngth
=
	`°æí
(
NETSCAPE_CERT_HDR
);

1067 
nx
.
hódî
&
hdr
;

1068 
nx
.
˚π
=
x
;

1070 
i
=
	`ASN1_ôem_i2d_bio
(
	`ASN1_ITEM_Ωå
(
NETSCAPE_X509
),
out
,&
nx
);

1073 
	`BIO_¥ötf
(
bio_îr
,"bad output format specified for outfile\n");

1074 
íd
;

1076 i‡(!
i
)

1078 
	`BIO_¥ötf
(
bio_îr
,"unableÅo write certificate\n");

1079 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1080 
íd
;

1082 
ªt
=0;

1083 
íd
:

1084 i‡(
√ed_ønd
)

1085 
	`≠p_RAND_wrôe_fûe
(
NULL
, 
bio_îr
);

1086 
	`OBJ_˛ónup
();

1087 
	`NCONF_‰ì
(
extc⁄f
);

1088 
	`BIO_‰ì_Æl
(
out
);

1089 
	`BIO_‰ì_Æl
(
STDout
);

1090 
	`X509_STORE_‰ì
(
˘x
);

1091 
	`X509_REQ_‰ì
(
ªq
);

1092 
	`X509_‰ì
(
x
);

1093 
	`X509_‰ì
(
xˇ
);

1094 
	`EVP_PKEY_‰ì
(
Upkey
);

1095 
	`EVP_PKEY_‰ì
(
CApkey
);

1096 i‡(
sig›ts
)

1097 
	`sk_OPENSSL_STRING_‰ì
(
sig›ts
);

1098 
	`X509_REQ_‰ì
(
rq
);

1099 
	`ASN1_INTEGER_‰ì
(
¢o
);

1100 
	`sk_ASN1_OBJECT_p›_‰ì
(
åu°
, 
ASN1_OBJECT_‰ì
);

1101 
	`sk_ASN1_OBJECT_p›_‰ì
(
ªje˘
, 
ASN1_OBJECT_‰ì
);

1102 i‡(
∑ssö
Ë
	`OPENSSL_‰ì
(passin);

1103 
	`≠ps_shutdown
();

1104 
	`OPENSSL_EXIT
(
ªt
);

1105 
	}
}

1107 
ASN1_INTEGER
 *
	$x509_lﬂd_£rül
(*
CAfûe
, *
£rülfûe
, 
¸óã
)

1109 *
buf
 = 
NULL
, *
p
;

1110 
ASN1_INTEGER
 *
bs
 = 
NULL
;

1111 
BIGNUM
 *
£rül
 = 
NULL
;

1112 
size_t
 
Àn
;

1114 
Àn
 = ((
£rülfûe
 =
NULL
)

1115 ?(
	`°æí
(
CAfûe
)+°æí(
POSTFIX
)+1)

1116 :(
	`°æí
(
£rülfûe
)))+1;

1117 
buf
=
	`OPENSSL_mÆloc
(
Àn
);

1118 i‡(
buf
 =
NULL
Ë{ 
	`BIO_¥ötf
(
bio_îr
,"ouào‡mem\n"); 
íd
; }

1119 i‡(
£rülfûe
 =
NULL
)

1121 
	`BUF_°æ˝y
(
buf
,
CAfûe
,
Àn
);

1122 
p
=
buf
; *p;Ö++)

1123 i‡(*
p
 == '.')

1125 *
p
='\0';

1128 
	`BUF_°æˇt
(
buf
,
POSTFIX
,
Àn
);

1131 
	`BUF_°æ˝y
(
buf
,
£rülfûe
,
Àn
);

1133 
£rül
 = 
	`lﬂd_£rül
(
buf
, 
¸óã
, 
NULL
);

1134 i‡(
£rül
 =
NULL
Ë
íd
;

1136 i‡(!
	`BN_add_w‹d
(
£rül
,1))

1137 { 
	`BIO_¥ötf
(
bio_îr
,"add_w‹d faûuª\n"); 
íd
; }

1139 i‡(!
	`ßve_£rül
(
buf
, 
NULL
, 
£rül
, &
bs
)Ë
íd
;

1141 
íd
:

1142 i‡(
buf
Ë
	`OPENSSL_‰ì
(buf);

1143 
	`BN_‰ì
(
£rül
);

1144  
bs
;

1145 
	}
}

1147 
x509_˚πify
(
X509_STORE
 *
˘x
, *
CAfûe
, c⁄° 
EVP_MD
 *
dige°
,

1148 
X509
 *
x
, X509 *
xˇ
, 
EVP_PKEY
 *
pkey
,

1149 
STACK_OF
(
OPENSSL_STRING
Ë*
sig›ts
,

1150 *
£rülfûe
, 
¸óã
,

1151 
days
, 
˛ªxt
, 
CONF
 *
c⁄f
, *
£˘i⁄
,

1152 
ASN1_INTEGER
 *
¢o
)

1154 
	gªt
=0;

1155 
ASN1_INTEGER
 *
	gbs
=
NULL
;

1156 
X509_STORE_CTX
 
	gxsc
;

1157 
EVP_PKEY
 *
	gupkey
;

1159 
	gupkey
 = 
X509_gë_pubkey
(
xˇ
);

1160 
EVP_PKEY_c›y_∑ømëîs
(
upkey
,
pkey
);

1161 
EVP_PKEY_‰ì
(
upkey
);

1163 if(!
X509_STORE_CTX_öô
(&
xsc
,
˘x
,
x
,
NULL
))

1165 
BIO_¥ötf
(
bio_îr
,"Error initialising X509 store\n");

1166 
	gíd
;

1168 i‡(
	g¢o
Ë
	gbs
 = 
¢o
;

1169 i‡(!(
	gbs
 = 
x509_lﬂd_£rül
(
CAfûe
, 
£rülfûe
, 
¸óã
)))

1170 
	gíd
;

1176 
X509_STORE_CTX_£t_˚π
(&
xsc
,
x
);

1177 
X509_STORE_CTX_£t_Êags
(&
xsc
, 
X509_V_FLAG_CHECK_SS_SIGNATURE
);

1178 i‡(!
	gªqfûe
 && 
X509_vîify_˚π
(&
xsc
) <= 0)

1179 
íd
;

1181 i‡(!
X509_check_¥iv©e_key
(
xˇ
,
pkey
))

1183 
BIO_¥ötf
(
bio_îr
,"CA certificateánd CAÖrivate key doÇot match\n");

1184 
	gíd
;

1187 i‡(!
X509_£t_issuî_«me
(
x
,
X509_gë_subje˘_«me
(
xˇ
))Ë
	gíd
;

1188 i‡(!
X509_£t_£rülNumbî
(
x
,
bs
)Ë
	gíd
;

1190 i‡(
X509_gmtime_adj
(
X509_gë_nŸBef‹e
(
x
),0LË=
NULL
)

1191 
íd
;

1194 i‡(
X509_time_adj_ex
(
X509_gë_nŸA·î
(
x
),
days
, 0, 
NULL
) == NULL)

1195 
íd
;

1197 i‡(
	g˛ªxt
)

1199 
X509_gë_ext_cou¡
(
x
Ë> 0Ë
X509_dñëe_ext
(x, 0);

1202 i‡(
	gc⁄f
)

1204 
X509V3_CTX
 
	g˘x2
;

1205 
X509_£t_vîsi⁄
(
x
,2);

1206 
X509V3_£t_˘x
(&
˘x2
, 
xˇ
, 
x
, 
NULL
, NULL, 0);

1207 
X509V3_£t_nc⁄f
(&
˘x2
, 
c⁄f
);

1208 i‡(!
X509V3_EXT_add_nc⁄f
(
c⁄f
, &
˘x2
, 
£˘i⁄
, 
x
)Ë
	gíd
;

1211 i‡(!
do_X509_sign
(
bio_îr
, 
x
, 
pkey
, 
dige°
, 
sig›ts
))

1212 
	gíd
;

1213 
	gªt
=1;

1214 
	gíd
:

1215 
X509_STORE_CTX_˛ónup
(&
xsc
);

1216 i‡(!
	gªt
)

1217 
ERR_¥öt_îr‹s
(
bio_îr
);

1218 i‡(!
	g¢o
Ë
ASN1_INTEGER_‰ì
(
bs
);

1219  
	gªt
;

1222 
MS_CALLBACK
 
	$ˇŒb
(
ok
, 
X509_STORE_CTX
 *
˘x
)

1224 
îr
;

1225 
X509
 *
îr_˚π
;

1230 
îr
=
	`X509_STORE_CTX_gë_îr‹
(
˘x
);

1231 i‡(
îr
 =
X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
)

1237 i‡(
ok
)

1239 
	`BIO_¥ötf
(
bio_îr
,"error with certificateÅo be certified - should be self signed\n");

1244 
îr_˚π
=
	`X509_STORE_CTX_gë_cuºít_˚π
(
˘x
);

1245 
	`¥öt_«me
(
bio_îr
, 
NULL
, 
	`X509_gë_subje˘_«me
(
îr_˚π
),0);

1246 
	`BIO_¥ötf
(
bio_îr
,"error with certificate -Érror %dát depth %d\n%s\n",

1247 
îr
,
	`X509_STORE_CTX_gë_îr‹_dïth
(
˘x
),

1248 
	`X509_vîify_˚π_îr‹_°rög
(
îr
));

1251 
	}
}

1254 
	$sign
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, 
days
, 
˛ªxt
, c⁄° 
EVP_MD
 *
dige°
,

1255 
CONF
 *
c⁄f
, *
£˘i⁄
)

1258 
EVP_PKEY
 *
pktmp
;

1260 
pktmp
 = 
	`X509_gë_pubkey
(
x
);

1261 
	`EVP_PKEY_c›y_∑ømëîs
(
pktmp
,
pkey
);

1262 
	`EVP_PKEY_ßve_∑ømëîs
(
pktmp
,1);

1263 
	`EVP_PKEY_‰ì
(
pktmp
);

1265 i‡(!
	`X509_£t_issuî_«me
(
x
,
	`X509_gë_subje˘_«me
(x))Ë
îr
;

1266 i‡(
	`X509_gmtime_adj
(
	`X509_gë_nŸBef‹e
(
x
),0Ë=
NULL
Ë
îr
;

1272 i‡(
	`X509_gmtime_adj
(
	`X509_gë_nŸA·î
(
x
),()60*60*24*
days
Ë=
NULL
)

1273 
îr
;

1275 i‡(!
	`X509_£t_pubkey
(
x
,
pkey
)Ë
îr
;

1276 i‡(
˛ªxt
)

1278 
	`X509_gë_ext_cou¡
(
x
Ë> 0Ë
	`X509_dñëe_ext
(x, 0);

1280 i‡(
c⁄f
)

1282 
X509V3_CTX
 
˘x
;

1283 
	`X509_£t_vîsi⁄
(
x
,2);

1284 
	`X509V3_£t_˘x
(&
˘x
, 
x
, x, 
NULL
, NULL, 0);

1285 
	`X509V3_£t_nc⁄f
(&
˘x
, 
c⁄f
);

1286 i‡(!
	`X509V3_EXT_add_nc⁄f
(
c⁄f
, &
˘x
, 
£˘i⁄
, 
x
)Ë
îr
;

1288 i‡(!
	`X509_sign
(
x
,
pkey
,
dige°
)Ë
îr
;

1290 
îr
:

1291 
	`ERR_¥öt_îr‹s
(
bio_îr
);

1293 
	}
}

1295 
	$puΩo£_¥öt
(
BIO
 *
bio
, 
X509
 *
˚π
, 
X509_PURPOSE
 *
±
)

1297 
id
, 
i
, 
idªt
;

1298 *
≤ame
;

1299 
id
 = 
	`X509_PURPOSE_gë_id
(
±
);

1300 
≤ame
 = 
	`X509_PURPOSE_gë0_«me
(
±
);

1301 
i
 = 0; i < 2; i++)

1303 
idªt
 = 
	`X509_check_puΩo£
(
˚π
, 
id
, 
i
);

1304 
	`BIO_¥ötf
(
bio
, "%s%†: ", 
≤ame
, 
i
 ? " CA" : "");

1305 i‡(
idªt
 =1Ë
	`BIO_¥ötf
(
bio
, "Yes\n");

1306 i‡(
idªt
 =0Ë
	`BIO_¥ötf
(
bio
, "No\n");

1307 
	`BIO_¥ötf
(
bio
, "Ye†(WARNING code=%d)\n", 
idªt
);

1310 
	}
}

	@../crypto/ec/ec_lcl.h

73 
	~<°dlib.h
>

75 
	~<›ís¶/obj_mac.h
>

76 
	~<›ís¶/ec.h
>

77 
	~<›ís¶/bn.h
>

79 #i‡
deföed
(
__SUNPRO_C
)

80 #i‡
__SUNPRO_C
 >= 0x520

81 #¥agm®
îr‹_mesßges
 (
off
,
E_ARRAY_OF_INCOMPLETE_NONAME
,
E_ARRAY_OF_INCOMPLETE
)

86 
	#EC_FLAGS_DEFAULT_OCT
 0x1

	)

91 
	sec_mëhod_°
 {

93 
	mÊags
;

95 
	mfõld_ty≥
;

98 (*
	mgroup_öô
)(
	mEC_GROUP
 *);

99 (*
	mgroup_föish
)(
	mEC_GROUP
 *);

100 (*
	mgroup_˛ór_föish
)(
	mEC_GROUP
 *);

101 (*
	mgroup_c›y
)(
	mEC_GROUP
 *, const EC_GROUP *);

105 (*
	mgroup_£t_curve
)(
	mEC_GROUP
 *, c⁄° 
BIGNUM
 *
	mp
, c⁄° BIGNUM *
	ma
, c⁄° BIGNUM *
	mb
, 
	mBN_CTX
 *);

106 (*
	mgroup_gë_curve
)(c⁄° 
	mEC_GROUP
 *, 
BIGNUM
 *
	mp
, BIGNUM *
	ma
, BIGNUM *
	mb
, 
	mBN_CTX
 *);

109 (*
	mgroup_gë_degªe
)(c⁄° 
	mEC_GROUP
 *);

112 (*
	mgroup_check_dis¸imö™t
)(c⁄° 
	mEC_GROUP
 *, 
	mBN_CTX
 *);

115 (*
	mpoöt_öô
)(
	mEC_POINT
 *);

116 (*
	mpoöt_föish
)(
	mEC_POINT
 *);

117 (*
	mpoöt_˛ór_föish
)(
	mEC_POINT
 *);

118 (*
	mpoöt_c›y
)(
	mEC_POINT
 *, const EC_POINT *);

127 (*
	mpoöt_£t_to_öföôy
)(c⁄° 
	mEC_GROUP
 *, 
	mEC_POINT
 *);

128 (*
	mpoöt_£t_J¥oje˘ive_co‹dö©es_GFp
)(c⁄° 
	mEC_GROUP
 *, 
	mEC_POINT
 *,

129 c⁄° 
BIGNUM
 *
	mx
, c⁄° BIGNUM *
	my
, c⁄° BIGNUM *
	mz
, 
	mBN_CTX
 *);

130 (*
	mpoöt_gë_J¥oje˘ive_co‹dö©es_GFp
)(c⁄° 
	mEC_GROUP
 *, c⁄° 
	mEC_POINT
 *,

131 
BIGNUM
 *
	mx
, BIGNUM *
	my
, BIGNUM *
	mz
, 
	mBN_CTX
 *);

132 (*
	mpoöt_£t_afföe_co‹dö©es
)(c⁄° 
	mEC_GROUP
 *, 
	mEC_POINT
 *,

133 c⁄° 
BIGNUM
 *
	mx
, c⁄° BIGNUM *
	my
, 
	mBN_CTX
 *);

134 (*
	mpoöt_gë_afföe_co‹dö©es
)(c⁄° 
	mEC_GROUP
 *, c⁄° 
	mEC_POINT
 *,

135 
BIGNUM
 *
	mx
, BIGNUM *
	my
, 
	mBN_CTX
 *);

136 (*
	mpoöt_£t_com¥es£d_co‹dö©es
)(c⁄° 
	mEC_GROUP
 *, 
	mEC_POINT
 *,

137 c⁄° 
BIGNUM
 *
	mx
, 
	my_bô
, 
	mBN_CTX
 *);

140 
size_t
 (*
poöt2o˘
)(c⁄° 
	mEC_GROUP
 *, c⁄° 
	mEC_POINT
 *, 
poöt_c⁄vîsi⁄_f‹m_t
 
	mf‹m
,

141 *
	mbuf
, 
size_t
 
	mÀn
, 
	mBN_CTX
 *);

142 (*
	mo˘2poöt
)(c⁄° 
	mEC_GROUP
 *, 
	mEC_POINT
 *,

143 c⁄° *
	mbuf
, 
size_t
 
	mÀn
, 
	mBN_CTX
 *);

146 (*
	madd
)(c⁄° 
	mEC_GROUP
 *, 
EC_POINT
 *
	mr
, c⁄° EC_POINT *
	ma
, c⁄° EC_POINT *
	mb
, 
	mBN_CTX
 *);

147 (*
	mdbl
)(c⁄° 
	mEC_GROUP
 *, 
EC_POINT
 *
	mr
, c⁄° EC_POINT *
	ma
, 
	mBN_CTX
 *);

148 (*
	mövît
)(c⁄° 
	mEC_GROUP
 *, 
	mEC_POINT
 *, 
	mBN_CTX
 *);

151 (*
	mis_©_öföôy
)(c⁄° 
	mEC_GROUP
 *, c⁄° 
	mEC_POINT
 *);

152 (*
	mis_⁄_curve
)(c⁄° 
	mEC_GROUP
 *, c⁄° 
	mEC_POINT
 *, 
	mBN_CTX
 *);

153 (*
	mpoöt_cmp
)(c⁄° 
	mEC_GROUP
 *, c⁄° 
EC_POINT
 *
	ma
, c⁄° EC_POINT *
	mb
, 
	mBN_CTX
 *);

156 (*
	mmake_afföe
)(c⁄° 
	mEC_GROUP
 *, 
	mEC_POINT
 *, 
	mBN_CTX
 *);

157 (*
	mpoöts_make_afföe
)(c⁄° 
	mEC_GROUP
 *, 
size_t
 
	mnum
, 
	mEC_POINT
 *[], 
	mBN_CTX
 *);

161 (*
	mmul
)(c⁄° 
EC_GROUP
 *
	mgroup
, 
EC_POINT
 *
	mr
, c⁄° 
BIGNUM
 *
	msˇœr
,

162 
size_t
 
	mnum
, c⁄° 
EC_POINT
 *
	mpoöts
[], c⁄° 
BIGNUM
 *
	msˇœrs
[], 
	mBN_CTX
 *);

163 (*
	m¥ecompuã_mu…
)(
EC_GROUP
 *
	mgroup
, 
	mBN_CTX
 *);

164 (*
	mhave_¥ecompuã_mu…
)(c⁄° 
EC_GROUP
 *
	mgroup
);

172 (*
	mfõld_mul
)(c⁄° 
	mEC_GROUP
 *, 
BIGNUM
 *
	mr
, c⁄° BIGNUM *
	ma
, c⁄° BIGNUM *
	mb
, 
	mBN_CTX
 *);

173 (*
	mfõld_sqr
)(c⁄° 
	mEC_GROUP
 *, 
BIGNUM
 *
	mr
, c⁄° BIGNUM *
	ma
, 
	mBN_CTX
 *);

174 (*
	mfõld_div
)(c⁄° 
	mEC_GROUP
 *, 
BIGNUM
 *
	mr
, c⁄° BIGNUM *
	ma
, c⁄° BIGNUM *
	mb
, 
	mBN_CTX
 *);

176 (*
	mfõld_ícode
)(c⁄° 
	mEC_GROUP
 *, 
BIGNUM
 *
	mr
, c⁄° BIGNUM *
	ma
, 
	mBN_CTX
 *);

177 (*
	mfõld_decode
)(c⁄° 
	mEC_GROUP
 *, 
BIGNUM
 *
	mr
, c⁄° BIGNUM *
	ma
, 
	mBN_CTX
 *);

178 (*
	mfõld_£t_to_⁄e
)(c⁄° 
	mEC_GROUP
 *, 
BIGNUM
 *
	mr
, 
	mBN_CTX
 *);

181 
	sec_exåa_d©a_°
 {

182 
ec_exåa_d©a_°
 *
	m√xt
;

183 *
	md©a
;

184 *(*
	mdup_func
)(*);

185 (*
	m‰ì_func
)(*);

186 (*
	m˛ór_‰ì_func
)(*);

187 } 
	tEC_EXTRA_DATA
;

189 
	sec_group_°
 {

190 c⁄° 
EC_METHOD
 *
	mmëh
;

192 
EC_POINT
 *
	mgíî©‹
;

193 
BIGNUM
 
	m‹dî
, 
	mcoÁ˘‹
;

195 
	mcurve_«me
;

196 
	ma¢1_Êag
;

197 
poöt_c⁄vîsi⁄_f‹m_t
 
	ma¢1_f‹m
;

199 *
	m£ed
;

200 
size_t
 
	m£ed_Àn
;

202 
EC_EXTRA_DATA
 *
	mexåa_d©a
;

207 
BIGNUM
 
	mfõld
;

213 
	mpﬁy
[6];

222 
BIGNUM
 
	ma
, 
	mb
;

233 
	ma_is_möus3
;

235 *
	mfõld_d©a1
;

236 *
	mfõld_d©a2
;

237 (*
	mfõld_mod_func
)(
	mBIGNUM
 *, c⁄° BIGNUM *, c⁄° BIGNUM *, 
	mBN_CTX
 *);

240 
	sec_key_°
 {

241 
	mvîsi⁄
;

243 
EC_GROUP
 *
	mgroup
;

245 
EC_POINT
 *
	mpub_key
;

246 
BIGNUM
 *
	m¥iv_key
;

248 
	míc_Êag
;

249 
poöt_c⁄vîsi⁄_f‹m_t
 
	mc⁄v_f‹m
;

251 
	mª„ªn˚s
;

252 
	mÊags
;

254 
EC_EXTRA_DATA
 *
	mmëhod_d©a
;

262 
EC_EX_DATA_£t_d©a
(
EC_EXTRA_DATA
 **, *
d©a
,

263 *(*
dup_func
)(*), (*
‰ì_func
)(*), (*
˛ór_‰ì_func
)(*));

264 *
	`EC_EX_DATA_gë_d©a
(c⁄° 
EC_EXTRA_DATA
 *,

265 *(*
dup_func
)(*), (*
‰ì_func
)(*), (*
˛ór_‰ì_func
)(*));

266 
	`EC_EX_DATA_‰ì_d©a
(
EC_EXTRA_DATA
 **,

267 *(*
dup_func
)(*), (*
‰ì_func
)(*), (*
˛ór_‰ì_func
)(*));

268 
	`EC_EX_DATA_˛ór_‰ì_d©a
(
EC_EXTRA_DATA
 **,

269 *(*
dup_func
)(*), (*
‰ì_func
)(*), (*
˛ór_‰ì_func
)(*));

270 
	`EC_EX_DATA_‰ì_Æl_d©a
(
EC_EXTRA_DATA
 **);

271 
	`EC_EX_DATA_˛ór_‰ì_Æl_d©a
(
EC_EXTRA_DATA
 **);

275 
	sec_poöt_°
 {

276 c⁄° 
EC_METHOD
 *
mëh
;

281 
BIGNUM
 
X
;

282 
BIGNUM
 
Y
;

283 
BIGNUM
 
Z
;

285 
Z_is_⁄e
;

292 
	`ec_wNAF_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
sˇœr
,

293 
size_t
 
num
, c⁄° 
EC_POINT
 *
poöts
[], c⁄° 
BIGNUM
 *
sˇœrs
[], 
BN_CTX
 *);

294 
	`ec_wNAF_¥ecompuã_mu…
(
EC_GROUP
 *
group
, 
BN_CTX
 *);

295 
	`ec_wNAF_have_¥ecompuã_mu…
(c⁄° 
EC_GROUP
 *
group
);

299 
	`ec_GFp_sim∂e_group_öô
(
EC_GROUP
 *);

300 
	`ec_GFp_sim∂e_group_föish
(
EC_GROUP
 *);

301 
	`ec_GFp_sim∂e_group_˛ór_föish
(
EC_GROUP
 *);

302 
	`ec_GFp_sim∂e_group_c›y
(
EC_GROUP
 *, const EC_GROUP *);

303 
	`ec_GFp_sim∂e_group_£t_curve
(
EC_GROUP
 *, c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *);

304 
	`ec_GFp_sim∂e_group_gë_curve
(c⁄° 
EC_GROUP
 *, 
BIGNUM
 *
p
, BIGNUM *
a
, BIGNUM *
b
, 
BN_CTX
 *);

305 
	`ec_GFp_sim∂e_group_gë_degªe
(c⁄° 
EC_GROUP
 *);

306 
	`ec_GFp_sim∂e_group_check_dis¸imö™t
(c⁄° 
EC_GROUP
 *, 
BN_CTX
 *);

307 
	`ec_GFp_sim∂e_poöt_öô
(
EC_POINT
 *);

308 
	`ec_GFp_sim∂e_poöt_föish
(
EC_POINT
 *);

309 
	`ec_GFp_sim∂e_poöt_˛ór_föish
(
EC_POINT
 *);

310 
	`ec_GFp_sim∂e_poöt_c›y
(
EC_POINT
 *, const EC_POINT *);

311 
	`ec_GFp_sim∂e_poöt_£t_to_öföôy
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *);

312 
	`ec_GFp_sim∂e_£t_J¥oje˘ive_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *,

313 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
, c⁄° BIGNUM *
z
, 
BN_CTX
 *);

314 
	`ec_GFp_sim∂e_gë_J¥oje˘ive_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

315 
BIGNUM
 *
x
, BIGNUM *
y
, BIGNUM *
z
, 
BN_CTX
 *);

316 
	`ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *,

317 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
, 
BN_CTX
 *);

318 
	`ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

319 
BIGNUM
 *
x
, BIGNUM *
y
, 
BN_CTX
 *);

320 
	`ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *,

321 c⁄° 
BIGNUM
 *
x
, 
y_bô
, 
BN_CTX
 *);

322 
size_t
 
	`ec_GFp_sim∂e_poöt2o˘
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *, 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
,

323 *
buf
, 
size_t
 
Àn
, 
BN_CTX
 *);

324 
	`ec_GFp_sim∂e_o˘2poöt
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *,

325 c⁄° *
buf
, 
size_t
 
Àn
, 
BN_CTX
 *);

326 
	`ec_GFp_sim∂e_add
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *
r
, c⁄° EC_POINT *
a
, c⁄° EC_POINT *
b
, 
BN_CTX
 *);

327 
	`ec_GFp_sim∂e_dbl
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *
r
, c⁄° EC_POINT *
a
, 
BN_CTX
 *);

328 
	`ec_GFp_sim∂e_övît
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *, 
BN_CTX
 *);

329 
	`ec_GFp_sim∂e_is_©_öföôy
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *);

330 
	`ec_GFp_sim∂e_is_⁄_curve
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *, 
BN_CTX
 *);

331 
	`ec_GFp_sim∂e_cmp
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *
a
, c⁄° EC_POINT *
b
, 
BN_CTX
 *);

332 
	`ec_GFp_sim∂e_make_afföe
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *, 
BN_CTX
 *);

333 
	`ec_GFp_sim∂e_poöts_make_afföe
(c⁄° 
EC_GROUP
 *, 
size_t
 
num
, 
EC_POINT
 *[], 
BN_CTX
 *);

334 
	`ec_GFp_sim∂e_fõld_mul
(c⁄° 
EC_GROUP
 *, 
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *);

335 
	`ec_GFp_sim∂e_fõld_sqr
(c⁄° 
EC_GROUP
 *, 
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
BN_CTX
 *);

339 
	`ec_GFp_m⁄t_group_öô
(
EC_GROUP
 *);

340 
	`ec_GFp_m⁄t_group_£t_curve
(
EC_GROUP
 *, c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *);

341 
	`ec_GFp_m⁄t_group_föish
(
EC_GROUP
 *);

342 
	`ec_GFp_m⁄t_group_˛ór_föish
(
EC_GROUP
 *);

343 
	`ec_GFp_m⁄t_group_c›y
(
EC_GROUP
 *, const EC_GROUP *);

344 
	`ec_GFp_m⁄t_fõld_mul
(c⁄° 
EC_GROUP
 *, 
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *);

345 
	`ec_GFp_m⁄t_fõld_sqr
(c⁄° 
EC_GROUP
 *, 
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
BN_CTX
 *);

346 
	`ec_GFp_m⁄t_fõld_ícode
(c⁄° 
EC_GROUP
 *, 
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
BN_CTX
 *);

347 
	`ec_GFp_m⁄t_fõld_decode
(c⁄° 
EC_GROUP
 *, 
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
BN_CTX
 *);

348 
	`ec_GFp_m⁄t_fõld_£t_to_⁄e
(c⁄° 
EC_GROUP
 *, 
BIGNUM
 *
r
, 
BN_CTX
 *);

352 
	`ec_GFp_ni°_group_c›y
(
EC_GROUP
 *
de°
, c⁄° EC_GROUP *
§c
);

353 
	`ec_GFp_ni°_group_£t_curve
(
EC_GROUP
 *, c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *);

354 
	`ec_GFp_ni°_fõld_mul
(c⁄° 
EC_GROUP
 *, 
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *);

355 
	`ec_GFp_ni°_fõld_sqr
(c⁄° 
EC_GROUP
 *, 
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
BN_CTX
 *);

359 
	`ec_GF2m_sim∂e_group_öô
(
EC_GROUP
 *);

360 
	`ec_GF2m_sim∂e_group_föish
(
EC_GROUP
 *);

361 
	`ec_GF2m_sim∂e_group_˛ór_föish
(
EC_GROUP
 *);

362 
	`ec_GF2m_sim∂e_group_c›y
(
EC_GROUP
 *, const EC_GROUP *);

363 
	`ec_GF2m_sim∂e_group_£t_curve
(
EC_GROUP
 *, c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *);

364 
	`ec_GF2m_sim∂e_group_gë_curve
(c⁄° 
EC_GROUP
 *, 
BIGNUM
 *
p
, BIGNUM *
a
, BIGNUM *
b
, 
BN_CTX
 *);

365 
	`ec_GF2m_sim∂e_group_gë_degªe
(c⁄° 
EC_GROUP
 *);

366 
	`ec_GF2m_sim∂e_group_check_dis¸imö™t
(c⁄° 
EC_GROUP
 *, 
BN_CTX
 *);

367 
	`ec_GF2m_sim∂e_poöt_öô
(
EC_POINT
 *);

368 
	`ec_GF2m_sim∂e_poöt_föish
(
EC_POINT
 *);

369 
	`ec_GF2m_sim∂e_poöt_˛ór_föish
(
EC_POINT
 *);

370 
	`ec_GF2m_sim∂e_poöt_c›y
(
EC_POINT
 *, const EC_POINT *);

371 
	`ec_GF2m_sim∂e_poöt_£t_to_öföôy
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *);

372 
	`ec_GF2m_sim∂e_poöt_£t_afföe_co‹dö©es
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *,

373 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
, 
BN_CTX
 *);

374 
	`ec_GF2m_sim∂e_poöt_gë_afföe_co‹dö©es
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

375 
BIGNUM
 *
x
, BIGNUM *
y
, 
BN_CTX
 *);

376 
	`ec_GF2m_sim∂e_£t_com¥es£d_co‹dö©es
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *,

377 c⁄° 
BIGNUM
 *
x
, 
y_bô
, 
BN_CTX
 *);

378 
size_t
 
	`ec_GF2m_sim∂e_poöt2o˘
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *, 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
,

379 *
buf
, 
size_t
 
Àn
, 
BN_CTX
 *);

380 
	`ec_GF2m_sim∂e_o˘2poöt
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *,

381 c⁄° *
buf
, 
size_t
 
Àn
, 
BN_CTX
 *);

382 
	`ec_GF2m_sim∂e_add
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *
r
, c⁄° EC_POINT *
a
, c⁄° EC_POINT *
b
, 
BN_CTX
 *);

383 
	`ec_GF2m_sim∂e_dbl
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *
r
, c⁄° EC_POINT *
a
, 
BN_CTX
 *);

384 
	`ec_GF2m_sim∂e_övît
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *, 
BN_CTX
 *);

385 
	`ec_GF2m_sim∂e_is_©_öföôy
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *);

386 
	`ec_GF2m_sim∂e_is_⁄_curve
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *, 
BN_CTX
 *);

387 
	`ec_GF2m_sim∂e_cmp
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *
a
, c⁄° EC_POINT *
b
, 
BN_CTX
 *);

388 
	`ec_GF2m_sim∂e_make_afföe
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *, 
BN_CTX
 *);

389 
	`ec_GF2m_sim∂e_poöts_make_afföe
(c⁄° 
EC_GROUP
 *, 
size_t
 
num
, 
EC_POINT
 *[], 
BN_CTX
 *);

390 
	`ec_GF2m_sim∂e_fõld_mul
(c⁄° 
EC_GROUP
 *, 
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *);

391 
	`ec_GF2m_sim∂e_fõld_sqr
(c⁄° 
EC_GROUP
 *, 
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
BN_CTX
 *);

392 
	`ec_GF2m_sim∂e_fõld_div
(c⁄° 
EC_GROUP
 *, 
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *);

396 
	`ec_GF2m_sim∂e_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
sˇœr
,

397 
size_t
 
num
, c⁄° 
EC_POINT
 *
poöts
[], c⁄° 
BIGNUM
 *
sˇœrs
[], 
BN_CTX
 *);

398 
	`ec_GF2m_¥ecompuã_mu…
(
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

399 
	`ec_GF2m_have_¥ecompuã_mu…
(c⁄° 
EC_GROUP
 *
group
);

402 
	`ec_GF2m_sim∂e_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
sˇœr
,

403 
size_t
 
num
, c⁄° 
EC_POINT
 *
poöts
[], c⁄° 
BIGNUM
 *
sˇœrs
[], 
BN_CTX
 *);

404 
	`ec_GF2m_¥ecompuã_mu…
(
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

405 
	`ec_GF2m_have_¥ecompuã_mu…
(c⁄° 
EC_GROUP
 *
group
);

407 #i‚de‡
OPENSSL_EC_NISTP_64_GCC_128


409 
	`ec_GFp_ni°p224_group_öô
(
EC_GROUP
 *
group
);

410 
	`ec_GFp_ni°p224_group_£t_curve
(
EC_GROUP
 *
group
, c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
n
, 
BN_CTX
 *);

411 
	`ec_GFp_ni°p224_poöt_gë_afföe_co‹dö©es
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
poöt
, 
BIGNUM
 *
x
, BIGNUM *
y
, 
BN_CTX
 *
˘x
);

412 
	`ec_GFp_ni°p224_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
sˇœr
, 
size_t
 
num
, c⁄° EC_POINT *
poöts
[], c⁄° BIGNUM *
sˇœrs
[], 
BN_CTX
 *);

413 
	`ec_GFp_ni°p224_poöts_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
sˇœr
, 
size_t
 
num
, c⁄° EC_POINT *
poöts
[], c⁄° BIGNUM *
sˇœrs
[], 
BN_CTX
 *
˘x
);

414 
	`ec_GFp_ni°p224_¥ecompuã_mu…
(
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

415 
	`ec_GFp_ni°p224_have_¥ecompuã_mu…
(c⁄° 
EC_GROUP
 *
group
);

418 
	`ec_GFp_ni°p256_group_öô
(
EC_GROUP
 *
group
);

419 
	`ec_GFp_ni°p256_group_£t_curve
(
EC_GROUP
 *
group
, c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
n
, 
BN_CTX
 *);

420 
	`ec_GFp_ni°p256_poöt_gë_afföe_co‹dö©es
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
poöt
, 
BIGNUM
 *
x
, BIGNUM *
y
, 
BN_CTX
 *
˘x
);

421 
	`ec_GFp_ni°p256_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
sˇœr
, 
size_t
 
num
, c⁄° EC_POINT *
poöts
[], c⁄° BIGNUM *
sˇœrs
[], 
BN_CTX
 *);

422 
	`ec_GFp_ni°p256_poöts_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
sˇœr
, 
size_t
 
num
, c⁄° EC_POINT *
poöts
[], c⁄° BIGNUM *
sˇœrs
[], 
BN_CTX
 *
˘x
);

423 
	`ec_GFp_ni°p256_¥ecompuã_mu…
(
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

424 
	`ec_GFp_ni°p256_have_¥ecompuã_mu…
(c⁄° 
EC_GROUP
 *
group
);

427 
	`ec_GFp_ni°p521_group_öô
(
EC_GROUP
 *
group
);

428 
	`ec_GFp_ni°p521_group_£t_curve
(
EC_GROUP
 *
group
, c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
n
, 
BN_CTX
 *);

429 
	`ec_GFp_ni°p521_poöt_gë_afföe_co‹dö©es
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
poöt
, 
BIGNUM
 *
x
, BIGNUM *
y
, 
BN_CTX
 *
˘x
);

430 
	`ec_GFp_ni°p521_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
sˇœr
, 
size_t
 
num
, c⁄° EC_POINT *
poöts
[], c⁄° BIGNUM *
sˇœrs
[], 
BN_CTX
 *);

431 
	`ec_GFp_ni°p521_poöts_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
sˇœr
, 
size_t
 
num
, c⁄° EC_POINT *
poöts
[], c⁄° BIGNUM *
sˇœrs
[], 
BN_CTX
 *
˘x
);

432 
	`ec_GFp_ni°p521_¥ecompuã_mu…
(
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

433 
	`ec_GFp_ni°p521_have_¥ecompuã_mu…
(c⁄° 
EC_GROUP
 *
group
);

436 
	`ec_GFp_ni°p_poöts_make_afföe_öã∫Æ
(
size_t
 
num
, *
poöt_¨øy
,

437 
size_t
 
„Àm_size
, *
tmp_„Àms
,

438 (*
„Àm_⁄e
)(*
out
),

439 (*
„Àm_is_zîo
)(c⁄° *
ö
),

440 (*
„Àm_assign
)(*
out
, c⁄° *
ö
),

441 (*
„Àm_squ¨e
)(*
out
, c⁄° *
ö
),

442 (*
„Àm_mul
)(*
out
, c⁄° *
ö1
, c⁄° *
ö2
),

443 (*
„Àm_öv
)(*
out
, c⁄° *
ö
),

444 (*
„Àm_c⁄åa˘
)(*
out
, c⁄° *
ö
));

445 
	`ec_GFp_ni°p_ªcode_sˇœr_bôs
(*
sign
, *
digô
, 
ö
);

	@../e_os.h

59 #i‚de‡
HEADER_E_OS_H


60 
	#HEADER_E_OS_H


	)

62 
	~<›ís¶/›ís¶c⁄f.h
>

64 
	~<›ís¶/e_os2.h
>

69 #ifde‡ 
__˝lu•lus


74 #ifde‡
REF_PRINT


75 #unde‡
REF_PRINT


76 
	#REF_PRINT
(
a
,
b
Ë
	`Ârötf
(
°dîr
,"%08X:%4d:%s\n",()b,b->
ª„ªn˚s
,a)

	)

79 #i‚de‡
DEVRANDOM


82 
	#DEVRANDOM
 "/dev/uøndom","/dev/øndom","/dev/§™dom"

	)

84 #i‚de‡
DEVRANDOM_EGD


88 
	#DEVRANDOM_EGD
 "/v¨/run/egd-poﬁ","/dev/egd-poﬁ","/ëc/egd-poﬁ","/ëc/íå›y"

	)

91 #i‡
deföed
(
OPENSSL_SYS_VXWORKS
)

92 
	#NO_SYS_PARAM_H


	)

93 
	#NO_CHMOD


	)

94 
	#NO_SYSLOG


	)

97 #i‡
deföed
(
OPENSSL_SYS_MACINTOSH_CLASSIC
)

98 #i‡
macötosh
==1

99 #i‚de‡
MAC_OS_GUSI_SOURCE


100 
	#MAC_OS_¥e_X


	)

101 
	#NO_SYS_TYPES_H


	)

103 
	#NO_SYS_PARAM_H


	)

104 
	#NO_CHMOD


	)

105 
	#NO_SYSLOG


	)

106 #unde‡
DEVRANDOM


107 
	#GETPID_IS_MEANINGLESS


	)

116 #i‡
deföed
(
OPENSSL_SYS_MSDOS
Ë&& !deföed(
OPENSSL_SYSNAME_WIN32
)

117 
	#MS_STATIC
 

	)

119 
	#MS_STATIC


	)

122 #i‡
deföed
(
OPENSSL_SYS_WIN32
Ë&& !deföed(
WIN32
)

123 
	#WIN32


	)

125 #i‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë&& !deföed(
WINDOWS
)

126 
	#WINDOWS


	)

128 #i‡
deföed
(
OPENSSL_SYS_MSDOS
Ë&& !deföed(
MSDOS
)

129 
	#MSDOS


	)

132 #i‡
deföed
(
MSDOS
Ë&& !deföed(
GETPID_IS_MEANINGLESS
)

133 
	#GETPID_IS_MEANINGLESS


	)

136 #ifde‡
WIN32


137 
	#gë_œ°_sys_îr‹
(Ë
	`GëLa°Eº‹
()

	)

138 
	#˛ór_sys_îr‹
(Ë
	`SëLa°Eº‹
(0)

	)

139 #i‡!
deföed
(
WINNT
)

140 
	#WIN_CONSOLE_BUG


	)

143 
	#gë_œ°_sys_îr‹
(Ë
î∫o


	)

144 
	#˛ór_sys_îr‹
(Ë
î∫o
=0

	)

147 #i‡
deföed
(
WINDOWS
)

148 
	#gë_œ°_sockë_îr‹
(Ë
	`WSAGëLa°Eº‹
()

	)

149 
	#˛ór_sockë_îr‹
(Ë
	`WSASëLa°Eº‹
(0)

	)

150 
	#ªadsockë
(
s
,
b
,
n
Ë
	`ªcv
((s),(b),“),0)

	)

151 
	#wrôesockë
(
s
,
b
,
n
Ë
	`£nd
((s),(b),“),0)

	)

152 #ñi‡
deföed
(
__DJGPP__
)

153 
	#WATT32


	)

154 
	#gë_œ°_sockë_îr‹
(Ë
î∫o


	)

155 
	#˛ór_sockë_îr‹
(Ë
î∫o
=0

	)

156 
	#˛o£sockë
(
s
Ë
	`˛o£_s
(s)

	)

157 
	#ªadsockë
(
s
,
b
,
n
Ë
	`ªad_s
(s,b,n)

	)

158 
	#wrôesockë
(
s
,
b
,
n
Ë
	`£nd
(s,b,n,0)

	)

159 #ñi‡
deföed
(
MAC_OS_¥e_X
)

160 
	#gë_œ°_sockë_îr‹
(Ë
î∫o


	)

161 
	#˛ór_sockë_îr‹
(Ë
î∫o
=0

	)

162 
	#˛o£sockë
(
s
Ë
	`MacSockë_˛o£
(s)

	)

163 
	#ªadsockë
(
s
,
b
,
n
Ë
	`MacSockë_ªcv
((s),(b),“),
åue
)

	)

164 
	#wrôesockë
(
s
,
b
,
n
Ë
	`MacSockë_£nd
((s),(b),“))

	)

165 #ñi‡
deföed
(
OPENSSL_SYS_VMS
)

166 
	#gë_œ°_sockë_îr‹
(Ë
î∫o


	)

167 
	#˛ór_sockë_îr‹
(Ë
î∫o
=0

	)

168 
	#io˘lsockë
(
a
,
b
,
c
Ë
	`io˘l
◊,b,c)

	)

169 
	#˛o£sockë
(
s
Ë
	`˛o£
(s)

	)

170 
	#ªadsockë
(
s
,
b
,
n
Ë
	`ªcv
((s),(b),“),0)

	)

171 
	#wrôesockë
(
s
,
b
,
n
Ë
	`£nd
((s),(b),“),0)

	)

172 #ñi‡
deföed
(
OPENSSL_SYS_VXWORKS
)

173 
	#gë_œ°_sockë_îr‹
(Ë
î∫o


	)

174 
	#˛ór_sockë_îr‹
(Ë
î∫o
=0

	)

175 
	#io˘lsockë
(
a
,
b
,
c
Ë
	`io˘l
(◊),(b),()(c))

	)

176 
	#˛o£sockë
(
s
Ë
	`˛o£
(s)

	)

177 
	#ªadsockë
(
s
,
b
,
n
Ë
	`ªad
((s),(b),“))

	)

178 
	#wrôesockë
(
s
,
b
,
n
Ë
	`wrôe
((s),(*)(b),“))

	)

179 #ñi‡
deföed
(
OPENSSL_SYS_BEOS_R5
)

180 
	#gë_œ°_sockë_îr‹
(Ë
î∫o


	)

181 
	#˛ór_sockë_îr‹
(Ë
î∫o
=0

	)

182 
	#FIONBIO
 
SO_NONBLOCK


	)

183 
	#io˘lsockë
(
a
,
b
,
c
Ë
	`£tsock›t
(◊),
SOL_SOCKET
,(b),(c),(*(c)))

	)

184 
	#ªadsockë
(
s
,
b
,
n
Ë
	`ªcv
((s),(b),“),0)

	)

185 
	#wrôesockë
(
s
,
b
,
n
Ë
	`£nd
((s),(b),“),0)

	)

186 #ñi‡
deföed
(
OPENSSL_SYS_NETWARE
)

187 #i‡
deföed
(
NETWARE_BSDSOCK
)

188 
	#gë_œ°_sockë_îr‹
(Ë
î∫o


	)

189 
	#˛ór_sockë_îr‹
(Ë
î∫o
=0

	)

190 
	#˛o£sockë
(
s
Ë
	`˛o£
(s)

	)

191 
	#io˘lsockë
(
a
,
b
,
c
Ë
	`io˘l
◊,b,c)

	)

192 #i‡
deföed
(
NETWARE_LIBC
)

193 
	#ªadsockë
(
s
,
b
,
n
Ë
	`ªcv
((s),(b),“),0)

	)

194 
	#wrôesockë
(
s
,
b
,
n
Ë
	`£nd
((s),(b),“),0)

	)

196 
	#ªadsockë
(
s
,
b
,
n
Ë
	`ªcv
((s),(*)(b),“),0)

	)

197 
	#wrôesockë
(
s
,
b
,
n
Ë
	`£nd
((s),(*)(b),“),0)

	)

200 
	#gë_œ°_sockë_îr‹
(Ë
	`WSAGëLa°Eº‹
()

	)

201 
	#˛ór_sockë_îr‹
(Ë
	`WSASëLa°Eº‹
(0)

	)

202 
	#ªadsockë
(
s
,
b
,
n
Ë
	`ªcv
((s),(b),“),0)

	)

203 
	#wrôesockë
(
s
,
b
,
n
Ë
	`£nd
((s),(b),“),0)

	)

206 
	#gë_œ°_sockë_îr‹
(Ë
î∫o


	)

207 
	#˛ór_sockë_îr‹
(Ë
î∫o
=0

	)

208 
	#io˘lsockë
(
a
,
b
,
c
Ë
	`io˘l
◊,b,c)

	)

209 
	#˛o£sockë
(
s
Ë
	`˛o£
(s)

	)

210 
	#ªadsockë
(
s
,
b
,
n
Ë
	`ªad
((s),(b),“))

	)

211 
	#wrôesockë
(
s
,
b
,
n
Ë
	`wrôe
((s),(b),“))

	)

214 #ifde‡
WIN16


215 
	#MS_CALLBACK
 
_Ár
 
_lﬂdds


	)

216 
	#MS_FAR
 
_Ár


	)

218 
	#MS_CALLBACK


	)

219 
	#MS_FAR


	)

222 #ifde‡
OPENSSL_NO_STDIO


223 #unde‡
OPENSSL_NO_FP_API


224 
	#OPENSSL_NO_FP_API


	)

227 #i‡(
deföed
(
WINDOWS
Ë|| deföed(
MSDOS
))

229 #ifde‡
__DJGPP__


230 
	~<uni°d.h
>

231 
	~<sys/°©.h
>

232 
	~<sys/sockë.h
>

233 
	~<t˝.h
>

234 
	~<√tdb.h
>

235 
	#_£tmode
 
£tmode


	)

236 
	#_O_TEXT
 
O_TEXT


	)

237 
	#_O_BINARY
 
O_BINARY


	)

238 #unde‡
DEVRANDOM


239 
	#DEVRANDOM
 "/dev/uøndom\x24"

	)

242 #i‚de‡
S_IFDIR


243 
	#S_IFDIR
 
_S_IFDIR


	)

246 #i‚de‡
S_IFMT


247 
	#S_IFMT
 
_S_IFMT


	)

250 #i‡!
deföed
(
WINNT
Ë&& !deföed(
__DJGPP__
)

251 
	#NO_SYSLOG


	)

253 
	#NO_DIRENT


	)

255 #ifde‡
WINDOWS


256 #i‡!
deföed
(
_WIN32_WCE
Ë&& !deföed(
_WIN32_WINNT
)

271 
	#_WIN32_WINNT
 0x0400

	)

273 #i‡!
deföed
(
OPENSSL_NO_SOCK
Ë&& deföed(
_WIN32_WINNT
)

281 
	~<wösock2.h
>

282 
	~<ws2t˝ù.h
>

285 
	~<wödows.h
>

286 
	~<°dio.h
>

287 
	~<°ddef.h
>

288 
	~<î∫o.h
>

289 
	~<°rög.h
>

290 #ifde‡
_WIN64


291 
	#°æí
(
s
Ë
	`_°æí31
(s)

	)

293 
_°æí31
(c⁄° *
°r
)

295 
Àn
=0;

296 *
°r
 && 
Àn
<0x80000000U) str++,Üen++;

297  
Àn
&0x7FFFFFFF;

300 
	~<mÆloc.h
>

301 #i‡
deföed
(
_MSC_VER
Ë&& _MSC_VER<=1200 && deföed(
_MT
Ë&& deföed(
is•a˚
)

303 #unde‡
is•a˚


304 #unde‡
isdigô


305 #unde‡
iß um


306 #unde‡
isuµî


307 #unde‡
isxdigô


309 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
_DLL
Ë&& deföed(
°dö
)

310 #i‡
_MSC_VER
>=1300

311 #unde‡
°dö


312 #unde‡
°dout


313 #unde‡
°dîr


314 
FILE
 *
__iob_func
();

315 
	#°dö
 (&
	`__iob_func
()[0])

	)

316 
	#°dout
 (&
	`__iob_func
()[1])

	)

317 
	#°dîr
 (&
	`__iob_func
()[2])

	)

318 #ñi‡
deföed
(
I_CAN_LIVE_WITH_LNK4049
)

319 #unde‡
°dö


320 #unde‡
°dout


321 #unde‡
°dîr


328 
FILE
 *
_imp___iob
;

329 
	#°dö
 (&
_imp___iob
[0])

	)

330 
	#°dout
 (&
_imp___iob
[1])

	)

331 
	#°dîr
 (&
_imp___iob
[2])

	)

335 
	~<io.h
>

336 
	~<f˙é.h
>

338 #ifde‡
OPENSSL_SYS_WINCE


339 
	#OPENSSL_NO_POSIX_IO


	)

342 #i‡
deföed
 (
__BORLANDC__
)

343 
	#_£tmode
 
£tmode


	)

344 
	#_O_TEXT
 
O_TEXT


	)

345 
	#_O_BINARY
 
O_BINARY


	)

346 
	#_öt64
 
__öt64


	)

347 
	#_kbhô
 
kbhô


	)

350 
	#EXIT
(
n
Ë
	`exô
“)

	)

351 
	#LIST_SEPARATOR_CHAR
 ';'

	)

352 #i‚de‡
X_OK


353 
	#X_OK
 0

	)

355 #i‚de‡
W_OK


356 
	#W_OK
 2

	)

358 #i‚de‡
R_OK


359 
	#R_OK
 4

	)

361 
	#OPENSSL_CONF
 "›ís¶.˙f"

	)

362 
	#SSLEAY_CONF
 
OPENSSL_CONF


	)

363 
	#NUL_DEV
 "nul"

	)

364 
	#RFILE
 ".∫d"

	)

365 #ifde‡
OPENSSL_SYS_WINCE


366 
	#DEFAULT_HOME
 ""

	)

368 
	#DEFAULT_HOME
 "C:"

	)

372 #i‡
deföed
(
_MSC_VER
) && _MSC_VER>=1800

373 
	#check_wö¡
(Ë(1)

	)

375 
	#check_wö¡
(Ë(
	`GëVîsi⁄
(Ë< 0x80000000)

	)

380 #ifde‡
OPENSSL_SYS_VMS


381 
	#VMS
 1

	)

384 
	~<°dlib.h
>

385 #i‡
deföed
(
__DECC
)

386 
	~<uni°d.h
>

388 
	~<unixlib.h
>

390 
	#OPENSSL_CONF
 "›ís¶.˙f"

	)

391 
	#SSLEAY_CONF
 
OPENSSL_CONF


	)

392 
	#RFILE
 ".∫d"

	)

393 
	#LIST_SEPARATOR_CHAR
 ','

	)

394 
	#NUL_DEV
 "NLA0:"

	)

396 #unde‡
DEVRANDOM


412 
	#EXIT
(
n
Ëdÿ{ 
__VMS_EXIT
 =Ç; \

413 i‡(
__VMS_EXIT
 == 0) \

414 
__VMS_EXIT
 = 1; \

416 
__VMS_EXIT
 = (
n
 << 3) | 2; \

417 
__VMS_EXIT
 |= 0x10000000; \

418 
	`exô
(
__VMS_EXIT
); } 0)

	)

419 
	#NO_SYS_PARAM_H


	)

421 #ñi‡
deföed
(
OPENSSL_SYS_NETWARE
)

422 
	~<f˙é.h
>

423 
	~<uni°d.h
>

424 
	#NO_SYS_TYPES_H


	)

425 #unde‡
DEVRANDOM


426 #ifde‡
NETWARE_CLIB


427 
	#gëpid
 
GëThªadID


	)

428 
GëThªadID
();

430 
kbhô
();

432 
	~<s¸ìn.h
>

434 
	#NO_SYSLOG


	)

435 
	#_£tmode
 
£tmode


	)

436 
	#_kbhô
 
kbhô


	)

437 
	#_O_TEXT
 
O_TEXT


	)

438 
	#_O_BINARY
 
O_BINARY


	)

439 
	#OPENSSL_CONF
 "›ís¶.˙f"

	)

440 
	#SSLEAY_CONF
 
OPENSSL_CONF


	)

441 
	#RFILE
 ".∫d"

	)

442 
	#LIST_SEPARATOR_CHAR
 ';'

	)

443 
	#EXIT
(
n
Ë{ i‡“Ë
	`¥ötf
("ERROR: %d\n", (Í); 
	`exô
“); }

	)

447 #ifde‡
OPENSSL_SYS_MPE


448 
	#NO_SYS_PARAM_H


	)

450 #ifde‡
OPENSSL_UNISTD


451 #ö˛udê
OPENSSL_UNISTD


453 
	~<uni°d.h
>

455 #i‚de‡
NO_SYS_TYPES_H


456 
	~<sys/ty≥s.h
>

458 #i‡
deföed
(
NeXT
Ë|| deföed(
OPENSSL_SYS_NEWS4
)

459 
	#pid_t
 

	)

463 #ifde‡
OPENSSL_SYS_NEWS4


464 
	#£tvbuf
(
a
, 
b
, 
c
, 
d
Ë
	`£tbuf„r
(◊), (b), (d))

	)

465 
	t˛ock_t
;

467 #ifde‡
OPENSSL_SYS_WIN32_CYGWIN


468 
	~<io.h
>

469 
	~<f˙é.h
>

472 
	#OPENSSL_CONF
 "›ís¶.˙f"

	)

473 
	#SSLEAY_CONF
 
OPENSSL_CONF


	)

474 
	#RFILE
 ".∫d"

	)

475 
	#LIST_SEPARATOR_CHAR
 ':'

	)

476 
	#NUL_DEV
 "/dev/nuŒ"

	)

477 
	#EXIT
(
n
Ë
	`exô
“)

	)

480 
	#SSLóy_gëpid
(Ë
	`gëpid
()

	)

487 #ifde‡
USE_SOCKETS


488 #i‡
deföed
(
WINDOWS
Ë|| deföed(
MSDOS
)

491 #ifde‡
OPENSSL_NO_SOCK


492 
	#SSLóy_Wrôe
(
a
,
b
,
c
Ë(-1)

	)

493 
	#SSLóy_Ród
(
a
,
b
,
c
Ë(-1)

	)

494 
	#SHUTDOWN
(
fd
Ë
	`˛o£
(fd)

	)

495 
	#SHUTDOWN2
(
fd
Ë
	`˛o£
(fd)

	)

496 #ñi‡!
deföed
(
__DJGPP__
)

497 #i‡
deföed
(
_WIN32_WCE
) && _WIN32_WCE<410

498 
	#gë£rvby«me
 
_masked_de˛¨©i⁄_gë£rvby«me


	)

500 #i‡!
deföed
(
IPPROTO_IP
)

502 
	~<wösock.h
>

504 #ifde‡
gë£rvby«me


505 #unde‡
gë£rvby«me


507 
£rvít
* 
PASCAL
 
gë£rvby«me
(const *,const *);

510 #ifde‡
_WIN64


516 
	#sockë
(
d
,
t
,
p
Ë(()
	`sockë
(d,t,p))

	)

517 
	#ac˚±
(
s
,
f
,
l
Ë(()
	`ac˚±
(s,f,l))

	)

519 
	#SSLóy_Wrôe
(
a
,
b
,
c
Ë
	`£nd
(◊),(b),(c),0)

	)

520 
	#SSLóy_Ród
(
a
,
b
,
c
Ë
	`ªcv
(◊),(b),(c),0)

	)

521 
	#SHUTDOWN
(
fd
Ë{ 
	`shutdown
((fd),0); 
	`˛o£sockë
(fd); }

	)

522 
	#SHUTDOWN2
(
fd
Ë{ 
	`shutdown
((fd),2); 
	`˛o£sockë
(fd); }

	)

524 
	#SSLóy_Wrôe
(
a
,
b
,
c
Ë
	`wrôe_s
◊,b,c,0)

	)

525 
	#SSLóy_Ród
(
a
,
b
,
c
Ë
	`ªad_s
◊,b,c)

	)

526 
	#SHUTDOWN
(
fd
Ë
	`˛o£_s
(fd)

	)

527 
	#SHUTDOWN2
(
fd
Ë
	`˛o£_s
(fd)

	)

530 #ñi‡
deföed
(
MAC_OS_¥e_X
)

532 
	~"MacSockë.h
"

533 
	#SSLóy_Wrôe
(
a
,
b
,
c
Ë
	`MacSockë_£nd
(◊),(b),(c))

	)

534 
	#SSLóy_Ród
(
a
,
b
,
c
Ë
	`MacSockë_ªcv
(◊),(b),(c),
åue
)

	)

535 
	#SHUTDOWN
(
fd
Ë
	`MacSockë_˛o£
(fd)

	)

536 
	#SHUTDOWN2
(
fd
Ë
	`MacSockë_˛o£
(fd)

	)

538 #ñi‡
deföed
(
OPENSSL_SYS_NETWARE
)

541 #i‡
deföed
(
NETWARE_BSDSOCK
)

542 
	~<sys/sockë.h
>

543 
	~<√töë/ö.h
>

544 
	~<sys/time.h
>

545 #i‡
deföed
(
NETWARE_CLIB
)

546 
	~<sys/bsdskt.h
>

548 
	~<sys/£À˘.h
>

550 
	#INVALID_SOCKET
 ()(~0)

	)

552 
	~<novsock2.h
>

554 
	#SSLóy_Wrôe
(
a
,
b
,
c
Ë
	`£nd
(◊),(b),(c),0)

	)

555 
	#SSLóy_Ród
(
a
,
b
,
c
Ë
	`ªcv
(◊),(b),(c),0)

	)

556 
	#SHUTDOWN
(
fd
Ë{ 
	`shutdown
((fd),0); 
	`˛o£sockë
(fd); }

	)

557 
	#SHUTDOWN2
(
fd
Ë{ 
	`shutdown
((fd),2); 
	`˛o£sockë
(fd); }

	)

561 #i‚de‡
NO_SYS_PARAM_H


562 
	~<sys/∑øm.h
>

564 #ifde‡
OPENSSL_SYS_VXWORKS


565 
	~<time.h
>

566 #ñi‡!
deföed
(
OPENSSL_SYS_MPE
)

567 
	~<sys/time.h
>

570 
	~<√tdb.h
>

571 #i‡
deföed
(
OPENSSL_SYS_VMS_NODECC
)

572 
	~<sockë.h
>

573 
	~<ö.h
>

574 
	~<öë.h
>

576 
	~<sys/sockë.h
>

577 #ifde‡
FILIO_H


578 
	~<sys/fûio.h
>

580 
	~<√töë/ö.h
>

581 #i‡!
deföed
(
OPENSSL_SYS_BEOS_R5
)

582 
	~<¨∑/öë.h
>

586 #i‡
deföed
(
NeXT
Ë|| deföed(
_NEXT_SOURCE
)

587 
	~<sys/f˙é.h
>

588 
	~<sys/ty≥s.h
>

591 #ifde‡
OPENSSL_SYS_AIX


592 
	~<sys/£À˘.h
>

595 #ifde‡
__QNX__


596 
	~<sys/£À˘.h
>

599 #i‡
deföed
(
sun
)

600 
	~<sys/fûio.h
>

602 #i‚de‡
VMS


603 
	~<sys/io˘l.h
>

606 #i‡!
deföed
(
TCPIP_TYPE_SOCKETSHR
Ë&& deföed(
__VMS_VER
) && (__VMS_VER > 70000000)

607 
	~<sys/io˘l.h
>

612 #ifde‡
VMS


613 
	~<unixio.h
>

614 #i‡
deföed
(
TCPIP_TYPE_SOCKETSHR
)

615 
	~<sockëshr.h
>

619 
	#SSLóy_Ród
(
a
,
b
,
c
Ë
	`ªad
(◊),(b),(c))

	)

620 
	#SSLóy_Wrôe
(
a
,
b
,
c
Ë
	`wrôe
(◊),(b),(c))

	)

621 
	#SHUTDOWN
(
fd
Ë{ 
	`shutdown
((fd),0); 
	`˛o£sockë
((fd)); }

	)

622 
	#SHUTDOWN2
(
fd
Ë{ 
	`shutdown
((fd),2); 
	`˛o£sockë
((fd)); }

	)

623 #i‚de‡
INVALID_SOCKET


624 
	#INVALID_SOCKET
 (-1)

	)

631 #i‡!
deföed
(
OPENSSL_USE_IPV6
)

632 #i‡
deföed
(
AF_INET6
Ë&& !deföed(
OPENSSL_SYS_BEOS_BONE
Ë&& !deföed(
NETWARE_CLIB
)

633 
	#OPENSSL_USE_IPV6
 1

	)

635 
	#OPENSSL_USE_IPV6
 0

	)

641 #i‡
deföed
(
sun
Ë&& !deföed(
__svr4__
Ë&& !deföed(
__SVR4
)

643 
	~<°dlib.h
>

644 
	~<°rög.h
>

646 
	#memmove
(
s1
,
s2
,
n
Ë
	`bc›y
((s2),(s1),“))

	)

647 
	#°πoul
(
s
,
e
,
b
Ë(()
	`°πﬁ
((s),”),(b)))

	)

648 *
sys_îæi°
[]; 
sys_√º
;

649 
	#°ªº‹
(
î∫um
) \

650 (((
î∫um
)<0 || (î∫um)>=
sys_√º
Ë? 
NULL
 : 
sys_îæi°
[î∫um])

	)

652 
	~"¸y±o/o_°r.h
"

653 
	#memcmp
 
OPENSSL_memcmp


	)

656 #i‚de‡
OPENSSL_EXIT


657 #i‡
deföed
(
MONOLITH
Ë&& !deföed(
OPENSSL_C
)

658 
	#OPENSSL_EXIT
(
n
Ë“)

	)

660 
	#OPENSSL_EXIT
(
n
Ëdÿ{ 
	`EXIT
“); “); } 0)

	)

666 
	#DG_GCC_BUG


	)

668 #ifde‡
sgi


669 
	#IRIX_CC_BUG


	)

671 #ifde‡
OPENSSL_SYS_SNI


672 
	#IRIX_CC_BUG


	)

675 #i‡
deföed
(
OPENSSL_SYS_WINDOWS
)

676 
	#°rˇ£cmp
 
_°ricmp


	)

677 
	#°∫ˇ£cmp
 
_°∫icmp


	)

678 #ñi‡
deföed
(
OPENSSL_SYS_VMS
)

680 
	~"o_°r.h
"

681 
	#°rˇ£cmp
 
OPENSSL_°rˇ£cmp


	)

682 
	#°∫ˇ£cmp
 
OPENSSL_°∫ˇ£cmp


	)

683 
	#OPENSSL_IMPLEMENTS_°∫ˇ£cmp


	)

684 #ñi‡
deföed
(
OPENSSL_SYS_OS2
Ë&& deföed(
__EMX__
)

685 
	#°rˇ£cmp
 
°ricmp


	)

686 
	#°∫ˇ£cmp
 
°∫icmp


	)

687 #ñi‡
deföed
(
OPENSSL_SYS_NETWARE
)

688 
	~<°rög.h
>

689 #i‡
deföed
(
NETWARE_CLIB
)

690 
	#°rˇ£cmp
 
°ricmp


	)

691 
	#°∫ˇ£cmp
 
°∫icmp


	)

695 #i‡
deföed
(
OPENSSL_SYS_OS2
Ë&& deföed(
__EMX__
)

696 
	~<io.h
>

697 
	~<f˙é.h
>

698 
	#NO_SYSLOG


	)

702 #i‡
deföed
(
OPENSSL_SYS_VXWORKS
)

703 
	~<ioLib.h
>

704 
	~<tickLib.h
>

705 
	~<sysLib.h
>

707 
	#TTY_STRUCT
 

	)

709 
	#¶ìp
(
a
Ë
	`èskDñay
(◊Ë* 
	`sysClkR©eGë
())

	)

711 
	~<vxW‹ks.h
>

712 
	~<sockLib.h
>

713 
	~<èskLib.h
>

715 
	#gëpid
 
èskIdSñf


	)

720 
ho°ít
 *
gëho°by«me
(c⁄° *
«me
);

721 
ho°ít
 *
gëho°byaddr
(c⁄° *
addr
, 
Àngth
, 
ty≥
);

722 
£rvít
 *
gë£rvby«me
(c⁄° *
«me
, c⁄° *
¥Ÿo
);

728 #i‡
deföed
(
OPENSSL_SYS_BEOS_R5
)

729 
	#SO_ERROR
 0

	)

730 
	#NO_SYS_UN


	)

731 
	#IPPROTO_IP
 0

	)

732 
	~<OS.h
>

736 #ifde‡ 
__˝lu•lus


	@../e_os2.h

56 
	~<›ís¶/›ís¶c⁄f.h
>

58 #i‚de‡
HEADER_E_OS2_H


59 
	#HEADER_E_OS2_H


	)

61 #ifde‡ 
__˝lu•lus


71 
	#OPENSSL_SYS_UNIX


	)

74 #i‡
deföed
(
__MWERKS__
Ë&& deföed(
macötosh
Ë|| deföed(
OPENSSL_SYSNAME_MAC
)

75 #unde‡
OPENSSL_SYS_UNIX


76 
	#OPENSSL_SYS_MACINTOSH_CLASSIC


	)

80 #i‡
deföed
(
NETWARE
Ë|| deföed(
OPENSSL_SYSNAME_NETWARE
)

81 #unde‡
OPENSSL_SYS_UNIX


82 
	#OPENSSL_SYS_NETWARE


	)

89 #i‡
deföed
(
OPENSSL_SYSNAME_MSDOS
)

90 #unde‡
OPENSSL_SYS_UNIX


91 
	#OPENSSL_SYS_MSDOS


	)

96 #i‡
deföed
(
OPENSSL_SYSNAME_UWIN
)

97 #unde‡
OPENSSL_SYS_UNIX


98 
	#OPENSSL_SYS_WIN32_UWIN


	)

100 #i‡
deföed
(
__CYGWIN32__
Ë|| deföed(
OPENSSL_SYSNAME_CYGWIN32
)

101 #unde‡
OPENSSL_SYS_UNIX


102 
	#OPENSSL_SYS_WIN32_CYGWIN


	)

104 #i‡
deföed
(
_WIN32
Ë|| deföed(
OPENSSL_SYSNAME_WIN32
)

105 #unde‡
OPENSSL_SYS_UNIX


106 
	#OPENSSL_SYS_WIN32


	)

108 #i‡
deföed
(
OPENSSL_SYSNAME_WINNT
)

109 #unde‡
OPENSSL_SYS_UNIX


110 
	#OPENSSL_SYS_WINNT


	)

112 #i‡
deföed
(
OPENSSL_SYSNAME_WINCE
)

113 #unde‡
OPENSSL_SYS_UNIX


114 
	#OPENSSL_SYS_WINCE


	)

120 #i‡
deföed
(
OPENSSL_SYS_WIN32
Ë|| deföed(
OPENSSL_SYS_WINNT
Ë|| deföed(
OPENSSL_SYS_WINCE
)

121 #unde‡
OPENSSL_SYS_UNIX


122 
	#OPENSSL_SYS_WINDOWS


	)

123 #i‚de‡
OPENSSL_SYS_MSDOS


124 
	#OPENSSL_SYS_MSDOS


	)

131 #ifde‡
OPENSSL_SYS_WINDOWS


132 #i‚de‡
OPENSSL_OPT_WINDLL


133 #i‡
deföed
(
_WINDLL
)

135 
	#OPENSSL_OPT_WINDLL


	)

141 #i‡
deföed
(
__VMS
Ë|| deföed(
VMS
Ë|| deföed(
OPENSSL_SYSNAME_VMS
)

142 #unde‡
OPENSSL_SYS_UNIX


143 
	#OPENSSL_SYS_VMS


	)

144 #i‡
deföed
(
__DECC
)

145 
	#OPENSSL_SYS_VMS_DECC


	)

146 #ñi‡
deföed
(
__DECCXX
)

147 
	#OPENSSL_SYS_VMS_DECC


	)

148 
	#OPENSSL_SYS_VMS_DECCXX


	)

150 
	#OPENSSL_SYS_VMS_NODECC


	)

155 #i‡
deföed
(
__EMX__
Ë|| deföed(
__OS2__
)

156 #unde‡
OPENSSL_SYS_UNIX


157 
	#OPENSSL_SYS_OS2


	)

161 #ifde‡
OPENSSL_SYS_UNIX


162 #i‡
deföed
(
löux
Ë|| deföed(
__löux__
Ë|| deföed(
OPENSSL_SYSNAME_LINUX
)

163 
	#OPENSSL_SYS_LINUX


	)

165 #ifde‡
OPENSSL_SYSNAME_MPE


166 
	#OPENSSL_SYS_MPE


	)

168 #ifde‡
OPENSSL_SYSNAME_SNI


169 
	#OPENSSL_SYS_SNI


	)

171 #ifde‡
OPENSSL_SYSNAME_ULTRASPARC


172 
	#OPENSSL_SYS_ULTRASPARC


	)

174 #ifde‡
OPENSSL_SYSNAME_NEWS4


175 
	#OPENSSL_SYS_NEWS4


	)

177 #ifde‡
OPENSSL_SYSNAME_MACOSX


178 
	#OPENSSL_SYS_MACOSX


	)

180 #ifde‡
OPENSSL_SYSNAME_MACOSX_RHAPSODY


181 
	#OPENSSL_SYS_MACOSX_RHAPSODY


	)

182 
	#OPENSSL_SYS_MACOSX


	)

184 #ifde‡
OPENSSL_SYSNAME_SUNOS


185 
	#OPENSSL_SYS_SUNOS


	)

187 #i‡
deföed
(
_CRAY
Ë|| deföed(
OPENSSL_SYSNAME_CRAY
)

188 
	#OPENSSL_SYS_CRAY


	)

190 #i‡
deföed
(
_AIX
Ë|| deföed(
OPENSSL_SYSNAME_AIX
)

191 
	#OPENSSL_SYS_AIX


	)

196 #i‡
deföed
(
__VOS__
Ë|| deföed(
OPENSSL_SYSNAME_VOS
)

197 
	#OPENSSL_SYS_VOS


	)

198 #ifde‡
__HPPA__


199 
	#OPENSSL_SYS_VOS_HPPA


	)

201 #ifde‡
__IA32__


202 
	#OPENSSL_SYS_VOS_IA32


	)

207 #ifde‡
OPENSSL_SYSNAME_VXWORKS


208 
	#OPENSSL_SYS_VXWORKS


	)

212 #i‡
deföed
(
__BEOS__
)

213 
	#OPENSSL_SYS_BEOS


	)

214 
	~<sys/sockë.h
>

215 #i‡
deföed
(
BONE_VERSION
)

216 
	#OPENSSL_SYS_BEOS_BONE


	)

218 
	#OPENSSL_SYS_BEOS_R5


	)

228 #ifde‡
OPENSSL_SYS_MSDOS


229 
	#OPENSSL_UNISTD_IO
 <
io
.
h
>

	)

230 
	#OPENSSL_DECLARE_EXIT
 
	`exô
();

	)

232 
	#OPENSSL_UNISTD_IO
 
OPENSSL_UNISTD


	)

233 
	#OPENSSL_DECLARE_EXIT


	)

255 #i‡
deföed
(
OPENSSL_SYS_VMS_NODECC
)

256 
	#OPENSSL_EXPORT
 
globÆªf


	)

257 
	#OPENSSL_IMPORT
 
globÆªf


	)

258 
	#OPENSSL_GLOBAL
 
globÆdef


	)

259 #ñi‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë&& deföed(
OPENSSL_OPT_WINDLL
)

260 
	#OPENSSL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

261 
	#OPENSSL_IMPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

262 
	#OPENSSL_GLOBAL


	)

264 
	#OPENSSL_EXPORT
 

	)

265 
	#OPENSSL_IMPORT
 

	)

266 
	#OPENSSL_GLOBAL


	)

268 
	#OPENSSL_EXTERN
 
OPENSSL_IMPORT


	)

280 #ifde‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


281 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
) \

282 
ty≥
 *
_shadow_
##
	`«me
() \

283 { 
ty≥
 
_hide_
##
«me
=
vÆue
;  &_hide_##«me; }

	)

284 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ëty≥ *
_shadow_
##
	`«me
()

	)

285 
	#OPENSSL_GLOBAL_REF
(
«me
Ë(*(
_shadow_
##
	`«me
()))

	)

287 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
Ë
OPENSSL_GLOBAL
Åy≥ 
_shadow_
##«me=vÆue;

	)

288 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ë
OPENSSL_EXPORT
Åy≥ 
_shadow_
##
	)
name

289 
	#OPENSSL_GLOBAL_REF
(
«me
Ë
_shadow_
##
	)
name

292 #i‡
deföed
(
OPENSSL_SYS_MACINTOSH_CLASSIC
Ë&& 
macötosh
==1 && !deföed(
MAC_OS_GUSI_SOURCE
)

293 
	#os¶_ssize_t
 

	)

296 #ifde‡
OPENSSL_SYS_MSDOS


297 
	#os¶_ssize_t
 

	)

300 #i‡
deföed
(
NeXT
Ë|| deföed(
OPENSSL_SYS_NEWS4
Ë|| deföed(
OPENSSL_SYS_SUNOS
)

301 
	#ssize_t
 

	)

304 #i‡
deföed
(
__u…rix
Ë&& !deföed(
ssize_t
)

305 
	#os¶_ssize_t
 

	)

308 #i‚de‡
os¶_ssize_t


309 
	#os¶_ssize_t
 
ssize_t


	)

312 #ifde‡ 
__˝lu•lus


	@/usr/include/assert.h

42 
	~<sys/cdefs.h
>

49 #unde‡
as£π


50 #unde‡
_as£π


52 #ifde‡
NDEBUG


53 
	#as£π
(
e
Ë(()0)

	)

54 
	#_as£π
(
e
Ë(()0)

	)

56 
	#_as£π
(
e
Ë
	`as£π
”)

	)

58 
	#as£π
(
e
Ë(”Ë? ()0 : 
	`__as£π
(
__func__
, 
__FILE__
, \

59 
__LINE__
, #e))

	)

62 #i‚de‡
_ASSERT_H_


63 
	#_ASSERT_H_


	)

64 
__BEGIN_DECLS


65 
	$__as£π
(c⁄° *, c⁄° *, , c⁄° *Ë
__dód2
;

66 
__END_DECLS


	@/usr/include/ctype.h

45 #i‚de‡
_CTYPE_H_


46 
	#_CTYPE_H_


	)

48 
	~<sys/cdefs.h
>

49 
	~<sys/_ty≥s.h
>

50 
	~<_˘y≥.h
>

52 
__BEGIN_DECLS


53 
iß um
();

54 
ißÕha
();

55 
is˙ål
();

56 
isdigô
();

57 
isgøph
();

58 
i¶owî
();

59 
i•röt
();

60 
i•un˘
();

61 
is•a˚
();

62 
isuµî
();

63 
isxdigô
();

64 
tﬁowî
();

65 
touµî
();

67 #i‡
__XSI_VISIBLE


68 
ißscii
();

69 
tﬂscii
();

72 #i‡
__ISO_C_VISIBLE
 >= 1999

73 
isbœnk
();

76 #i‡
__BSD_VISIBLE


77 
digôtoöt
();

78 
ishexnumbî
();

79 
isideogøm
();

80 
i¢umbî
();

81 
i•h⁄ogøm
();

82 
i§u√
();

83 
is•ecül
();

85 
	g__END_DECLS


87 
	#iß um
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_A
|
_CTYPE_D
)

	)

88 
	#ißÕha
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_A
)

	)

89 
	#is˙ål
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_C
)

	)

90 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_CTYPE_D
Ë

	)

91 
	#isgøph
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_G
)

	)

92 
	#i¶owî
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_L
)

	)

93 
	#i•röt
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_R
)

	)

94 
	#i•un˘
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_P
)

	)

95 
	#is•a˚
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_S
)

	)

96 
	#isuµî
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_U
)

	)

97 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_CTYPE_X
Ë

	)

98 
	#tﬁowî
(
c
Ë
	`__sbtﬁowî
(c)

	)

99 
	#touµî
(
c
Ë
	`__sbtouµî
(c)

	)

101 #i‡
__XSI_VISIBLE


113 
	#_tﬁowî
(
c
Ë
	`__sbtﬁowî
(c)

	)

114 
	#_touµî
(
c
Ë
	`__sbtouµî
(c)

	)

115 
	#ißscii
(
c
Ë(((cË& ~0x7FË=0)

	)

116 
	#tﬂscii
(
c
Ë((cË& 0x7F)

	)

119 #i‡
__ISO_C_VISIBLE
 >= 1999

120 
	#isbœnk
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_B
)

	)

123 #i‡
__BSD_VISIBLE


124 
	#digôtoöt
(
c
Ë
	`__sbmaskru√
((c), 0xFF)

	)

125 
	#ishexnumbî
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_X
)

	)

126 
	#isideogøm
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_I
)

	)

127 
	#i¢umbî
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_D
)

	)

128 
	#i•h⁄ogøm
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_Q
)

	)

129 
	#i§u√
(
c
Ë
	`__sbi°y≥
((c), 0xFFFFFF00L)

	)

130 
	#is•ecül
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_T
)

	)

	@/usr/include/errno.h

38 #i‚de‡
_SYS_ERRNO_H_


39 
	#_SYS_ERRNO_H_


	)

41 #i‚de‡
_KERNEL


42 
	~<sys/cdefs.h
>

43 
__BEGIN_DECLS


44 * 
__îr‹
();

45 
	g__END_DECLS


46 
	#î∫o
 (* 
	`__îr‹
())

	)

49 
	#EPERM
 1

	)

50 
	#ENOENT
 2

	)

51 
	#ESRCH
 3

	)

52 
	#EINTR
 4

	)

53 
	#EIO
 5

	)

54 
	#ENXIO
 6

	)

55 
	#E2BIG
 7

	)

56 
	#ENOEXEC
 8

	)

57 
	#EBADF
 9

	)

58 
	#ECHILD
 10

	)

59 
	#EDEADLK
 11

	)

61 
	#ENOMEM
 12

	)

62 
	#EACCES
 13

	)

63 
	#EFAULT
 14

	)

64 #i‚de‡
_POSIX_SOURCE


65 
	#ENOTBLK
 15

	)

67 
	#EBUSY
 16

	)

68 
	#EEXIST
 17

	)

69 
	#EXDEV
 18

	)

70 
	#ENODEV
 19

	)

71 
	#ENOTDIR
 20

	)

72 
	#EISDIR
 21

	)

73 
	#EINVAL
 22

	)

74 
	#ENFILE
 23

	)

75 
	#EMFILE
 24

	)

76 
	#ENOTTY
 25

	)

77 #i‚de‡
_POSIX_SOURCE


78 
	#ETXTBSY
 26

	)

80 
	#EFBIG
 27

	)

81 
	#ENOSPC
 28

	)

82 
	#ESPIPE
 29

	)

83 
	#EROFS
 30

	)

84 
	#EMLINK
 31

	)

85 
	#EPIPE
 32

	)

88 
	#EDOM
 33

	)

89 
	#ERANGE
 34

	)

92 
	#EAGAIN
 35

	)

93 #i‚de‡
_POSIX_SOURCE


94 
	#EWOULDBLOCK
 
EAGAIN


	)

95 
	#EINPROGRESS
 36

	)

96 
	#EALREADY
 37

	)

99 
	#ENOTSOCK
 38

	)

100 
	#EDESTADDRREQ
 39

	)

101 
	#EMSGSIZE
 40

	)

102 
	#EPROTOTYPE
 41

	)

103 
	#ENOPROTOOPT
 42

	)

104 
	#EPROTONOSUPPORT
 43

	)

105 
	#ESOCKTNOSUPPORT
 44

	)

106 
	#EOPNOTSUPP
 45

	)

107 
	#ENOTSUP
 
EOPNOTSUPP


	)

108 
	#EPFNOSUPPORT
 46

	)

109 
	#EAFNOSUPPORT
 47

	)

110 
	#EADDRINUSE
 48

	)

111 
	#EADDRNOTAVAIL
 49

	)

114 
	#ENETDOWN
 50

	)

115 
	#ENETUNREACH
 51

	)

116 
	#ENETRESET
 52

	)

117 
	#ECONNABORTED
 53

	)

118 
	#ECONNRESET
 54

	)

119 
	#ENOBUFS
 55

	)

120 
	#EISCONN
 56

	)

121 
	#ENOTCONN
 57

	)

122 
	#ESHUTDOWN
 58

	)

123 
	#ETOOMANYREFS
 59

	)

124 
	#ETIMEDOUT
 60

	)

125 
	#ECONNREFUSED
 61

	)

127 
	#ELOOP
 62

	)

129 
	#ENAMETOOLONG
 63

	)

132 #i‚de‡
_POSIX_SOURCE


133 
	#EHOSTDOWN
 64

	)

134 
	#EHOSTUNREACH
 65

	)

136 
	#ENOTEMPTY
 66

	)

139 #i‚de‡
_POSIX_SOURCE


140 
	#EPROCLIM
 67

	)

141 
	#EUSERS
 68

	)

142 
	#EDQUOT
 69

	)

145 
	#ESTALE
 70

	)

146 
	#EREMOTE
 71

	)

147 
	#EBADRPC
 72

	)

148 
	#ERPCMISMATCH
 73

	)

149 
	#EPROGUNAVAIL
 74

	)

150 
	#EPROGMISMATCH
 75

	)

151 
	#EPROCUNAVAIL
 76

	)

154 
	#ENOLCK
 77

	)

155 
	#ENOSYS
 78

	)

157 #i‚de‡
_POSIX_SOURCE


158 
	#EFTYPE
 79

	)

159 
	#EAUTH
 80

	)

160 
	#ENEEDAUTH
 81

	)

161 
	#EIDRM
 82

	)

162 
	#ENOMSG
 83

	)

163 
	#EOVERFLOW
 84

	)

164 
	#ECANCELED
 85

	)

165 
	#EILSEQ
 86

	)

166 
	#ENOATTR
 87

	)

168 
	#EDOOFUS
 88

	)

171 
	#EBADMSG
 89

	)

172 
	#EMULTIHOP
 90

	)

173 
	#ENOLINK
 91

	)

174 
	#EPROTO
 92

	)

176 #i‚de‡
_POSIX_SOURCE


177 
	#ENOTCAPABLE
 93

	)

180 #i‚de‡
_POSIX_SOURCE


181 
	#ELAST
 93

	)

184 #ifde‡
_KERNEL


186 
	#ERESTART
 (-1Ë

	)

187 
	#EJUSTRETURN
 (-2Ë

	)

188 
	#ENOIOCTL
 (-3Ë

	)

189 
	#EDIRIOCTL
 (-4Ë

	)

	@/usr/include/fcntl.h

38 #i‚de‡
_SYS_FCNTL_H_


39 
	#_SYS_FCNTL_H_


	)

47 
	~<sys/cdefs.h
>

48 
	~<sys/_ty≥s.h
>

50 #i‚de‡
_MODE_T_DECLARED


51 
__mode_t
 
	tmode_t
;

52 
	#_MODE_T_DECLARED


	)

55 #i‚de‡
_OFF_T_DECLARED


56 
__off_t
 
	toff_t
;

57 
	#_OFF_T_DECLARED


	)

60 #i‚de‡
_PID_T_DECLARED


61 
__pid_t
 
	tpid_t
;

62 
	#_PID_T_DECLARED


	)

73 
	#O_RDONLY
 0x0000

	)

74 
	#O_WRONLY
 0x0001

	)

75 
	#O_RDWR
 0x0002

	)

76 
	#O_ACCMODE
 0x0003

	)

86 #i‡
__BSD_VISIBLE


87 
	#FREAD
 0x0001

	)

88 
	#FWRITE
 0x0002

	)

90 
	#O_NONBLOCK
 0x0004

	)

91 
	#O_APPEND
 0x0008

	)

92 #i‡
__BSD_VISIBLE


93 
	#O_SHLOCK
 0x0010

	)

94 
	#O_EXLOCK
 0x0020

	)

95 
	#O_ASYNC
 0x0040

	)

96 
	#O_FSYNC
 0x0080

	)

98 
	#O_SYNC
 0x0080

	)

99 #i‡
__BSD_VISIBLE


100 
	#O_NOFOLLOW
 0x0100

	)

102 
	#O_CREAT
 0x0200

	)

103 
	#O_TRUNC
 0x0400

	)

104 
	#O_EXCL
 0x0800

	)

105 #ifde‡
_KERNEL


106 
	#FHASLOCK
 0x4000

	)

110 
	#O_NOCTTY
 0x8000

	)

112 #i‡
__BSD_VISIBLE


114 
	#O_DIRECT
 0x00010000

	)

118 #i‡
__BSD_VISIBLE


119 
	#O_DIRECTORY
 0x00020000

	)

120 
	#O_EXEC
 0x00040000

	)

122 #ifdef 
_KERNEL


123 
	#FEXEC
 
O_EXEC


	)

126 #i‡
__POSIX_VISIBLE
 >= 200809

128 
	#O_TTY_INIT
 0x00080000

	)

130 
	#O_CLOEXEC
 0x00100000

	)

137 #ifde‡
_KERNEL


139 
	#FFLAGS
(
oÊags
Ë((oÊagsË+ 1)

	)

140 
	#OFLAGS
(
fÊags
Ë((fÊagsË- 1)

	)

143 
	#FMASK
 (
FREAD
|
FWRITE
|
FAPPEND
|
FASYNC
|
FFSYNC
|
FNONBLOCK
|
O_DIRECT
|
FEXEC
)

	)

145 
	#FCNTLFLAGS
 (
FAPPEND
|
FASYNC
|
FFSYNC
|
FNONBLOCK
|
FRDAHEAD
|
O_DIRECT
)

	)

147 #i‡
deföed
(
COMPAT_FREEBSD7
Ë|| deföed(
COMPAT_FREEBSD6
) || \

148 
deföed
(
COMPAT_FREEBSD5
Ë|| 
	$deföed
(
COMPAT_FREEBSD4
)

154 
	#FPOSIXSHM
 
O_NOFOLLOW


	)

155 #unde‡
FCNTLFLAGS


156 
	#FCNTLFLAGS
 (
FAPPEND
|
FASYNC
|
FFSYNC
|
FNONBLOCK
|
FPOSIXSHM
|
FRDAHEAD
| \

157 
O_DIRECT
)

	)

166 #i‡
__BSD_VISIBLE


167 
	#FAPPEND
 
O_APPEND


	)

168 
	#FASYNC
 
O_ASYNC


	)

169 
	#FFSYNC
 
O_FSYNC


	)

170 
	#FNONBLOCK
 
O_NONBLOCK


	)

171 
	#FNDELAY
 
O_NONBLOCK


	)

172 
	#O_NDELAY
 
O_NONBLOCK


	)

181 #i‡
__BSD_VISIBLE


183 
	#FRDAHEAD
 
O_CREAT


	)

187 #i‡
__BSD_VISIBLE


193 
	#AT_FDCWD
 -100

	)

198 
	#AT_EACCESS
 0x100

	)

199 
	#AT_SYMLINK_NOFOLLOW
 0x200

	)

200 
	#AT_SYMLINK_FOLLOW
 0x400

	)

201 
	#AT_REMOVEDIR
 0x800

	)

209 
	#F_DUPFD
 0

	)

210 
	#F_GETFD
 1

	)

211 
	#F_SETFD
 2

	)

212 
	#F_GETFL
 3

	)

213 
	#F_SETFL
 4

	)

214 #i‡
__BSD_VISIBLE
 || 
__XSI_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200112

215 
	#F_GETOWN
 5

	)

216 
	#F_SETOWN
 6

	)

218 
	#F_OGETLK
 7

	)

219 
	#F_OSETLK
 8

	)

220 
	#F_OSETLKW
 9

	)

221 
	#F_DUP2FD
 10

	)

222 
	#F_GETLK
 11

	)

223 
	#F_SETLK
 12

	)

224 
	#F_SETLKW
 13

	)

225 
	#F_SETLK_REMOTE
 14

	)

226 
	#F_READAHEAD
 15

	)

227 
	#F_RDAHEAD
 16

	)

228 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200809

229 
	#F_DUPFD_CLOEXEC
 17

	)

231 #i‡
__BSD_VISIBLE


232 
	#F_DUP2FD_CLOEXEC
 18

	)

236 
	#FD_CLOEXEC
 1

	)

239 
	#F_RDLCK
 1

	)

240 
	#F_UNLCK
 2

	)

241 
	#F_WRLCK
 3

	)

242 
	#F_UNLCKSYS
 4

	)

243 
	#F_CANCEL
 5

	)

244 #ifde‡
_KERNEL


245 
	#F_WAIT
 0x010

	)

246 
	#F_FLOCK
 0x020

	)

247 
	#F_POSIX
 0x040

	)

248 
	#F_REMOTE
 0x080

	)

249 
	#F_NOINTR
 0x100

	)

256 
	sÊock
 {

257 
off_t
 
l_°¨t
;

258 
off_t
 
l_Àn
;

259 
pid_t
 
l_pid
;

260 
l_ty≥
;

261 
l_whí˚
;

262 
l_sysid
;

269 
	soÊock
 {

270 
off_t
 
l_°¨t
;

271 
off_t
 
l_Àn
;

272 
pid_t
 
l_pid
;

273 
l_ty≥
;

274 
l_whí˚
;

278 #i‡
__BSD_VISIBLE


280 
	#LOCK_SH
 0x01

	)

281 
	#LOCK_EX
 0x02

	)

282 
	#LOCK_NB
 0x04

	)

283 
	#LOCK_UN
 0x08

	)

286 #i‡
__POSIX_VISIBLE
 >= 200112

290 
	#POSIX_FADV_NORMAL
 0

	)

291 
	#POSIX_FADV_RANDOM
 1

	)

292 
	#POSIX_FADV_SEQUENTIAL
 2

	)

293 
	#POSIX_FADV_WILLNEED
 3

	)

294 
	#POSIX_FADV_DONTNEED
 4

	)

295 
	#POSIX_FADV_NOREUSE
 5

	)

298 #i‚de‡
_KERNEL


299 
__BEGIN_DECLS


300 
	`›í
(const *, , ...);

301 
	`¸ót
(c⁄° *, 
mode_t
);

302 
	`f˙é
(, , ...);

303 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200809

304 
	`›í©
(, const *, , ...);

306 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200112

307 
	`posix_Ádvi£
(, 
off_t
, off_t, );

308 
	`posix_ÁŒoˇã
(, 
off_t
, off_t);

310 #i‡
__BSD_VISIBLE


311 
	`Êock
(, );

313 
__END_DECLS


	@/usr/include/getopt.h

40 #i‚de‡
_GETOPT_H_


41 
	#_GETOPT_H_


	)

43 
	~<sys/cdefs.h
>

49 
	#no_¨gumít
 0

	)

50 
	#ªquúed_¨gumít
 1

	)

51 
	#›ti⁄Æ_¨gumít
 2

	)

53 
	s›ti⁄
 {

55 c⁄° *
	m«me
;

60 
	mhas_¨g
;

62 *
	mÊag
;

64 
	mvÆ
;

67 
__BEGIN_DECLS


68 
gë›t_l⁄g
(, * const *, const *,

69 c⁄° 
›ti⁄
 *, *);

70 
gë›t_l⁄g_⁄ly
(, * const *, const *,

71 c⁄° 
›ti⁄
 *, *);

72 #i‚de‡
_GETOPT_DECLARED


73 
	#_GETOPT_DECLARED


	)

74 
gë›t
(, * const [], const *);

76 *
›èrg
;

77 
›töd
, 
›ãº
, 
›t›t
;

79 #i‚de‡
_OPTRESET_DECLARED


80 
	#_OPTRESET_DECLARED


	)

81 
›åe£t
;

83 
	g__END_DECLS


	@/usr/include/math.h

17 #i‚de‡
_MATH_H_


18 
	#_MATH_H_


	)

20 
	~<sys/cdefs.h
>

21 
	~<sys/_ty≥s.h
>

22 
	~<machöe/_limôs.h
>

27 c⁄° 
	u__öföôy_un
 {

28 
__uc
[8];

29 
__ud
;

30 } 
__öföôy
;

32 c⁄° 
	u__«n_un
 {

33 
__uc
[()];

34 
__uf
;

35 } 
__«n
;

37 #i‡
__GNUC_PREREQ__
(3, 3Ë|| (
deföed
(
__INTEL_COMPILER
) && __INTEL_COMPILER >= 800)

38 
	#__MATH_BUILTIN_CONSTANTS


	)

41 #i‡
__GNUC_PREREQ__
(3, 0Ë&& !
deföed
(
__INTEL_COMPILER
)

42 
	#__MATH_BUILTIN_RELOPS


	)

45 #ifde‡
__MATH_BUILTIN_CONSTANTS


46 
	#HUGE_VAL
 
	`__buûtö_huge_vÆ
()

	)

48 
	#HUGE_VAL
 (
__öföôy
.
__ud
)

	)

51 #i‡
__ISO_C_VISIBLE
 >= 1999

52 
	#FP_ILOGB0
 (-
__INT_MAX
)

	)

53 
	#FP_ILOGBNAN
 
__INT_MAX


	)

55 #ifde‡
__MATH_BUILTIN_CONSTANTS


56 
	#HUGE_VALF
 
	`__buûtö_huge_vÆf
()

	)

57 
	#HUGE_VALL
 
	`__buûtö_huge_vÆl
()

	)

58 
	#INFINITY
 
	`__buûtö_öff
()

	)

59 
	#NAN
 
	`__buûtö_«nf
("")

	)

61 
	#HUGE_VALF
 ()
HUGE_VAL


	)

62 
	#HUGE_VALL
 ()
HUGE_VAL


	)

63 
	#INFINITY
 
HUGE_VALF


	)

64 
	#NAN
 (
__«n
.
__uf
)

	)

67 
	#MATH_ERRNO
 1

	)

68 
	#MATH_ERREXCEPT
 2

	)

69 
	#m©h_îrh™dlög
 
MATH_ERREXCEPT


	)

72 #i‡
deföed
(
__ü64__
Ë|| deföed(
__•¨c64__
)

73 
	#FP_FAST_FMA
 1

	)

75 #ifde‡
__ü64__


76 
	#FP_FAST_FMAL
 1

	)

78 
	#FP_FAST_FMAF
 1

	)

81 
	#FP_INFINITE
 0x01

	)

82 
	#FP_NAN
 0x02

	)

83 
	#FP_NORMAL
 0x04

	)

84 
	#FP_SUBNORMAL
 0x08

	)

85 
	#FP_ZERO
 0x10

	)

86 
	#Â˛assify
(
x
) \

87 (( (
x
Ë= ()Ë? 
	`__Â˛assifyf
(x) \

88 : ( (
x
Ë= ()Ë? 
	`__Â˛assifyd
(x) \

89 : 
	`__Â˛assifyl
(
x
))

	)

91 
	#isföôe
(
x
) \

92 (( (
x
Ë= ()Ë? 
	`__isföôef
(x) \

93 : ( (
x
Ë= ()Ë? 
	`__isföôe
(x) \

94 : 
	`__isföôñ
(
x
))

	)

95 
	#isöf
(
x
) \

96 (( (
x
Ë= ()Ë? 
	`__isöff
(x) \

97 : ( (
x
Ë= ()Ë? 
	`isöf
(x) \

98 : 
	`__isöÊ
(
x
))

	)

99 
	#i¢™
(
x
) \

100 (( (
x
Ë= ()Ë? 
	`i¢™f
(x) \

101 : ( (
x
Ë= ()Ë? 
	`i¢™
(x) \

102 : 
	`__i¢™l
(
x
))

	)

103 
	#i¢‹mÆ
(
x
) \

104 (( (
x
Ë= ()Ë? 
	`__i¢‹mÆf
(x) \

105 : ( (
x
Ë= ()Ë? 
	`__i¢‹mÆ
(x) \

106 : 
	`__i¢‹mÆl
(
x
))

	)

108 #ifde‡
__MATH_BUILTIN_RELOPS


109 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
((x), (y))

	)

110 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
((x), (y))

	)

111 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
((x), (y))

	)

112 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
((x), (y))

	)

113 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
((x), (y))

	)

114 
	#isun‹dîed
(
x
, 
y
Ë
	`__buûtö_isun‹dîed
((x), (y))

	)

116 
	#isgª©î
(
x
, 
y
Ë(!
	`isun‹dîed
((x), (y)Ë&& (xË> (y))

	)

117 
	#isgª©îequÆ
(
x
, 
y
Ë(!
	`isun‹dîed
((x), (y)Ë&& (xË>(y))

	)

118 
	#i¶ess
(
x
, 
y
Ë(!
	`isun‹dîed
((x), (y)Ë&& (xË< (y))

	)

119 
	#i¶es£quÆ
(
x
, 
y
Ë(!
	`isun‹dîed
((x), (y)Ë&& (xË<(y))

	)

120 
	#i¶essgª©î
(
x
, 
y
Ë(!
	`isun‹dîed
((x), (y)) && \

121 ((
x
Ë> (
y
Ë|| (yË> (x)))

	)

122 
	#isun‹dîed
(
x
, 
y
Ë(
	`i¢™
(xË|| i¢™(y))

	)

125 
	#signbô
(
x
) \

126 (( (
x
Ë= ()Ë? 
	`__signbôf
(x) \

127 : ( (
x
Ë= ()Ë? 
	`__signbô
(x) \

128 : 
	`__signbôl
(
x
))

	)

130 
__doubÀ_t
 
	tdoubÀ_t
;

131 
__Êﬂt_t
 
	tÊﬂt_t
;

137 #i‡
__BSD_VISIBLE
 || 
__XSI_VISIBLE


138 
	#M_E
 2.7182818284590452354

	)

139 
	#M_LOG2E
 1.4426950408889634074

	)

140 
	#M_LOG10E
 0.43429448190325182765

	)

141 
	#M_LN2
 0.69314718055994530942

	)

142 
	#M_LN10
 2.30258509299404568402

	)

143 
	#M_PI
 3.14159265358979323846

	)

144 
	#M_PI_2
 1.57079632679489661923

	)

145 
	#M_PI_4
 0.78539816339744830962

	)

146 
	#M_1_PI
 0.31830988618379067154

	)

147 
	#M_2_PI
 0.63661977236758134308

	)

148 
	#M_2_SQRTPI
 1.12837916709551257390

	)

149 
	#M_SQRT2
 1.41421356237309504880

	)

150 
	#M_SQRT1_2
 0.70710678118654752440

	)

152 
	#MAXFLOAT
 (()3.40282346638528860e+38)

	)

153 
signgam
;

156 #i‡
__BSD_VISIBLE


159 
	#HUGE
 
HUGE_VAL


	)

161 
	#HUGE
 
MAXFLOAT


	)

170 
__BEGIN_DECLS


174 
	$__Â˛assifyd
(Ë
__puª2
;

175 
	$__Â˛assifyf
(Ë
__puª2
;

176 
	$__Â˛assifyl
(Ë
__puª2
;

177 
	$__isföôef
(Ë
__puª2
;

178 
	$__isföôe
(Ë
__puª2
;

179 
	$__isföôñ
(Ë
__puª2
;

180 
	$__isöff
(Ë
__puª2
;

181 
	$__isöÊ
(Ë
__puª2
;

182 
	$__i¢™l
(Ë
__puª2
;

183 
	$__i¢‹mÆf
(Ë
__puª2
;

184 
	$__i¢‹mÆ
(Ë
__puª2
;

185 
	$__i¢‹mÆl
(Ë
__puª2
;

186 
	$__signbô
(Ë
__puª2
;

187 
	$__signbôf
(Ë
__puª2
;

188 
	$__signbôl
(Ë
__puª2
;

190 
	`acos
();

191 
	`asö
();

192 
	`©™
();

193 
	`©™2
(, );

194 
	`cos
();

195 
	`sö
();

196 
	`èn
();

198 
	`cosh
();

199 
	`söh
();

200 
	`ènh
();

202 
	`exp
();

203 
	`‰exp
(, *);

204 
	`ldexp
(, );

205 
	`log
();

206 
	`log10
();

207 
	`modf
(, *);

209 
	`pow
(, );

210 
	`sqπ
();

212 
	`˚û
();

213 
	$Ábs
(Ë
__puª2
;

214 
	`Êo‹
();

215 
	`fmod
(, );

220 #i‡
__BSD_VISIBLE
 || 
__ISO_C_VISIBLE
 >1999 || 
__XSI_VISIBLE


221 
	`acosh
();

222 
	`asöh
();

223 
	`©™h
();

224 
	`cbπ
();

225 
	`îf
();

226 
	`îfc
();

227 
	`exp2
();

228 
	`expm1
();

229 
	`fma
(, , );

230 
	`hypŸ
(, );

231 
	$ûogb
(Ë
__puª2
;

232 (
isöf
)(Ë
__puª2
;

233 (
i¢™
)(Ë
__puª2
;

234 
	`lgamma
();

235 
	`Œröt
();

236 
	`Œround
();

237 
	`log1p
();

238 
	`log2
();

239 
	`logb
();

240 
	`Ãöt
();

241 
	`Ãound
();

242 
	$«n
(c⁄° *Ë
__puª2
;

243 
	`√xè·î
(, );

244 
	`ªmaödî
(, );

245 
	`ªmquo
(, , *);

246 
	`röt
();

249 #i‡
__BSD_VISIBLE
 || 
__XSI_VISIBLE


250 
	`j0
();

251 
	`j1
();

252 
	`jn
(, );

253 
	`y0
();

254 
	`y1
();

255 
	`yn
(, );

257 #i‡
__XSI_VISIBLE
 <500 || 
__BSD_VISIBLE


258 
	`gamma
();

261 #i‡
__XSI_VISIBLE
 <600 || 
__BSD_VISIBLE


262 
	`sˇlb
(, );

266 #i‡
__BSD_VISIBLE
 || 
__ISO_C_VISIBLE
 >= 1999

267 
	$c›ysign
(, Ë
__puª2
;

268 
	`fdim
(, );

269 
	$fmax
(, Ë
__puª2
;

270 
	$fmö
(, Ë
__puª2
;

271 
	`√¨byöt
();

272 
	`round
();

273 
	`sˇlb 
(, );

274 
	`sˇlbn
(, );

275 
	`tgamma
();

276 
	`åunc
();

282 #i‡
__BSD_VISIBLE


283 
	`dªm
(, );

284 
	$föôe
(Ë
__puª2
;

285 
	$i¢™f
(Ë
__puª2
;

291 
	`gamma_r
(, *);

292 
	`lgamma_r
(, *);

297 
	`signifiˇnd
();

301 #i‡
__ISO_C_VISIBLE
 >= 1999

302 
	`acosf
();

303 
	`asöf
();

304 
	`©™f
();

305 
	`©™2f
(, );

306 
	`cosf
();

307 
	`söf
();

308 
	`ènf
();

310 
	`coshf
();

311 
	`söhf
();

312 
	`ènhf
();

314 
	`exp2f
();

315 
	`expf
();

316 
	`expm1f
();

317 
	`‰expf
(, *);

318 
	$ûogbf
(Ë
__puª2
;

319 
	`ldexpf
(, );

320 
	`log10f
();

321 
	`log1pf
();

322 
	`log2f
();

323 
	`logf
();

324 
	`modff
(, *);

326 
	`powf
(, );

327 
	`sqπf
();

329 
	`˚ûf
();

330 
	$Ábsf
(Ë
__puª2
;

331 
	`Êo‹f
();

332 
	`fmodf
(, );

333 
	`roundf
();

335 
	`îff
();

336 
	`îfcf
();

337 
	`hypŸf
(, );

338 
	`lgammaf
();

339 
	`tgammaf
();

341 
	`acoshf
();

342 
	`asöhf
();

343 
	`©™hf
();

344 
	`cbπf
();

345 
	`logbf
();

346 
	$c›ysignf
(, Ë
__puª2
;

347 
	`Œrötf
();

348 
	`Œroundf
();

349 
	`Ãötf
();

350 
	`Ãoundf
();

351 
	$«nf
(c⁄° *Ë
__puª2
;

352 
	`√¨byötf
();

353 
	`√xè·îf
(, );

354 
	`ªmaödîf
(, );

355 
	`ªmquof
(, , *);

356 
	`rötf
();

357 
	`sˇlb f
(, );

358 
	`sˇlbnf
(, );

359 
	`åuncf
();

361 
	`fdimf
(, );

362 
	`fmaf
(, , );

363 
	$fmaxf
(, Ë
__puª2
;

364 
	$fmöf
(, Ë
__puª2
;

370 #i‡
__BSD_VISIBLE


371 
	`dªmf
(, );

372 
	$föôef
(Ë
__puª2
;

373 
	`gammaf
();

374 
	`j0f
();

375 
	`j1f
();

376 
	`jnf
(, );

377 
	`sˇlbf
(, );

378 
	`y0f
();

379 
	`y1f
();

380 
	`ynf
(, );

387 
	`gammaf_r
(, *);

388 
	`lgammaf_r
(, *);

393 
	`signifiˇndf
();

399 #i‡
__ISO_C_VISIBLE
 >= 1999

401 
	`acoshl
();

403 
	`aco¶
();

405 
	`asöhl
();

407 
	`asöl
();

408 
	`©™2l
(, );

410 
	`©™hl
();

412 
	`©™l
();

414 
	`cbπl
();

416 
	`˚ûl
();

417 
	$c›ysig∆
(, Ë
__puª2
;

419 
	`coshl
();

421 
	`co¶
();

423 
	`îf˛
();

424 
	`îÊ
();

426 
	`exp2l
();

428 
	`ex∂
();

429 
	`expm1l
();

431 
	$Áb¶
(Ë
__puª2
;

432 
	`fdiml
(, );

433 
	`Êo‹l
();

434 
	`fmÆ
(, , );

435 
	$fmaxl
(, Ë
__puª2
;

436 
	$fmöl
(, Ë
__puª2
;

437 
	`fmodl
(, );

438 
	`‰ex∂
(
vÆue
, *);

439 
	`hypŸl
(, );

440 
	$ûogbl
(Ë
__puª2
;

441 
	`ldex∂
(, );

443 
	`lgammÆ
();

445 
	`Œröé
();

446 
	`Œroundl
();

448 
	`log10l
();

449 
	`log1∂
();

450 
	`log2l
();

452 
	`logbl
();

454 
	`logl
();

456 
	`Ãöé
();

457 
	`Ãoundl
();

458 
	`modÊ
(, *);

459 
	$«∆
(c⁄° *Ë
__puª2
;

460 
	`√¨byöé
();

461 
	`√xè·îl
(, );

462 
	`√xâow¨d
(, );

463 
	`√xâow¨df
(, );

464 
	`√xâow¨dl
(, );

466 
	`powl
(, );

468 
	`ªmaödîl
(, );

469 
	`ªmquﬁ
(, , *);

470 
	`röé
();

471 
	`roundl
();

472 
	`sˇlb l
(, );

473 
	`sˇlb∆
(, );

475 
	`söhl
();

477 
	`söl
();

478 
	`sqπl
();

480 
	`ènhl
();

482 
	`è∆
();

484 
	`tgammÆ
();

486 
	`åun˛
();

489 
__END_DECLS


	@/usr/include/netdb.h

61 #i‚de‡
_NETDB_H_


62 
	#_NETDB_H_


	)

64 
	~<sys/cdefs.h
>

65 
	~<sys/_ty≥s.h
>

67 #i‚de‡
_SIZE_T_DECLARED


68 
__size_t
 
	tsize_t
;

69 
	#_SIZE_T_DECLARED


	)

72 #i‚de‡
_SOCKLEN_T_DECLARED


73 
__sockÀn_t
 
	tsockÀn_t
;

74 
	#_SOCKLEN_T_DECLARED


	)

77 #i‚de‡
_UINT32_T_DECLARED


78 
__uöt32_t
 
	tuöt32_t
;

79 
	#_UINT32_T_DECLARED


	)

82 #i‚de‡
_PATH_HEQUIV


83 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

85 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

86 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

87 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

88 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

89 
	#_PATH_SERVICES_DB
 "/v¨/db/£rvi˚s.db"

	)

91 
	#h_î∫o
 (*
	`__h_î∫o
())

	)

98 
	sho°ít
 {

99 *
	mh_«me
;

100 **
	mh_Æü£s
;

101 
	mh_addπy≥
;

102 
	mh_Àngth
;

103 **
	mh_addr_li°
;

104 
	#h_addr
 
h_addr_li°
[0]

	)

107 
	s√ã¡
 {

108 *
	mn_«me
;

109 **
	mn_Æü£s
;

110 
	mn_addπy≥
;

111 
uöt32_t
 
	mn_√t
;

114 
	s£rvít
 {

115 *
	ms_«me
;

116 **
	ms_Æü£s
;

117 
	ms_p‹t
;

118 *
	ms_¥Ÿo
;

121 
	s¥Ÿ€¡
 {

122 *
	mp_«me
;

123 **
	mp_Æü£s
;

124 
	mp_¥Ÿo
;

127 
	saddröfo
 {

128 
	mai_Êags
;

129 
	mai_Ámûy
;

130 
	mai_sockty≥
;

131 
	mai_¥Ÿocﬁ
;

132 
sockÀn_t
 
	mai_addæí
;

133 *
	mai_ˇn⁄«me
;

134 
sockaddr
 *
	mai_addr
;

135 
addröfo
 *
	mai_√xt
;

143 
	#NETDB_INTERNAL
 -1

	)

144 
	#NETDB_SUCCESS
 0

	)

145 
	#HOST_NOT_FOUND
 1

	)

146 
	#TRY_AGAIN
 2

	)

147 
	#NO_RECOVERY
 3

	)

148 
	#NO_DATA
 4

	)

149 
	#NO_ADDRESS
 
NO_DATA


	)

156 
	#EAI_ADDRFAMILY
 1

	)

158 
	#EAI_AGAIN
 2

	)

159 
	#EAI_BADFLAGS
 3

	)

160 
	#EAI_FAIL
 4

	)

161 
	#EAI_FAMILY
 5

	)

162 
	#EAI_MEMORY
 6

	)

165 
	#EAI_NODATA
 7

	)

167 
	#EAI_NONAME
 8

	)

168 
	#EAI_SERVICE
 9

	)

169 
	#EAI_SOCKTYPE
 10

	)

170 
	#EAI_SYSTEM
 11

	)

171 
	#EAI_BADHINTS
 12

	)

172 
	#EAI_PROTOCOL
 13

	)

173 
	#EAI_OVERFLOW
 14

	)

174 
	#EAI_MAX
 15

	)

179 
	#AI_PASSIVE
 0x00000001

	)

180 
	#AI_CANONNAME
 0x00000002

	)

181 
	#AI_NUMERICHOST
 0x00000004

	)

182 
	#AI_NUMERICSERV
 0x00000008

	)

184 
	#AI_MASK
 \

185 (
AI_PASSIVE
 | 
AI_CANONNAME
 | 
AI_NUMERICHOST
 | 
AI_NUMERICSERV
 | \

186 
AI_ADDRCONFIG
)

	)

188 
	#AI_ALL
 0x00000100

	)

189 
	#AI_V4MAPPED_CFG
 0x00000200

	)

190 
	#AI_ADDRCONFIG
 0x00000400

	)

191 
	#AI_V4MAPPED
 0x00000800

	)

193 
	#AI_DEFAULT
 (
AI_V4MAPPED_CFG
 | 
AI_ADDRCONFIG
)

	)

198 
	#NI_MAXHOST
 1025

	)

199 
	#NI_MAXSERV
 32

	)

204 
	#NI_NOFQDN
 0x00000001

	)

205 
	#NI_NUMERICHOST
 0x00000002

	)

206 
	#NI_NAMEREQD
 0x00000004

	)

207 
	#NI_NUMERICSERV
 0x00000008

	)

208 
	#NI_DGRAM
 0x00000010

	)

210 
	#NI_WITHSCOPEID
 0x00000020

	)

216 
	#SCOPE_DELIMITER
 '%'

	)

218 
__BEGIN_DECLS


219 
ídho°ít
();

220 
íd√ã¡
();

221 
íd¥Ÿ€¡
();

222 
íd£rvít
();

223 #i‡
__BSD_VISIBLE
 || (
__POSIX_VISIBLE
 && __POSIX_VISIBLE <= 200112)

224 
ho°ít
 *
gëho°byaddr
(c⁄° *, 
sockÀn_t
, );

225 
ho°ít
 *
gëho°by«me
(const *);

227 
ho°ít
 *
gëho°ít
();

228 
√ã¡
 *
gë√tbyaddr
(
uöt32_t
, );

229 
√ã¡
 *
gë√tby«me
(const *);

230 
√ã¡
 *
gë√ã¡
();

231 
¥Ÿ€¡
 *
gë¥Ÿoby«me
(const *);

232 
¥Ÿ€¡
 *
gë¥Ÿobynumbî
();

233 
¥Ÿ€¡
 *
gë¥Ÿ€¡
();

234 
£rvít
 *
gë£rvby«me
(const *, const *);

235 
£rvít
 *
gë£rvbyp‹t
(, const *);

236 
£rvít
 *
gë£rvít
();

237 
£tho°ít
();

239 
£äëít
();

240 
£çrŸ€¡
();

241 
gëaddröfo
(const *, const *,

242 c⁄° 
addröfo
 *, addrinfo **);

243 
gë«meöfo
(c⁄° 
sockaddr
 *, 
sockÀn_t
, *,

244 
size_t
, *, size_t, );

245 
‰ìaddröfo
(
addröfo
 *);

246 c⁄° *
gai_°ªº‹
();

247 
£t£rvít
();

249 #i‡
__BSD_VISIBLE


250 
íd√tgª¡
();

251 
‰ìho°ít
(
ho°ít
 *);

252 
gëho°byaddr_r
(c⁄° *, 
sockÀn_t
, , 
ho°ít
 *,

253 *, 
size_t
, 
ho°ít
 **, *);

254 
gëho°by«me_r
(c⁄° *, 
ho°ít
 *, *, 
size_t
,

255 
ho°ít
 **, *);

256 
ho°ít
 *
gëho°by«me2
(const *, );

257 
gëho°by«me2_r
(c⁄° *, , 
ho°ít
 *, *,

258 
size_t
, 
ho°ít
 **, *);

259 
gëho°ít_r
(
ho°ít
 *, *, 
size_t
,

260 
ho°ít
 **, *);

261 
ho°ít
 *
gëùnodebyaddr
(c⁄° *, 
size_t
, , *);

262 
ho°ít
 *
gëùnodeby«me
(const *, , , *);

263 
gë√tbyaddr_r
(
uöt32_t
, , 
√ã¡
 *, *, 
size_t
,

264 
√ã¡
**, *);

265 
gë√tby«me_r
(c⁄° *, 
√ã¡
 *, *, 
size_t
,

266 
√ã¡
 **, *);

267 
gë√ã¡_r
(
√ã¡
 *, *, 
size_t
, netent **,

269 
gë√tgª¡
(**, **, **);

270 
gë¥Ÿoby«me_r
(c⁄° *, 
¥Ÿ€¡
 *, *,

271 
size_t
, 
¥Ÿ€¡
 **);

272 
gë¥Ÿobynumbî_r
(, 
¥Ÿ€¡
 *, *, 
size_t
,

273 
¥Ÿ€¡
 **);

274 
gë¥Ÿ€¡_r
(
¥Ÿ€¡
 *, *, 
size_t
,

275 
¥Ÿ€¡
 **);

276 
gë£rvby«me_r
(c⁄° *, c⁄° *, 
£rvít
 *,

277 *, 
size_t
, 
£rvít
 **);

278 
gë£rvbyp‹t_r
(, c⁄° *, 
£rvít
 *, *,

279 
size_t
, 
£rvít
 **);

280 
gë£rvít_r
(
£rvít
 *, *, 
size_t
,

281 
£rvít
 **);

282 
hîr‹
(const *);

283 
__c⁄°
 *
h°ªº‹
();

284 
ö√tgr
(const *, const *, const *, const *);

285 
£äëgª¡
(const *);

294 * 
__h_î∫o
();

295 
	g__END_DECLS


	@/usr/include/netinet/in.h

33 #i‚de‡
_NETINET_IN_H_


34 
	#_NETINET_IN_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_ty≥s.h
>

38 
	~<machöe/ídün.h
>

41 
	#IPPROTO_IP
 0

	)

42 
	#IPPROTO_ICMP
 1

	)

43 
	#IPPROTO_TCP
 6

	)

44 
	#IPPROTO_UDP
 17

	)

46 
	#INADDR_ANY
 (
u_öt32_t
)0x00000000

	)

47 
	#INADDR_BROADCAST
 (
u_öt32_t
)0xfffffff‡

	)

49 #i‚de‡
_UINT8_T_DECLARED


50 
__uöt8_t
 
	tuöt8_t
;

51 
	#_UINT8_T_DECLARED


	)

54 #i‚de‡
_UINT16_T_DECLARED


55 
__uöt16_t
 
	tuöt16_t
;

56 
	#_UINT16_T_DECLARED


	)

59 #i‚de‡
_UINT32_T_DECLARED


60 
__uöt32_t
 
	tuöt32_t
;

61 
	#_UINT32_T_DECLARED


	)

64 #i‚de‡
_IN_ADDR_T_DECLARED


65 
uöt32_t
 
	tö_addr_t
;

66 
	#_IN_ADDR_T_DECLARED


	)

69 #i‚de‡
_IN_PORT_T_DECLARED


70 
uöt16_t
 
	tö_p‹t_t
;

71 
	#_IN_PORT_T_DECLARED


	)

74 #i‚de‡
_SA_FAMILY_T_DECLARED


75 
__ß_Ámûy_t
 
	tß_Ámûy_t
;

76 
	#_SA_FAMILY_T_DECLARED


	)

80 #i‚def 
_STRUCT_IN_ADDR_DECLARED


81 
	sö_addr
 {

82 
ö_addr_t
 
	ms_addr
;

84 
	#_STRUCT_IN_ADDR_DECLARED


	)

87 #i‚def 
_SOCKLEN_T_DECLARED


88 
__sockÀn_t
 
	tsockÀn_t
;

89 
	#_SOCKLEN_T_DECLARED


	)

93 #i‚def 
_STRUCT_SOCKADDR_STORAGE_DECLARED


97 
	#_SS_MAXSIZE
 128U

	)

98 
	#_SS_ALIGNSIZE
 ((
__öt64_t
))

	)

99 
	#_SS_PAD1SIZE
 (
_SS_ALIGNSIZE
 - () - \

100 (
ß_Ámûy_t
))

	)

101 
	#_SS_PAD2SIZE
 (
_SS_MAXSIZE
 - () - \

102 (
ß_Ámûy_t
Ë- 
_SS_PAD1SIZE
 - 
_SS_ALIGNSIZE
)

	)

104 
	ssockaddr_°‹age
 {

105 
	mss_Àn
;

106 
ß_Ámûy_t
 
	mss_Ámûy
;

107 
	m__ss_∑d1
[
_SS_PAD1SIZE
];

108 
__öt64_t
 
	m__ss_Æign
;

109 
	m__ss_∑d2
[
_SS_PAD2SIZE
];

111 
	#_STRUCT_SOCKADDR_STORAGE_DECLARED


	)

115 
	ssockaddr_ö
 {

116 
uöt8_t
 
	msö_Àn
;

117 
ß_Ámûy_t
 
	msö_Ámûy
;

118 
ö_p‹t_t
 
	msö_p‹t
;

119 
ö_addr
 
	msö_addr
;

120 
	msö_zîo
[8];

123 #i‡!
deföed
(
_KERNEL
Ë&& 
__BSD_VISIBLE


125 #i‚de‡
_BYTEORDER_PROTOTYPED


126 
	#_BYTEORDER_PROTOTYPED


	)

127 
__BEGIN_DECLS


128 
uöt32_t
 
ht⁄l
(uint32_t);

129 
uöt16_t
 
ht⁄s
(uint16_t);

130 
uöt32_t
 
¡ohl
(uint32_t);

131 
uöt16_t
 
¡ohs
(uint16_t);

132 
	g__END_DECLS


135 #i‚de‡
_BYTEORDER_FUNC_DEFINED


136 
	#_BYTEORDER_FUNC_DEFINED


	)

137 
	#ht⁄l
(
x
Ë
	`__ht⁄l
(x)

	)

138 
	#ht⁄s
(
x
Ë
	`__ht⁄s
(x)

	)

139 
	#¡ohl
(
x
Ë
	`__¡ohl
(x)

	)

140 
	#¡ohs
(
x
Ë
	`__¡ohs
(x)

	)

145 #i‡
__POSIX_VISIBLE
 >= 200112

146 
	#IPPROTO_RAW
 255

	)

147 
	#INET_ADDRSTRLEN
 16

	)

150 #i‡
__BSD_VISIBLE


159 
	#IPPROTO_HOPOPTS
 0

	)

160 
	#IPPROTO_IGMP
 2

	)

161 
	#IPPROTO_GGP
 3

	)

162 
	#IPPROTO_IPV4
 4

	)

163 
	#IPPROTO_IPIP
 
IPPROTO_IPV4


	)

164 
	#IPPROTO_ST
 7

	)

165 
	#IPPROTO_EGP
 8

	)

166 
	#IPPROTO_PIGP
 9

	)

167 
	#IPPROTO_RCCMON
 10

	)

168 
	#IPPROTO_NVPII
 11

	)

169 
	#IPPROTO_PUP
 12

	)

170 
	#IPPROTO_ARGUS
 13

	)

171 
	#IPPROTO_EMCON
 14

	)

172 
	#IPPROTO_XNET
 15

	)

173 
	#IPPROTO_CHAOS
 16

	)

174 
	#IPPROTO_MUX
 18

	)

175 
	#IPPROTO_MEAS
 19

	)

176 
	#IPPROTO_HMP
 20

	)

177 
	#IPPROTO_PRM
 21

	)

178 
	#IPPROTO_IDP
 22

	)

179 
	#IPPROTO_TRUNK1
 23

	)

180 
	#IPPROTO_TRUNK2
 24

	)

181 
	#IPPROTO_LEAF1
 25

	)

182 
	#IPPROTO_LEAF2
 26

	)

183 
	#IPPROTO_RDP
 27

	)

184 
	#IPPROTO_IRTP
 28

	)

185 
	#IPPROTO_TP
 29

	)

186 
	#IPPROTO_BLT
 30

	)

187 
	#IPPROTO_NSP
 31

	)

188 
	#IPPROTO_INP
 32

	)

189 
	#IPPROTO_SEP
 33

	)

190 
	#IPPROTO_3PC
 34

	)

191 
	#IPPROTO_IDPR
 35

	)

192 
	#IPPROTO_XTP
 36

	)

193 
	#IPPROTO_DDP
 37

	)

194 
	#IPPROTO_CMTP
 38

	)

195 
	#IPPROTO_TPXX
 39

	)

196 
	#IPPROTO_IL
 40

	)

197 
	#IPPROTO_IPV6
 41

	)

198 
	#IPPROTO_SDRP
 42

	)

199 
	#IPPROTO_ROUTING
 43

	)

200 
	#IPPROTO_FRAGMENT
 44

	)

201 
	#IPPROTO_IDRP
 45

	)

202 
	#IPPROTO_RSVP
 46

	)

203 
	#IPPROTO_GRE
 47

	)

204 
	#IPPROTO_MHRP
 48

	)

205 
	#IPPROTO_BHA
 49

	)

206 
	#IPPROTO_ESP
 50

	)

207 
	#IPPROTO_AH
 51

	)

208 
	#IPPROTO_INLSP
 52

	)

209 
	#IPPROTO_SWIPE
 53

	)

210 
	#IPPROTO_NHRP
 54

	)

211 
	#IPPROTO_MOBILE
 55

	)

212 
	#IPPROTO_TLSP
 56

	)

213 
	#IPPROTO_SKIP
 57

	)

214 
	#IPPROTO_ICMPV6
 58

	)

215 
	#IPPROTO_NONE
 59

	)

216 
	#IPPROTO_DSTOPTS
 60

	)

217 
	#IPPROTO_AHIP
 61

	)

218 
	#IPPROTO_CFTP
 62

	)

219 
	#IPPROTO_HELLO
 63

	)

220 
	#IPPROTO_SATEXPAK
 64

	)

221 
	#IPPROTO_KRYPTOLAN
 65

	)

222 
	#IPPROTO_RVD
 66

	)

223 
	#IPPROTO_IPPC
 67

	)

224 
	#IPPROTO_ADFS
 68

	)

225 
	#IPPROTO_SATMON
 69

	)

226 
	#IPPROTO_VISA
 70

	)

227 
	#IPPROTO_IPCV
 71

	)

228 
	#IPPROTO_CPNX
 72

	)

229 
	#IPPROTO_CPHB
 73

	)

230 
	#IPPROTO_WSN
 74

	)

231 
	#IPPROTO_PVP
 75

	)

232 
	#IPPROTO_BRSATMON
 76

	)

233 
	#IPPROTO_ND
 77

	)

234 
	#IPPROTO_WBMON
 78

	)

235 
	#IPPROTO_WBEXPAK
 79

	)

236 
	#IPPROTO_EON
 80

	)

237 
	#IPPROTO_VMTP
 81

	)

238 
	#IPPROTO_SVMTP
 82

	)

239 
	#IPPROTO_VINES
 83

	)

240 
	#IPPROTO_TTP
 84

	)

241 
	#IPPROTO_IGP
 85

	)

242 
	#IPPROTO_DGP
 86

	)

243 
	#IPPROTO_TCF
 87

	)

244 
	#IPPROTO_IGRP
 88

	)

245 
	#IPPROTO_OSPFIGP
 89

	)

246 
	#IPPROTO_SRPC
 90

	)

247 
	#IPPROTO_LARP
 91

	)

248 
	#IPPROTO_MTP
 92

	)

249 
	#IPPROTO_AX25
 93

	)

250 
	#IPPROTO_IPEIP
 94

	)

251 
	#IPPROTO_MICP
 95

	)

252 
	#IPPROTO_SCCSP
 96

	)

253 
	#IPPROTO_ETHERIP
 97

	)

254 
	#IPPROTO_ENCAP
 98

	)

255 
	#IPPROTO_APES
 99

	)

256 
	#IPPROTO_GMTP
 100

	)

257 
	#IPPROTO_IPCOMP
 108

	)

258 
	#IPPROTO_SCTP
 132

	)

260 
	#IPPROTO_PIM
 103

	)

261 
	#IPPROTO_CARP
 112

	)

262 
	#IPPROTO_PGM
 113

	)

263 
	#IPPROTO_PFSYNC
 240

	)

266 
	#IPPROTO_OLD_DIVERT
 254

	)

267 
	#IPPROTO_MAX
 256

	)

270 
	#IPPROTO_DONE
 257

	)

273 
	#IPPROTO_DIVERT
 258

	)

279 
	#IPPROTO_SPACER
 32767

	)

330 
	#IPPORT_RESERVED
 1024

	)

335 
	#IPPORT_EPHEMERALFIRST
 10000

	)

336 
	#IPPORT_EPHEMERALLAST
 65535

	)

341 
	#IPPORT_HIFIRSTAUTO
 49152

	)

342 
	#IPPORT_HILASTAUTO
 65535

	)

350 
	#IPPORT_RESERVEDSTART
 600

	)

352 
	#IPPORT_MAX
 65535

	)

359 
	#IN_CLASSA
(
i
Ë(((
u_öt32_t
)(iË& 0x80000000Ë=0)

	)

360 
	#IN_CLASSA_NET
 0xff000000

	)

361 
	#IN_CLASSA_NSHIFT
 24

	)

362 
	#IN_CLASSA_HOST
 0x00ffffff

	)

363 
	#IN_CLASSA_MAX
 128

	)

365 
	#IN_CLASSB
(
i
Ë(((
u_öt32_t
)(iË& 0xc0000000Ë=0x80000000)

	)

366 
	#IN_CLASSB_NET
 0xffff0000

	)

367 
	#IN_CLASSB_NSHIFT
 16

	)

368 
	#IN_CLASSB_HOST
 0x0000ffff

	)

369 
	#IN_CLASSB_MAX
 65536

	)

371 
	#IN_CLASSC
(
i
Ë(((
u_öt32_t
)(iË& 0xe0000000Ë=0xc0000000)

	)

372 
	#IN_CLASSC_NET
 0xffffff00

	)

373 
	#IN_CLASSC_NSHIFT
 8

	)

374 
	#IN_CLASSC_HOST
 0x000000ff

	)

376 
	#IN_CLASSD
(
i
Ë(((
u_öt32_t
)(iË& 0xf0000000Ë=0xe0000000)

	)

377 
	#IN_CLASSD_NET
 0xf0000000

	)

378 
	#IN_CLASSD_NSHIFT
 28

	)

379 
	#IN_CLASSD_HOST
 0x0ffffff‡

	)

380 
	#IN_MULTICAST
(
i
Ë
	`IN_CLASSD
(i)

	)

382 
	#IN_EXPERIMENTAL
(
i
Ë(((
u_öt32_t
)(iË& 0xf0000000Ë=0xf0000000)

	)

383 
	#IN_BADCLASS
(
i
Ë(((
u_öt32_t
)(iË& 0xf0000000Ë=0xf0000000)

	)

385 
	#IN_LINKLOCAL
(
i
Ë(((
u_öt32_t
)(iË& 0xffff0000Ë=0xa9„0000)

	)

386 
	#IN_LOOPBACK
(
i
Ë(((
u_öt32_t
)(iË& 0xff000000Ë=0x7f000000)

	)

387 
	#IN_ZERONET
(
i
Ë(((
u_öt32_t
)(iË& 0xff000000Ë=0)

	)

389 
	#IN_PRIVATE
(
i
Ë((((
u_öt32_t
)(i) & 0xff000000) == 0x0a000000) || \

390 (((
u_öt32_t
)(
i
) & 0xfff00000) == 0xac100000) || \

391 (((
u_öt32_t
)(
i
Ë& 0xffff0000Ë=0xc0a80000))

	)

393 
	#IN_LOCAL_GROUP
(
i
Ë(((
u_öt32_t
)(iË& 0xffffff00Ë=0xe0000000)

	)

395 
	#IN_ANY_LOCAL
(
i
Ë(
	`IN_LINKLOCAL
(iË|| 
	`IN_LOCAL_GROUP
(i))

	)

397 
	#INADDR_LOOPBACK
 (
u_öt32_t
)0x7f000001

	)

398 #i‚de‡
_KERNEL


399 
	#INADDR_NONE
 0xfffffff‡

	)

402 
	#INADDR_UNSPEC_GROUP
 (
u_öt32_t
)0xe0000000

	)

403 
	#INADDR_ALLHOSTS_GROUP
 (
u_öt32_t
)0xe0000001

	)

404 
	#INADDR_ALLRTRS_GROUP
 (
u_öt32_t
)0xe0000002

	)

405 
	#INADDR_ALLRPTS_GROUP
 (
u_öt32_t
)0xe0000016

	)

406 
	#INADDR_CARP_GROUP
 (
u_öt32_t
)0xe0000012

	)

407 
	#INADDR_PFSYNC_GROUP
 (
u_öt32_t
)0xe00000f0

	)

408 
	#INADDR_ALLMDNS_GROUP
 (
u_öt32_t
)0xe00000fb

	)

409 
	#INADDR_MAX_LOCAL_GROUP
 (
u_öt32_t
)0xe00000f‡

	)

411 
	#IN_LOOPBACKNET
 127

	)

417 
	#IP_OPTIONS
 1

	)

418 
	#IP_HDRINCL
 2

	)

419 
	#IP_TOS
 3

	)

420 
	#IP_TTL
 4

	)

421 
	#IP_RECVOPTS
 5

	)

422 
	#IP_RECVRETOPTS
 6

	)

423 
	#IP_RECVDSTADDR
 7

	)

424 
	#IP_SENDSRCADDR
 
IP_RECVDSTADDR


	)

425 
	#IP_RETOPTS
 8

	)

426 
	#IP_MULTICAST_IF
 9

	)

428 
	#IP_MULTICAST_TTL
 10

	)

429 
	#IP_MULTICAST_LOOP
 11

	)

430 
	#IP_ADD_MEMBERSHIP
 12

	)

431 
	#IP_DROP_MEMBERSHIP
 13

	)

432 
	#IP_MULTICAST_VIF
 14

	)

433 
	#IP_RSVP_ON
 15

	)

434 
	#IP_RSVP_OFF
 16

	)

435 
	#IP_RSVP_VIF_ON
 17

	)

436 
	#IP_RSVP_VIF_OFF
 18

	)

437 
	#IP_PORTRANGE
 19

	)

438 
	#IP_RECVIF
 20

	)

440 
	#IP_IPSEC_POLICY
 21

	)

441 
	#IP_FAITH
 22

	)

443 
	#IP_ONESBCAST
 23

	)

444 
	#IP_BINDANY
 24

	)

451 
	#IP_FW_TABLE_ADD
 40

	)

452 
	#IP_FW_TABLE_DEL
 41

	)

453 
	#IP_FW_TABLE_FLUSH
 42

	)

454 
	#IP_FW_TABLE_GETSIZE
 43

	)

455 
	#IP_FW_TABLE_LIST
 44

	)

457 
	#IP_FW3
 48

	)

458 
	#IP_DUMMYNET3
 49

	)

460 
	#IP_FW_ADD
 50

	)

461 
	#IP_FW_DEL
 51

	)

462 
	#IP_FW_FLUSH
 52

	)

463 
	#IP_FW_ZERO
 53

	)

464 
	#IP_FW_GET
 54

	)

465 
	#IP_FW_RESETLOG
 55

	)

467 
	#IP_FW_NAT_CFG
 56

	)

468 
	#IP_FW_NAT_DEL
 57

	)

469 
	#IP_FW_NAT_GET_CONFIG
 58

	)

470 
	#IP_FW_NAT_GET_LOG
 59

	)

472 
	#IP_DUMMYNET_CONFIGURE
 60

	)

473 
	#IP_DUMMYNET_DEL
 61

	)

474 
	#IP_DUMMYNET_FLUSH
 62

	)

475 
	#IP_DUMMYNET_GET
 64

	)

477 
	#IP_RECVTTL
 65

	)

478 
	#IP_MINTTL
 66

	)

479 
	#IP_DONTFRAG
 67

	)

480 
	#IP_RECVTOS
 68

	)

483 
	#IP_ADD_SOURCE_MEMBERSHIP
 70

	)

484 
	#IP_DROP_SOURCE_MEMBERSHIP
 71

	)

485 
	#IP_BLOCK_SOURCE
 72

	)

486 
	#IP_UNBLOCK_SOURCE
 73

	)

489 
	#IP_MSFILTER
 74

	)

492 
	#MCAST_JOIN_GROUP
 80

	)

493 
	#MCAST_LEAVE_GROUP
 81

	)

494 
	#MCAST_JOIN_SOURCE_GROUP
 82

	)

495 
	#MCAST_LEAVE_SOURCE_GROUP
 83

	)

496 
	#MCAST_BLOCK_SOURCE
 84

	)

497 
	#MCAST_UNBLOCK_SOURCE
 85

	)

502 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

503 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

510 
	#IP_MIN_MEMBERSHIPS
 31

	)

511 
	#IP_MAX_MEMBERSHIPS
 4095

	)

512 
	#IP_MAX_SOURCE_FILTER
 1024

	)

518 
	#IP_MAX_GROUP_SRC_FILTER
 512

	)

519 
	#IP_MAX_SOCK_SRC_FILTER
 128

	)

520 
	#IP_MAX_SOCK_MUTE_FILTER
 128

	)

525 
	sù_mªq
 {

526 
ö_addr
 
	mimr_mu…üddr
;

527 
ö_addr
 
	mimr_öãrÁ˚
;

535 
	sù_mªqn
 {

536 
ö_addr
 
	mimr_mu…üddr
;

537 
ö_addr
 
	mimr_addªss
;

538 
	mimr_ifödex
;

544 
	sù_mªq_sour˚
 {

545 
ö_addr
 
	mimr_mu…üddr
;

546 
ö_addr
 
	mimr_sour˚addr
;

547 
ö_addr
 
	mimr_öãrÁ˚
;

554 
	sgroup_ªq
 {

555 
uöt32_t
 
	mgr_öãrÁ˚
;

556 
sockaddr_°‹age
 
	mgr_group
;

559 
	sgroup_sour˚_ªq
 {

560 
uöt32_t
 
	mg§_öãrÁ˚
;

561 
sockaddr_°‹age
 
	mg§_group
;

562 
sockaddr_°‹age
 
	mg§_sour˚
;

565 #i‚de‡
__MSFILTERREQ_DEFINED


566 
	#__MSFILTERREQ_DEFINED


	)

572 
	s__msfûãºeq
 {

573 
uöt32_t
 
	mms‰_ifödex
;

574 
uöt32_t
 
	mms‰_fmode
;

575 
uöt32_t
 
	mms‰_n§cs
;

576 
sockaddr_°‹age
 
	mms‰_group
;

577 
sockaddr_°‹age
 *
	mms‰_§cs
;

584 
	gsockaddr
;

591 
£tùv4sour˚fûãr
(, 
ö_addr
, ö_addr, 
uöt32_t
,

592 
uöt32_t
, 
ö_addr
 *);

593 
gëùv4sour˚fûãr
(, 
ö_addr
, ö_addr, 
uöt32_t
 *,

594 
uöt32_t
 *, 
ö_addr
 *);

595 
£tsour˚fûãr
(, 
uöt32_t
, 
sockaddr
 *, 
sockÀn_t
,

596 
uöt32_t
, uöt32_t, 
sockaddr_°‹age
 *);

597 
gësour˚fûãr
(, 
uöt32_t
, 
sockaddr
 *, 
sockÀn_t
,

598 
uöt32_t
 *, uöt32_à*, 
sockaddr_°‹age
 *);

603 
	#MCAST_UNDEFINED
 0

	)

604 
	#MCAST_INCLUDE
 1

	)

605 
	#MCAST_EXCLUDE
 2

	)

611 
	#IP_PORTRANGE_DEFAULT
 0

	)

612 
	#IP_PORTRANGE_HIGH
 1

	)

613 
	#IP_PORTRANGE_LOW
 2

	)

621 
	#IPPROTO_MAXID
 (
IPPROTO_AH
 + 1Ë

	)

623 
	#CTL_IPPROTO_NAMES
 { \

624 { "ù", 
CTLTYPE_NODE
 }, \

625 { "icmp", 
CTLTYPE_NODE
 }, \

626 { "igmp", 
CTLTYPE_NODE
 }, \

627 { "ggp", 
CTLTYPE_NODE
 }, \

630 { "t˝", 
CTLTYPE_NODE
 }, \

632 { "egp", 
CTLTYPE_NODE
 }, \

636 { "pup", 
CTLTYPE_NODE
 }, \

641 { "udp", 
CTLTYPE_NODE
 }, \

646 { "idp", 
CTLTYPE_NODE
 }, \

675 { "ù£c", 
CTLTYPE_NODE
 }, \

691 { "pim", 
CTLTYPE_NODE
 }, \

692 }

	)

697 
	#IPCTL_FORWARDING
 1

	)

698 
	#IPCTL_SENDREDIRECTS
 2

	)

699 
	#IPCTL_DEFTTL
 3

	)

700 #ifde‡
nŸyë


701 
	#IPCTL_DEFMTU
 4

	)

703 
	#IPCTL_RTEXPIRE
 5

	)

704 
	#IPCTL_RTMINEXPIRE
 6

	)

705 
	#IPCTL_RTMAXCACHE
 7

	)

706 
	#IPCTL_SOURCEROUTE
 8

	)

707 
	#IPCTL_DIRECTEDBROADCAST
 9

	)

708 
	#IPCTL_INTRQMAXLEN
 10

	)

709 
	#IPCTL_INTRQDROPS
 11

	)

710 
	#IPCTL_STATS
 12

	)

711 
	#IPCTL_ACCEPTSOURCEROUTE
 13

	)

712 
	#IPCTL_FASTFORWARDING
 14

	)

713 
	#IPCTL_KEEPFAITH
 15

	)

714 
	#IPCTL_GIF_TTL
 16

	)

715 
	#IPCTL_MAXID
 17

	)

717 
	#IPCTL_NAMES
 { \

719 { "f‹w¨dög", 
CTLTYPE_INT
 }, \

720 { "ªdúe˘", 
CTLTYPE_INT
 }, \

721 { "âl", 
CTLTYPE_INT
 }, \

722 { "mtu", 
CTLTYPE_INT
 }, \

723 { "πexpúe", 
CTLTYPE_INT
 }, \

724 { "πmöexpúe", 
CTLTYPE_INT
 }, \

725 { "πmaxˇche", 
CTLTYPE_INT
 }, \

726 { "sour˚rouã", 
CTLTYPE_INT
 }, \

727 { "dúe˘ed-brﬂdˇ°", 
CTLTYPE_INT
 }, \

728 { "öå-queue-maxÀn", 
CTLTYPE_INT
 }, \

729 { "öå-queue-dr›s", 
CTLTYPE_INT
 }, \

730 { "°©s", 
CTLTYPE_STRUCT
 }, \

731 { "ac˚±_sour˚rouã", 
CTLTYPE_INT
 }, \

732 { "Á°f‹w¨dög", 
CTLTYPE_INT
 }, \

733 }

	)

737 #ifde‡
_KERNEL


739 
	gi‚ë
; 
	gmbuf
;

741 
ö_brﬂdˇ°
(
ö_addr
, 
i‚ë
 *);

742 
ö_ˇnf‹w¨d
(
ö_addr
);

743 
ö_loˇœddr
(
ö_addr
);

744 
ö_loˇlù
(
ö_addr
);

745 
öë_©⁄
(c⁄° *, 
ö_addr
 *);

746 *
öë_¡ﬂ
(
ö_addr
);

747 *
öë_¡ﬂ_r
(
ö_addr
 
öa
, *
buf
);

748 *
öë_¡›
(, c⁄° *, *, 
sockÀn_t
);

749 
öë_±⁄
(
af
, const *, *);

750 
ö_ifdëach
(
i‚ë
 *);

752 
	#ö_ho°eq
(
s
, 
t
Ë((s).
s_addr
 =—).s_addr)

	)

753 
	#ö_nuŒho°
(
x
Ë((x).
s_addr
 =
INADDR_ANY
)

	)

754 
	#ö_Ælho°s
(
x
Ë((x).
s_addr
 =
	`ht⁄l
(
INADDR_ALLHOSTS_GROUP
))

	)

756 
	#ßtosö
(
ß
Ë((
sockaddr_ö
 *)(ß))

	)

757 
	#sötoß
(
sö
Ë((
sockaddr
 *)(sö))

	)

758 
	#iÁtoü
(
iÁ
Ë((
ö_iÁddr
 *)(iÁ))

	)

769 #i‡(
BYTE_ORDER
 =
BIG_ENDIAN
Ë|| 
deföed
(
HAVE_NET_IPLEN
)

770 
	#SET_NET_IPLEN
(
p
Ëdÿ{} 0)

	)

771 
	#SET_HOST_IPLEN
(
p
Ëdÿ{} 0)

	)

773 
	#SET_NET_IPLEN
(
p
) do { \

774 
ù
 *
h_ù
 = (
p
); \

775 
h_ù
->
ù_Àn
 = 
	`ht⁄s
(h_ip->ip_len); \

776 
h_ù
->
ù_off
 = 
	`ht⁄s
(h_ip->ip_off); \

777 } 0)

	)

779 
	#SET_HOST_IPLEN
(
p
) do { \

780 
ù
 *
h_ù
 = (
p
); \

781 
h_ù
->
ù_Àn
 = 
	`¡ohs
(h_ip->ip_len); \

782 
h_ù
->
ù_off
 = 
	`¡ohs
(h_ip->ip_off); \

783 } 0)

	)

789 #i‡
__POSIX_VISIBLE
 >= 200112

790 
	#__KAME_NETINET_IN_H_INCLUDED_


	)

791 
	~<√töë6/ö6.h
>

792 #unde‡
__KAME_NETINET_IN_H_INCLUDED_


	@/usr/include/openssl/aes.h

52 #i‚de‡
HEADER_AES_H


53 
	#HEADER_AES_H


	)

55 
	~<›ís¶/›ís¶c⁄f.h
>

57 #ifde‡
OPENSSL_NO_AES


58 #îr‹ 
AES
 
is
 
dißbÀd
.

61 
	#AES_ENCRYPT
 1

	)

62 
	#AES_DECRYPT
 0

	)

66 
	#AES_MAXNR
 14

	)

67 
	#AES_BLOCK_SIZE
 16

	)

69 #ifde‡
OPENSSL_FIPS


70 
	#FIPS_AES_SIZE_T
 

	)

73 #ifde‡ 
__˝lu•lus


78 
	s´s_key_°
 {

79 #ifde‡
AES_LONG


80 
rd_key
[4 *(
AES_MAXNR
 + 1)];

82 
rd_key
[4 *(
AES_MAXNR
 + 1)];

84 
rounds
;

86 
´s_key_°
 
	tAES_KEY
;

88 c⁄° *
AES_›ti⁄s
();

90 
AES_£t_í¸y±_key
(c⁄° *
u£rKey
, c⁄° 
bôs
,

91 
AES_KEY
 *
key
);

92 
AES_£t_de¸y±_key
(c⁄° *
u£rKey
, c⁄° 
bôs
,

93 
AES_KEY
 *
key
);

95 
AES_í¸y±
(c⁄° *
ö
, *
out
,

96 c⁄° 
AES_KEY
 *
key
);

97 
AES_de¸y±
(c⁄° *
ö
, *
out
,

98 c⁄° 
AES_KEY
 *
key
);

100 
AES_ecb_í¸y±
(c⁄° *
ö
, *
out
,

101 c⁄° 
AES_KEY
 *
key
, c⁄° 
íc
);

102 
AES_cbc_í¸y±
(c⁄° *
ö
, *
out
,

103 c⁄° 
Àngth
, c⁄° 
AES_KEY
 *
key
,

104 *
ivec
, c⁄° 
íc
);

105 
AES_cfb128_í¸y±
(c⁄° *
ö
, *
out
,

106 c⁄° 
Àngth
, c⁄° 
AES_KEY
 *
key
,

107 *
ivec
, *
num
, c⁄° 
íc
);

108 
AES_cfb1_í¸y±
(c⁄° *
ö
, *
out
,

109 c⁄° 
Àngth
, c⁄° 
AES_KEY
 *
key
,

110 *
ivec
, *
num
, c⁄° 
íc
);

111 
AES_cfb8_í¸y±
(c⁄° *
ö
, *
out
,

112 c⁄° 
Àngth
, c⁄° 
AES_KEY
 *
key
,

113 *
ivec
, *
num
, c⁄° 
íc
);

114 
AES_cfbr_í¸y±_block
(c⁄° *
ö
,*
out
,

115 c⁄° 
nbôs
,c⁄° 
AES_KEY
 *
key
,

116 *
ivec
,c⁄° 
íc
);

117 
AES_ofb128_í¸y±
(c⁄° *
ö
, *
out
,

118 c⁄° 
Àngth
, c⁄° 
AES_KEY
 *
key
,

119 *
ivec
, *
num
);

120 
AES_˘r128_í¸y±
(c⁄° *
ö
, *
out
,

121 c⁄° 
Àngth
, c⁄° 
AES_KEY
 *
key
,

122 
ivec
[
AES_BLOCK_SIZE
],

123 
ecou¡_buf
[
AES_BLOCK_SIZE
],

124 *
num
);

128 
AES_ige_í¸y±
(c⁄° *
ö
, *
out
,

129 c⁄° 
Àngth
, c⁄° 
AES_KEY
 *
key
,

130 *
ivec
, c⁄° 
íc
);

132 
AES_bi_ige_í¸y±
(c⁄° *
ö
, *
out
,

133 c⁄° 
Àngth
, c⁄° 
AES_KEY
 *
key
,

134 c⁄° 
AES_KEY
 *
key2
, c⁄° *
ivec
,

135 c⁄° 
íc
);

137 
AES_wøp_key
(
AES_KEY
 *
key
, c⁄° *
iv
,

138 *
out
,

139 c⁄° *
ö
, 
öÀn
);

140 
AES_unwøp_key
(
AES_KEY
 *
key
, c⁄° *
iv
,

141 *
out
,

142 c⁄° *
ö
, 
öÀn
);

144 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/asn1.h

59 #i‚de‡
HEADER_ASN1_H


60 
	#HEADER_ASN1_H


	)

62 
	~<time.h
>

63 
	~<›ís¶/e_os2.h
>

64 #i‚de‡
OPENSSL_NO_BIO


65 
	~<›ís¶/bio.h
>

67 
	~<›ís¶/°ack.h
>

68 
	~<›ís¶/ß„°ack.h
>

70 
	~<›ís¶/symhacks.h
>

72 
	~<›ís¶/os¶_typ.h
>

73 #i‚de‡
OPENSSL_NO_DEPRECATED


74 
	~<›ís¶/bn.h
>

77 #ifde‡
OPENSSL_BUILD_SHLIBCRYPTO


78 #unde‡
OPENSSL_EXTERN


79 
	#OPENSSL_EXTERN
 
OPENSSL_EXPORT


	)

82 #ifde‡ 
__˝lu•lus


86 
	#V_ASN1_UNIVERSAL
 0x00

	)

87 
	#V_ASN1_APPLICATION
 0x40

	)

88 
	#V_ASN1_CONTEXT_SPECIFIC
 0x80

	)

89 
	#V_ASN1_PRIVATE
 0xc0

	)

91 
	#V_ASN1_CONSTRUCTED
 0x20

	)

92 
	#V_ASN1_PRIMITIVE_TAG
 0x1f

	)

93 
	#V_ASN1_PRIMATIVE_TAG
 0x1f

	)

95 
	#V_ASN1_APP_CHOOSE
 -2

	)

96 
	#V_ASN1_OTHER
 -3

	)

97 
	#V_ASN1_ANY
 -4

	)

99 
	#V_ASN1_NEG
 0x100

	)

101 
	#V_ASN1_UNDEF
 -1

	)

102 
	#V_ASN1_EOC
 0

	)

103 
	#V_ASN1_BOOLEAN
 1

	)

104 
	#V_ASN1_INTEGER
 2

	)

105 
	#V_ASN1_NEG_INTEGER
 (2 | 
V_ASN1_NEG
)

	)

106 
	#V_ASN1_BIT_STRING
 3

	)

107 
	#V_ASN1_OCTET_STRING
 4

	)

108 
	#V_ASN1_NULL
 5

	)

109 
	#V_ASN1_OBJECT
 6

	)

110 
	#V_ASN1_OBJECT_DESCRIPTOR
 7

	)

111 
	#V_ASN1_EXTERNAL
 8

	)

112 
	#V_ASN1_REAL
 9

	)

113 
	#V_ASN1_ENUMERATED
 10

	)

114 
	#V_ASN1_NEG_ENUMERATED
 (10 | 
V_ASN1_NEG
)

	)

115 
	#V_ASN1_UTF8STRING
 12

	)

116 
	#V_ASN1_SEQUENCE
 16

	)

117 
	#V_ASN1_SET
 17

	)

118 
	#V_ASN1_NUMERICSTRING
 18

	)

119 
	#V_ASN1_PRINTABLESTRING
 19

	)

120 
	#V_ASN1_T61STRING
 20

	)

121 
	#V_ASN1_TELETEXSTRING
 20

	)

122 
	#V_ASN1_VIDEOTEXSTRING
 21

	)

123 
	#V_ASN1_IA5STRING
 22

	)

124 
	#V_ASN1_UTCTIME
 23

	)

125 
	#V_ASN1_GENERALIZEDTIME
 24

	)

126 
	#V_ASN1_GRAPHICSTRING
 25

	)

127 
	#V_ASN1_ISO64STRING
 26

	)

128 
	#V_ASN1_VISIBLESTRING
 26

	)

129 
	#V_ASN1_GENERALSTRING
 27

	)

130 
	#V_ASN1_UNIVERSALSTRING
 28

	)

131 
	#V_ASN1_BMPSTRING
 30

	)

134 
	#B_ASN1_NUMERICSTRING
 0x0001

	)

135 
	#B_ASN1_PRINTABLESTRING
 0x0002

	)

136 
	#B_ASN1_T61STRING
 0x0004

	)

137 
	#B_ASN1_TELETEXSTRING
 0x0004

	)

138 
	#B_ASN1_VIDEOTEXSTRING
 0x0008

	)

139 
	#B_ASN1_IA5STRING
 0x0010

	)

140 
	#B_ASN1_GRAPHICSTRING
 0x0020

	)

141 
	#B_ASN1_ISO64STRING
 0x0040

	)

142 
	#B_ASN1_VISIBLESTRING
 0x0040

	)

143 
	#B_ASN1_GENERALSTRING
 0x0080

	)

144 
	#B_ASN1_UNIVERSALSTRING
 0x0100

	)

145 
	#B_ASN1_OCTET_STRING
 0x0200

	)

146 
	#B_ASN1_BIT_STRING
 0x0400

	)

147 
	#B_ASN1_BMPSTRING
 0x0800

	)

148 
	#B_ASN1_UNKNOWN
 0x1000

	)

149 
	#B_ASN1_UTF8STRING
 0x2000

	)

150 
	#B_ASN1_UTCTIME
 0x4000

	)

151 
	#B_ASN1_GENERALIZEDTIME
 0x8000

	)

152 
	#B_ASN1_SEQUENCE
 0x10000

	)

155 
	#MBSTRING_FLAG
 0x1000

	)

156 
	#MBSTRING_UTF8
 (
MBSTRING_FLAG
)

	)

157 
	#MBSTRING_ASC
 (
MBSTRING_FLAG
|1)

	)

158 
	#MBSTRING_BMP
 (
MBSTRING_FLAG
|2)

	)

159 
	#MBSTRING_UNIV
 (
MBSTRING_FLAG
|4)

	)

161 
	#SMIME_OLDMIME
 0x400

	)

162 
	#SMIME_CRLFEOL
 0x800

	)

163 
	#SMIME_STREAM
 0x1000

	)

165 
X509_Æg‹_°
;

166 
DECLARE_STACK_OF
(
X509_ALGOR
)

168 
	#DECLARE_ASN1_SET_OF
(
ty≥
Ë

	)

169 
	#IMPLEMENT_ASN1_SET_OF
(
ty≥
Ë

	)

175 
	sa¢1_˘x_°


177 *
p
;

178 
eos
;

179 
îr‹
;

180 
öf
;

181 
èg
;

182 
x˛ass
;

183 
¶í
;

184 *
max
;

185 *
q
;

186 **
µ
;

187 
löe
;

188 } 
	tASN1_CTX
;

190 
	sa¢1_c⁄°_˘x_°


192 c⁄° *
p
;

193 
eos
;

194 
îr‹
;

195 
öf
;

196 
èg
;

197 
x˛ass
;

198 
¶í
;

199 c⁄° *
max
;

200 c⁄° *
q
;

201 c⁄° **
µ
;

202 
löe
;

203 } 
	tASN1_c⁄°_CTX
;

207 
	#ASN1_OBJECT_FLAG_DYNAMIC
 0x01

	)

208 
	#ASN1_OBJECT_FLAG_CRITICAL
 0x02

	)

209 
	#ASN1_OBJECT_FLAG_DYNAMIC_STRINGS
 0x04

	)

210 
	#ASN1_OBJECT_FLAG_DYNAMIC_DATA
 0x08

	)

211 
	sa¢1_obje˘_°


213 c⁄° *
¢
,*
 
;

214 
nid
;

215 
Àngth
;

216 *
d©a
;

217 
Êags
;

218 } 
	tASN1_OBJECT
;

220 
	#ASN1_STRING_FLAG_BITS_LEFT
 0x08

	)

225 
	#ASN1_STRING_FLAG_NDEF
 0x010

	)

231 
	#ASN1_STRING_FLAG_CONT
 0x020

	)

234 
	sa¢1_°rög_°


236 
Àngth
;

237 
ty≥
;

238 *
d©a
;

243 
Êags
;

244 } 
	tASN1_STRING
;

251 
	sASN1_ENCODING_°


253 *
íc
;

254 
Àn
;

255 
modifõd
;

256 } 
	tASN1_ENCODING
;

259 
	#ASN1_LONG_UNDEF
 0x7fffffffL

	)

261 
	#STABLE_FLAGS_MALLOC
 0x01

	)

262 
	#STABLE_NO_MASK
 0x02

	)

263 
	#DIRSTRING_TYPE
 \

264 (
B_ASN1_PRINTABLESTRING
|
B_ASN1_T61STRING
|
B_ASN1_BMPSTRING
|
B_ASN1_UTF8STRING
)

	)

265 
	#PKCS9STRING_TYPE
 (
DIRSTRING_TYPE
|
B_ASN1_IA5STRING
)

	)

267 
	sa¢1_°rög_èbÀ_°
 {

268 
nid
;

269 
mösize
;

270 
maxsize
;

271 
mask
;

272 
Êags
;

273 } 
	tASN1_STRING_TABLE
;

275 
DECLARE_STACK_OF
(
ASN1_STRING_TABLE
)

279 
	#ub_«me
 32768

	)

280 
	#ub_comm⁄_«me
 64

	)

281 
	#ub_loˇlôy_«me
 128

	)

282 
	#ub_°©e_«me
 128

	)

283 
	#ub_‹g™iz©i⁄_«me
 64

	)

284 
	#ub_‹g™iz©i⁄_unô_«me
 64

	)

285 
	#ub_tôÀ
 64

	)

286 
	#ub_emaû_addªss
 128

	)

291 
ASN1_TEMPLATE_°
 
	tASN1_TEMPLATE
;

292 
ASN1_ITEM_°
 
	tASN1_ITEM
;

293 
ASN1_TLC_°
 
	tASN1_TLC
;

295 
ASN1_VALUE_°
 
	tASN1_VALUE
;

299 
	#DECLARE_ASN1_FUNCTIONS
(
ty≥
Ë
	`DECLARE_ASN1_FUNCTIONS_«me
—y≥,Åy≥)

	)

301 
	#DECLARE_ASN1_ALLOC_FUNCTIONS
(
ty≥
) \

302 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
,Åy≥)

	)

304 
	#DECLARE_ASN1_FUNCTIONS_«me
(
ty≥
, 
«me
) \

305 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

306 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
«me
,Çame)

	)

308 
	#DECLARE_ASN1_FUNCTIONS_‚ame
(
ty≥
, 
ô«me
, 
«me
) \

309 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

310 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
)

	)

312 
	#DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
) \

313 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

314 
i2d_
##
	`«me
(
ty≥
 *
a
, **
out
); \

315 
	`DECLARE_ASN1_ITEM
(
ô«me
)

	)

317 
	#DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ty≥
, 
«me
) \

318 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

319 
i2d_
##
	`«me
(c⁄° 
ty≥
 *
a
, **
out
); \

320 
	`DECLARE_ASN1_ITEM
(
«me
)

	)

322 
	#DECLARE_ASN1_NDEF_FUNCTION
(
«me
) \

323 
i2d_
##
«me
##
	`_NDEF
“amê*
a
, **
out
);

	)

325 
	#DECLARE_ASN1_FUNCTIONS_c⁄°
(
«me
) \

326 
	`DECLARE_ASN1_ALLOC_FUNCTIONS
(
«me
) \

327 
	`DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
«me
,Çame)

	)

329 
	#DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

330 
ty≥
 *
«me
##
	`_√w
(); \

331 
«me
##
	`_‰ì
(
ty≥
 *
a
);

	)

333 
	#D2I_OF
(
ty≥
Ëty≥ *(*)—y≥ **,c⁄° **,)

	)

334 
	#I2D_OF
(
ty≥
Ë(*)—y≥ *,**)

	)

335 
	#I2D_OF_c⁄°
(
ty≥
Ë(*)(c⁄°Åy≥ *,**)

	)

337 
	#CHECKED_D2I_OF
(
ty≥
, 
d2i
) \

338 ((
d2i_of_void
*Ë(1 ? 
d2i
 : ((
	`D2I_OF
(
ty≥
))0)))

	)

339 
	#CHECKED_I2D_OF
(
ty≥
, 
i2d
) \

340 ((
i2d_of_void
*Ë(1 ? 
i2d
 : ((
	`I2D_OF
(
ty≥
))0)))

	)

341 
	#CHECKED_NEW_OF
(
ty≥
, 
x√w
) \

342 ((*(*)()Ë(1 ? 
x√w
 : ((
ty≥
 *(*)())0)))

	)

343 
	#CHECKED_PTR_OF
(
ty≥
, 
p
) \

344 ((*Ë(1 ? 
p
 : (
ty≥
*)0))

	)

345 
	#CHECKED_PPTR_OF
(
ty≥
, 
p
) \

346 ((**Ë(1 ? 
p
 : (
ty≥
**)0))

	)

347 
	#CHECKED_PTR_OF_TO_CHAR
(
ty≥
, 
p
) \

348 ((*Ë(1 ? 
p
 : (
ty≥
*)0))

	)

350 
	#TYPEDEF_D2I_OF
(
ty≥
Ëty≥ *
	td2i_of_
##
	tty≥
—y≥ **,c⁄° **,)

	)

351 
	tTYPEDEF_I2D_OF
(
	tty≥
Ë
	ti2d_of_
##ty≥—y≥ *,**)

	)

352 
	tTYPEDEF_D2I2D_OF
(
	tty≥
Ë
	tTYPEDEF_D2I_OF
—y≥); 
	`TYPEDEF_I2D_OF
(
ty≥
)

	)

354 
TYPEDEF_D2I2D_OF
();

391 #i‚de‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


394 c⁄° 
	tASN1_ITEM
 
	tASN1_ITEM_EXP
;

397 
	#ASN1_ITEM_±r
(
ùå
Ë(ùå)

	)

400 
	#ASN1_ITEM_ªf
(
ùå
Ë(&(ùå##
_ô
))

	)

402 
	#ASN1_ITEM_Ωå
(
ªf
Ë(&‘ef##
_ô
))

	)

404 
	#DECLARE_ASN1_ITEM
(
«me
) \

405 
OPENSSL_EXTERN
 c⁄° 
ASN1_ITEM
 
«me
##
_ô
;

	)

414 c⁄° 
	tASN1_ITEM
 * 
	tASN1_ITEM_EXP
();

417 
	#ASN1_ITEM_±r
(
ùå
Ë(
	`ùå
())

	)

420 
	#ASN1_ITEM_ªf
(
ùå
Ë(ùå##
_ô
)

	)

422 
	#ASN1_ITEM_Ωå
(
ªf
Ë‘ef##
	`_ô
())

	)

424 
	#DECLARE_ASN1_ITEM
(
«me
) \

425 c⁄° 
ASN1_ITEM
 * 
«me
##
	`_ô
();

	)

436 
	#ASN1_STRFLGS_ESC_2253
 1

	)

437 
	#ASN1_STRFLGS_ESC_CTRL
 2

	)

438 
	#ASN1_STRFLGS_ESC_MSB
 4

	)

446 
	#ASN1_STRFLGS_ESC_QUOTE
 8

	)

452 
	#CHARTYPE_PRINTABLESTRING
 0x10

	)

454 
	#CHARTYPE_FIRST_ESC_2253
 0x20

	)

456 
	#CHARTYPE_LAST_ESC_2253
 0x40

	)

466 
	#ASN1_STRFLGS_UTF8_CONVERT
 0x10

	)

473 
	#ASN1_STRFLGS_IGNORE_TYPE
 0x20

	)

476 
	#ASN1_STRFLGS_SHOW_TYPE
 0x40

	)

486 
	#ASN1_STRFLGS_DUMP_ALL
 0x80

	)

487 
	#ASN1_STRFLGS_DUMP_UNKNOWN
 0x100

	)

494 
	#ASN1_STRFLGS_DUMP_DER
 0x200

	)

501 
	#ASN1_STRFLGS_RFC2253
 (
ASN1_STRFLGS_ESC_2253
 | \

502 
ASN1_STRFLGS_ESC_CTRL
 | \

503 
ASN1_STRFLGS_ESC_MSB
 | \

504 
ASN1_STRFLGS_UTF8_CONVERT
 | \

505 
ASN1_STRFLGS_DUMP_UNKNOWN
 | \

506 
ASN1_STRFLGS_DUMP_DER
)

	)

508 
DECLARE_STACK_OF
(
ASN1_INTEGER
)

509 
DECLARE_ASN1_SET_OF
(
ASN1_INTEGER
)

511 
DECLARE_STACK_OF
(
ASN1_GENERALSTRING
)

513 
	sa¢1_ty≥_°


515 
ty≥
;

517 *
±r
;

518 
ASN1_BOOLEAN
 
boﬁón
;

519 
ASN1_STRING
 * 
a¢1_°rög
;

520 
ASN1_OBJECT
 * 
obje˘
;

521 
ASN1_INTEGER
 * 
öãgî
;

522 
ASN1_ENUMERATED
 * 
íumî©ed
;

523 
ASN1_BIT_STRING
 * 
bô_°rög
;

524 
ASN1_OCTET_STRING
 * 
o˘ë_°rög
;

525 
ASN1_PRINTABLESTRING
 * 
¥öèbÀ°rög
;

526 
ASN1_T61STRING
 * 
t61°rög
;

527 
ASN1_IA5STRING
 * 
ü5°rög
;

528 
ASN1_GENERALSTRING
 * 
gíîÆ°rög
;

529 
ASN1_BMPSTRING
 * 
bmp°rög
;

530 
ASN1_UNIVERSALSTRING
 * 
univîßl°rög
;

531 
ASN1_UTCTIME
 * 
ut˘ime
;

532 
ASN1_GENERALIZEDTIME
 * 
gíîÆizedtime
;

533 
ASN1_VISIBLESTRING
 * 
visibÀ°rög
;

534 
ASN1_UTF8STRING
 * 
utf8°rög
;

537 
ASN1_STRING
 * 
£t
;

538 
ASN1_STRING
 * 
£quí˚
;

539 
ASN1_VALUE
 * 
a¢1_vÆue
;

540 } 
vÆue
;

541 } 
	tASN1_TYPE
;

543 
DECLARE_STACK_OF
(
ASN1_TYPE
)

544 
DECLARE_ASN1_SET_OF
(
ASN1_TYPE
)

546 
	sa¢1_mëhod_°


548 
i2d_of_void
 *
i2d
;

549 
d2i_of_void
 *
d2i
;

550 *(*
¸óã
)();

551 (*
de°roy
)(*);

552 } 
	tASN1_METHOD
;

555 
	sa¢1_hódî_°


557 
ASN1_OCTET_STRING
 *
hódî
;

558 *
d©a
;

559 
ASN1_METHOD
 *
mëh
;

560 } 
	tASN1_HEADER
;

563 
	sBIT_STRING_BITNAME_°
 {

564 
bônum
;

565 c⁄° *
 ame
;

566 c⁄° *
¢ame
;

567 } 
	tBIT_STRING_BITNAME
;

570 
	#M_ASN1_STRING_Àngth
(
x
Ë((x)->
Àngth
)

	)

571 
	#M_ASN1_STRING_Àngth_£t
(
x
, 
n
Ë((x)->
Àngth
 = (n))

	)

572 
	#M_ASN1_STRING_ty≥
(
x
Ë((x)->
ty≥
)

	)

573 
	#M_ASN1_STRING_d©a
(
x
Ë((x)->
d©a
)

	)

576 
	#M_ASN1_BIT_STRING_√w
(Ë(
ASN1_BIT_STRING
 *)\

577 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_BIT_STRING
)

	)

578 
	#M_ASN1_BIT_STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

579 
	#M_ASN1_BIT_STRING_dup
(
a
Ë(
ASN1_BIT_STRING
 *)\

580 
	`ASN1_STRING_dup
((
ASN1_STRING
 *)
a
)

	)

581 
	#M_ASN1_BIT_STRING_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

582 (
ASN1_STRING
 *)
a
,(ASN1_STRING *)
b
)

	)

583 
	#M_ASN1_BIT_STRING_£t
(
a
,
b
,
c
Ë
	`ASN1_STRING_£t
((
ASN1_STRING
 *Ô,b,c)

	)

585 
	#M_ASN1_INTEGER_√w
(Ë(
ASN1_INTEGER
 *)\

586 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_INTEGER
)

	)

587 
	#M_ASN1_INTEGER_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

588 
	#M_ASN1_INTEGER_dup
(
a
Ë(
ASN1_INTEGER
 *)
	`ASN1_STRING_dup
((
ASN1_STRING
 *Ô)

	)

589 
	#M_ASN1_INTEGER_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

590 (
ASN1_STRING
 *)
a
,(ASN1_STRING *)
b
)

	)

592 
	#M_ASN1_ENUMERATED_√w
(Ë(
ASN1_ENUMERATED
 *)\

593 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_ENUMERATED
)

	)

594 
	#M_ASN1_ENUMERATED_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

595 
	#M_ASN1_ENUMERATED_dup
(
a
Ë(
ASN1_ENUMERATED
 *)
	`ASN1_STRING_dup
((
ASN1_STRING
 *Ô)

	)

596 
	#M_ASN1_ENUMERATED_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

597 (
ASN1_STRING
 *)
a
,(ASN1_STRING *)
b
)

	)

599 
	#M_ASN1_OCTET_STRING_√w
(Ë(
ASN1_OCTET_STRING
 *)\

600 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_OCTET_STRING
)

	)

601 
	#M_ASN1_OCTET_STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

602 
	#M_ASN1_OCTET_STRING_dup
(
a
Ë(
ASN1_OCTET_STRING
 *)\

603 
	`ASN1_STRING_dup
((
ASN1_STRING
 *)
a
)

	)

604 
	#M_ASN1_OCTET_STRING_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

605 (
ASN1_STRING
 *)
a
,(ASN1_STRING *)
b
)

	)

606 
	#M_ASN1_OCTET_STRING_£t
(
a
,
b
,
c
Ë
	`ASN1_STRING_£t
((
ASN1_STRING
 *Ô,b,c)

	)

607 
	#M_ASN1_OCTET_STRING_¥öt
(
a
,
b
Ë
	`ASN1_STRING_¥öt
◊,(
ASN1_STRING
 *)b)

	)

608 
	#M_i2d_ASN1_OCTET_STRING
(
a
,
µ
) \

609 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_OCTET_STRING
,\

610 
V_ASN1_UNIVERSAL
)

	)

612 
	#B_ASN1_TIME
 \

613 
B_ASN1_UTCTIME
 | \

614 
B_ASN1_GENERALIZEDTIME


	)

616 
	#B_ASN1_PRINTABLE
 \

617 
B_ASN1_NUMERICSTRING
| \

618 
B_ASN1_PRINTABLESTRING
| \

619 
B_ASN1_T61STRING
| \

620 
B_ASN1_IA5STRING
| \

621 
B_ASN1_BIT_STRING
| \

622 
B_ASN1_UNIVERSALSTRING
|\

623 
B_ASN1_BMPSTRING
|\

624 
B_ASN1_UTF8STRING
|\

625 
B_ASN1_SEQUENCE
|\

626 
B_ASN1_UNKNOWN


	)

628 
	#B_ASN1_DIRECTORYSTRING
 \

629 
B_ASN1_PRINTABLESTRING
| \

630 
B_ASN1_TELETEXSTRING
|\

631 
B_ASN1_BMPSTRING
|\

632 
B_ASN1_UNIVERSALSTRING
|\

633 
B_ASN1_UTF8STRING


	)

635 
	#B_ASN1_DISPLAYTEXT
 \

636 
B_ASN1_IA5STRING
| \

637 
B_ASN1_VISIBLESTRING
| \

638 
B_ASN1_BMPSTRING
|\

639 
B_ASN1_UTF8STRING


	)

641 
	#M_ASN1_PRINTABLE_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_T61STRING
)

	)

642 
	#M_ASN1_PRINTABLE_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

643 
	#M_i2d_ASN1_PRINTABLE
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

644 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

645 
	#M_d2i_ASN1_PRINTABLE
(
a
,
µ
,
l
) \

646 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

647 
B_ASN1_PRINTABLE
)

	)

649 
	#M_DIRECTORYSTRING_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_PRINTABLESTRING
)

	)

650 
	#M_DIRECTORYSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

651 
	#M_i2d_DIRECTORYSTRING
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

652 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

653 
	#M_d2i_DIRECTORYSTRING
(
a
,
µ
,
l
) \

654 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

655 
B_ASN1_DIRECTORYSTRING
)

	)

657 
	#M_DISPLAYTEXT_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_VISIBLESTRING
)

	)

658 
	#M_DISPLAYTEXT_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

659 
	#M_i2d_DISPLAYTEXT
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

660 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

661 
	#M_d2i_DISPLAYTEXT
(
a
,
µ
,
l
) \

662 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

663 
B_ASN1_DISPLAYTEXT
)

	)

665 
	#M_ASN1_PRINTABLESTRING_√w
(Ë(
ASN1_PRINTABLESTRING
 *)\

666 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_PRINTABLESTRING
)

	)

667 
	#M_ASN1_PRINTABLESTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

668 
	#M_i2d_ASN1_PRINTABLESTRING
(
a
,
µ
) \

669 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_PRINTABLESTRING
,\

670 
V_ASN1_UNIVERSAL
)

	)

671 
	#M_d2i_ASN1_PRINTABLESTRING
(
a
,
µ
,
l
) \

672 (
ASN1_PRINTABLESTRING
 *)
d2i_ASN1_ty≥_byãs
\

673 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_PRINTABLESTRING
)

	)

675 
	#M_ASN1_T61STRING_√w
(Ë(
ASN1_T61STRING
 *)\

676 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_T61STRING
)

	)

677 
	#M_ASN1_T61STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

678 
	#M_i2d_ASN1_T61STRING
(
a
,
µ
) \

679 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_T61STRING
,\

680 
V_ASN1_UNIVERSAL
)

	)

681 
	#M_d2i_ASN1_T61STRING
(
a
,
µ
,
l
) \

682 (
ASN1_T61STRING
 *)
d2i_ASN1_ty≥_byãs
\

683 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_T61STRING
)

	)

685 
	#M_ASN1_IA5STRING_√w
(Ë(
ASN1_IA5STRING
 *)\

686 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_IA5STRING
)

	)

687 
	#M_ASN1_IA5STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

688 
	#M_ASN1_IA5STRING_dup
(
a
) \

689 (
ASN1_IA5STRING
 *)
	`ASN1_STRING_dup
((
ASN1_STRING
 *)
a
)

	)

690 
	#M_i2d_ASN1_IA5STRING
(
a
,
µ
) \

691 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_IA5STRING
,\

692 
V_ASN1_UNIVERSAL
)

	)

693 
	#M_d2i_ASN1_IA5STRING
(
a
,
µ
,
l
) \

694 (
ASN1_IA5STRING
 *)
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
,\

695 
B_ASN1_IA5STRING
)

	)

697 
	#M_ASN1_UTCTIME_√w
(Ë(
ASN1_UTCTIME
 *)\

698 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTCTIME
)

	)

699 
	#M_ASN1_UTCTIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

700 
	#M_ASN1_UTCTIME_dup
(
a
Ë(
ASN1_UTCTIME
 *)
	`ASN1_STRING_dup
((
ASN1_STRING
 *Ô)

	)

702 
	#M_ASN1_GENERALIZEDTIME_√w
(Ë(
ASN1_GENERALIZEDTIME
 *)\

703 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_GENERALIZEDTIME
)

	)

704 
	#M_ASN1_GENERALIZEDTIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

705 
	#M_ASN1_GENERALIZEDTIME_dup
(
a
Ë(
ASN1_GENERALIZEDTIME
 *)
	`ASN1_STRING_dup
(\

706 (
ASN1_STRING
 *)
a
)

	)

708 
	#M_ASN1_TIME_√w
(Ë(
ASN1_TIME
 *)\

709 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTCTIME
)

	)

710 
	#M_ASN1_TIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

711 
	#M_ASN1_TIME_dup
(
a
Ë(
ASN1_TIME
 *)
	`ASN1_STRING_dup
((
ASN1_STRING
 *Ô)

	)

713 
	#M_ASN1_GENERALSTRING_√w
(Ë(
ASN1_GENERALSTRING
 *)\

714 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_GENERALSTRING
)

	)

715 
	#M_ASN1_GENERALSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

716 
	#M_i2d_ASN1_GENERALSTRING
(
a
,
µ
) \

717 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_GENERALSTRING
,\

718 
V_ASN1_UNIVERSAL
)

	)

719 
	#M_d2i_ASN1_GENERALSTRING
(
a
,
µ
,
l
) \

720 (
ASN1_GENERALSTRING
 *)
d2i_ASN1_ty≥_byãs
\

721 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_GENERALSTRING
)

	)

723 
	#M_ASN1_UNIVERSALSTRING_√w
(Ë(
ASN1_UNIVERSALSTRING
 *)\

724 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UNIVERSALSTRING
)

	)

725 
	#M_ASN1_UNIVERSALSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

726 
	#M_i2d_ASN1_UNIVERSALSTRING
(
a
,
µ
) \

727 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_UNIVERSALSTRING
,\

728 
V_ASN1_UNIVERSAL
)

	)

729 
	#M_d2i_ASN1_UNIVERSALSTRING
(
a
,
µ
,
l
) \

730 (
ASN1_UNIVERSALSTRING
 *)
d2i_ASN1_ty≥_byãs
\

731 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_UNIVERSALSTRING
)

	)

733 
	#M_ASN1_BMPSTRING_√w
(Ë(
ASN1_BMPSTRING
 *)\

734 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_BMPSTRING
)

	)

735 
	#M_ASN1_BMPSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

736 
	#M_i2d_ASN1_BMPSTRING
(
a
,
µ
) \

737 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_BMPSTRING
,\

738 
V_ASN1_UNIVERSAL
)

	)

739 
	#M_d2i_ASN1_BMPSTRING
(
a
,
µ
,
l
) \

740 (
ASN1_BMPSTRING
 *)
d2i_ASN1_ty≥_byãs
\

741 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_BMPSTRING
)

	)

743 
	#M_ASN1_VISIBLESTRING_√w
(Ë(
ASN1_VISIBLESTRING
 *)\

744 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_VISIBLESTRING
)

	)

745 
	#M_ASN1_VISIBLESTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

746 
	#M_i2d_ASN1_VISIBLESTRING
(
a
,
µ
) \

747 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_VISIBLESTRING
,\

748 
V_ASN1_UNIVERSAL
)

	)

749 
	#M_d2i_ASN1_VISIBLESTRING
(
a
,
µ
,
l
) \

750 (
ASN1_VISIBLESTRING
 *)
d2i_ASN1_ty≥_byãs
\

751 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_VISIBLESTRING
)

	)

753 
	#M_ASN1_UTF8STRING_√w
(Ë(
ASN1_UTF8STRING
 *)\

754 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTF8STRING
)

	)

755 
	#M_ASN1_UTF8STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

756 
	#M_i2d_ASN1_UTF8STRING
(
a
,
µ
) \

757 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_UTF8STRING
,\

758 
V_ASN1_UNIVERSAL
)

	)

759 
	#M_d2i_ASN1_UTF8STRING
(
a
,
µ
,
l
) \

760 (
ASN1_UTF8STRING
 *)
d2i_ASN1_ty≥_byãs
\

761 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_UTF8STRING
)

	)

764 
	#IS_SEQUENCE
 0

	)

765 
	#IS_SET
 1

	)

767 
DECLARE_ASN1_FUNCTIONS_‚ame
(
ASN1_TYPE
, 
ASN1_ANY
, ASN1_TYPE)

769 
ASN1_TYPE_gë
(
ASN1_TYPE
 *
a
);

770 
ASN1_TYPE_£t
(
ASN1_TYPE
 *
a
, 
ty≥
, *
vÆue
);

771 
ASN1_TYPE_£t1
(
ASN1_TYPE
 *
a
, 
ty≥
, c⁄° *
vÆue
);

773 
ASN1_OBJECT
 * 
ASN1_OBJECT_√w
();

774 
ASN1_OBJECT_‰ì
(
ASN1_OBJECT
 *
a
);

775 
i2d_ASN1_OBJECT
(
ASN1_OBJECT
 *
a
,**
µ
);

776 
ASN1_OBJECT
 * 
c2i_ASN1_OBJECT
(ASN1_OBJECT **
a
,c⁄° **
µ
,

777 
Àngth
);

778 
ASN1_OBJECT
 * 
d2i_ASN1_OBJECT
(ASN1_OBJECT **
a
,c⁄° **
µ
,

779 
Àngth
);

781 
DECLARE_ASN1_ITEM
(
ASN1_OBJECT
)

783 
DECLARE_STACK_OF
(
ASN1_OBJECT
)

784 
DECLARE_ASN1_SET_OF
(
ASN1_OBJECT
)

786 
ASN1_STRING
 * 
ASN1_STRING_√w
();

787 
ASN1_STRING_‰ì
(
ASN1_STRING
 *
a
);

788 
ASN1_STRING
 * 
ASN1_STRING_dup
(ASN1_STRING *
a
);

789 
ASN1_STRING
 * 
ASN1_STRING_ty≥_√w
(
ty≥
 );

790 
ASN1_STRING_cmp
(
ASN1_STRING
 *
a
, ASN1_STRING *
b
);

793 
ASN1_STRING_£t
(
ASN1_STRING
 *
°r
, c⁄° *
d©a
, 
Àn
);

794 
ASN1_STRING_£t0
(
ASN1_STRING
 *
°r
, *
d©a
, 
Àn
);

795 
ASN1_STRING_Àngth
(
ASN1_STRING
 *
x
);

796 
ASN1_STRING_Àngth_£t
(
ASN1_STRING
 *
x
, 
n
);

797 
ASN1_STRING_ty≥
(
ASN1_STRING
 *
x
);

798 * 
ASN1_STRING_d©a
(
ASN1_STRING
 *
x
);

800 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BIT_STRING
)

801 
i2c_ASN1_BIT_STRING
(
ASN1_BIT_STRING
 *
a
,**
µ
);

802 
ASN1_BIT_STRING
 *
c2i_ASN1_BIT_STRING
(ASN1_BIT_STRING **
a
,c⁄° **
µ
,

803 
Àngth
);

804 
ASN1_BIT_STRING_£t
(
ASN1_BIT_STRING
 *
a
, *
d
,

805 
Àngth
 );

806 
ASN1_BIT_STRING_£t_bô
(
ASN1_BIT_STRING
 *
a
, 
n
, 
vÆue
);

807 
ASN1_BIT_STRING_gë_bô
(
ASN1_BIT_STRING
 *
a
, 
n
);

809 #i‚de‡
OPENSSL_NO_BIO


810 
ASN1_BIT_STRING_«me_¥öt
(
BIO
 *
out
, 
ASN1_BIT_STRING
 *
bs
,

811 
BIT_STRING_BITNAME
 *
tbl
, 
ödít
);

813 
ASN1_BIT_STRING_num_asc
(*
«me
, 
BIT_STRING_BITNAME
 *
tbl
);

814 
ASN1_BIT_STRING_£t_asc
(
ASN1_BIT_STRING
 *
bs
, *
«me
, 
vÆue
,

815 
BIT_STRING_BITNAME
 *
tbl
);

817 
i2d_ASN1_BOOLEAN
(
a
,**
µ
);

818 
d2i_ASN1_BOOLEAN
(*
a
,c⁄° **
µ
,
Àngth
);

820 
DECLARE_ASN1_FUNCTIONS
(
ASN1_INTEGER
)

821 
i2c_ASN1_INTEGER
(
ASN1_INTEGER
 *
a
,**
µ
);

822 
ASN1_INTEGER
 *
c2i_ASN1_INTEGER
(ASN1_INTEGER **
a
,c⁄° **
µ
,

823 
Àngth
);

824 
ASN1_INTEGER
 *
d2i_ASN1_UINTEGER
(ASN1_INTEGER **
a
,c⁄° **
µ
,

825 
Àngth
);

826 
ASN1_INTEGER
 * 
ASN1_INTEGER_dup
(ASN1_INTEGER *
x
);

827 
ASN1_INTEGER_cmp
(
ASN1_INTEGER
 *
x
, ASN1_INTEGER *
y
);

829 
DECLARE_ASN1_FUNCTIONS
(
ASN1_ENUMERATED
)

831 
ASN1_UTCTIME_check
(
ASN1_UTCTIME
 *
a
);

832 
ASN1_UTCTIME
 *
ASN1_UTCTIME_£t
(ASN1_UTCTIME *
s
,
time_t
 
t
);

833 
ASN1_UTCTIME_£t_°rög
(
ASN1_UTCTIME
 *
s
, c⁄° *
°r
);

834 
ASN1_UTCTIME_cmp_time_t
(c⁄° 
ASN1_UTCTIME
 *
s
, 
time_t
 
t
);

836 
time_t
 
ASN1_UTCTIME_gë
(c⁄° 
ASN1_UTCTIME
 *
s
);

839 
ASN1_GENERALIZEDTIME_check
(
ASN1_GENERALIZEDTIME
 *
a
);

840 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_£t
(ASN1_GENERALIZEDTIME *
s
,
time_t
 
t
);

841 
ASN1_GENERALIZEDTIME_£t_°rög
(
ASN1_GENERALIZEDTIME
 *
s
, c⁄° *
°r
);

843 
DECLARE_ASN1_FUNCTIONS
(
ASN1_OCTET_STRING
)

844 
ASN1_OCTET_STRING
 * 
ASN1_OCTET_STRING_dup
(ASN1_OCTET_STRING *
a
);

845 
ASN1_OCTET_STRING_cmp
(
ASN1_OCTET_STRING
 *
a
, ASN1_OCTET_STRING *
b
);

846 
ASN1_OCTET_STRING_£t
(
ASN1_OCTET_STRING
 *
°r
, c⁄° *
d©a
, 
Àn
);

848 
DECLARE_ASN1_FUNCTIONS
(
ASN1_VISIBLESTRING
)

849 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UNIVERSALSTRING
)

850 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTF8STRING
)

851 
DECLARE_ASN1_FUNCTIONS
(
ASN1_NULL
)

852 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BMPSTRING
)

854 
UTF8_gëc
(c⁄° *
°r
, 
Àn
, *
vÆ
);

855 
UTF8_putc
(*
°r
, 
Àn
, 
vÆue
);

857 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
ASN1_PRINTABLE
)

859 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DIRECTORYSTRING
)

860 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DISPLAYTEXT
)

861 
DECLARE_ASN1_FUNCTIONS
(
ASN1_PRINTABLESTRING
)

862 
DECLARE_ASN1_FUNCTIONS
(
ASN1_T61STRING
)

863 
DECLARE_ASN1_FUNCTIONS
(
ASN1_IA5STRING
)

864 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALSTRING
)

865 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTCTIME
)

866 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALIZEDTIME
)

867 
DECLARE_ASN1_FUNCTIONS
(
ASN1_TIME
)

869 
DECLARE_ASN1_ITEM
(
ASN1_OCTET_STRING_NDEF
)

871 
ASN1_TIME
 *
ASN1_TIME_£t
(ASN1_TIME *
s
,
time_t
 
t
);

872 
ASN1_TIME_check
(
ASN1_TIME
 *
t
);

873 
ASN1_GENERALIZEDTIME
 *
ASN1_TIME_to_gíîÆizedtime
(
ASN1_TIME
 *
t
, ASN1_GENERALIZEDTIME **
out
);

875 
i2d_ASN1_SET
(
STACK
 *
a
, **
µ
,

876 
i2d_of_void
 *
i2d
, 
ex_èg
, 
ex_˛ass
, 
is_£t
);

877 
STACK
 * 
d2i_ASN1_SET
(STACK **
a
, c⁄° **
µ
, 
Àngth
,

878 
d2i_of_void
 *
d2i
, (*
‰ì_func
)(*),

879 
ex_èg
, 
ex_˛ass
);

881 #i‚de‡
OPENSSL_NO_BIO


882 
i2a_ASN1_INTEGER
(
BIO
 *
bp
, 
ASN1_INTEGER
 *
a
);

883 
a2i_ASN1_INTEGER
(
BIO
 *
bp
,
ASN1_INTEGER
 *
bs
,*
buf
,
size
);

884 
i2a_ASN1_ENUMERATED
(
BIO
 *
bp
, 
ASN1_ENUMERATED
 *
a
);

885 
a2i_ASN1_ENUMERATED
(
BIO
 *
bp
,
ASN1_ENUMERATED
 *
bs
,*
buf
,
size
);

886 
i2a_ASN1_OBJECT
(
BIO
 *
bp
,
ASN1_OBJECT
 *
a
);

887 
a2i_ASN1_STRING
(
BIO
 *
bp
,
ASN1_STRING
 *
bs
,*
buf
,
size
);

888 
i2a_ASN1_STRING
(
BIO
 *
bp
, 
ASN1_STRING
 *
a
, 
ty≥
);

890 
i2t_ASN1_OBJECT
(*
buf
,
buf_Àn
,
ASN1_OBJECT
 *
a
);

892 
a2d_ASN1_OBJECT
(*
out
,
ﬁí
, c⁄° *
buf
, 
num
);

893 
ASN1_OBJECT
 *
ASN1_OBJECT_¸óã
(
nid
, *
d©a
,
Àn
,

894 c⁄° *
¢
, c⁄° *
 
);

896 
ASN1_INTEGER_£t
(
ASN1_INTEGER
 *
a
, 
v
);

897 
ASN1_INTEGER_gë
(
ASN1_INTEGER
 *
a
);

898 
ASN1_INTEGER
 *
BN_to_ASN1_INTEGER
(
BIGNUM
 *
bn
, ASN1_INTEGER *
ai
);

899 
BIGNUM
 *
ASN1_INTEGER_to_BN
(
ASN1_INTEGER
 *
ai
,BIGNUM *
bn
);

901 
ASN1_ENUMERATED_£t
(
ASN1_ENUMERATED
 *
a
, 
v
);

902 
ASN1_ENUMERATED_gë
(
ASN1_ENUMERATED
 *
a
);

903 
ASN1_ENUMERATED
 *
BN_to_ASN1_ENUMERATED
(
BIGNUM
 *
bn
, ASN1_ENUMERATED *
ai
);

904 
BIGNUM
 *
ASN1_ENUMERATED_to_BN
(
ASN1_ENUMERATED
 *
ai
,BIGNUM *
bn
);

908 
ASN1_PRINTABLE_ty≥
(c⁄° *
s
, 
max
);

910 
i2d_ASN1_byãs
(
ASN1_STRING
 *
a
, **
µ
, 
èg
, 
x˛ass
);

911 
ASN1_STRING
 *
d2i_ASN1_byãs
(ASN1_STRING **
a
, c⁄° **
µ
,

912 
Àngth
, 
Pèg
, 
P˛ass
);

913 
ASN1_èg2bô
(
èg
);

915 
ASN1_STRING
 *
d2i_ASN1_ty≥_byãs
(ASN1_STRING **
a
,c⁄° **
µ
,

916 
Àngth
,
ty≥
);

919 
a¢1_Föish
(
ASN1_CTX
 *
c
);

920 
a¢1_c⁄°_Föish
(
ASN1_c⁄°_CTX
 *
c
);

923 
ASN1_gë_obje˘
(c⁄° **
µ
, *
∂ígth
, *
±ag
,

924 *
p˛ass
, 
omax
);

925 
ASN1_check_öföôe_íd
(**
p
,
Àn
);

926 
ASN1_c⁄°_check_öföôe_íd
(c⁄° **
p
,
Àn
);

927 
ASN1_put_obje˘
(**
µ
, 
c⁄°ru˘ed
, 
Àngth
,

928 
èg
, 
x˛ass
);

929 
ASN1_put_eoc
(**
µ
);

930 
ASN1_obje˘_size
(
c⁄°ru˘ed
, 
Àngth
, 
èg
);

933 *
ASN1_dup
(
i2d_of_void
 *
i2d
, 
d2i_of_void
 *
d2i
, *
x
);

935 
	#ASN1_dup_of
(
ty≥
,
i2d
,
d2i
,
x
) \

936 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
—y≥, 
i2d
), \

937 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

938 
	`CHECKED_PTR_OF_TO_CHAR
(
ty≥
, 
x
)))

	)

940 
	#ASN1_dup_of_c⁄°
(
ty≥
,
i2d
,
d2i
,
x
) \

941 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
(c⁄°Åy≥, 
i2d
), \

942 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

943 
	`CHECKED_PTR_OF_TO_CHAR
(c⁄° 
ty≥
, 
x
)))

	)

945 *
ASN1_ôem_dup
(c⁄° 
ASN1_ITEM
 *
ô
, *
x
);

949 
	#M_ASN1_√w_of
(
ty≥
Ë—y≥ *)
	`ASN1_ôem_√w
(
	`ASN1_ITEM_Ωå
—y≥))

	)

950 
	#M_ASN1_‰ì_of
(
x
, 
ty≥
) \

951 
	`ASN1_ôem_‰ì
(
	`CHECKED_PTR_OF
(
ty≥
, 
x
), 
	`ASN1_ITEM_Ωå
—y≥))

	)

953 #i‚de‡
OPENSSL_NO_FP_API


954 *
ASN1_d2i_Â
(*(*
x√w
)(), 
d2i_of_void
 *
d2i
, 
FILE
 *
ö
, **
x
);

956 
	#ASN1_d2i_Â_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

957 ((
ty≥
*)
	`ASN1_d2i_Â
(
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

958 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

959 
ö
, \

960 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

962 *
ASN1_ôem_d2i_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
ö
, *
x
);

963 
ASN1_i2d_Â
(
i2d_of_void
 *
i2d
,
FILE
 *
out
,*
x
);

965 
	#ASN1_i2d_Â_of
(
ty≥
,
i2d
,
out
,
x
) \

966 (
	`ASN1_i2d_Â
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

967 
out
, \

968 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

970 
	#ASN1_i2d_Â_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
) \

971 (
	`ASN1_i2d_Â
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d
), \

972 
out
, \

973 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

975 
ASN1_ôem_i2d_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
out
, *
x
);

976 
ASN1_STRING_¥öt_ex_Â
(
FILE
 *
Â
, 
ASN1_STRING
 *
°r
, 
Êags
);

979 
ASN1_STRING_to_UTF8
(**
out
, 
ASN1_STRING
 *
ö
);

981 #i‚de‡
OPENSSL_NO_BIO


982 *
ASN1_d2i_bio
(*(*
x√w
)(), 
d2i_of_void
 *
d2i
, 
BIO
 *
ö
, **
x
);

984 
	#ASN1_d2i_bio_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

985 ((
ty≥
*)
	`ASN1_d2i_bio
–
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

986 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

987 
ö
, \

988 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

990 *
ASN1_ôem_d2i_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
ö
, *
x
);

991 
ASN1_i2d_bio
(
i2d_of_void
 *
i2d
,
BIO
 *
out
, *
x
);

993 
	#ASN1_i2d_bio_of
(
ty≥
,
i2d
,
out
,
x
) \

994 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

995 
out
, \

996 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

998 
	#ASN1_i2d_bio_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
) \

999 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d
), \

1000 
out
, \

1001 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

1003 
ASN1_ôem_i2d_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
out
, *
x
);

1004 
ASN1_UTCTIME_¥öt
(
BIO
 *
Â
,
ASN1_UTCTIME
 *
a
);

1005 
ASN1_GENERALIZEDTIME_¥öt
(
BIO
 *
Â
,
ASN1_GENERALIZEDTIME
 *
a
);

1006 
ASN1_TIME_¥öt
(
BIO
 *
Â
,
ASN1_TIME
 *
a
);

1007 
ASN1_STRING_¥öt
(
BIO
 *
bp
,
ASN1_STRING
 *
v
);

1008 
ASN1_STRING_¥öt_ex
(
BIO
 *
out
, 
ASN1_STRING
 *
°r
, 
Êags
);

1009 
ASN1_∑r£
(
BIO
 *
bp
,c⁄° *
µ
,
Àn
,
ödít
);

1010 
ASN1_∑r£_dump
(
BIO
 *
bp
,c⁄° *
µ
,
Àn
,
ödít
,
dump
);

1012 c⁄° *
ASN1_èg2°r
(
èg
);

1015 
i2d_ASN1_HEADER
(
ASN1_HEADER
 *
a
,**
µ
);

1016 
ASN1_HEADER
 *
d2i_ASN1_HEADER
(ASN1_HEADER **
a
,c⁄° **
µ
, 
Àngth
);

1017 
ASN1_HEADER
 *
ASN1_HEADER_√w
();

1018 
ASN1_HEADER_‰ì
(
ASN1_HEADER
 *
a
);

1020 
ASN1_UNIVERSALSTRING_to_°rög
(
ASN1_UNIVERSALSTRING
 *
s
);

1023 
ASN1_METHOD
 *
X509_a¢1_mëh
();

1024 
ASN1_METHOD
 *
RSAPriv©eKey_a¢1_mëh
();

1025 
ASN1_METHOD
 *
ASN1_IA5STRING_a¢1_mëh
();

1026 
ASN1_METHOD
 *
ASN1_BIT_STRING_a¢1_mëh
();

1028 
ASN1_TYPE_£t_o˘ë°rög
(
ASN1_TYPE
 *
a
,

1029 *
d©a
, 
Àn
);

1030 
ASN1_TYPE_gë_o˘ë°rög
(
ASN1_TYPE
 *
a
,

1031 *
d©a
, 
max_Àn
);

1032 
ASN1_TYPE_£t_öt_o˘ë°rög
(
ASN1_TYPE
 *
a
, 
num
,

1033 *
d©a
, 
Àn
);

1034 
ASN1_TYPE_gë_öt_o˘ë°rög
(
ASN1_TYPE
 *
a
,*
num
,

1035 *
d©a
, 
max_Àn
);

1037 
STACK
 *
ASN1_£q_u≈ack
(c⁄° *
buf
, 
Àn
,

1038 
d2i_of_void
 *
d2i
, (*
‰ì_func
)(*));

1039 *
ASN1_£q_∑ck
(
STACK
 *
ß„s
, 
i2d_of_void
 *
i2d
,

1040 **
buf
, *
Àn
 );

1041 *
ASN1_u≈ack_°rög
(
ASN1_STRING
 *
o˘
, 
d2i_of_void
 *
d2i
);

1042 *
ASN1_ôem_u≈ack
(
ASN1_STRING
 *
o˘
, c⁄° 
ASN1_ITEM
 *
ô
);

1043 
ASN1_STRING
 *
ASN1_∑ck_°rög
(*
obj
, 
i2d_of_void
 *
i2d
,

1044 
ASN1_OCTET_STRING
 **
o˘
);

1046 
	#ASN1_∑ck_°rög_of
(
ty≥
,
obj
,
i2d
,
o˘
) \

1047 (
	`ASN1_∑ck_°rög
(
	`CHECKED_PTR_OF
(
ty≥
, 
obj
), \

1048 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

1049 
o˘
))

	)

1051 
ASN1_STRING
 *
ASN1_ôem_∑ck
(*
obj
, c⁄° 
ASN1_ITEM
 *
ô
, 
ASN1_OCTET_STRING
 **
o˘
);

1053 
ASN1_STRING_£t_deÁu…_mask
(
mask
);

1054 
ASN1_STRING_£t_deÁu…_mask_asc
(c⁄° *
p
);

1055 
ASN1_STRING_gë_deÁu…_mask
();

1056 
ASN1_mb°rög_c›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

1057 
öf‹m
, 
mask
);

1058 
ASN1_mb°rög_nc›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

1059 
öf‹m
, 
mask
,

1060 
mösize
, 
maxsize
);

1062 
ASN1_STRING
 *
ASN1_STRING_£t_by_NID
(ASN1_STRING **
out
,

1063 c⁄° *
ö
, 
öÀn
, 
öf‹m
, 
nid
);

1064 
ASN1_STRING_TABLE
 *
ASN1_STRING_TABLE_gë
(
nid
);

1065 
ASN1_STRING_TABLE_add
(, , , , );

1066 
ASN1_STRING_TABLE_˛ónup
();

1071 
ASN1_VALUE
 *
ASN1_ôem_√w
(c⁄° 
ASN1_ITEM
 *
ô
);

1072 
ASN1_ôem_‰ì
(
ASN1_VALUE
 *
vÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

1073 
ASN1_VALUE
 * 
ASN1_ôem_d2i
(ASN1_VALUE **
vÆ
, c⁄° **
ö
, 
Àn
, c⁄° 
ASN1_ITEM
 *
ô
);

1074 
ASN1_ôem_i2d
(
ASN1_VALUE
 *
vÆ
, **
out
, c⁄° 
ASN1_ITEM
 *
ô
);

1075 
ASN1_ôem_ndef_i2d
(
ASN1_VALUE
 *
vÆ
, **
out
, c⁄° 
ASN1_ITEM
 *
ô
);

1077 
ASN1_add_oid_moduÀ
();

1079 
ASN1_TYPE
 *
ASN1_gíî©e_nc⁄f
(*
°r
, 
CONF
 *
nc⁄f
);

1080 
ASN1_TYPE
 *
ASN1_gíî©e_v3
(*
°r
, 
X509V3_CTX
 *
˙f
);

1082 
	ta¢1_ouçut_d©a_‚
(
	tBIO
 *
	tout
, BIO *
	td©a
, 
	tASN1_VALUE
 *
	tvÆ
, 
	tÊags
,

1083 c⁄° 
	tASN1_ITEM
 *
	tô
);

1085 
öt_smime_wrôe_ASN1
(
BIO
 *
bio
, 
ASN1_VALUE
 *
vÆ
, BIO *
d©a
, 
Êags
,

1086 
˘y≥_nid
, 
ec⁄t_nid
,

1087 
STACK_OF
(
X509_ALGOR
Ë*
mdÆgs
,

1088 
a¢1_ouçut_d©a_‚
 *
d©a_‚
,

1089 c⁄° 
ASN1_ITEM
 *
ô
);

1090 
ASN1_VALUE
 *
SMIME_ªad_ASN1
(
BIO
 *
bio
, BIO **
bc⁄t
, c⁄° 
ASN1_ITEM
 *
ô
);

1096 
ERR_lﬂd_ASN1_°rögs
();

1101 
	#ASN1_F_A2D_ASN1_OBJECT
 100

	)

1102 
	#ASN1_F_A2I_ASN1_ENUMERATED
 101

	)

1103 
	#ASN1_F_A2I_ASN1_INTEGER
 102

	)

1104 
	#ASN1_F_A2I_ASN1_STRING
 103

	)

1105 
	#ASN1_F_APPEND_EXP
 176

	)

1106 
	#ASN1_F_ASN1_BIT_STRING_SET_BIT
 183

	)

1107 
	#ASN1_F_ASN1_CB
 177

	)

1108 
	#ASN1_F_ASN1_CHECK_TLEN
 104

	)

1109 
	#ASN1_F_ASN1_COLLATE_PRIMITIVE
 105

	)

1110 
	#ASN1_F_ASN1_COLLECT
 106

	)

1111 
	#ASN1_F_ASN1_D2I_EX_PRIMITIVE
 108

	)

1112 
	#ASN1_F_ASN1_D2I_FP
 109

	)

1113 
	#ASN1_F_ASN1_D2I_READ_BIO
 107

	)

1114 
	#ASN1_F_ASN1_DIGEST
 184

	)

1115 
	#ASN1_F_ASN1_DO_ADB
 110

	)

1116 
	#ASN1_F_ASN1_DUP
 111

	)

1117 
	#ASN1_F_ASN1_ENUMERATED_SET
 112

	)

1118 
	#ASN1_F_ASN1_ENUMERATED_TO_BN
 113

	)

1119 
	#ASN1_F_ASN1_EX_C2I
 204

	)

1120 
	#ASN1_F_ASN1_FIND_END
 190

	)

1121 
	#ASN1_F_ASN1_GENERALIZEDTIME_SET
 185

	)

1122 
	#ASN1_F_ASN1_GENERATE_V3
 178

	)

1123 
	#ASN1_F_ASN1_GET_OBJECT
 114

	)

1124 
	#ASN1_F_ASN1_HEADER_NEW
 115

	)

1125 
	#ASN1_F_ASN1_I2D_BIO
 116

	)

1126 
	#ASN1_F_ASN1_I2D_FP
 117

	)

1127 
	#ASN1_F_ASN1_INTEGER_SET
 118

	)

1128 
	#ASN1_F_ASN1_INTEGER_TO_BN
 119

	)

1129 
	#ASN1_F_ASN1_ITEM_D2I_FP
 206

	)

1130 
	#ASN1_F_ASN1_ITEM_DUP
 191

	)

1131 
	#ASN1_F_ASN1_ITEM_EX_COMBINE_NEW
 121

	)

1132 
	#ASN1_F_ASN1_ITEM_EX_D2I
 120

	)

1133 
	#ASN1_F_ASN1_ITEM_I2D_BIO
 192

	)

1134 
	#ASN1_F_ASN1_ITEM_I2D_FP
 193

	)

1135 
	#ASN1_F_ASN1_ITEM_PACK
 198

	)

1136 
	#ASN1_F_ASN1_ITEM_SIGN
 195

	)

1137 
	#ASN1_F_ASN1_ITEM_UNPACK
 199

	)

1138 
	#ASN1_F_ASN1_ITEM_VERIFY
 197

	)

1139 
	#ASN1_F_ASN1_MBSTRING_NCOPY
 122

	)

1140 
	#ASN1_F_ASN1_OBJECT_NEW
 123

	)

1141 
	#ASN1_F_ASN1_OUTPUT_DATA
 207

	)

1142 
	#ASN1_F_ASN1_PACK_STRING
 124

	)

1143 
	#ASN1_F_ASN1_PCTX_NEW
 205

	)

1144 
	#ASN1_F_ASN1_PKCS5_PBE_SET
 125

	)

1145 
	#ASN1_F_ASN1_SEQ_PACK
 126

	)

1146 
	#ASN1_F_ASN1_SEQ_UNPACK
 127

	)

1147 
	#ASN1_F_ASN1_SIGN
 128

	)

1148 
	#ASN1_F_ASN1_STR2TYPE
 179

	)

1149 
	#ASN1_F_ASN1_STRING_SET
 186

	)

1150 
	#ASN1_F_ASN1_STRING_TABLE_ADD
 129

	)

1151 
	#ASN1_F_ASN1_STRING_TYPE_NEW
 130

	)

1152 
	#ASN1_F_ASN1_TEMPLATE_EX_D2I
 132

	)

1153 
	#ASN1_F_ASN1_TEMPLATE_NEW
 133

	)

1154 
	#ASN1_F_ASN1_TEMPLATE_NOEXP_D2I
 131

	)

1155 
	#ASN1_F_ASN1_TIME_SET
 175

	)

1156 
	#ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING
 134

	)

1157 
	#ASN1_F_ASN1_TYPE_GET_OCTETSTRING
 135

	)

1158 
	#ASN1_F_ASN1_UNPACK_STRING
 136

	)

1159 
	#ASN1_F_ASN1_UTCTIME_SET
 187

	)

1160 
	#ASN1_F_ASN1_VERIFY
 137

	)

1161 
	#ASN1_F_B64_READ_ASN1
 208

	)

1162 
	#ASN1_F_B64_WRITE_ASN1
 209

	)

1163 
	#ASN1_F_BITSTR_CB
 180

	)

1164 
	#ASN1_F_BN_TO_ASN1_ENUMERATED
 138

	)

1165 
	#ASN1_F_BN_TO_ASN1_INTEGER
 139

	)

1166 
	#ASN1_F_C2I_ASN1_BIT_STRING
 189

	)

1167 
	#ASN1_F_C2I_ASN1_INTEGER
 194

	)

1168 
	#ASN1_F_C2I_ASN1_OBJECT
 196

	)

1169 
	#ASN1_F_COLLECT_DATA
 140

	)

1170 
	#ASN1_F_D2I_ASN1_BIT_STRING
 141

	)

1171 
	#ASN1_F_D2I_ASN1_BOOLEAN
 142

	)

1172 
	#ASN1_F_D2I_ASN1_BYTES
 143

	)

1173 
	#ASN1_F_D2I_ASN1_GENERALIZEDTIME
 144

	)

1174 
	#ASN1_F_D2I_ASN1_HEADER
 145

	)

1175 
	#ASN1_F_D2I_ASN1_INTEGER
 146

	)

1176 
	#ASN1_F_D2I_ASN1_OBJECT
 147

	)

1177 
	#ASN1_F_D2I_ASN1_SET
 148

	)

1178 
	#ASN1_F_D2I_ASN1_TYPE_BYTES
 149

	)

1179 
	#ASN1_F_D2I_ASN1_UINTEGER
 150

	)

1180 
	#ASN1_F_D2I_ASN1_UTCTIME
 151

	)

1181 
	#ASN1_F_D2I_NETSCAPE_RSA
 152

	)

1182 
	#ASN1_F_D2I_NETSCAPE_RSA_2
 153

	)

1183 
	#ASN1_F_D2I_PRIVATEKEY
 154

	)

1184 
	#ASN1_F_D2I_PUBLICKEY
 155

	)

1185 
	#ASN1_F_D2I_RSA_NET
 200

	)

1186 
	#ASN1_F_D2I_RSA_NET_2
 201

	)

1187 
	#ASN1_F_D2I_X509
 156

	)

1188 
	#ASN1_F_D2I_X509_CINF
 157

	)

1189 
	#ASN1_F_D2I_X509_PKEY
 159

	)

1190 
	#ASN1_F_I2D_ASN1_SET
 188

	)

1191 
	#ASN1_F_I2D_ASN1_TIME
 160

	)

1192 
	#ASN1_F_I2D_DSA_PUBKEY
 161

	)

1193 
	#ASN1_F_I2D_EC_PUBKEY
 181

	)

1194 
	#ASN1_F_I2D_PRIVATEKEY
 163

	)

1195 
	#ASN1_F_I2D_PUBLICKEY
 164

	)

1196 
	#ASN1_F_I2D_RSA_NET
 162

	)

1197 
	#ASN1_F_I2D_RSA_PUBKEY
 165

	)

1198 
	#ASN1_F_LONG_C2I
 166

	)

1199 
	#ASN1_F_OID_MODULE_INIT
 174

	)

1200 
	#ASN1_F_PARSE_TAGGING
 182

	)

1201 
	#ASN1_F_PKCS5_PBE2_SET
 167

	)

1202 
	#ASN1_F_PKCS5_PBE_SET
 202

	)

1203 
	#ASN1_F_SMIME_READ_ASN1
 210

	)

1204 
	#ASN1_F_SMIME_TEXT
 211

	)

1205 
	#ASN1_F_X509_CINF_NEW
 168

	)

1206 
	#ASN1_F_X509_CRL_ADD0_REVOKED
 169

	)

1207 
	#ASN1_F_X509_INFO_NEW
 170

	)

1208 
	#ASN1_F_X509_NAME_ENCODE
 203

	)

1209 
	#ASN1_F_X509_NAME_EX_D2I
 158

	)

1210 
	#ASN1_F_X509_NAME_EX_NEW
 171

	)

1211 
	#ASN1_F_X509_NEW
 172

	)

1212 
	#ASN1_F_X509_PKEY_NEW
 173

	)

1215 
	#ASN1_R_ADDING_OBJECT
 171

	)

1216 
	#ASN1_R_ASN1_PARSE_ERROR
 198

	)

1217 
	#ASN1_R_ASN1_SIG_PARSE_ERROR
 199

	)

1218 
	#ASN1_R_AUX_ERROR
 100

	)

1219 
	#ASN1_R_BAD_CLASS
 101

	)

1220 
	#ASN1_R_BAD_OBJECT_HEADER
 102

	)

1221 
	#ASN1_R_BAD_PASSWORD_READ
 103

	)

1222 
	#ASN1_R_BAD_TAG
 104

	)

1223 
	#ASN1_R_BMPSTRING_IS_WRONG_LENGTH
 210

	)

1224 
	#ASN1_R_BN_LIB
 105

	)

1225 
	#ASN1_R_BOOLEAN_IS_WRONG_LENGTH
 106

	)

1226 
	#ASN1_R_BUFFER_TOO_SMALL
 107

	)

1227 
	#ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 108

	)

1228 
	#ASN1_R_DATA_IS_WRONG
 109

	)

1229 
	#ASN1_R_DECODE_ERROR
 110

	)

1230 
	#ASN1_R_DECODING_ERROR
 111

	)

1231 
	#ASN1_R_DEPTH_EXCEEDED
 174

	)

1232 
	#ASN1_R_ENCODE_ERROR
 112

	)

1233 
	#ASN1_R_ERROR_GETTING_TIME
 173

	)

1234 
	#ASN1_R_ERROR_LOADING_SECTION
 172

	)

1235 
	#ASN1_R_ERROR_PARSING_SET_ELEMENT
 113

	)

1236 
	#ASN1_R_ERROR_SETTING_CIPHER_PARAMS
 114

	)

1237 
	#ASN1_R_EXPECTING_AN_INTEGER
 115

	)

1238 
	#ASN1_R_EXPECTING_AN_OBJECT
 116

	)

1239 
	#ASN1_R_EXPECTING_A_BOOLEAN
 117

	)

1240 
	#ASN1_R_EXPECTING_A_TIME
 118

	)

1241 
	#ASN1_R_EXPLICIT_LENGTH_MISMATCH
 119

	)

1242 
	#ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED
 120

	)

1243 
	#ASN1_R_FIELD_MISSING
 121

	)

1244 
	#ASN1_R_FIRST_NUM_TOO_LARGE
 122

	)

1245 
	#ASN1_R_HEADER_TOO_LONG
 123

	)

1246 
	#ASN1_R_ILLEGAL_BITSTRING_FORMAT
 175

	)

1247 
	#ASN1_R_ILLEGAL_BOOLEAN
 176

	)

1248 
	#ASN1_R_ILLEGAL_CHARACTERS
 124

	)

1249 
	#ASN1_R_ILLEGAL_FORMAT
 177

	)

1250 
	#ASN1_R_ILLEGAL_HEX
 178

	)

1251 
	#ASN1_R_ILLEGAL_IMPLICIT_TAG
 179

	)

1252 
	#ASN1_R_ILLEGAL_INTEGER
 180

	)

1253 
	#ASN1_R_ILLEGAL_NESTED_TAGGING
 181

	)

1254 
	#ASN1_R_ILLEGAL_NULL
 125

	)

1255 
	#ASN1_R_ILLEGAL_NULL_VALUE
 182

	)

1256 
	#ASN1_R_ILLEGAL_OBJECT
 183

	)

1257 
	#ASN1_R_ILLEGAL_OPTIONAL_ANY
 126

	)

1258 
	#ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE
 170

	)

1259 
	#ASN1_R_ILLEGAL_TAGGED_ANY
 127

	)

1260 
	#ASN1_R_ILLEGAL_TIME_VALUE
 184

	)

1261 
	#ASN1_R_INTEGER_NOT_ASCII_FORMAT
 185

	)

1262 
	#ASN1_R_INTEGER_TOO_LARGE_FOR_LONG
 128

	)

1263 
	#ASN1_R_INVALID_BMPSTRING_LENGTH
 129

	)

1264 
	#ASN1_R_INVALID_DIGIT
 130

	)

1265 
	#ASN1_R_INVALID_MIME_TYPE
 200

	)

1266 
	#ASN1_R_INVALID_MODIFIER
 186

	)

1267 
	#ASN1_R_INVALID_NUMBER
 187

	)

1268 
	#ASN1_R_INVALID_OBJECT_ENCODING
 212

	)

1269 
	#ASN1_R_INVALID_SEPARATOR
 131

	)

1270 
	#ASN1_R_INVALID_TIME_FORMAT
 132

	)

1271 
	#ASN1_R_INVALID_UNIVERSALSTRING_LENGTH
 133

	)

1272 
	#ASN1_R_INVALID_UTF8STRING
 134

	)

1273 
	#ASN1_R_IV_TOO_LARGE
 135

	)

1274 
	#ASN1_R_LENGTH_ERROR
 136

	)

1275 
	#ASN1_R_LIST_ERROR
 188

	)

1276 
	#ASN1_R_MIME_NO_CONTENT_TYPE
 201

	)

1277 
	#ASN1_R_MIME_PARSE_ERROR
 202

	)

1278 
	#ASN1_R_MIME_SIG_PARSE_ERROR
 203

	)

1279 
	#ASN1_R_MISSING_EOC
 137

	)

1280 
	#ASN1_R_MISSING_SECOND_NUMBER
 138

	)

1281 
	#ASN1_R_MISSING_VALUE
 189

	)

1282 
	#ASN1_R_MSTRING_NOT_UNIVERSAL
 139

	)

1283 
	#ASN1_R_MSTRING_WRONG_TAG
 140

	)

1284 
	#ASN1_R_NESTED_ASN1_STRING
 197

	)

1285 
	#ASN1_R_NON_HEX_CHARACTERS
 141

	)

1286 
	#ASN1_R_NOT_ASCII_FORMAT
 190

	)

1287 
	#ASN1_R_NOT_ENOUGH_DATA
 142

	)

1288 
	#ASN1_R_NO_CONTENT_TYPE
 204

	)

1289 
	#ASN1_R_NO_MATCHING_CHOICE_TYPE
 143

	)

1290 
	#ASN1_R_NO_MULTIPART_BODY_FAILURE
 205

	)

1291 
	#ASN1_R_NO_MULTIPART_BOUNDARY
 206

	)

1292 
	#ASN1_R_NO_SIG_CONTENT_TYPE
 207

	)

1293 
	#ASN1_R_NULL_IS_WRONG_LENGTH
 144

	)

1294 
	#ASN1_R_OBJECT_NOT_ASCII_FORMAT
 191

	)

1295 
	#ASN1_R_ODD_NUMBER_OF_CHARS
 145

	)

1296 
	#ASN1_R_PRIVATE_KEY_HEADER_MISSING
 146

	)

1297 
	#ASN1_R_SECOND_NUMBER_TOO_LARGE
 147

	)

1298 
	#ASN1_R_SEQUENCE_LENGTH_MISMATCH
 148

	)

1299 
	#ASN1_R_SEQUENCE_NOT_CONSTRUCTED
 149

	)

1300 
	#ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG
 192

	)

1301 
	#ASN1_R_SHORT_LINE
 150

	)

1302 
	#ASN1_R_SIG_INVALID_MIME_TYPE
 208

	)

1303 
	#ASN1_R_STREAMING_NOT_SUPPORTED
 209

	)

1304 
	#ASN1_R_STRING_TOO_LONG
 151

	)

1305 
	#ASN1_R_STRING_TOO_SHORT
 152

	)

1306 
	#ASN1_R_TAG_VALUE_TOO_HIGH
 153

	)

1307 
	#ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 154

	)

1308 
	#ASN1_R_TIME_NOT_ASCII_FORMAT
 193

	)

1309 
	#ASN1_R_TOO_LONG
 155

	)

1310 
	#ASN1_R_TYPE_NOT_CONSTRUCTED
 156

	)

1311 
	#ASN1_R_UNABLE_TO_DECODE_RSA_KEY
 157

	)

1312 
	#ASN1_R_UNABLE_TO_DECODE_RSA_PRIVATE_KEY
 158

	)

1313 
	#ASN1_R_UNEXPECTED_EOC
 159

	)

1314 
	#ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH
 211

	)

1315 
	#ASN1_R_UNKNOWN_FORMAT
 160

	)

1316 
	#ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM
 161

	)

1317 
	#ASN1_R_UNKNOWN_OBJECT_TYPE
 162

	)

1318 
	#ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE
 163

	)

1319 
	#ASN1_R_UNKNOWN_TAG
 194

	)

1320 
	#ASN1_R_UNKOWN_FORMAT
 195

	)

1321 
	#ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE
 164

	)

1322 
	#ASN1_R_UNSUPPORTED_CIPHER
 165

	)

1323 
	#ASN1_R_UNSUPPORTED_ENCRYPTION_ALGORITHM
 166

	)

1324 
	#ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE
 167

	)

1325 
	#ASN1_R_UNSUPPORTED_TYPE
 196

	)

1326 
	#ASN1_R_WRONG_TAG
 168

	)

1327 
	#ASN1_R_WRONG_TYPE
 169

	)

1329 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/bio.h

59 #i‚de‡
HEADER_BIO_H


60 
	#HEADER_BIO_H


	)

62 
	~<›ís¶/e_os2.h
>

64 #i‚de‡
OPENSSL_NO_FP_API


65 
	~<°dio.h
>

67 
	~<°d¨g.h
>

69 
	~<›ís¶/¸y±o.h
>

71 #ifde‡ 
__˝lu•lus


76 
	#BIO_TYPE_NONE
 0

	)

77 
	#BIO_TYPE_MEM
 (1|0x0400)

	)

78 
	#BIO_TYPE_FILE
 (2|0x0400)

	)

80 
	#BIO_TYPE_FD
 (4|0x0400|0x0100)

	)

81 
	#BIO_TYPE_SOCKET
 (5|0x0400|0x0100)

	)

82 
	#BIO_TYPE_NULL
 (6|0x0400)

	)

83 
	#BIO_TYPE_SSL
 (7|0x0200)

	)

84 
	#BIO_TYPE_MD
 (8|0x0200Ë

	)

85 
	#BIO_TYPE_BUFFER
 (9|0x0200Ë

	)

86 
	#BIO_TYPE_CIPHER
 (10|0x0200Ë

	)

87 
	#BIO_TYPE_BASE64
 (11|0x0200Ë

	)

88 
	#BIO_TYPE_CONNECT
 (12|0x0400|0x0100Ë

	)

89 
	#BIO_TYPE_ACCEPT
 (13|0x0400|0x0100Ë

	)

90 
	#BIO_TYPE_PROXY_CLIENT
 (14|0x0200Ë

	)

91 
	#BIO_TYPE_PROXY_SERVER
 (15|0x0200Ë

	)

92 
	#BIO_TYPE_NBIO_TEST
 (16|0x0200Ë

	)

93 
	#BIO_TYPE_NULL_FILTER
 (17|0x0200)

	)

94 
	#BIO_TYPE_BER
 (18|0x0200Ë

	)

95 
	#BIO_TYPE_BIO
 (19|0x0400Ë

	)

96 
	#BIO_TYPE_LINEBUFFER
 (20|0x0200Ë

	)

97 
	#BIO_TYPE_DGRAM
 (21|0x0400|0x0100)

	)

98 
	#BIO_TYPE_COMP
 (23|0x0200Ë

	)

100 
	#BIO_TYPE_DESCRIPTOR
 0x0100

	)

101 
	#BIO_TYPE_FILTER
 0x0200

	)

102 
	#BIO_TYPE_SOURCE_SINK
 0x0400

	)

106 
	#BIO_NOCLOSE
 0x00

	)

107 
	#BIO_CLOSE
 0x01

	)

111 
	#BIO_CTRL_RESET
 1

	)

112 
	#BIO_CTRL_EOF
 2

	)

113 
	#BIO_CTRL_INFO
 3

	)

114 
	#BIO_CTRL_SET
 4

	)

115 
	#BIO_CTRL_GET
 5

	)

116 
	#BIO_CTRL_PUSH
 6

	)

117 
	#BIO_CTRL_POP
 7

	)

118 
	#BIO_CTRL_GET_CLOSE
 8

	)

119 
	#BIO_CTRL_SET_CLOSE
 9

	)

120 
	#BIO_CTRL_PENDING
 10

	)

121 
	#BIO_CTRL_FLUSH
 11

	)

122 
	#BIO_CTRL_DUP
 12

	)

123 
	#BIO_CTRL_WPENDING
 13

	)

125 
	#BIO_CTRL_SET_CALLBACK
 14

	)

126 
	#BIO_CTRL_GET_CALLBACK
 15

	)

128 
	#BIO_CTRL_SET_FILENAME
 30

	)

131 
	#BIO_CTRL_DGRAM_CONNECT
 31

	)

132 
	#BIO_CTRL_DGRAM_SET_CONNECTED
 32

	)

135 
	#BIO_CTRL_DGRAM_SET_RECV_TIMEOUT
 33

	)

136 
	#BIO_CTRL_DGRAM_GET_RECV_TIMEOUT
 34

	)

137 
	#BIO_CTRL_DGRAM_SET_SEND_TIMEOUT
 35

	)

138 
	#BIO_CTRL_DGRAM_GET_SEND_TIMEOUT
 36

	)

140 
	#BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
 37

	)

141 
	#BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
 38

	)

144 
	#BIO_CTRL_DGRAM_MTU_DISCOVER
 39

	)

147 
	#BIO_CTRL_DGRAM_QUERY_MTU
 40

	)

148 
	#BIO_CTRL_DGRAM_GET_FALLBACK_MTU
 47

	)

149 
	#BIO_CTRL_DGRAM_GET_MTU
 41

	)

150 
	#BIO_CTRL_DGRAM_SET_MTU
 42

	)

155 
	#BIO_CTRL_DGRAM_MTU_EXCEEDED
 43

	)

160 
	#BIO_CTRL_DGRAM_GET_PEER
 46

	)

161 
	#BIO_CTRL_DGRAM_SET_PEER
 44

	)

163 
	#BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT
 45

	)

167 
	#BIO_FP_READ
 0x02

	)

168 
	#BIO_FP_WRITE
 0x04

	)

169 
	#BIO_FP_APPEND
 0x08

	)

170 
	#BIO_FP_TEXT
 0x10

	)

172 
	#BIO_FLAGS_READ
 0x01

	)

173 
	#BIO_FLAGS_WRITE
 0x02

	)

174 
	#BIO_FLAGS_IO_SPECIAL
 0x04

	)

175 
	#BIO_FLAGS_RWS
 (
BIO_FLAGS_READ
|
BIO_FLAGS_WRITE
|
BIO_FLAGS_IO_SPECIAL
)

	)

176 
	#BIO_FLAGS_SHOULD_RETRY
 0x08

	)

177 #i‚def 
BIO_FLAGS_UPLINK


180 
	#BIO_FLAGS_UPLINK
 0

	)

184 
	#BIO_GHBN_CTRL_HITS
 1

	)

185 
	#BIO_GHBN_CTRL_MISSES
 2

	)

186 
	#BIO_GHBN_CTRL_CACHE_SIZE
 3

	)

187 
	#BIO_GHBN_CTRL_GET_ENTRY
 4

	)

188 
	#BIO_GHBN_CTRL_FLUSH
 5

	)

197 
	#BIO_FLAGS_BASE64_NO_NL
 0x100

	)

202 
	#BIO_FLAGS_MEM_RDONLY
 0x200

	)

204 
bio_°
 
	tBIO
;

206 
BIO_£t_Êags
(
BIO
 *
b
, 
Êags
);

207 
BIO_ã°_Êags
(c⁄° 
BIO
 *
b
, 
Êags
);

208 
BIO_˛ór_Êags
(
BIO
 *
b
, 
Êags
);

210 
	#BIO_gë_Êags
(
b
Ë
	`BIO_ã°_Êags
(b, ~(0x0))

	)

211 
	#BIO_£t_ªåy_•ecül
(
b
) \

212 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_IO_SPECIAL
|
BIO_FLAGS_SHOULD_RETRY
))

	)

213 
	#BIO_£t_ªåy_ªad
(
b
) \

214 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_READ
|
BIO_FLAGS_SHOULD_RETRY
))

	)

215 
	#BIO_£t_ªåy_wrôe
(
b
) \

216 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_WRITE
|
BIO_FLAGS_SHOULD_RETRY
))

	)

219 
	#BIO_˛ór_ªåy_Êags
(
b
) \

220 
	`BIO_˛ór_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

221 
	#BIO_gë_ªåy_Êags
(
b
) \

222 
	`BIO_ã°_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

225 
	#BIO_should_ªad
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_READ
)

	)

226 
	#BIO_should_wrôe
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_WRITE
)

	)

227 
	#BIO_should_io_•ecül
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_IO_SPECIAL
)

	)

228 
	#BIO_ªåy_ty≥
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_RWS
)

	)

229 
	#BIO_should_ªåy
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_SHOULD_RETRY
)

	)

237 
	#BIO_RR_SSL_X509_LOOKUP
 0x01

	)

239 
	#BIO_RR_CONNECT
 0x02

	)

241 
	#BIO_RR_ACCEPT
 0x03

	)

244 
	#BIO_CB_FREE
 0x01

	)

245 
	#BIO_CB_READ
 0x02

	)

246 
	#BIO_CB_WRITE
 0x03

	)

247 
	#BIO_CB_PUTS
 0x04

	)

248 
	#BIO_CB_GETS
 0x05

	)

249 
	#BIO_CB_CTRL
 0x06

	)

253 
	#BIO_CB_RETURN
 0x80

	)

254 
	#BIO_CB_ªtu∫
(
a
Ë(◊)|
BIO_CB_RETURN
))

	)

255 
	#BIO_cb_¥e
(
a
Ë(!(◊)&
BIO_CB_RETURN
))

	)

256 
	#BIO_cb_po°
(
a
Ë(◊)&
BIO_CB_RETURN
)

	)

258 (*
BIO_gë_ˇŒback
(c⁄° 
BIO
 *
b
)Ë(
bio_°
 *,,const *,, ,);

259 
BIO_£t_ˇŒback
(
BIO
 *
b
,

260 (*
ˇŒback
)(
bio_°
 *,,const *,, ,));

261 *
BIO_gë_ˇŒback_¨g
(c⁄° 
BIO
 *
b
);

262 
BIO_£t_ˇŒback_¨g
(
BIO
 *
b
, *
¨g
);

264 c⁄° * 
BIO_mëhod_«me
(c⁄° 
BIO
 *
b
);

265 
BIO_mëhod_ty≥
(c⁄° 
BIO
 *
b
);

267 
	tbio_öfo_cb
(
	tbio_°
 *, , const *, , , );

269 #i‚de‡
OPENSSL_SYS_WIN16


270 
	sbio_mëhod_°


272 
ty≥
;

273 c⁄° *
«me
;

274 (*
bwrôe
)(
BIO
 *, const *, );

275 (*
bªad
)(
BIO
 *, *, );

276 (*
bputs
)(
BIO
 *, const *);

277 (*
bgës
)(
BIO
 *, *, );

278 (*
˘æ
)(
BIO
 *, , , *);

279 (*
¸óã
)(
BIO
 *);

280 (*
de°roy
)(
BIO
 *);

281 (*
ˇŒback_˘æ
)(
BIO
 *, , 
bio_öfo_cb
 *);

282 } 
	tBIO_METHOD
;

284 
	sbio_mëhod_°


286 
ty≥
;

287 c⁄° *
«me
;

288 (
_Ár
 *
bwrôe
)();

289 (
_Ár
 *
bªad
)();

290 (
_Ár
 *
bputs
)();

291 (
_Ár
 *
bgës
)();

292 (
_Ár
 *
˘æ
)();

293 (
_Ár
 *
¸óã
)();

294 (
_Ár
 *
de°roy
)();

295 (
_Ár
 *
ˇŒback_˘æ
)();

296 } 
	tBIO_METHOD
;

299 
	sbio_°


301 
BIO_METHOD
 *
mëhod
;

303 (*
ˇŒback
)(
bio_°
 *,,const *,, ,);

304 *
cb_¨g
;

306 
öô
;

307 
shutdown
;

308 
Êags
;

309 
ªåy_ªas⁄
;

310 
num
;

311 *
±r
;

312 
bio_°
 *
√xt_bio
;

313 
bio_°
 *
¥ev_bio
;

314 
ª„ªn˚s
;

315 
num_ªad
;

316 
num_wrôe
;

318 
CRYPTO_EX_DATA
 
ex_d©a
;

321 
DECLARE_STACK_OF
(
BIO
)

323 
	sbio_f_buf„r_˘x_°ru˘


335 
ibuf_size
;

336 
obuf_size
;

338 *
ibuf
;

339 
ibuf_Àn
;

340 
ibuf_off
;

342 *
obuf
;

343 
obuf_Àn
;

344 
obuf_off
;

345 } 
	tBIO_F_BUFFER_CTX
;

348 
	#BIO_CONN_S_BEFORE
 1

	)

349 
	#BIO_CONN_S_GET_IP
 2

	)

350 
	#BIO_CONN_S_GET_PORT
 3

	)

351 
	#BIO_CONN_S_CREATE_SOCKET
 4

	)

352 
	#BIO_CONN_S_CONNECT
 5

	)

353 
	#BIO_CONN_S_OK
 6

	)

354 
	#BIO_CONN_S_BLOCKED_CONNECT
 7

	)

355 
	#BIO_CONN_S_NBIO
 8

	)

358 
	#BIO_C_SET_CONNECT
 100

	)

359 
	#BIO_C_DO_STATE_MACHINE
 101

	)

360 
	#BIO_C_SET_NBIO
 102

	)

361 
	#BIO_C_SET_PROXY_PARAM
 103

	)

362 
	#BIO_C_SET_FD
 104

	)

363 
	#BIO_C_GET_FD
 105

	)

364 
	#BIO_C_SET_FILE_PTR
 106

	)

365 
	#BIO_C_GET_FILE_PTR
 107

	)

366 
	#BIO_C_SET_FILENAME
 108

	)

367 
	#BIO_C_SET_SSL
 109

	)

368 
	#BIO_C_GET_SSL
 110

	)

369 
	#BIO_C_SET_MD
 111

	)

370 
	#BIO_C_GET_MD
 112

	)

371 
	#BIO_C_GET_CIPHER_STATUS
 113

	)

372 
	#BIO_C_SET_BUF_MEM
 114

	)

373 
	#BIO_C_GET_BUF_MEM_PTR
 115

	)

374 
	#BIO_C_GET_BUFF_NUM_LINES
 116

	)

375 
	#BIO_C_SET_BUFF_SIZE
 117

	)

376 
	#BIO_C_SET_ACCEPT
 118

	)

377 
	#BIO_C_SSL_MODE
 119

	)

378 
	#BIO_C_GET_MD_CTX
 120

	)

379 
	#BIO_C_GET_PROXY_PARAM
 121

	)

380 
	#BIO_C_SET_BUFF_READ_DATA
 122

	)

381 
	#BIO_C_GET_CONNECT
 123

	)

382 
	#BIO_C_GET_ACCEPT
 124

	)

383 
	#BIO_C_SET_SSL_RENEGOTIATE_BYTES
 125

	)

384 
	#BIO_C_GET_SSL_NUM_RENEGOTIATES
 126

	)

385 
	#BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
 127

	)

386 
	#BIO_C_FILE_SEEK
 128

	)

387 
	#BIO_C_GET_CIPHER_CTX
 129

	)

388 
	#BIO_C_SET_BUF_MEM_EOF_RETURN
 130

	)

389 
	#BIO_C_SET_BIND_MODE
 131

	)

390 
	#BIO_C_GET_BIND_MODE
 132

	)

391 
	#BIO_C_FILE_TELL
 133

	)

392 
	#BIO_C_GET_SOCKS
 134

	)

393 
	#BIO_C_SET_SOCKS
 135

	)

395 
	#BIO_C_SET_WRITE_BUF_SIZE
 136

	)

396 
	#BIO_C_GET_WRITE_BUF_SIZE
 137

	)

397 
	#BIO_C_MAKE_BIO_PAIR
 138

	)

398 
	#BIO_C_DESTROY_BIO_PAIR
 139

	)

399 
	#BIO_C_GET_WRITE_GUARANTEE
 140

	)

400 
	#BIO_C_GET_READ_REQUEST
 141

	)

401 
	#BIO_C_SHUTDOWN_WR
 142

	)

402 
	#BIO_C_NREAD0
 143

	)

403 
	#BIO_C_NREAD
 144

	)

404 
	#BIO_C_NWRITE0
 145

	)

405 
	#BIO_C_NWRITE
 146

	)

406 
	#BIO_C_RESET_READ_REQUEST
 147

	)

407 
	#BIO_C_SET_MD_CTX
 148

	)

410 
	#BIO_£t_≠p_d©a
(
s
,
¨g
Ë
	`BIO_£t_ex_d©a
(s,0,¨g)

	)

411 
	#BIO_gë_≠p_d©a
(
s
Ë
	`BIO_gë_ex_d©a
(s,0)

	)

414 
	#BIO_£t_c⁄n_ho°«me
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,0,(*Íame)

	)

415 
	#BIO_£t_c⁄n_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,1,(*Ì‹t)

	)

416 
	#BIO_£t_c⁄n_ù
(
b
,
ù
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,2,(*)ù)

	)

417 
	#BIO_£t_c⁄n_öt_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,3,(*Ì‹t)

	)

418 
	#BIO_gë_c⁄n_ho°«me
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,0)

	)

419 
	#BIO_gë_c⁄n_p‹t
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,1)

	)

420 
	#BIO_gë_c⁄n_ù
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,2)

	)

421 
	#BIO_gë_c⁄n_öt_p‹t
(
b
Ë
	`BIO_öt_˘æ
(b,
BIO_C_GET_CONNECT
,3,0)

	)

424 
	#BIO_£t_nbio
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_NBIO
,“),
NULL
)

	)

427 
	#BIO_£t_ac˚±_p‹t
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,0,(*Íame)

	)

428 
	#BIO_gë_ac˚±_p‹t
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_ACCEPT
,0)

	)

430 
	#BIO_£t_nbio_ac˚±
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,1,“)?(*)"a":
NULL
)

	)

431 
	#BIO_£t_ac˚±_bios
(
b
,
bio
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,2,(*)bio)

	)

433 
	#BIO_BIND_NORMAL
 0

	)

434 
	#BIO_BIND_REUSEADDR_IF_UNUSED
 1

	)

435 
	#BIO_BIND_REUSEADDR
 2

	)

436 
	#BIO_£t_böd_mode
(
b
,
mode
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BIND_MODE
,mode,
NULL
)

	)

437 
	#BIO_gë_böd_mode
(
b
,
mode
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BIND_MODE
,0,
NULL
)

	)

439 
	#BIO_do_c⁄√˘
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

440 
	#BIO_do_ac˚±
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

441 
	#BIO_do_h™dshake
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_DO_STATE_MACHINE
,0,
NULL
)

	)

444 
	#BIO_£t_uæ
(
b
,
uæ
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,0,(*)(uæ))

	)

445 
	#BIO_£t_¥oxõs
(
b
,
p
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,1,(*)’))

	)

447 
	#BIO_£t_fûãr_bio
(
b
,
s
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,2,(*)(s))

	)

449 
	#BIO_£t_¥oxy_cb
(
b
,
cb
Ë
	`BIO_ˇŒback_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,3,(*(*cb)()))

	)

450 
	#BIO_£t_¥oxy_hódî
(
b
,
sk
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,4,(*)sk)

	)

451 
	#BIO_£t_no_c⁄√˘_ªtu∫
(
b
,
boﬁ
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,5,boﬁ)

	)

453 
	#BIO_gë_¥oxy_hódî
(
b
,
skp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,0,(*)skp)

	)

454 
	#BIO_gë_¥oxõs
(
b
,
pxy_p
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,1,(*)’xy_p))

	)

455 
	#BIO_gë_uæ
(
b
,
uæ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,2,(*)(uæ))

	)

456 
	#BIO_gë_no_c⁄√˘_ªtu∫
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,5,
NULL
)

	)

458 
	#BIO_£t_fd
(
b
,
fd
,
c
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_FD
,c,fd)

	)

459 
	#BIO_gë_fd
(
b
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FD
,0,(*)c)

	)

461 
	#BIO_£t_Â
(
b
,
Â
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILE_PTR
,c,(*)Â)

	)

462 
	#BIO_gë_Â
(
b
,
Âp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FILE_PTR
,0,(*)Âp)

	)

464 
	#BIO_£ek
(
b
,
ofs
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_SEEK
,ofs,
NULL
)

	)

465 
	#BIO_ãŒ
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_TELL
,0,
NULL
)

	)

469 #ifde‡
CONST_STRICT


473 
BIO_ªad_fûíame
(
BIO
 *
b
,c⁄° *
«me
);

475 
	#BIO_ªad_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

476 
BIO_CLOSE
|
BIO_FP_READ
,(*)
«me
)

	)

478 
	#BIO_wrôe_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

479 
BIO_CLOSE
|
BIO_FP_WRITE
,
«me
)

	)

480 
	#BIO_≠≥nd_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

481 
BIO_CLOSE
|
BIO_FP_APPEND
,
«me
)

	)

482 
	#BIO_rw_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

483 
BIO_CLOSE
|
BIO_FP_READ
|
BIO_FP_WRITE
,
«me
)

	)

489 
	#BIO_£t_s¶
(
b
,
s¶
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_SSL
,c,(*)s¶)

	)

490 
	#BIO_gë_s¶
(
b
,
s¶p
Ë
	`BIO_˘æ
(b,
BIO_C_GET_SSL
,0,(*)s¶p)

	)

491 
	#BIO_£t_s¶_mode
(
b
,
˛õ¡
Ë
	`BIO_˘æ
(b,
BIO_C_SSL_MODE
,˛õ¡,
NULL
)

	)

492 
	#BIO_£t_s¶_ª√gŸüã_byãs
(
b
,
num
) \

493 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_BYTES
,
num
,
NULL
);

	)

494 
	#BIO_gë_num_ª√gŸüãs
(
b
) \

495 
	`BIO_˘æ
(
b
,
BIO_C_GET_SSL_NUM_RENEGOTIATES
,0,
NULL
);

	)

496 
	#BIO_£t_s¶_ª√gŸüã_timeout
(
b
,
£c⁄ds
) \

497 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
,
£c⁄ds
,
NULL
);

	)

502 
	#BIO_gë_mem_d©a
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_CTRL_INFO
,0,(*Ìp)

	)

503 
	#BIO_£t_mem_buf
(
b
,
bm
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUF_MEM
,c,(*)bm)

	)

504 
	#BIO_gë_mem_±r
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUF_MEM_PTR
,0,(*Ìp)

	)

505 
	#BIO_£t_mem_eof_ªtu∫
(
b
,
v
) \

506 
	`BIO_˘æ
(
b
,
BIO_C_SET_BUF_MEM_EOF_RETURN
,
v
,
NULL
)

	)

509 
	#BIO_gë_buf„r_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUFF_NUM_LINES
,0,
NULL
)

	)

510 
	#BIO_£t_buf„r_size
(
b
,
size
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,
NULL
)

	)

511 
	#BIO_£t_ªad_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,0)

	)

512 
	#BIO_£t_wrôe_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,1)

	)

513 
	#BIO_£t_buf„r_ªad_d©a
(
b
,
buf
,
num
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_READ_DATA
,num,buf)

	)

516 
	#BIO_dup_°©e
(
b
,
ªt
Ë
	`BIO_˘æ
(b,
BIO_CTRL_DUP
,0,(*)‘ë))

	)

518 
	#BIO_ª£t
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_RESET
,0,
NULL
)

	)

519 
	#BIO_eof
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_EOF
,0,
NULL
)

	)

520 
	#BIO_£t_˛o£
(
b
,
c
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_SET_CLOSE
,(c),
NULL
)

	)

521 
	#BIO_gë_˛o£
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CLOSE
,0,
NULL
)

	)

522 
	#BIO_≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_PENDING
,0,
NULL
)

	)

523 
	#BIO_w≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_WPENDING
,0,
NULL
)

	)

525 
size_t
 
BIO_˘æ_≥ndög
(
BIO
 *
b
);

526 
size_t
 
BIO_˘æ_w≥ndög
(
BIO
 *
b
);

527 
	#BIO_Êush
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_FLUSH
,0,
NULL
)

	)

528 
	#BIO_gë_öfo_ˇŒback
(
b
,
cbp
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CALLBACK
,0, \

529 
cbp
)

	)

530 
	#BIO_£t_öfo_ˇŒback
(
b
,
cb
Ë()
	`BIO_ˇŒback_˘æ
(b,
BIO_CTRL_SET_CALLBACK
,cb)

	)

533 
	#BIO_buf„r_gë_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_CTRL_GET
,0,
NULL
)

	)

536 
	#BIO_£t_wrôe_buf_size
(
b
,
size
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_WRITE_BUF_SIZE
,size,
NULL
)

	)

537 
	#BIO_gë_wrôe_buf_size
(
b
,
size
Ë(
size_t
)
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_BUF_SIZE
,size,
NULL
)

	)

538 
	#BIO_make_bio_∑ú
(
b1
,
b2
Ë()
	`BIO_˘æ
(b1,
BIO_C_MAKE_BIO_PAIR
,0,b2)

	)

539 
	#BIO_de°roy_bio_∑ú
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_DESTROY_BIO_PAIR
,0,
NULL
)

	)

540 
	#BIO_shutdown_wr
(
b
Ë()
	`BIO_˘æ
(b, 
BIO_C_SHUTDOWN_WR
, 0, 
NULL
)

	)

542 
	#BIO_gë_wrôe_gu¨™ãe
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_GUARANTEE
,0,
NULL
)

	)

543 
	#BIO_gë_ªad_ªque°
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_READ_REQUEST
,0,
NULL
)

	)

544 
size_t
 
BIO_˘æ_gë_wrôe_gu¨™ãe
(
BIO
 *
b
);

545 
size_t
 
BIO_˘æ_gë_ªad_ªque°
(
BIO
 *
b
);

546 
BIO_˘æ_ª£t_ªad_ªque°
(
BIO
 *
b
);

549 
	#BIO_˘æ_dgøm_c⁄√˘
(
b
,
≥î
) \

550 ()
	`BIO_˘æ
(
b
,
BIO_CTRL_DGRAM_CONNECT
,0, (*)
≥î
)

	)

551 
	#BIO_˘æ_£t_c⁄√˘ed
(
b
, 
°©e
, 
≥î
) \

552 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_CONNECTED
, 
°©e
, (*)
≥î
)

	)

553 
	#BIO_dgøm_ªcv_timedout
(
b
) \

554 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
, 0, 
NULL
)

	)

555 
	#BIO_dgøm_£nd_timedout
(
b
) \

556 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
, 0, 
NULL
)

	)

557 
	#BIO_dgøm_gë_≥î
(
b
,
≥î
) \

558 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_PEER
, 0, (*)
≥î
)

	)

559 
	#BIO_dgøm_£t_≥î
(
b
,
≥î
) \

560 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_PEER
, 0, (*)
≥î
)

	)

565 
BIO_£t_ex_d©a
(
BIO
 *
bio
,
idx
,*
d©a
);

566 *
BIO_gë_ex_d©a
(
BIO
 *
bio
,
idx
);

567 
BIO_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

568 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

569 
BIO_numbî_ªad
(
BIO
 *
bio
);

570 
BIO_numbî_wrôãn
(
BIO
 *
bio
);

572 #i‚de‡
OPENSSL_NO_FP_API


573 #i‡
deföed
(
OPENSSL_SYS_WIN16
Ë&& deföed(
_WINDLL
)

574 
BIO_METHOD
 *
BIO_s_fûe_öã∫Æ
();

575 
BIO
 *
BIO_√w_fûe_öã∫Æ
(*
fûíame
, *
mode
);

576 
BIO
 *
BIO_√w_Â_öã∫Æ
(
FILE
 *
°ªam
, 
˛o£_Êag
);

577 
	#BIO_s_fûe
 
BIO_s_fûe_öã∫Æ


	)

578 
	#BIO_√w_fûe
 
BIO_√w_fûe_öã∫Æ


	)

579 
	#BIO_√w_Â
 
BIO_√w_Â_öã∫Æ


	)

581 
BIO_METHOD
 *
BIO_s_fûe
();

582 
BIO
 *
BIO_√w_fûe
(c⁄° *
fûíame
, c⁄° *
mode
);

583 
BIO
 *
BIO_√w_Â
(
FILE
 *
°ªam
, 
˛o£_Êag
);

584 
	#BIO_s_fûe_öã∫Æ
 
BIO_s_fûe


	)

585 
	#BIO_√w_fûe_öã∫Æ
 
BIO_√w_fûe


	)

586 
	#BIO_√w_Â_öã∫Æ
 
BIO_s_fûe


	)

589 
BIO
 * 
BIO_√w
(
BIO_METHOD
 *
ty≥
);

590 
BIO_£t
(
BIO
 *
a
,
BIO_METHOD
 *
ty≥
);

591 
BIO_‰ì
(
BIO
 *
a
);

592 
BIO_v‰ì
(
BIO
 *
a
);

593 
BIO_ªad
(
BIO
 *
b
, *
d©a
, 
Àn
);

594 
BIO_gës
(
BIO
 *
bp
,*
buf
, 
size
);

595 
BIO_wrôe
(
BIO
 *
b
, c⁄° *
d©a
, 
Àn
);

596 
BIO_puts
(
BIO
 *
bp
,c⁄° *
buf
);

597 
BIO_ödít
(
BIO
 *
b
,
ödít
,
max
);

598 
BIO_˘æ
(
BIO
 *
bp
,
cmd
,
œrg
,*
∑rg
);

599 
BIO_ˇŒback_˘æ
(
BIO
 *
b
, 
cmd
, (*
Â
)(
bio_°
 *, , const *, , , ));

600 * 
BIO_±r_˘æ
(
BIO
 *
bp
,
cmd
,
œrg
);

601 
BIO_öt_˘æ
(
BIO
 *
bp
,
cmd
,
œrg
,
ürg
);

602 
BIO
 * 
BIO_push
(BIO *
b
,BIO *
≠≥nd
);

603 
BIO
 * 
BIO_p›
(BIO *
b
);

604 
BIO_‰ì_Æl
(
BIO
 *
a
);

605 
BIO
 * 
BIO_föd_ty≥
(BIO *
b
,
bio_ty≥
);

606 
BIO
 * 
BIO_√xt
(BIO *
b
);

607 
BIO
 * 
BIO_gë_ªåy_BIO
(BIO *
bio
, *
ªas⁄
);

608 
BIO_gë_ªåy_ªas⁄
(
BIO
 *
bio
);

609 
BIO
 * 
BIO_dup_chaö
(BIO *
ö
);

611 
BIO_ƒód0
(
BIO
 *
bio
, **
buf
);

612 
BIO_ƒód
(
BIO
 *
bio
, **
buf
, 
num
);

613 
BIO_nwrôe0
(
BIO
 *
bio
, **
buf
);

614 
BIO_nwrôe
(
BIO
 *
bio
, **
buf
, 
num
);

616 #i‚de‡
OPENSSL_SYS_WIN16


617 
BIO_debug_ˇŒback
(
BIO
 *
bio
,
cmd
,c⁄° *
¨gp
,
¨gi
,

618 
¨gl
,
ªt
);

620 
_Ár
 
_lﬂdds
 
BIO_debug_ˇŒback
(
BIO
 *
bio
,
cmd
,c⁄° *
¨gp
,
¨gi
,

621 
¨gl
,
ªt
);

624 
BIO_METHOD
 *
BIO_s_mem
();

625 
BIO
 *
BIO_√w_mem_buf
(*
buf
, 
Àn
);

626 
BIO_METHOD
 *
BIO_s_sockë
();

627 
BIO_METHOD
 *
BIO_s_c⁄√˘
();

628 
BIO_METHOD
 *
BIO_s_ac˚±
();

629 
BIO_METHOD
 *
BIO_s_fd
();

630 #i‚de‡
OPENSSL_SYS_OS2


631 
BIO_METHOD
 *
BIO_s_log
();

633 
BIO_METHOD
 *
BIO_s_bio
();

634 
BIO_METHOD
 *
BIO_s_nuŒ
();

635 
BIO_METHOD
 *
BIO_f_nuŒ
();

636 
BIO_METHOD
 *
BIO_f_buf„r
();

637 #ifde‡
OPENSSL_SYS_VMS


638 
BIO_METHOD
 *
BIO_f_löebuf„r
();

640 
BIO_METHOD
 *
BIO_f_nbio_ã°
();

641 #i‚de‡
OPENSSL_NO_DGRAM


642 
BIO_METHOD
 *
BIO_s_d©agøm
();

647 
BIO_sock_should_ªåy
(
i
);

648 
BIO_sock_n⁄_Áèl_îr‹
(
îr‹
);

649 
BIO_dgøm_n⁄_Áèl_îr‹
(
îr‹
);

651 
BIO_fd_should_ªåy
(
i
);

652 
BIO_fd_n⁄_Áèl_îr‹
(
îr‹
);

653 
BIO_dump_cb
((*
cb
)(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

654 *
u
, c⁄° *
s
, 
Àn
);

655 
BIO_dump_ödít_cb
((*
cb
)(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

656 *
u
, c⁄° *
s
, 
Àn
, 
ödít
);

657 
BIO_dump
(
BIO
 *
b
,c⁄° *
byãs
,
Àn
);

658 
BIO_dump_ödít
(
BIO
 *
b
,c⁄° *
byãs
,
Àn
,
ödít
);

659 #i‚de‡
OPENSSL_NO_FP_API


660 
BIO_dump_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
);

661 
BIO_dump_ödít_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
, 
ödít
);

663 
ho°ít
 *
BIO_gëho°by«me
(c⁄° *
«me
);

672 
BIO_sock_îr‹
(
sock
);

673 
BIO_sockë_io˘l
(
fd
, 
ty≥
, *
¨g
);

674 
BIO_sockë_nbio
(
fd
,
mode
);

675 
BIO_gë_p‹t
(c⁄° *
°r
, *
p‹t_±r
);

676 
BIO_gë_ho°_ù
(c⁄° *
°r
, *
ù
);

677 
BIO_gë_ac˚±_sockë
(*
ho°_p‹t
,
mode
);

678 
BIO_ac˚±
(
sock
,**
ù_p‹t
);

679 
BIO_sock_öô
();

680 
BIO_sock_˛ónup
();

681 
BIO_£t_t˝_ndñay
(
sock
,
tu∫_⁄
);

683 
BIO
 *
BIO_√w_sockë
(
sock
, 
˛o£_Êag
);

684 
BIO
 *
BIO_√w_dgøm
(
fd
, 
˛o£_Êag
);

685 
BIO
 *
BIO_√w_fd
(
fd
, 
˛o£_Êag
);

686 
BIO
 *
BIO_√w_c⁄√˘
(*
ho°_p‹t
);

687 
BIO
 *
BIO_√w_ac˚±
(*
ho°_p‹t
);

689 
BIO_√w_bio_∑ú
(
BIO
 **
bio1
, 
size_t
 
wrôebuf1
,

690 
BIO
 **
bio2
, 
size_t
 
wrôebuf2
);

696 
BIO_c›y_√xt_ªåy
(
BIO
 *
b
);

700 #ifde‡
__GNUC__


701 
	#__bio_h__©å__
 
__©åibuã__


	)

703 
	#__bio_h__©å__
(
x
)

	)

705 
BIO_¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, ...)

706 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,2,3)));

707 
BIO_v¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

708 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,2,0)));

709 
BIO_¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, ...)

710 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,3,4)));

711 
BIO_v¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

712 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,3,0)));

713 #unde‡
__bio_h__©å__


719 
ERR_lﬂd_BIO_°rögs
();

724 
	#BIO_F_ACPT_STATE
 100

	)

725 
	#BIO_F_BIO_ACCEPT
 101

	)

726 
	#BIO_F_BIO_BER_GET_HEADER
 102

	)

727 
	#BIO_F_BIO_CALLBACK_CTRL
 131

	)

728 
	#BIO_F_BIO_CTRL
 103

	)

729 
	#BIO_F_BIO_GETHOSTBYNAME
 120

	)

730 
	#BIO_F_BIO_GETS
 104

	)

731 
	#BIO_F_BIO_GET_ACCEPT_SOCKET
 105

	)

732 
	#BIO_F_BIO_GET_HOST_IP
 106

	)

733 
	#BIO_F_BIO_GET_PORT
 107

	)

734 
	#BIO_F_BIO_MAKE_PAIR
 121

	)

735 
	#BIO_F_BIO_NEW
 108

	)

736 
	#BIO_F_BIO_NEW_FILE
 109

	)

737 
	#BIO_F_BIO_NEW_MEM_BUF
 126

	)

738 
	#BIO_F_BIO_NREAD
 123

	)

739 
	#BIO_F_BIO_NREAD0
 124

	)

740 
	#BIO_F_BIO_NWRITE
 125

	)

741 
	#BIO_F_BIO_NWRITE0
 122

	)

742 
	#BIO_F_BIO_PUTS
 110

	)

743 
	#BIO_F_BIO_READ
 111

	)

744 
	#BIO_F_BIO_SOCK_INIT
 112

	)

745 
	#BIO_F_BIO_WRITE
 113

	)

746 
	#BIO_F_BUFFER_CTRL
 114

	)

747 
	#BIO_F_CONN_CTRL
 127

	)

748 
	#BIO_F_CONN_STATE
 115

	)

749 
	#BIO_F_FILE_CTRL
 116

	)

750 
	#BIO_F_FILE_READ
 130

	)

751 
	#BIO_F_LINEBUFFER_CTRL
 129

	)

752 
	#BIO_F_MEM_READ
 128

	)

753 
	#BIO_F_MEM_WRITE
 117

	)

754 
	#BIO_F_SSL_NEW
 118

	)

755 
	#BIO_F_WSASTARTUP
 119

	)

758 
	#BIO_R_ACCEPT_ERROR
 100

	)

759 
	#BIO_R_BAD_FOPEN_MODE
 101

	)

760 
	#BIO_R_BAD_HOSTNAME_LOOKUP
 102

	)

761 
	#BIO_R_BROKEN_PIPE
 124

	)

762 
	#BIO_R_CONNECT_ERROR
 103

	)

763 
	#BIO_R_EOF_ON_MEMORY_BIO
 127

	)

764 
	#BIO_R_ERROR_SETTING_NBIO
 104

	)

765 
	#BIO_R_ERROR_SETTING_NBIO_ON_ACCEPTED_SOCKET
 105

	)

766 
	#BIO_R_ERROR_SETTING_NBIO_ON_ACCEPT_SOCKET
 106

	)

767 
	#BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET
 107

	)

768 
	#BIO_R_INVALID_ARGUMENT
 125

	)

769 
	#BIO_R_INVALID_IP_ADDRESS
 108

	)

770 
	#BIO_R_IN_USE
 123

	)

771 
	#BIO_R_KEEPALIVE
 109

	)

772 
	#BIO_R_NBIO_CONNECT_ERROR
 110

	)

773 
	#BIO_R_NO_ACCEPT_PORT_SPECIFIED
 111

	)

774 
	#BIO_R_NO_HOSTNAME_SPECIFIED
 112

	)

775 
	#BIO_R_NO_PORT_DEFINED
 113

	)

776 
	#BIO_R_NO_PORT_SPECIFIED
 114

	)

777 
	#BIO_R_NO_SUCH_FILE
 128

	)

778 
	#BIO_R_NULL_PARAMETER
 115

	)

779 
	#BIO_R_TAG_MISMATCH
 116

	)

780 
	#BIO_R_UNABLE_TO_BIND_SOCKET
 117

	)

781 
	#BIO_R_UNABLE_TO_CREATE_SOCKET
 118

	)

782 
	#BIO_R_UNABLE_TO_LISTEN_SOCKET
 119

	)

783 
	#BIO_R_UNINITIALIZED
 120

	)

784 
	#BIO_R_UNSUPPORTED_METHOD
 121

	)

785 
	#BIO_R_WRITE_TO_READ_ONLY_BIO
 126

	)

786 
	#BIO_R_WSASTARTUP
 122

	)

788 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/blowfish.h

59 #i‚de‡
HEADER_BLOWFISH_H


60 
	#HEADER_BLOWFISH_H


	)

62 
	~<›ís¶/e_os2.h
>

64 #ifde‡ 
__˝lu•lus


68 #ifde‡
OPENSSL_NO_BF


69 #îr‹ 
BF
 
is
 
dißbÀd
.

72 
	#BF_ENCRYPT
 1

	)

73 
	#BF_DECRYPT
 0

	)

82 #i‡
deföed
(
OPENSSL_SYS_WIN16
Ë|| deföed(
__LP32__
)

83 
	#BF_LONG
 

	)

84 #ñi‡
deföed
(
OPENSSL_SYS_CRAY
Ë|| deföed(
__ILP64__
)

85 
	#BF_LONG
 

	)

86 
	#BF_LONG_LOG2
 3

	)

95 
	#BF_LONG
 

	)

98 
	#BF_ROUNDS
 16

	)

99 
	#BF_BLOCK
 8

	)

101 
	sbf_key_°


103 
BF_LONG
 
P
[
BF_ROUNDS
+2];

104 
BF_LONG
 
S
[4*256];

105 } 
	tBF_KEY
;

107 #ifde‡
OPENSSL_FIPS


108 
¥iv©e_BF_£t_key
(
BF_KEY
 *
key
, 
Àn
, c⁄° *
d©a
);

110 
BF_£t_key
(
BF_KEY
 *
key
, 
Àn
, c⁄° *
d©a
);

112 
BF_í¸y±
(
BF_LONG
 *
d©a
,c⁄° 
BF_KEY
 *
key
);

113 
BF_de¸y±
(
BF_LONG
 *
d©a
,c⁄° 
BF_KEY
 *
key
);

115 
BF_ecb_í¸y±
(c⁄° *
ö
, *
out
,

116 c⁄° 
BF_KEY
 *
key
, 
íc
);

117 
BF_cbc_í¸y±
(c⁄° *
ö
, *
out
, 
Àngth
,

118 c⁄° 
BF_KEY
 *
scheduÀ
, *
ivec
, 
íc
);

119 
BF_cfb64_í¸y±
(c⁄° *
ö
, *
out
, 
Àngth
,

120 c⁄° 
BF_KEY
 *
scheduÀ
, *
ivec
, *
num
, 
íc
);

121 
BF_ofb64_í¸y±
(c⁄° *
ö
, *
out
, 
Àngth
,

122 c⁄° 
BF_KEY
 *
scheduÀ
, *
ivec
, *
num
);

123 c⁄° *
BF_›ti⁄s
();

125 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/bn.h

72 #i‚de‡
HEADER_BN_H


73 
	#HEADER_BN_H


	)

75 
	~<›ís¶/e_os2.h
>

76 #i‚de‡
OPENSSL_NO_FP_API


77 
	~<°dio.h
>

79 
	~<›ís¶/os¶_typ.h
>

81 #ifde‡ 
__˝lu•lus


97 
	#BN_MUL_COMBA


	)

98 
	#BN_SQR_COMBA


	)

99 
	#BN_RECURSION


	)

112 #i‡
deföed
(
OPENSSL_SYS_MSDOS
Ë|| deföed(
OPENSSL_SYS_WINDOWS
) || \

113 
deföed
(
OPENSSL_SYS_WIN32
Ë|| deföed(
löux
)

114 #i‚de‡
BN_DIV2W


115 
	#BN_DIV2W


	)

122 #ifde‡
SIXTY_FOUR_BIT_LONG


123 
	#BN_ULLONG
 

	)

124 
	#BN_ULONG
 

	)

125 
	#BN_LONG
 

	)

126 
	#BN_BITS
 128

	)

127 
	#BN_BYTES
 8

	)

128 
	#BN_BITS2
 64

	)

129 
	#BN_BITS4
 32

	)

130 
	#BN_MASK
 (0xffffffffffffffffffffffffffffffffLL)

	)

131 
	#BN_MASK2
 (0xffffffffffffffffL)

	)

132 
	#BN_MASK2l
 (0xffffffffL)

	)

133 
	#BN_MASK2h
 (0xffffffff00000000L)

	)

134 
	#BN_MASK2h1
 (0xffffffff80000000L)

	)

135 
	#BN_TBIT
 (0x8000000000000000L)

	)

136 
	#BN_DEC_CONV
 (10000000000000000000UL)

	)

137 
	#BN_DEC_FMT1
 "%lu"

	)

138 
	#BN_DEC_FMT2
 "%019lu"

	)

139 
	#BN_DEC_NUM
 19

	)

147 #ifde‡
SIXTY_FOUR_BIT


148 #unde‡
BN_LLONG


149 #unde‡
BN_ULLONG


150 
	#BN_ULONG
 

	)

151 
	#BN_LONG
 

	)

152 
	#BN_BITS
 128

	)

153 
	#BN_BYTES
 8

	)

154 
	#BN_BITS2
 64

	)

155 
	#BN_BITS4
 32

	)

156 
	#BN_MASK2
 (0xffffffffffffffffLL)

	)

157 
	#BN_MASK2l
 (0xffffffffL)

	)

158 
	#BN_MASK2h
 (0xffffffff00000000LL)

	)

159 
	#BN_MASK2h1
 (0xffffffff80000000LL)

	)

160 
	#BN_TBIT
 (0x8000000000000000LL)

	)

161 
	#BN_DEC_CONV
 (10000000000000000000ULL)

	)

162 
	#BN_DEC_FMT1
 "%Œu"

	)

163 
	#BN_DEC_FMT2
 "%019Œu"

	)

164 
	#BN_DEC_NUM
 19

	)

167 #ifde‡
THIRTY_TWO_BIT


168 #ifde‡
BN_LLONG


169 #i‡
deföed
(
OPENSSL_SYS_WIN32
Ë&& !deföed(
__GNUC__
)

170 
	#BN_ULLONG
 
__öt64


	)

172 
	#BN_ULLONG
 

	)

175 
	#BN_ULONG
 

	)

176 
	#BN_LONG
 

	)

177 
	#BN_BITS
 64

	)

178 
	#BN_BYTES
 4

	)

179 
	#BN_BITS2
 32

	)

180 
	#BN_BITS4
 16

	)

181 #ifde‡
OPENSSL_SYS_WIN32


183 
	#BN_MASK
 (0xffffffffffffffffL)

	)

185 
	#BN_MASK
 (0xffffffffffffffffLL)

	)

187 
	#BN_MASK2
 (0xffffffffL)

	)

188 
	#BN_MASK2l
 (0xffff)

	)

189 
	#BN_MASK2h1
 (0xffff8000L)

	)

190 
	#BN_MASK2h
 (0xffff0000L)

	)

191 
	#BN_TBIT
 (0x80000000L)

	)

192 
	#BN_DEC_CONV
 (1000000000L)

	)

193 
	#BN_DEC_FMT1
 "%lu"

	)

194 
	#BN_DEC_FMT2
 "%09lu"

	)

195 
	#BN_DEC_NUM
 9

	)

198 #ifde‡
SIXTEEN_BIT


199 #i‚de‡
BN_DIV2W


200 
	#BN_DIV2W


	)

202 
	#BN_ULLONG
 

	)

203 
	#BN_ULONG
 

	)

204 
	#BN_LONG
 

	)

205 
	#BN_BITS
 32

	)

206 
	#BN_BYTES
 2

	)

207 
	#BN_BITS2
 16

	)

208 
	#BN_BITS4
 8

	)

209 
	#BN_MASK
 (0xffffffff)

	)

210 
	#BN_MASK2
 (0xffff)

	)

211 
	#BN_MASK2l
 (0xff)

	)

212 
	#BN_MASK2h1
 (0xff80)

	)

213 
	#BN_MASK2h
 (0xff00)

	)

214 
	#BN_TBIT
 (0x8000)

	)

215 
	#BN_DEC_CONV
 (100000)

	)

216 
	#BN_DEC_FMT1
 "%u"

	)

217 
	#BN_DEC_FMT2
 "%05u"

	)

218 
	#BN_DEC_NUM
 5

	)

221 #ifde‡
EIGHT_BIT


222 #i‚de‡
BN_DIV2W


223 
	#BN_DIV2W


	)

225 
	#BN_ULLONG
 

	)

226 
	#BN_ULONG
 

	)

227 
	#BN_LONG
 

	)

228 
	#BN_BITS
 16

	)

229 
	#BN_BYTES
 1

	)

230 
	#BN_BITS2
 8

	)

231 
	#BN_BITS4
 4

	)

232 
	#BN_MASK
 (0xffff)

	)

233 
	#BN_MASK2
 (0xff)

	)

234 
	#BN_MASK2l
 (0xf)

	)

235 
	#BN_MASK2h1
 (0xf8)

	)

236 
	#BN_MASK2h
 (0xf0)

	)

237 
	#BN_TBIT
 (0x80)

	)

238 
	#BN_DEC_CONV
 (100)

	)

239 
	#BN_DEC_FMT1
 "%u"

	)

240 
	#BN_DEC_FMT2
 "%02u"

	)

241 
	#BN_DEC_NUM
 2

	)

244 
	#BN_DEFAULT_BITS
 1280

	)

246 
	#BN_FLG_MALLOCED
 0x01

	)

247 
	#BN_FLG_STATIC_DATA
 0x02

	)

248 
	#BN_FLG_CONSTTIME
 0x04

	)

254 #i‚de‡
OPENSSL_NO_DEPRECATED


255 
	#BN_FLG_EXP_CONSTTIME
 
BN_FLG_CONSTTIME


	)

260 #i‚de‡
OPENSSL_NO_DEPRECATED


261 
	#BN_FLG_FREE
 0x8000

	)

263 
	#BN_£t_Êags
(
b
,
n
Ë((b)->
Êags
|=“))

	)

264 
	#BN_gë_Êags
(
b
,
n
Ë((b)->
Êags
&“))

	)

268 
	#BN_wôh_Êags
(
de°
,
b
,
n
Ë((de°)->
d
=(b)->d, \

269 (
de°
)->
t›
=(
b
)->top, \

270 (
de°
)->
dmax
=(
b
)->dmax, \

271 (
de°
)->
√g
=(
b
)->neg, \

272 (
de°
)->
Êags
=(((de°)->Êag†& 
BN_FLG_MALLOCED
) \

273 | ((
b
)->
Êags
 & ~
BN_FLG_MALLOCED
) \

274 | 
BN_FLG_STATIC_DATA
 \

275 | (
n
)))

	)

279 
bignum_°
 
	tBIGNUM
;

281 
bignum_˘x
 
	tBN_CTX
;

282 
bn_blödög_°
 
	tBN_BLINDING
;

283 
bn_m⁄t_˘x_°
 
	tBN_MONT_CTX
;

284 
bn_ª˝_˘x_°
 
	tBN_RECP_CTX
;

285 
bn_gícb_°
 
	tBN_GENCB
;

288 
	sbignum_°


290 
BN_ULONG
 *
d
;

291 
t›
;

293 
dmax
;

294 
√g
;

295 
Êags
;

299 
	sbn_m⁄t_˘x_°


301 
ri
;

302 
BIGNUM
 
RR
;

303 
BIGNUM
 
N
;

304 
BIGNUM
 
Ni
;

308 
BN_ULONG
 
n0
[2];

310 
BN_ULONG
 
n0
;

312 
Êags
;

318 
	sbn_ª˝_˘x_°


320 
BIGNUM
 
N
;

321 
BIGNUM
 
Nr
;

322 
num_bôs
;

323 
shi·
;

324 
Êags
;

328 
	sbn_gícb_°


330 
vî
;

331 *
¨g
;

335 (*
cb_1
)(, , *);

337 (*
cb_2
)(, , 
BN_GENCB
 *);

338 } 
cb
;

341 
BN_GENCB_ˇŒ
(
BN_GENCB
 *
cb
, 
a
, 
b
);

343 
	#BN_GENCB_£t_ﬁd
(
gícb
, 
ˇŒback
, 
cb_¨g
) { \

344 
BN_GENCB
 *
tmp_gícb
 = (
gícb
); \

345 
tmp_gícb
->
vî
 = 1; \

346 
tmp_gícb
->
¨g
 = (
cb_¨g
); \

347 
tmp_gícb
->
cb
.
cb_1
 = (
ˇŒback
); }

	)

349 
	#BN_GENCB_£t
(
gícb
, 
ˇŒback
, 
cb_¨g
) { \

350 
BN_GENCB
 *
tmp_gícb
 = (
gícb
); \

351 
tmp_gícb
->
vî
 = 2; \

352 
tmp_gícb
->
¨g
 = (
cb_¨g
); \

353 
tmp_gícb
->
cb
.
cb_2
 = (
ˇŒback
); }

	)

355 
	#BN_¥ime_checks
 0

	)

363 
	#BN_¥ime_checks_f‹_size
(
b
) ((b) >= 1300 ? 2 : \

364 (
b
) >= 850 ? 3 : \

365 (
b
) >= 650 ? 4 : \

366 (
b
) >= 550 ? 5 : \

367 (
b
) >= 450 ? 6 : \

368 (
b
) >= 400 ? 7 : \

369 (
b
) >= 350 ? 8 : \

370 (
b
) >= 300 ? 9 : \

371 (
b
) >= 250 ? 12 : \

372 (
b
) >= 200 ? 15 : \

373 (
b
) >= 150 ? 18 : \

374  27)

	)

376 
	#BN_num_byãs
(
a
Ë((
	`BN_num_bôs
◊)+7)/8)

	)

379 
	#BN_abs_is_w‹d
(
a
,
w
Ë(((◊)->
t›
 =1Ë&& (◊)->
d
[0] =(
BN_ULONG
)(w))) || \

380 (((
w
Ë=0Ë&& ((
a
)->
t›
 =0)))

	)

381 
	#BN_is_zîo
(
a
Ë(◊)->
t›
 =0)

	)

382 
	#BN_is_⁄e
(
a
Ë(
	`BN_abs_is_w‹d
(◊),1Ë&& !◊)->
√g
)

	)

383 
	#BN_is_w‹d
(
a
,
w
Ë(
	`BN_abs_is_w‹d
(◊),(w)Ë&& (!(wË|| !◊)->
√g
))

	)

384 
	#BN_is_odd
(
a
Ë((◊)->
t›
 > 0Ë&& (◊)->
d
[0] & 1))

	)

386 
	#BN_⁄e
(
a
Ë(
	`BN_£t_w‹d
(◊),1))

	)

387 
	#BN_zîo_ex
(
a
) \

389 
BIGNUM
 *
_tmp_bn
 = (
a
); \

390 
_tmp_bn
->
t›
 = 0; \

391 
_tmp_bn
->
√g
 = 0; \

392 } 0)

	)

393 #ifde‡
OPENSSL_NO_DEPRECATED


394 
	#BN_zîo
(
a
Ë
	`BN_zîo_ex
◊)

	)

396 
	#BN_zîo
(
a
Ë(
	`BN_£t_w‹d
(◊),0))

	)

399 c⁄° 
BIGNUM
 *
BN_vÆue_⁄e
();

400 * 
BN_›ti⁄s
();

401 
BN_CTX
 *
BN_CTX_√w
();

402 #i‚de‡
OPENSSL_NO_DEPRECATED


403 
BN_CTX_öô
(
BN_CTX
 *
c
);

405 
BN_CTX_‰ì
(
BN_CTX
 *
c
);

406 
BN_CTX_°¨t
(
BN_CTX
 *
˘x
);

407 
BIGNUM
 *
BN_CTX_gë
(
BN_CTX
 *
˘x
);

408 
BN_CTX_íd
(
BN_CTX
 *
˘x
);

409 
BN_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
,
bŸtom
);

410 
BN_p£udo_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
,
bŸtom
);

411 
BN_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

412 
BN_p£udo_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

413 
BN_num_bôs
(c⁄° 
BIGNUM
 *
a
);

414 
BN_num_bôs_w‹d
(
BN_ULONG
);

415 
BIGNUM
 *
BN_√w
();

416 
BN_öô
(
BIGNUM
 *);

417 
BN_˛ór_‰ì
(
BIGNUM
 *
a
);

418 
BIGNUM
 *
BN_c›y
(BIGNUM *
a
, c⁄° BIGNUM *
b
);

419 
BN_sw≠
(
BIGNUM
 *
a
, BIGNUM *
b
);

420 
BIGNUM
 *
BN_bö2bn
(c⁄° *
s
,
Àn
,BIGNUM *
ªt
);

421 
BN_bn2bö
(c⁄° 
BIGNUM
 *
a
, *
to
);

422 
BIGNUM
 *
BN_mpi2bn
(c⁄° *
s
,
Àn
,BIGNUM *
ªt
);

423 
BN_bn2mpi
(c⁄° 
BIGNUM
 *
a
, *
to
);

424 
BN_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

425 
BN_usub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

426 
BN_uadd
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

427 
BN_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

428 
BN_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

429 
BN_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,
BN_CTX
 *
˘x
);

434 
BN_£t_√g©ive
(
BIGNUM
 *
b
, 
n
);

439 
	#BN_is_√g©ive
(
a
Ë(◊)->
√g
 !0)

	)

441 
BN_div
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
,

442 
BN_CTX
 *
˘x
);

443 
	#BN_mod
(
ªm
,
m
,
d
,
˘x
Ë
	`BN_div
(
NULL
,‘em),(m),(d),(˘x))

	)

444 
BN_¬mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
, 
BN_CTX
 *
˘x
);

445 
BN_mod_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

446 
BN_mod_add_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
);

447 
BN_mod_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

448 
BN_mod_sub_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
);

449 
BN_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

450 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

451 
BN_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

452 
BN_mod_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

453 
BN_mod_lshi·1_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
);

454 
BN_mod_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

455 
BN_mod_lshi·_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
);

457 
BN_ULONG
 
BN_mod_w‹d
(c⁄° 
BIGNUM
 *
a
, BN_ULONG 
w
);

458 
BN_ULONG
 
BN_div_w‹d
(
BIGNUM
 *
a
, BN_ULONG 
w
);

459 
BN_mul_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

460 
BN_add_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

461 
BN_sub_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

462 
BN_£t_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

463 
BN_ULONG
 
BN_gë_w‹d
(c⁄° 
BIGNUM
 *
a
);

465 
BN_cmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

466 
BN_‰ì
(
BIGNUM
 *
a
);

467 
BN_is_bô_£t
(c⁄° 
BIGNUM
 *
a
, 
n
);

468 
BN_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

469 
BN_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

470 
BN_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,
BN_CTX
 *
˘x
);

472 
BN_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

473 c⁄° 
BIGNUM
 *
m
,
BN_CTX
 *
˘x
);

474 
BN_mod_exp_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

475 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

476 
BN_mod_exp_m⁄t_c⁄°time
(
BIGNUM
 *
º
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

477 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
ö_m⁄t
);

478 
BN_mod_exp_m⁄t_w‹d
(
BIGNUM
 *
r
, 
BN_ULONG
 
a
, c⁄° BIGNUM *
p
,

479 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

480 
BN_mod_exp2_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a1
, c⁄° BIGNUM *
p1
,

481 c⁄° 
BIGNUM
 *
a2
, c⁄° BIGNUM *
p2
,c⁄° BIGNUM *
m
,

482 
BN_CTX
 *
˘x
,
BN_MONT_CTX
 *
m_˘x
);

483 
BN_mod_exp_sim∂e
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

484 c⁄° 
BIGNUM
 *
m
,
BN_CTX
 *
˘x
);

486 
BN_mask_bôs
(
BIGNUM
 *
a
,
n
);

487 #i‚de‡
OPENSSL_NO_FP_API


488 
BN_¥öt_Â
(
FILE
 *
Â
, c⁄° 
BIGNUM
 *
a
);

490 #ifde‡
HEADER_BIO_H


491 
BN_¥öt
(
BIO
 *
Â
, c⁄° 
BIGNUM
 *
a
);

493 
BN_¥öt
(*
Â
, c⁄° 
BIGNUM
 *
a
);

495 
BN_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, 
Àn
, 
BN_CTX
 *
˘x
);

496 
BN_rshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

497 
BN_rshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

498 
BN_˛ór
(
BIGNUM
 *
a
);

499 
BIGNUM
 *
BN_dup
(c⁄° BIGNUM *
a
);

500 
BN_ucmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

501 
BN_£t_bô
(
BIGNUM
 *
a
, 
n
);

502 
BN_˛ór_bô
(
BIGNUM
 *
a
, 
n
);

503 * 
BN_bn2hex
(c⁄° 
BIGNUM
 *
a
);

504 * 
BN_bn2dec
(c⁄° 
BIGNUM
 *
a
);

505 
BN_hex2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

506 
BN_dec2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

507 
BN_gcd
(
BIGNUM
 *
r
,c⁄° BIGNUM *
a
,c⁄° BIGNUM *
b
,
BN_CTX
 *
˘x
);

508 
BN_kr⁄eckî
(c⁄° 
BIGNUM
 *
a
,c⁄° BIGNUM *
b
,
BN_CTX
 *
˘x
);

509 
BIGNUM
 *
BN_mod_övî£
(BIGNUM *
ªt
,

510 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
,
BN_CTX
 *
˘x
);

511 
BIGNUM
 *
BN_mod_sqπ
(BIGNUM *
ªt
,

512 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
,
BN_CTX
 *
˘x
);

515 #i‚de‡
OPENSSL_NO_DEPRECATED


516 
BIGNUM
 *
BN_gíî©e_¥ime
(BIGNUM *
ªt
,
bôs
,
ß„
,

517 c⁄° 
BIGNUM
 *
add
, c⁄° BIGNUM *
ªm
,

518 (*
ˇŒback
)(,,*),*
cb_¨g
);

519 
BN_is_¥ime
(c⁄° 
BIGNUM
 *
p
,
nchecks
,

520 (*
ˇŒback
)(,,*),

521 
BN_CTX
 *
˘x
,*
cb_¨g
);

522 
BN_is_¥ime_Á°ã°
(c⁄° 
BIGNUM
 *
p
,
nchecks
,

523 (*
ˇŒback
)(,,*),
BN_CTX
 *
˘x
,*
cb_¨g
,

524 
do_åül_divisi⁄
);

528 
BN_gíî©e_¥ime_ex
(
BIGNUM
 *
ªt
,
bôs
,
ß„
, c⁄° BIGNUM *
add
,

529 c⁄° 
BIGNUM
 *
ªm
, 
BN_GENCB
 *
cb
);

530 
BN_is_¥ime_ex
(c⁄° 
BIGNUM
 *
p
,
nchecks
, 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

531 
BN_is_¥ime_Á°ã°_ex
(c⁄° 
BIGNUM
 *
p
,
nchecks
, 
BN_CTX
 *
˘x
,

532 
do_åül_divisi⁄
, 
BN_GENCB
 *
cb
);

534 
BN_X931_gíî©e_Xpq
(
BIGNUM
 *
Xp
, BIGNUM *
Xq
, 
nbôs
, 
BN_CTX
 *
˘x
);

536 
BN_X931_dîive_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
,

537 c⁄° 
BIGNUM
 *
Xp
, c⁄° BIGNUM *
Xp1
, c⁄° BIGNUM *
Xp2
,

538 c⁄° 
BIGNUM
 *
e
, 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

539 
BN_X931_gíî©e_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
,

540 
BIGNUM
 *
Xp1
, BIGNUM *
Xp2
,

541 c⁄° 
BIGNUM
 *
Xp
,

542 c⁄° 
BIGNUM
 *
e
, 
BN_CTX
 *
˘x
,

543 
BN_GENCB
 *
cb
);

545 
BN_MONT_CTX
 *
BN_MONT_CTX_√w
();

546 
BN_MONT_CTX_öô
(
BN_MONT_CTX
 *
˘x
);

547 
BN_mod_mul_m⁄tgomîy
(
BIGNUM
 *
r
,c⁄° BIGNUM *
a
,c⁄° BIGNUM *
b
,

548 
BN_MONT_CTX
 *
m⁄t
, 
BN_CTX
 *
˘x
);

549 
	#BN_to_m⁄tgomîy
(
r
,
a
,
m⁄t
,
˘x
Ë
	`BN_mod_mul_m⁄tgomîy
(\

550 (
r
),(
a
),&((
m⁄t
)->
RR
),(m⁄t),(
˘x
))

	)

551 
BN_‰om_m⁄tgomîy
(
BIGNUM
 *
r
,c⁄° BIGNUM *
a
,

552 
BN_MONT_CTX
 *
m⁄t
, 
BN_CTX
 *
˘x
);

553 
BN_MONT_CTX_‰ì
(
BN_MONT_CTX
 *
m⁄t
);

554 
BN_MONT_CTX_£t
(
BN_MONT_CTX
 *
m⁄t
,c⁄° 
BIGNUM
 *
mod
,
BN_CTX
 *
˘x
);

555 
BN_MONT_CTX
 *
BN_MONT_CTX_c›y
(BN_MONT_CTX *
to
,BN_MONT_CTX *
‰om
);

556 
BN_MONT_CTX
 *
BN_MONT_CTX_£t_locked
(BN_MONT_CTX **
pm⁄t
, 
lock
,

557 c⁄° 
BIGNUM
 *
mod
, 
BN_CTX
 *
˘x
);

560 
	#BN_BLINDING_NO_UPDATE
 0x00000001

	)

561 
	#BN_BLINDING_NO_RECREATE
 0x00000002

	)

563 
BN_BLINDING
 *
BN_BLINDING_√w
(c⁄° 
BIGNUM
 *
A
, c⁄° BIGNUM *
Ai
, BIGNUM *
mod
);

564 
BN_BLINDING_‰ì
(
BN_BLINDING
 *
b
);

565 
BN_BLINDING_upd©e
(
BN_BLINDING
 *
b
,
BN_CTX
 *
˘x
);

566 
BN_BLINDING_c⁄vît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

567 
BN_BLINDING_övît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

568 
BN_BLINDING_c⁄vît_ex
(
BIGNUM
 *
n
, BIGNUM *
r
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *);

569 
BN_BLINDING_övît_ex
(
BIGNUM
 *
n
, c⁄° BIGNUM *
r
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *);

570 
BN_BLINDING_gë_thªad_id
(c⁄° 
BN_BLINDING
 *);

571 
BN_BLINDING_£t_thªad_id
(
BN_BLINDING
 *, );

572 
BN_BLINDING_gë_Êags
(c⁄° 
BN_BLINDING
 *);

573 
BN_BLINDING_£t_Êags
(
BN_BLINDING
 *, );

574 
BN_BLINDING
 *
BN_BLINDING_¸óã_∑øm
(BN_BLINDING *
b
,

575 c⁄° 
BIGNUM
 *
e
, BIGNUM *
m
, 
BN_CTX
 *
˘x
,

576 (*
bn_mod_exp
)(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

577 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
),

578 
BN_MONT_CTX
 *
m_˘x
);

580 #i‚de‡
OPENSSL_NO_DEPRECATED


581 
BN_£t_∑øms
(
mul
,
high
,
low
,
m⁄t
);

582 
BN_gë_∑øms
(
which
);

585 
BN_RECP_CTX_öô
(
BN_RECP_CTX
 *
ª˝
);

586 
BN_RECP_CTX
 *
BN_RECP_CTX_√w
();

587 
BN_RECP_CTX_‰ì
(
BN_RECP_CTX
 *
ª˝
);

588 
BN_RECP_CTX_£t
(
BN_RECP_CTX
 *
ª˝
,c⁄° 
BIGNUM
 *
rdiv
,
BN_CTX
 *
˘x
);

589 
BN_mod_mul_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
x
, c⁄° BIGNUM *
y
,

590 
BN_RECP_CTX
 *
ª˝
,
BN_CTX
 *
˘x
);

591 
BN_mod_exp_ª˝
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

592 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

593 
BN_div_ª˝
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
,

594 
BN_RECP_CTX
 *
ª˝
, 
BN_CTX
 *
˘x
);

605 
BN_GF2m_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

606 
	#BN_GF2m_sub
(
r
, 
a
, 
b
Ë
	`BN_GF2m_add
‘,á, b)

	)

607 
BN_GF2m_mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
);

608 
BN_GF2m_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

609 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

610 
BN_GF2m_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

611 
BN_CTX
 *
˘x
);

612 
BN_GF2m_mod_öv
(
BIGNUM
 *
r
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
p
,

613 
BN_CTX
 *
˘x
);

614 
BN_GF2m_mod_div
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

615 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

616 
BN_GF2m_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

617 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

618 
BN_GF2m_mod_sqπ
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

619 
BN_CTX
 *
˘x
);

620 
BN_GF2m_mod_sﬁve_quad
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

621 
BN_CTX
 *
˘x
);

622 
	#BN_GF2m_cmp
(
a
, 
b
Ë
	`BN_ucmp
(◊), (b))

	)

628 
BN_GF2m_mod_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° 
p
[]);

630 
BN_GF2m_mod_mul_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

631 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

632 
BN_GF2m_mod_sqr_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° 
p
[],

633 
BN_CTX
 *
˘x
);

634 
BN_GF2m_mod_öv_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
b
, c⁄° 
p
[],

635 
BN_CTX
 *
˘x
);

636 
BN_GF2m_mod_div_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

637 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

638 
BN_GF2m_mod_exp_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

639 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

640 
BN_GF2m_mod_sqπ_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

641 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

642 
BN_GF2m_mod_sﬁve_quad_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

643 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

644 
BN_GF2m_pﬁy2¨r
(c⁄° 
BIGNUM
 *
a
, 
p
[], 
max
);

645 
BN_GF2m_¨r2pﬁy
(c⁄° 
p
[], 
BIGNUM
 *
a
);

649 
BN_ni°_mod_192
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

650 
BN_ni°_mod_224
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

651 
BN_ni°_mod_256
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

652 
BN_ni°_mod_384
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

653 
BN_ni°_mod_521
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

655 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_192
();

656 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_224
();

657 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_256
();

658 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_384
();

659 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_521
();

663 
	#bn_ex∑nd
(
a
,
bôs
Ë((((((bôs+
BN_BITS2
-1))/BN_BITS2)Ë<◊)->
dmax
)?\

664 (
a
):
	`bn_ex∑nd2
(◊),(
bôs
+
BN_BITS2
-1)/BN_BITS2))

	)

665 
	#bn_wex∑nd
(
a
,
w‹ds
Ë(((w‹dsË<◊)->
dmax
)?◊):
	`bn_ex∑nd2
(◊),(w‹ds)))

	)

666 
BIGNUM
 *
bn_ex∑nd2
(BIGNUM *
a
, 
w‹ds
);

667 #i‚de‡
OPENSSL_NO_DEPRECATED


668 
BIGNUM
 *
bn_dup_ex∑nd
(c⁄° BIGNUM *
a
, 
w‹ds
);

699 #ifde‡
BN_DEBUG


702 
	~<as£π.h
>

704 #ifde‡
BN_DEBUG_RAND


706 #i‚de‡
RAND_p£udo_byãs


707 
RAND_p£udo_byãs
(*
buf
,
num
);

708 
	#BN_DEBUG_TRIX


	)

710 
	#bn_pﬁluã
(
a
) \

712 c⁄° 
BIGNUM
 *
_bnum1
 = (
a
); \

713 if(
_bnum1
->
t›
 < _bnum1->
dmax
) { \

714 
_tmp_ch¨
; \

718 
BN_ULONG
 *
_nŸ_c⁄°
; \

719 
	`mem˝y
(&
_nŸ_c⁄°
, &
_bnum1
->
d
, (
BN_ULONG
*)); \

720 
	`RAND_p£udo_byãs
(&
_tmp_ch¨
, 1); \

721 
	`mem£t
((*)(
_nŸ_c⁄°
 + 
_bnum1
->
t›
), 
_tmp_ch¨
, \

722 (
_bnum1
->
dmax
 - _bnum1->
t›
Ë* (
BN_ULONG
)); \

724 } 0)

	)

725 #ifde‡
BN_DEBUG_TRIX


726 #unde‡
RAND_p£udo_byãs


729 
	#bn_pﬁluã
(
a
)

	)

731 
	#bn_check_t›
(
a
) \

733 c⁄° 
BIGNUM
 *
_bnum2
 = (
a
); \

734 i‡(
_bnum2
 !
NULL
) { \

735 
	`as£π
((
_bnum2
->
t›
 == 0) || \

736 (
_bnum2
->
d
[_bnum2->
t›
 - 1] != 0)); \

737 
	`bn_pﬁluã
(
_bnum2
); \

739 } 0)

	)

741 
	#bn_fix_t›
(
a
Ë
	`bn_check_t›
◊)

	)

745 
	#bn_pﬁluã
(
a
)

	)

746 
	#bn_check_t›
(
a
)

	)

747 
	#bn_fix_t›
(
a
Ë
	`bn_c‹ª˘_t›
◊)

	)

751 
	#bn_c‹ª˘_t›
(
a
) \

753 
BN_ULONG
 *
·l
; \

754 i‡((
a
)->
t›
 > 0) \

756 
·l
&((
a
)->
d
[◊)->
t›
-1]); (a)->top > 0; (a)->top--) \

757 i‡(*(
·l
--)) ; \

759 
	`bn_pﬁluã
(
a
); \

760 }

	)

762 
BN_ULONG
 
bn_mul_add_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, 
num
, BN_ULONG 
w
);

763 
BN_ULONG
 
bn_mul_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, 
num
, BN_ULONG 
w
);

764 
bn_sqr_w‹ds
(
BN_ULONG
 *
Ω
, c⁄° BN_ULONG *
≠
, 
num
);

765 
BN_ULONG
 
bn_div_w‹ds
(BN_ULONG 
h
, BN_ULONG 
l
, BN_ULONG 
d
);

766 
BN_ULONG
 
bn_add_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, c⁄° BN_ULONG *
bp
,
num
);

767 
BN_ULONG
 
bn_sub_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, c⁄° BN_ULONG *
bp
,
num
);

770 
BIGNUM
 *
gë_rfc2409_¥ime_768
(BIGNUM *
bn
);

771 
BIGNUM
 *
gë_rfc2409_¥ime_1024
(BIGNUM *
bn
);

774 
BIGNUM
 *
gë_rfc3526_¥ime_1536
(BIGNUM *
bn
);

775 
BIGNUM
 *
gë_rfc3526_¥ime_2048
(BIGNUM *
bn
);

776 
BIGNUM
 *
gë_rfc3526_¥ime_3072
(BIGNUM *
bn
);

777 
BIGNUM
 *
gë_rfc3526_¥ime_4096
(BIGNUM *
bn
);

778 
BIGNUM
 *
gë_rfc3526_¥ime_6144
(BIGNUM *
bn
);

779 
BIGNUM
 *
gë_rfc3526_¥ime_8192
(BIGNUM *
bn
);

781 
BN_b¡e°_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
,
bŸtom
);

787 
ERR_lﬂd_BN_°rögs
();

792 
	#BN_F_BNRAND
 127

	)

793 
	#BN_F_BN_BLINDING_CONVERT_EX
 100

	)

794 
	#BN_F_BN_BLINDING_CREATE_PARAM
 128

	)

795 
	#BN_F_BN_BLINDING_INVERT_EX
 101

	)

796 
	#BN_F_BN_BLINDING_NEW
 102

	)

797 
	#BN_F_BN_BLINDING_UPDATE
 103

	)

798 
	#BN_F_BN_BN2DEC
 104

	)

799 
	#BN_F_BN_BN2HEX
 105

	)

800 
	#BN_F_BN_CTX_GET
 116

	)

801 
	#BN_F_BN_CTX_NEW
 106

	)

802 
	#BN_F_BN_CTX_START
 129

	)

803 
	#BN_F_BN_DIV
 107

	)

804 
	#BN_F_BN_DIV_NO_BRANCH
 138

	)

805 
	#BN_F_BN_DIV_RECP
 130

	)

806 
	#BN_F_BN_EXP
 123

	)

807 
	#BN_F_BN_EXPAND2
 108

	)

808 
	#BN_F_BN_EXPAND_INTERNAL
 120

	)

809 
	#BN_F_BN_GF2M_MOD
 131

	)

810 
	#BN_F_BN_GF2M_MOD_EXP
 132

	)

811 
	#BN_F_BN_GF2M_MOD_MUL
 133

	)

812 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD
 134

	)

813 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR
 135

	)

814 
	#BN_F_BN_GF2M_MOD_SQR
 136

	)

815 
	#BN_F_BN_GF2M_MOD_SQRT
 137

	)

816 
	#BN_F_BN_MOD_EXP2_MONT
 118

	)

817 
	#BN_F_BN_MOD_EXP_MONT
 109

	)

818 
	#BN_F_BN_MOD_EXP_MONT_CONSTTIME
 124

	)

819 
	#BN_F_BN_MOD_EXP_MONT_WORD
 117

	)

820 
	#BN_F_BN_MOD_EXP_RECP
 125

	)

821 
	#BN_F_BN_MOD_EXP_SIMPLE
 126

	)

822 
	#BN_F_BN_MOD_INVERSE
 110

	)

823 
	#BN_F_BN_MOD_INVERSE_NO_BRANCH
 139

	)

824 
	#BN_F_BN_MOD_LSHIFT_QUICK
 119

	)

825 
	#BN_F_BN_MOD_MUL_RECIPROCAL
 111

	)

826 
	#BN_F_BN_MOD_SQRT
 121

	)

827 
	#BN_F_BN_MPI2BN
 112

	)

828 
	#BN_F_BN_NEW
 113

	)

829 
	#BN_F_BN_RAND
 114

	)

830 
	#BN_F_BN_RAND_RANGE
 122

	)

831 
	#BN_F_BN_USUB
 115

	)

834 
	#BN_R_ARG2_LT_ARG3
 100

	)

835 
	#BN_R_BAD_RECIPROCAL
 101

	)

836 
	#BN_R_BIGNUM_TOO_LONG
 114

	)

837 
	#BN_R_CALLED_WITH_EVEN_MODULUS
 102

	)

838 
	#BN_R_DIV_BY_ZERO
 103

	)

839 
	#BN_R_ENCODING_ERROR
 104

	)

840 
	#BN_R_EXPAND_ON_STATIC_BIGNUM_DATA
 105

	)

841 
	#BN_R_INPUT_NOT_REDUCED
 110

	)

842 
	#BN_R_INVALID_LENGTH
 106

	)

843 
	#BN_R_INVALID_RANGE
 115

	)

844 
	#BN_R_NOT_A_SQUARE
 111

	)

845 
	#BN_R_NOT_INITIALIZED
 107

	)

846 
	#BN_R_NO_INVERSE
 108

	)

847 
	#BN_R_NO_SOLUTION
 116

	)

848 
	#BN_R_P_IS_NOT_PRIME
 112

	)

849 
	#BN_R_TOO_MANY_ITERATIONS
 113

	)

850 
	#BN_R_TOO_MANY_TEMPORARY_VARIABLES
 109

	)

852 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/buffer.h

59 #i‚de‡
HEADER_BUFFER_H


60 
	#HEADER_BUFFER_H


	)

62 
	~<›ís¶/os¶_typ.h
>

64 #ifde‡ 
__˝lu•lus


68 
	~<°ddef.h
>

70 #i‡!
deföed
(
NO_SYS_TYPES_H
)

71 
	~<sys/ty≥s.h
>

77 
	sbuf_mem_°


79 
Àngth
;

80 *
d©a
;

81 
max
;

84 
BUF_MEM
 *
BUF_MEM_√w
();

85 
BUF_MEM_‰ì
(
BUF_MEM
 *
a
);

86 
BUF_MEM_grow
(
BUF_MEM
 *
°r
, 
Àn
);

87 
BUF_MEM_grow_˛ón
(
BUF_MEM
 *
°r
, 
Àn
);

88 * 
BUF_°rdup
(c⁄° *
°r
);

89 * 
BUF_°∫dup
(c⁄° *
°r
, 
size_t
 
siz
);

90 * 
BUF_memdup
(c⁄° *
d©a
, 
size_t
 
siz
);

93 
size_t
 
BUF_°æ˝y
(*
d°
,c⁄° *
§c
,size_à
siz
);

94 
size_t
 
BUF_°æˇt
(*
d°
,c⁄° *
§c
,size_à
siz
);

101 
ERR_lﬂd_BUF_°rögs
();

106 
	#BUF_F_BUF_MEMDUP
 103

	)

107 
	#BUF_F_BUF_MEM_GROW
 100

	)

108 
	#BUF_F_BUF_MEM_GROW_CLEAN
 105

	)

109 
	#BUF_F_BUF_MEM_NEW
 101

	)

110 
	#BUF_F_BUF_STRDUP
 102

	)

111 
	#BUF_F_BUF_STRNDUP
 104

	)

115 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/camellia.h

52 #i‚de‡
HEADER_CAMELLIA_H


53 
	#HEADER_CAMELLIA_H


	)

55 
	~<›ís¶/›ís¶c⁄f.h
>

57 #ifde‡
OPENSSL_NO_CAMELLIA


58 #îr‹ 
CAMELLIA
 
is
 
dißbÀd
.

61 
	#CAMELLIA_ENCRYPT
 1

	)

62 
	#CAMELLIA_DECRYPT
 0

	)

67 #ifde‡ 
__˝lu•lus


73 
	#CAMELLIA_BLOCK_SIZE
 16

	)

74 
	#CAMELLIA_TABLE_BYTE_LEN
 272

	)

75 
	#CAMELLIA_TABLE_WORD_LEN
 (
CAMELLIA_TABLE_BYTE_LEN
 / 4)

	)

78 
	tKEY_TABLE_TYPE
[
CAMELLIA_TABLE_WORD_LEN
];

80 
	sˇmñlü_key_°


82 
KEY_TABLE_TYPE
 
rd_key
;

83 
bôLígth
;

84 (*
íc
)(c⁄° *
subkey
, *
io
);

85 (*
dec
)(c⁄° *
subkey
, *
io
);

88 
ˇmñlü_key_°
 
	tCAMELLIA_KEY
;

90 #ifde‡
OPENSSL_FIPS


91 
¥iv©e_Camñlü_£t_key
(c⁄° *
u£rKey
, c⁄° 
bôs
,

92 
CAMELLIA_KEY
 *
key
);

95 
Camñlü_£t_key
(c⁄° *
u£rKey
, c⁄° 
bôs
,

96 
CAMELLIA_KEY
 *
key
);

98 
Camñlü_í¸y±
(c⁄° *
ö
, *
out
,

99 c⁄° 
CAMELLIA_KEY
 *
key
);

100 
Camñlü_de¸y±
(c⁄° *
ö
, *
out
,

101 c⁄° 
CAMELLIA_KEY
 *
key
);

103 
Camñlü_ecb_í¸y±
(c⁄° *
ö
, *
out
,

104 c⁄° 
CAMELLIA_KEY
 *
key
, c⁄° 
íc
);

105 
Camñlü_cbc_í¸y±
(c⁄° *
ö
, *
out
,

106 c⁄° 
Àngth
, c⁄° 
CAMELLIA_KEY
 *
key
,

107 *
ivec
, c⁄° 
íc
);

108 
Camñlü_cfb128_í¸y±
(c⁄° *
ö
, *
out
,

109 c⁄° 
Àngth
, c⁄° 
CAMELLIA_KEY
 *
key
,

110 *
ivec
, *
num
, c⁄° 
íc
);

111 
Camñlü_cfb1_í¸y±
(c⁄° *
ö
, *
out
,

112 c⁄° 
Àngth
, c⁄° 
CAMELLIA_KEY
 *
key
,

113 *
ivec
, *
num
, c⁄° 
íc
);

114 
Camñlü_cfb8_í¸y±
(c⁄° *
ö
, *
out
,

115 c⁄° 
Àngth
, c⁄° 
CAMELLIA_KEY
 *
key
,

116 *
ivec
, *
num
, c⁄° 
íc
);

117 
Camñlü_cfbr_í¸y±_block
(c⁄° *
ö
,*
out
,

118 c⁄° 
nbôs
,c⁄° 
CAMELLIA_KEY
 *
key
,

119 *
ivec
,c⁄° 
íc
);

120 
Camñlü_ofb128_í¸y±
(c⁄° *
ö
, *
out
,

121 c⁄° 
Àngth
, c⁄° 
CAMELLIA_KEY
 *
key
,

122 *
ivec
, *
num
);

123 
Camñlü_˘r128_í¸y±
(c⁄° *
ö
, *
out
,

124 c⁄° 
Àngth
, c⁄° 
CAMELLIA_KEY
 *
key
,

125 
ivec
[
CAMELLIA_BLOCK_SIZE
],

126 
ecou¡_buf
[
CAMELLIA_BLOCK_SIZE
],

127 *
num
);

129 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/cast.h

59 #i‚de‡
HEADER_CAST_H


60 
	#HEADER_CAST_H


	)

62 #ifde‡ 
__˝lu•lus


66 
	~<›ís¶/›ís¶c⁄f.h
>

68 #ifde‡
OPENSSL_NO_CAST


69 #îr‹ 
CAST
 
is
 
dißbÀd
.

72 
	#CAST_ENCRYPT
 1

	)

73 
	#CAST_DECRYPT
 0

	)

75 
	#CAST_LONG
 

	)

77 
	#CAST_BLOCK
 8

	)

78 
	#CAST_KEY_LENGTH
 16

	)

80 
	sˇ°_key_°


82 
CAST_LONG
 
d©a
[32];

83 
sh‹t_key
;

84 } 
	tCAST_KEY
;

86 #ifde‡
OPENSSL_FIPS


87 
¥iv©e_CAST_£t_key
(
CAST_KEY
 *
key
, 
Àn
, c⁄° *
d©a
);

89 
CAST_£t_key
(
CAST_KEY
 *
key
, 
Àn
, c⁄° *
d©a
);

90 
CAST_ecb_í¸y±
(c⁄° *
ö
, *
out
, c⁄° 
CAST_KEY
 *
key
,

91 
íc
);

92 
CAST_í¸y±
(
CAST_LONG
 *
d©a
, c⁄° 
CAST_KEY
 *
key
);

93 
CAST_de¸y±
(
CAST_LONG
 *
d©a
, c⁄° 
CAST_KEY
 *
key
);

94 
CAST_cbc_í¸y±
(c⁄° *
ö
, *
out
, 
Àngth
,

95 c⁄° 
CAST_KEY
 *
ks
, *
iv
, 
íc
);

96 
CAST_cfb64_í¸y±
(c⁄° *
ö
, *
out
,

97 
Àngth
, c⁄° 
CAST_KEY
 *
scheduÀ
, *
ivec
,

98 *
num
, 
íc
);

99 
CAST_ofb64_í¸y±
(c⁄° *
ö
, *
out
,

100 
Àngth
, c⁄° 
CAST_KEY
 *
scheduÀ
, *
ivec
,

101 *
num
);

103 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/comp.h

2 #i‚de‡
HEADER_COMP_H


3 
	#HEADER_COMP_H


	)

5 
	~<›ís¶/¸y±o.h
>

7 #ifde‡ 
__˝lu•lus


11 
comp_˘x_°
 
	tCOMP_CTX
;

13 
	scomp_mëhod_°


15 
ty≥
;

16 c⁄° *
«me
;

17 (*
öô
)(
COMP_CTX
 *
˘x
);

18 (*
föish
)(
COMP_CTX
 *
˘x
);

19 (*
com¥ess
)(
COMP_CTX
 *
˘x
,

20 *
out
, 
ﬁí
,

21 *
ö
, 
ûí
);

22 (*
ex∑nd
)(
COMP_CTX
 *
˘x
,

23 *
out
, 
ﬁí
,

24 *
ö
, 
ûí
);

26 (*
˘æ
)();

27 (*
ˇŒback_˘æ
)();

28 } 
	tCOMP_METHOD
;

30 
	scomp_˘x_°


32 
COMP_METHOD
 *
mëh
;

33 
com¥ess_ö
;

34 
com¥ess_out
;

35 
ex∑nd_ö
;

36 
ex∑nd_out
;

38 
CRYPTO_EX_DATA
 
ex_d©a
;

42 
COMP_CTX
 *
COMP_CTX_√w
(
COMP_METHOD
 *
mëh
);

43 
COMP_CTX_‰ì
(
COMP_CTX
 *
˘x
);

44 
COMP_com¥ess_block
(
COMP_CTX
 *
˘x
, *
out
, 
ﬁí
,

45 *
ö
, 
ûí
);

46 
COMP_ex∑nd_block
(
COMP_CTX
 *
˘x
, *
out
, 
ﬁí
,

47 *
ö
, 
ûí
);

48 
COMP_METHOD
 *
COMP_æe
();

49 
COMP_METHOD
 *
COMP_zlib
();

50 
COMP_zlib_˛ónup
();

52 #ifde‡
HEADER_BIO_H


53 #ifde‡
ZLIB


54 
BIO_METHOD
 *
BIO_f_zlib
();

62 
ERR_lﬂd_COMP_°rögs
();

67 
	#COMP_F_BIO_ZLIB_FLUSH
 99

	)

68 
	#COMP_F_BIO_ZLIB_NEW
 100

	)

69 
	#COMP_F_BIO_ZLIB_READ
 101

	)

70 
	#COMP_F_BIO_ZLIB_WRITE
 102

	)

73 
	#COMP_R_ZLIB_DEFLATE_ERROR
 99

	)

74 
	#COMP_R_ZLIB_INFLATE_ERROR
 100

	)

75 
	#COMP_R_ZLIB_NOT_SUPPORTED
 101

	)

77 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/conf.h

59 #i‚de‡ 
HEADER_CONF_H


60 
	#HEADER_CONF_H


	)

62 
	~<›ís¶/bio.h
>

63 
	~<›ís¶/lhash.h
>

64 
	~<›ís¶/°ack.h
>

65 
	~<›ís¶/ß„°ack.h
>

66 
	~<›ís¶/e_os2.h
>

68 
	~<›ís¶/os¶_typ.h
>

70 #ifde‡ 
__˝lu•lus


76 *
£˘i⁄
;

77 *
«me
;

78 *
vÆue
;

79 } 
	tCONF_VALUE
;

81 
DECLARE_STACK_OF
(
CONF_VALUE
)

82 
DECLARE_STACK_OF
(
CONF_MODULE
)

83 
DECLARE_STACK_OF
(
CONF_IMODULE
)

85 
c⁄f_°
;

86 
c⁄f_mëhod_°
;

87 
c⁄f_mëhod_°
 
	tCONF_METHOD
;

89 
	sc⁄f_mëhod_°


91 c⁄° *
«me
;

92 
CONF
 *(*
¸óã
)(
CONF_METHOD
 *
mëh
);

93 (*
öô
)(
CONF
 *
c⁄f
);

94 (*
de°roy
)(
CONF
 *
c⁄f
);

95 (*
de°roy_d©a
)(
CONF
 *
c⁄f
);

96 (*
lﬂd_bio
)(
CONF
 *
c⁄f
, 
BIO
 *
bp
, *
ñöe
);

97 (*
dump
)(c⁄° 
CONF
 *
c⁄f
, 
BIO
 *
bp
);

98 (*
is_numbî
)(c⁄° 
CONF
 *
c⁄f
, 
c
);

99 (*
to_öt
)(c⁄° 
CONF
 *
c⁄f
, 
c
);

100 (*
lﬂd
)(
CONF
 *
c⁄f
, c⁄° *
«me
, *
ñöe
);

105 
c⁄f_imoduÀ_°
 
	tCONF_IMODULE
;

106 
c⁄f_moduÀ_°
 
	tCONF_MODULE
;

109 
	tc⁄f_öô_func
(
	tCONF_IMODULE
 *
	tmd
, c⁄° 
	tCONF
 *
	t˙f
);

110 
	tc⁄f_föish_func
(
	tCONF_IMODULE
 *
	tmd
);

112 
	#CONF_MFLAGS_IGNORE_ERRORS
 0x1

	)

113 
	#CONF_MFLAGS_IGNORE_RETURN_CODES
 0x2

	)

114 
	#CONF_MFLAGS_SILENT
 0x4

	)

115 
	#CONF_MFLAGS_NO_DSO
 0x8

	)

116 
	#CONF_MFLAGS_IGNORE_MISSING_FILE
 0x10

	)

117 
	#CONF_MFLAGS_DEFAULT_SECTION
 0x20

	)

119 
CONF_£t_deÁu…_mëhod
(
CONF_METHOD
 *
mëh
);

120 
CONF_£t_nc⁄f
(
CONF
 *
c⁄f
,
LHASH
 *
hash
);

121 
LHASH
 *
CONF_lﬂd
(LHASH *
c⁄f
,c⁄° *
fûe
,*
ñöe
);

122 #i‚de‡
OPENSSL_NO_FP_API


123 
LHASH
 *
CONF_lﬂd_Â
(LHASH *
c⁄f
, 
FILE
 *
Â
,*
ñöe
);

125 
LHASH
 *
CONF_lﬂd_bio
(LHASH *
c⁄f
, 
BIO
 *
bp
,*
ñöe
);

126 
STACK_OF
(
CONF_VALUE
Ë*
CONF_gë_£˘i⁄
(
LHASH
 *
c⁄f
,c⁄° *
£˘i⁄
);

127 *
CONF_gë_°rög
(
LHASH
 *
c⁄f
,c⁄° *
group
,c⁄° *
«me
);

128 
CONF_gë_numbî
(
LHASH
 *
c⁄f
,c⁄° *
group
,c⁄° *
«me
);

129 
CONF_‰ì
(
LHASH
 *
c⁄f
);

130 
CONF_dump_Â
(
LHASH
 *
c⁄f
, 
FILE
 *
out
);

131 
CONF_dump_bio
(
LHASH
 *
c⁄f
, 
BIO
 *
out
);

133 
OPENSSL_c⁄fig
(c⁄° *
c⁄fig_«me
);

134 
OPENSSL_no_c⁄fig
();

139 
	sc⁄f_°


141 
CONF_METHOD
 *
mëh
;

142 *
mëh_d©a
;

143 
LHASH
 *
d©a
;

146 
CONF
 *
NCONF_√w
(
CONF_METHOD
 *
mëh
);

147 
CONF_METHOD
 *
NCONF_deÁu…
();

148 
CONF_METHOD
 *
NCONF_WIN32
();

150 
CONF_METHOD
 *
NCONF_XML
();

152 
NCONF_‰ì
(
CONF
 *
c⁄f
);

153 
NCONF_‰ì_d©a
(
CONF
 *
c⁄f
);

155 
NCONF_lﬂd
(
CONF
 *
c⁄f
,c⁄° *
fûe
,*
ñöe
);

156 #i‚de‡
OPENSSL_NO_FP_API


157 
NCONF_lﬂd_Â
(
CONF
 *
c⁄f
, 
FILE
 *
Â
,*
ñöe
);

159 
NCONF_lﬂd_bio
(
CONF
 *
c⁄f
, 
BIO
 *
bp
,*
ñöe
);

160 
STACK_OF
(
CONF_VALUE
Ë*
NCONF_gë_£˘i⁄
(c⁄° 
CONF
 *
c⁄f
,c⁄° *
£˘i⁄
);

161 *
NCONF_gë_°rög
(c⁄° 
CONF
 *
c⁄f
,c⁄° *
group
,c⁄° *
«me
);

162 
NCONF_gë_numbî_e
(c⁄° 
CONF
 *
c⁄f
,c⁄° *
group
,c⁄° *
«me
,

163 *
ªsu…
);

164 
NCONF_dump_Â
(c⁄° 
CONF
 *
c⁄f
, 
FILE
 *
out
);

165 
NCONF_dump_bio
(c⁄° 
CONF
 *
c⁄f
, 
BIO
 *
out
);

169 
NCONF_gë_numbî
(
CONF
 *
c⁄f
,*
group
,*
«me
);

171 
	#NCONF_gë_numbî
(
c
,
g
,
n
,
r
Ë
	`NCONF_gë_numbî_e
(c,g,n,r)

	)

176 
CONF_moduÀs_lﬂd
(c⁄° 
CONF
 *
˙f
, c⁄° *
≠≤ame
,

177 
Êags
);

178 
CONF_moduÀs_lﬂd_fûe
(c⁄° *
fûíame
, c⁄° *
≠≤ame
,

179 
Êags
);

180 
CONF_moduÀs_u∆ﬂd
(
Æl
);

181 
CONF_moduÀs_föish
();

182 
CONF_moduÀs_‰ì
();

183 
CONF_moduÀ_add
(c⁄° *
«me
, 
c⁄f_öô_func
 *
ifunc
,

184 
c⁄f_föish_func
 *
ffunc
);

186 c⁄° *
CONF_imoduÀ_gë_«me
(c⁄° 
CONF_IMODULE
 *
md
);

187 c⁄° *
CONF_imoduÀ_gë_vÆue
(c⁄° 
CONF_IMODULE
 *
md
);

188 *
CONF_imoduÀ_gë_u§_d©a
(c⁄° 
CONF_IMODULE
 *
md
);

189 
CONF_imoduÀ_£t_u§_d©a
(
CONF_IMODULE
 *
md
, *
u§_d©a
);

190 
CONF_MODULE
 *
CONF_imoduÀ_gë_moduÀ
(c⁄° 
CONF_IMODULE
 *
md
);

191 
CONF_imoduÀ_gë_Êags
(c⁄° 
CONF_IMODULE
 *
md
);

192 
CONF_imoduÀ_£t_Êags
(
CONF_IMODULE
 *
md
, 
Êags
);

193 *
CONF_moduÀ_gë_u§_d©a
(
CONF_MODULE
 *
pmod
);

194 
CONF_moduÀ_£t_u§_d©a
(
CONF_MODULE
 *
pmod
, *
u§_d©a
);

196 *
CONF_gë1_deÁu…_c⁄fig_fûe
();

198 
CONF_∑r£_li°
(c⁄° *
li°
, 
£p
, 
no•c
,

199 (*
li°_cb
)(c⁄° *
ñem
, 
Àn
, *
u§
), *
¨g
);

201 
OPENSSL_lﬂd_buûtö_moduÀs
();

207 
ERR_lﬂd_CONF_°rögs
();

212 
	#CONF_F_CONF_DUMP_FP
 104

	)

213 
	#CONF_F_CONF_LOAD
 100

	)

214 
	#CONF_F_CONF_LOAD_BIO
 102

	)

215 
	#CONF_F_CONF_LOAD_FP
 103

	)

216 
	#CONF_F_CONF_MODULES_LOAD
 116

	)

217 
	#CONF_F_DEF_LOAD
 120

	)

218 
	#CONF_F_DEF_LOAD_BIO
 121

	)

219 
	#CONF_F_MODULE_INIT
 115

	)

220 
	#CONF_F_MODULE_LOAD_DSO
 117

	)

221 
	#CONF_F_MODULE_RUN
 118

	)

222 
	#CONF_F_NCONF_DUMP_BIO
 105

	)

223 
	#CONF_F_NCONF_DUMP_FP
 106

	)

224 
	#CONF_F_NCONF_GET_NUMBER
 107

	)

225 
	#CONF_F_NCONF_GET_NUMBER_E
 112

	)

226 
	#CONF_F_NCONF_GET_SECTION
 108

	)

227 
	#CONF_F_NCONF_GET_STRING
 109

	)

228 
	#CONF_F_NCONF_LOAD
 113

	)

229 
	#CONF_F_NCONF_LOAD_BIO
 110

	)

230 
	#CONF_F_NCONF_LOAD_FP
 114

	)

231 
	#CONF_F_NCONF_NEW
 111

	)

232 
	#CONF_F_STR_COPY
 101

	)

235 
	#CONF_R_ERROR_LOADING_DSO
 110

	)

236 
	#CONF_R_MISSING_CLOSE_SQUARE_BRACKET
 100

	)

237 
	#CONF_R_MISSING_EQUAL_SIGN
 101

	)

238 
	#CONF_R_MISSING_FINISH_FUNCTION
 111

	)

239 
	#CONF_R_MISSING_INIT_FUNCTION
 112

	)

240 
	#CONF_R_MODULE_INITIALIZATION_ERROR
 109

	)

241 
	#CONF_R_NO_CLOSE_BRACE
 102

	)

242 
	#CONF_R_NO_CONF
 105

	)

243 
	#CONF_R_NO_CONF_OR_ENVIRONMENT_VARIABLE
 106

	)

244 
	#CONF_R_NO_SECTION
 107

	)

245 
	#CONF_R_NO_SUCH_FILE
 114

	)

246 
	#CONF_R_NO_VALUE
 108

	)

247 
	#CONF_R_UNABLE_TO_CREATE_NEW_SECTION
 103

	)

248 
	#CONF_R_UNKNOWN_MODULE_NAME
 113

	)

249 
	#CONF_R_VARIABLE_HAS_NO_VALUE
 104

	)

251 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/crypto.h

117 #i‚de‡
HEADER_CRYPTO_H


118 
	#HEADER_CRYPTO_H


	)

120 
	~<°dlib.h
>

122 
	~<›ís¶/e_os2.h
>

124 #i‚de‡
OPENSSL_NO_FP_API


125 
	~<°dio.h
>

128 
	~<›ís¶/°ack.h
>

129 
	~<›ís¶/ß„°ack.h
>

130 
	~<›ís¶/›ís¶v.h
>

131 
	~<›ís¶/os¶_typ.h
>

133 #ifde‡
CHARSET_EBCDIC


134 
	~<›ís¶/ebcdic.h
>

139 
	~<›ís¶/symhacks.h
>

141 #ifde‡ 
__˝lu•lus


148 
	#SSLEAY_VERSION_NUMBER
 
OPENSSL_VERSION_NUMBER


	)

149 
	#SSLEAY_VERSION
 0

	)

151 
	#SSLEAY_CFLAGS
 2

	)

152 
	#SSLEAY_BUILT_ON
 3

	)

153 
	#SSLEAY_PLATFORM
 4

	)

154 
	#SSLEAY_DIR
 5

	)

158 
¸y±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

160 
	tCRYPTO_EX_√w
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

161 
	tidx
, 
	t¨gl
, *
	t¨gp
);

163 
	tCRYPTO_EX_‰ì
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

164 
	tidx
, 
	t¨gl
, *
	t¨gp
);

166 
	tCRYPTO_EX_dup
(
	tCRYPTO_EX_DATA
 *
	tto
, CRYPTO_EX_DATA *
	t‰om
, *
	t‰om_d
,

167 
	tidx
, 
	t¨gl
, *
	t¨gp
);

171 
	s›ís¶_ôem_°


173 
code
;

174 *
vÆue
;

175 
size_t
 
vÆue_size
;

176 
size_t
 *
vÆue_Àngth
;

177 } 
	tOPENSSL_ITEM
;

184 
	#CRYPTO_LOCK_ERR
 1

	)

185 
	#CRYPTO_LOCK_EX_DATA
 2

	)

186 
	#CRYPTO_LOCK_X509
 3

	)

187 
	#CRYPTO_LOCK_X509_INFO
 4

	)

188 
	#CRYPTO_LOCK_X509_PKEY
 5

	)

189 
	#CRYPTO_LOCK_X509_CRL
 6

	)

190 
	#CRYPTO_LOCK_X509_REQ
 7

	)

191 
	#CRYPTO_LOCK_DSA
 8

	)

192 
	#CRYPTO_LOCK_RSA
 9

	)

193 
	#CRYPTO_LOCK_EVP_PKEY
 10

	)

194 
	#CRYPTO_LOCK_X509_STORE
 11

	)

195 
	#CRYPTO_LOCK_SSL_CTX
 12

	)

196 
	#CRYPTO_LOCK_SSL_CERT
 13

	)

197 
	#CRYPTO_LOCK_SSL_SESSION
 14

	)

198 
	#CRYPTO_LOCK_SSL_SESS_CERT
 15

	)

199 
	#CRYPTO_LOCK_SSL
 16

	)

200 
	#CRYPTO_LOCK_SSL_METHOD
 17

	)

201 
	#CRYPTO_LOCK_RAND
 18

	)

202 
	#CRYPTO_LOCK_RAND2
 19

	)

203 
	#CRYPTO_LOCK_MALLOC
 20

	)

204 
	#CRYPTO_LOCK_BIO
 21

	)

205 
	#CRYPTO_LOCK_GETHOSTBYNAME
 22

	)

206 
	#CRYPTO_LOCK_GETSERVBYNAME
 23

	)

207 
	#CRYPTO_LOCK_READDIR
 24

	)

208 
	#CRYPTO_LOCK_RSA_BLINDING
 25

	)

209 
	#CRYPTO_LOCK_DH
 26

	)

210 
	#CRYPTO_LOCK_MALLOC2
 27

	)

211 
	#CRYPTO_LOCK_DSO
 28

	)

212 
	#CRYPTO_LOCK_DYNLOCK
 29

	)

213 
	#CRYPTO_LOCK_ENGINE
 30

	)

214 
	#CRYPTO_LOCK_UI
 31

	)

215 
	#CRYPTO_LOCK_ECDSA
 32

	)

216 
	#CRYPTO_LOCK_EC
 33

	)

217 
	#CRYPTO_LOCK_ECDH
 34

	)

218 
	#CRYPTO_LOCK_BN
 35

	)

219 
	#CRYPTO_LOCK_EC_PRE_COMP
 36

	)

220 
	#CRYPTO_LOCK_STORE
 37

	)

221 
	#CRYPTO_LOCK_COMP
 38

	)

222 #i‚de‡
OPENSSL_FIPS


223 
	#CRYPTO_NUM_LOCKS
 39

	)

225 
	#CRYPTO_LOCK_FIPS
 39

	)

226 
	#CRYPTO_LOCK_FIPS2
 40

	)

227 
	#CRYPTO_NUM_LOCKS
 41

	)

230 
	#CRYPTO_LOCK
 1

	)

231 
	#CRYPTO_UNLOCK
 2

	)

232 
	#CRYPTO_READ
 4

	)

233 
	#CRYPTO_WRITE
 8

	)

235 #i‚de‡
OPENSSL_NO_LOCKING


236 #i‚de‡
CRYPTO_w_lock


237 
	#CRYPTO_w_lock
(
ty≥
) \

238 
	`CRYPTO_lock
(
CRYPTO_LOCK
|
CRYPTO_WRITE
,
ty≥
,
__FILE__
,
__LINE__
)

	)

239 
	#CRYPTO_w_u∆ock
(
ty≥
) \

240 
	`CRYPTO_lock
(
CRYPTO_UNLOCK
|
CRYPTO_WRITE
,
ty≥
,
__FILE__
,
__LINE__
)

	)

241 
	#CRYPTO_r_lock
(
ty≥
) \

242 
	`CRYPTO_lock
(
CRYPTO_LOCK
|
CRYPTO_READ
,
ty≥
,
__FILE__
,
__LINE__
)

	)

243 
	#CRYPTO_r_u∆ock
(
ty≥
) \

244 
	`CRYPTO_lock
(
CRYPTO_UNLOCK
|
CRYPTO_READ
,
ty≥
,
__FILE__
,
__LINE__
)

	)

245 
	#CRYPTO_add
(
addr
,
amou¡
,
ty≥
) \

246 
	`CRYPTO_add_lock
(
addr
,
amou¡
,
ty≥
,
__FILE__
,
__LINE__
)

	)

249 
	#CRYPTO_w_lock
(
a
)

	)

250 
	#CRYPTO_w_u∆ock
(
a
)

	)

251 
	#CRYPTO_r_lock
(
a
)

	)

252 
	#CRYPTO_r_u∆ock
(
a
)

	)

253 
	#CRYPTO_add
(
a
,
b
,
c
Ë((*◊))+=(b))

	)

262 
ª„ªn˚s
;

263 
CRYPTO_dy∆ock_vÆue
 *
d©a
;

264 } 
	tCRYPTO_dy∆ock
;

270 
	#CRYPTO_MEM_CHECK_OFF
 0x0

	)

271 
	#CRYPTO_MEM_CHECK_ON
 0x1

	)

272 
	#CRYPTO_MEM_CHECK_ENABLE
 0x2

	)

273 
	#CRYPTO_MEM_CHECK_DISABLE
 0x3

	)

279 
	#V_CRYPTO_MDEBUG_TIME
 0x1

	)

281 
	#V_CRYPTO_MDEBUG_THREAD
 0x2

	)

283 
	#V_CRYPTO_MDEBUG_ALL
 (
V_CRYPTO_MDEBUG_TIME
 | 
V_CRYPTO_MDEBUG_THREAD
)

	)

287 
bio_°
 
	tBIO_dummy
;

289 
	s¸y±o_ex_d©a_°


291 
STACK
 *
sk
;

292 
dummy
;

298 
	s¸y±o_ex_d©a_func_°


300 
¨gl
;

301 *
¨gp
;

302 
CRYPTO_EX_√w
 *
√w_func
;

303 
CRYPTO_EX_‰ì
 *
‰ì_func
;

304 
CRYPTO_EX_dup
 *
dup_func
;

305 } 
	tCRYPTO_EX_DATA_FUNCS
;

307 
DECLARE_STACK_OF
(
CRYPTO_EX_DATA_FUNCS
)

313 
	#CRYPTO_EX_INDEX_BIO
 0

	)

314 
	#CRYPTO_EX_INDEX_SSL
 1

	)

315 
	#CRYPTO_EX_INDEX_SSL_CTX
 2

	)

316 
	#CRYPTO_EX_INDEX_SSL_SESSION
 3

	)

317 
	#CRYPTO_EX_INDEX_X509_STORE
 4

	)

318 
	#CRYPTO_EX_INDEX_X509_STORE_CTX
 5

	)

319 
	#CRYPTO_EX_INDEX_RSA
 6

	)

320 
	#CRYPTO_EX_INDEX_DSA
 7

	)

321 
	#CRYPTO_EX_INDEX_DH
 8

	)

322 
	#CRYPTO_EX_INDEX_ENGINE
 9

	)

323 
	#CRYPTO_EX_INDEX_X509
 10

	)

324 
	#CRYPTO_EX_INDEX_UI
 11

	)

325 
	#CRYPTO_EX_INDEX_ECDSA
 12

	)

326 
	#CRYPTO_EX_INDEX_ECDH
 13

	)

327 
	#CRYPTO_EX_INDEX_COMP
 14

	)

328 
	#CRYPTO_EX_INDEX_STORE
 15

	)

332 
	#CRYPTO_EX_INDEX_USER
 100

	)

339 
	#CRYPTO_mÆloc_öô
(Ë
	`CRYPTO_£t_mem_fun˘i⁄s
(\

340 
mÆloc
, 
ªÆloc
, 
‰ì
)

	)

342 #i‡
deföed
 
CRYPTO_MDEBUG_ALL
 || deföed 
CRYPTO_MDEBUG_TIME
 || deföed 
CRYPTO_MDEBUG_THREAD


343 #i‚de‡
CRYPTO_MDEBUG


344 
	#CRYPTO_MDEBUG


	)

350 
CRYPTO_mÆloc_debug_öô
();

352 
CRYPTO_mem_˘æ
(
mode
);

353 
CRYPTO_is_mem_check_⁄
();

356 
	#MemCheck_°¨t
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_ON
)

	)

357 
	#MemCheck_°›
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_OFF
)

	)

360 
	#MemCheck_⁄
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_ENABLE
)

	)

361 
	#MemCheck_off
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_DISABLE
)

	)

362 
	#is_MemCheck_⁄
(Ë
	`CRYPTO_is_mem_check_⁄
()

	)

364 
	#OPENSSL_mÆloc
(
num
Ë
	`CRYPTO_mÆloc
((Íum,
__FILE__
,
__LINE__
)

	)

365 
	#OPENSSL_°rdup
(
°r
Ë
	`CRYPTO_°rdup
((°r),
__FILE__
,
__LINE__
)

	)

366 
	#OPENSSL_ªÆloc
(
addr
,
num
) \

367 
	`CRYPTO_ªÆloc
((*)
addr
,()
num
,
__FILE__
,
__LINE__
)

	)

368 
	#OPENSSL_ªÆloc_˛ón
(
addr
,
ﬁd_num
,
num
) \

369 
	`CRYPTO_ªÆloc_˛ón
(
addr
,
ﬁd_num
,
num
,
__FILE__
,
__LINE__
)

	)

370 
	#OPENSSL_ªmÆloc
(
addr
,
num
) \

371 
	`CRYPTO_ªmÆloc
((**)
addr
,()
num
,
__FILE__
,
__LINE__
)

	)

372 
	#OPENSSL_‰ìFunc
 
CRYPTO_‰ì


	)

373 
	#OPENSSL_‰ì
(
addr
Ë
	`CRYPTO_‰ì
◊ddr)

	)

375 
	#OPENSSL_mÆloc_locked
(
num
) \

376 
	`CRYPTO_mÆloc_locked
(()
num
,
__FILE__
,
__LINE__
)

	)

377 
	#OPENSSL_‰ì_locked
(
addr
Ë
	`CRYPTO_‰ì_locked
◊ddr)

	)

380 c⁄° *
SSLóy_vîsi⁄
(
ty≥
);

381 
SSLóy
();

383 
OPENSSL_is£tugid
();

386 
°_CRYPTO_EX_DATA_IMPL
 
	tCRYPTO_EX_DATA_IMPL
;

388 c⁄° 
CRYPTO_EX_DATA_IMPL
 *
CRYPTO_gë_ex_d©a_im∂emíèti⁄
();

390 
CRYPTO_£t_ex_d©a_im∂emíèti⁄
(c⁄° 
CRYPTO_EX_DATA_IMPL
 *
i
);

392 
CRYPTO_ex_d©a_√w_˛ass
();

394 
CRYPTO_gë_ex_√w_ödex
(
˛ass_ödex
, 
¨gl
, *
¨gp
,

395 
CRYPTO_EX_√w
 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
,

396 
CRYPTO_EX_‰ì
 *
‰ì_func
);

399 
CRYPTO_√w_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

400 
CRYPTO_dup_ex_d©a
(
˛ass_ödex
, 
CRYPTO_EX_DATA
 *
to
,

401 
CRYPTO_EX_DATA
 *
‰om
);

402 
CRYPTO_‰ì_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

405 
CRYPTO_£t_ex_d©a
(
CRYPTO_EX_DATA
 *
ad
, 
idx
, *
vÆ
);

406 *
CRYPTO_gë_ex_d©a
(c⁄° 
CRYPTO_EX_DATA
 *
ad
,
idx
);

409 
CRYPTO_˛ónup_Æl_ex_d©a
();

411 
CRYPTO_gë_√w_lockid
(*
«me
);

413 
CRYPTO_num_locks
();

414 
CRYPTO_lock
(
mode
, 
ty≥
,c⁄° *
fûe
,
löe
);

415 
CRYPTO_£t_lockög_ˇŒback
((*
func
)(
mode
,
ty≥
,

416 c⁄° *
fûe
,
löe
));

417 (*
CRYPTO_gë_lockög_ˇŒback
())(
mode
,
ty≥
,c⁄° *
fûe
,

418 
löe
);

419 
CRYPTO_£t_add_lock_ˇŒback
((*
func
)(*
num
,
mou¡
,
ty≥
,

420 c⁄° *
fûe
, 
löe
));

421 (*
CRYPTO_gë_add_lock_ˇŒback
())(*
num
,
mou¡
,
ty≥
,

422 c⁄° *
fûe
,
löe
);

423 
CRYPTO_£t_id_ˇŒback
((*
func
)());

424 (*
CRYPTO_gë_id_ˇŒback
())();

425 
CRYPTO_thªad_id
();

426 c⁄° *
CRYPTO_gë_lock_«me
(
ty≥
);

427 
CRYPTO_add_lock
(*
poöãr
,
amou¡
,
ty≥
, c⁄° *
fûe
,

428 
löe
);

430 
öt_CRYPTO_£t_do_dy∆ock_ˇŒback
(

431 (*
do_dy∆ock_cb
)(
mode
, 
ty≥
, c⁄° *
fûe
, 
löe
));

433 
CRYPTO_gë_√w_dy∆ockid
();

434 
CRYPTO_de°roy_dy∆ockid
(
i
);

435 
CRYPTO_dy∆ock_vÆue
 *
CRYPTO_gë_dy∆ock_vÆue
(
i
);

436 
CRYPTO_£t_dy∆ock_¸óã_ˇŒback
(
CRYPTO_dy∆ock_vÆue
 *(*
dyn_¸óã_fun˘i⁄
)(c⁄° *
fûe
, 
löe
));

437 
CRYPTO_£t_dy∆ock_lock_ˇŒback
((*
dyn_lock_fun˘i⁄
)(
mode
, 
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
, 
löe
));

438 
CRYPTO_£t_dy∆ock_de°roy_ˇŒback
((*
dyn_de°roy_fun˘i⁄
)(
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
, 
löe
));

439 
CRYPTO_dy∆ock_vÆue
 *(*
CRYPTO_gë_dy∆ock_¸óã_ˇŒback
())(c⁄° *
fûe
,
löe
);

440 (*
CRYPTO_gë_dy∆ock_lock_ˇŒback
())(
mode
, 
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
,
löe
);

441 (*
CRYPTO_gë_dy∆ock_de°roy_ˇŒback
())(
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
,
löe
);

445 
CRYPTO_£t_mem_fun˘i⁄s
(*(*
m
)(
size_t
),*(*
r
)(*,size_t), (*
f
)(*));

446 
CRYPTO_£t_locked_mem_fun˘i⁄s
(*(*
m
)(
size_t
), (*
‰ì_func
)(*));

447 
CRYPTO_£t_mem_ex_fun˘i⁄s
(*(*
m
)(
size_t
,const *,),

448 *(*
r
)(*,
size_t
,const *,),

449 (*
f
)(*));

450 
CRYPTO_£t_locked_mem_ex_fun˘i⁄s
(*(*
m
)(
size_t
,const *,),

451 (*
‰ì_func
)(*));

452 
CRYPTO_£t_mem_debug_fun˘i⁄s
((*
m
)(*,,const *,,),

453 (*
r
)(*,*,,const *,,),

454 (*
f
)(*,),

455 (*
so
)(),

456 (*
go
)());

457 
CRYPTO_£t_mem_öfo_fun˘i⁄s
(

458 (*
push_öfo_‚
)(c⁄° *
öfo
, c⁄° *
fûe
, 
löe
),

459 (*
p›_öfo_‚
)(),

460 (*
ªmove_Æl_öfo_‚
)());

461 
CRYPTO_gë_mem_fun˘i⁄s
(*(**
m
)(
size_t
),*(**
r
)(*, size_t), (**
f
)(*));

462 
CRYPTO_gë_locked_mem_fun˘i⁄s
(*(**
m
)(
size_t
), (**
f
)(*));

463 
CRYPTO_gë_mem_ex_fun˘i⁄s
(*(**
m
)(
size_t
,const *,),

464 *(**
r
)(*, 
size_t
,const *,),

465 (**
f
)(*));

466 
CRYPTO_gë_locked_mem_ex_fun˘i⁄s
(*(**
m
)(
size_t
,const *,),

467 (**
f
)(*));

468 
CRYPTO_gë_mem_debug_fun˘i⁄s
((**
m
)(*,,const *,,),

469 (**
r
)(*,*,,const *,,),

470 (**
f
)(*,),

471 (**
so
)(),

472 (**
go
)());

474 *
CRYPTO_mÆloc_locked
(
num
, c⁄° *
fûe
, 
löe
);

475 
CRYPTO_‰ì_locked
(*);

476 *
CRYPTO_mÆloc
(
num
, c⁄° *
fûe
, 
löe
);

477 *
CRYPTO_°rdup
(c⁄° *
°r
, c⁄° *
fûe
, 
löe
);

478 
CRYPTO_‰ì
(*);

479 *
CRYPTO_ªÆloc
(*
addr
,
num
, c⁄° *
fûe
, 
löe
);

480 *
CRYPTO_ªÆloc_˛ón
(*
addr
,
ﬁd_num
,
num
,c⁄° *
fûe
,

481 
löe
);

482 *
CRYPTO_ªmÆloc
(*
addr
,
num
, c⁄° *
fûe
, 
löe
);

484 
OPENSSL_˛ón£
(*
±r
, 
size_t
 
Àn
);

486 
CRYPTO_£t_mem_debug_›ti⁄s
(
bôs
);

487 
CRYPTO_gë_mem_debug_›ti⁄s
();

489 
	#CRYPTO_push_öfo
(
öfo
) \

490 
	`CRYPTO_push_öfo_
(
öfo
, 
__FILE__
, 
__LINE__
);

	)

491 
CRYPTO_push_öfo_
(c⁄° *
öfo
, c⁄° *
fûe
, 
löe
);

492 
CRYPTO_p›_öfo
();

493 
CRYPTO_ªmove_Æl_öfo
();

503 
CRYPTO_dbg_mÆloc
(*
addr
,
num
,c⁄° *
fûe
,
löe
,
bef‹e_p
);

504 
CRYPTO_dbg_ªÆloc
(*
addr1
,*
addr2
,
num
,c⁄° *
fûe
,
löe
,
bef‹e_p
);

505 
CRYPTO_dbg_‰ì
(*
addr
,
bef‹e_p
);

514 
CRYPTO_dbg_£t_›ti⁄s
(
bôs
);

515 
CRYPTO_dbg_gë_›ti⁄s
();

517 
CRYPTO_dbg_push_öfo
(c⁄° *
öfo
, c⁄° *
fûe
, 
löe
);

518 
CRYPTO_dbg_p›_öfo
();

519 
CRYPTO_dbg_ªmove_Æl_öfo
();

521 #i‚de‡
OPENSSL_NO_FP_API


522 
CRYPTO_mem_Àaks_Â
(
FILE
 *);

524 
CRYPTO_mem_Àaks
(
bio_°
 *
bio
);

526 *
	tCRYPTO_MEM_LEAK_CB
(, const *, , , *);

527 
CRYPTO_mem_Àaks_cb
(
CRYPTO_MEM_LEAK_CB
 *
cb
);

530 
O≥nSSLDõ
(c⁄° *
fûe
,
löe
,c⁄° *
as£πi⁄
);

531 
	#OPENSSL_as£π
(
e
Ë()(”Ë? 0 : (
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, #e),1))

	)

533 *
OPENSSL_ü32ˇp_loc
();

534 
	#OPENSSL_ü32ˇp
 (*(
	`OPENSSL_ü32ˇp_loc
()))

	)

535 
OPENSSL_is£rvi˚
();

537 #ifde‡
OPENSSL_FIPS


538 
	#FIPS_ERROR_IGNORED
(
Æg
Ë
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, \

539 
Æg
 "Öªviou†FIPS f‹biddíálg‹ôhmÉº‹ ign‹ed");

	)

541 
	#FIPS_BAD_ABORT
(
Æg
Ë
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, \

542 #Æg " Alg‹ôhm f‹biddí i¿FIPS mode");

	)

544 #ifde‡
OPENSSL_FIPS_STRICT


545 
	#FIPS_BAD_ALGORITHM
(
Æg
Ë
	`FIPS_BAD_ABORT
◊lg)

	)

547 
	#FIPS_BAD_ALGORITHM
(
Æg
) \

549 
	`FIPSîr
(
FIPS_F_HASH_FINAL
,
FIPS_R_NON_FIPS_METHOD
); \

550 
	`ERR_add_îr‹_d©a
(2, "Algorithm=", #alg); \

552 }

	)

557 
	#FIPS_NON_FIPS_MD_Inô
(
Æg
) \

558 
Æg
##
	`_Inô
◊lg##
_CTX
 *
c
) \

560 i‡(
	`FIPS_mode
()) \

561 
	`FIPS_BAD_ALGORITHM
(
Æg
) \

562  
¥iv©e_
##
Æg
##
	`_Inô
(
c
); \

564 
¥iv©e_
##
Æg
##
	`_Inô
◊lg##
_CTX
 *
c
)

	)

571 
	#FIPS_NON_FIPS_VCIPHER_Inô
(
Æg
) \

572 
Æg
##
	`_£t_key
◊lg##
_KEY
 *
key
, 
Àn
, c⁄° *
d©a
) \

574 i‡(
	`FIPS_mode
()) \

575 
	`FIPS_BAD_ABORT
(
Æg
) \

576 
¥iv©e_
##
Æg
##
	`_£t_key
(
key
, 
Àn
, 
d©a
); \

578 
¥iv©e_
##
Æg
##
	`_£t_key
◊lg##
_KEY
 *
key
, 
Àn
, \

579 c⁄° *
d©a
)

	)

583 
	#FIPS_NON_FIPS_VCIPHER_Inô
(
Æg
) \

584 
Æg
##
	`_£t_key
◊lg##
_KEY
 *
key
, 
Àn
, c⁄° *
d©a
)

	)

586 
	#FIPS_NON_FIPS_MD_Inô
(
Æg
) \

587 
Æg
##
	`_Inô
◊lg##
_CTX
 *
c
)

	)

591 
	#OPENSSL_HAVE_INIT
 1

	)

592 
OPENSSL_öô
();

599 
CRYPTO_memcmp
(c⁄° *
a
, c⁄° *
b
, 
size_t
 
Àn
);

605 
ERR_lﬂd_CRYPTO_°rögs
();

610 
	#CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX
 100

	)

611 
	#CRYPTO_F_CRYPTO_GET_NEW_DYNLOCKID
 103

	)

612 
	#CRYPTO_F_CRYPTO_GET_NEW_LOCKID
 101

	)

613 
	#CRYPTO_F_CRYPTO_SET_EX_DATA
 102

	)

614 
	#CRYPTO_F_DEF_ADD_INDEX
 104

	)

615 
	#CRYPTO_F_DEF_GET_CLASS
 105

	)

616 
	#CRYPTO_F_INT_DUP_EX_DATA
 106

	)

617 
	#CRYPTO_F_INT_FREE_EX_DATA
 107

	)

618 
	#CRYPTO_F_INT_NEW_EX_DATA
 108

	)

621 
	#CRYPTO_R_NO_DYNLOCK_CREATE_CALLBACK
 100

	)

623 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/des.h

59 #i‚de‡
HEADER_NEW_DES_H


60 
	#HEADER_NEW_DES_H


	)

62 
	~<›ís¶/e_os2.h
>

65 #ifde‡
OPENSSL_NO_DES


66 #îr‹ 
DES
 
is
 
dißbÀd
.

69 #ifde‡
OPENSSL_BUILD_SHLIBCRYPTO


70 #unde‡
OPENSSL_EXTERN


71 
	#OPENSSL_EXTERN
 
OPENSSL_EXPORT


	)

74 #ifde‡ 
__˝lu•lus


78 
	tDES_cblock
[8];

79 
	tc⁄°_DES_cblock
[8];

83 
	sDES_ks


87 
DES_cblock
 
cblock
;

90 
DES_LONG
 
de¶⁄g
[2];

91 } 
ks
[16];

92 } 
	tDES_key_scheduÀ
;

94 #i‚de‡
OPENSSL_DISABLE_OLD_DES_SUPPORT


95 #i‚de‡
OPENSSL_ENABLE_OLD_DES_SUPPORT


96 
	#OPENSSL_ENABLE_OLD_DES_SUPPORT


	)

100 #ifde‡
OPENSSL_ENABLE_OLD_DES_SUPPORT


101 
	~<›ís¶/des_ﬁd.h
>

104 
	#DES_KEY_SZ
 ((
DES_cblock
))

	)

105 
	#DES_SCHEDULE_SZ
 ((
DES_key_scheduÀ
))

	)

107 
	#DES_ENCRYPT
 1

	)

108 
	#DES_DECRYPT
 0

	)

110 
	#DES_CBC_MODE
 0

	)

111 
	#DES_PCBC_MODE
 1

	)

113 
	#DES_ecb2_í¸y±
(
i
,
o
,
k1
,
k2
,
e
) \

114 
	`DES_ecb3_í¸y±
((
i
),(
o
),(
k1
),(
k2
),(k1),(
e
))

	)

116 
	#DES_ede2_cbc_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
e
) \

117 
	`DES_ede3_cbc_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
e
))

	)

119 
	#DES_ede2_cfb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
n
,
e
) \

120 
	`DES_ede3_cfb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
n
),(
e
))

	)

122 
	#DES_ede2_ofb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
n
) \

123 
	`DES_ede3_ofb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
n
))

	)

125 
OPENSSL_DECLARE_GLOBAL
(,
DES_check_key
);

126 
	#DES_check_key
 
	`OPENSSL_GLOBAL_REF
(
DES_check_key
)

	)

127 
OPENSSL_DECLARE_GLOBAL
(,
DES_rw_mode
);

128 
	#DES_rw_mode
 
	`OPENSSL_GLOBAL_REF
(
DES_rw_mode
)

	)

130 c⁄° *
DES_›ti⁄s
();

131 
DES_ecb3_í¸y±
(
c⁄°_DES_cblock
 *
öput
, 
DES_cblock
 *
ouçut
,

132 
DES_key_scheduÀ
 *
ks1
,DES_key_scheduÀ *
ks2
,

133 
DES_key_scheduÀ
 *
ks3
, 
íc
);

134 
DES_LONG
 
DES_cbc_cksum
(c⁄° *
öput
,
DES_cblock
 *
ouçut
,

135 
Àngth
,
DES_key_scheduÀ
 *
scheduÀ
,

136 
c⁄°_DES_cblock
 *
ivec
);

138 
DES_cbc_í¸y±
(c⁄° *
öput
,*
ouçut
,

139 
Àngth
,
DES_key_scheduÀ
 *
scheduÀ
,
DES_cblock
 *
ivec
,

140 
íc
);

141 
DES_ncbc_í¸y±
(c⁄° *
öput
,*
ouçut
,

142 
Àngth
,
DES_key_scheduÀ
 *
scheduÀ
,
DES_cblock
 *
ivec
,

143 
íc
);

144 
DES_xcbc_í¸y±
(c⁄° *
öput
,*
ouçut
,

145 
Àngth
,
DES_key_scheduÀ
 *
scheduÀ
,
DES_cblock
 *
ivec
,

146 
c⁄°_DES_cblock
 *
öw
,c⁄°_DES_cblock *
outw
,
íc
);

147 
DES_cfb_í¸y±
(c⁄° *
ö
,*
out
,
numbôs
,

148 
Àngth
,
DES_key_scheduÀ
 *
scheduÀ
,
DES_cblock
 *
ivec
,

149 
íc
);

150 
DES_ecb_í¸y±
(
c⁄°_DES_cblock
 *
öput
,
DES_cblock
 *
ouçut
,

151 
DES_key_scheduÀ
 *
ks
,
íc
);

162 
DES_í¸y±1
(
DES_LONG
 *
d©a
,
DES_key_scheduÀ
 *
ks
, 
íc
);

170 
DES_í¸y±2
(
DES_LONG
 *
d©a
,
DES_key_scheduÀ
 *
ks
, 
íc
);

172 
DES_í¸y±3
(
DES_LONG
 *
d©a
, 
DES_key_scheduÀ
 *
ks1
,

173 
DES_key_scheduÀ
 *
ks2
, DES_key_scheduÀ *
ks3
);

174 
DES_de¸y±3
(
DES_LONG
 *
d©a
, 
DES_key_scheduÀ
 *
ks1
,

175 
DES_key_scheduÀ
 *
ks2
, DES_key_scheduÀ *
ks3
);

176 
DES_ede3_cbc_í¸y±
(c⁄° *
öput
,*
ouçut
,

177 
Àngth
,

178 
DES_key_scheduÀ
 *
ks1
,DES_key_scheduÀ *
ks2
,

179 
DES_key_scheduÀ
 *
ks3
,
DES_cblock
 *
ivec
,
íc
);

180 
DES_ede3_cbcm_í¸y±
(c⁄° *
ö
,*
out
,

181 
Àngth
,

182 
DES_key_scheduÀ
 *
ks1
,DES_key_scheduÀ *
ks2
,

183 
DES_key_scheduÀ
 *
ks3
,

184 
DES_cblock
 *
ivec1
,DES_cblock *
ivec2
,

185 
íc
);

186 
DES_ede3_cfb64_í¸y±
(c⁄° *
ö
,*
out
,

187 
Àngth
,
DES_key_scheduÀ
 *
ks1
,

188 
DES_key_scheduÀ
 *
ks2
,DES_key_scheduÀ *
ks3
,

189 
DES_cblock
 *
ivec
,*
num
,
íc
);

190 
DES_ede3_cfb_í¸y±
(c⁄° *
ö
,*
out
,

191 
numbôs
,
Àngth
,
DES_key_scheduÀ
 *
ks1
,

192 
DES_key_scheduÀ
 *
ks2
,DES_key_scheduÀ *
ks3
,

193 
DES_cblock
 *
ivec
,
íc
);

194 
DES_ede3_ofb64_í¸y±
(c⁄° *
ö
,*
out
,

195 
Àngth
,
DES_key_scheduÀ
 *
ks1
,

196 
DES_key_scheduÀ
 *
ks2
,DES_key_scheduÀ *
ks3
,

197 
DES_cblock
 *
ivec
,*
num
);

199 
DES_xwhôe_ö2out
(
c⁄°_DES_cblock
 *
DES_key
,c⁄°_DES_cblock *
ö_whôe
,

200 
DES_cblock
 *
out_whôe
);

203 
DES_íc_ªad
(
fd
,*
buf
,
Àn
,
DES_key_scheduÀ
 *
sched
,

204 
DES_cblock
 *
iv
);

205 
DES_íc_wrôe
(
fd
,c⁄° *
buf
,
Àn
,
DES_key_scheduÀ
 *
sched
,

206 
DES_cblock
 *
iv
);

207 *
DES_f¸y±
(c⁄° *
buf
,c⁄° *
ß…
, *
ªt
);

208 *
DES_¸y±
(c⁄° *
buf
,c⁄° *
ß…
);

209 
DES_ofb_í¸y±
(c⁄° *
ö
,*
out
,
numbôs
,

210 
Àngth
,
DES_key_scheduÀ
 *
scheduÀ
,
DES_cblock
 *
ivec
);

211 
DES_pcbc_í¸y±
(c⁄° *
öput
,*
ouçut
,

212 
Àngth
,
DES_key_scheduÀ
 *
scheduÀ
,
DES_cblock
 *
ivec
,

213 
íc
);

214 
DES_LONG
 
DES_quad_cksum
(c⁄° *
öput
,
DES_cblock
 
ouçut
[],

215 
Àngth
,
out_cou¡
,
DES_cblock
 *
£ed
);

216 
DES_øndom_key
(
DES_cblock
 *
ªt
);

217 
DES_£t_odd_∑rôy
(
DES_cblock
 *
key
);

218 
DES_check_key_∑rôy
(
c⁄°_DES_cblock
 *
key
);

219 
DES_is_wók_key
(
c⁄°_DES_cblock
 *
key
);

223 
DES_£t_key
(
c⁄°_DES_cblock
 *
key
,
DES_key_scheduÀ
 *
scheduÀ
);

224 
DES_key_sched
(
c⁄°_DES_cblock
 *
key
,
DES_key_scheduÀ
 *
scheduÀ
);

225 
DES_£t_key_checked
(
c⁄°_DES_cblock
 *
key
,
DES_key_scheduÀ
 *
scheduÀ
);

226 
DES_£t_key_unchecked
(
c⁄°_DES_cblock
 *
key
,
DES_key_scheduÀ
 *
scheduÀ
);

227 
DES_°rög_to_key
(c⁄° *
°r
,
DES_cblock
 *
key
);

228 
DES_°rög_to_2keys
(c⁄° *
°r
,
DES_cblock
 *
key1
,DES_cblock *
key2
);

229 
DES_cfb64_í¸y±
(c⁄° *
ö
,*
out
,
Àngth
,

230 
DES_key_scheduÀ
 *
scheduÀ
,
DES_cblock
 *
ivec
,*
num
,

231 
íc
);

232 
DES_ofb64_í¸y±
(c⁄° *
ö
,*
out
,
Àngth
,

233 
DES_key_scheduÀ
 *
scheduÀ
,
DES_cblock
 *
ivec
,*
num
);

235 
DES_ªad_∑ssw‹d
(
DES_cblock
 *
key
, c⁄° *
¥om±
, 
vîify
);

236 
DES_ªad_2∑ssw‹ds
(
DES_cblock
 *
key1
, DES_cblock *
key2
, c⁄° *
¥om±
,

237 
vîify
);

239 
	#DES_fixup_key_∑rôy
 
DES_£t_odd_∑rôy


	)

241 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dh.h

59 #i‚de‡
HEADER_DH_H


60 
	#HEADER_DH_H


	)

62 
	~<›ís¶/e_os2.h
>

64 #ifde‡
OPENSSL_NO_DH


65 #îr‹ 
DH
 
is
 
dißbÀd
.

68 #i‚de‡
OPENSSL_NO_BIO


69 
	~<›ís¶/bio.h
>

71 
	~<›ís¶/os¶_typ.h
>

72 #i‚de‡
OPENSSL_NO_DEPRECATED


73 
	~<›ís¶/bn.h
>

76 #i‚de‡
OPENSSL_DH_MAX_MODULUS_BITS


77 
	#OPENSSL_DH_MAX_MODULUS_BITS
 10000

	)

80 
	#OPENSSL_DH_FIPS_MIN_MODULUS_BITS
 1024

	)

82 
	#DH_FLAG_CACHE_MONT_P
 0x01

	)

83 
	#DH_FLAG_NO_EXP_CONSTTIME
 0x02

	)

91 #ifde‡ 
__˝lu•lus


99 
	sdh_mëhod


101 c⁄° *
«me
;

103 (*
gíî©e_key
)(
DH
 *
dh
);

104 (*
compuã_key
)(*
key
,c⁄° 
BIGNUM
 *
pub_key
,
DH
 *
dh
);

105 (*
bn_mod_exp
)(c⁄° 
DH
 *
dh
, 
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

106 c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
,

107 
BN_MONT_CTX
 *
m_˘x
);

109 (*
öô
)(
DH
 *
dh
);

110 (*
föish
)(
DH
 *
dh
);

111 
Êags
;

112 *
≠p_d©a
;

114 (*
gíî©e_∑øms
)(
DH
 *
dh
, 
¥ime_Àn
, 
gíî©‹
, 
BN_GENCB
 *
cb
);

117 
	sdh_°


121 
∑d
;

122 
vîsi⁄
;

123 
BIGNUM
 *
p
;

124 
BIGNUM
 *
g
;

125 
Àngth
;

126 
BIGNUM
 *
pub_key
;

127 
BIGNUM
 *
¥iv_key
;

129 
Êags
;

130 
BN_MONT_CTX
 *
mëhod_m⁄t_p
;

132 
BIGNUM
 *
q
;

133 
BIGNUM
 *
j
;

134 *
£ed
;

135 
£edÀn
;

136 
BIGNUM
 *
cou¡î
;

138 
ª„ªn˚s
;

139 
CRYPTO_EX_DATA
 
ex_d©a
;

140 c⁄° 
DH_METHOD
 *
mëh
;

141 
ENGINE
 *
ígöe
;

144 
	#DH_GENERATOR_2
 2

	)

146 
	#DH_GENERATOR_5
 5

	)

149 
	#DH_CHECK_P_NOT_PRIME
 0x01

	)

150 
	#DH_CHECK_P_NOT_SAFE_PRIME
 0x02

	)

151 
	#DH_UNABLE_TO_CHECK_GENERATOR
 0x04

	)

152 
	#DH_NOT_SUITABLE_GENERATOR
 0x08

	)

155 
	#DH_CHECK_PUBKEY_TOO_SMALL
 0x01

	)

156 
	#DH_CHECK_PUBKEY_TOO_LARGE
 0x02

	)

160 
	#DH_CHECK_P_NOT_STRONG_PRIME
 
DH_CHECK_P_NOT_SAFE_PRIME


	)

162 
	#DH∑øms_dup
(
x
Ë
	`ASN1_dup_of_c⁄°
(
DH
,
i2d_DH∑øms
,
d2i_DH∑øms
,x)

	)

163 
	#d2i_DH∑øms_Â
(
Â
,
x
Ë(
DH
 *)
	`ASN1_d2i_Â
((*(*)())
DH_√w
, \

164 (*(*)())
d2i_DH∑øms
,(
Â
),(**)(
x
))

	)

165 
	#i2d_DH∑øms_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_DH∑øms
,(fp), \

166 (*)(
x
))

	)

167 
	#d2i_DH∑øms_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
DH
,
DH_√w
,
d2i_DH∑øms
,bp,x)

	)

168 
	#i2d_DH∑øms_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
DH
,
i2d_DH∑øms
,bp,x)

	)

170 c⁄° 
DH_METHOD
 *
DH_O≥nSSL
();

172 #ifde‡
OPENSSL_FIPS


173 
DH
 * 
FIPS_dh_√w
();

174 
FIPS_dh_‰ì
(
DH
 *
dh
);

177 
DH_£t_deÁu…_mëhod
(c⁄° 
DH_METHOD
 *
mëh
);

178 c⁄° 
DH_METHOD
 *
DH_gë_deÁu…_mëhod
();

179 
DH_£t_mëhod
(
DH
 *
dh
, c⁄° 
DH_METHOD
 *
mëh
);

180 
DH
 *
DH_√w_mëhod
(
ENGINE
 *
ígöe
);

182 
DH
 * 
DH_√w
();

183 
DH_‰ì
(
DH
 *
dh
);

184 
DH_up_ªf
(
DH
 *
dh
);

185 
DH_size
(c⁄° 
DH
 *
dh
);

186 
DH_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

187 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

188 
DH_£t_ex_d©a
(
DH
 *
d
, 
idx
, *
¨g
);

189 *
DH_gë_ex_d©a
(
DH
 *
d
, 
idx
);

192 #i‚de‡
OPENSSL_NO_DEPRECATED


193 
DH
 * 
DH_gíî©e_∑ømëîs
(
¥ime_Àn
,
gíî©‹
,

194 (*
ˇŒback
)(,,*),*
cb_¨g
);

198 
DH_gíî©e_∑ømëîs_ex
(
DH
 *
dh
, 
¥ime_Àn
,
gíî©‹
, 
BN_GENCB
 *
cb
);

200 
DH_check
(c⁄° 
DH
 *
dh
,*
codes
);

201 
DH_check_pub_key
(c⁄° 
DH
 *
dh
,c⁄° 
BIGNUM
 *
pub_key
, *
codes
);

202 
DH_gíî©e_key
(
DH
 *
dh
);

203 
DH_compuã_key
(*
key
,c⁄° 
BIGNUM
 *
pub_key
,
DH
 *
dh
);

204 
DH
 * 
d2i_DH∑øms
(DH **
a
,c⁄° **
µ
, 
Àngth
);

205 
i2d_DH∑øms
(c⁄° 
DH
 *
a
,**
µ
);

206 #i‚de‡
OPENSSL_NO_FP_API


207 
DH∑øms_¥öt_Â
(
FILE
 *
Â
, c⁄° 
DH
 *
x
);

209 #i‚de‡
OPENSSL_NO_BIO


210 
DH∑øms_¥öt
(
BIO
 *
bp
, c⁄° 
DH
 *
x
);

212 
DH∑øms_¥öt
(*
bp
, c⁄° 
DH
 *
x
);

219 
ERR_lﬂd_DH_°rögs
();

224 
	#DH_F_COMPUTE_KEY
 102

	)

225 
	#DH_F_DHPARAMS_PRINT
 100

	)

226 
	#DH_F_DHPARAMS_PRINT_FP
 101

	)

227 
	#DH_F_DH_BUILTIN_GENPARAMS
 106

	)

228 
	#DH_F_DH_COMPUTE_KEY
 107

	)

229 
	#DH_F_DH_GENERATE_KEY
 108

	)

230 
	#DH_F_DH_GENERATE_PARAMETERS
 109

	)

231 
	#DH_F_DH_NEW_METHOD
 105

	)

232 
	#DH_F_GENERATE_KEY
 103

	)

233 
	#DH_F_GENERATE_PARAMETERS
 104

	)

236 
	#DH_R_BAD_GENERATOR
 101

	)

237 
	#DH_R_INVALID_PUBKEY
 102

	)

238 
	#DH_R_KEY_SIZE_TOO_SMALL
 104

	)

239 
	#DH_R_MODULUS_TOO_LARGE
 103

	)

240 
	#DH_R_NO_PRIVATE_VALUE
 100

	)

242 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dsa.h

65 #i‚de‡
HEADER_DSA_H


66 
	#HEADER_DSA_H


	)

68 
	~<›ís¶/e_os2.h
>

70 #ifde‡
OPENSSL_NO_DSA


71 #îr‹ 
DSA
 
is
 
dißbÀd
.

74 #i‚de‡
OPENSSL_NO_BIO


75 
	~<›ís¶/bio.h
>

77 
	~<›ís¶/¸y±o.h
>

78 
	~<›ís¶/os¶_typ.h
>

80 #i‚de‡
OPENSSL_NO_DEPRECATED


81 
	~<›ís¶/bn.h
>

82 #i‚de‡
OPENSSL_NO_DH


83 
	~<›ís¶/dh.h
>

87 #i‚de‡
OPENSSL_DSA_MAX_MODULUS_BITS


88 
	#OPENSSL_DSA_MAX_MODULUS_BITS
 10000

	)

91 
	#OPENSSL_DSA_FIPS_MIN_MODULUS_BITS
 1024

	)

93 
	#DSA_FLAG_CACHE_MONT_P
 0x01

	)

94 
	#DSA_FLAG_NO_EXP_CONSTTIME
 0x02

	)

108 
	#DSA_FLAG_FIPS_METHOD
 0x0400

	)

115 
	#DSA_FLAG_NON_FIPS_ALLOW
 0x0400

	)

117 #ifde‡
OPENSSL_FIPS


118 
	#FIPS_DSA_SIZE_T
 

	)

121 #ifde‡ 
__˝lu•lus


129 
	sDSA_SIG_°


131 
BIGNUM
 *
r
;

132 
BIGNUM
 *
s
;

133 } 
	tDSA_SIG
;

135 
	sdß_mëhod


137 c⁄° *
«me
;

138 
DSA_SIG
 * (*
dß_do_sign
)(c⁄° *
dg°
, 
dÀn
, 
DSA
 *
dß
);

139 (*
dß_sign_£tup
)(
DSA
 *
dß
, 
BN_CTX
 *
˘x_ö
, 
BIGNUM
 **
kövp
,

140 
BIGNUM
 **
Ω
);

141 (*
dß_do_vîify
)(c⁄° *
dg°
, 
dg°_Àn
,

142 
DSA_SIG
 *
sig
, 
DSA
 *
dß
);

143 (*
dß_mod_exp
)(
DSA
 *
dß
, 
BIGNUM
 *
º
, BIGNUM *
a1
, BIGNUM *
p1
,

144 
BIGNUM
 *
a2
, BIGNUM *
p2
, BIGNUM *
m
, 
BN_CTX
 *
˘x
,

145 
BN_MONT_CTX
 *
ö_m⁄t
);

146 (*
bn_mod_exp
)(
DSA
 *
dß
, 
BIGNUM
 *
r
, BIGNUM *
a
, c⁄° BIGNUM *
p
,

147 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
,

148 
BN_MONT_CTX
 *
m_˘x
);

149 (*
öô
)(
DSA
 *
dß
);

150 (*
föish
)(
DSA
 *
dß
);

151 
Êags
;

152 *
≠p_d©a
;

154 (*
dß_∑ømgí
)(
DSA
 *
dß
, 
bôs
,

155 *
£ed
, 
£ed_Àn
,

156 *
cou¡î_ªt
, *
h_ªt
,

157 
BN_GENCB
 *
cb
);

159 (*
dß_keygí
)(
DSA
 *
dß
);

162 
	sdß_°


166 
∑d
;

167 
vîsi⁄
;

168 
wrôe_∑øms
;

169 
BIGNUM
 *
p
;

170 
BIGNUM
 *
q
;

171 
BIGNUM
 *
g
;

173 
BIGNUM
 *
pub_key
;

174 
BIGNUM
 *
¥iv_key
;

176 
BIGNUM
 *
köv
;

177 
BIGNUM
 *
r
;

179 
Êags
;

181 
BN_MONT_CTX
 *
mëhod_m⁄t_p
;

182 
ª„ªn˚s
;

183 
CRYPTO_EX_DATA
 
ex_d©a
;

184 c⁄° 
DSA_METHOD
 *
mëh
;

186 
ENGINE
 *
ígöe
;

189 
	#DSA∑øms_dup
(
x
Ë
	`ASN1_dup_of_c⁄°
(
DSA
,
i2d_DSA∑øms
,
d2i_DSA∑øms
,x)

	)

190 
	#d2i_DSA∑øms_Â
(
Â
,
x
Ë(
DSA
 *)
	`ASN1_d2i_Â
((*(*)())
DSA_√w
, \

191 (*(*)())
d2i_DSA∑øms
,(
Â
),(**)(
x
))

	)

192 
	#i2d_DSA∑øms_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_DSA∑øms
,(fp), \

193 (*)(
x
))

	)

194 
	#d2i_DSA∑øms_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
DSA
,
DSA_√w
,
d2i_DSA∑øms
,bp,x)

	)

195 
	#i2d_DSA∑øms_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
DSA
,
i2d_DSA∑øms
,bp,x)

	)

198 
DSA_SIG
 * 
DSA_SIG_√w
();

199 
DSA_SIG_‰ì
(
DSA_SIG
 *
a
);

200 
i2d_DSA_SIG
(c⁄° 
DSA_SIG
 *
a
, **
µ
);

201 
DSA_SIG
 * 
d2i_DSA_SIG
(DSA_SIG **
v
, c⁄° **
µ
, 
Àngth
);

203 
DSA_SIG
 * 
DSA_do_sign
(c⁄° *
dg°
,
dÀn
,
DSA
 *
dß
);

204 
DSA_do_vîify
(c⁄° *
dg°
,
dg°_Àn
,

205 
DSA_SIG
 *
sig
,
DSA
 *
dß
);

207 c⁄° 
DSA_METHOD
 *
DSA_O≥nSSL
();

209 
DSA_£t_deÁu…_mëhod
(c⁄° 
DSA_METHOD
 *);

210 c⁄° 
DSA_METHOD
 *
DSA_gë_deÁu…_mëhod
();

211 
DSA_£t_mëhod
(
DSA
 *
dß
, c⁄° 
DSA_METHOD
 *);

213 #ifde‡
OPENSSL_FIPS


214 
DSA
 * 
FIPS_dß_√w
();

215 
FIPS_dß_‰ì
 (
DSA
 *
r
);

218 
DSA
 * 
DSA_√w
();

219 
DSA
 * 
DSA_√w_mëhod
(
ENGINE
 *
ígöe
);

220 
DSA_‰ì
 (
DSA
 *
r
);

222 
DSA_up_ªf
(
DSA
 *
r
);

223 
DSA_size
(c⁄° 
DSA
 *);

225 
DSA_sign_£tup
–
DSA
 *
dß
,
BN_CTX
 *
˘x_ö
,
BIGNUM
 **
kövp
,BIGNUM **
Ω
);

226 
DSA_sign
(
ty≥
,c⁄° *
dg°
,
dÀn
,

227 *
sig
, *
sigÀn
, 
DSA
 *
dß
);

228 
DSA_vîify
(
ty≥
,c⁄° *
dg°
,
dg°_Àn
,

229 c⁄° *
sigbuf
, 
sigÀn
, 
DSA
 *
dß
);

230 
DSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

231 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

232 
DSA_£t_ex_d©a
(
DSA
 *
d
, 
idx
, *
¨g
);

233 *
DSA_gë_ex_d©a
(
DSA
 *
d
, 
idx
);

235 
DSA
 * 
d2i_DSAPublicKey
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

236 
DSA
 * 
d2i_DSAPriv©eKey
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

237 
DSA
 * 
d2i_DSA∑øms
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

240 #i‚de‡
OPENSSL_NO_DEPRECATED


241 
DSA
 * 
DSA_gíî©e_∑ømëîs
(
bôs
,

242 *
£ed
,
£ed_Àn
,

243 *
cou¡î_ªt
, *
h_ªt
,

244 (*
ˇŒback
)(, , *),*
cb_¨g
);

248 
DSA_gíî©e_∑ømëîs_ex
(
DSA
 *
dß
, 
bôs
,

249 *
£ed
,
£ed_Àn
,

250 *
cou¡î_ªt
, *
h_ªt
, 
BN_GENCB
 *
cb
);

252 
DSA_gíî©e_key
(
DSA
 *
a
);

253 
i2d_DSAPublicKey
(c⁄° 
DSA
 *
a
, **
µ
);

254 
i2d_DSAPriv©eKey
(c⁄° 
DSA
 *
a
, **
µ
);

255 
i2d_DSA∑øms
(c⁄° 
DSA
 *
a
,**
µ
);

257 #i‚de‡
OPENSSL_NO_BIO


258 
DSA∑øms_¥öt
(
BIO
 *
bp
, c⁄° 
DSA
 *
x
);

259 
DSA_¥öt
(
BIO
 *
bp
, c⁄° 
DSA
 *
x
, 
off
);

261 #i‚de‡
OPENSSL_NO_FP_API


262 
DSA∑øms_¥öt_Â
(
FILE
 *
Â
, c⁄° 
DSA
 *
x
);

263 
DSA_¥öt_Â
(
FILE
 *
bp
, c⁄° 
DSA
 *
x
, 
off
);

266 
	#DSS_¥ime_checks
 50

	)

269 
	#DSA_is_¥ime
(
n
, 
ˇŒback
, 
cb_¨g
) \

270 
	`BN_is_¥ime
(
n
, 
DSS_¥ime_checks
, 
ˇŒback
, 
NULL
, 
cb_¨g
)

	)

272 #i‚de‡
OPENSSL_NO_DH


275 
DH
 *
DSA_dup_DH
(c⁄° 
DSA
 *
r
);

278 #ifde‡
OPENSSL_FIPS


279 
FIPS_dß_sig_ícode
(*
out
, 
DSA_SIG
 *
sig
);

280 
FIPS_dß_sig_decode
(
DSA_SIG
 *
sig
, c⁄° *
ö
, 
öÀn
);

287 
ERR_lﬂd_DSA_°rögs
();

292 
	#DSA_F_D2I_DSA_SIG
 110

	)

293 
	#DSA_F_DSAPARAMS_PRINT
 100

	)

294 
	#DSA_F_DSAPARAMS_PRINT_FP
 101

	)

295 
	#DSA_F_DSA_BUILTIN_KEYGEN
 119

	)

296 
	#DSA_F_DSA_BUILTIN_PARAMGEN
 118

	)

297 
	#DSA_F_DSA_DO_SIGN
 112

	)

298 
	#DSA_F_DSA_DO_VERIFY
 113

	)

299 
	#DSA_F_DSA_GENERATE_PARAMETERS
 117

	)

300 
	#DSA_F_DSA_NEW_METHOD
 103

	)

301 
	#DSA_F_DSA_PRINT
 104

	)

302 
	#DSA_F_DSA_PRINT_FP
 105

	)

303 
	#DSA_F_DSA_SET_DEFAULT_METHOD
 115

	)

304 
	#DSA_F_DSA_SET_METHOD
 116

	)

305 
	#DSA_F_DSA_SIGN
 106

	)

306 
	#DSA_F_DSA_SIGN_SETUP
 107

	)

307 
	#DSA_F_DSA_SIG_NEW
 109

	)

308 
	#DSA_F_DSA_VERIFY
 108

	)

309 
	#DSA_F_I2D_DSA_SIG
 111

	)

310 
	#DSA_F_SIG_CB
 114

	)

313 
	#DSA_R_BAD_Q_VALUE
 102

	)

314 
	#DSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 100

	)

315 
	#DSA_R_KEY_SIZE_TOO_SMALL
 106

	)

316 
	#DSA_R_MISSING_PARAMETERS
 101

	)

317 
	#DSA_R_MODULUS_TOO_LARGE
 103

	)

318 
	#DSA_R_NON_FIPS_METHOD
 104

	)

319 
	#DSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE
 105

	)

321 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/e_os2.h

56 
	~<›ís¶/›ís¶c⁄f.h
>

58 #i‚de‡
HEADER_E_OS2_H


59 
	#HEADER_E_OS2_H


	)

61 #ifde‡ 
__˝lu•lus


71 
	#OPENSSL_SYS_UNIX


	)

74 #i‡
deföed
(
__MWERKS__
Ë&& deföed(
macötosh
Ë|| deföed(
OPENSSL_SYSNAME_MAC
)

75 #unde‡
OPENSSL_SYS_UNIX


76 
	#OPENSSL_SYS_MACINTOSH_CLASSIC


	)

80 #i‡
deföed
(
NETWARE
Ë|| deföed(
OPENSSL_SYSNAME_NETWARE
)

81 #unde‡
OPENSSL_SYS_UNIX


82 
	#OPENSSL_SYS_NETWARE


	)

89 #i‡
deföed
(
OPENSSL_SYSNAME_MSDOS
)

90 #unde‡
OPENSSL_SYS_UNIX


91 
	#OPENSSL_SYS_MSDOS


	)

96 #i‡
deföed
(
OPENSSL_SYSNAME_UWIN
)

97 #unde‡
OPENSSL_SYS_UNIX


98 
	#OPENSSL_SYS_WIN32_UWIN


	)

100 #i‡
deföed
(
__CYGWIN32__
Ë|| deföed(
OPENSSL_SYSNAME_CYGWIN32
)

101 #unde‡
OPENSSL_SYS_UNIX


102 
	#OPENSSL_SYS_WIN32_CYGWIN


	)

104 #i‡
deföed
(
_WIN32
Ë|| deföed(
OPENSSL_SYSNAME_WIN32
)

105 #unde‡
OPENSSL_SYS_UNIX


106 
	#OPENSSL_SYS_WIN32


	)

108 #i‡
deföed
(
OPENSSL_SYSNAME_WINNT
)

109 #unde‡
OPENSSL_SYS_UNIX


110 
	#OPENSSL_SYS_WINNT


	)

112 #i‡
deföed
(
OPENSSL_SYSNAME_WINCE
)

113 #unde‡
OPENSSL_SYS_UNIX


114 
	#OPENSSL_SYS_WINCE


	)

120 #i‡
deföed
(
OPENSSL_SYS_WIN32
Ë|| deföed(
OPENSSL_SYS_WINNT
Ë|| deföed(
OPENSSL_SYS_WINCE
)

121 #unde‡
OPENSSL_SYS_UNIX


122 
	#OPENSSL_SYS_WINDOWS


	)

123 #i‚de‡
OPENSSL_SYS_MSDOS


124 
	#OPENSSL_SYS_MSDOS


	)

131 #ifde‡
OPENSSL_SYS_WINDOWS


132 #i‚de‡
OPENSSL_OPT_WINDLL


133 #i‡
deföed
(
_WINDLL
)

135 
	#OPENSSL_OPT_WINDLL


	)

141 #i‡
deföed
(
__VMS
Ë|| deföed(
VMS
Ë|| deföed(
OPENSSL_SYSNAME_VMS
)

142 #unde‡
OPENSSL_SYS_UNIX


143 
	#OPENSSL_SYS_VMS


	)

144 #i‡
deföed
(
__DECC
)

145 
	#OPENSSL_SYS_VMS_DECC


	)

146 #ñi‡
deföed
(
__DECCXX
)

147 
	#OPENSSL_SYS_VMS_DECC


	)

148 
	#OPENSSL_SYS_VMS_DECCXX


	)

150 
	#OPENSSL_SYS_VMS_NODECC


	)

155 #i‡
deföed
(
__EMX__
Ë|| deföed(
__OS2__
)

156 #unde‡
OPENSSL_SYS_UNIX


157 
	#OPENSSL_SYS_OS2


	)

161 #ifde‡
OPENSSL_SYS_UNIX


162 #i‡
deföed
(
löux
Ë|| deföed(
__löux__
Ë|| deföed(
OPENSSL_SYSNAME_LINUX
)

163 
	#OPENSSL_SYS_LINUX


	)

165 #ifde‡
OPENSSL_SYSNAME_MPE


166 
	#OPENSSL_SYS_MPE


	)

168 #ifde‡
OPENSSL_SYSNAME_SNI


169 
	#OPENSSL_SYS_SNI


	)

171 #ifde‡
OPENSSL_SYSNAME_ULTRASPARC


172 
	#OPENSSL_SYS_ULTRASPARC


	)

174 #ifde‡
OPENSSL_SYSNAME_NEWS4


175 
	#OPENSSL_SYS_NEWS4


	)

177 #ifde‡
OPENSSL_SYSNAME_MACOSX


178 
	#OPENSSL_SYS_MACOSX


	)

180 #ifde‡
OPENSSL_SYSNAME_MACOSX_RHAPSODY


181 
	#OPENSSL_SYS_MACOSX_RHAPSODY


	)

182 
	#OPENSSL_SYS_MACOSX


	)

184 #ifde‡
OPENSSL_SYSNAME_SUNOS


185 
	#OPENSSL_SYS_SUNOS


	)

187 #i‡
deföed
(
_CRAY
Ë|| deföed(
OPENSSL_SYSNAME_CRAY
)

188 
	#OPENSSL_SYS_CRAY


	)

190 #i‡
deföed
(
_AIX
Ë|| deföed(
OPENSSL_SYSNAME_AIX
)

191 
	#OPENSSL_SYS_AIX


	)

196 #ifde‡
OPENSSL_SYSNAME_VOS


197 
	#OPENSSL_SYS_VOS


	)

201 #ifde‡
OPENSSL_SYSNAME_VXWORKS


202 
	#OPENSSL_SYS_VXWORKS


	)

211 #ifde‡
OPENSSL_SYS_MSDOS


212 
	#OPENSSL_UNISTD_IO
 <
io
.
h
>

	)

213 
	#OPENSSL_DECLARE_EXIT
 
	`exô
();

	)

215 
	#OPENSSL_UNISTD_IO
 
OPENSSL_UNISTD


	)

216 
	#OPENSSL_DECLARE_EXIT


	)

238 #i‡
deföed
(
OPENSSL_SYS_VMS_NODECC
)

239 
	#OPENSSL_EXPORT
 
globÆªf


	)

240 
	#OPENSSL_IMPORT
 
globÆªf


	)

241 
	#OPENSSL_GLOBAL
 
globÆdef


	)

242 #ñi‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë&& deföed(
OPENSSL_OPT_WINDLL
)

243 
	#OPENSSL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

244 
	#OPENSSL_IMPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

245 
	#OPENSSL_GLOBAL


	)

247 
	#OPENSSL_EXPORT
 

	)

248 
	#OPENSSL_IMPORT
 

	)

249 
	#OPENSSL_GLOBAL


	)

251 
	#OPENSSL_EXTERN
 
OPENSSL_IMPORT


	)

263 #ifde‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


264 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
) \

265 
ty≥
 
_hide_
##
«me
; \

266 
ty≥
 *
_shadow_
##
	`«me
(Ë{  &
_hide_
##
«me
; } \

267 
ty≥
 
_hide_
##
«me


	)

268 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ëty≥ *
_shadow_
##
	`«me
()

	)

269 
	#OPENSSL_GLOBAL_REF
(
«me
Ë(*(
_shadow_
##
	`«me
()))

	)

271 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
Ë
OPENSSL_GLOBAL
Åy≥ 
_shadow_
##
	)
name

272 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ë
OPENSSL_EXPORT
Åy≥ 
_shadow_
##
	)
name

273 
	#OPENSSL_GLOBAL_REF
(
«me
Ë
_shadow_
##
	)
name

276 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ec.h

72 #i‚de‡
HEADER_EC_H


73 
	#HEADER_EC_H


	)

75 
	~<›ís¶/›ís¶c⁄f.h
>

77 #ifde‡
OPENSSL_NO_EC


78 #îr‹ 
EC
 
is
 
dißbÀd
.

81 
	~<›ís¶/a¢1.h
>

82 
	~<›ís¶/symhacks.h
>

83 #i‚de‡
OPENSSL_NO_DEPRECATED


84 
	~<›ís¶/bn.h
>

87 #ifde‡ 
__˝lu•lus


89 #ñi‡
deföed
(
__SUNPRO_C
)

90 #i‡
__SUNPRO_C
 >= 0x520

91 #¥agm®
îr‹_mesßges
 (
off
,
E_ARRAY_OF_INCOMPLETE_NONAME
,
E_ARRAY_OF_INCOMPLETE
)

96 #i‚de‡
OPENSSL_ECC_MAX_FIELD_BITS


97 
	#OPENSSL_ECC_MAX_FIELD_BITS
 661

	)

102 
POINT_CONVERSION_COMPRESSED
 = 2,

103 
POINT_CONVERSION_UNCOMPRESSED
 = 4,

104 
POINT_CONVERSION_HYBRID
 = 6

105 } 
	tpoöt_c⁄vîsi⁄_f‹m_t
;

108 
ec_mëhod_°
 
	tEC_METHOD
;

110 
ec_group_°


119 
	tEC_GROUP
;

121 
ec_poöt_°
 
	tEC_POINT
;

127 c⁄° 
EC_METHOD
 *
EC_GFp_sim∂e_mëhod
();

128 c⁄° 
EC_METHOD
 *
EC_GFp_m⁄t_mëhod
();

129 c⁄° 
EC_METHOD
 *
EC_GFp_ni°_mëhod
();

133 c⁄° 
EC_METHOD
 *
EC_GF2m_sim∂e_mëhod
();

136 
EC_GROUP
 *
EC_GROUP_√w
(c⁄° 
EC_METHOD
 *);

137 
EC_GROUP_‰ì
(
EC_GROUP
 *);

138 
EC_GROUP_˛ór_‰ì
(
EC_GROUP
 *);

139 
EC_GROUP_c›y
(
EC_GROUP
 *, const EC_GROUP *);

140 
EC_GROUP
 *
EC_GROUP_dup
(const EC_GROUP *);

142 c⁄° 
EC_METHOD
 *
EC_GROUP_mëhod_of
(c⁄° 
EC_GROUP
 *);

143 
EC_METHOD_gë_fõld_ty≥
(c⁄° 
EC_METHOD
 *);

145 
EC_GROUP_£t_gíî©‹
(
EC_GROUP
 *, c⁄° 
EC_POINT
 *
gíî©‹
, c⁄° 
BIGNUM
 *
‹dî
, c⁄° BIGNUM *
coÁ˘‹
);

146 c⁄° 
EC_POINT
 *
EC_GROUP_gë0_gíî©‹
(c⁄° 
EC_GROUP
 *);

147 
EC_GROUP_gë_‹dî
(c⁄° 
EC_GROUP
 *, 
BIGNUM
 *
‹dî
, 
BN_CTX
 *);

148 
EC_GROUP_gë_coÁ˘‹
(c⁄° 
EC_GROUP
 *, 
BIGNUM
 *
coÁ˘‹
, 
BN_CTX
 *);

150 
EC_GROUP_£t_curve_«me
(
EC_GROUP
 *, 
nid
);

151 
EC_GROUP_gë_curve_«me
(c⁄° 
EC_GROUP
 *);

153 
EC_GROUP_£t_a¢1_Êag
(
EC_GROUP
 *, 
Êag
);

154 
EC_GROUP_gë_a¢1_Êag
(c⁄° 
EC_GROUP
 *);

156 
EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m
(
EC_GROUP
 *, 
poöt_c⁄vîsi⁄_f‹m_t
);

157 
poöt_c⁄vîsi⁄_f‹m_t
 
EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m
(c⁄° 
EC_GROUP
 *);

159 *
EC_GROUP_gë0_£ed
(c⁄° 
EC_GROUP
 *);

160 
size_t
 
EC_GROUP_gë_£ed_Àn
(c⁄° 
EC_GROUP
 *);

161 
size_t
 
EC_GROUP_£t_£ed
(
EC_GROUP
 *, c⁄° *, size_à
Àn
);

163 
EC_GROUP_£t_curve_GFp
(
EC_GROUP
 *, c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *);

164 
EC_GROUP_gë_curve_GFp
(c⁄° 
EC_GROUP
 *, 
BIGNUM
 *
p
, BIGNUM *
a
, BIGNUM *
b
, 
BN_CTX
 *);

165 
EC_GROUP_£t_curve_GF2m
(
EC_GROUP
 *, c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *);

166 
EC_GROUP_gë_curve_GF2m
(c⁄° 
EC_GROUP
 *, 
BIGNUM
 *
p
, BIGNUM *
a
, BIGNUM *
b
, 
BN_CTX
 *);

169 
EC_GROUP_gë_degªe
(c⁄° 
EC_GROUP
 *);

172 
EC_GROUP_check
(c⁄° 
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

175 
EC_GROUP_check_dis¸imö™t
(c⁄° 
EC_GROUP
 *, 
BN_CTX
 *);

178 
EC_GROUP_cmp
(c⁄° 
EC_GROUP
 *, c⁄° EC_GROUP *, 
BN_CTX
 *);

182 
EC_GROUP
 *
EC_GROUP_√w_curve_GFp
(c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *);

183 
EC_GROUP
 *
EC_GROUP_√w_curve_GF2m
(c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *);

187 
EC_GROUP
 *
EC_GROUP_√w_by_curve_«me
(
nid
);

190 
nid
;

191 c⁄° *
commít
;

192 } 
	tEC_buûtö_curve
;

197 
size_t
 
EC_gë_buûtö_curves
(
EC_buûtö_curve
 *
r
, size_à
nôems
);

202 
EC_POINT
 *
EC_POINT_√w
(c⁄° 
EC_GROUP
 *);

203 
EC_POINT_‰ì
(
EC_POINT
 *);

204 
EC_POINT_˛ór_‰ì
(
EC_POINT
 *);

205 
EC_POINT_c›y
(
EC_POINT
 *, const EC_POINT *);

206 
EC_POINT
 *
EC_POINT_dup
(c⁄° EC_POINT *, c⁄° 
EC_GROUP
 *);

208 c⁄° 
EC_METHOD
 *
EC_POINT_mëhod_of
(c⁄° 
EC_POINT
 *);

210 
EC_POINT_£t_to_öföôy
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *);

211 
EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *,

212 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
, c⁄° BIGNUM *
z
, 
BN_CTX
 *);

213 
EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

214 
BIGNUM
 *
x
, BIGNUM *
y
, BIGNUM *
z
, 
BN_CTX
 *);

215 
EC_POINT_£t_afföe_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *,

216 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
, 
BN_CTX
 *);

217 
EC_POINT_gë_afföe_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

218 
BIGNUM
 *
x
, BIGNUM *
y
, 
BN_CTX
 *);

219 
EC_POINT_£t_com¥es£d_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *,

220 c⁄° 
BIGNUM
 *
x
, 
y_bô
, 
BN_CTX
 *);

222 
EC_POINT_£t_afföe_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *,

223 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
, 
BN_CTX
 *);

224 
EC_POINT_gë_afföe_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

225 
BIGNUM
 *
x
, BIGNUM *
y
, 
BN_CTX
 *);

226 
EC_POINT_£t_com¥es£d_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *,

227 c⁄° 
BIGNUM
 *
x
, 
y_bô
, 
BN_CTX
 *);

229 
size_t
 
EC_POINT_poöt2o˘
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *, 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
,

230 *
buf
, 
size_t
 
Àn
, 
BN_CTX
 *);

231 
EC_POINT_o˘2poöt
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *,

232 c⁄° *
buf
, 
size_t
 
Àn
, 
BN_CTX
 *);

235 
BIGNUM
 *
EC_POINT_poöt2bn
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

236 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
, 
BIGNUM
 *, 
BN_CTX
 *);

237 
EC_POINT
 *
EC_POINT_bn2poöt
(c⁄° 
EC_GROUP
 *, c⁄° 
BIGNUM
 *,

238 
EC_POINT
 *, 
BN_CTX
 *);

239 *
EC_POINT_poöt2hex
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

240 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
, 
BN_CTX
 *);

241 
EC_POINT
 *
EC_POINT_hex2poöt
(c⁄° 
EC_GROUP
 *, const *,

242 
EC_POINT
 *, 
BN_CTX
 *);

244 
EC_POINT_add
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *
r
, c⁄° EC_POINT *
a
, c⁄° EC_POINT *
b
, 
BN_CTX
 *);

245 
EC_POINT_dbl
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *
r
, c⁄° EC_POINT *
a
, 
BN_CTX
 *);

246 
EC_POINT_övît
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *, 
BN_CTX
 *);

248 
EC_POINT_is_©_öföôy
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *);

249 
EC_POINT_is_⁄_curve
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *, 
BN_CTX
 *);

250 
EC_POINT_cmp
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *
a
, c⁄° EC_POINT *
b
, 
BN_CTX
 *);

252 
EC_POINT_make_afföe
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *, 
BN_CTX
 *);

253 
EC_POINTs_make_afföe
(c⁄° 
EC_GROUP
 *, 
size_t
 
num
, 
EC_POINT
 *[], 
BN_CTX
 *);

256 
EC_POINTs_mul
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *, 
size_t
 
num
, c⁄° EC_POINT *[], c⁄° BIGNUM *[], 
BN_CTX
 *);

257 
EC_POINT_mul
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *, c⁄° EC_POINT *, c⁄° BIGNUM *, 
BN_CTX
 *);

260 
EC_GROUP_¥ecompuã_mu…
(
EC_GROUP
 *, 
BN_CTX
 *);

262 
EC_GROUP_have_¥ecompuã_mu…
(c⁄° 
EC_GROUP
 *);

270 
EC_GROUP_gë_basis_ty≥
(c⁄° 
EC_GROUP
 *);

271 
EC_GROUP_gë_åöomül_basis
(c⁄° 
EC_GROUP
 *, *
k
);

272 
EC_GROUP_gë_≥¡™omül_basis
(c⁄° 
EC_GROUP
 *, *
k1
,

273 *
k2
, *
k3
);

275 
	#OPENSSL_EC_NAMED_CURVE
 0x001

	)

277 
e˝k_∑ømëîs_°
 
	tECPKPARAMETERS
;

279 
EC_GROUP
 *
d2i_ECPKP¨amëîs
(EC_GROUP **, c⁄° **
ö
, 
Àn
);

280 
i2d_ECPKP¨amëîs
(c⁄° 
EC_GROUP
 *, **
out
);

282 
	#d2i_ECPKP¨amëîs_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
EC_GROUP
,
NULL
,
d2i_ECPKP¨amëîs
,bp,x)

	)

283 
	#i2d_ECPKP¨amëîs_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
EC_GROUP
,
i2d_ECPKP¨amëîs
,bp,x)

	)

284 
	#d2i_ECPKP¨amëîs_Â
(
Â
,
x
Ë(
EC_GROUP
 *)
	`ASN1_d2i_Â
(
NULL
, \

285 (*(*)())
d2i_ECPKP¨amëîs
,(
Â
),(**)(
x
))

	)

286 
	#i2d_ECPKP¨amëîs_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_ECPKP¨amëîs
,(fp), \

287 (*)(
x
))

	)

289 #i‚de‡
OPENSSL_NO_BIO


290 
ECPKP¨amëîs_¥öt
(
BIO
 *
bp
, c⁄° 
EC_GROUP
 *
x
, 
off
);

292 #i‚de‡
OPENSSL_NO_FP_API


293 
ECPKP¨amëîs_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_GROUP
 *
x
, 
off
);

297 
ec_key_°
 
	tEC_KEY
;

300 
	#EC_PKEY_NO_PARAMETERS
 0x001

	)

301 
	#EC_PKEY_NO_PUBKEY
 0x002

	)

303 
EC_KEY
 *
EC_KEY_√w
();

304 
EC_KEY
 *
EC_KEY_√w_by_curve_«me
(
nid
);

305 
EC_KEY_‰ì
(
EC_KEY
 *);

306 
EC_KEY
 *
EC_KEY_c›y
(EC_KEY *, const EC_KEY *);

307 
EC_KEY
 *
EC_KEY_dup
(const EC_KEY *);

309 
EC_KEY_up_ªf
(
EC_KEY
 *);

311 c⁄° 
EC_GROUP
 *
EC_KEY_gë0_group
(c⁄° 
EC_KEY
 *);

312 
EC_KEY_£t_group
(
EC_KEY
 *, c⁄° 
EC_GROUP
 *);

313 c⁄° 
BIGNUM
 *
EC_KEY_gë0_¥iv©e_key
(c⁄° 
EC_KEY
 *);

314 
EC_KEY_£t_¥iv©e_key
(
EC_KEY
 *, c⁄° 
BIGNUM
 *);

315 c⁄° 
EC_POINT
 *
EC_KEY_gë0_public_key
(c⁄° 
EC_KEY
 *);

316 
EC_KEY_£t_public_key
(
EC_KEY
 *, c⁄° 
EC_POINT
 *);

317 
EC_KEY_gë_íc_Êags
(c⁄° 
EC_KEY
 *);

318 
EC_KEY_£t_íc_Êags
(
EC_KEY
 *, );

319 
poöt_c⁄vîsi⁄_f‹m_t
 
EC_KEY_gë_c⁄v_f‹m
(c⁄° 
EC_KEY
 *);

320 
EC_KEY_£t_c⁄v_f‹m
(
EC_KEY
 *, 
poöt_c⁄vîsi⁄_f‹m_t
);

322 *
EC_KEY_gë_key_mëhod_d©a
(
EC_KEY
 *,

323 *(*
dup_func
)(*), (*
‰ì_func
)(*), (*
˛ór_‰ì_func
)(*));

332 *
EC_KEY_ö£π_key_mëhod_d©a
(
EC_KEY
 *
key
, *
d©a
,

333 *(*
dup_func
)(*), (*
‰ì_func
)(*), (*
˛ór_‰ì_func
)(*));

335 
EC_KEY_£t_a¢1_Êag
(
EC_KEY
 *, );

336 
EC_KEY_¥ecompuã_mu…
(
EC_KEY
 *, 
BN_CTX
 *
˘x
);

339 
EC_KEY_gíî©e_key
(
EC_KEY
 *);

341 
EC_KEY_check_key
(c⁄° 
EC_KEY
 *);

344 
EC_KEY
 *
d2i_ECPriv©eKey
(EC_KEY **
a
, c⁄° **
ö
, 
Àn
);

345 
i2d_ECPriv©eKey
(
EC_KEY
 *
a
, **
out
);

347 
EC_KEY
 *
d2i_ECP¨amëîs
(EC_KEY **
a
, c⁄° **
ö
, 
Àn
);

348 
i2d_ECP¨amëîs
(
EC_KEY
 *
a
, **
out
);

351 
EC_KEY
 *
o2i_ECPublicKey
(EC_KEY **
a
, c⁄° **
ö
, 
Àn
);

352 
i2o_ECPublicKey
(
EC_KEY
 *
a
, **
out
);

354 #i‚de‡
OPENSSL_NO_BIO


355 
ECP¨amëîs_¥öt
(
BIO
 *
bp
, c⁄° 
EC_KEY
 *
x
);

356 
EC_KEY_¥öt
(
BIO
 *
bp
, c⁄° 
EC_KEY
 *
x
, 
off
);

358 #i‚de‡
OPENSSL_NO_FP_API


359 
ECP¨amëîs_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_KEY
 *
x
);

360 
EC_KEY_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_KEY
 *
x
, 
off
);

363 
	#ECP¨amëîs_dup
(
x
Ë
	`ASN1_dup_of
(
EC_KEY
,
i2d_ECP¨amëîs
,
d2i_ECP¨amëîs
,x)

	)

365 #i‚de‡
__˝lu•lus


366 #i‡
deföed
(
__SUNPRO_C
)

367 #i‡
__SUNPRO_C
 >= 0x520

368 #¥agm®
îr‹_mesßges
 (,
E_ARRAY_OF_INCOMPLETE_NONAME
,
E_ARRAY_OF_INCOMPLETE
)

377 
ERR_lﬂd_EC_°rögs
();

382 
	#EC_F_COMPUTE_WNAF
 143

	)

383 
	#EC_F_D2I_ECPARAMETERS
 144

	)

384 
	#EC_F_D2I_ECPKPARAMETERS
 145

	)

385 
	#EC_F_D2I_ECPRIVATEKEY
 146

	)

386 
	#EC_F_ECPARAMETERS_PRINT
 147

	)

387 
	#EC_F_ECPARAMETERS_PRINT_FP
 148

	)

388 
	#EC_F_ECPKPARAMETERS_PRINT
 149

	)

389 
	#EC_F_ECPKPARAMETERS_PRINT_FP
 150

	)

390 
	#EC_F_ECP_NIST_MOD_192
 203

	)

391 
	#EC_F_ECP_NIST_MOD_224
 204

	)

392 
	#EC_F_ECP_NIST_MOD_256
 205

	)

393 
	#EC_F_ECP_NIST_MOD_521
 206

	)

394 
	#EC_F_EC_ASN1_GROUP2CURVE
 153

	)

395 
	#EC_F_EC_ASN1_GROUP2FIELDID
 154

	)

396 
	#EC_F_EC_ASN1_GROUP2PARAMETERS
 155

	)

397 
	#EC_F_EC_ASN1_GROUP2PKPARAMETERS
 156

	)

398 
	#EC_F_EC_ASN1_PARAMETERS2GROUP
 157

	)

399 
	#EC_F_EC_ASN1_PKPARAMETERS2GROUP
 158

	)

400 
	#EC_F_EC_EX_DATA_SET_DATA
 211

	)

401 
	#EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY
 208

	)

402 
	#EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT
 159

	)

403 
	#EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE
 195

	)

404 
	#EC_F_EC_GF2M_SIMPLE_OCT2POINT
 160

	)

405 
	#EC_F_EC_GF2M_SIMPLE_POINT2OCT
 161

	)

406 
	#EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES
 162

	)

407 
	#EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES
 163

	)

408 
	#EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES
 164

	)

409 
	#EC_F_EC_GFP_MONT_FIELD_DECODE
 133

	)

410 
	#EC_F_EC_GFP_MONT_FIELD_ENCODE
 134

	)

411 
	#EC_F_EC_GFP_MONT_FIELD_MUL
 131

	)

412 
	#EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE
 209

	)

413 
	#EC_F_EC_GFP_MONT_FIELD_SQR
 132

	)

414 
	#EC_F_EC_GFP_MONT_GROUP_SET_CURVE
 189

	)

415 
	#EC_F_EC_GFP_MONT_GROUP_SET_CURVE_GFP
 135

	)

416 
	#EC_F_EC_GFP_NIST_FIELD_MUL
 200

	)

417 
	#EC_F_EC_GFP_NIST_FIELD_SQR
 201

	)

418 
	#EC_F_EC_GFP_NIST_GROUP_SET_CURVE
 202

	)

419 
	#EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT
 165

	)

420 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE
 166

	)

421 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE_GFP
 100

	)

422 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_GENERATOR
 101

	)

423 
	#EC_F_EC_GFP_SIMPLE_MAKE_AFFINE
 102

	)

424 
	#EC_F_EC_GFP_SIMPLE_OCT2POINT
 103

	)

425 
	#EC_F_EC_GFP_SIMPLE_POINT2OCT
 104

	)

426 
	#EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE
 137

	)

427 
	#EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES
 167

	)

428 
	#EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES_GFP
 105

	)

429 
	#EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES
 168

	)

430 
	#EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES_GFP
 128

	)

431 
	#EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES
 169

	)

432 
	#EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES_GFP
 129

	)

433 
	#EC_F_EC_GROUP_CHECK
 170

	)

434 
	#EC_F_EC_GROUP_CHECK_DISCRIMINANT
 171

	)

435 
	#EC_F_EC_GROUP_COPY
 106

	)

436 
	#EC_F_EC_GROUP_GET0_GENERATOR
 139

	)

437 
	#EC_F_EC_GROUP_GET_COFACTOR
 140

	)

438 
	#EC_F_EC_GROUP_GET_CURVE_GF2M
 172

	)

439 
	#EC_F_EC_GROUP_GET_CURVE_GFP
 130

	)

440 
	#EC_F_EC_GROUP_GET_DEGREE
 173

	)

441 
	#EC_F_EC_GROUP_GET_ORDER
 141

	)

442 
	#EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS
 193

	)

443 
	#EC_F_EC_GROUP_GET_TRINOMIAL_BASIS
 194

	)

444 
	#EC_F_EC_GROUP_NEW
 108

	)

445 
	#EC_F_EC_GROUP_NEW_BY_CURVE_NAME
 174

	)

446 
	#EC_F_EC_GROUP_NEW_FROM_DATA
 175

	)

447 
	#EC_F_EC_GROUP_PRECOMPUTE_MULT
 142

	)

448 
	#EC_F_EC_GROUP_SET_CURVE_GF2M
 176

	)

449 
	#EC_F_EC_GROUP_SET_CURVE_GFP
 109

	)

450 
	#EC_F_EC_GROUP_SET_EXTRA_DATA
 110

	)

451 
	#EC_F_EC_GROUP_SET_GENERATOR
 111

	)

452 
	#EC_F_EC_KEY_CHECK_KEY
 177

	)

453 
	#EC_F_EC_KEY_COPY
 178

	)

454 
	#EC_F_EC_KEY_GENERATE_KEY
 179

	)

455 
	#EC_F_EC_KEY_NEW
 182

	)

456 
	#EC_F_EC_KEY_PRINT
 180

	)

457 
	#EC_F_EC_KEY_PRINT_FP
 181

	)

458 
	#EC_F_EC_POINTS_MAKE_AFFINE
 136

	)

459 
	#EC_F_EC_POINTS_MUL
 138

	)

460 
	#EC_F_EC_POINT_ADD
 112

	)

461 
	#EC_F_EC_POINT_CMP
 113

	)

462 
	#EC_F_EC_POINT_COPY
 114

	)

463 
	#EC_F_EC_POINT_DBL
 115

	)

464 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M
 183

	)

465 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP
 116

	)

466 
	#EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP
 117

	)

467 
	#EC_F_EC_POINT_INVERT
 210

	)

468 
	#EC_F_EC_POINT_IS_AT_INFINITY
 118

	)

469 
	#EC_F_EC_POINT_IS_ON_CURVE
 119

	)

470 
	#EC_F_EC_POINT_MAKE_AFFINE
 120

	)

471 
	#EC_F_EC_POINT_MUL
 184

	)

472 
	#EC_F_EC_POINT_NEW
 121

	)

473 
	#EC_F_EC_POINT_OCT2POINT
 122

	)

474 
	#EC_F_EC_POINT_POINT2OCT
 123

	)

475 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M
 185

	)

476 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP
 124

	)

477 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M
 186

	)

478 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP
 125

	)

479 
	#EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP
 126

	)

480 
	#EC_F_EC_POINT_SET_TO_INFINITY
 127

	)

481 
	#EC_F_EC_PRE_COMP_DUP
 207

	)

482 
	#EC_F_EC_PRE_COMP_NEW
 196

	)

483 
	#EC_F_EC_WNAF_MUL
 187

	)

484 
	#EC_F_EC_WNAF_PRECOMPUTE_MULT
 188

	)

485 
	#EC_F_I2D_ECPARAMETERS
 190

	)

486 
	#EC_F_I2D_ECPKPARAMETERS
 191

	)

487 
	#EC_F_I2D_ECPRIVATEKEY
 192

	)

488 
	#EC_F_I2O_ECPUBLICKEY
 151

	)

489 
	#EC_F_O2I_ECPUBLICKEY
 152

	)

492 
	#EC_R_ASN1_ERROR
 115

	)

493 
	#EC_R_ASN1_UNKNOWN_FIELD
 116

	)

494 
	#EC_R_BUFFER_TOO_SMALL
 100

	)

495 
	#EC_R_D2I_ECPKPARAMETERS_FAILURE
 117

	)

496 
	#EC_R_DISCRIMINANT_IS_ZERO
 118

	)

497 
	#EC_R_EC_GROUP_NEW_BY_NAME_FAILURE
 119

	)

498 
	#EC_R_FIELD_TOO_LARGE
 138

	)

499 
	#EC_R_GROUP2PKPARAMETERS_FAILURE
 120

	)

500 
	#EC_R_I2D_ECPKPARAMETERS_FAILURE
 121

	)

501 
	#EC_R_INCOMPATIBLE_OBJECTS
 101

	)

502 
	#EC_R_INVALID_ARGUMENT
 112

	)

503 
	#EC_R_INVALID_COMPRESSED_POINT
 110

	)

504 
	#EC_R_INVALID_COMPRESSION_BIT
 109

	)

505 
	#EC_R_INVALID_ENCODING
 102

	)

506 
	#EC_R_INVALID_FIELD
 103

	)

507 
	#EC_R_INVALID_FORM
 104

	)

508 
	#EC_R_INVALID_GROUP_ORDER
 122

	)

509 
	#EC_R_INVALID_PENTANOMIAL_BASIS
 132

	)

510 
	#EC_R_INVALID_PRIVATE_KEY
 123

	)

511 
	#EC_R_INVALID_TRINOMIAL_BASIS
 137

	)

512 
	#EC_R_MISSING_PARAMETERS
 124

	)

513 
	#EC_R_MISSING_PRIVATE_KEY
 125

	)

514 
	#EC_R_NOT_A_NIST_PRIME
 135

	)

515 
	#EC_R_NOT_A_SUPPORTED_NIST_PRIME
 136

	)

516 
	#EC_R_NOT_IMPLEMENTED
 126

	)

517 
	#EC_R_NOT_INITIALIZED
 111

	)

518 
	#EC_R_NO_FIELD_MOD
 133

	)

519 
	#EC_R_PASSED_NULL_PARAMETER
 134

	)

520 
	#EC_R_PKPARAMETERS2GROUP_FAILURE
 127

	)

521 
	#EC_R_POINT_AT_INFINITY
 106

	)

522 
	#EC_R_POINT_IS_NOT_ON_CURVE
 107

	)

523 
	#EC_R_SLOT_FULL
 108

	)

524 
	#EC_R_UNDEFINED_GENERATOR
 113

	)

525 
	#EC_R_UNDEFINED_ORDER
 128

	)

526 
	#EC_R_UNKNOWN_GROUP
 129

	)

527 
	#EC_R_UNKNOWN_ORDER
 114

	)

528 
	#EC_R_UNSUPPORTED_FIELD
 131

	)

529 
	#EC_R_WRONG_ORDER
 130

	)

531 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ecdh.h

69 #i‚de‡
HEADER_ECDH_H


70 
	#HEADER_ECDH_H


	)

72 
	~<›ís¶/›ís¶c⁄f.h
>

74 #ifde‡
OPENSSL_NO_ECDH


75 #îr‹ 
ECDH
 
is
 
dißbÀd
.

78 
	~<›ís¶/ec.h
>

79 
	~<›ís¶/os¶_typ.h
>

80 #i‚de‡
OPENSSL_NO_DEPRECATED


81 
	~<›ís¶/bn.h
>

84 #ifde‡
__˝lu•lus


88 c⁄° 
ECDH_METHOD
 *
ECDH_O≥nSSL
();

90 
ECDH_£t_deÁu…_mëhod
(c⁄° 
ECDH_METHOD
 *);

91 c⁄° 
ECDH_METHOD
 *
ECDH_gë_deÁu…_mëhod
();

92 
ECDH_£t_mëhod
(
EC_KEY
 *, c⁄° 
ECDH_METHOD
 *);

94 
ECDH_compuã_key
(*
out
, 
size_t
 
ouéí
, c⁄° 
EC_POINT
 *
pub_key
, 
EC_KEY
 *
ecdh
,

95 *(*
KDF
)(c⁄° *
ö
, 
size_t
 
öÀn
, *
out
, size_à*
ouéí
));

97 
ECDH_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w


98 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

99 
ECDH_£t_ex_d©a
(
EC_KEY
 *
d
, 
idx
, *
¨g
);

100 *
ECDH_gë_ex_d©a
(
EC_KEY
 *
d
, 
idx
);

107 
ERR_lﬂd_ECDH_°rögs
();

112 
	#ECDH_F_ECDH_COMPUTE_KEY
 100

	)

113 
	#ECDH_F_ECDH_DATA_NEW_METHOD
 101

	)

116 
	#ECDH_R_KDF_FAILED
 102

	)

117 
	#ECDH_R_NO_PRIVATE_VALUE
 100

	)

118 
	#ECDH_R_POINT_ARITHMETIC_FAILURE
 101

	)

120 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ecdsa.h

59 #i‚de‡
HEADER_ECDSA_H


60 
	#HEADER_ECDSA_H


	)

62 
	~<›ís¶/›ís¶c⁄f.h
>

64 #ifde‡
OPENSSL_NO_ECDSA


65 #îr‹ 
ECDSA
 
is
 
dißbÀd
.

68 
	~<›ís¶/ec.h
>

69 
	~<›ís¶/os¶_typ.h
>

70 #i‚de‡
OPENSSL_NO_DEPRECATED


71 
	~<›ís¶/bn.h
>

74 #ifde‡
__˝lu•lus


78 
	sECDSA_SIG_°


80 
BIGNUM
 *
r
;

81 
BIGNUM
 *
s
;

82 } 
	tECDSA_SIG
;

88 
ECDSA_SIG
 *
ECDSA_SIG_√w
();

94 
ECDSA_SIG_‰ì
(
ECDSA_SIG
 *
a
);

103 
i2d_ECDSA_SIG
(c⁄° 
ECDSA_SIG
 *
a
, **
µ
);

113 
ECDSA_SIG
 *
d2i_ECDSA_SIG
(ECDSA_SIG **
v
, c⁄° **
µ
, 
Àn
);

123 
ECDSA_SIG
 *
ECDSA_do_sign
(c⁄° *
dg°
,
dg°_Àn
,
EC_KEY
 *
eckey
);

136 
ECDSA_SIG
 *
ECDSA_do_sign_ex
(c⁄° *
dg°
, 
dg°Àn
,

137 c⁄° 
BIGNUM
 *
köv
, c⁄° BIGNUM *
Ω
, 
EC_KEY
 *
eckey
);

148 
ECDSA_do_vîify
(c⁄° *
dg°
, 
dg°_Àn
,

149 c⁄° 
ECDSA_SIG
 *
sig
, 
EC_KEY
* 
eckey
);

151 c⁄° 
ECDSA_METHOD
 *
ECDSA_O≥nSSL
();

157 
ECDSA_£t_deÁu…_mëhod
(c⁄° 
ECDSA_METHOD
 *
mëh
);

163 c⁄° 
ECDSA_METHOD
 *
ECDSA_gë_deÁu…_mëhod
();

171 
ECDSA_£t_mëhod
(
EC_KEY
 *
eckey
, c⁄° 
ECDSA_METHOD
 *
mëh
);

178 
ECDSA_size
(c⁄° 
EC_KEY
 *
eckey
);

188 
ECDSA_sign_£tup
(
EC_KEY
 *
eckey
, 
BN_CTX
 *
˘x
, 
BIGNUM
 **
köv
,

189 
BIGNUM
 **
Ω
);

202 
ECDSA_sign
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

203 *
sig
, *
sigÀn
, 
EC_KEY
 *
eckey
);

220 
ECDSA_sign_ex
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

221 *
sig
, *
sigÀn
, c⁄° 
BIGNUM
 *
köv
,

222 c⁄° 
BIGNUM
 *
Ω
, 
EC_KEY
 *
eckey
);

235 
ECDSA_vîify
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

236 c⁄° *
sig
, 
sigÀn
, 
EC_KEY
 *
eckey
);

239 
ECDSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w


240 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

241 
ECDSA_£t_ex_d©a
(
EC_KEY
 *
d
, 
idx
, *
¨g
);

242 *
ECDSA_gë_ex_d©a
(
EC_KEY
 *
d
, 
idx
);

249 
ERR_lﬂd_ECDSA_°rögs
();

254 
	#ECDSA_F_ECDSA_DATA_NEW_METHOD
 100

	)

255 
	#ECDSA_F_ECDSA_DO_SIGN
 101

	)

256 
	#ECDSA_F_ECDSA_DO_VERIFY
 102

	)

257 
	#ECDSA_F_ECDSA_SIGN_SETUP
 103

	)

260 
	#ECDSA_R_BAD_SIGNATURE
 100

	)

261 
	#ECDSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 101

	)

262 
	#ECDSA_R_ERR_EC_LIB
 102

	)

263 
	#ECDSA_R_MISSING_PARAMETERS
 103

	)

264 
	#ECDSA_R_NEED_NEW_SETUP_VALUES
 106

	)

265 
	#ECDSA_R_RANDOM_NUMBER_GENERATION_FAILED
 104

	)

266 
	#ECDSA_R_SIGNATURE_MALLOC_FAILED
 105

	)

268 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/engine.h

64 #i‚de‡
HEADER_ENGINE_H


65 
	#HEADER_ENGINE_H


	)

67 
	~<›ís¶/›ís¶c⁄f.h
>

69 #ifde‡
OPENSSL_NO_ENGINE


70 #îr‹ 
ENGINE
 
is
 
dißbÀd
.

73 #i‚de‡
OPENSSL_NO_DEPRECATED


74 
	~<›ís¶/bn.h
>

75 #i‚de‡
OPENSSL_NO_RSA


76 
	~<›ís¶/rß.h
>

78 #i‚de‡
OPENSSL_NO_DSA


79 
	~<›ís¶/dß.h
>

81 #i‚de‡
OPENSSL_NO_DH


82 
	~<›ís¶/dh.h
>

84 #i‚de‡
OPENSSL_NO_ECDH


85 
	~<›ís¶/ecdh.h
>

87 #i‚de‡
OPENSSL_NO_ECDSA


88 
	~<›ís¶/ecdß.h
>

90 
	~<›ís¶/ønd.h
>

91 
	~<›ís¶/°‹e.h
>

92 
	~<›ís¶/ui.h
>

93 
	~<›ís¶/îr.h
>

96 
	~<›ís¶/x509.h
>

98 
	~<›ís¶/os¶_typ.h
>

99 
	~<›ís¶/symhacks.h
>

101 #ifde‡ 
__˝lu•lus


107 
	#ENGINE_METHOD_RSA
 ()0x0001

	)

108 
	#ENGINE_METHOD_DSA
 ()0x0002

	)

109 
	#ENGINE_METHOD_DH
 ()0x0004

	)

110 
	#ENGINE_METHOD_RAND
 ()0x0008

	)

111 
	#ENGINE_METHOD_ECDH
 ()0x0010

	)

112 
	#ENGINE_METHOD_ECDSA
 ()0x0020

	)

113 
	#ENGINE_METHOD_CIPHERS
 ()0x0040

	)

114 
	#ENGINE_METHOD_DIGESTS
 ()0x0080

	)

115 
	#ENGINE_METHOD_STORE
 ()0x0100

	)

117 
	#ENGINE_METHOD_ALL
 ()0xFFFF

	)

118 
	#ENGINE_METHOD_NONE
 ()0x0000

	)

124 
	#ENGINE_TABLE_FLAG_NOINIT
 ()0x0001

	)

132 
	#ENGINE_FLAGS_MANUAL_CMD_CTRL
 ()0x0002

	)

141 
	#ENGINE_FLAGS_BY_ID_COPY
 ()0x0004

	)

154 
	#ENGINE_CMD_FLAG_NUMERIC
 ()0x0001

	)

157 
	#ENGINE_CMD_FLAG_STRING
 ()0x0002

	)

160 
	#ENGINE_CMD_FLAG_NO_INPUT
 ()0x0004

	)

164 
	#ENGINE_CMD_FLAG_INTERNAL
 ()0x0008

	)

179 
	#ENGINE_CTRL_SET_LOGSTREAM
 1

	)

180 
	#ENGINE_CTRL_SET_PASSWORD_CALLBACK
 2

	)

181 
	#ENGINE_CTRL_HUP
 3

	)

183 
	#ENGINE_CTRL_SET_USER_INTERFACE
 4

	)

184 
	#ENGINE_CTRL_SET_CALLBACK_DATA
 5

	)

188 
	#ENGINE_CTRL_LOAD_CONFIGURATION
 6

	)

191 
	#ENGINE_CTRL_LOAD_SECTION
 7

	)

212 
	#ENGINE_CTRL_HAS_CTRL_FUNCTION
 10

	)

215 
	#ENGINE_CTRL_GET_FIRST_CMD_TYPE
 11

	)

218 
	#ENGINE_CTRL_GET_NEXT_CMD_TYPE
 12

	)

221 
	#ENGINE_CTRL_GET_CMD_FROM_NAME
 13

	)

228 
	#ENGINE_CTRL_GET_NAME_LEN_FROM_CMD
 14

	)

229 
	#ENGINE_CTRL_GET_NAME_FROM_CMD
 15

	)

231 
	#ENGINE_CTRL_GET_DESC_LEN_FROM_CMD
 16

	)

232 
	#ENGINE_CTRL_GET_DESC_FROM_CMD
 17

	)

236 
	#ENGINE_CTRL_GET_CMD_FLAGS
 18

	)

240 
	#ENGINE_CMD_BASE
 200

	)

249 
	#ENGINE_CTRL_CHIL_SET_FORKCHECK
 100

	)

254 
	#ENGINE_CTRL_CHIL_NO_LOCKING
 101

	)

266 
	sENGINE_CMD_DEFN_°


268 
cmd_num
;

269 c⁄° *
cmd_«me
;

270 c⁄° *
cmd_desc
;

271 
cmd_Êags
;

272 } 
	tENGINE_CMD_DEFN
;

275 (*
ENGINE_GEN_FUNC_PTR
)();

277 (*
ENGINE_GEN_INT_FUNC_PTR
)(
	tENGINE
 *);

279 (*
ENGINE_CTRL_FUNC_PTR
)(
	tENGINE
 *, , , *, (*
	tf
)());

281 
EVP_PKEY
 * (*
	tENGINE_LOAD_KEY_PTR
)(
	tENGINE
 *, const *,

282 
	tUI_METHOD
 *
	tui_mëhod
, *
	tˇŒback_d©a
);

283 (*
ENGINE_SSL_CLIENT_CERT_PTR
)(
	tENGINE
 *, 
	tSSL
 *
	ts¶
,

284 
	tSTACK_OF
(
	tX509_NAME
Ë*
	tˇ_dn
, 
	tX509
 **
	tp˚π
, 
	tEVP_PKEY
 **
	tpkey
,

285 
	tSTACK_OF
(
	tX509
Ë**
	tpŸhî
, 
	tUI_METHOD
 *
	tui_mëhod
, *
	tˇŒback_d©a
);

298 (*
ENGINE_CIPHERS_PTR
)(
	tENGINE
 *, c⁄° 
	tEVP_CIPHER
 **, const **, );

299 (*
ENGINE_DIGESTS_PTR
)(
	tENGINE
 *, c⁄° 
	tEVP_MD
 **, const **, );

312 
ENGINE
 *
ENGINE_gë_fú°
();

313 
ENGINE
 *
ENGINE_gë_œ°
();

315 
ENGINE
 *
ENGINE_gë_√xt
(ENGINE *
e
);

316 
ENGINE
 *
ENGINE_gë_¥ev
(ENGINE *
e
);

318 
ENGINE_add
(
ENGINE
 *
e
);

320 
ENGINE_ªmove
(
ENGINE
 *
e
);

322 
ENGINE
 *
ENGINE_by_id
(c⁄° *
id
);

324 
ENGINE_lﬂd_›ís¶
();

325 
ENGINE_lﬂd_dy«mic
();

326 #i‚de‡
OPENSSL_NO_STATIC_ENGINE


327 
ENGINE_lﬂd_4758cˇ
();

328 
ENGINE_lﬂd_´p
();

329 
ENGINE_lﬂd_©Æœ
();

330 
ENGINE_lﬂd_chû
();

331 
ENGINE_lﬂd_cswi·
();

332 #i‚de‡
OPENSSL_NO_GMP


333 
ENGINE_lﬂd_gmp
();

335 
ENGINE_lﬂd_nur⁄
();

336 
ENGINE_lﬂd_suªw¨e
();

337 
ENGINE_lﬂd_ub£c
();

339 
ENGINE_lﬂd_¸y±odev
();

340 
ENGINE_lﬂd_∑dlock
();

341 
ENGINE_lﬂd_buûtö_ígöes
();

342 #ifde‡
OPENSSL_SYS_WIN32


343 #i‚de‡
OPENSSL_NO_CAPIENG


344 
ENGINE_lﬂd_ˇpi
();

350 
ENGINE_gë_èbÀ_Êags
();

351 
ENGINE_£t_èbÀ_Êags
(
Êags
);

361 
ENGINE_ªgi°î_RSA
(
ENGINE
 *
e
);

362 
ENGINE_uƒegi°î_RSA
(
ENGINE
 *
e
);

363 
ENGINE_ªgi°î_Æl_RSA
();

365 
ENGINE_ªgi°î_DSA
(
ENGINE
 *
e
);

366 
ENGINE_uƒegi°î_DSA
(
ENGINE
 *
e
);

367 
ENGINE_ªgi°î_Æl_DSA
();

369 
ENGINE_ªgi°î_ECDH
(
ENGINE
 *
e
);

370 
ENGINE_uƒegi°î_ECDH
(
ENGINE
 *
e
);

371 
ENGINE_ªgi°î_Æl_ECDH
();

373 
ENGINE_ªgi°î_ECDSA
(
ENGINE
 *
e
);

374 
ENGINE_uƒegi°î_ECDSA
(
ENGINE
 *
e
);

375 
ENGINE_ªgi°î_Æl_ECDSA
();

377 
ENGINE_ªgi°î_DH
(
ENGINE
 *
e
);

378 
ENGINE_uƒegi°î_DH
(
ENGINE
 *
e
);

379 
ENGINE_ªgi°î_Æl_DH
();

381 
ENGINE_ªgi°î_RAND
(
ENGINE
 *
e
);

382 
ENGINE_uƒegi°î_RAND
(
ENGINE
 *
e
);

383 
ENGINE_ªgi°î_Æl_RAND
();

385 
ENGINE_ªgi°î_STORE
(
ENGINE
 *
e
);

386 
ENGINE_uƒegi°î_STORE
(
ENGINE
 *
e
);

387 
ENGINE_ªgi°î_Æl_STORE
();

389 
ENGINE_ªgi°î_cùhîs
(
ENGINE
 *
e
);

390 
ENGINE_uƒegi°î_cùhîs
(
ENGINE
 *
e
);

391 
ENGINE_ªgi°î_Æl_cùhîs
();

393 
ENGINE_ªgi°î_dige°s
(
ENGINE
 *
e
);

394 
ENGINE_uƒegi°î_dige°s
(
ENGINE
 *
e
);

395 
ENGINE_ªgi°î_Æl_dige°s
();

401 
ENGINE_ªgi°î_com∂ëe
(
ENGINE
 *
e
);

402 
ENGINE_ªgi°î_Æl_com∂ëe
();

411 
ENGINE_˘æ
(
ENGINE
 *
e
, 
cmd
, 
i
, *
p
, (*
f
)());

417 
ENGINE_cmd_is_execuèbÀ
(
ENGINE
 *
e
, 
cmd
);

423 
ENGINE_˘æ_cmd
(
ENGINE
 *
e
, c⁄° *
cmd_«me
,

424 
i
, *
p
, (*
f
)(), 
cmd_›ti⁄Æ
);

445 
ENGINE_˘æ_cmd_°rög
(
ENGINE
 *
e
, c⁄° *
cmd_«me
, c⁄° *
¨g
,

446 
cmd_›ti⁄Æ
);

454 
ENGINE
 *
ENGINE_√w
();

455 
ENGINE_‰ì
(
ENGINE
 *
e
);

456 
ENGINE_up_ªf
(
ENGINE
 *
e
);

457 
ENGINE_£t_id
(
ENGINE
 *
e
, c⁄° *
id
);

458 
ENGINE_£t_«me
(
ENGINE
 *
e
, c⁄° *
«me
);

459 
ENGINE_£t_RSA
(
ENGINE
 *
e
, c⁄° 
RSA_METHOD
 *
rß_mëh
);

460 
ENGINE_£t_DSA
(
ENGINE
 *
e
, c⁄° 
DSA_METHOD
 *
dß_mëh
);

461 
ENGINE_£t_ECDH
(
ENGINE
 *
e
, c⁄° 
ECDH_METHOD
 *
ecdh_mëh
);

462 
ENGINE_£t_ECDSA
(
ENGINE
 *
e
, c⁄° 
ECDSA_METHOD
 *
ecdß_mëh
);

463 
ENGINE_£t_DH
(
ENGINE
 *
e
, c⁄° 
DH_METHOD
 *
dh_mëh
);

464 
ENGINE_£t_RAND
(
ENGINE
 *
e
, c⁄° 
RAND_METHOD
 *
ønd_mëh
);

465 
ENGINE_£t_STORE
(
ENGINE
 *
e
, c⁄° 
STORE_METHOD
 *
°‹e_mëh
);

466 
ENGINE_£t_de°roy_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_GEN_INT_FUNC_PTR
 
de°roy_f
);

467 
ENGINE_£t_öô_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_GEN_INT_FUNC_PTR
 
öô_f
);

468 
ENGINE_£t_föish_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_GEN_INT_FUNC_PTR
 
föish_f
);

469 
ENGINE_£t_˘æ_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_CTRL_FUNC_PTR
 
˘æ_f
);

470 
ENGINE_£t_lﬂd_¥ivkey_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_LOAD_KEY_PTR
 
lﬂd¥iv_f
);

471 
ENGINE_£t_lﬂd_pubkey_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_LOAD_KEY_PTR
 
lﬂdpub_f
);

472 
ENGINE_£t_lﬂd_s¶_˛õ¡_˚π_fun˘i⁄
(
ENGINE
 *
e
,

473 
ENGINE_SSL_CLIENT_CERT_PTR
 
lﬂds¶_f
);

474 
ENGINE_£t_cùhîs
(
ENGINE
 *
e
, 
ENGINE_CIPHERS_PTR
 
f
);

475 
ENGINE_£t_dige°s
(
ENGINE
 *
e
, 
ENGINE_DIGESTS_PTR
 
f
);

476 
ENGINE_£t_Êags
(
ENGINE
 *
e
, 
Êags
);

477 
ENGINE_£t_cmd_de‚s
(
ENGINE
 *
e
, c⁄° 
ENGINE_CMD_DEFN
 *
de‚s
);

479 
ENGINE_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

480 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

481 
ENGINE_£t_ex_d©a
(
ENGINE
 *
e
, 
idx
, *
¨g
);

482 *
ENGINE_gë_ex_d©a
(c⁄° 
ENGINE
 *
e
, 
idx
);

488 
ENGINE_˛ónup
();

494 c⁄° *
ENGINE_gë_id
(c⁄° 
ENGINE
 *
e
);

495 c⁄° *
ENGINE_gë_«me
(c⁄° 
ENGINE
 *
e
);

496 c⁄° 
RSA_METHOD
 *
ENGINE_gë_RSA
(c⁄° 
ENGINE
 *
e
);

497 c⁄° 
DSA_METHOD
 *
ENGINE_gë_DSA
(c⁄° 
ENGINE
 *
e
);

498 c⁄° 
ECDH_METHOD
 *
ENGINE_gë_ECDH
(c⁄° 
ENGINE
 *
e
);

499 c⁄° 
ECDSA_METHOD
 *
ENGINE_gë_ECDSA
(c⁄° 
ENGINE
 *
e
);

500 c⁄° 
DH_METHOD
 *
ENGINE_gë_DH
(c⁄° 
ENGINE
 *
e
);

501 c⁄° 
RAND_METHOD
 *
ENGINE_gë_RAND
(c⁄° 
ENGINE
 *
e
);

502 c⁄° 
STORE_METHOD
 *
ENGINE_gë_STORE
(c⁄° 
ENGINE
 *
e
);

503 
ENGINE_GEN_INT_FUNC_PTR
 
ENGINE_gë_de°roy_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

504 
ENGINE_GEN_INT_FUNC_PTR
 
ENGINE_gë_öô_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

505 
ENGINE_GEN_INT_FUNC_PTR
 
ENGINE_gë_föish_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

506 
ENGINE_CTRL_FUNC_PTR
 
ENGINE_gë_˘æ_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

507 
ENGINE_LOAD_KEY_PTR
 
ENGINE_gë_lﬂd_¥ivkey_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

508 
ENGINE_LOAD_KEY_PTR
 
ENGINE_gë_lﬂd_pubkey_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

509 
ENGINE_SSL_CLIENT_CERT_PTR
 
ENGINE_gë_s¶_˛õ¡_˚π_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

510 
ENGINE_CIPHERS_PTR
 
ENGINE_gë_cùhîs
(c⁄° 
ENGINE
 *
e
);

511 
ENGINE_DIGESTS_PTR
 
ENGINE_gë_dige°s
(c⁄° 
ENGINE
 *
e
);

512 c⁄° 
EVP_CIPHER
 *
ENGINE_gë_cùhî
(
ENGINE
 *
e
, 
nid
);

513 c⁄° 
EVP_MD
 *
ENGINE_gë_dige°
(
ENGINE
 *
e
, 
nid
);

514 c⁄° 
ENGINE_CMD_DEFN
 *
ENGINE_gë_cmd_de‚s
(c⁄° 
ENGINE
 *
e
);

515 
ENGINE_gë_Êags
(c⁄° 
ENGINE
 *
e
);

532 
ENGINE_öô
(
ENGINE
 *
e
);

536 
ENGINE_föish
(
ENGINE
 *
e
);

541 
EVP_PKEY
 *
ENGINE_lﬂd_¥iv©e_key
(
ENGINE
 *
e
, c⁄° *
key_id
,

542 
UI_METHOD
 *
ui_mëhod
, *
ˇŒback_d©a
);

543 
EVP_PKEY
 *
ENGINE_lﬂd_public_key
(
ENGINE
 *
e
, c⁄° *
key_id
,

544 
UI_METHOD
 *
ui_mëhod
, *
ˇŒback_d©a
);

545 
ENGINE_lﬂd_s¶_˛õ¡_˚π
(
ENGINE
 *
e
, 
SSL
 *
s
,

546 
STACK_OF
(
X509_NAME
Ë*
ˇ_dn
, 
X509
 **
p˚π
, 
EVP_PKEY
 **
µkey
,

547 
STACK_OF
(
X509
Ë**
pŸhî
,

548 
UI_METHOD
 *
ui_mëhod
, *
ˇŒback_d©a
);

554 
ENGINE
 *
ENGINE_gë_deÁu…_RSA
();

556 
ENGINE
 *
ENGINE_gë_deÁu…_DSA
();

557 
ENGINE
 *
ENGINE_gë_deÁu…_ECDH
();

558 
ENGINE
 *
ENGINE_gë_deÁu…_ECDSA
();

559 
ENGINE
 *
ENGINE_gë_deÁu…_DH
();

560 
ENGINE
 *
ENGINE_gë_deÁu…_RAND
();

563 
ENGINE
 *
ENGINE_gë_cùhî_ígöe
(
nid
);

564 
ENGINE
 *
ENGINE_gë_dige°_ígöe
(
nid
);

570 
ENGINE_£t_deÁu…_RSA
(
ENGINE
 *
e
);

571 
ENGINE_£t_deÁu…_°rög
(
ENGINE
 *
e
, c⁄° *
def_li°
);

573 
ENGINE_£t_deÁu…_DSA
(
ENGINE
 *
e
);

574 
ENGINE_£t_deÁu…_ECDH
(
ENGINE
 *
e
);

575 
ENGINE_£t_deÁu…_ECDSA
(
ENGINE
 *
e
);

576 
ENGINE_£t_deÁu…_DH
(
ENGINE
 *
e
);

577 
ENGINE_£t_deÁu…_RAND
(
ENGINE
 *
e
);

578 
ENGINE_£t_deÁu…_cùhîs
(
ENGINE
 *
e
);

579 
ENGINE_£t_deÁu…_dige°s
(
ENGINE
 *
e
);

586 
ENGINE_£t_deÁu…
(
ENGINE
 *
e
, 
Êags
);

588 
ENGINE_add_c⁄f_moduÀ
();

598 
	#OSSL_DYNAMIC_VERSION
 ()0x00020000

	)

601 
	#OSSL_DYNAMIC_OLDEST
 ()0x00020000

	)

612 *(*
	tdyn_MEM_mÆloc_cb
)(
	tsize_t
);

613 *(*
	tdyn_MEM_ªÆloc_cb
)(*, 
	tsize_t
);

614 (*
dyn_MEM_‰ì_cb
)(*);

615 
	s°_dy«mic_MEM_‚s
 {

616 
dyn_MEM_mÆloc_cb
 
mÆloc_cb
;

617 
dyn_MEM_ªÆloc_cb
 
ªÆloc_cb
;

618 
dyn_MEM_‰ì_cb
 
‰ì_cb
;

619 } 
	tdy«mic_MEM_‚s
;

622 (*
dyn_lock_lockög_cb
)(,,const *,);

623 (*
dyn_lock_add_lock_cb
)(*,,,const *,);

624 
CRYPTO_dy∆ock_vÆue
 *(*
	tdyn_dy∆ock_¸óã_cb
)(

626 (*
dyn_dy∆ock_lock_cb
)(,
	tCRYPTO_dy∆ock_vÆue
 *,

628 (*
dyn_dy∆ock_de°roy_cb
)(
	tCRYPTO_dy∆ock_vÆue
 *,

630 
	s°_dy«mic_LOCK_‚s
 {

631 
dyn_lock_lockög_cb
 
lock_lockög_cb
;

632 
dyn_lock_add_lock_cb
 
lock_add_lock_cb
;

633 
dyn_dy∆ock_¸óã_cb
 
dy∆ock_¸óã_cb
;

634 
dyn_dy∆ock_lock_cb
 
dy∆ock_lock_cb
;

635 
dyn_dy∆ock_de°roy_cb
 
dy∆ock_de°roy_cb
;

636 } 
	tdy«mic_LOCK_‚s
;

638 
	s°_dy«mic_‚s
 {

639 *
°©ic_°©e
;

640 c⁄° 
ERR_FNS
 *
îr_‚s
;

641 c⁄° 
CRYPTO_EX_DATA_IMPL
 *
ex_d©a_‚s
;

642 
dy«mic_MEM_‚s
 
mem_‚s
;

643 
dy«mic_LOCK_‚s
 
lock_‚s
;

644 } 
	tdy«mic_‚s
;

655 (*
	tdy«mic_v_check_‚
)(
	tos¶_vîsi⁄
);

656 
	#IMPLEMENT_DYNAMIC_CHECK_FN
() \

657 
OPENSSL_EXPORT
 
	`v_check
(
v
) { \

658 if(
v
 >
OSSL_DYNAMIC_OLDEST
Ë 
OSSL_DYNAMIC_VERSION
; \

659  0; }

	)

676 (*
dy«mic_böd_ígöe
)(
	tENGINE
 *
	te
, c⁄° *
	tid
,

677 c⁄° 
	tdy«mic_‚s
 *
	t‚s
);

678 
	#IMPLEMENT_DYNAMIC_BIND_FN
(
‚
) \

679 
OPENSSL_EXPORT
 \

680 
	`böd_ígöe
(
ENGINE
 *
e
, c⁄° *
id
, c⁄° 
dy«mic_‚s
 *
‚s
) { \

681 if(
	`ENGINE_gë_°©ic_°©e
(Ë=
‚s
->
°©ic_°©e
Ë
skù_cbs
; \

682 if(!
	`CRYPTO_£t_mem_fun˘i⁄s
(
‚s
->
mem_‚s
.
mÆloc_cb
, \

683 
‚s
->
mem_‚s
.
ªÆloc_cb
, fns->mem_‚s.
‰ì_cb
)) \

685 
	`CRYPTO_£t_lockög_ˇŒback
(
‚s
->
lock_‚s
.
lock_lockög_cb
); \

686 
	`CRYPTO_£t_add_lock_ˇŒback
(
‚s
->
lock_‚s
.
lock_add_lock_cb
); \

687 
	`CRYPTO_£t_dy∆ock_¸óã_ˇŒback
(
‚s
->
lock_‚s
.
dy∆ock_¸óã_cb
); \

688 
	`CRYPTO_£t_dy∆ock_lock_ˇŒback
(
‚s
->
lock_‚s
.
dy∆ock_lock_cb
); \

689 
	`CRYPTO_£t_dy∆ock_de°roy_ˇŒback
(
‚s
->
lock_‚s
.
dy∆ock_de°roy_cb
); \

690 if(!
	`CRYPTO_£t_ex_d©a_im∂emíèti⁄
(
‚s
->
ex_d©a_‚s
)) \

692 if(!
	`ERR_£t_im∂emíèti⁄
(
‚s
->
îr_‚s
))  0; \

693 
skù_cbs
: \

694 if(!
	`‚
(
e
,
id
))  0; \

695  1; }

	)

706 *
ENGINE_gë_°©ic_°©e
();

708 #i‡
deföed
(
__O≥nBSD__
Ë|| deföed(
__FªeBSD__
)

709 
ENGINE_£tup_bsd_¸y±odev
();

716 
ERR_lﬂd_ENGINE_°rögs
();

721 
	#ENGINE_F_DYNAMIC_CTRL
 180

	)

722 
	#ENGINE_F_DYNAMIC_GET_DATA_CTX
 181

	)

723 
	#ENGINE_F_DYNAMIC_LOAD
 182

	)

724 
	#ENGINE_F_DYNAMIC_SET_DATA_CTX
 183

	)

725 
	#ENGINE_F_ENGINE_ADD
 105

	)

726 
	#ENGINE_F_ENGINE_BY_ID
 106

	)

727 
	#ENGINE_F_ENGINE_CMD_IS_EXECUTABLE
 170

	)

728 
	#ENGINE_F_ENGINE_CTRL
 142

	)

729 
	#ENGINE_F_ENGINE_CTRL_CMD
 178

	)

730 
	#ENGINE_F_ENGINE_CTRL_CMD_STRING
 171

	)

731 
	#ENGINE_F_ENGINE_FINISH
 107

	)

732 
	#ENGINE_F_ENGINE_FREE_UTIL
 108

	)

733 
	#ENGINE_F_ENGINE_GET_CIPHER
 185

	)

734 
	#ENGINE_F_ENGINE_GET_DEFAULT_TYPE
 177

	)

735 
	#ENGINE_F_ENGINE_GET_DIGEST
 186

	)

736 
	#ENGINE_F_ENGINE_GET_NEXT
 115

	)

737 
	#ENGINE_F_ENGINE_GET_PREV
 116

	)

738 
	#ENGINE_F_ENGINE_INIT
 119

	)

739 
	#ENGINE_F_ENGINE_LIST_ADD
 120

	)

740 
	#ENGINE_F_ENGINE_LIST_REMOVE
 121

	)

741 
	#ENGINE_F_ENGINE_LOAD_PRIVATE_KEY
 150

	)

742 
	#ENGINE_F_ENGINE_LOAD_PUBLIC_KEY
 151

	)

743 
	#ENGINE_F_ENGINE_LOAD_SSL_CLIENT_CERT
 192

	)

744 
	#ENGINE_F_ENGINE_NEW
 122

	)

745 
	#ENGINE_F_ENGINE_REMOVE
 123

	)

746 
	#ENGINE_F_ENGINE_SET_DEFAULT_STRING
 189

	)

747 
	#ENGINE_F_ENGINE_SET_DEFAULT_TYPE
 126

	)

748 
	#ENGINE_F_ENGINE_SET_ID
 129

	)

749 
	#ENGINE_F_ENGINE_SET_NAME
 130

	)

750 
	#ENGINE_F_ENGINE_TABLE_REGISTER
 184

	)

751 
	#ENGINE_F_ENGINE_UNLOAD_KEY
 152

	)

752 
	#ENGINE_F_ENGINE_UNLOCKED_FINISH
 191

	)

753 
	#ENGINE_F_ENGINE_UP_REF
 190

	)

754 
	#ENGINE_F_INT_CTRL_HELPER
 172

	)

755 
	#ENGINE_F_INT_ENGINE_CONFIGURE
 188

	)

756 
	#ENGINE_F_INT_ENGINE_MODULE_INIT
 187

	)

757 
	#ENGINE_F_LOG_MESSAGE
 141

	)

760 
	#ENGINE_R_ALREADY_LOADED
 100

	)

761 
	#ENGINE_R_ARGUMENT_IS_NOT_A_NUMBER
 133

	)

762 
	#ENGINE_R_CMD_NOT_EXECUTABLE
 134

	)

763 
	#ENGINE_R_COMMAND_TAKES_INPUT
 135

	)

764 
	#ENGINE_R_COMMAND_TAKES_NO_INPUT
 136

	)

765 
	#ENGINE_R_CONFLICTING_ENGINE_ID
 103

	)

766 
	#ENGINE_R_CTRL_COMMAND_NOT_IMPLEMENTED
 119

	)

767 
	#ENGINE_R_DH_NOT_IMPLEMENTED
 139

	)

768 
	#ENGINE_R_DSA_NOT_IMPLEMENTED
 140

	)

769 
	#ENGINE_R_DSO_FAILURE
 104

	)

770 
	#ENGINE_R_DSO_NOT_FOUND
 132

	)

771 
	#ENGINE_R_ENGINES_SECTION_ERROR
 148

	)

772 
	#ENGINE_R_ENGINE_CONFIGURATION_ERROR
 101

	)

773 
	#ENGINE_R_ENGINE_IS_NOT_IN_LIST
 105

	)

774 
	#ENGINE_R_ENGINE_SECTION_ERROR
 149

	)

775 
	#ENGINE_R_FAILED_LOADING_PRIVATE_KEY
 128

	)

776 
	#ENGINE_R_FAILED_LOADING_PUBLIC_KEY
 129

	)

777 
	#ENGINE_R_FINISH_FAILED
 106

	)

778 
	#ENGINE_R_GET_HANDLE_FAILED
 107

	)

779 
	#ENGINE_R_ID_OR_NAME_MISSING
 108

	)

780 
	#ENGINE_R_INIT_FAILED
 109

	)

781 
	#ENGINE_R_INTERNAL_LIST_ERROR
 110

	)

782 
	#ENGINE_R_INVALID_ARGUMENT
 143

	)

783 
	#ENGINE_R_INVALID_CMD_NAME
 137

	)

784 
	#ENGINE_R_INVALID_CMD_NUMBER
 138

	)

785 
	#ENGINE_R_INVALID_INIT_VALUE
 151

	)

786 
	#ENGINE_R_INVALID_STRING
 150

	)

787 
	#ENGINE_R_NOT_INITIALISED
 117

	)

788 
	#ENGINE_R_NOT_LOADED
 112

	)

789 
	#ENGINE_R_NO_CONTROL_FUNCTION
 120

	)

790 
	#ENGINE_R_NO_INDEX
 144

	)

791 
	#ENGINE_R_NO_LOAD_FUNCTION
 125

	)

792 
	#ENGINE_R_NO_REFERENCE
 130

	)

793 
	#ENGINE_R_NO_SUCH_ENGINE
 116

	)

794 
	#ENGINE_R_NO_UNLOAD_FUNCTION
 126

	)

795 
	#ENGINE_R_PROVIDE_PARAMETERS
 113

	)

796 
	#ENGINE_R_RSA_NOT_IMPLEMENTED
 141

	)

797 
	#ENGINE_R_UNIMPLEMENTED_CIPHER
 146

	)

798 
	#ENGINE_R_UNIMPLEMENTED_DIGEST
 147

	)

799 
	#ENGINE_R_VERSION_INCOMPATIBILITY
 145

	)

801 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/err.h

59 #i‚de‡
HEADER_ERR_H


60 
	#HEADER_ERR_H


	)

62 
	~<›ís¶/e_os2.h
>

64 #i‚de‡
OPENSSL_NO_FP_API


65 
	~<°dio.h
>

66 
	~<°dlib.h
>

69 
	~<›ís¶/os¶_typ.h
>

70 #i‚de‡
OPENSSL_NO_BIO


71 
	~<›ís¶/bio.h
>

73 #i‚de‡
OPENSSL_NO_LHASH


74 
	~<›ís¶/lhash.h
>

77 #ifdef 
__˝lu•lus


81 #i‚de‡
OPENSSL_NO_ERR


82 
	#ERR_PUT_îr‹
(
a
,
b
,
c
,
d
,
e
Ë
	`ERR_put_îr‹
◊,b,c,d,e)

	)

84 
	#ERR_PUT_îr‹
(
a
,
b
,
c
,
d
,
e
Ë
	`ERR_put_îr‹
◊,b,c,
NULL
,0)

	)

87 
	~<î∫o.h
>

89 
	#ERR_TXT_MALLOCED
 0x01

	)

90 
	#ERR_TXT_STRING
 0x02

	)

92 
	#ERR_FLAG_MARK
 0x01

	)

94 
	#ERR_NUM_ERRORS
 16

	)

95 
	sîr_°©e_°


97 
pid
;

98 
îr_Êags
[
ERR_NUM_ERRORS
];

99 
îr_buf„r
[
ERR_NUM_ERRORS
];

100 *
îr_d©a
[
ERR_NUM_ERRORS
];

101 
îr_d©a_Êags
[
ERR_NUM_ERRORS
];

102 c⁄° *
îr_fûe
[
ERR_NUM_ERRORS
];

103 
îr_löe
[
ERR_NUM_ERRORS
];

104 
t›
,
bŸtom
;

105 } 
	tERR_STATE
;

108 
	#ERR_LIB_NONE
 1

	)

109 
	#ERR_LIB_SYS
 2

	)

110 
	#ERR_LIB_BN
 3

	)

111 
	#ERR_LIB_RSA
 4

	)

112 
	#ERR_LIB_DH
 5

	)

113 
	#ERR_LIB_EVP
 6

	)

114 
	#ERR_LIB_BUF
 7

	)

115 
	#ERR_LIB_OBJ
 8

	)

116 
	#ERR_LIB_PEM
 9

	)

117 
	#ERR_LIB_DSA
 10

	)

118 
	#ERR_LIB_X509
 11

	)

120 
	#ERR_LIB_ASN1
 13

	)

121 
	#ERR_LIB_CONF
 14

	)

122 
	#ERR_LIB_CRYPTO
 15

	)

123 
	#ERR_LIB_EC
 16

	)

124 
	#ERR_LIB_SSL
 20

	)

130 
	#ERR_LIB_BIO
 32

	)

131 
	#ERR_LIB_PKCS7
 33

	)

132 
	#ERR_LIB_X509V3
 34

	)

133 
	#ERR_LIB_PKCS12
 35

	)

134 
	#ERR_LIB_RAND
 36

	)

135 
	#ERR_LIB_DSO
 37

	)

136 
	#ERR_LIB_ENGINE
 38

	)

137 
	#ERR_LIB_OCSP
 39

	)

138 
	#ERR_LIB_UI
 40

	)

139 
	#ERR_LIB_COMP
 41

	)

140 
	#ERR_LIB_ECDSA
 42

	)

141 
	#ERR_LIB_ECDH
 43

	)

142 
	#ERR_LIB_STORE
 44

	)

143 
	#ERR_LIB_FIPS
 45

	)

144 
	#ERR_LIB_CMS
 46

	)

145 
	#ERR_LIB_JPAKE
 47

	)

147 
	#ERR_LIB_USER
 128

	)

149 
	#SYSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_SYS
,(f),‘),
__FILE__
,
__LINE__
)

	)

150 
	#BNîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BN
,(f),‘),
__FILE__
,
__LINE__
)

	)

151 
	#RSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_RSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

152 
	#DHîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DH
,(f),‘),
__FILE__
,
__LINE__
)

	)

153 
	#EVPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_EVP
,(f),‘),
__FILE__
,
__LINE__
)

	)

154 
	#BUFîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BUF
,(f),‘),
__FILE__
,
__LINE__
)

	)

155 
	#OBJîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_OBJ
,(f),‘),
__FILE__
,
__LINE__
)

	)

156 
	#PEMîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PEM
,(f),‘),
__FILE__
,
__LINE__
)

	)

157 
	#DSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

158 
	#X509îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_X509
,(f),‘),
__FILE__
,
__LINE__
)

	)

159 
	#ASN1îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ASN1
,(f),‘),
__FILE__
,
__LINE__
)

	)

160 
	#CONFîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CONF
,(f),‘),
__FILE__
,
__LINE__
)

	)

161 
	#CRYPTOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CRYPTO
,(f),‘),
__FILE__
,
__LINE__
)

	)

162 
	#ECîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_EC
,(f),‘),
__FILE__
,
__LINE__
)

	)

163 
	#SSLîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_SSL
,(f),‘),
__FILE__
,
__LINE__
)

	)

164 
	#BIOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BIO
,(f),‘),
__FILE__
,
__LINE__
)

	)

165 
	#PKCS7îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PKCS7
,(f),‘),
__FILE__
,
__LINE__
)

	)

166 
	#X509V3îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_X509V3
,(f),‘),
__FILE__
,
__LINE__
)

	)

167 
	#PKCS12îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PKCS12
,(f),‘),
__FILE__
,
__LINE__
)

	)

168 
	#RANDîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_RAND
,(f),‘),
__FILE__
,
__LINE__
)

	)

169 
	#DSOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DSO
,(f),‘),
__FILE__
,
__LINE__
)

	)

170 
	#ENGINEîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ENGINE
,(f),‘),
__FILE__
,
__LINE__
)

	)

171 
	#OCSPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_OCSP
,(f),‘),
__FILE__
,
__LINE__
)

	)

172 
	#UIîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_UI
,(f),‘),
__FILE__
,
__LINE__
)

	)

173 
	#COMPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_COMP
,(f),‘),
__FILE__
,
__LINE__
)

	)

174 
	#ECDSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ECDSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

175 
	#ECDHîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ECDH
,(f),‘),
__FILE__
,
__LINE__
)

	)

176 
	#STOREîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_STORE
,(f),‘),
__FILE__
,
__LINE__
)

	)

177 
	#FIPSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_FIPS
,(f),‘),
__FILE__
,
__LINE__
)

	)

178 
	#CMSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CMS
,(f),‘),
__FILE__
,
__LINE__
)

	)

179 
	#JPAKEîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_JPAKE
,(f),‘),
__FILE__
,
__LINE__
)

	)

183 
	#ERR_PACK
(
l
,
f
,
r
) ((((()l)&0xffL)*0x1000000)| \

184 (((()
f
)&0xfffL)*0x1000)| \

185 (((()
r
)&0xfffL)))

	)

186 
	#ERR_GET_LIB
(
l
Ë()((((Ó)>>24L)&0xffL)

	)

187 
	#ERR_GET_FUNC
(
l
Ë()((((Ó)>>12L)&0xfffL)

	)

188 
	#ERR_GET_REASON
(
l
Ë()(÷)&0xfffL)

	)

189 
	#ERR_FATAL_ERROR
(
l
Ë()(÷)&
ERR_R_FATAL
)

	)

193 
	#SYS_F_FOPEN
 1

	)

194 
	#SYS_F_CONNECT
 2

	)

195 
	#SYS_F_GETSERVBYNAME
 3

	)

196 
	#SYS_F_SOCKET
 4

	)

197 
	#SYS_F_IOCTLSOCKET
 5

	)

198 
	#SYS_F_BIND
 6

	)

199 
	#SYS_F_LISTEN
 7

	)

200 
	#SYS_F_ACCEPT
 8

	)

201 
	#SYS_F_WSASTARTUP
 9

	)

202 
	#SYS_F_OPENDIR
 10

	)

203 
	#SYS_F_FREAD
 11

	)

207 
	#ERR_R_SYS_LIB
 
ERR_LIB_SYS


	)

208 
	#ERR_R_BN_LIB
 
ERR_LIB_BN


	)

209 
	#ERR_R_RSA_LIB
 
ERR_LIB_RSA


	)

210 
	#ERR_R_DH_LIB
 
ERR_LIB_DH


	)

211 
	#ERR_R_EVP_LIB
 
ERR_LIB_EVP


	)

212 
	#ERR_R_BUF_LIB
 
ERR_LIB_BUF


	)

213 
	#ERR_R_OBJ_LIB
 
ERR_LIB_OBJ


	)

214 
	#ERR_R_PEM_LIB
 
ERR_LIB_PEM


	)

215 
	#ERR_R_DSA_LIB
 
ERR_LIB_DSA


	)

216 
	#ERR_R_X509_LIB
 
ERR_LIB_X509


	)

217 
	#ERR_R_ASN1_LIB
 
ERR_LIB_ASN1


	)

218 
	#ERR_R_CONF_LIB
 
ERR_LIB_CONF


	)

219 
	#ERR_R_CRYPTO_LIB
 
ERR_LIB_CRYPTO


	)

220 
	#ERR_R_EC_LIB
 
ERR_LIB_EC


	)

221 
	#ERR_R_SSL_LIB
 
ERR_LIB_SSL


	)

222 
	#ERR_R_BIO_LIB
 
ERR_LIB_BIO


	)

223 
	#ERR_R_PKCS7_LIB
 
ERR_LIB_PKCS7


	)

224 
	#ERR_R_X509V3_LIB
 
ERR_LIB_X509V3


	)

225 
	#ERR_R_PKCS12_LIB
 
ERR_LIB_PKCS12


	)

226 
	#ERR_R_RAND_LIB
 
ERR_LIB_RAND


	)

227 
	#ERR_R_DSO_LIB
 
ERR_LIB_DSO


	)

228 
	#ERR_R_ENGINE_LIB
 
ERR_LIB_ENGINE


	)

229 
	#ERR_R_OCSP_LIB
 
ERR_LIB_OCSP


	)

230 
	#ERR_R_UI_LIB
 
ERR_LIB_UI


	)

231 
	#ERR_R_COMP_LIB
 
ERR_LIB_COMP


	)

232 
	#ERR_R_ECDSA_LIB
 
ERR_LIB_ECDSA


	)

233 
	#ERR_R_ECDH_LIB
 
ERR_LIB_ECDH


	)

234 
	#ERR_R_STORE_LIB
 
ERR_LIB_STORE


	)

236 
	#ERR_R_NESTED_ASN1_ERROR
 58

	)

237 
	#ERR_R_BAD_ASN1_OBJECT_HEADER
 59

	)

238 
	#ERR_R_BAD_GET_ASN1_OBJECT_CALL
 60

	)

239 
	#ERR_R_EXPECTING_AN_ASN1_SEQUENCE
 61

	)

240 
	#ERR_R_ASN1_LENGTH_MISMATCH
 62

	)

241 
	#ERR_R_MISSING_ASN1_EOS
 63

	)

244 
	#ERR_R_FATAL
 64

	)

245 
	#ERR_R_MALLOC_FAILURE
 (1|
ERR_R_FATAL
)

	)

246 
	#ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED
 (2|
ERR_R_FATAL
)

	)

247 
	#ERR_R_PASSED_NULL_PARAMETER
 (3|
ERR_R_FATAL
)

	)

248 
	#ERR_R_INTERNAL_ERROR
 (4|
ERR_R_FATAL
)

	)

249 
	#ERR_R_DISABLED
 (5|
ERR_R_FATAL
)

	)

255 
	sERR_°rög_d©a_°


257 
îr‹
;

258 c⁄° *
°rög
;

259 } 
	tERR_STRING_DATA
;

261 
ERR_put_îr‹
(
lib
, 
func
,
ªas⁄
,c⁄° *
fûe
,
löe
);

262 
ERR_£t_îr‹_d©a
(*
d©a
,
Êags
);

264 
ERR_gë_îr‹
();

265 
ERR_gë_îr‹_löe
(c⁄° **
fûe
,*
löe
);

266 
ERR_gë_îr‹_löe_d©a
(c⁄° **
fûe
,*
löe
,

267 c⁄° **
d©a
, *
Êags
);

268 
ERR_≥ek_îr‹
();

269 
ERR_≥ek_îr‹_löe
(c⁄° **
fûe
,*
löe
);

270 
ERR_≥ek_îr‹_löe_d©a
(c⁄° **
fûe
,*
löe
,

271 c⁄° **
d©a
,*
Êags
);

272 
ERR_≥ek_œ°_îr‹
();

273 
ERR_≥ek_œ°_îr‹_löe
(c⁄° **
fûe
,*
löe
);

274 
ERR_≥ek_œ°_îr‹_löe_d©a
(c⁄° **
fûe
,*
löe
,

275 c⁄° **
d©a
,*
Êags
);

276 
ERR_˛ór_îr‹
();

277 *
ERR_îr‹_°rög
(
e
,*
buf
);

278 
ERR_îr‹_°rög_n
(
e
, *
buf
, 
size_t
 
Àn
);

279 c⁄° *
ERR_lib_îr‹_°rög
(
e
);

280 c⁄° *
ERR_func_îr‹_°rög
(
e
);

281 c⁄° *
ERR_ªas⁄_îr‹_°rög
(
e
);

282 
ERR_¥öt_îr‹s_cb
((*
cb
)(c⁄° *
°r
, 
size_t
 
Àn
, *
u
),

283 *
u
);

284 #i‚de‡
OPENSSL_NO_FP_API


285 
ERR_¥öt_îr‹s_Â
(
FILE
 *
Â
);

287 #i‚de‡
OPENSSL_NO_BIO


288 
ERR_¥öt_îr‹s
(
BIO
 *
bp
);

289 
ERR_add_îr‹_d©a
(
num
, ...);

291 
ERR_lﬂd_°rögs
(
lib
,
ERR_STRING_DATA
 
°r
[]);

292 
ERR_u∆ﬂd_°rögs
(
lib
,
ERR_STRING_DATA
 
°r
[]);

293 
ERR_lﬂd_ERR_°rögs
();

294 
ERR_lﬂd_¸y±o_°rögs
();

295 
ERR_‰ì_°rögs
();

297 
ERR_ªmove_°©e
(
pid
);

298 
ERR_STATE
 *
ERR_gë_°©e
();

300 #i‚de‡
OPENSSL_NO_LHASH


301 
LHASH
 *
ERR_gë_°rög_èbÀ
();

302 
LHASH
 *
ERR_gë_îr_°©e_èbÀ
();

303 
ERR_ªÀa£_îr_°©e_èbÀ
(
LHASH
 **
hash
);

306 
ERR_gë_√xt_îr‹_libøry
();

308 
ERR_£t_m¨k
();

309 
ERR_p›_to_m¨k
();

311 #ifde‡
OPENSSL_FIPS


312 
öt_ERR_£t_°©e_func
(
ERR_STATE
 *(*
gë_func
)(),

313 (*
ªmove_func
)(
pid
));

314 
öt_ERR_lib_öô
();

321 c⁄° 
ERR_FNS
 *
ERR_gë_im∂emíèti⁄
();

324 
ERR_£t_im∂emíèti⁄
(c⁄° 
ERR_FNS
 *
‚s
);

326 #ifdef 
__˝lu•lus


	@/usr/include/openssl/evp.h

59 #i‚de‡
HEADER_ENVELOPE_H


60 
	#HEADER_ENVELOPE_H


	)

62 #ifde‡
OPENSSL_ALGORITHM_DEFINES


63 
	~<›ís¶/›ís¶c⁄f.h
>

65 
	#OPENSSL_ALGORITHM_DEFINES


	)

66 
	~<›ís¶/›ís¶c⁄f.h
>

67 #unde‡
OPENSSL_ALGORITHM_DEFINES


70 
	~<›ís¶/os¶_typ.h
>

72 
	~<›ís¶/symhacks.h
>

74 #i‚de‡
OPENSSL_NO_BIO


75 
	~<›ís¶/bio.h
>

78 #ifde‡
OPENSSL_FIPS


79 
	~<›ís¶/fùs.h
>

89 
	#EVP_MAX_MD_SIZE
 64

	)

90 
	#EVP_MAX_KEY_LENGTH
 32

	)

91 
	#EVP_MAX_IV_LENGTH
 16

	)

92 
	#EVP_MAX_BLOCK_LENGTH
 32

	)

94 
	#PKCS5_SALT_LEN
 8

	)

96 
	#PKCS5_DEFAULT_ITER
 2048

	)

98 
	~<›ís¶/obje˘s.h
>

100 
	#EVP_PK_RSA
 0x0001

	)

101 
	#EVP_PK_DSA
 0x0002

	)

102 
	#EVP_PK_DH
 0x0004

	)

103 
	#EVP_PK_EC
 0x0008

	)

104 
	#EVP_PKT_SIGN
 0x0010

	)

105 
	#EVP_PKT_ENC
 0x0020

	)

106 
	#EVP_PKT_EXCH
 0x0040

	)

107 
	#EVP_PKS_RSA
 0x0100

	)

108 
	#EVP_PKS_DSA
 0x0200

	)

109 
	#EVP_PKS_EC
 0x0400

	)

110 
	#EVP_PKT_EXP
 0x1000

	)

112 
	#EVP_PKEY_NONE
 
NID_undef


	)

113 
	#EVP_PKEY_RSA
 
NID_rßEn¸y±i⁄


	)

114 
	#EVP_PKEY_RSA2
 
NID_rß


	)

115 
	#EVP_PKEY_DSA
 
NID_dß


	)

116 
	#EVP_PKEY_DSA1
 
NID_dß_2


	)

117 
	#EVP_PKEY_DSA2
 
NID_dßWôhSHA


	)

118 
	#EVP_PKEY_DSA3
 
NID_dßWôhSHA1


	)

119 
	#EVP_PKEY_DSA4
 
NID_dßWôhSHA1_2


	)

120 
	#EVP_PKEY_DH
 
NID_dhKeyAgªemít


	)

121 
	#EVP_PKEY_EC
 
NID_X9_62_id_ecPublicKey


	)

123 #ifdef 
__˝lu•lus


130 
	sevp_pkey_°


132 
ty≥
;

133 
ßve_ty≥
;

134 
ª„ªn˚s
;

136 *
±r
;

137 #i‚de‡
OPENSSL_NO_RSA


138 
rß_°
 *
rß
;

140 #i‚de‡
OPENSSL_NO_DSA


141 
dß_°
 *
dß
;

143 #i‚de‡
OPENSSL_NO_DH


144 
dh_°
 *
dh
;

146 #i‚de‡
OPENSSL_NO_EC


147 
ec_key_°
 *
ec
;

149 } 
pkey
;

150 
ßve_∑ømëîs
;

151 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

154 
	#EVP_PKEY_MO_SIGN
 0x0001

	)

155 
	#EVP_PKEY_MO_VERIFY
 0x0002

	)

156 
	#EVP_PKEY_MO_ENCRYPT
 0x0004

	)

157 
	#EVP_PKEY_MO_DECRYPT
 0x0008

	)

170 
	sevp_pkey_md_°


172 
oid
;

173 
EVP_MD
 *
md
;

174 
EVP_PKEY_METHOD
 *
pkey
;

175 } 
	tEVP_PKEY_MD
;

177 
	#EVP_rß_md2
() \

178 
	`EVP_PKEY_MD_add
(
NID_md2WôhRSAEn¸y±i⁄
,\

179 
	`EVP_rß_pkcs1
(),
	`EVP_md2
())

	)

180 
	#EVP_rß_md5
() \

181 
	`EVP_PKEY_MD_add
(
NID_md5WôhRSAEn¸y±i⁄
,\

182 
	`EVP_rß_pkcs1
(),
	`EVP_md5
())

	)

183 
	#EVP_rß_sha0
() \

184 
	`EVP_PKEY_MD_add
(
NID_shaWôhRSAEn¸y±i⁄
,\

185 
	`EVP_rß_pkcs1
(),
	`EVP_sha
())

	)

186 
	#EVP_rß_sha1
() \

187 
	`EVP_PKEY_MD_add
(
NID_sha1WôhRSAEn¸y±i⁄
,\

188 
	`EVP_rß_pkcs1
(),
	`EVP_sha1
())

	)

189 
	#EVP_rß_rùemd160
() \

190 
	`EVP_PKEY_MD_add
(
NID_rùemd160WôhRSA
,\

191 
	`EVP_rß_pkcs1
(),
	`EVP_rùemd160
())

	)

192 
	#EVP_rß_mdc2
() \

193 
	`EVP_PKEY_MD_add
(
NID_mdc2WôhRSA
,\

194 
	`EVP_rß_o˘ë_°rög
(),
	`EVP_mdc2
())

	)

195 
	#EVP_dß_sha
() \

196 
	`EVP_PKEY_MD_add
(
NID_dßWôhSHA
,\

197 
	`EVP_dß
(),
	`EVP_sha
())

	)

198 
	#EVP_dß_sha1
() \

199 
	`EVP_PKEY_MD_add
(
NID_dßWôhSHA1
,\

200 
	`EVP_dß
(),
	`EVP_sha1
())

	)

202 
	sevp_pkey_mëhod_°


204 *
«me
;

205 
Êags
;

206 
ty≥
;

207 
oid
;

208 
í¸y±_oid
;

210 (*
sign
)();

211 (*
vîify
)();

213 (*
£t
)();

214 (*
gë
)();

215 (*
í¸y±
)();

216 (*
de¸y±
)();

217 (*
i2d
)();

218 (*
d2i
)();

219 (*
dup
)();

220 } 
pub
,
¥iv
;

221 (*
£t_a¢1_∑ømëîs
)();

222 (*
gë_a¢1_∑ømëîs
)();

223 } 
	tEVP_PKEY_METHOD
;

226 #i‚de‡
EVP_MD


227 
	sív_md_°


229 
ty≥
;

230 
pkey_ty≥
;

231 
md_size
;

232 
Êags
;

233 (*
öô
)(
EVP_MD_CTX
 *
˘x
);

234 (*
upd©e
)(
EVP_MD_CTX
 *
˘x
,c⁄° *
d©a
,
size_t
 
cou¡
);

235 (*
föÆ
)(
EVP_MD_CTX
 *
˘x
,*
md
);

236 (*
c›y
)(
EVP_MD_CTX
 *
to
,c⁄° EVP_MD_CTX *
‰om
);

237 (*
˛ónup
)(
EVP_MD_CTX
 *
˘x
);

240 (*
sign
)(
ty≥
, c⁄° *
m
, 
m_Àngth
,

241 *
sigªt
, *
sigÀn
, *
key
);

242 (*
vîify
)(
ty≥
, c⁄° *
m
, 
m_Àngth
,

243 c⁄° *
sigbuf
, 
sigÀn
,

244 *
key
);

245 
ªquúed_pkey_ty≥
[5];

246 
block_size
;

247 
˘x_size
;

250 
	tevp_sign_mëhod
(
	tty≥
,c⁄° *
	tm
,

251 
	tm_Àngth
,*
	tsigªt
,

252 *
	tsigÀn
, *
	tkey
);

253 
	tevp_vîify_mëhod
(
	tty≥
,c⁄° *
	tm
,

254 
	tm_Àngth
,c⁄° *
	tsigbuf
,

255 
	tsigÀn
, *
	tkey
);

259 
EVP_MD_CTX
 *
m˘x
;

260 *
key
;

261 } 
	tEVP_MD_SVCTX
;

263 
	#EVP_MD_FLAG_ONESHOT
 0x0001

	)

266 
	#EVP_MD_FLAG_FIPS
 0x0400

	)

268 
	#EVP_MD_FLAG_SVCTX
 0x0800

	)

270 
	#EVP_PKEY_NULL_mëhod
 
NULL
,NULL,{0,0,0,0}

	)

272 #i‚de‡
OPENSSL_NO_DSA


273 
	#EVP_PKEY_DSA_mëhod
 (
evp_sign_mëhod
 *)
DSA_sign
, \

274 (
evp_vîify_mëhod
 *)
DSA_vîify
, \

275 {
EVP_PKEY_DSA
,
EVP_PKEY_DSA2
,
EVP_PKEY_DSA3
, \

276 
EVP_PKEY_DSA4
,0}

	)

278 
	#EVP_PKEY_DSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

281 #i‚de‡
OPENSSL_NO_ECDSA


282 
	#EVP_PKEY_ECDSA_mëhod
 (
evp_sign_mëhod
 *)
ECDSA_sign
, \

283 (
evp_vîify_mëhod
 *)
ECDSA_vîify
, \

284 {
EVP_PKEY_EC
,0,0,0}

	)

286 
	#EVP_PKEY_ECDSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

289 #i‚de‡
OPENSSL_NO_RSA


290 
	#EVP_PKEY_RSA_mëhod
 (
evp_sign_mëhod
 *)
RSA_sign
, \

291 (
evp_vîify_mëhod
 *)
RSA_vîify
, \

292 {
EVP_PKEY_RSA
,
EVP_PKEY_RSA2
,0,0}

	)

293 
	#EVP_PKEY_RSA_ASN1_OCTET_STRING_mëhod
 \

294 (
evp_sign_mëhod
 *)
RSA_sign_ASN1_OCTET_STRING
, \

295 (
evp_vîify_mëhod
 *)
RSA_vîify_ASN1_OCTET_STRING
, \

296 {
EVP_PKEY_RSA
,
EVP_PKEY_RSA2
,0,0}

	)

298 
	#EVP_PKEY_RSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

299 
	#EVP_PKEY_RSA_ASN1_OCTET_STRING_mëhod
 
EVP_PKEY_NULL_mëhod


	)

304 
	sív_md_˘x_°


306 c⁄° 
EVP_MD
 *
dige°
;

307 
ENGINE
 *
ígöe
;

308 
Êags
;

309 *
md_d©a
;

314 
	#EVP_MD_CTX_FLAG_ONESHOT
 0x0001

	)

316 
	#EVP_MD_CTX_FLAG_CLEANED
 0x0002

	)

318 
	#EVP_MD_CTX_FLAG_REUSE
 0x0004

	)

320 
	#EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
 0x0008

	)

323 
	#EVP_MD_CTX_FLAG_PAD_MASK
 0xF0

	)

324 
	#EVP_MD_CTX_FLAG_PAD_PKCS1
 0x00

	)

325 
	#EVP_MD_CTX_FLAG_PAD_X931
 0x10

	)

326 
	#EVP_MD_CTX_FLAG_PAD_PSS
 0x20

	)

327 
	#M_EVP_MD_CTX_FLAG_PSS_SALT
(
˘x
) \

328 ((
˘x
->
Êags
>>16Ë&0xFFFFË

	)

329 
	#EVP_MD_CTX_FLAG_PSS_MDLEN
 0xFFFF

	)

330 
	#EVP_MD_CTX_FLAG_PSS_MREC
 0xFFFE

	)

332 
	sevp_cùhî_°


334 
nid
;

335 
block_size
;

336 
key_Àn
;

337 
iv_Àn
;

338 
Êags
;

339 (*
öô
)(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
key
,

340 c⁄° *
iv
, 
íc
);

341 (*
do_cùhî
)(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

342 c⁄° *
ö
, 
öl
);

343 (*
˛ónup
)(
EVP_CIPHER_CTX
 *);

344 
˘x_size
;

345 (*
£t_a¢1_∑ømëîs
)(
EVP_CIPHER_CTX
 *, 
ASN1_TYPE
 *);

346 (*
gë_a¢1_∑ømëîs
)(
EVP_CIPHER_CTX
 *, 
ASN1_TYPE
 *);

347 (*
˘æ
)(
EVP_CIPHER_CTX
 *, 
ty≥
, 
¨g
, *
±r
);

348 *
≠p_d©a
;

355 
	#EVP_CIPH_STREAM_CIPHER
 0x0

	)

356 
	#EVP_CIPH_ECB_MODE
 0x1

	)

357 
	#EVP_CIPH_CBC_MODE
 0x2

	)

358 
	#EVP_CIPH_CFB_MODE
 0x3

	)

359 
	#EVP_CIPH_OFB_MODE
 0x4

	)

360 
	#EVP_CIPH_MODE
 0x7

	)

362 
	#EVP_CIPH_VARIABLE_LENGTH
 0x8

	)

364 
	#EVP_CIPH_CUSTOM_IV
 0x10

	)

366 
	#EVP_CIPH_ALWAYS_CALL_INIT
 0x20

	)

368 
	#EVP_CIPH_CTRL_INIT
 0x40

	)

370 
	#EVP_CIPH_CUSTOM_KEY_LENGTH
 0x80

	)

372 
	#EVP_CIPH_NO_PADDING
 0x100

	)

374 
	#EVP_CIPH_RAND_KEY
 0x200

	)

376 
	#EVP_CIPH_FLAG_FIPS
 0x400

	)

378 
	#EVP_CIPH_FLAG_NON_FIPS_ALLOW
 0x800

	)

380 
	#EVP_CIPH_FLAG_DEFAULT_ASN1
 0x1000

	)

382 
	#EVP_CIPH_FLAG_LENGTH_BITS
 0x2000

	)

386 
	#EVP_CTRL_INIT
 0x0

	)

387 
	#EVP_CTRL_SET_KEY_LENGTH
 0x1

	)

388 
	#EVP_CTRL_GET_RC2_KEY_BITS
 0x2

	)

389 
	#EVP_CTRL_SET_RC2_KEY_BITS
 0x3

	)

390 
	#EVP_CTRL_GET_RC5_ROUNDS
 0x4

	)

391 
	#EVP_CTRL_SET_RC5_ROUNDS
 0x5

	)

392 
	#EVP_CTRL_RAND_KEY
 0x6

	)

394 
	sevp_cùhî_öfo_°


396 c⁄° 
EVP_CIPHER
 *
cùhî
;

397 
iv
[
EVP_MAX_IV_LENGTH
];

398 } 
	tEVP_CIPHER_INFO
;

400 
	sevp_cùhî_˘x_°


402 c⁄° 
EVP_CIPHER
 *
cùhî
;

403 
ENGINE
 *
ígöe
;

404 
í¸y±
;

405 
buf_Àn
;

407 
oiv
[
EVP_MAX_IV_LENGTH
];

408 
iv
[
EVP_MAX_IV_LENGTH
];

409 
buf
[
EVP_MAX_BLOCK_LENGTH
];

410 
num
;

412 *
≠p_d©a
;

413 
key_Àn
;

414 
Êags
;

415 *
cùhî_d©a
;

416 
föÆ_u£d
;

417 
block_mask
;

418 
föÆ
[
EVP_MAX_BLOCK_LENGTH
];

421 
	sevp_Encode_Ctx_°


423 
num
;

424 
Àngth
;

429 
íc_d©a
[80];

430 
löe_num
;

431 
ex≥˘_∆
;

432 } 
	tEVP_ENCODE_CTX
;

435 (
EVP_PBE_KEYGEN
)(
	tEVP_CIPHER_CTX
 *
	t˘x
, c⁄° *
	t∑ss
, 
	t∑s¶í
,

436 
	tASN1_TYPE
 *
	t∑øm
, c⁄° 
	tEVP_CIPHER
 *
	tcùhî
,

437 c⁄° 
	tEVP_MD
 *
	tmd
, 
	tí_de
);

439 #i‚de‡
OPENSSL_NO_RSA


440 
	#EVP_PKEY_assign_RSA
(
pkey
,
rß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_RSA
,\

441 (*)(
rß
))

	)

444 #i‚de‡
OPENSSL_NO_DSA


445 
	#EVP_PKEY_assign_DSA
(
pkey
,
dß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DSA
,\

446 (*)(
dß
))

	)

449 #i‚de‡
OPENSSL_NO_DH


450 
	#EVP_PKEY_assign_DH
(
pkey
,
dh
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DH
,\

451 (*)(
dh
))

	)

454 #i‚de‡
OPENSSL_NO_EC


455 
	#EVP_PKEY_assign_EC_KEY
(
pkey
,
eckey
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_EC
,\

456 (*)(
eckey
))

	)

460 
	#EVP_gë_dige°bynid
(
a
Ë
	`EVP_gë_dige°by«me
(
	`OBJ_nid2¢
◊))

	)

461 
	#EVP_gë_dige°byobj
(
a
Ë
	`EVP_gë_dige°bynid
(
	`OBJ_obj2nid
◊))

	)

462 
	#EVP_gë_cùhîbynid
(
a
Ë
	`EVP_gë_cùhîby«me
(
	`OBJ_nid2¢
◊))

	)

463 
	#EVP_gë_cùhîbyobj
(
a
Ë
	`EVP_gë_cùhîbynid
(
	`OBJ_obj2nid
◊))

	)

466 
	#M_EVP_MD_size
(
e
Ë(”)->
md_size
)

	)

467 
	#M_EVP_MD_block_size
(
e
Ë(”)->
block_size
)

	)

468 
	#M_EVP_MD_CTX_£t_Êags
(
˘x
,
Êgs
Ë((˘x)->
Êags
|=(Êgs))

	)

469 
	#M_EVP_MD_CTX_˛ór_Êags
(
˘x
,
Êgs
Ë((˘x)->
Êags
&=~(Êgs))

	)

470 
	#M_EVP_MD_CTX_ã°_Êags
(
˘x
,
Êgs
Ë((˘x)->
Êags
&(Êgs))

	)

471 
	#M_EVP_MD_ty≥
(
e
Ë(”)->
ty≥
)

	)

472 
	#M_EVP_MD_CTX_ty≥
(
e
Ë
	`M_EVP_MD_ty≥
(
	`M_EVP_MD_CTX_md
”))

	)

473 
	#M_EVP_MD_CTX_md
(
e
Ë(”)->
dige°
)

	)

475 
	#M_EVP_CIPHER_CTX_£t_Êags
(
˘x
,
Êgs
Ë((˘x)->
Êags
|=(Êgs))

	)

477 
EVP_MD_ty≥
(c⁄° 
EVP_MD
 *
md
);

478 
	#EVP_MD_nid
(
e
Ë
	`EVP_MD_ty≥
”)

	)

479 
	#EVP_MD_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_MD_nid
”))

	)

480 
EVP_MD_pkey_ty≥
(c⁄° 
EVP_MD
 *
md
);

481 
EVP_MD_size
(c⁄° 
EVP_MD
 *
md
);

482 
EVP_MD_block_size
(c⁄° 
EVP_MD
 *
md
);

484 c⁄° 
EVP_MD
 * 
EVP_MD_CTX_md
(c⁄° 
EVP_MD_CTX
 *
˘x
);

485 
	#EVP_MD_CTX_size
(
e
Ë
	`EVP_MD_size
(
	`EVP_MD_CTX_md
”))

	)

486 
	#EVP_MD_CTX_block_size
(
e
Ë
	`EVP_MD_block_size
(
	`EVP_MD_CTX_md
”))

	)

487 
	#EVP_MD_CTX_ty≥
(
e
Ë
	`EVP_MD_ty≥
(
	`EVP_MD_CTX_md
”))

	)

489 
EVP_CIPHER_nid
(c⁄° 
EVP_CIPHER
 *
cùhî
);

490 
	#EVP_CIPHER_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_CIPHER_nid
”))

	)

491 
EVP_CIPHER_block_size
(c⁄° 
EVP_CIPHER
 *
cùhî
);

492 
EVP_CIPHER_key_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

493 
EVP_CIPHER_iv_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

494 
EVP_CIPHER_Êags
(c⁄° 
EVP_CIPHER
 *
cùhî
);

495 
	#EVP_CIPHER_mode
(
e
Ë(
	`EVP_CIPHER_Êags
”Ë& 
EVP_CIPH_MODE
)

	)

497 c⁄° 
EVP_CIPHER
 * 
EVP_CIPHER_CTX_cùhî
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

498 
EVP_CIPHER_CTX_nid
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

499 
EVP_CIPHER_CTX_block_size
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

500 
EVP_CIPHER_CTX_key_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

501 
EVP_CIPHER_CTX_iv_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

502 * 
EVP_CIPHER_CTX_gë_≠p_d©a
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

503 
EVP_CIPHER_CTX_£t_≠p_d©a
(
EVP_CIPHER_CTX
 *
˘x
, *
d©a
);

504 
	#EVP_CIPHER_CTX_ty≥
(
c
Ë
	`EVP_CIPHER_ty≥
(
	`EVP_CIPHER_CTX_cùhî
(c))

	)

505 
EVP_CIPHER_CTX_Êags
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

506 
	#EVP_CIPHER_CTX_mode
(
e
Ë(
	`EVP_CIPHER_CTX_Êags
”Ë& 
EVP_CIPH_MODE
)

	)

508 
	#EVP_ENCODE_LENGTH
(
l
Ë((÷+2)/3*4)+÷/48+1)*2+80)

	)

509 
	#EVP_DECODE_LENGTH
(
l
Ë(÷+3)/4*3+80)

	)

511 
	#EVP_SignInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

512 
	#EVP_SignInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

513 
	#EVP_SignUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

514 
	#EVP_VîifyInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

515 
	#EVP_VîifyInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

516 
	#EVP_VîifyUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

517 
	#EVP_O≥nUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_De¸y±Upd©e
◊,b,c,d,e)

	)

518 
	#EVP_SólUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_En¸y±Upd©e
◊,b,c,d,e)

	)

520 #ifde‡
CONST_STRICT


521 
BIO_£t_md
(
BIO
 *,c⁄° 
EVP_MD
 *
md
);

523 
	#BIO_£t_md
(
b
,
md
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD
,0,(*)md)

	)

525 
	#BIO_gë_md
(
b
,
mdp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD
,0,(*)mdp)

	)

526 
	#BIO_gë_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD_CTX
,0,(*)md˝)

	)

527 
	#BIO_£t_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD_CTX
,0,(*)md˝)

	)

528 
	#BIO_gë_cùhî_°©us
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_STATUS
,0,
NULL
)

	)

529 
	#BIO_gë_cùhî_˘x
(
b
,
c_µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_CTX
,0,(*)c_µ)

	)

531 
EVP_Cùhî
(
EVP_CIPHER_CTX
 *
c
,

532 *
out
,

533 c⁄° *
ö
,

534 
öl
);

536 
	#EVP_add_cùhî_Æüs
(
n
,
Æüs
) \

537 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

538 
	#EVP_add_dige°_Æüs
(
n
,
Æüs
) \

539 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

540 
	#EVP_dñëe_cùhî_Æüs
(
Æüs
) \

541 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
);

	)

542 
	#EVP_dñëe_dige°_Æüs
(
Æüs
) \

543 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
);

	)

545 
EVP_MD_CTX_öô
(
EVP_MD_CTX
 *
˘x
);

546 
EVP_MD_CTX_˛ónup
(
EVP_MD_CTX
 *
˘x
);

547 
EVP_MD_CTX
 *
EVP_MD_CTX_¸óã
();

548 
EVP_MD_CTX_de°roy
(
EVP_MD_CTX
 *
˘x
);

549 
EVP_MD_CTX_c›y_ex
(
EVP_MD_CTX
 *
out
,c⁄° EVP_MD_CTX *
ö
);

550 
EVP_MD_CTX_£t_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

551 
EVP_MD_CTX_˛ór_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

552 
EVP_MD_CTX_ã°_Êags
(c⁄° 
EVP_MD_CTX
 *
˘x
,
Êags
);

553 
EVP_Dige°Inô_ex
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
im∂
);

554 
EVP_Dige°Upd©e
(
EVP_MD_CTX
 *
˘x
,c⁄° *
d
,

555 
size_t
 
˙t
);

556 
EVP_Dige°FöÆ_ex
(
EVP_MD_CTX
 *
˘x
,*
md
,*
s
);

557 
EVP_Dige°
(c⁄° *
d©a
, 
size_t
 
cou¡
,

558 *
md
, *
size
, c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
im∂
);

560 
EVP_MD_CTX_c›y
(
EVP_MD_CTX
 *
out
,c⁄° EVP_MD_CTX *
ö
);

561 
EVP_Dige°Inô
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
);

562 
EVP_Dige°FöÆ
(
EVP_MD_CTX
 *
˘x
,*
md
,*
s
);

564 
EVP_ªad_pw_°rög
(*
buf
,
Àngth
,c⁄° *
¥om±
,
vîify
);

565 
EVP_£t_pw_¥om±
(c⁄° *
¥om±
);

566 * 
EVP_gë_pw_¥om±
();

568 
EVP_ByãsToKey
(c⁄° 
EVP_CIPHER
 *
ty≥
,c⁄° 
EVP_MD
 *
md
,

569 c⁄° *
ß…
, c⁄° *
d©a
,

570 
d©Æ
, 
cou¡
, *
key
,*
iv
);

572 
EVP_CIPHER_CTX_£t_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

573 
EVP_CIPHER_CTX_˛ór_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

574 
EVP_CIPHER_CTX_ã°_Êags
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
,
Êags
);

576 
EVP_En¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
,

577 c⁄° *
key
, c⁄° *
iv
);

578 
EVP_En¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

579 c⁄° *
key
, c⁄° *
iv
);

580 
EVP_En¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

581 *
oué
, c⁄° *
ö
, 
öl
);

582 
EVP_En¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

583 
EVP_En¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

585 
EVP_De¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
,

586 c⁄° *
key
, c⁄° *
iv
);

587 
EVP_De¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

588 c⁄° *
key
, c⁄° *
iv
);

589 
EVP_De¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

590 *
oué
, c⁄° *
ö
, 
öl
);

591 
EVP_De¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

592 
EVP_De¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

594 
EVP_CùhîInô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
,

595 c⁄° *
key
,c⁄° *
iv
,

596 
íc
);

597 
EVP_CùhîInô_ex
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

598 c⁄° *
key
,c⁄° *
iv
,

599 
íc
);

600 
EVP_CùhîUpd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

601 *
oué
, c⁄° *
ö
, 
öl
);

602 
EVP_CùhîFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

603 
EVP_CùhîFöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

605 
EVP_SignFöÆ
(
EVP_MD_CTX
 *
˘x
,*
md
,*
s
,

606 
EVP_PKEY
 *
pkey
);

608 
EVP_VîifyFöÆ
(
EVP_MD_CTX
 *
˘x
,c⁄° *
sigbuf
,

609 
sigÀn
,
EVP_PKEY
 *
pkey
);

611 
EVP_O≥nInô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
ty≥
,

612 c⁄° *
ek
, 
ekl
, c⁄° *
iv
,

613 
EVP_PKEY
 *
¥iv
);

614 
EVP_O≥nFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

616 
EVP_SólInô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
ty≥
,

617 **
ek
, *
ekl
, *
iv
,

618 
EVP_PKEY
 **
pubk
, 
≈ubk
);

619 
EVP_SólFöÆ
(
EVP_CIPHER_CTX
 *
˘x
,*
out
,*
oué
);

621 
EVP_EncodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

622 
EVP_EncodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
,*
out
,*
oué
,

623 c⁄° *
ö
,
öl
);

624 
EVP_EncodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
,*
out
,*
oué
);

625 
EVP_EncodeBlock
(*
t
, c⁄° *
f
, 
n
);

627 
EVP_DecodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

628 
EVP_DecodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
,*
out
,*
oué
,

629 c⁄° *
ö
, 
öl
);

630 
EVP_DecodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
, 

631 *
out
, *
oué
);

632 
EVP_DecodeBlock
(*
t
, c⁄° *
f
, 
n
);

634 
EVP_CIPHER_CTX_öô
(
EVP_CIPHER_CTX
 *
a
);

635 
EVP_CIPHER_CTX_˛ónup
(
EVP_CIPHER_CTX
 *
a
);

636 
EVP_CIPHER_CTX
 *
EVP_CIPHER_CTX_√w
();

637 
EVP_CIPHER_CTX_‰ì
(
EVP_CIPHER_CTX
 *
a
);

638 
EVP_CIPHER_CTX_£t_key_Àngth
(
EVP_CIPHER_CTX
 *
x
, 
keyÀn
);

639 
EVP_CIPHER_CTX_£t_∑ddög
(
EVP_CIPHER_CTX
 *
c
, 
∑d
);

640 
EVP_CIPHER_CTX_˘æ
(
EVP_CIPHER_CTX
 *
˘x
, 
ty≥
, 
¨g
, *
±r
);

641 
EVP_CIPHER_CTX_ønd_key
(
EVP_CIPHER_CTX
 *
˘x
, *
key
);

643 #i‚de‡
OPENSSL_NO_BIO


644 
BIO_METHOD
 *
BIO_f_md
();

645 
BIO_METHOD
 *
BIO_f_ba£64
();

646 
BIO_METHOD
 *
BIO_f_cùhî
();

647 
BIO_METHOD
 *
BIO_f_ªlübÀ
();

648 
BIO_£t_cùhî
(
BIO
 *
b
,c⁄° 
EVP_CIPHER
 *
c
,c⁄° *
k
,

649 c⁄° *
i
, 
íc
);

652 c⁄° 
EVP_MD
 *
EVP_md_nuŒ
();

653 #i‚de‡
OPENSSL_NO_MD2


654 c⁄° 
EVP_MD
 *
EVP_md2
();

656 #i‚de‡
OPENSSL_NO_MD4


657 c⁄° 
EVP_MD
 *
EVP_md4
();

659 #i‚de‡
OPENSSL_NO_MD5


660 c⁄° 
EVP_MD
 *
EVP_md5
();

662 #i‚de‡
OPENSSL_NO_SHA


663 c⁄° 
EVP_MD
 *
EVP_sha
();

664 c⁄° 
EVP_MD
 *
EVP_sha1
();

665 c⁄° 
EVP_MD
 *
EVP_dss
();

666 c⁄° 
EVP_MD
 *
EVP_dss1
();

667 c⁄° 
EVP_MD
 *
EVP_ecdß
();

669 #i‚de‡
OPENSSL_NO_SHA256


670 c⁄° 
EVP_MD
 *
EVP_sha224
();

671 c⁄° 
EVP_MD
 *
EVP_sha256
();

673 #i‚de‡
OPENSSL_NO_SHA512


674 c⁄° 
EVP_MD
 *
EVP_sha384
();

675 c⁄° 
EVP_MD
 *
EVP_sha512
();

677 #i‚de‡
OPENSSL_NO_MDC2


678 c⁄° 
EVP_MD
 *
EVP_mdc2
();

680 #i‚de‡
OPENSSL_NO_RIPEMD


681 c⁄° 
EVP_MD
 *
EVP_rùemd160
();

683 c⁄° 
EVP_CIPHER
 *
EVP_íc_nuŒ
();

684 #i‚de‡
OPENSSL_NO_DES


685 c⁄° 
EVP_CIPHER
 *
EVP_des_ecb
();

686 c⁄° 
EVP_CIPHER
 *
EVP_des_ede
();

687 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3
();

688 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ecb
();

689 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ecb
();

690 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb64
();

691 
	#EVP_des_cfb
 
EVP_des_cfb64


	)

692 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb1
();

693 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb8
();

694 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb64
();

695 
	#EVP_des_ede_cfb
 
EVP_des_ede_cfb64


	)

697 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb1
();

698 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb8
();

700 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb64
();

701 
	#EVP_des_ede3_cfb
 
EVP_des_ede3_cfb64


	)

702 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb1
();

703 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb8
();

704 c⁄° 
EVP_CIPHER
 *
EVP_des_ofb
();

705 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ofb
();

706 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ofb
();

707 c⁄° 
EVP_CIPHER
 *
EVP_des_cbc
();

708 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cbc
();

709 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cbc
();

710 c⁄° 
EVP_CIPHER
 *
EVP_desx_cbc
();

714 #ifde‡
OPENSSL_OPENBSD_DEV_CRYPTO


715 c⁄° 
EVP_CIPHER
 *
EVP_dev_¸y±o_des_ede3_cbc
();

716 c⁄° 
EVP_CIPHER
 *
EVP_dev_¸y±o_rc4
();

717 c⁄° 
EVP_MD
 *
EVP_dev_¸y±o_md5
();

721 #i‚de‡
OPENSSL_NO_RC4


722 c⁄° 
EVP_CIPHER
 *
EVP_rc4
();

723 c⁄° 
EVP_CIPHER
 *
EVP_rc4_40
();

725 #i‚de‡
OPENSSL_NO_RC2


726 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ecb
();

727 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cbc
();

728 c⁄° 
EVP_CIPHER
 *
EVP_rc2_40_cbc
();

729 c⁄° 
EVP_CIPHER
 *
EVP_rc2_64_cbc
();

730 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cfb64
();

731 
	#EVP_rc2_cfb
 
EVP_rc2_cfb64


	)

732 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ofb
();

734 #i‚de‡
OPENSSL_NO_BF


735 c⁄° 
EVP_CIPHER
 *
EVP_bf_ecb
();

736 c⁄° 
EVP_CIPHER
 *
EVP_bf_cbc
();

737 c⁄° 
EVP_CIPHER
 *
EVP_bf_cfb64
();

738 
	#EVP_bf_cfb
 
EVP_bf_cfb64


	)

739 c⁄° 
EVP_CIPHER
 *
EVP_bf_ofb
();

741 #i‚de‡
OPENSSL_NO_CAST


742 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ecb
();

743 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cbc
();

744 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cfb64
();

745 
	#EVP_ˇ°5_cfb
 
EVP_ˇ°5_cfb64


	)

746 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ofb
();

748 #i‚de‡
OPENSSL_NO_RC5


749 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_cbc
();

750 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_ecb
();

751 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_cfb64
();

752 
	#EVP_rc5_32_12_16_cfb
 
EVP_rc5_32_12_16_cfb64


	)

753 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_ofb
();

755 #i‚de‡
OPENSSL_NO_AES


756 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ecb
();

757 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc
();

758 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb1
();

759 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb8
();

760 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb128
();

761 
	#EVP_´s_128_cfb
 
EVP_´s_128_cfb128


	)

762 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ofb
();

764 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_˘r
();

766 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ecb
();

767 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cbc
();

768 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb1
();

769 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb8
();

770 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb128
();

771 
	#EVP_´s_192_cfb
 
EVP_´s_192_cfb128


	)

772 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ofb
();

774 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_˘r
();

776 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ecb
();

777 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc
();

778 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb1
();

779 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb8
();

780 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb128
();

781 
	#EVP_´s_256_cfb
 
EVP_´s_256_cfb128


	)

782 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ofb
();

784 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_˘r
();

787 #i‚de‡
OPENSSL_NO_CAMELLIA


788 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ecb
();

789 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cbc
();

790 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb1
();

791 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb8
();

792 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb128
();

793 
	#EVP_ˇmñlü_128_cfb
 
EVP_ˇmñlü_128_cfb128


	)

794 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ofb
();

795 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ecb
();

796 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cbc
();

797 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb1
();

798 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb8
();

799 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb128
();

800 
	#EVP_ˇmñlü_192_cfb
 
EVP_ˇmñlü_192_cfb128


	)

801 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ofb
();

802 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ecb
();

803 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cbc
();

804 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb1
();

805 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb8
();

806 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb128
();

807 
	#EVP_ˇmñlü_256_cfb
 
EVP_ˇmñlü_256_cfb128


	)

808 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ofb
();

811 #i‚de‡
OPENSSL_NO_SEED


812 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ecb
();

813 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cbc
();

814 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cfb128
();

815 
	#EVP_£ed_cfb
 
EVP_£ed_cfb128


	)

816 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ofb
();

819 
OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
();

820 
OPENSSL_add_Æl_Æg‹ôhms_c⁄f
();

822 #ifde‡
OPENSSL_LOAD_CONF


823 
	#O≥nSSL_add_Æl_Æg‹ôhms
() \

824 
	`OPENSSL_add_Æl_Æg‹ôhms_c⁄f
()

	)

826 
	#O≥nSSL_add_Æl_Æg‹ôhms
() \

827 
	`OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
()

	)

830 
O≥nSSL_add_Æl_cùhîs
();

831 
O≥nSSL_add_Æl_dige°s
();

832 
	#SSLóy_add_Æl_Æg‹ôhms
(Ë
	`O≥nSSL_add_Æl_Æg‹ôhms
()

	)

833 
	#SSLóy_add_Æl_cùhîs
(Ë
	`O≥nSSL_add_Æl_cùhîs
()

	)

834 
	#SSLóy_add_Æl_dige°s
(Ë
	`O≥nSSL_add_Æl_dige°s
()

	)

836 
EVP_add_cùhî
(c⁄° 
EVP_CIPHER
 *
cùhî
);

837 
EVP_add_dige°
(c⁄° 
EVP_MD
 *
dige°
);

839 c⁄° 
EVP_CIPHER
 *
EVP_gë_cùhîby«me
(c⁄° *
«me
);

840 c⁄° 
EVP_MD
 *
EVP_gë_dige°by«me
(c⁄° *
«me
);

841 
EVP_˛ónup
();

843 
EVP_PKEY_de¸y±
(*
dec_key
,

844 c⁄° *
íc_key
,
íc_key_Àn
,

845 
EVP_PKEY
 *
¥iv©e_key
);

846 
EVP_PKEY_í¸y±
(*
íc_key
,

847 c⁄° *
key
,
key_Àn
,

848 
EVP_PKEY
 *
pub_key
);

849 
EVP_PKEY_ty≥
(
ty≥
);

850 
EVP_PKEY_bôs
(
EVP_PKEY
 *
pkey
);

851 
EVP_PKEY_size
(
EVP_PKEY
 *
pkey
);

852 
EVP_PKEY_assign
(
EVP_PKEY
 *
pkey
,
ty≥
,*
key
);

854 #i‚de‡
OPENSSL_NO_RSA


855 
rß_°
;

856 
EVP_PKEY_£t1_RSA
(
EVP_PKEY
 *
pkey
,
rß_°
 *
key
);

857 
rß_°
 *
EVP_PKEY_gë1_RSA
(
EVP_PKEY
 *
pkey
);

859 #i‚de‡
OPENSSL_NO_DSA


860 
dß_°
;

861 
EVP_PKEY_£t1_DSA
(
EVP_PKEY
 *
pkey
,
dß_°
 *
key
);

862 
dß_°
 *
EVP_PKEY_gë1_DSA
(
EVP_PKEY
 *
pkey
);

864 #i‚de‡
OPENSSL_NO_DH


865 
dh_°
;

866 
EVP_PKEY_£t1_DH
(
EVP_PKEY
 *
pkey
,
dh_°
 *
key
);

867 
dh_°
 *
EVP_PKEY_gë1_DH
(
EVP_PKEY
 *
pkey
);

869 #i‚de‡
OPENSSL_NO_EC


870 
ec_key_°
;

871 
EVP_PKEY_£t1_EC_KEY
(
EVP_PKEY
 *
pkey
,
ec_key_°
 *
key
);

872 
ec_key_°
 *
EVP_PKEY_gë1_EC_KEY
(
EVP_PKEY
 *
pkey
);

875 
EVP_PKEY
 * 
EVP_PKEY_√w
();

876 
EVP_PKEY_‰ì
(
EVP_PKEY
 *
pkey
);

878 
EVP_PKEY
 * 
d2i_PublicKey
(
ty≥
,EVP_PKEY **
a
, c⁄° **
µ
,

879 
Àngth
);

880 
i2d_PublicKey
(
EVP_PKEY
 *
a
, **
µ
);

882 
EVP_PKEY
 * 
d2i_Priv©eKey
(
ty≥
,EVP_PKEY **
a
, c⁄° **
µ
,

883 
Àngth
);

884 
EVP_PKEY
 * 
d2i_AutoPriv©eKey
(EVP_PKEY **
a
, c⁄° **
µ
,

885 
Àngth
);

886 
i2d_Priv©eKey
(
EVP_PKEY
 *
a
, **
µ
);

888 
EVP_PKEY_c›y_∑ømëîs
(
EVP_PKEY
 *
to
, c⁄° EVP_PKEY *
‰om
);

889 
EVP_PKEY_missög_∑ømëîs
(c⁄° 
EVP_PKEY
 *
pkey
);

890 
EVP_PKEY_ßve_∑ømëîs
(
EVP_PKEY
 *
pkey
,
mode
);

891 
EVP_PKEY_cmp_∑ømëîs
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

893 
EVP_PKEY_cmp
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

895 
EVP_CIPHER_ty≥
(c⁄° 
EVP_CIPHER
 *
˘x
);

898 
EVP_CIPHER_∑øm_to_a¢1
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

899 
EVP_CIPHER_a¢1_to_∑øm
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

902 
EVP_CIPHER_£t_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
,
ASN1_TYPE
 *
ty≥
);

903 
EVP_CIPHER_gë_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
,
ASN1_TYPE
 *
ty≥
);

906 
PKCS5_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

907 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

908 
í_de
);

909 
PKCS5_PBKDF2_HMAC_SHA1
(c⁄° *
∑ss
, 
∑s¶í
,

910 c⁄° *
ß…
, 
ß…Àn
, 
ôî
,

911 
keyÀn
, *
out
);

912 
PKCS5_v2_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

913 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

914 
í_de
);

916 
PKCS5_PBE_add
();

918 
EVP_PBE_CùhîInô
 (
ASN1_OBJECT
 *
pbe_obj
, c⁄° *
∑ss
, 
∑s¶í
,

919 
ASN1_TYPE
 *
∑øm
, 
EVP_CIPHER_CTX
 *
˘x
, 
í_de
);

920 
EVP_PBE_Æg_add
(
nid
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

921 
EVP_PBE_KEYGEN
 *
keygí
);

922 
EVP_PBE_˛ónup
();

924 #ifde‡
OPENSSL_FIPS


925 #i‚de‡
OPENSSL_NO_ENGINE


926 
öt_EVP_MD_£t_ígöe_ˇŒbacks
(

927 (*
íg_md_öô
)(
ENGINE
 *
im∂
),

928 (*
íg_md_fö
)(
ENGINE
 *
im∂
),

929 (*
íg_md_evp
)

930 (
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 **
±y≥
, 
ENGINE
 *
im∂
));

931 
öt_EVP_MD_öô_ígöe_ˇŒbacks
();

932 
öt_EVP_CIPHER_£t_ígöe_ˇŒbacks
(

933 (*
íg_cùh_fö
)(
ENGINE
 *
im∂
),

934 (*
íg_cùh_evp
)

935 (
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 **
pcùh
, 
ENGINE
 *
im∂
));

936 
öt_EVP_CIPHER_öô_ígöe_ˇŒbacks
();

940 
EVP_add_Æg_moduÀ
();

946 
ERR_lﬂd_EVP_°rögs
();

951 
	#EVP_F_AES_INIT_KEY
 133

	)

952 
	#EVP_F_ALG_MODULE_INIT
 138

	)

953 
	#EVP_F_CAMELLIA_INIT_KEY
 159

	)

954 
	#EVP_F_D2I_PKEY
 100

	)

955 
	#EVP_F_DO_EVP_ENC_ENGINE
 140

	)

956 
	#EVP_F_DO_EVP_ENC_ENGINE_FULL
 141

	)

957 
	#EVP_F_DO_EVP_MD_ENGINE
 139

	)

958 
	#EVP_F_DO_EVP_MD_ENGINE_FULL
 142

	)

959 
	#EVP_F_DSAPKEY2PKCS8
 134

	)

960 
	#EVP_F_DSA_PKEY2PKCS8
 135

	)

961 
	#EVP_F_ECDSA_PKEY2PKCS8
 129

	)

962 
	#EVP_F_ECKEY_PKEY2PKCS8
 132

	)

963 
	#EVP_F_EVP_CIPHERINIT
 137

	)

964 
	#EVP_F_EVP_CIPHERINIT_EX
 123

	)

965 
	#EVP_F_EVP_CIPHER_CTX_CTRL
 124

	)

966 
	#EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH
 122

	)

967 
	#EVP_F_EVP_DECRYPTFINAL_EX
 101

	)

968 
	#EVP_F_EVP_DIGESTINIT
 136

	)

969 
	#EVP_F_EVP_DIGESTINIT_EX
 128

	)

970 
	#EVP_F_EVP_ENCRYPTFINAL_EX
 127

	)

971 
	#EVP_F_EVP_MD_CTX_COPY_EX
 110

	)

972 
	#EVP_F_EVP_OPENINIT
 102

	)

973 
	#EVP_F_EVP_PBE_ALG_ADD
 115

	)

974 
	#EVP_F_EVP_PBE_CIPHERINIT
 116

	)

975 
	#EVP_F_EVP_PKCS82PKEY
 111

	)

976 
	#EVP_F_EVP_PKEY2PKCS8_BROKEN
 113

	)

977 
	#EVP_F_EVP_PKEY_COPY_PARAMETERS
 103

	)

978 
	#EVP_F_EVP_PKEY_DECRYPT
 104

	)

979 
	#EVP_F_EVP_PKEY_ENCRYPT
 105

	)

980 
	#EVP_F_EVP_PKEY_GET1_DH
 119

	)

981 
	#EVP_F_EVP_PKEY_GET1_DSA
 120

	)

982 
	#EVP_F_EVP_PKEY_GET1_ECDSA
 130

	)

983 
	#EVP_F_EVP_PKEY_GET1_EC_KEY
 131

	)

984 
	#EVP_F_EVP_PKEY_GET1_RSA
 121

	)

985 
	#EVP_F_EVP_PKEY_NEW
 106

	)

986 
	#EVP_F_EVP_RIJNDAEL
 126

	)

987 
	#EVP_F_EVP_SIGNFINAL
 107

	)

988 
	#EVP_F_EVP_VERIFYFINAL
 108

	)

989 
	#EVP_F_PKCS5_PBE_KEYIVGEN
 117

	)

990 
	#EVP_F_PKCS5_V2_PBE_KEYIVGEN
 118

	)

991 
	#EVP_F_PKCS8_SET_BROKEN
 112

	)

992 
	#EVP_F_RC2_MAGIC_TO_METH
 109

	)

993 
	#EVP_F_RC5_CTRL
 125

	)

996 
	#EVP_R_AES_KEY_SETUP_FAILED
 143

	)

997 
	#EVP_R_ASN1_LIB
 140

	)

998 
	#EVP_R_BAD_BLOCK_LENGTH
 136

	)

999 
	#EVP_R_BAD_DECRYPT
 100

	)

1000 
	#EVP_R_BAD_KEY_LENGTH
 137

	)

1001 
	#EVP_R_BN_DECODE_ERROR
 112

	)

1002 
	#EVP_R_BN_PUBKEY_ERROR
 113

	)

1003 
	#EVP_R_CAMELLIA_KEY_SETUP_FAILED
 157

	)

1004 
	#EVP_R_CIPHER_PARAMETER_ERROR
 122

	)

1005 
	#EVP_R_CTRL_NOT_IMPLEMENTED
 132

	)

1006 
	#EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED
 133

	)

1007 
	#EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH
 138

	)

1008 
	#EVP_R_DECODE_ERROR
 114

	)

1009 
	#EVP_R_DIFFERENT_KEY_TYPES
 101

	)

1010 
	#EVP_R_DISABLED_FOR_FIPS
 144

	)

1011 
	#EVP_R_ENCODE_ERROR
 115

	)

1012 
	#EVP_R_ERROR_LOADING_SECTION
 145

	)

1013 
	#EVP_R_ERROR_SETTING_FIPS_MODE
 146

	)

1014 
	#EVP_R_EVP_PBE_CIPHERINIT_ERROR
 119

	)

1015 
	#EVP_R_EXPECTING_AN_RSA_KEY
 127

	)

1016 
	#EVP_R_EXPECTING_A_DH_KEY
 128

	)

1017 
	#EVP_R_EXPECTING_A_DSA_KEY
 129

	)

1018 
	#EVP_R_EXPECTING_A_ECDSA_KEY
 141

	)

1019 
	#EVP_R_EXPECTING_A_EC_KEY
 142

	)

1020 
	#EVP_R_FIPS_MODE_NOT_SUPPORTED
 147

	)

1021 
	#EVP_R_INITIALIZATION_ERROR
 134

	)

1022 
	#EVP_R_INPUT_NOT_INITIALIZED
 111

	)

1023 
	#EVP_R_INVALID_FIPS_MODE
 148

	)

1024 
	#EVP_R_INVALID_KEY_LENGTH
 130

	)

1025 
	#EVP_R_IV_TOO_LARGE
 102

	)

1026 
	#EVP_R_KEYGEN_FAILURE
 120

	)

1027 
	#EVP_R_MISSING_PARAMETERS
 103

	)

1028 
	#EVP_R_NO_CIPHER_SET
 131

	)

1029 
	#EVP_R_NO_DIGEST_SET
 139

	)

1030 
	#EVP_R_NO_DSA_PARAMETERS
 116

	)

1031 
	#EVP_R_NO_SIGN_FUNCTION_CONFIGURED
 104

	)

1032 
	#EVP_R_NO_VERIFY_FUNCTION_CONFIGURED
 105

	)

1033 
	#EVP_R_PKCS8_UNKNOWN_BROKEN_TYPE
 117

	)

1034 
	#EVP_R_PUBLIC_KEY_NOT_RSA
 106

	)

1035 
	#EVP_R_UNKNOWN_OPTION
 149

	)

1036 
	#EVP_R_UNKNOWN_PBE_ALGORITHM
 121

	)

1037 
	#EVP_R_UNSUPORTED_NUMBER_OF_ROUNDS
 135

	)

1038 
	#EVP_R_UNSUPPORTED_CIPHER
 107

	)

1039 
	#EVP_R_UNSUPPORTED_KEYLENGTH
 123

	)

1040 
	#EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION
 124

	)

1041 
	#EVP_R_UNSUPPORTED_KEY_SIZE
 108

	)

1042 
	#EVP_R_UNSUPPORTED_PRF
 125

	)

1043 
	#EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM
 118

	)

1044 
	#EVP_R_UNSUPPORTED_SALT_TYPE
 126

	)

1045 
	#EVP_R_WRONG_FINAL_BLOCK_LENGTH
 109

	)

1046 
	#EVP_R_WRONG_PUBLIC_KEY_TYPE
 110

	)

1047 
	#EVP_R_SEED_KEY_SETUP_FAILED
 162

	)

1049 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/fips.h

	@/usr/include/openssl/hmac.h

58 #i‚de‡
HEADER_HMAC_H


59 
	#HEADER_HMAC_H


	)

61 
	~<›ís¶/›ís¶c⁄f.h
>

63 #ifde‡
OPENSSL_NO_HMAC


64 #îr‹ 
HMAC
 
is
 
dißbÀd
.

67 
	~<›ís¶/evp.h
>

69 
	#HMAC_MAX_MD_CBLOCK
 128

	)

71 #ifde‡ 
__˝lu•lus


75 
	shmac_˘x_°


77 c⁄° 
EVP_MD
 *
md
;

78 
EVP_MD_CTX
 
md_˘x
;

79 
EVP_MD_CTX
 
i_˘x
;

80 
EVP_MD_CTX
 
o_˘x
;

81 
key_Àngth
;

82 
key
[
HMAC_MAX_MD_CBLOCK
];

83 } 
	tHMAC_CTX
;

85 
	#HMAC_size
(
e
Ë(
	`EVP_MD_size
(”)->
md
))

	)

88 
HMAC_CTX_öô
(
HMAC_CTX
 *
˘x
);

89 
HMAC_CTX_˛ónup
(
HMAC_CTX
 *
˘x
);

91 
	#HMAC_˛ónup
(
˘x
Ë
	`HMAC_CTX_˛ónup
(˘xË

	)

93 
HMAC_Inô
(
HMAC_CTX
 *
˘x
, c⁄° *
key
, 
Àn
,

94 c⁄° 
EVP_MD
 *
md
);

95 
HMAC_Inô_ex
(
HMAC_CTX
 *
˘x
, c⁄° *
key
, 
Àn
,

96 c⁄° 
EVP_MD
 *
md
, 
ENGINE
 *
im∂
);

97 
HMAC_Upd©e
(
HMAC_CTX
 *
˘x
, c⁄° *
d©a
, 
size_t
 
Àn
);

98 
HMAC_FöÆ
(
HMAC_CTX
 *
˘x
, *
md
, *
Àn
);

99 *
HMAC
(c⁄° 
EVP_MD
 *
evp_md
, c⁄° *
key
, 
key_Àn
,

100 c⁄° *
d
, 
size_t
 
n
, *
md
,

101 *
md_Àn
);

103 
HMAC_CTX_£t_Êags
(
HMAC_CTX
 *
˘x
, 
Êags
);

105 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/lhash.h

63 #i‚de‡
HEADER_LHASH_H


64 
	#HEADER_LHASH_H


	)

66 
	~<›ís¶/e_os2.h
>

67 #i‚de‡
OPENSSL_NO_FP_API


68 
	~<°dio.h
>

71 #i‚de‡
OPENSSL_NO_BIO


72 
	~<›ís¶/bio.h
>

75 #ifde‡ 
__˝lu•lus


79 
	slhash_node_°


81 *
d©a
;

82 
lhash_node_°
 *
√xt
;

83 #i‚de‡
OPENSSL_NO_HASH_COMP


84 
hash
;

86 } 
	tLHASH_NODE
;

88 (*
LHASH_COMP_FN_TYPE
)(const *, const *);

89 (*
	tLHASH_HASH_FN_TYPE
)(const *);

90 (*
LHASH_DOALL_FN_TYPE
)(*);

91 (*
LHASH_DOALL_ARG_FN_TYPE
)(*, *);

101 
	#DECLARE_LHASH_HASH_FN
(
f_«me
,
o_ty≥
) \

102 
f_«me
##
	`_LHASH_HASH
(c⁄° *);

	)

103 
	#IMPLEMENT_LHASH_HASH_FN
(
f_«me
,
o_ty≥
) \

104 
f_«me
##
	`_LHASH_HASH
(c⁄° *
¨g
) { \

105 
o_ty≥
 
a
 = (o_ty≥)
¨g
; \

106  
	`f_«me
(
a
); }

	)

107 
	#LHASH_HASH_FN
(
f_«me
Ëf_«me##
_LHASH_HASH


	)

110 
	#DECLARE_LHASH_COMP_FN
(
f_«me
,
o_ty≥
) \

111 
f_«me
##
	`_LHASH_COMP
(c⁄° *, c⁄° *);

	)

112 
	#IMPLEMENT_LHASH_COMP_FN
(
f_«me
,
o_ty≥
) \

113 
f_«me
##
	`_LHASH_COMP
(c⁄° *
¨g1
, c⁄° *
¨g2
) { \

114 
o_ty≥
 
a
 = (o_ty≥)
¨g1
; \

115 
o_ty≥
 
b
 = (o_ty≥)
¨g2
; \

116  
	`f_«me
(
a
,
b
); }

	)

117 
	#LHASH_COMP_FN
(
f_«me
Ëf_«me##
_LHASH_COMP


	)

120 
	#DECLARE_LHASH_DOALL_FN
(
f_«me
,
o_ty≥
) \

121 
f_«me
##
	`_LHASH_DOALL
(*);

	)

122 
	#IMPLEMENT_LHASH_DOALL_FN
(
f_«me
,
o_ty≥
) \

123 
f_«me
##
	`_LHASH_DOALL
(*
¨g
) { \

124 
o_ty≥
 
a
 = (o_ty≥)
¨g
; \

125 
	`f_«me
(
a
); }

	)

126 
	#LHASH_DOALL_FN
(
f_«me
Ëf_«me##
_LHASH_DOALL


	)

129 
	#DECLARE_LHASH_DOALL_ARG_FN
(
f_«me
,
o_ty≥
,
a_ty≥
) \

130 
f_«me
##
	`_LHASH_DOALL_ARG
(*, *);

	)

131 
	#IMPLEMENT_LHASH_DOALL_ARG_FN
(
f_«me
,
o_ty≥
,
a_ty≥
) \

132 
f_«me
##
	`_LHASH_DOALL_ARG
(*
¨g1
, *
¨g2
) { \

133 
o_ty≥
 
a
 = (o_ty≥)
¨g1
; \

134 
a_ty≥
 
b
 = (a_ty≥)
¨g2
; \

135 
	`f_«me
(
a
,
b
); }

	)

136 
	#LHASH_DOALL_ARG_FN
(
f_«me
Ëf_«me##
_LHASH_DOALL_ARG


	)

138 
	slhash_°


140 
LHASH_NODE
 **
b
;

141 
LHASH_COMP_FN_TYPE
 
comp
;

142 
LHASH_HASH_FN_TYPE
 
hash
;

143 
num_nodes
;

144 
num_Æloc_nodes
;

145 
p
;

146 
pmax
;

147 
up_lﬂd
;

148 
down_lﬂd
;

149 
num_ôems
;

151 
num_ex∑nds
;

152 
num_ex∑nd_ªÆlocs
;

153 
num_c⁄åa˘s
;

154 
num_c⁄åa˘_ªÆlocs
;

155 
num_hash_ˇŒs
;

156 
num_comp_ˇŒs
;

157 
num_ö£π
;

158 
num_ª∂a˚
;

159 
num_dñëe
;

160 
num_no_dñëe
;

161 
num_ªåõve
;

162 
num_ªåõve_miss
;

163 
num_hash_comps
;

165 
îr‹
;

166 } 
	tLHASH
;

168 
	#LH_LOAD_MULT
 256

	)

172 
	#lh_îr‹
(
lh
Ë(÷h)->
îr‹
)

	)

174 
LHASH
 *
lh_√w
(
LHASH_HASH_FN_TYPE
 
h
, 
LHASH_COMP_FN_TYPE
 
c
);

175 
lh_‰ì
(
LHASH
 *
lh
);

176 *
lh_ö£π
(
LHASH
 *
lh
, *
d©a
);

177 *
lh_dñëe
(
LHASH
 *
lh
, c⁄° *
d©a
);

178 *
lh_ªåõve
(
LHASH
 *
lh
, c⁄° *
d©a
);

179 
lh_dﬂŒ
(
LHASH
 *
lh
, 
LHASH_DOALL_FN_TYPE
 
func
);

180 
lh_dﬂŒ_¨g
(
LHASH
 *
lh
, 
LHASH_DOALL_ARG_FN_TYPE
 
func
, *
¨g
);

181 
lh_°rhash
(c⁄° *
c
);

182 
lh_num_ôems
(c⁄° 
LHASH
 *
lh
);

184 #i‚de‡
OPENSSL_NO_FP_API


185 
lh_°©s
(c⁄° 
LHASH
 *
lh
, 
FILE
 *
out
);

186 
lh_node_°©s
(c⁄° 
LHASH
 *
lh
, 
FILE
 *
out
);

187 
lh_node_ußge_°©s
(c⁄° 
LHASH
 *
lh
, 
FILE
 *
out
);

190 #i‚de‡
OPENSSL_NO_BIO


191 
lh_°©s_bio
(c⁄° 
LHASH
 *
lh
, 
BIO
 *
out
);

192 
lh_node_°©s_bio
(c⁄° 
LHASH
 *
lh
, 
BIO
 *
out
);

193 
lh_node_ußge_°©s_bio
(c⁄° 
LHASH
 *
lh
, 
BIO
 *
out
);

195 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/md2.h

59 #i‚de‡
HEADER_MD2_H


60 
	#HEADER_MD2_H


	)

62 
	~<›ís¶/›ís¶c⁄f.h
>

63 #ifde‡
OPENSSL_NO_MD2


64 #îr‹ 
MD2
 
is
 
dißbÀd
.

66 
	~<°ddef.h
>

68 
	#MD2_DIGEST_LENGTH
 16

	)

69 
	#MD2_BLOCK
 16

	)

71 #ifde‡ 
__˝lu•lus


75 
	sMD2°©e_°


77 
num
;

78 
d©a
[
MD2_BLOCK
];

79 
MD2_INT
 
cksm
[
MD2_BLOCK
];

80 
MD2_INT
 
°©e
[
MD2_BLOCK
];

81 } 
	tMD2_CTX
;

83 c⁄° *
MD2_›ti⁄s
();

84 #ifde‡
OPENSSL_FIPS


85 
¥iv©e_MD2_Inô
(
MD2_CTX
 *
c
);

87 
MD2_Inô
(
MD2_CTX
 *
c
);

88 
MD2_Upd©e
(
MD2_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

89 
MD2_FöÆ
(*
md
, 
MD2_CTX
 *
c
);

90 *
MD2
(c⁄° *
d
, 
size_t
 
n
,*
md
);

91 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/md4.h

59 #i‚de‡
HEADER_MD4_H


60 
	#HEADER_MD4_H


	)

62 
	~<›ís¶/e_os2.h
>

63 
	~<°ddef.h
>

65 #ifde‡ 
__˝lu•lus


69 #ifde‡
OPENSSL_NO_MD4


70 #îr‹ 
MD4
 
is
 
dißbÀd
.

80 #i‡
deföed
(
OPENSSL_SYS_WIN16
Ë|| deföed(
__LP32__
)

81 
	#MD4_LONG
 

	)

82 #ñi‡
deföed
(
OPENSSL_SYS_CRAY
Ë|| deföed(
__ILP64__
)

83 
	#MD4_LONG
 

	)

84 
	#MD4_LONG_LOG2
 3

	)

93 
	#MD4_LONG
 

	)

96 
	#MD4_CBLOCK
 64

	)

97 
	#MD4_LBLOCK
 (
MD4_CBLOCK
/4)

	)

98 
	#MD4_DIGEST_LENGTH
 16

	)

100 
	sMD4°©e_°


102 
MD4_LONG
 
A
,
B
,
C
,
D
;

103 
MD4_LONG
 
Nl
,
Nh
;

104 
MD4_LONG
 
d©a
[
MD4_LBLOCK
];

105 
num
;

106 } 
	tMD4_CTX
;

108 #ifde‡
OPENSSL_FIPS


109 
¥iv©e_MD4_Inô
(
MD4_CTX
 *
c
);

111 
MD4_Inô
(
MD4_CTX
 *
c
);

112 
MD4_Upd©e
(
MD4_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

113 
MD4_FöÆ
(*
md
, 
MD4_CTX
 *
c
);

114 *
MD4
(c⁄° *
d
, 
size_t
 
n
, *
md
);

115 
MD4_Tønsf‹m
(
MD4_CTX
 *
c
, c⁄° *
b
);

116 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/md5.h

59 #i‚de‡
HEADER_MD5_H


60 
	#HEADER_MD5_H


	)

62 
	~<›ís¶/e_os2.h
>

63 
	~<°ddef.h
>

65 #ifde‡ 
__˝lu•lus


69 #ifde‡
OPENSSL_NO_MD5


70 #îr‹ 
MD5
 
is
 
dißbÀd
.

80 #i‡
deföed
(
OPENSSL_SYS_WIN16
Ë|| deföed(
__LP32__
)

81 
	#MD5_LONG
 

	)

82 #ñi‡
deföed
(
OPENSSL_SYS_CRAY
Ë|| deföed(
__ILP64__
)

83 
	#MD5_LONG
 

	)

84 
	#MD5_LONG_LOG2
 3

	)

93 
	#MD5_LONG
 

	)

96 
	#MD5_CBLOCK
 64

	)

97 
	#MD5_LBLOCK
 (
MD5_CBLOCK
/4)

	)

98 
	#MD5_DIGEST_LENGTH
 16

	)

100 
	sMD5°©e_°


102 
MD5_LONG
 
A
,
B
,
C
,
D
;

103 
MD5_LONG
 
Nl
,
Nh
;

104 
MD5_LONG
 
d©a
[
MD5_LBLOCK
];

105 
num
;

106 } 
	tMD5_CTX
;

108 #ifde‡
OPENSSL_FIPS


109 
¥iv©e_MD5_Inô
(
MD5_CTX
 *
c
);

111 
MD5_Inô
(
MD5_CTX
 *
c
);

112 
MD5_Upd©e
(
MD5_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

113 
MD5_FöÆ
(*
md
, 
MD5_CTX
 *
c
);

114 *
MD5
(c⁄° *
d
, 
size_t
 
n
, *
md
);

115 
MD5_Tønsf‹m
(
MD5_CTX
 *
c
, c⁄° *
b
);

116 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/mdc2.h

59 #i‚de‡
HEADER_MDC2_H


60 
	#HEADER_MDC2_H


	)

62 
	~<›ís¶/des.h
>

64 #ifde‡ 
__˝lu•lus


68 #ifde‡
OPENSSL_NO_MDC2


69 #îr‹ 
MDC2
 
is
 
dißbÀd
.

72 
	#MDC2_BLOCK
 8

	)

73 
	#MDC2_DIGEST_LENGTH
 16

	)

75 
	smdc2_˘x_°


77 
num
;

78 
d©a
[
MDC2_BLOCK
];

79 
DES_cblock
 
h
,
hh
;

80 
∑d_ty≥
;

81 } 
	tMDC2_CTX
;

83 #ifde‡
OPENSSL_FIPS


84 
¥iv©e_MDC2_Inô
(
MDC2_CTX
 *
c
);

86 
MDC2_Inô
(
MDC2_CTX
 *
c
);

87 
MDC2_Upd©e
(
MDC2_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

88 
MDC2_FöÆ
(*
md
, 
MDC2_CTX
 *
c
);

89 *
MDC2
(c⁄° *
d
, 
size_t
 
n
,

90 *
md
);

92 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/obj_mac.h

65 
	#SN_undef
 "UNDEF"

	)

66 
	#LN_undef
 "undeföed"

	)

67 
	#NID_undef
 0

	)

68 
	#OBJ_undef
 0L

	)

70 
	#SN_ôu_t
 "ITU-T"

	)

71 
	#LN_ôu_t
 "ôu-t"

	)

72 
	#NID_ôu_t
 645

	)

73 
	#OBJ_ôu_t
 0L

	)

75 
	#NID_ccôt
 404

	)

76 
	#OBJ_ccôt
 
OBJ_ôu_t


	)

78 
	#SN_iso
 "ISO"

	)

79 
	#LN_iso
 "iso"

	)

80 
	#NID_iso
 181

	)

81 
	#OBJ_iso
 1L

	)

83 
	#SN_joöt_iso_ôu_t
 "JOINT-ISO-ITU-T"

	)

84 
	#LN_joöt_iso_ôu_t
 "joöt-iso-ôu-t"

	)

85 
	#NID_joöt_iso_ôu_t
 646

	)

86 
	#OBJ_joöt_iso_ôu_t
 2L

	)

88 
	#NID_joöt_iso_ccôt
 393

	)

89 
	#OBJ_joöt_iso_ccôt
 
OBJ_joöt_iso_ôu_t


	)

91 
	#SN_membî_body
 "membî-body"

	)

92 
	#LN_membî_body
 "ISO Membî Body"

	)

93 
	#NID_membî_body
 182

	)

94 
	#OBJ_membî_body
 
OBJ_iso
,2L

	)

96 
	#SN_idítifõd_‹g™iz©i⁄
 "idítifõd-‹g™iz©i⁄"

	)

97 
	#NID_idítifõd_‹g™iz©i⁄
 676

	)

98 
	#OBJ_idítifõd_‹g™iz©i⁄
 
OBJ_iso
,3L

	)

100 
	#SN_hmac_md5
 "HMAC-MD5"

	)

101 
	#LN_hmac_md5
 "hmac-md5"

	)

102 
	#NID_hmac_md5
 780

	)

103 
	#OBJ_hmac_md5
 
OBJ_idítifõd_‹g™iz©i⁄
,6L,1L,5L,5L,8L,1L,1L

	)

105 
	#SN_hmac_sha1
 "HMAC-SHA1"

	)

106 
	#LN_hmac_sha1
 "hmac-sha1"

	)

107 
	#NID_hmac_sha1
 781

	)

108 
	#OBJ_hmac_sha1
 
OBJ_idítifõd_‹g™iz©i⁄
,6L,1L,5L,5L,8L,1L,2L

	)

110 
	#SN_˚πicom_¨c
 "˚πicom-¨c"

	)

111 
	#NID_˚πicom_¨c
 677

	)

112 
	#OBJ_˚πicom_¨c
 
OBJ_idítifõd_‹g™iz©i⁄
,132L

	)

114 
	#SN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "öã∫©i⁄Æ-‹g™iz©i⁄s"

	)

115 
	#LN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "I¡î«ti⁄Æ Org™iz©i⁄s"

	)

116 
	#NID_öã∫©i⁄Æ_‹g™iz©i⁄s
 647

	)

117 
	#OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
 
OBJ_joöt_iso_ôu_t
,23L

	)

119 
	#SN_w≠
 "w≠"

	)

120 
	#NID_w≠
 678

	)

121 
	#OBJ_w≠
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,43L

	)

123 
	#SN_w≠_wsg
 "w≠-wsg"

	)

124 
	#NID_w≠_wsg
 679

	)

125 
	#OBJ_w≠_wsg
 
OBJ_w≠
,1L

	)

127 
	#SN_£À˘ed_©åibuã_ty≥s
 "£À˘ed-©åibuã-ty≥s"

	)

128 
	#LN_£À˘ed_©åibuã_ty≥s
 "Sñe˘ed Aâribuã Ty≥s"

	)

129 
	#NID_£À˘ed_©åibuã_ty≥s
 394

	)

130 
	#OBJ_£À˘ed_©åibuã_ty≥s
 
OBJ_joöt_iso_ôu_t
,5L,1L,5L

	)

132 
	#SN_˛óøn˚
 "˛óøn˚"

	)

133 
	#NID_˛óøn˚
 395

	)

134 
	#OBJ_˛óøn˚
 
OBJ_£À˘ed_©åibuã_ty≥s
,55L

	)

136 
	#SN_ISO_US
 "ISO-US"

	)

137 
	#LN_ISO_US
 "ISO US Membî Body"

	)

138 
	#NID_ISO_US
 183

	)

139 
	#OBJ_ISO_US
 
OBJ_membî_body
,840L

	)

141 
	#SN_X9_57
 "X9-57"

	)

142 
	#LN_X9_57
 "X9.57"

	)

143 
	#NID_X9_57
 184

	)

144 
	#OBJ_X9_57
 
OBJ_ISO_US
,10040L

	)

146 
	#SN_X9cm
 "X9cm"

	)

147 
	#LN_X9cm
 "X9.57 CM ?"

	)

148 
	#NID_X9cm
 185

	)

149 
	#OBJ_X9cm
 
OBJ_X9_57
,4L

	)

151 
	#SN_dß
 "DSA"

	)

152 
	#LN_dß
 "dßEn¸y±i⁄"

	)

153 
	#NID_dß
 116

	)

154 
	#OBJ_dß
 
OBJ_X9cm
,1L

	)

156 
	#SN_dßWôhSHA1
 "DSA-SHA1"

	)

157 
	#LN_dßWôhSHA1
 "dßWôhSHA1"

	)

158 
	#NID_dßWôhSHA1
 113

	)

159 
	#OBJ_dßWôhSHA1
 
OBJ_X9cm
,3L

	)

161 
	#SN_™si_X9_62
 "™si-X9-62"

	)

162 
	#LN_™si_X9_62
 "ANSI X9.62"

	)

163 
	#NID_™si_X9_62
 405

	)

164 
	#OBJ_™si_X9_62
 
OBJ_ISO_US
,10045L

	)

166 
	#OBJ_X9_62_id_fõldTy≥
 
OBJ_™si_X9_62
,1L

	)

168 
	#SN_X9_62_¥ime_fõld
 "¥ime-fõld"

	)

169 
	#NID_X9_62_¥ime_fõld
 406

	)

170 
	#OBJ_X9_62_¥ime_fõld
 
OBJ_X9_62_id_fõldTy≥
,1L

	)

172 
	#SN_X9_62_ch¨a˘îi°ic_two_fõld
 "ch¨a˘îi°ic-two-fõld"

	)

173 
	#NID_X9_62_ch¨a˘îi°ic_two_fõld
 407

	)

174 
	#OBJ_X9_62_ch¨a˘îi°ic_two_fõld
 
OBJ_X9_62_id_fõldTy≥
,2L

	)

176 
	#SN_X9_62_id_ch¨a˘îi°ic_two_basis
 "id-ch¨a˘îi°ic-two-basis"

	)

177 
	#NID_X9_62_id_ch¨a˘îi°ic_two_basis
 680

	)

178 
	#OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
 
OBJ_X9_62_ch¨a˘îi°ic_two_fõld
,3L

	)

180 
	#SN_X9_62_⁄Basis
 "⁄Basis"

	)

181 
	#NID_X9_62_⁄Basis
 681

	)

182 
	#OBJ_X9_62_⁄Basis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,1L

	)

184 
	#SN_X9_62_çBasis
 "çBasis"

	)

185 
	#NID_X9_62_çBasis
 682

	)

186 
	#OBJ_X9_62_çBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,2L

	)

188 
	#SN_X9_62_µBasis
 "µBasis"

	)

189 
	#NID_X9_62_µBasis
 683

	)

190 
	#OBJ_X9_62_µBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,3L

	)

192 
	#OBJ_X9_62_id_publicKeyTy≥
 
OBJ_™si_X9_62
,2L

	)

194 
	#SN_X9_62_id_ecPublicKey
 "id-ecPublicKey"

	)

195 
	#NID_X9_62_id_ecPublicKey
 408

	)

196 
	#OBJ_X9_62_id_ecPublicKey
 
OBJ_X9_62_id_publicKeyTy≥
,1L

	)

198 
	#OBJ_X9_62_ñlùticCurve
 
OBJ_™si_X9_62
,3L

	)

200 
	#OBJ_X9_62_c_TwoCurve
 
OBJ_X9_62_ñlùticCurve
,0L

	)

202 
	#SN_X9_62_c2≤b163v1
 "c2≤b163v1"

	)

203 
	#NID_X9_62_c2≤b163v1
 684

	)

204 
	#OBJ_X9_62_c2≤b163v1
 
OBJ_X9_62_c_TwoCurve
,1L

	)

206 
	#SN_X9_62_c2≤b163v2
 "c2≤b163v2"

	)

207 
	#NID_X9_62_c2≤b163v2
 685

	)

208 
	#OBJ_X9_62_c2≤b163v2
 
OBJ_X9_62_c_TwoCurve
,2L

	)

210 
	#SN_X9_62_c2≤b163v3
 "c2≤b163v3"

	)

211 
	#NID_X9_62_c2≤b163v3
 686

	)

212 
	#OBJ_X9_62_c2≤b163v3
 
OBJ_X9_62_c_TwoCurve
,3L

	)

214 
	#SN_X9_62_c2≤b176v1
 "c2≤b176v1"

	)

215 
	#NID_X9_62_c2≤b176v1
 687

	)

216 
	#OBJ_X9_62_c2≤b176v1
 
OBJ_X9_62_c_TwoCurve
,4L

	)

218 
	#SN_X9_62_c2äb191v1
 "c2äb191v1"

	)

219 
	#NID_X9_62_c2äb191v1
 688

	)

220 
	#OBJ_X9_62_c2äb191v1
 
OBJ_X9_62_c_TwoCurve
,5L

	)

222 
	#SN_X9_62_c2äb191v2
 "c2äb191v2"

	)

223 
	#NID_X9_62_c2äb191v2
 689

	)

224 
	#OBJ_X9_62_c2äb191v2
 
OBJ_X9_62_c_TwoCurve
,6L

	)

226 
	#SN_X9_62_c2äb191v3
 "c2äb191v3"

	)

227 
	#NID_X9_62_c2äb191v3
 690

	)

228 
	#OBJ_X9_62_c2äb191v3
 
OBJ_X9_62_c_TwoCurve
,7L

	)

230 
	#SN_X9_62_c2⁄b191v4
 "c2⁄b191v4"

	)

231 
	#NID_X9_62_c2⁄b191v4
 691

	)

232 
	#OBJ_X9_62_c2⁄b191v4
 
OBJ_X9_62_c_TwoCurve
,8L

	)

234 
	#SN_X9_62_c2⁄b191v5
 "c2⁄b191v5"

	)

235 
	#NID_X9_62_c2⁄b191v5
 692

	)

236 
	#OBJ_X9_62_c2⁄b191v5
 
OBJ_X9_62_c_TwoCurve
,9L

	)

238 
	#SN_X9_62_c2≤b208w1
 "c2≤b208w1"

	)

239 
	#NID_X9_62_c2≤b208w1
 693

	)

240 
	#OBJ_X9_62_c2≤b208w1
 
OBJ_X9_62_c_TwoCurve
,10L

	)

242 
	#SN_X9_62_c2äb239v1
 "c2äb239v1"

	)

243 
	#NID_X9_62_c2äb239v1
 694

	)

244 
	#OBJ_X9_62_c2äb239v1
 
OBJ_X9_62_c_TwoCurve
,11L

	)

246 
	#SN_X9_62_c2äb239v2
 "c2äb239v2"

	)

247 
	#NID_X9_62_c2äb239v2
 695

	)

248 
	#OBJ_X9_62_c2äb239v2
 
OBJ_X9_62_c_TwoCurve
,12L

	)

250 
	#SN_X9_62_c2äb239v3
 "c2äb239v3"

	)

251 
	#NID_X9_62_c2äb239v3
 696

	)

252 
	#OBJ_X9_62_c2äb239v3
 
OBJ_X9_62_c_TwoCurve
,13L

	)

254 
	#SN_X9_62_c2⁄b239v4
 "c2⁄b239v4"

	)

255 
	#NID_X9_62_c2⁄b239v4
 697

	)

256 
	#OBJ_X9_62_c2⁄b239v4
 
OBJ_X9_62_c_TwoCurve
,14L

	)

258 
	#SN_X9_62_c2⁄b239v5
 "c2⁄b239v5"

	)

259 
	#NID_X9_62_c2⁄b239v5
 698

	)

260 
	#OBJ_X9_62_c2⁄b239v5
 
OBJ_X9_62_c_TwoCurve
,15L

	)

262 
	#SN_X9_62_c2≤b272w1
 "c2≤b272w1"

	)

263 
	#NID_X9_62_c2≤b272w1
 699

	)

264 
	#OBJ_X9_62_c2≤b272w1
 
OBJ_X9_62_c_TwoCurve
,16L

	)

266 
	#SN_X9_62_c2≤b304w1
 "c2≤b304w1"

	)

267 
	#NID_X9_62_c2≤b304w1
 700

	)

268 
	#OBJ_X9_62_c2≤b304w1
 
OBJ_X9_62_c_TwoCurve
,17L

	)

270 
	#SN_X9_62_c2äb359v1
 "c2äb359v1"

	)

271 
	#NID_X9_62_c2äb359v1
 701

	)

272 
	#OBJ_X9_62_c2äb359v1
 
OBJ_X9_62_c_TwoCurve
,18L

	)

274 
	#SN_X9_62_c2≤b368w1
 "c2≤b368w1"

	)

275 
	#NID_X9_62_c2≤b368w1
 702

	)

276 
	#OBJ_X9_62_c2≤b368w1
 
OBJ_X9_62_c_TwoCurve
,19L

	)

278 
	#SN_X9_62_c2äb431r1
 "c2äb431r1"

	)

279 
	#NID_X9_62_c2äb431r1
 703

	)

280 
	#OBJ_X9_62_c2äb431r1
 
OBJ_X9_62_c_TwoCurve
,20L

	)

282 
	#OBJ_X9_62_¥imeCurve
 
OBJ_X9_62_ñlùticCurve
,1L

	)

284 
	#SN_X9_62_¥ime192v1
 "¥ime192v1"

	)

285 
	#NID_X9_62_¥ime192v1
 409

	)

286 
	#OBJ_X9_62_¥ime192v1
 
OBJ_X9_62_¥imeCurve
,1L

	)

288 
	#SN_X9_62_¥ime192v2
 "¥ime192v2"

	)

289 
	#NID_X9_62_¥ime192v2
 410

	)

290 
	#OBJ_X9_62_¥ime192v2
 
OBJ_X9_62_¥imeCurve
,2L

	)

292 
	#SN_X9_62_¥ime192v3
 "¥ime192v3"

	)

293 
	#NID_X9_62_¥ime192v3
 411

	)

294 
	#OBJ_X9_62_¥ime192v3
 
OBJ_X9_62_¥imeCurve
,3L

	)

296 
	#SN_X9_62_¥ime239v1
 "¥ime239v1"

	)

297 
	#NID_X9_62_¥ime239v1
 412

	)

298 
	#OBJ_X9_62_¥ime239v1
 
OBJ_X9_62_¥imeCurve
,4L

	)

300 
	#SN_X9_62_¥ime239v2
 "¥ime239v2"

	)

301 
	#NID_X9_62_¥ime239v2
 413

	)

302 
	#OBJ_X9_62_¥ime239v2
 
OBJ_X9_62_¥imeCurve
,5L

	)

304 
	#SN_X9_62_¥ime239v3
 "¥ime239v3"

	)

305 
	#NID_X9_62_¥ime239v3
 414

	)

306 
	#OBJ_X9_62_¥ime239v3
 
OBJ_X9_62_¥imeCurve
,6L

	)

308 
	#SN_X9_62_¥ime256v1
 "¥ime256v1"

	)

309 
	#NID_X9_62_¥ime256v1
 415

	)

310 
	#OBJ_X9_62_¥ime256v1
 
OBJ_X9_62_¥imeCurve
,7L

	)

312 
	#OBJ_X9_62_id_ecSigTy≥
 
OBJ_™si_X9_62
,4L

	)

314 
	#SN_ecdß_wôh_SHA1
 "ecdß-wôh-SHA1"

	)

315 
	#NID_ecdß_wôh_SHA1
 416

	)

316 
	#OBJ_ecdß_wôh_SHA1
 
OBJ_X9_62_id_ecSigTy≥
,1L

	)

318 
	#SN_ecdß_wôh_Recommíded
 "ecdß-wôh-Recommíded"

	)

319 
	#NID_ecdß_wôh_Recommíded
 791

	)

320 
	#OBJ_ecdß_wôh_Recommíded
 
OBJ_X9_62_id_ecSigTy≥
,2L

	)

322 
	#SN_ecdß_wôh_S≥cifõd
 "ecdß-wôh-S≥cifõd"

	)

323 
	#NID_ecdß_wôh_S≥cifõd
 792

	)

324 
	#OBJ_ecdß_wôh_S≥cifõd
 
OBJ_X9_62_id_ecSigTy≥
,3L

	)

326 
	#SN_ecdß_wôh_SHA224
 "ecdß-wôh-SHA224"

	)

327 
	#NID_ecdß_wôh_SHA224
 793

	)

328 
	#OBJ_ecdß_wôh_SHA224
 
OBJ_ecdß_wôh_S≥cifõd
,1L

	)

330 
	#SN_ecdß_wôh_SHA256
 "ecdß-wôh-SHA256"

	)

331 
	#NID_ecdß_wôh_SHA256
 794

	)

332 
	#OBJ_ecdß_wôh_SHA256
 
OBJ_ecdß_wôh_S≥cifõd
,2L

	)

334 
	#SN_ecdß_wôh_SHA384
 "ecdß-wôh-SHA384"

	)

335 
	#NID_ecdß_wôh_SHA384
 795

	)

336 
	#OBJ_ecdß_wôh_SHA384
 
OBJ_ecdß_wôh_S≥cifõd
,3L

	)

338 
	#SN_ecdß_wôh_SHA512
 "ecdß-wôh-SHA512"

	)

339 
	#NID_ecdß_wôh_SHA512
 796

	)

340 
	#OBJ_ecdß_wôh_SHA512
 
OBJ_ecdß_wôh_S≥cifõd
,4L

	)

342 
	#OBJ_£cg_ñlùticCurve
 
OBJ_˚πicom_¨c
,0L

	)

344 
	#SN_£˝112r1
 "£˝112r1"

	)

345 
	#NID_£˝112r1
 704

	)

346 
	#OBJ_£˝112r1
 
OBJ_£cg_ñlùticCurve
,6L

	)

348 
	#SN_£˝112r2
 "£˝112r2"

	)

349 
	#NID_£˝112r2
 705

	)

350 
	#OBJ_£˝112r2
 
OBJ_£cg_ñlùticCurve
,7L

	)

352 
	#SN_£˝128r1
 "£˝128r1"

	)

353 
	#NID_£˝128r1
 706

	)

354 
	#OBJ_£˝128r1
 
OBJ_£cg_ñlùticCurve
,28L

	)

356 
	#SN_£˝128r2
 "£˝128r2"

	)

357 
	#NID_£˝128r2
 707

	)

358 
	#OBJ_£˝128r2
 
OBJ_£cg_ñlùticCurve
,29L

	)

360 
	#SN_£˝160k1
 "£˝160k1"

	)

361 
	#NID_£˝160k1
 708

	)

362 
	#OBJ_£˝160k1
 
OBJ_£cg_ñlùticCurve
,9L

	)

364 
	#SN_£˝160r1
 "£˝160r1"

	)

365 
	#NID_£˝160r1
 709

	)

366 
	#OBJ_£˝160r1
 
OBJ_£cg_ñlùticCurve
,8L

	)

368 
	#SN_£˝160r2
 "£˝160r2"

	)

369 
	#NID_£˝160r2
 710

	)

370 
	#OBJ_£˝160r2
 
OBJ_£cg_ñlùticCurve
,30L

	)

372 
	#SN_£˝192k1
 "£˝192k1"

	)

373 
	#NID_£˝192k1
 711

	)

374 
	#OBJ_£˝192k1
 
OBJ_£cg_ñlùticCurve
,31L

	)

376 
	#SN_£˝224k1
 "£˝224k1"

	)

377 
	#NID_£˝224k1
 712

	)

378 
	#OBJ_£˝224k1
 
OBJ_£cg_ñlùticCurve
,32L

	)

380 
	#SN_£˝224r1
 "£˝224r1"

	)

381 
	#NID_£˝224r1
 713

	)

382 
	#OBJ_£˝224r1
 
OBJ_£cg_ñlùticCurve
,33L

	)

384 
	#SN_£˝256k1
 "£˝256k1"

	)

385 
	#NID_£˝256k1
 714

	)

386 
	#OBJ_£˝256k1
 
OBJ_£cg_ñlùticCurve
,10L

	)

388 
	#SN_£˝384r1
 "£˝384r1"

	)

389 
	#NID_£˝384r1
 715

	)

390 
	#OBJ_£˝384r1
 
OBJ_£cg_ñlùticCurve
,34L

	)

392 
	#SN_£˝521r1
 "£˝521r1"

	)

393 
	#NID_£˝521r1
 716

	)

394 
	#OBJ_£˝521r1
 
OBJ_£cg_ñlùticCurve
,35L

	)

396 
	#SN_£˘113r1
 "£˘113r1"

	)

397 
	#NID_£˘113r1
 717

	)

398 
	#OBJ_£˘113r1
 
OBJ_£cg_ñlùticCurve
,4L

	)

400 
	#SN_£˘113r2
 "£˘113r2"

	)

401 
	#NID_£˘113r2
 718

	)

402 
	#OBJ_£˘113r2
 
OBJ_£cg_ñlùticCurve
,5L

	)

404 
	#SN_£˘131r1
 "£˘131r1"

	)

405 
	#NID_£˘131r1
 719

	)

406 
	#OBJ_£˘131r1
 
OBJ_£cg_ñlùticCurve
,22L

	)

408 
	#SN_£˘131r2
 "£˘131r2"

	)

409 
	#NID_£˘131r2
 720

	)

410 
	#OBJ_£˘131r2
 
OBJ_£cg_ñlùticCurve
,23L

	)

412 
	#SN_£˘163k1
 "£˘163k1"

	)

413 
	#NID_£˘163k1
 721

	)

414 
	#OBJ_£˘163k1
 
OBJ_£cg_ñlùticCurve
,1L

	)

416 
	#SN_£˘163r1
 "£˘163r1"

	)

417 
	#NID_£˘163r1
 722

	)

418 
	#OBJ_£˘163r1
 
OBJ_£cg_ñlùticCurve
,2L

	)

420 
	#SN_£˘163r2
 "£˘163r2"

	)

421 
	#NID_£˘163r2
 723

	)

422 
	#OBJ_£˘163r2
 
OBJ_£cg_ñlùticCurve
,15L

	)

424 
	#SN_£˘193r1
 "£˘193r1"

	)

425 
	#NID_£˘193r1
 724

	)

426 
	#OBJ_£˘193r1
 
OBJ_£cg_ñlùticCurve
,24L

	)

428 
	#SN_£˘193r2
 "£˘193r2"

	)

429 
	#NID_£˘193r2
 725

	)

430 
	#OBJ_£˘193r2
 
OBJ_£cg_ñlùticCurve
,25L

	)

432 
	#SN_£˘233k1
 "£˘233k1"

	)

433 
	#NID_£˘233k1
 726

	)

434 
	#OBJ_£˘233k1
 
OBJ_£cg_ñlùticCurve
,26L

	)

436 
	#SN_£˘233r1
 "£˘233r1"

	)

437 
	#NID_£˘233r1
 727

	)

438 
	#OBJ_£˘233r1
 
OBJ_£cg_ñlùticCurve
,27L

	)

440 
	#SN_£˘239k1
 "£˘239k1"

	)

441 
	#NID_£˘239k1
 728

	)

442 
	#OBJ_£˘239k1
 
OBJ_£cg_ñlùticCurve
,3L

	)

444 
	#SN_£˘283k1
 "£˘283k1"

	)

445 
	#NID_£˘283k1
 729

	)

446 
	#OBJ_£˘283k1
 
OBJ_£cg_ñlùticCurve
,16L

	)

448 
	#SN_£˘283r1
 "£˘283r1"

	)

449 
	#NID_£˘283r1
 730

	)

450 
	#OBJ_£˘283r1
 
OBJ_£cg_ñlùticCurve
,17L

	)

452 
	#SN_£˘409k1
 "£˘409k1"

	)

453 
	#NID_£˘409k1
 731

	)

454 
	#OBJ_£˘409k1
 
OBJ_£cg_ñlùticCurve
,36L

	)

456 
	#SN_£˘409r1
 "£˘409r1"

	)

457 
	#NID_£˘409r1
 732

	)

458 
	#OBJ_£˘409r1
 
OBJ_£cg_ñlùticCurve
,37L

	)

460 
	#SN_£˘571k1
 "£˘571k1"

	)

461 
	#NID_£˘571k1
 733

	)

462 
	#OBJ_£˘571k1
 
OBJ_£cg_ñlùticCurve
,38L

	)

464 
	#SN_£˘571r1
 "£˘571r1"

	)

465 
	#NID_£˘571r1
 734

	)

466 
	#OBJ_£˘571r1
 
OBJ_£cg_ñlùticCurve
,39L

	)

468 
	#OBJ_w≠_wsg_idm_ecid
 
OBJ_w≠_wsg
,4L

	)

470 
	#SN_w≠_wsg_idm_ecid_wés1
 "w≠-wsg-idm-ecid-wés1"

	)

471 
	#NID_w≠_wsg_idm_ecid_wés1
 735

	)

472 
	#OBJ_w≠_wsg_idm_ecid_wés1
 
OBJ_w≠_wsg_idm_ecid
,1L

	)

474 
	#SN_w≠_wsg_idm_ecid_wés3
 "w≠-wsg-idm-ecid-wés3"

	)

475 
	#NID_w≠_wsg_idm_ecid_wés3
 736

	)

476 
	#OBJ_w≠_wsg_idm_ecid_wés3
 
OBJ_w≠_wsg_idm_ecid
,3L

	)

478 
	#SN_w≠_wsg_idm_ecid_wés4
 "w≠-wsg-idm-ecid-wés4"

	)

479 
	#NID_w≠_wsg_idm_ecid_wés4
 737

	)

480 
	#OBJ_w≠_wsg_idm_ecid_wés4
 
OBJ_w≠_wsg_idm_ecid
,4L

	)

482 
	#SN_w≠_wsg_idm_ecid_wés5
 "w≠-wsg-idm-ecid-wés5"

	)

483 
	#NID_w≠_wsg_idm_ecid_wés5
 738

	)

484 
	#OBJ_w≠_wsg_idm_ecid_wés5
 
OBJ_w≠_wsg_idm_ecid
,5L

	)

486 
	#SN_w≠_wsg_idm_ecid_wés6
 "w≠-wsg-idm-ecid-wés6"

	)

487 
	#NID_w≠_wsg_idm_ecid_wés6
 739

	)

488 
	#OBJ_w≠_wsg_idm_ecid_wés6
 
OBJ_w≠_wsg_idm_ecid
,6L

	)

490 
	#SN_w≠_wsg_idm_ecid_wés7
 "w≠-wsg-idm-ecid-wés7"

	)

491 
	#NID_w≠_wsg_idm_ecid_wés7
 740

	)

492 
	#OBJ_w≠_wsg_idm_ecid_wés7
 
OBJ_w≠_wsg_idm_ecid
,7L

	)

494 
	#SN_w≠_wsg_idm_ecid_wés8
 "w≠-wsg-idm-ecid-wés8"

	)

495 
	#NID_w≠_wsg_idm_ecid_wés8
 741

	)

496 
	#OBJ_w≠_wsg_idm_ecid_wés8
 
OBJ_w≠_wsg_idm_ecid
,8L

	)

498 
	#SN_w≠_wsg_idm_ecid_wés9
 "w≠-wsg-idm-ecid-wés9"

	)

499 
	#NID_w≠_wsg_idm_ecid_wés9
 742

	)

500 
	#OBJ_w≠_wsg_idm_ecid_wés9
 
OBJ_w≠_wsg_idm_ecid
,9L

	)

502 
	#SN_w≠_wsg_idm_ecid_wés10
 "w≠-wsg-idm-ecid-wés10"

	)

503 
	#NID_w≠_wsg_idm_ecid_wés10
 743

	)

504 
	#OBJ_w≠_wsg_idm_ecid_wés10
 
OBJ_w≠_wsg_idm_ecid
,10L

	)

506 
	#SN_w≠_wsg_idm_ecid_wés11
 "w≠-wsg-idm-ecid-wés11"

	)

507 
	#NID_w≠_wsg_idm_ecid_wés11
 744

	)

508 
	#OBJ_w≠_wsg_idm_ecid_wés11
 
OBJ_w≠_wsg_idm_ecid
,11L

	)

510 
	#SN_w≠_wsg_idm_ecid_wés12
 "w≠-wsg-idm-ecid-wés12"

	)

511 
	#NID_w≠_wsg_idm_ecid_wés12
 745

	)

512 
	#OBJ_w≠_wsg_idm_ecid_wés12
 
OBJ_w≠_wsg_idm_ecid
,12L

	)

514 
	#SN_ˇ°5_cbc
 "CAST5-CBC"

	)

515 
	#LN_ˇ°5_cbc
 "ˇ°5-cbc"

	)

516 
	#NID_ˇ°5_cbc
 108

	)

517 
	#OBJ_ˇ°5_cbc
 
OBJ_ISO_US
,113533L,7L,66L,10L

	)

519 
	#SN_ˇ°5_ecb
 "CAST5-ECB"

	)

520 
	#LN_ˇ°5_ecb
 "ˇ°5-ecb"

	)

521 
	#NID_ˇ°5_ecb
 109

	)

523 
	#SN_ˇ°5_cfb64
 "CAST5-CFB"

	)

524 
	#LN_ˇ°5_cfb64
 "ˇ°5-cfb"

	)

525 
	#NID_ˇ°5_cfb64
 110

	)

527 
	#SN_ˇ°5_ofb64
 "CAST5-OFB"

	)

528 
	#LN_ˇ°5_ofb64
 "ˇ°5-ofb"

	)

529 
	#NID_ˇ°5_ofb64
 111

	)

531 
	#LN_pbeWôhMD5AndCa°5_CBC
 "pbeWôhMD5AndCa°5CBC"

	)

532 
	#NID_pbeWôhMD5AndCa°5_CBC
 112

	)

533 
	#OBJ_pbeWôhMD5AndCa°5_CBC
 
OBJ_ISO_US
,113533L,7L,66L,12L

	)

535 
	#SN_id_Passw‹dBa£dMAC
 "id-Passw‹dBa£dMAC"

	)

536 
	#LN_id_Passw‹dBa£dMAC
 "∑ssw‹d ba£d MAC"

	)

537 
	#NID_id_Passw‹dBa£dMAC
 782

	)

538 
	#OBJ_id_Passw‹dBa£dMAC
 
OBJ_ISO_US
,113533L,7L,66L,13L

	)

540 
	#SN_id_DHBa£dMac
 "id-DHBa£dMac"

	)

541 
	#LN_id_DHBa£dMac
 "Diffõ-Hñlm™ ba£d MAC"

	)

542 
	#NID_id_DHBa£dMac
 783

	)

543 
	#OBJ_id_DHBa£dMac
 
OBJ_ISO_US
,113533L,7L,66L,30L

	)

545 
	#SN_rßdsi
 "rßdsi"

	)

546 
	#LN_rßdsi
 "RSA D©®Securôy, Inc."

	)

547 
	#NID_rßdsi
 1

	)

548 
	#OBJ_rßdsi
 
OBJ_ISO_US
,113549L

	)

550 
	#SN_pkcs
 "pkcs"

	)

551 
	#LN_pkcs
 "RSA D©®Securôy, Inc. PKCS"

	)

552 
	#NID_pkcs
 2

	)

553 
	#OBJ_pkcs
 
OBJ_rßdsi
,1L

	)

555 
	#SN_pkcs1
 "pkcs1"

	)

556 
	#NID_pkcs1
 186

	)

557 
	#OBJ_pkcs1
 
OBJ_pkcs
,1L

	)

559 
	#LN_rßEn¸y±i⁄
 "rßEn¸y±i⁄"

	)

560 
	#NID_rßEn¸y±i⁄
 6

	)

561 
	#OBJ_rßEn¸y±i⁄
 
OBJ_pkcs1
,1L

	)

563 
	#SN_md2WôhRSAEn¸y±i⁄
 "RSA-MD2"

	)

564 
	#LN_md2WôhRSAEn¸y±i⁄
 "md2WôhRSAEn¸y±i⁄"

	)

565 
	#NID_md2WôhRSAEn¸y±i⁄
 7

	)

566 
	#OBJ_md2WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,2L

	)

568 
	#SN_md4WôhRSAEn¸y±i⁄
 "RSA-MD4"

	)

569 
	#LN_md4WôhRSAEn¸y±i⁄
 "md4WôhRSAEn¸y±i⁄"

	)

570 
	#NID_md4WôhRSAEn¸y±i⁄
 396

	)

571 
	#OBJ_md4WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,3L

	)

573 
	#SN_md5WôhRSAEn¸y±i⁄
 "RSA-MD5"

	)

574 
	#LN_md5WôhRSAEn¸y±i⁄
 "md5WôhRSAEn¸y±i⁄"

	)

575 
	#NID_md5WôhRSAEn¸y±i⁄
 8

	)

576 
	#OBJ_md5WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,4L

	)

578 
	#SN_sha1WôhRSAEn¸y±i⁄
 "RSA-SHA1"

	)

579 
	#LN_sha1WôhRSAEn¸y±i⁄
 "sha1WôhRSAEn¸y±i⁄"

	)

580 
	#NID_sha1WôhRSAEn¸y±i⁄
 65

	)

581 
	#OBJ_sha1WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,5L

	)

583 
	#SN_sha256WôhRSAEn¸y±i⁄
 "RSA-SHA256"

	)

584 
	#LN_sha256WôhRSAEn¸y±i⁄
 "sha256WôhRSAEn¸y±i⁄"

	)

585 
	#NID_sha256WôhRSAEn¸y±i⁄
 668

	)

586 
	#OBJ_sha256WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,11L

	)

588 
	#SN_sha384WôhRSAEn¸y±i⁄
 "RSA-SHA384"

	)

589 
	#LN_sha384WôhRSAEn¸y±i⁄
 "sha384WôhRSAEn¸y±i⁄"

	)

590 
	#NID_sha384WôhRSAEn¸y±i⁄
 669

	)

591 
	#OBJ_sha384WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,12L

	)

593 
	#SN_sha512WôhRSAEn¸y±i⁄
 "RSA-SHA512"

	)

594 
	#LN_sha512WôhRSAEn¸y±i⁄
 "sha512WôhRSAEn¸y±i⁄"

	)

595 
	#NID_sha512WôhRSAEn¸y±i⁄
 670

	)

596 
	#OBJ_sha512WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,13L

	)

598 
	#SN_sha224WôhRSAEn¸y±i⁄
 "RSA-SHA224"

	)

599 
	#LN_sha224WôhRSAEn¸y±i⁄
 "sha224WôhRSAEn¸y±i⁄"

	)

600 
	#NID_sha224WôhRSAEn¸y±i⁄
 671

	)

601 
	#OBJ_sha224WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,14L

	)

603 
	#SN_pkcs3
 "pkcs3"

	)

604 
	#NID_pkcs3
 27

	)

605 
	#OBJ_pkcs3
 
OBJ_pkcs
,3L

	)

607 
	#LN_dhKeyAgªemít
 "dhKeyAgªemít"

	)

608 
	#NID_dhKeyAgªemít
 28

	)

609 
	#OBJ_dhKeyAgªemít
 
OBJ_pkcs3
,1L

	)

611 
	#SN_pkcs5
 "pkcs5"

	)

612 
	#NID_pkcs5
 187

	)

613 
	#OBJ_pkcs5
 
OBJ_pkcs
,5L

	)

615 
	#SN_pbeWôhMD2AndDES_CBC
 "PBE-MD2-DES"

	)

616 
	#LN_pbeWôhMD2AndDES_CBC
 "pbeWôhMD2AndDES-CBC"

	)

617 
	#NID_pbeWôhMD2AndDES_CBC
 9

	)

618 
	#OBJ_pbeWôhMD2AndDES_CBC
 
OBJ_pkcs5
,1L

	)

620 
	#SN_pbeWôhMD5AndDES_CBC
 "PBE-MD5-DES"

	)

621 
	#LN_pbeWôhMD5AndDES_CBC
 "pbeWôhMD5AndDES-CBC"

	)

622 
	#NID_pbeWôhMD5AndDES_CBC
 10

	)

623 
	#OBJ_pbeWôhMD5AndDES_CBC
 
OBJ_pkcs5
,3L

	)

625 
	#SN_pbeWôhMD2AndRC2_CBC
 "PBE-MD2-RC2-64"

	)

626 
	#LN_pbeWôhMD2AndRC2_CBC
 "pbeWôhMD2AndRC2-CBC"

	)

627 
	#NID_pbeWôhMD2AndRC2_CBC
 168

	)

628 
	#OBJ_pbeWôhMD2AndRC2_CBC
 
OBJ_pkcs5
,4L

	)

630 
	#SN_pbeWôhMD5AndRC2_CBC
 "PBE-MD5-RC2-64"

	)

631 
	#LN_pbeWôhMD5AndRC2_CBC
 "pbeWôhMD5AndRC2-CBC"

	)

632 
	#NID_pbeWôhMD5AndRC2_CBC
 169

	)

633 
	#OBJ_pbeWôhMD5AndRC2_CBC
 
OBJ_pkcs5
,6L

	)

635 
	#SN_pbeWôhSHA1AndDES_CBC
 "PBE-SHA1-DES"

	)

636 
	#LN_pbeWôhSHA1AndDES_CBC
 "pbeWôhSHA1AndDES-CBC"

	)

637 
	#NID_pbeWôhSHA1AndDES_CBC
 170

	)

638 
	#OBJ_pbeWôhSHA1AndDES_CBC
 
OBJ_pkcs5
,10L

	)

640 
	#SN_pbeWôhSHA1AndRC2_CBC
 "PBE-SHA1-RC2-64"

	)

641 
	#LN_pbeWôhSHA1AndRC2_CBC
 "pbeWôhSHA1AndRC2-CBC"

	)

642 
	#NID_pbeWôhSHA1AndRC2_CBC
 68

	)

643 
	#OBJ_pbeWôhSHA1AndRC2_CBC
 
OBJ_pkcs5
,11L

	)

645 
	#LN_id_pbkdf2
 "PBKDF2"

	)

646 
	#NID_id_pbkdf2
 69

	)

647 
	#OBJ_id_pbkdf2
 
OBJ_pkcs5
,12L

	)

649 
	#LN_pbes2
 "PBES2"

	)

650 
	#NID_pbes2
 161

	)

651 
	#OBJ_pbes2
 
OBJ_pkcs5
,13L

	)

653 
	#LN_pbmac1
 "PBMAC1"

	)

654 
	#NID_pbmac1
 162

	)

655 
	#OBJ_pbmac1
 
OBJ_pkcs5
,14L

	)

657 
	#SN_pkcs7
 "pkcs7"

	)

658 
	#NID_pkcs7
 20

	)

659 
	#OBJ_pkcs7
 
OBJ_pkcs
,7L

	)

661 
	#LN_pkcs7_d©a
 "pkcs7-d©a"

	)

662 
	#NID_pkcs7_d©a
 21

	)

663 
	#OBJ_pkcs7_d©a
 
OBJ_pkcs7
,1L

	)

665 
	#LN_pkcs7_sig√d
 "pkcs7-sig√dD©a"

	)

666 
	#NID_pkcs7_sig√d
 22

	)

667 
	#OBJ_pkcs7_sig√d
 
OBJ_pkcs7
,2L

	)

669 
	#LN_pkcs7_ívñ›ed
 "pkcs7-ívñ›edD©a"

	)

670 
	#NID_pkcs7_ívñ›ed
 23

	)

671 
	#OBJ_pkcs7_ívñ›ed
 
OBJ_pkcs7
,3L

	)

673 
	#LN_pkcs7_sig√dAndEnvñ›ed
 "pkcs7-sig√dAndEnvñ›edD©a"

	)

674 
	#NID_pkcs7_sig√dAndEnvñ›ed
 24

	)

675 
	#OBJ_pkcs7_sig√dAndEnvñ›ed
 
OBJ_pkcs7
,4L

	)

677 
	#LN_pkcs7_dige°
 "pkcs7-dige°D©a"

	)

678 
	#NID_pkcs7_dige°
 25

	)

679 
	#OBJ_pkcs7_dige°
 
OBJ_pkcs7
,5L

	)

681 
	#LN_pkcs7_í¸y±ed
 "pkcs7-í¸y±edD©a"

	)

682 
	#NID_pkcs7_í¸y±ed
 26

	)

683 
	#OBJ_pkcs7_í¸y±ed
 
OBJ_pkcs7
,6L

	)

685 
	#SN_pkcs9
 "pkcs9"

	)

686 
	#NID_pkcs9
 47

	)

687 
	#OBJ_pkcs9
 
OBJ_pkcs
,9L

	)

689 
	#LN_pkcs9_emaûAddªss
 "emaûAddªss"

	)

690 
	#NID_pkcs9_emaûAddªss
 48

	)

691 
	#OBJ_pkcs9_emaûAddªss
 
OBJ_pkcs9
,1L

	)

693 
	#LN_pkcs9_un°ru˘uªdName
 "un°ru˘uªdName"

	)

694 
	#NID_pkcs9_un°ru˘uªdName
 49

	)

695 
	#OBJ_pkcs9_un°ru˘uªdName
 
OBJ_pkcs9
,2L

	)

697 
	#LN_pkcs9_c⁄ã¡Ty≥
 "c⁄ã¡Ty≥"

	)

698 
	#NID_pkcs9_c⁄ã¡Ty≥
 50

	)

699 
	#OBJ_pkcs9_c⁄ã¡Ty≥
 
OBJ_pkcs9
,3L

	)

701 
	#LN_pkcs9_mesßgeDige°
 "mesßgeDige°"

	)

702 
	#NID_pkcs9_mesßgeDige°
 51

	)

703 
	#OBJ_pkcs9_mesßgeDige°
 
OBJ_pkcs9
,4L

	)

705 
	#LN_pkcs9_signögTime
 "signögTime"

	)

706 
	#NID_pkcs9_signögTime
 52

	)

707 
	#OBJ_pkcs9_signögTime
 
OBJ_pkcs9
,5L

	)

709 
	#LN_pkcs9_cou¡îsig«tuª
 "cou¡îsig«tuª"

	)

710 
	#NID_pkcs9_cou¡îsig«tuª
 53

	)

711 
	#OBJ_pkcs9_cou¡îsig«tuª
 
OBJ_pkcs9
,6L

	)

713 
	#LN_pkcs9_chÆÀngePassw‹d
 "chÆÀngePassw‹d"

	)

714 
	#NID_pkcs9_chÆÀngePassw‹d
 54

	)

715 
	#OBJ_pkcs9_chÆÀngePassw‹d
 
OBJ_pkcs9
,7L

	)

717 
	#LN_pkcs9_un°ru˘uªdAddªss
 "un°ru˘uªdAddªss"

	)

718 
	#NID_pkcs9_un°ru˘uªdAddªss
 55

	)

719 
	#OBJ_pkcs9_un°ru˘uªdAddªss
 
OBJ_pkcs9
,8L

	)

721 
	#LN_pkcs9_extCîtAâribuãs
 "exãndedCîtifiˇãAâribuãs"

	)

722 
	#NID_pkcs9_extCîtAâribuãs
 56

	)

723 
	#OBJ_pkcs9_extCîtAâribuãs
 
OBJ_pkcs9
,9L

	)

725 
	#SN_ext_ªq
 "extReq"

	)

726 
	#LN_ext_ªq
 "Exãnsi⁄ Reque°"

	)

727 
	#NID_ext_ªq
 172

	)

728 
	#OBJ_ext_ªq
 
OBJ_pkcs9
,14L

	)

730 
	#SN_SMIMEC≠abûôõs
 "SMIME-CAPS"

	)

731 
	#LN_SMIMEC≠abûôõs
 "S/MIME C≠abûôõs"

	)

732 
	#NID_SMIMEC≠abûôõs
 167

	)

733 
	#OBJ_SMIMEC≠abûôõs
 
OBJ_pkcs9
,15L

	)

735 
	#SN_SMIME
 "SMIME"

	)

736 
	#LN_SMIME
 "S/MIME"

	)

737 
	#NID_SMIME
 188

	)

738 
	#OBJ_SMIME
 
OBJ_pkcs9
,16L

	)

740 
	#SN_id_smime_mod
 "id-smime-mod"

	)

741 
	#NID_id_smime_mod
 189

	)

742 
	#OBJ_id_smime_mod
 
OBJ_SMIME
,0L

	)

744 
	#SN_id_smime_˘
 "id-smime-˘"

	)

745 
	#NID_id_smime_˘
 190

	)

746 
	#OBJ_id_smime_˘
 
OBJ_SMIME
,1L

	)

748 
	#SN_id_smime_Ø
 "id-smime-Ø"

	)

749 
	#NID_id_smime_Ø
 191

	)

750 
	#OBJ_id_smime_Ø
 
OBJ_SMIME
,2L

	)

752 
	#SN_id_smime_Æg
 "id-smime-Æg"

	)

753 
	#NID_id_smime_Æg
 192

	)

754 
	#OBJ_id_smime_Æg
 
OBJ_SMIME
,3L

	)

756 
	#SN_id_smime_cd
 "id-smime-cd"

	)

757 
	#NID_id_smime_cd
 193

	)

758 
	#OBJ_id_smime_cd
 
OBJ_SMIME
,4L

	)

760 
	#SN_id_smime_•q
 "id-smime-•q"

	)

761 
	#NID_id_smime_•q
 194

	)

762 
	#OBJ_id_smime_•q
 
OBJ_SMIME
,5L

	)

764 
	#SN_id_smime_˘i
 "id-smime-˘i"

	)

765 
	#NID_id_smime_˘i
 195

	)

766 
	#OBJ_id_smime_˘i
 
OBJ_SMIME
,6L

	)

768 
	#SN_id_smime_mod_cms
 "id-smime-mod-cms"

	)

769 
	#NID_id_smime_mod_cms
 196

	)

770 
	#OBJ_id_smime_mod_cms
 
OBJ_id_smime_mod
,1L

	)

772 
	#SN_id_smime_mod_ess
 "id-smime-mod-ess"

	)

773 
	#NID_id_smime_mod_ess
 197

	)

774 
	#OBJ_id_smime_mod_ess
 
OBJ_id_smime_mod
,2L

	)

776 
	#SN_id_smime_mod_oid
 "id-smime-mod-oid"

	)

777 
	#NID_id_smime_mod_oid
 198

	)

778 
	#OBJ_id_smime_mod_oid
 
OBJ_id_smime_mod
,3L

	)

780 
	#SN_id_smime_mod_msg_v3
 "id-smime-mod-msg-v3"

	)

781 
	#NID_id_smime_mod_msg_v3
 199

	)

782 
	#OBJ_id_smime_mod_msg_v3
 
OBJ_id_smime_mod
,4L

	)

784 
	#SN_id_smime_mod_ës_eSig«tuª_88
 "id-smime-mod-ës-eSig«tuª-88"

	)

785 
	#NID_id_smime_mod_ës_eSig«tuª_88
 200

	)

786 
	#OBJ_id_smime_mod_ës_eSig«tuª_88
 
OBJ_id_smime_mod
,5L

	)

788 
	#SN_id_smime_mod_ës_eSig«tuª_97
 "id-smime-mod-ës-eSig«tuª-97"

	)

789 
	#NID_id_smime_mod_ës_eSig«tuª_97
 201

	)

790 
	#OBJ_id_smime_mod_ës_eSig«tuª_97
 
OBJ_id_smime_mod
,6L

	)

792 
	#SN_id_smime_mod_ës_eSigPﬁicy_88
 "id-smime-mod-ës-eSigPﬁicy-88"

	)

793 
	#NID_id_smime_mod_ës_eSigPﬁicy_88
 202

	)

794 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_88
 
OBJ_id_smime_mod
,7L

	)

796 
	#SN_id_smime_mod_ës_eSigPﬁicy_97
 "id-smime-mod-ës-eSigPﬁicy-97"

	)

797 
	#NID_id_smime_mod_ës_eSigPﬁicy_97
 203

	)

798 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_97
 
OBJ_id_smime_mod
,8L

	)

800 
	#SN_id_smime_˘_ª˚ùt
 "id-smime-˘-ª˚ùt"

	)

801 
	#NID_id_smime_˘_ª˚ùt
 204

	)

802 
	#OBJ_id_smime_˘_ª˚ùt
 
OBJ_id_smime_˘
,1L

	)

804 
	#SN_id_smime_˘_authD©a
 "id-smime-˘-authD©a"

	)

805 
	#NID_id_smime_˘_authD©a
 205

	)

806 
	#OBJ_id_smime_˘_authD©a
 
OBJ_id_smime_˘
,2L

	)

808 
	#SN_id_smime_˘_publishCît
 "id-smime-˘-publishCît"

	)

809 
	#NID_id_smime_˘_publishCît
 206

	)

810 
	#OBJ_id_smime_˘_publishCît
 
OBJ_id_smime_˘
,3L

	)

812 
	#SN_id_smime_˘_TSTInfo
 "id-smime-˘-TSTInfo"

	)

813 
	#NID_id_smime_˘_TSTInfo
 207

	)

814 
	#OBJ_id_smime_˘_TSTInfo
 
OBJ_id_smime_˘
,4L

	)

816 
	#SN_id_smime_˘_TDTInfo
 "id-smime-˘-TDTInfo"

	)

817 
	#NID_id_smime_˘_TDTInfo
 208

	)

818 
	#OBJ_id_smime_˘_TDTInfo
 
OBJ_id_smime_˘
,5L

	)

820 
	#SN_id_smime_˘_c⁄ã¡Info
 "id-smime-˘-c⁄ã¡Info"

	)

821 
	#NID_id_smime_˘_c⁄ã¡Info
 209

	)

822 
	#OBJ_id_smime_˘_c⁄ã¡Info
 
OBJ_id_smime_˘
,6L

	)

824 
	#SN_id_smime_˘_DVCSReque°D©a
 "id-smime-˘-DVCSReque°D©a"

	)

825 
	#NID_id_smime_˘_DVCSReque°D©a
 210

	)

826 
	#OBJ_id_smime_˘_DVCSReque°D©a
 
OBJ_id_smime_˘
,7L

	)

828 
	#SN_id_smime_˘_DVCSRe•⁄£D©a
 "id-smime-˘-DVCSRe•⁄£D©a"

	)

829 
	#NID_id_smime_˘_DVCSRe•⁄£D©a
 211

	)

830 
	#OBJ_id_smime_˘_DVCSRe•⁄£D©a
 
OBJ_id_smime_˘
,8L

	)

832 
	#SN_id_smime_˘_com¥es£dD©a
 "id-smime-˘-com¥es£dD©a"

	)

833 
	#NID_id_smime_˘_com¥es£dD©a
 786

	)

834 
	#OBJ_id_smime_˘_com¥es£dD©a
 
OBJ_id_smime_˘
,9L

	)

836 
	#SN_id_˘_asciiTextWôhCRLF
 "id-˘-asciiTextWôhCRLF"

	)

837 
	#NID_id_˘_asciiTextWôhCRLF
 787

	)

838 
	#OBJ_id_˘_asciiTextWôhCRLF
 
OBJ_id_smime_˘
,27L

	)

840 
	#SN_id_smime_Ø_ª˚ùtReque°
 "id-smime-Ø-ª˚ùtReque°"

	)

841 
	#NID_id_smime_Ø_ª˚ùtReque°
 212

	)

842 
	#OBJ_id_smime_Ø_ª˚ùtReque°
 
OBJ_id_smime_Ø
,1L

	)

844 
	#SN_id_smime_Ø_£curôyLabñ
 "id-smime-Ø-£curôyLabñ"

	)

845 
	#NID_id_smime_Ø_£curôyLabñ
 213

	)

846 
	#OBJ_id_smime_Ø_£curôyLabñ
 
OBJ_id_smime_Ø
,2L

	)

848 
	#SN_id_smime_Ø_mlEx∑ndHi°‹y
 "id-smime-Ø-mlEx∑ndHi°‹y"

	)

849 
	#NID_id_smime_Ø_mlEx∑ndHi°‹y
 214

	)

850 
	#OBJ_id_smime_Ø_mlEx∑ndHi°‹y
 
OBJ_id_smime_Ø
,3L

	)

852 
	#SN_id_smime_Ø_c⁄ã¡Höt
 "id-smime-Ø-c⁄ã¡Höt"

	)

853 
	#NID_id_smime_Ø_c⁄ã¡Höt
 215

	)

854 
	#OBJ_id_smime_Ø_c⁄ã¡Höt
 
OBJ_id_smime_Ø
,4L

	)

856 
	#SN_id_smime_Ø_msgSigDige°
 "id-smime-Ø-msgSigDige°"

	)

857 
	#NID_id_smime_Ø_msgSigDige°
 216

	)

858 
	#OBJ_id_smime_Ø_msgSigDige°
 
OBJ_id_smime_Ø
,5L

	)

860 
	#SN_id_smime_Ø_íˇpC⁄ã¡Ty≥
 "id-smime-Ø-íˇpC⁄ã¡Ty≥"

	)

861 
	#NID_id_smime_Ø_íˇpC⁄ã¡Ty≥
 217

	)

862 
	#OBJ_id_smime_Ø_íˇpC⁄ã¡Ty≥
 
OBJ_id_smime_Ø
,6L

	)

864 
	#SN_id_smime_Ø_c⁄ã¡Idítifõr
 "id-smime-Ø-c⁄ã¡Idítifõr"

	)

865 
	#NID_id_smime_Ø_c⁄ã¡Idítifõr
 218

	)

866 
	#OBJ_id_smime_Ø_c⁄ã¡Idítifõr
 
OBJ_id_smime_Ø
,7L

	)

868 
	#SN_id_smime_Ø_macVÆue
 "id-smime-Ø-macVÆue"

	)

869 
	#NID_id_smime_Ø_macVÆue
 219

	)

870 
	#OBJ_id_smime_Ø_macVÆue
 
OBJ_id_smime_Ø
,8L

	)

872 
	#SN_id_smime_Ø_equivÆítLabñs
 "id-smime-Ø-equivÆítLabñs"

	)

873 
	#NID_id_smime_Ø_equivÆítLabñs
 220

	)

874 
	#OBJ_id_smime_Ø_equivÆítLabñs
 
OBJ_id_smime_Ø
,9L

	)

876 
	#SN_id_smime_Ø_c⁄ã¡Re„ªn˚
 "id-smime-Ø-c⁄ã¡Re„ªn˚"

	)

877 
	#NID_id_smime_Ø_c⁄ã¡Re„ªn˚
 221

	)

878 
	#OBJ_id_smime_Ø_c⁄ã¡Re„ªn˚
 
OBJ_id_smime_Ø
,10L

	)

880 
	#SN_id_smime_Ø_í¸ypKeyPªf
 "id-smime-Ø-í¸ypKeyPªf"

	)

881 
	#NID_id_smime_Ø_í¸ypKeyPªf
 222

	)

882 
	#OBJ_id_smime_Ø_í¸ypKeyPªf
 
OBJ_id_smime_Ø
,11L

	)

884 
	#SN_id_smime_Ø_signögCîtifiˇã
 "id-smime-Ø-signögCîtifiˇã"

	)

885 
	#NID_id_smime_Ø_signögCîtifiˇã
 223

	)

886 
	#OBJ_id_smime_Ø_signögCîtifiˇã
 
OBJ_id_smime_Ø
,12L

	)

888 
	#SN_id_smime_Ø_smimeEn¸y±Cîts
 "id-smime-Ø-smimeEn¸y±Cîts"

	)

889 
	#NID_id_smime_Ø_smimeEn¸y±Cîts
 224

	)

890 
	#OBJ_id_smime_Ø_smimeEn¸y±Cîts
 
OBJ_id_smime_Ø
,13L

	)

892 
	#SN_id_smime_Ø_timeSèmpTokí
 "id-smime-Ø-timeSèmpTokí"

	)

893 
	#NID_id_smime_Ø_timeSèmpTokí
 225

	)

894 
	#OBJ_id_smime_Ø_timeSèmpTokí
 
OBJ_id_smime_Ø
,14L

	)

896 
	#SN_id_smime_Ø_ës_sigPﬁicyId
 "id-smime-Ø-ës-sigPﬁicyId"

	)

897 
	#NID_id_smime_Ø_ës_sigPﬁicyId
 226

	)

898 
	#OBJ_id_smime_Ø_ës_sigPﬁicyId
 
OBJ_id_smime_Ø
,15L

	)

900 
	#SN_id_smime_Ø_ës_commômítTy≥
 "id-smime-Ø-ës-commômítTy≥"

	)

901 
	#NID_id_smime_Ø_ës_commômítTy≥
 227

	)

902 
	#OBJ_id_smime_Ø_ës_commômítTy≥
 
OBJ_id_smime_Ø
,16L

	)

904 
	#SN_id_smime_Ø_ës_sig√rLoˇti⁄
 "id-smime-Ø-ës-sig√rLoˇti⁄"

	)

905 
	#NID_id_smime_Ø_ës_sig√rLoˇti⁄
 228

	)

906 
	#OBJ_id_smime_Ø_ës_sig√rLoˇti⁄
 
OBJ_id_smime_Ø
,17L

	)

908 
	#SN_id_smime_Ø_ës_sig√rAâr
 "id-smime-Ø-ës-sig√rAâr"

	)

909 
	#NID_id_smime_Ø_ës_sig√rAâr
 229

	)

910 
	#OBJ_id_smime_Ø_ës_sig√rAâr
 
OBJ_id_smime_Ø
,18L

	)

912 
	#SN_id_smime_Ø_ës_ŸhîSigCît
 "id-smime-Ø-ës-ŸhîSigCît"

	)

913 
	#NID_id_smime_Ø_ës_ŸhîSigCît
 230

	)

914 
	#OBJ_id_smime_Ø_ës_ŸhîSigCît
 
OBJ_id_smime_Ø
,19L

	)

916 
	#SN_id_smime_Ø_ës_c⁄ã¡Time°amp
 "id-smime-Ø-ës-c⁄ã¡Time°amp"

	)

917 
	#NID_id_smime_Ø_ës_c⁄ã¡Time°amp
 231

	)

918 
	#OBJ_id_smime_Ø_ës_c⁄ã¡Time°amp
 
OBJ_id_smime_Ø
,20L

	)

920 
	#SN_id_smime_Ø_ës_CîtifiˇãRefs
 "id-smime-Ø-ës-CîtifiˇãRefs"

	)

921 
	#NID_id_smime_Ø_ës_CîtifiˇãRefs
 232

	)

922 
	#OBJ_id_smime_Ø_ës_CîtifiˇãRefs
 
OBJ_id_smime_Ø
,21L

	)

924 
	#SN_id_smime_Ø_ës_Revoˇti⁄Refs
 "id-smime-Ø-ës-Revoˇti⁄Refs"

	)

925 
	#NID_id_smime_Ø_ës_Revoˇti⁄Refs
 233

	)

926 
	#OBJ_id_smime_Ø_ës_Revoˇti⁄Refs
 
OBJ_id_smime_Ø
,22L

	)

928 
	#SN_id_smime_Ø_ës_˚πVÆues
 "id-smime-Ø-ës-˚πVÆues"

	)

929 
	#NID_id_smime_Ø_ës_˚πVÆues
 234

	)

930 
	#OBJ_id_smime_Ø_ës_˚πVÆues
 
OBJ_id_smime_Ø
,23L

	)

932 
	#SN_id_smime_Ø_ës_ªvoˇti⁄VÆues
 "id-smime-Ø-ës-ªvoˇti⁄VÆues"

	)

933 
	#NID_id_smime_Ø_ës_ªvoˇti⁄VÆues
 235

	)

934 
	#OBJ_id_smime_Ø_ës_ªvoˇti⁄VÆues
 
OBJ_id_smime_Ø
,24L

	)

936 
	#SN_id_smime_Ø_ës_escTimeSèmp
 "id-smime-Ø-ës-escTimeSèmp"

	)

937 
	#NID_id_smime_Ø_ës_escTimeSèmp
 236

	)

938 
	#OBJ_id_smime_Ø_ës_escTimeSèmp
 
OBJ_id_smime_Ø
,25L

	)

940 
	#SN_id_smime_Ø_ës_˚πCRLTime°amp
 "id-smime-Ø-ës-˚πCRLTime°amp"

	)

941 
	#NID_id_smime_Ø_ës_˚πCRLTime°amp
 237

	)

942 
	#OBJ_id_smime_Ø_ës_˚πCRLTime°amp
 
OBJ_id_smime_Ø
,26L

	)

944 
	#SN_id_smime_Ø_ës_¨chiveTimeSèmp
 "id-smime-Ø-ës-¨chiveTimeSèmp"

	)

945 
	#NID_id_smime_Ø_ës_¨chiveTimeSèmp
 238

	)

946 
	#OBJ_id_smime_Ø_ës_¨chiveTimeSèmp
 
OBJ_id_smime_Ø
,27L

	)

948 
	#SN_id_smime_Ø_sig«tuªTy≥
 "id-smime-Ø-sig«tuªTy≥"

	)

949 
	#NID_id_smime_Ø_sig«tuªTy≥
 239

	)

950 
	#OBJ_id_smime_Ø_sig«tuªTy≥
 
OBJ_id_smime_Ø
,28L

	)

952 
	#SN_id_smime_Ø_dvcs_dvc
 "id-smime-Ø-dvcs-dvc"

	)

953 
	#NID_id_smime_Ø_dvcs_dvc
 240

	)

954 
	#OBJ_id_smime_Ø_dvcs_dvc
 
OBJ_id_smime_Ø
,29L

	)

956 
	#SN_id_smime_Æg_ESDHwôh3DES
 "id-smime-Æg-ESDHwôh3DES"

	)

957 
	#NID_id_smime_Æg_ESDHwôh3DES
 241

	)

958 
	#OBJ_id_smime_Æg_ESDHwôh3DES
 
OBJ_id_smime_Æg
,1L

	)

960 
	#SN_id_smime_Æg_ESDHwôhRC2
 "id-smime-Æg-ESDHwôhRC2"

	)

961 
	#NID_id_smime_Æg_ESDHwôhRC2
 242

	)

962 
	#OBJ_id_smime_Æg_ESDHwôhRC2
 
OBJ_id_smime_Æg
,2L

	)

964 
	#SN_id_smime_Æg_3DESwøp
 "id-smime-Æg-3DESwøp"

	)

965 
	#NID_id_smime_Æg_3DESwøp
 243

	)

966 
	#OBJ_id_smime_Æg_3DESwøp
 
OBJ_id_smime_Æg
,3L

	)

968 
	#SN_id_smime_Æg_RC2wøp
 "id-smime-Æg-RC2wøp"

	)

969 
	#NID_id_smime_Æg_RC2wøp
 244

	)

970 
	#OBJ_id_smime_Æg_RC2wøp
 
OBJ_id_smime_Æg
,4L

	)

972 
	#SN_id_smime_Æg_ESDH
 "id-smime-Æg-ESDH"

	)

973 
	#NID_id_smime_Æg_ESDH
 245

	)

974 
	#OBJ_id_smime_Æg_ESDH
 
OBJ_id_smime_Æg
,5L

	)

976 
	#SN_id_smime_Æg_CMS3DESwøp
 "id-smime-Æg-CMS3DESwøp"

	)

977 
	#NID_id_smime_Æg_CMS3DESwøp
 246

	)

978 
	#OBJ_id_smime_Æg_CMS3DESwøp
 
OBJ_id_smime_Æg
,6L

	)

980 
	#SN_id_smime_Æg_CMSRC2wøp
 "id-smime-Æg-CMSRC2wøp"

	)

981 
	#NID_id_smime_Æg_CMSRC2wøp
 247

	)

982 
	#OBJ_id_smime_Æg_CMSRC2wøp
 
OBJ_id_smime_Æg
,7L

	)

984 
	#SN_id_smime_cd_ld≠
 "id-smime-cd-ld≠"

	)

985 
	#NID_id_smime_cd_ld≠
 248

	)

986 
	#OBJ_id_smime_cd_ld≠
 
OBJ_id_smime_cd
,1L

	)

988 
	#SN_id_smime_•q_ës_sqt_uri
 "id-smime-•q-ës-sqt-uri"

	)

989 
	#NID_id_smime_•q_ës_sqt_uri
 249

	)

990 
	#OBJ_id_smime_•q_ës_sqt_uri
 
OBJ_id_smime_•q
,1L

	)

992 
	#SN_id_smime_•q_ës_sqt_unŸi˚
 "id-smime-•q-ës-sqt-unŸi˚"

	)

993 
	#NID_id_smime_•q_ës_sqt_unŸi˚
 250

	)

994 
	#OBJ_id_smime_•q_ës_sqt_unŸi˚
 
OBJ_id_smime_•q
,2L

	)

996 
	#SN_id_smime_˘i_ës_¥oofOfOrigö
 "id-smime-˘i-ës-¥oofOfOrigö"

	)

997 
	#NID_id_smime_˘i_ës_¥oofOfOrigö
 251

	)

998 
	#OBJ_id_smime_˘i_ës_¥oofOfOrigö
 
OBJ_id_smime_˘i
,1L

	)

1000 
	#SN_id_smime_˘i_ës_¥oofOfRe˚ùt
 "id-smime-˘i-ës-¥oofOfRe˚ùt"

	)

1001 
	#NID_id_smime_˘i_ës_¥oofOfRe˚ùt
 252

	)

1002 
	#OBJ_id_smime_˘i_ës_¥oofOfRe˚ùt
 
OBJ_id_smime_˘i
,2L

	)

1004 
	#SN_id_smime_˘i_ës_¥oofOfDñivîy
 "id-smime-˘i-ës-¥oofOfDñivîy"

	)

1005 
	#NID_id_smime_˘i_ës_¥oofOfDñivîy
 253

	)

1006 
	#OBJ_id_smime_˘i_ës_¥oofOfDñivîy
 
OBJ_id_smime_˘i
,3L

	)

1008 
	#SN_id_smime_˘i_ës_¥oofOfSídî
 "id-smime-˘i-ës-¥oofOfSídî"

	)

1009 
	#NID_id_smime_˘i_ës_¥oofOfSídî
 254

	)

1010 
	#OBJ_id_smime_˘i_ës_¥oofOfSídî
 
OBJ_id_smime_˘i
,4L

	)

1012 
	#SN_id_smime_˘i_ës_¥oofOfAµrovÆ
 "id-smime-˘i-ës-¥oofOfAµrovÆ"

	)

1013 
	#NID_id_smime_˘i_ës_¥oofOfAµrovÆ
 255

	)

1014 
	#OBJ_id_smime_˘i_ës_¥oofOfAµrovÆ
 
OBJ_id_smime_˘i
,5L

	)

1016 
	#SN_id_smime_˘i_ës_¥oofOfCª©i⁄
 "id-smime-˘i-ës-¥oofOfCª©i⁄"

	)

1017 
	#NID_id_smime_˘i_ës_¥oofOfCª©i⁄
 256

	)

1018 
	#OBJ_id_smime_˘i_ës_¥oofOfCª©i⁄
 
OBJ_id_smime_˘i
,6L

	)

1020 
	#LN_‰õndlyName
 "‰õndlyName"

	)

1021 
	#NID_‰õndlyName
 156

	)

1022 
	#OBJ_‰õndlyName
 
OBJ_pkcs9
,20L

	)

1024 
	#LN_loˇlKeyID
 "loˇlKeyID"

	)

1025 
	#NID_loˇlKeyID
 157

	)

1026 
	#OBJ_loˇlKeyID
 
OBJ_pkcs9
,21L

	)

1028 
	#SN_ms_c•_«me
 "CSPName"

	)

1029 
	#LN_ms_c•_«me
 "Mi¸oso· CSP Name"

	)

1030 
	#NID_ms_c•_«me
 417

	)

1031 
	#OBJ_ms_c•_«me
 1L,3L,6L,1L,4L,1L,311L,17L,1L

	)

1033 
	#SN_LoˇlKeySë
 "LoˇlKeySë"

	)

1034 
	#LN_LoˇlKeySë
 "Mi¸oso· Loˇ»Key së"

	)

1035 
	#NID_LoˇlKeySë
 856

	)

1036 
	#OBJ_LoˇlKeySë
 1L,3L,6L,1L,4L,1L,311L,17L,2L

	)

1038 
	#OBJ_˚πTy≥s
 
OBJ_pkcs9
,22L

	)

1040 
	#LN_x509Cîtifiˇã
 "x509Cîtifiˇã"

	)

1041 
	#NID_x509Cîtifiˇã
 158

	)

1042 
	#OBJ_x509Cîtifiˇã
 
OBJ_˚πTy≥s
,1L

	)

1044 
	#LN_sdsiCîtifiˇã
 "sdsiCîtifiˇã"

	)

1045 
	#NID_sdsiCîtifiˇã
 159

	)

1046 
	#OBJ_sdsiCîtifiˇã
 
OBJ_˚πTy≥s
,2L

	)

1048 
	#OBJ_¸lTy≥s
 
OBJ_pkcs9
,23L

	)

1050 
	#LN_x509Cæ
 "x509Cæ"

	)

1051 
	#NID_x509Cæ
 160

	)

1052 
	#OBJ_x509Cæ
 
OBJ_¸lTy≥s
,1L

	)

1054 
	#OBJ_pkcs12
 
OBJ_pkcs
,12L

	)

1056 
	#OBJ_pkcs12_pbeids
 
OBJ_pkcs12
,1L

	)

1058 
	#SN_pbe_WôhSHA1And128BôRC4
 "PBE-SHA1-RC4-128"

	)

1059 
	#LN_pbe_WôhSHA1And128BôRC4
 "pbeWôhSHA1And128BôRC4"

	)

1060 
	#NID_pbe_WôhSHA1And128BôRC4
 144

	)

1061 
	#OBJ_pbe_WôhSHA1And128BôRC4
 
OBJ_pkcs12_pbeids
,1L

	)

1063 
	#SN_pbe_WôhSHA1And40BôRC4
 "PBE-SHA1-RC4-40"

	)

1064 
	#LN_pbe_WôhSHA1And40BôRC4
 "pbeWôhSHA1And40BôRC4"

	)

1065 
	#NID_pbe_WôhSHA1And40BôRC4
 145

	)

1066 
	#OBJ_pbe_WôhSHA1And40BôRC4
 
OBJ_pkcs12_pbeids
,2L

	)

1068 
	#SN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "PBE-SHA1-3DES"

	)

1069 
	#LN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "pbeWôhSHA1And3-KeyTrùÀDES-CBC"

	)

1070 
	#NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 146

	)

1071 
	#OBJ_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,3L

	)

1073 
	#SN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "PBE-SHA1-2DES"

	)

1074 
	#LN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "pbeWôhSHA1And2-KeyTrùÀDES-CBC"

	)

1075 
	#NID_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 147

	)

1076 
	#OBJ_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,4L

	)

1078 
	#SN_pbe_WôhSHA1And128BôRC2_CBC
 "PBE-SHA1-RC2-128"

	)

1079 
	#LN_pbe_WôhSHA1And128BôRC2_CBC
 "pbeWôhSHA1And128BôRC2-CBC"

	)

1080 
	#NID_pbe_WôhSHA1And128BôRC2_CBC
 148

	)

1081 
	#OBJ_pbe_WôhSHA1And128BôRC2_CBC
 
OBJ_pkcs12_pbeids
,5L

	)

1083 
	#SN_pbe_WôhSHA1And40BôRC2_CBC
 "PBE-SHA1-RC2-40"

	)

1084 
	#LN_pbe_WôhSHA1And40BôRC2_CBC
 "pbeWôhSHA1And40BôRC2-CBC"

	)

1085 
	#NID_pbe_WôhSHA1And40BôRC2_CBC
 149

	)

1086 
	#OBJ_pbe_WôhSHA1And40BôRC2_CBC
 
OBJ_pkcs12_pbeids
,6L

	)

1088 
	#OBJ_pkcs12_Vîsi⁄1
 
OBJ_pkcs12
,10L

	)

1090 
	#OBJ_pkcs12_BagIds
 
OBJ_pkcs12_Vîsi⁄1
,1L

	)

1092 
	#LN_keyBag
 "keyBag"

	)

1093 
	#NID_keyBag
 150

	)

1094 
	#OBJ_keyBag
 
OBJ_pkcs12_BagIds
,1L

	)

1096 
	#LN_pkcs8ShroudedKeyBag
 "pkcs8ShroudedKeyBag"

	)

1097 
	#NID_pkcs8ShroudedKeyBag
 151

	)

1098 
	#OBJ_pkcs8ShroudedKeyBag
 
OBJ_pkcs12_BagIds
,2L

	)

1100 
	#LN_˚πBag
 "˚πBag"

	)

1101 
	#NID_˚πBag
 152

	)

1102 
	#OBJ_˚πBag
 
OBJ_pkcs12_BagIds
,3L

	)

1104 
	#LN_¸lBag
 "¸lBag"

	)

1105 
	#NID_¸lBag
 153

	)

1106 
	#OBJ_¸lBag
 
OBJ_pkcs12_BagIds
,4L

	)

1108 
	#LN_£¸ëBag
 "£¸ëBag"

	)

1109 
	#NID_£¸ëBag
 154

	)

1110 
	#OBJ_£¸ëBag
 
OBJ_pkcs12_BagIds
,5L

	)

1112 
	#LN_ß„C⁄ã¡sBag
 "ß„C⁄ã¡sBag"

	)

1113 
	#NID_ß„C⁄ã¡sBag
 155

	)

1114 
	#OBJ_ß„C⁄ã¡sBag
 
OBJ_pkcs12_BagIds
,6L

	)

1116 
	#SN_md2
 "MD2"

	)

1117 
	#LN_md2
 "md2"

	)

1118 
	#NID_md2
 3

	)

1119 
	#OBJ_md2
 
OBJ_rßdsi
,2L,2L

	)

1121 
	#SN_md4
 "MD4"

	)

1122 
	#LN_md4
 "md4"

	)

1123 
	#NID_md4
 257

	)

1124 
	#OBJ_md4
 
OBJ_rßdsi
,2L,4L

	)

1126 
	#SN_md5
 "MD5"

	)

1127 
	#LN_md5
 "md5"

	)

1128 
	#NID_md5
 4

	)

1129 
	#OBJ_md5
 
OBJ_rßdsi
,2L,5L

	)

1131 
	#SN_md5_sha1
 "MD5-SHA1"

	)

1132 
	#LN_md5_sha1
 "md5-sha1"

	)

1133 
	#NID_md5_sha1
 114

	)

1135 
	#LN_hmacWôhMD5
 "hmacWôhMD5"

	)

1136 
	#NID_hmacWôhMD5
 797

	)

1137 
	#OBJ_hmacWôhMD5
 
OBJ_rßdsi
,2L,6L

	)

1139 
	#LN_hmacWôhSHA1
 "hmacWôhSHA1"

	)

1140 
	#NID_hmacWôhSHA1
 163

	)

1141 
	#OBJ_hmacWôhSHA1
 
OBJ_rßdsi
,2L,7L

	)

1143 
	#LN_hmacWôhSHA224
 "hmacWôhSHA224"

	)

1144 
	#NID_hmacWôhSHA224
 798

	)

1145 
	#OBJ_hmacWôhSHA224
 
OBJ_rßdsi
,2L,8L

	)

1147 
	#LN_hmacWôhSHA256
 "hmacWôhSHA256"

	)

1148 
	#NID_hmacWôhSHA256
 799

	)

1149 
	#OBJ_hmacWôhSHA256
 
OBJ_rßdsi
,2L,9L

	)

1151 
	#LN_hmacWôhSHA384
 "hmacWôhSHA384"

	)

1152 
	#NID_hmacWôhSHA384
 800

	)

1153 
	#OBJ_hmacWôhSHA384
 
OBJ_rßdsi
,2L,10L

	)

1155 
	#LN_hmacWôhSHA512
 "hmacWôhSHA512"

	)

1156 
	#NID_hmacWôhSHA512
 801

	)

1157 
	#OBJ_hmacWôhSHA512
 
OBJ_rßdsi
,2L,11L

	)

1159 
	#SN_rc2_cbc
 "RC2-CBC"

	)

1160 
	#LN_rc2_cbc
 "rc2-cbc"

	)

1161 
	#NID_rc2_cbc
 37

	)

1162 
	#OBJ_rc2_cbc
 
OBJ_rßdsi
,3L,2L

	)

1164 
	#SN_rc2_ecb
 "RC2-ECB"

	)

1165 
	#LN_rc2_ecb
 "rc2-ecb"

	)

1166 
	#NID_rc2_ecb
 38

	)

1168 
	#SN_rc2_cfb64
 "RC2-CFB"

	)

1169 
	#LN_rc2_cfb64
 "rc2-cfb"

	)

1170 
	#NID_rc2_cfb64
 39

	)

1172 
	#SN_rc2_ofb64
 "RC2-OFB"

	)

1173 
	#LN_rc2_ofb64
 "rc2-ofb"

	)

1174 
	#NID_rc2_ofb64
 40

	)

1176 
	#SN_rc2_40_cbc
 "RC2-40-CBC"

	)

1177 
	#LN_rc2_40_cbc
 "rc2-40-cbc"

	)

1178 
	#NID_rc2_40_cbc
 98

	)

1180 
	#SN_rc2_64_cbc
 "RC2-64-CBC"

	)

1181 
	#LN_rc2_64_cbc
 "rc2-64-cbc"

	)

1182 
	#NID_rc2_64_cbc
 166

	)

1184 
	#SN_rc4
 "RC4"

	)

1185 
	#LN_rc4
 "rc4"

	)

1186 
	#NID_rc4
 5

	)

1187 
	#OBJ_rc4
 
OBJ_rßdsi
,3L,4L

	)

1189 
	#SN_rc4_40
 "RC4-40"

	)

1190 
	#LN_rc4_40
 "rc4-40"

	)

1191 
	#NID_rc4_40
 97

	)

1193 
	#SN_des_ede3_cbc
 "DES-EDE3-CBC"

	)

1194 
	#LN_des_ede3_cbc
 "des-ede3-cbc"

	)

1195 
	#NID_des_ede3_cbc
 44

	)

1196 
	#OBJ_des_ede3_cbc
 
OBJ_rßdsi
,3L,7L

	)

1198 
	#SN_rc5_cbc
 "RC5-CBC"

	)

1199 
	#LN_rc5_cbc
 "rc5-cbc"

	)

1200 
	#NID_rc5_cbc
 120

	)

1201 
	#OBJ_rc5_cbc
 
OBJ_rßdsi
,3L,8L

	)

1203 
	#SN_rc5_ecb
 "RC5-ECB"

	)

1204 
	#LN_rc5_ecb
 "rc5-ecb"

	)

1205 
	#NID_rc5_ecb
 121

	)

1207 
	#SN_rc5_cfb64
 "RC5-CFB"

	)

1208 
	#LN_rc5_cfb64
 "rc5-cfb"

	)

1209 
	#NID_rc5_cfb64
 122

	)

1211 
	#SN_rc5_ofb64
 "RC5-OFB"

	)

1212 
	#LN_rc5_ofb64
 "rc5-ofb"

	)

1213 
	#NID_rc5_ofb64
 123

	)

1215 
	#SN_ms_ext_ªq
 "msExtReq"

	)

1216 
	#LN_ms_ext_ªq
 "Mi¸oso· Exãnsi⁄ Reque°"

	)

1217 
	#NID_ms_ext_ªq
 171

	)

1218 
	#OBJ_ms_ext_ªq
 1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

	)

1220 
	#SN_ms_code_öd
 "msCodeInd"

	)

1221 
	#LN_ms_code_öd
 "Mi¸oso· IndividuÆ CodêSignög"

	)

1222 
	#NID_ms_code_öd
 134

	)

1223 
	#OBJ_ms_code_öd
 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

	)

1225 
	#SN_ms_code_com
 "msCodeCom"

	)

1226 
	#LN_ms_code_com
 "Mi¸oso· Commîcü»CodêSignög"

	)

1227 
	#NID_ms_code_com
 135

	)

1228 
	#OBJ_ms_code_com
 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

	)

1230 
	#SN_ms_˘l_sign
 "msCTLSign"

	)

1231 
	#LN_ms_˘l_sign
 "Mi¸oso· Tru° Li° Signög"

	)

1232 
	#NID_ms_˘l_sign
 136

	)

1233 
	#OBJ_ms_˘l_sign
 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

	)

1235 
	#SN_ms_sgc
 "msSGC"

	)

1236 
	#LN_ms_sgc
 "Mi¸oso· Sîvî G©ed Cry±o"

	)

1237 
	#NID_ms_sgc
 137

	)

1238 
	#OBJ_ms_sgc
 1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

	)

1240 
	#SN_ms_efs
 "msEFS"

	)

1241 
	#LN_ms_efs
 "Mi¸oso· En¸y±ed FûêSy°em"

	)

1242 
	#NID_ms_efs
 138

	)

1243 
	#OBJ_ms_efs
 1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

	)

1245 
	#SN_ms_sm¨tˇrd_logö
 "msSm¨tˇrdLogö"

	)

1246 
	#LN_ms_sm¨tˇrd_logö
 "Mi¸oso· Sm¨tˇrdlogö"

	)

1247 
	#NID_ms_sm¨tˇrd_logö
 648

	)

1248 
	#OBJ_ms_sm¨tˇrd_logö
 1L,3L,6L,1L,4L,1L,311L,20L,2L,2L

	)

1250 
	#SN_ms_u≤
 "msUPN"

	)

1251 
	#LN_ms_u≤
 "Mi¸oso· Univîß»PröcùÆ Name"

	)

1252 
	#NID_ms_u≤
 649

	)

1253 
	#OBJ_ms_u≤
 1L,3L,6L,1L,4L,1L,311L,20L,2L,3L

	)

1255 
	#SN_idó_cbc
 "IDEA-CBC"

	)

1256 
	#LN_idó_cbc
 "idó-cbc"

	)

1257 
	#NID_idó_cbc
 34

	)

1258 
	#OBJ_idó_cbc
 1L,3L,6L,1L,4L,1L,188L,7L,1L,1L,2L

	)

1260 
	#SN_idó_ecb
 "IDEA-ECB"

	)

1261 
	#LN_idó_ecb
 "idó-ecb"

	)

1262 
	#NID_idó_ecb
 36

	)

1264 
	#SN_idó_cfb64
 "IDEA-CFB"

	)

1265 
	#LN_idó_cfb64
 "idó-cfb"

	)

1266 
	#NID_idó_cfb64
 35

	)

1268 
	#SN_idó_ofb64
 "IDEA-OFB"

	)

1269 
	#LN_idó_ofb64
 "idó-ofb"

	)

1270 
	#NID_idó_ofb64
 46

	)

1272 
	#SN_bf_cbc
 "BF-CBC"

	)

1273 
	#LN_bf_cbc
 "bf-cbc"

	)

1274 
	#NID_bf_cbc
 91

	)

1275 
	#OBJ_bf_cbc
 1L,3L,6L,1L,4L,1L,3029L,1L,2L

	)

1277 
	#SN_bf_ecb
 "BF-ECB"

	)

1278 
	#LN_bf_ecb
 "bf-ecb"

	)

1279 
	#NID_bf_ecb
 92

	)

1281 
	#SN_bf_cfb64
 "BF-CFB"

	)

1282 
	#LN_bf_cfb64
 "bf-cfb"

	)

1283 
	#NID_bf_cfb64
 93

	)

1285 
	#SN_bf_ofb64
 "BF-OFB"

	)

1286 
	#LN_bf_ofb64
 "bf-ofb"

	)

1287 
	#NID_bf_ofb64
 94

	)

1289 
	#SN_id_pkix
 "PKIX"

	)

1290 
	#NID_id_pkix
 127

	)

1291 
	#OBJ_id_pkix
 1L,3L,6L,1L,5L,5L,7L

	)

1293 
	#SN_id_pkix_mod
 "id-pkix-mod"

	)

1294 
	#NID_id_pkix_mod
 258

	)

1295 
	#OBJ_id_pkix_mod
 
OBJ_id_pkix
,0L

	)

1297 
	#SN_id_≥
 "id-≥"

	)

1298 
	#NID_id_≥
 175

	)

1299 
	#OBJ_id_≥
 
OBJ_id_pkix
,1L

	)

1301 
	#SN_id_qt
 "id-qt"

	)

1302 
	#NID_id_qt
 259

	)

1303 
	#OBJ_id_qt
 
OBJ_id_pkix
,2L

	)

1305 
	#SN_id_kp
 "id-kp"

	)

1306 
	#NID_id_kp
 128

	)

1307 
	#OBJ_id_kp
 
OBJ_id_pkix
,3L

	)

1309 
	#SN_id_ô
 "id-ô"

	)

1310 
	#NID_id_ô
 260

	)

1311 
	#OBJ_id_ô
 
OBJ_id_pkix
,4L

	)

1313 
	#SN_id_pkù
 "id-pkù"

	)

1314 
	#NID_id_pkù
 261

	)

1315 
	#OBJ_id_pkù
 
OBJ_id_pkix
,5L

	)

1317 
	#SN_id_Æg
 "id-Æg"

	)

1318 
	#NID_id_Æg
 262

	)

1319 
	#OBJ_id_Æg
 
OBJ_id_pkix
,6L

	)

1321 
	#SN_id_cmc
 "id-cmc"

	)

1322 
	#NID_id_cmc
 263

	)

1323 
	#OBJ_id_cmc
 
OBJ_id_pkix
,7L

	)

1325 
	#SN_id_⁄
 "id-⁄"

	)

1326 
	#NID_id_⁄
 264

	)

1327 
	#OBJ_id_⁄
 
OBJ_id_pkix
,8L

	)

1329 
	#SN_id_pda
 "id-pda"

	)

1330 
	#NID_id_pda
 265

	)

1331 
	#OBJ_id_pda
 
OBJ_id_pkix
,9L

	)

1333 
	#SN_id_aˇ
 "id-aˇ"

	)

1334 
	#NID_id_aˇ
 266

	)

1335 
	#OBJ_id_aˇ
 
OBJ_id_pkix
,10L

	)

1337 
	#SN_id_qcs
 "id-qcs"

	)

1338 
	#NID_id_qcs
 267

	)

1339 
	#OBJ_id_qcs
 
OBJ_id_pkix
,11L

	)

1341 
	#SN_id_c˘
 "id-c˘"

	)

1342 
	#NID_id_c˘
 268

	)

1343 
	#OBJ_id_c˘
 
OBJ_id_pkix
,12L

	)

1345 
	#SN_id_µl
 "id-µl"

	)

1346 
	#NID_id_µl
 662

	)

1347 
	#OBJ_id_µl
 
OBJ_id_pkix
,21L

	)

1349 
	#SN_id_ad
 "id-ad"

	)

1350 
	#NID_id_ad
 176

	)

1351 
	#OBJ_id_ad
 
OBJ_id_pkix
,48L

	)

1353 
	#SN_id_pkix1_ex∂icô_88
 "id-pkix1-ex∂icô-88"

	)

1354 
	#NID_id_pkix1_ex∂icô_88
 269

	)

1355 
	#OBJ_id_pkix1_ex∂icô_88
 
OBJ_id_pkix_mod
,1L

	)

1357 
	#SN_id_pkix1_im∂icô_88
 "id-pkix1-im∂icô-88"

	)

1358 
	#NID_id_pkix1_im∂icô_88
 270

	)

1359 
	#OBJ_id_pkix1_im∂icô_88
 
OBJ_id_pkix_mod
,2L

	)

1361 
	#SN_id_pkix1_ex∂icô_93
 "id-pkix1-ex∂icô-93"

	)

1362 
	#NID_id_pkix1_ex∂icô_93
 271

	)

1363 
	#OBJ_id_pkix1_ex∂icô_93
 
OBJ_id_pkix_mod
,3L

	)

1365 
	#SN_id_pkix1_im∂icô_93
 "id-pkix1-im∂icô-93"

	)

1366 
	#NID_id_pkix1_im∂icô_93
 272

	)

1367 
	#OBJ_id_pkix1_im∂icô_93
 
OBJ_id_pkix_mod
,4L

	)

1369 
	#SN_id_mod_¸mf
 "id-mod-¸mf"

	)

1370 
	#NID_id_mod_¸mf
 273

	)

1371 
	#OBJ_id_mod_¸mf
 
OBJ_id_pkix_mod
,5L

	)

1373 
	#SN_id_mod_cmc
 "id-mod-cmc"

	)

1374 
	#NID_id_mod_cmc
 274

	)

1375 
	#OBJ_id_mod_cmc
 
OBJ_id_pkix_mod
,6L

	)

1377 
	#SN_id_mod_kó_¥ofûe_88
 "id-mod-kó-¥ofûe-88"

	)

1378 
	#NID_id_mod_kó_¥ofûe_88
 275

	)

1379 
	#OBJ_id_mod_kó_¥ofûe_88
 
OBJ_id_pkix_mod
,7L

	)

1381 
	#SN_id_mod_kó_¥ofûe_93
 "id-mod-kó-¥ofûe-93"

	)

1382 
	#NID_id_mod_kó_¥ofûe_93
 276

	)

1383 
	#OBJ_id_mod_kó_¥ofûe_93
 
OBJ_id_pkix_mod
,8L

	)

1385 
	#SN_id_mod_cmp
 "id-mod-cmp"

	)

1386 
	#NID_id_mod_cmp
 277

	)

1387 
	#OBJ_id_mod_cmp
 
OBJ_id_pkix_mod
,9L

	)

1389 
	#SN_id_mod_quÆifõd_˚π_88
 "id-mod-quÆifõd-˚π-88"

	)

1390 
	#NID_id_mod_quÆifõd_˚π_88
 278

	)

1391 
	#OBJ_id_mod_quÆifõd_˚π_88
 
OBJ_id_pkix_mod
,10L

	)

1393 
	#SN_id_mod_quÆifõd_˚π_93
 "id-mod-quÆifõd-˚π-93"

	)

1394 
	#NID_id_mod_quÆifõd_˚π_93
 279

	)

1395 
	#OBJ_id_mod_quÆifõd_˚π_93
 
OBJ_id_pkix_mod
,11L

	)

1397 
	#SN_id_mod_©åibuã_˚π
 "id-mod-©åibuã-˚π"

	)

1398 
	#NID_id_mod_©åibuã_˚π
 280

	)

1399 
	#OBJ_id_mod_©åibuã_˚π
 
OBJ_id_pkix_mod
,12L

	)

1401 
	#SN_id_mod_time°amp_¥Ÿocﬁ
 "id-mod-time°amp-¥Ÿocﬁ"

	)

1402 
	#NID_id_mod_time°amp_¥Ÿocﬁ
 281

	)

1403 
	#OBJ_id_mod_time°amp_¥Ÿocﬁ
 
OBJ_id_pkix_mod
,13L

	)

1405 
	#SN_id_mod_oc•
 "id-mod-oc•"

	)

1406 
	#NID_id_mod_oc•
 282

	)

1407 
	#OBJ_id_mod_oc•
 
OBJ_id_pkix_mod
,14L

	)

1409 
	#SN_id_mod_dvcs
 "id-mod-dvcs"

	)

1410 
	#NID_id_mod_dvcs
 283

	)

1411 
	#OBJ_id_mod_dvcs
 
OBJ_id_pkix_mod
,15L

	)

1413 
	#SN_id_mod_cmp2000
 "id-mod-cmp2000"

	)

1414 
	#NID_id_mod_cmp2000
 284

	)

1415 
	#OBJ_id_mod_cmp2000
 
OBJ_id_pkix_mod
,16L

	)

1417 
	#SN_öfo_ac˚ss
 "auth‹ôyInfoAc˚ss"

	)

1418 
	#LN_öfo_ac˚ss
 "Auth‹ôy Inf‹m©i⁄ Ac˚ss"

	)

1419 
	#NID_öfo_ac˚ss
 177

	)

1420 
	#OBJ_öfo_ac˚ss
 
OBJ_id_≥
,1L

	)

1422 
	#SN_biomëricInfo
 "biomëricInfo"

	)

1423 
	#LN_biomëricInfo
 "Biomëri¯Info"

	)

1424 
	#NID_biomëricInfo
 285

	)

1425 
	#OBJ_biomëricInfo
 
OBJ_id_≥
,2L

	)

1427 
	#SN_qcSèãmíts
 "qcSèãmíts"

	)

1428 
	#NID_qcSèãmíts
 286

	)

1429 
	#OBJ_qcSèãmíts
 
OBJ_id_≥
,3L

	)

1431 
	#SN_ac_audôE¡ôy
 "ac-audôE¡ôy"

	)

1432 
	#NID_ac_audôE¡ôy
 287

	)

1433 
	#OBJ_ac_audôE¡ôy
 
OBJ_id_≥
,4L

	)

1435 
	#SN_ac_èrgëög
 "ac-èrgëög"

	)

1436 
	#NID_ac_èrgëög
 288

	)

1437 
	#OBJ_ac_èrgëög
 
OBJ_id_≥
,5L

	)

1439 
	#SN_ØC⁄åﬁs
 "ØC⁄åﬁs"

	)

1440 
	#NID_ØC⁄åﬁs
 289

	)

1441 
	#OBJ_ØC⁄åﬁs
 
OBJ_id_≥
,6L

	)

1443 
	#SN_sbgp_ùAddrBlock
 "sbgp-ùAddrBlock"

	)

1444 
	#NID_sbgp_ùAddrBlock
 290

	)

1445 
	#OBJ_sbgp_ùAddrBlock
 
OBJ_id_≥
,7L

	)

1447 
	#SN_sbgp_aut⁄omousSysNum
 "sbgp-aut⁄omousSysNum"

	)

1448 
	#NID_sbgp_aut⁄omousSysNum
 291

	)

1449 
	#OBJ_sbgp_aut⁄omousSysNum
 
OBJ_id_≥
,8L

	)

1451 
	#SN_sbgp_rouãrIdítifõr
 "sbgp-rouãrIdítifõr"

	)

1452 
	#NID_sbgp_rouãrIdítifõr
 292

	)

1453 
	#OBJ_sbgp_rouãrIdítifõr
 
OBJ_id_≥
,9L

	)

1455 
	#SN_ac_¥oxyög
 "ac-¥oxyög"

	)

1456 
	#NID_ac_¥oxyög
 397

	)

1457 
	#OBJ_ac_¥oxyög
 
OBJ_id_≥
,10L

	)

1459 
	#SN_söfo_ac˚ss
 "subje˘InfoAc˚ss"

	)

1460 
	#LN_söfo_ac˚ss
 "Subje˘ Inf‹m©i⁄ Ac˚ss"

	)

1461 
	#NID_söfo_ac˚ss
 398

	)

1462 
	#OBJ_söfo_ac˚ss
 
OBJ_id_≥
,11L

	)

1464 
	#SN_¥oxyCîtInfo
 "¥oxyCîtInfo"

	)

1465 
	#LN_¥oxyCîtInfo
 "Proxy Cîtifiˇã Inf‹m©i⁄"

	)

1466 
	#NID_¥oxyCîtInfo
 663

	)

1467 
	#OBJ_¥oxyCîtInfo
 
OBJ_id_≥
,14L

	)

1469 
	#SN_id_qt_˝s
 "id-qt-˝s"

	)

1470 
	#LN_id_qt_˝s
 "Pﬁicy QuÆifõ∏CPS"

	)

1471 
	#NID_id_qt_˝s
 164

	)

1472 
	#OBJ_id_qt_˝s
 
OBJ_id_qt
,1L

	)

1474 
	#SN_id_qt_unŸi˚
 "id-qt-unŸi˚"

	)

1475 
	#LN_id_qt_unŸi˚
 "Pﬁicy QuÆifõ∏U£∏NŸi˚"

	)

1476 
	#NID_id_qt_unŸi˚
 165

	)

1477 
	#OBJ_id_qt_unŸi˚
 
OBJ_id_qt
,2L

	)

1479 
	#SN_ãxtNŸi˚
 "ãxtNŸi˚"

	)

1480 
	#NID_ãxtNŸi˚
 293

	)

1481 
	#OBJ_ãxtNŸi˚
 
OBJ_id_qt
,3L

	)

1483 
	#SN_£rvî_auth
 "£rvîAuth"

	)

1484 
	#LN_£rvî_auth
 "TLS Web Sîvî Authítiˇti⁄"

	)

1485 
	#NID_£rvî_auth
 129

	)

1486 
	#OBJ_£rvî_auth
 
OBJ_id_kp
,1L

	)

1488 
	#SN_˛õ¡_auth
 "˛õ¡Auth"

	)

1489 
	#LN_˛õ¡_auth
 "TLS Web Clõ¡ Authítiˇti⁄"

	)

1490 
	#NID_˛õ¡_auth
 130

	)

1491 
	#OBJ_˛õ¡_auth
 
OBJ_id_kp
,2L

	)

1493 
	#SN_code_sign
 "codeSignög"

	)

1494 
	#LN_code_sign
 "CodêSignög"

	)

1495 
	#NID_code_sign
 131

	)

1496 
	#OBJ_code_sign
 
OBJ_id_kp
,3L

	)

1498 
	#SN_emaû_¥Ÿe˘
 "emaûPrŸe˘i⁄"

	)

1499 
	#LN_emaû_¥Ÿe˘
 "E-maû PrŸe˘i⁄"

	)

1500 
	#NID_emaû_¥Ÿe˘
 132

	)

1501 
	#OBJ_emaû_¥Ÿe˘
 
OBJ_id_kp
,4L

	)

1503 
	#SN_ù£cEndSy°em
 "ù£cEndSy°em"

	)

1504 
	#LN_ù£cEndSy°em
 "IPSe¯End Sy°em"

	)

1505 
	#NID_ù£cEndSy°em
 294

	)

1506 
	#OBJ_ù£cEndSy°em
 
OBJ_id_kp
,5L

	)

1508 
	#SN_ù£cTu¬ñ
 "ù£cTu¬ñ"

	)

1509 
	#LN_ù£cTu¬ñ
 "IPSe¯Tu¬ñ"

	)

1510 
	#NID_ù£cTu¬ñ
 295

	)

1511 
	#OBJ_ù£cTu¬ñ
 
OBJ_id_kp
,6L

	)

1513 
	#SN_ù£cU£r
 "ù£cU£r"

	)

1514 
	#LN_ù£cU£r
 "IPSe¯U£r"

	)

1515 
	#NID_ù£cU£r
 296

	)

1516 
	#OBJ_ù£cU£r
 
OBJ_id_kp
,7L

	)

1518 
	#SN_time_°amp
 "timeSèmpög"

	)

1519 
	#LN_time_°amp
 "TimêSèmpög"

	)

1520 
	#NID_time_°amp
 133

	)

1521 
	#OBJ_time_°amp
 
OBJ_id_kp
,8L

	)

1523 
	#SN_OCSP_sign
 "OCSPSignög"

	)

1524 
	#LN_OCSP_sign
 "OCSP Signög"

	)

1525 
	#NID_OCSP_sign
 180

	)

1526 
	#OBJ_OCSP_sign
 
OBJ_id_kp
,9L

	)

1528 
	#SN_dvcs
 "DVCS"

	)

1529 
	#LN_dvcs
 "dvcs"

	)

1530 
	#NID_dvcs
 297

	)

1531 
	#OBJ_dvcs
 
OBJ_id_kp
,10L

	)

1533 
	#SN_id_ô_ˇPrŸEncCît
 "id-ô-ˇPrŸEncCît"

	)

1534 
	#NID_id_ô_ˇPrŸEncCît
 298

	)

1535 
	#OBJ_id_ô_ˇPrŸEncCît
 
OBJ_id_ô
,1L

	)

1537 
	#SN_id_ô_signKeyPaúTy≥s
 "id-ô-signKeyPaúTy≥s"

	)

1538 
	#NID_id_ô_signKeyPaúTy≥s
 299

	)

1539 
	#OBJ_id_ô_signKeyPaúTy≥s
 
OBJ_id_ô
,2L

	)

1541 
	#SN_id_ô_ícKeyPaúTy≥s
 "id-ô-ícKeyPaúTy≥s"

	)

1542 
	#NID_id_ô_ícKeyPaúTy≥s
 300

	)

1543 
	#OBJ_id_ô_ícKeyPaúTy≥s
 
OBJ_id_ô
,3L

	)

1545 
	#SN_id_ô_¥e„ºedSymmAlg
 "id-ô-¥e„ºedSymmAlg"

	)

1546 
	#NID_id_ô_¥e„ºedSymmAlg
 301

	)

1547 
	#OBJ_id_ô_¥e„ºedSymmAlg
 
OBJ_id_ô
,4L

	)

1549 
	#SN_id_ô_ˇKeyUpd©eInfo
 "id-ô-ˇKeyUpd©eInfo"

	)

1550 
	#NID_id_ô_ˇKeyUpd©eInfo
 302

	)

1551 
	#OBJ_id_ô_ˇKeyUpd©eInfo
 
OBJ_id_ô
,5L

	)

1553 
	#SN_id_ô_cuºítCRL
 "id-ô-cuºítCRL"

	)

1554 
	#NID_id_ô_cuºítCRL
 303

	)

1555 
	#OBJ_id_ô_cuºítCRL
 
OBJ_id_ô
,6L

	)

1557 
	#SN_id_ô_unsuµ‹ãdOIDs
 "id-ô-unsuµ‹ãdOIDs"

	)

1558 
	#NID_id_ô_unsuµ‹ãdOIDs
 304

	)

1559 
	#OBJ_id_ô_unsuµ‹ãdOIDs
 
OBJ_id_ô
,7L

	)

1561 
	#SN_id_ô_subs¸ùti⁄Reque°
 "id-ô-subs¸ùti⁄Reque°"

	)

1562 
	#NID_id_ô_subs¸ùti⁄Reque°
 305

	)

1563 
	#OBJ_id_ô_subs¸ùti⁄Reque°
 
OBJ_id_ô
,8L

	)

1565 
	#SN_id_ô_subs¸ùti⁄Re•⁄£
 "id-ô-subs¸ùti⁄Re•⁄£"

	)

1566 
	#NID_id_ô_subs¸ùti⁄Re•⁄£
 306

	)

1567 
	#OBJ_id_ô_subs¸ùti⁄Re•⁄£
 
OBJ_id_ô
,9L

	)

1569 
	#SN_id_ô_keyPaúP¨amReq
 "id-ô-keyPaúP¨amReq"

	)

1570 
	#NID_id_ô_keyPaúP¨amReq
 307

	)

1571 
	#OBJ_id_ô_keyPaúP¨amReq
 
OBJ_id_ô
,10L

	)

1573 
	#SN_id_ô_keyPaúP¨amRï
 "id-ô-keyPaúP¨amRï"

	)

1574 
	#NID_id_ô_keyPaúP¨amRï
 308

	)

1575 
	#OBJ_id_ô_keyPaúP¨amRï
 
OBJ_id_ô
,11L

	)

1577 
	#SN_id_ô_ªvPas•hø£
 "id-ô-ªvPas•hø£"

	)

1578 
	#NID_id_ô_ªvPas•hø£
 309

	)

1579 
	#OBJ_id_ô_ªvPas•hø£
 
OBJ_id_ô
,12L

	)

1581 
	#SN_id_ô_im∂icôC⁄fúm
 "id-ô-im∂icôC⁄fúm"

	)

1582 
	#NID_id_ô_im∂icôC⁄fúm
 310

	)

1583 
	#OBJ_id_ô_im∂icôC⁄fúm
 
OBJ_id_ô
,13L

	)

1585 
	#SN_id_ô_c⁄fúmWaôTime
 "id-ô-c⁄fúmWaôTime"

	)

1586 
	#NID_id_ô_c⁄fúmWaôTime
 311

	)

1587 
	#OBJ_id_ô_c⁄fúmWaôTime
 
OBJ_id_ô
,14L

	)

1589 
	#SN_id_ô_‹igPKIMesßge
 "id-ô-‹igPKIMesßge"

	)

1590 
	#NID_id_ô_‹igPKIMesßge
 312

	)

1591 
	#OBJ_id_ô_‹igPKIMesßge
 
OBJ_id_ô
,15L

	)

1593 
	#SN_id_ô_suµL™gTags
 "id-ô-suµL™gTags"

	)

1594 
	#NID_id_ô_suµL™gTags
 784

	)

1595 
	#OBJ_id_ô_suµL™gTags
 
OBJ_id_ô
,16L

	)

1597 
	#SN_id_ªgCål
 "id-ªgCål"

	)

1598 
	#NID_id_ªgCål
 313

	)

1599 
	#OBJ_id_ªgCål
 
OBJ_id_pkù
,1L

	)

1601 
	#SN_id_ªgInfo
 "id-ªgInfo"

	)

1602 
	#NID_id_ªgInfo
 314

	)

1603 
	#OBJ_id_ªgInfo
 
OBJ_id_pkù
,2L

	)

1605 
	#SN_id_ªgCål_ªgTokí
 "id-ªgCål-ªgTokí"

	)

1606 
	#NID_id_ªgCål_ªgTokí
 315

	)

1607 
	#OBJ_id_ªgCål_ªgTokí
 
OBJ_id_ªgCål
,1L

	)

1609 
	#SN_id_ªgCål_authítiˇt‹
 "id-ªgCål-authítiˇt‹"

	)

1610 
	#NID_id_ªgCål_authítiˇt‹
 316

	)

1611 
	#OBJ_id_ªgCål_authítiˇt‹
 
OBJ_id_ªgCål
,2L

	)

1613 
	#SN_id_ªgCål_pkiPubliˇti⁄Info
 "id-ªgCål-pkiPubliˇti⁄Info"

	)

1614 
	#NID_id_ªgCål_pkiPubliˇti⁄Info
 317

	)

1615 
	#OBJ_id_ªgCål_pkiPubliˇti⁄Info
 
OBJ_id_ªgCål
,3L

	)

1617 
	#SN_id_ªgCål_pkiArchiveO±i⁄s
 "id-ªgCål-pkiArchiveO±i⁄s"

	)

1618 
	#NID_id_ªgCål_pkiArchiveO±i⁄s
 318

	)

1619 
	#OBJ_id_ªgCål_pkiArchiveO±i⁄s
 
OBJ_id_ªgCål
,4L

	)

1621 
	#SN_id_ªgCål_ﬁdCîtID
 "id-ªgCål-ﬁdCîtID"

	)

1622 
	#NID_id_ªgCål_ﬁdCîtID
 319

	)

1623 
	#OBJ_id_ªgCål_ﬁdCîtID
 
OBJ_id_ªgCål
,5L

	)

1625 
	#SN_id_ªgCål_¥ŸocﬁEn¸Key
 "id-ªgCål-¥ŸocﬁEn¸Key"

	)

1626 
	#NID_id_ªgCål_¥ŸocﬁEn¸Key
 320

	)

1627 
	#OBJ_id_ªgCål_¥ŸocﬁEn¸Key
 
OBJ_id_ªgCål
,6L

	)

1629 
	#SN_id_ªgInfo_utf8Paús
 "id-ªgInfo-utf8Paús"

	)

1630 
	#NID_id_ªgInfo_utf8Paús
 321

	)

1631 
	#OBJ_id_ªgInfo_utf8Paús
 
OBJ_id_ªgInfo
,1L

	)

1633 
	#SN_id_ªgInfo_˚πReq
 "id-ªgInfo-˚πReq"

	)

1634 
	#NID_id_ªgInfo_˚πReq
 322

	)

1635 
	#OBJ_id_ªgInfo_˚πReq
 
OBJ_id_ªgInfo
,2L

	)

1637 
	#SN_id_Æg_des40
 "id-Æg-des40"

	)

1638 
	#NID_id_Æg_des40
 323

	)

1639 
	#OBJ_id_Æg_des40
 
OBJ_id_Æg
,1L

	)

1641 
	#SN_id_Æg_noSig«tuª
 "id-Æg-noSig«tuª"

	)

1642 
	#NID_id_Æg_noSig«tuª
 324

	)

1643 
	#OBJ_id_Æg_noSig«tuª
 
OBJ_id_Æg
,2L

	)

1645 
	#SN_id_Æg_dh_sig_hmac_sha1
 "id-Æg-dh-sig-hmac-sha1"

	)

1646 
	#NID_id_Æg_dh_sig_hmac_sha1
 325

	)

1647 
	#OBJ_id_Æg_dh_sig_hmac_sha1
 
OBJ_id_Æg
,3L

	)

1649 
	#SN_id_Æg_dh_p›
 "id-Æg-dh-p›"

	)

1650 
	#NID_id_Æg_dh_p›
 326

	)

1651 
	#OBJ_id_Æg_dh_p›
 
OBJ_id_Æg
,4L

	)

1653 
	#SN_id_cmc_°©usInfo
 "id-cmc-°©usInfo"

	)

1654 
	#NID_id_cmc_°©usInfo
 327

	)

1655 
	#OBJ_id_cmc_°©usInfo
 
OBJ_id_cmc
,1L

	)

1657 
	#SN_id_cmc_idítifiˇti⁄
 "id-cmc-idítifiˇti⁄"

	)

1658 
	#NID_id_cmc_idítifiˇti⁄
 328

	)

1659 
	#OBJ_id_cmc_idítifiˇti⁄
 
OBJ_id_cmc
,2L

	)

1661 
	#SN_id_cmc_idítôyProof
 "id-cmc-idítôyProof"

	)

1662 
	#NID_id_cmc_idítôyProof
 329

	)

1663 
	#OBJ_id_cmc_idítôyProof
 
OBJ_id_cmc
,3L

	)

1665 
	#SN_id_cmc_d©aRëu∫
 "id-cmc-d©aRëu∫"

	)

1666 
	#NID_id_cmc_d©aRëu∫
 330

	)

1667 
	#OBJ_id_cmc_d©aRëu∫
 
OBJ_id_cmc
,4L

	)

1669 
	#SN_id_cmc_å™ß˘i⁄Id
 "id-cmc-å™ß˘i⁄Id"

	)

1670 
	#NID_id_cmc_å™ß˘i⁄Id
 331

	)

1671 
	#OBJ_id_cmc_å™ß˘i⁄Id
 
OBJ_id_cmc
,5L

	)

1673 
	#SN_id_cmc_£ndîN⁄˚
 "id-cmc-£ndîN⁄˚"

	)

1674 
	#NID_id_cmc_£ndîN⁄˚
 332

	)

1675 
	#OBJ_id_cmc_£ndîN⁄˚
 
OBJ_id_cmc
,6L

	)

1677 
	#SN_id_cmc_ªcùõ¡N⁄˚
 "id-cmc-ªcùõ¡N⁄˚"

	)

1678 
	#NID_id_cmc_ªcùõ¡N⁄˚
 333

	)

1679 
	#OBJ_id_cmc_ªcùõ¡N⁄˚
 
OBJ_id_cmc
,7L

	)

1681 
	#SN_id_cmc_addExãnsi⁄s
 "id-cmc-addExãnsi⁄s"

	)

1682 
	#NID_id_cmc_addExãnsi⁄s
 334

	)

1683 
	#OBJ_id_cmc_addExãnsi⁄s
 
OBJ_id_cmc
,8L

	)

1685 
	#SN_id_cmc_í¸y±edPOP
 "id-cmc-í¸y±edPOP"

	)

1686 
	#NID_id_cmc_í¸y±edPOP
 335

	)

1687 
	#OBJ_id_cmc_í¸y±edPOP
 
OBJ_id_cmc
,9L

	)

1689 
	#SN_id_cmc_de¸y±edPOP
 "id-cmc-de¸y±edPOP"

	)

1690 
	#NID_id_cmc_de¸y±edPOP
 336

	)

1691 
	#OBJ_id_cmc_de¸y±edPOP
 
OBJ_id_cmc
,10L

	)

1693 
	#SN_id_cmc_ÃaPOPWô√ss
 "id-cmc-ÃaPOPWô√ss"

	)

1694 
	#NID_id_cmc_ÃaPOPWô√ss
 337

	)

1695 
	#OBJ_id_cmc_ÃaPOPWô√ss
 
OBJ_id_cmc
,11L

	)

1697 
	#SN_id_cmc_gëCît
 "id-cmc-gëCît"

	)

1698 
	#NID_id_cmc_gëCît
 338

	)

1699 
	#OBJ_id_cmc_gëCît
 
OBJ_id_cmc
,15L

	)

1701 
	#SN_id_cmc_gëCRL
 "id-cmc-gëCRL"

	)

1702 
	#NID_id_cmc_gëCRL
 339

	)

1703 
	#OBJ_id_cmc_gëCRL
 
OBJ_id_cmc
,16L

	)

1705 
	#SN_id_cmc_ªvokeReque°
 "id-cmc-ªvokeReque°"

	)

1706 
	#NID_id_cmc_ªvokeReque°
 340

	)

1707 
	#OBJ_id_cmc_ªvokeReque°
 
OBJ_id_cmc
,17L

	)

1709 
	#SN_id_cmc_ªgInfo
 "id-cmc-ªgInfo"

	)

1710 
	#NID_id_cmc_ªgInfo
 341

	)

1711 
	#OBJ_id_cmc_ªgInfo
 
OBJ_id_cmc
,18L

	)

1713 
	#SN_id_cmc_ª•⁄£Info
 "id-cmc-ª•⁄£Info"

	)

1714 
	#NID_id_cmc_ª•⁄£Info
 342

	)

1715 
	#OBJ_id_cmc_ª•⁄£Info
 
OBJ_id_cmc
,19L

	)

1717 
	#SN_id_cmc_quîyPídög
 "id-cmc-quîyPídög"

	)

1718 
	#NID_id_cmc_quîyPídög
 343

	)

1719 
	#OBJ_id_cmc_quîyPídög
 
OBJ_id_cmc
,21L

	)

1721 
	#SN_id_cmc_p›LökR™dom
 "id-cmc-p›LökR™dom"

	)

1722 
	#NID_id_cmc_p›LökR™dom
 344

	)

1723 
	#OBJ_id_cmc_p›LökR™dom
 
OBJ_id_cmc
,22L

	)

1725 
	#SN_id_cmc_p›LökWô√ss
 "id-cmc-p›LökWô√ss"

	)

1726 
	#NID_id_cmc_p›LökWô√ss
 345

	)

1727 
	#OBJ_id_cmc_p›LökWô√ss
 
OBJ_id_cmc
,23L

	)

1729 
	#SN_id_cmc_c⁄fúmCîtAc˚±™˚
 "id-cmc-c⁄fúmCîtAc˚±™˚"

	)

1730 
	#NID_id_cmc_c⁄fúmCîtAc˚±™˚
 346

	)

1731 
	#OBJ_id_cmc_c⁄fúmCîtAc˚±™˚
 
OBJ_id_cmc
,24L

	)

1733 
	#SN_id_⁄_≥rs⁄ÆD©a
 "id-⁄-≥rs⁄ÆD©a"

	)

1734 
	#NID_id_⁄_≥rs⁄ÆD©a
 347

	)

1735 
	#OBJ_id_⁄_≥rs⁄ÆD©a
 
OBJ_id_⁄
,1L

	)

1737 
	#SN_id_⁄_≥rm™ítIdítifõr
 "id-⁄-≥rm™ítIdítifõr"

	)

1738 
	#LN_id_⁄_≥rm™ítIdítifõr
 "Pîm™íàIdítifõr"

	)

1739 
	#NID_id_⁄_≥rm™ítIdítifõr
 858

	)

1740 
	#OBJ_id_⁄_≥rm™ítIdítifõr
 
OBJ_id_⁄
,3L

	)

1742 
	#SN_id_pda_d©eOfBúth
 "id-pda-d©eOfBúth"

	)

1743 
	#NID_id_pda_d©eOfBúth
 348

	)

1744 
	#OBJ_id_pda_d©eOfBúth
 
OBJ_id_pda
,1L

	)

1746 
	#SN_id_pda_∂a˚OfBúth
 "id-pda-∂a˚OfBúth"

	)

1747 
	#NID_id_pda_∂a˚OfBúth
 349

	)

1748 
	#OBJ_id_pda_∂a˚OfBúth
 
OBJ_id_pda
,2L

	)

1750 
	#SN_id_pda_gídî
 "id-pda-gídî"

	)

1751 
	#NID_id_pda_gídî
 351

	)

1752 
	#OBJ_id_pda_gídî
 
OBJ_id_pda
,3L

	)

1754 
	#SN_id_pda_cou¡ryOfCôizíshù
 "id-pda-cou¡ryOfCôizíshù"

	)

1755 
	#NID_id_pda_cou¡ryOfCôizíshù
 352

	)

1756 
	#OBJ_id_pda_cou¡ryOfCôizíshù
 
OBJ_id_pda
,4L

	)

1758 
	#SN_id_pda_cou¡ryOfResidí˚
 "id-pda-cou¡ryOfResidí˚"

	)

1759 
	#NID_id_pda_cou¡ryOfResidí˚
 353

	)

1760 
	#OBJ_id_pda_cou¡ryOfResidí˚
 
OBJ_id_pda
,5L

	)

1762 
	#SN_id_aˇ_authítiˇti⁄Info
 "id-aˇ-authítiˇti⁄Info"

	)

1763 
	#NID_id_aˇ_authítiˇti⁄Info
 354

	)

1764 
	#OBJ_id_aˇ_authítiˇti⁄Info
 
OBJ_id_aˇ
,1L

	)

1766 
	#SN_id_aˇ_ac˚ssIdítôy
 "id-aˇ-ac˚ssIdítôy"

	)

1767 
	#NID_id_aˇ_ac˚ssIdítôy
 355

	)

1768 
	#OBJ_id_aˇ_ac˚ssIdítôy
 
OBJ_id_aˇ
,2L

	)

1770 
	#SN_id_aˇ_ch¨gögIdítôy
 "id-aˇ-ch¨gögIdítôy"

	)

1771 
	#NID_id_aˇ_ch¨gögIdítôy
 356

	)

1772 
	#OBJ_id_aˇ_ch¨gögIdítôy
 
OBJ_id_aˇ
,3L

	)

1774 
	#SN_id_aˇ_group
 "id-aˇ-group"

	)

1775 
	#NID_id_aˇ_group
 357

	)

1776 
	#OBJ_id_aˇ_group
 
OBJ_id_aˇ
,4L

	)

1778 
	#SN_id_aˇ_rﬁe
 "id-aˇ-rﬁe"

	)

1779 
	#NID_id_aˇ_rﬁe
 358

	)

1780 
	#OBJ_id_aˇ_rﬁe
 
OBJ_id_aˇ
,5L

	)

1782 
	#SN_id_aˇ_ícAârs
 "id-aˇ-ícAârs"

	)

1783 
	#NID_id_aˇ_ícAârs
 399

	)

1784 
	#OBJ_id_aˇ_ícAârs
 
OBJ_id_aˇ
,6L

	)

1786 
	#SN_id_qcs_pkixQCSy¡ax_v1
 "id-qcs-pkixQCSy¡ax-v1"

	)

1787 
	#NID_id_qcs_pkixQCSy¡ax_v1
 359

	)

1788 
	#OBJ_id_qcs_pkixQCSy¡ax_v1
 
OBJ_id_qcs
,1L

	)

1790 
	#SN_id_c˘_¸s
 "id-c˘-¸s"

	)

1791 
	#NID_id_c˘_¸s
 360

	)

1792 
	#OBJ_id_c˘_¸s
 
OBJ_id_c˘
,1L

	)

1794 
	#SN_id_c˘_PKID©a
 "id-c˘-PKID©a"

	)

1795 
	#NID_id_c˘_PKID©a
 361

	)

1796 
	#OBJ_id_c˘_PKID©a
 
OBJ_id_c˘
,2L

	)

1798 
	#SN_id_c˘_PKIRe•⁄£
 "id-c˘-PKIRe•⁄£"

	)

1799 
	#NID_id_c˘_PKIRe•⁄£
 362

	)

1800 
	#OBJ_id_c˘_PKIRe•⁄£
 
OBJ_id_c˘
,3L

	)

1802 
	#SN_id_µl_™yL™guage
 "id-µl-™yL™guage"

	)

1803 
	#LN_id_µl_™yL™guage
 "AnyÜ™guage"

	)

1804 
	#NID_id_µl_™yL™guage
 664

	)

1805 
	#OBJ_id_µl_™yL™guage
 
OBJ_id_µl
,0L

	)

1807 
	#SN_id_µl_öhîôAŒ
 "id-µl-öhîôAŒ"

	)

1808 
	#LN_id_µl_öhîôAŒ
 "InhîôáŒ"

	)

1809 
	#NID_id_µl_öhîôAŒ
 665

	)

1810 
	#OBJ_id_µl_öhîôAŒ
 
OBJ_id_µl
,1L

	)

1812 
	#SN_Indïídít
 "id-µl-ödïídít"

	)

1813 
	#LN_Indïídít
 "Indïídít"

	)

1814 
	#NID_Indïídít
 667

	)

1815 
	#OBJ_Indïídít
 
OBJ_id_µl
,2L

	)

1817 
	#SN_ad_OCSP
 "OCSP"

	)

1818 
	#LN_ad_OCSP
 "OCSP"

	)

1819 
	#NID_ad_OCSP
 178

	)

1820 
	#OBJ_ad_OCSP
 
OBJ_id_ad
,1L

	)

1822 
	#SN_ad_ˇ_issuîs
 "ˇIssuîs"

	)

1823 
	#LN_ad_ˇ_issuîs
 "CA Issuîs"

	)

1824 
	#NID_ad_ˇ_issuîs
 179

	)

1825 
	#OBJ_ad_ˇ_issuîs
 
OBJ_id_ad
,2L

	)

1827 
	#SN_ad_timeSèmpög
 "ad_time°ampög"

	)

1828 
	#LN_ad_timeSèmpög
 "AD TimêSèmpög"

	)

1829 
	#NID_ad_timeSèmpög
 363

	)

1830 
	#OBJ_ad_timeSèmpög
 
OBJ_id_ad
,3L

	)

1832 
	#SN_ad_dvcs
 "AD_DVCS"

	)

1833 
	#LN_ad_dvcs
 "ad dvcs"

	)

1834 
	#NID_ad_dvcs
 364

	)

1835 
	#OBJ_ad_dvcs
 
OBJ_id_ad
,4L

	)

1837 
	#SN_ˇRïosô‹y
 "ˇRïosô‹y"

	)

1838 
	#LN_ˇRïosô‹y
 "CA Rïosô‹y"

	)

1839 
	#NID_ˇRïosô‹y
 785

	)

1840 
	#OBJ_ˇRïosô‹y
 
OBJ_id_ad
,5L

	)

1842 
	#OBJ_id_pkix_OCSP
 
OBJ_ad_OCSP


	)

1844 
	#SN_id_pkix_OCSP_basic
 "basicOCSPRe•⁄£"

	)

1845 
	#LN_id_pkix_OCSP_basic
 "Basi¯OCSP Re•⁄£"

	)

1846 
	#NID_id_pkix_OCSP_basic
 365

	)

1847 
	#OBJ_id_pkix_OCSP_basic
 
OBJ_id_pkix_OCSP
,1L

	)

1849 
	#SN_id_pkix_OCSP_N⁄˚
 "N⁄˚"

	)

1850 
	#LN_id_pkix_OCSP_N⁄˚
 "OCSP N⁄˚"

	)

1851 
	#NID_id_pkix_OCSP_N⁄˚
 366

	)

1852 
	#OBJ_id_pkix_OCSP_N⁄˚
 
OBJ_id_pkix_OCSP
,2L

	)

1854 
	#SN_id_pkix_OCSP_CæID
 "CæID"

	)

1855 
	#LN_id_pkix_OCSP_CæID
 "OCSP CRL ID"

	)

1856 
	#NID_id_pkix_OCSP_CæID
 367

	)

1857 
	#OBJ_id_pkix_OCSP_CæID
 
OBJ_id_pkix_OCSP
,3L

	)

1859 
	#SN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "ac˚±abÀRe•⁄£s"

	)

1860 
	#LN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "Ac˚±abÀ OCSP Re•⁄£s"

	)

1861 
	#NID_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 368

	)

1862 
	#OBJ_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 
OBJ_id_pkix_OCSP
,4L

	)

1864 
	#SN_id_pkix_OCSP_noCheck
 "noCheck"

	)

1865 
	#LN_id_pkix_OCSP_noCheck
 "OCSP NÿCheck"

	)

1866 
	#NID_id_pkix_OCSP_noCheck
 369

	)

1867 
	#OBJ_id_pkix_OCSP_noCheck
 
OBJ_id_pkix_OCSP
,5L

	)

1869 
	#SN_id_pkix_OCSP_¨chiveCutoff
 "¨chiveCutoff"

	)

1870 
	#LN_id_pkix_OCSP_¨chiveCutoff
 "OCSP ArchivêCutoff"

	)

1871 
	#NID_id_pkix_OCSP_¨chiveCutoff
 370

	)

1872 
	#OBJ_id_pkix_OCSP_¨chiveCutoff
 
OBJ_id_pkix_OCSP
,6L

	)

1874 
	#SN_id_pkix_OCSP_£rvi˚Loˇt‹
 "£rvi˚Loˇt‹"

	)

1875 
	#LN_id_pkix_OCSP_£rvi˚Loˇt‹
 "OCSP Sîvi˚ Loˇt‹"

	)

1876 
	#NID_id_pkix_OCSP_£rvi˚Loˇt‹
 371

	)

1877 
	#OBJ_id_pkix_OCSP_£rvi˚Loˇt‹
 
OBJ_id_pkix_OCSP
,7L

	)

1879 
	#SN_id_pkix_OCSP_exãndedSètus
 "exãndedSètus"

	)

1880 
	#LN_id_pkix_OCSP_exãndedSètus
 "Exãnded OCSP Sètus"

	)

1881 
	#NID_id_pkix_OCSP_exãndedSètus
 372

	)

1882 
	#OBJ_id_pkix_OCSP_exãndedSètus
 
OBJ_id_pkix_OCSP
,8L

	)

1884 
	#SN_id_pkix_OCSP_vÆid
 "vÆid"

	)

1885 
	#NID_id_pkix_OCSP_vÆid
 373

	)

1886 
	#OBJ_id_pkix_OCSP_vÆid
 
OBJ_id_pkix_OCSP
,9L

	)

1888 
	#SN_id_pkix_OCSP_∑th
 "∑th"

	)

1889 
	#NID_id_pkix_OCSP_∑th
 374

	)

1890 
	#OBJ_id_pkix_OCSP_∑th
 
OBJ_id_pkix_OCSP
,10L

	)

1892 
	#SN_id_pkix_OCSP_åu°RoŸ
 "åu°RoŸ"

	)

1893 
	#LN_id_pkix_OCSP_åu°RoŸ
 "Tru° RoŸ"

	)

1894 
	#NID_id_pkix_OCSP_åu°RoŸ
 375

	)

1895 
	#OBJ_id_pkix_OCSP_åu°RoŸ
 
OBJ_id_pkix_OCSP
,11L

	)

1897 
	#SN_Æg‹ôhm
 "Æg‹ôhm"

	)

1898 
	#LN_Æg‹ôhm
 "Æg‹ôhm"

	)

1899 
	#NID_Æg‹ôhm
 376

	)

1900 
	#OBJ_Æg‹ôhm
 1L,3L,14L,3L,2L

	)

1902 
	#SN_md5WôhRSA
 "RSA-NP-MD5"

	)

1903 
	#LN_md5WôhRSA
 "md5WôhRSA"

	)

1904 
	#NID_md5WôhRSA
 104

	)

1905 
	#OBJ_md5WôhRSA
 
OBJ_Æg‹ôhm
,3L

	)

1907 
	#SN_des_ecb
 "DES-ECB"

	)

1908 
	#LN_des_ecb
 "des-ecb"

	)

1909 
	#NID_des_ecb
 29

	)

1910 
	#OBJ_des_ecb
 
OBJ_Æg‹ôhm
,6L

	)

1912 
	#SN_des_cbc
 "DES-CBC"

	)

1913 
	#LN_des_cbc
 "des-cbc"

	)

1914 
	#NID_des_cbc
 31

	)

1915 
	#OBJ_des_cbc
 
OBJ_Æg‹ôhm
,7L

	)

1917 
	#SN_des_ofb64
 "DES-OFB"

	)

1918 
	#LN_des_ofb64
 "des-ofb"

	)

1919 
	#NID_des_ofb64
 45

	)

1920 
	#OBJ_des_ofb64
 
OBJ_Æg‹ôhm
,8L

	)

1922 
	#SN_des_cfb64
 "DES-CFB"

	)

1923 
	#LN_des_cfb64
 "des-cfb"

	)

1924 
	#NID_des_cfb64
 30

	)

1925 
	#OBJ_des_cfb64
 
OBJ_Æg‹ôhm
,9L

	)

1927 
	#SN_rßSig«tuª
 "rßSig«tuª"

	)

1928 
	#NID_rßSig«tuª
 377

	)

1929 
	#OBJ_rßSig«tuª
 
OBJ_Æg‹ôhm
,11L

	)

1931 
	#SN_dß_2
 "DSA-ﬁd"

	)

1932 
	#LN_dß_2
 "dßEn¸y±i⁄-ﬁd"

	)

1933 
	#NID_dß_2
 67

	)

1934 
	#OBJ_dß_2
 
OBJ_Æg‹ôhm
,12L

	)

1936 
	#SN_dßWôhSHA
 "DSA-SHA"

	)

1937 
	#LN_dßWôhSHA
 "dßWôhSHA"

	)

1938 
	#NID_dßWôhSHA
 66

	)

1939 
	#OBJ_dßWôhSHA
 
OBJ_Æg‹ôhm
,13L

	)

1941 
	#SN_shaWôhRSAEn¸y±i⁄
 "RSA-SHA"

	)

1942 
	#LN_shaWôhRSAEn¸y±i⁄
 "shaWôhRSAEn¸y±i⁄"

	)

1943 
	#NID_shaWôhRSAEn¸y±i⁄
 42

	)

1944 
	#OBJ_shaWôhRSAEn¸y±i⁄
 
OBJ_Æg‹ôhm
,15L

	)

1946 
	#SN_des_ede_ecb
 "DES-EDE"

	)

1947 
	#LN_des_ede_ecb
 "des-ede"

	)

1948 
	#NID_des_ede_ecb
 32

	)

1949 
	#OBJ_des_ede_ecb
 
OBJ_Æg‹ôhm
,17L

	)

1951 
	#SN_des_ede3_ecb
 "DES-EDE3"

	)

1952 
	#LN_des_ede3_ecb
 "des-ede3"

	)

1953 
	#NID_des_ede3_ecb
 33

	)

1955 
	#SN_des_ede_cbc
 "DES-EDE-CBC"

	)

1956 
	#LN_des_ede_cbc
 "des-ede-cbc"

	)

1957 
	#NID_des_ede_cbc
 43

	)

1959 
	#SN_des_ede_cfb64
 "DES-EDE-CFB"

	)

1960 
	#LN_des_ede_cfb64
 "des-ede-cfb"

	)

1961 
	#NID_des_ede_cfb64
 60

	)

1963 
	#SN_des_ede3_cfb64
 "DES-EDE3-CFB"

	)

1964 
	#LN_des_ede3_cfb64
 "des-ede3-cfb"

	)

1965 
	#NID_des_ede3_cfb64
 61

	)

1967 
	#SN_des_ede_ofb64
 "DES-EDE-OFB"

	)

1968 
	#LN_des_ede_ofb64
 "des-ede-ofb"

	)

1969 
	#NID_des_ede_ofb64
 62

	)

1971 
	#SN_des_ede3_ofb64
 "DES-EDE3-OFB"

	)

1972 
	#LN_des_ede3_ofb64
 "des-ede3-ofb"

	)

1973 
	#NID_des_ede3_ofb64
 63

	)

1975 
	#SN_desx_cbc
 "DESX-CBC"

	)

1976 
	#LN_desx_cbc
 "desx-cbc"

	)

1977 
	#NID_desx_cbc
 80

	)

1979 
	#SN_sha
 "SHA"

	)

1980 
	#LN_sha
 "sha"

	)

1981 
	#NID_sha
 41

	)

1982 
	#OBJ_sha
 
OBJ_Æg‹ôhm
,18L

	)

1984 
	#SN_sha1
 "SHA1"

	)

1985 
	#LN_sha1
 "sha1"

	)

1986 
	#NID_sha1
 64

	)

1987 
	#OBJ_sha1
 
OBJ_Æg‹ôhm
,26L

	)

1989 
	#SN_dßWôhSHA1_2
 "DSA-SHA1-ﬁd"

	)

1990 
	#LN_dßWôhSHA1_2
 "dßWôhSHA1-ﬁd"

	)

1991 
	#NID_dßWôhSHA1_2
 70

	)

1992 
	#OBJ_dßWôhSHA1_2
 
OBJ_Æg‹ôhm
,27L

	)

1994 
	#SN_sha1WôhRSA
 "RSA-SHA1-2"

	)

1995 
	#LN_sha1WôhRSA
 "sha1WôhRSA"

	)

1996 
	#NID_sha1WôhRSA
 115

	)

1997 
	#OBJ_sha1WôhRSA
 
OBJ_Æg‹ôhm
,29L

	)

1999 
	#SN_rùemd160
 "RIPEMD160"

	)

2000 
	#LN_rùemd160
 "rùemd160"

	)

2001 
	#NID_rùemd160
 117

	)

2002 
	#OBJ_rùemd160
 1L,3L,36L,3L,2L,1L

	)

2004 
	#SN_rùemd160WôhRSA
 "RSA-RIPEMD160"

	)

2005 
	#LN_rùemd160WôhRSA
 "rùemd160WôhRSA"

	)

2006 
	#NID_rùemd160WôhRSA
 119

	)

2007 
	#OBJ_rùemd160WôhRSA
 1L,3L,36L,3L,3L,1L,2L

	)

2009 
	#SN_sx√t
 "SXNëID"

	)

2010 
	#LN_sx√t
 "Så⁄g Exå™ë ID"

	)

2011 
	#NID_sx√t
 143

	)

2012 
	#OBJ_sx√t
 1L,3L,101L,1L,4L,1L

	)

2014 
	#SN_X500
 "X500"

	)

2015 
	#LN_X500
 "dúe˘‹y sîvi˚†(X.500)"

	)

2016 
	#NID_X500
 11

	)

2017 
	#OBJ_X500
 2L,5L

	)

2019 
	#SN_X509
 "X509"

	)

2020 
	#NID_X509
 12

	)

2021 
	#OBJ_X509
 
OBJ_X500
,4L

	)

2023 
	#SN_comm⁄Name
 "CN"

	)

2024 
	#LN_comm⁄Name
 "comm⁄Name"

	)

2025 
	#NID_comm⁄Name
 13

	)

2026 
	#OBJ_comm⁄Name
 
OBJ_X509
,3L

	)

2028 
	#SN_su∫ame
 "SN"

	)

2029 
	#LN_su∫ame
 "su∫ame"

	)

2030 
	#NID_su∫ame
 100

	)

2031 
	#OBJ_su∫ame
 
OBJ_X509
,4L

	)

2033 
	#LN_£rülNumbî
 "£rülNumbî"

	)

2034 
	#NID_£rülNumbî
 105

	)

2035 
	#OBJ_£rülNumbî
 
OBJ_X509
,5L

	)

2037 
	#SN_cou¡ryName
 "C"

	)

2038 
	#LN_cou¡ryName
 "cou¡ryName"

	)

2039 
	#NID_cou¡ryName
 14

	)

2040 
	#OBJ_cou¡ryName
 
OBJ_X509
,6L

	)

2042 
	#SN_loˇlôyName
 "L"

	)

2043 
	#LN_loˇlôyName
 "loˇlôyName"

	)

2044 
	#NID_loˇlôyName
 15

	)

2045 
	#OBJ_loˇlôyName
 
OBJ_X509
,7L

	)

2047 
	#SN_°©eOrProvö˚Name
 "ST"

	)

2048 
	#LN_°©eOrProvö˚Name
 "°©eOrProvö˚Name"

	)

2049 
	#NID_°©eOrProvö˚Name
 16

	)

2050 
	#OBJ_°©eOrProvö˚Name
 
OBJ_X509
,8L

	)

2052 
	#SN_°ªëAddªss
 "°ªë"

	)

2053 
	#LN_°ªëAddªss
 "°ªëAddªss"

	)

2054 
	#NID_°ªëAddªss
 660

	)

2055 
	#OBJ_°ªëAddªss
 
OBJ_X509
,9L

	)

2057 
	#SN_‹g™iz©i⁄Name
 "O"

	)

2058 
	#LN_‹g™iz©i⁄Name
 "‹g™iz©i⁄Name"

	)

2059 
	#NID_‹g™iz©i⁄Name
 17

	)

2060 
	#OBJ_‹g™iz©i⁄Name
 
OBJ_X509
,10L

	)

2062 
	#SN_‹g™iz©i⁄ÆUnôName
 "OU"

	)

2063 
	#LN_‹g™iz©i⁄ÆUnôName
 "‹g™iz©i⁄ÆUnôName"

	)

2064 
	#NID_‹g™iz©i⁄ÆUnôName
 18

	)

2065 
	#OBJ_‹g™iz©i⁄ÆUnôName
 
OBJ_X509
,11L

	)

2067 
	#SN_tôÀ
 "tôÀ"

	)

2068 
	#LN_tôÀ
 "tôÀ"

	)

2069 
	#NID_tôÀ
 106

	)

2070 
	#OBJ_tôÀ
 
OBJ_X509
,12L

	)

2072 
	#LN_des¸ùti⁄
 "des¸ùti⁄"

	)

2073 
	#NID_des¸ùti⁄
 107

	)

2074 
	#OBJ_des¸ùti⁄
 
OBJ_X509
,13L

	)

2076 
	#LN_£¨chGuide
 "£¨chGuide"

	)

2077 
	#NID_£¨chGuide
 859

	)

2078 
	#OBJ_£¨chGuide
 
OBJ_X509
,14L

	)

2080 
	#LN_busöessC©eg‹y
 "busöessC©eg‹y"

	)

2081 
	#NID_busöessC©eg‹y
 860

	)

2082 
	#OBJ_busöessC©eg‹y
 
OBJ_X509
,15L

	)

2084 
	#LN_po°ÆAddªss
 "po°ÆAddªss"

	)

2085 
	#NID_po°ÆAddªss
 861

	)

2086 
	#OBJ_po°ÆAddªss
 
OBJ_X509
,16L

	)

2088 
	#LN_po°ÆCode
 "po°ÆCode"

	)

2089 
	#NID_po°ÆCode
 661

	)

2090 
	#OBJ_po°ÆCode
 
OBJ_X509
,17L

	)

2092 
	#LN_po°Offi˚Box
 "po°Offi˚Box"

	)

2093 
	#NID_po°Offi˚Box
 862

	)

2094 
	#OBJ_po°Offi˚Box
 
OBJ_X509
,18L

	)

2096 
	#LN_physiˇlDñivîyOffi˚Name
 "physiˇlDñivîyOffi˚Name"

	)

2097 
	#NID_physiˇlDñivîyOffi˚Name
 863

	)

2098 
	#OBJ_physiˇlDñivîyOffi˚Name
 
OBJ_X509
,19L

	)

2100 
	#LN_ãÀph⁄eNumbî
 "ãÀph⁄eNumbî"

	)

2101 
	#NID_ãÀph⁄eNumbî
 864

	)

2102 
	#OBJ_ãÀph⁄eNumbî
 
OBJ_X509
,20L

	)

2104 
	#LN_ãÀxNumbî
 "ãÀxNumbî"

	)

2105 
	#NID_ãÀxNumbî
 865

	)

2106 
	#OBJ_ãÀxNumbî
 
OBJ_X509
,21L

	)

2108 
	#LN_ãÀãxTîmöÆIdítifõr
 "ãÀãxTîmöÆIdítifõr"

	)

2109 
	#NID_ãÀãxTîmöÆIdítifõr
 866

	)

2110 
	#OBJ_ãÀãxTîmöÆIdítifõr
 
OBJ_X509
,22L

	)

2112 
	#LN_ÁcsimûeTñïh⁄eNumbî
 "ÁcsimûeTñïh⁄eNumbî"

	)

2113 
	#NID_ÁcsimûeTñïh⁄eNumbî
 867

	)

2114 
	#OBJ_ÁcsimûeTñïh⁄eNumbî
 
OBJ_X509
,23L

	)

2116 
	#LN_x121Addªss
 "x121Addªss"

	)

2117 
	#NID_x121Addªss
 868

	)

2118 
	#OBJ_x121Addªss
 
OBJ_X509
,24L

	)

2120 
	#LN_öã∫©i⁄ÆiSDNNumbî
 "öã∫©i⁄ÆiSDNNumbî"

	)

2121 
	#NID_öã∫©i⁄ÆiSDNNumbî
 869

	)

2122 
	#OBJ_öã∫©i⁄ÆiSDNNumbî
 
OBJ_X509
,25L

	)

2124 
	#LN_ªgi°îedAddªss
 "ªgi°îedAddªss"

	)

2125 
	#NID_ªgi°îedAddªss
 870

	)

2126 
	#OBJ_ªgi°îedAddªss
 
OBJ_X509
,26L

	)

2128 
	#LN_de°ö©i⁄Indiˇt‹
 "de°ö©i⁄Indiˇt‹"

	)

2129 
	#NID_de°ö©i⁄Indiˇt‹
 871

	)

2130 
	#OBJ_de°ö©i⁄Indiˇt‹
 
OBJ_X509
,27L

	)

2132 
	#LN_¥e„ºedDñivîyMëhod
 "¥e„ºedDñivîyMëhod"

	)

2133 
	#NID_¥e„ºedDñivîyMëhod
 872

	)

2134 
	#OBJ_¥e„ºedDñivîyMëhod
 
OBJ_X509
,28L

	)

2136 
	#LN_¥e£¡©i⁄Addªss
 "¥e£¡©i⁄Addªss"

	)

2137 
	#NID_¥e£¡©i⁄Addªss
 873

	)

2138 
	#OBJ_¥e£¡©i⁄Addªss
 
OBJ_X509
,29L

	)

2140 
	#LN_suµ‹ãdAµliˇti⁄C⁄ãxt
 "suµ‹ãdAµliˇti⁄C⁄ãxt"

	)

2141 
	#NID_suµ‹ãdAµliˇti⁄C⁄ãxt
 874

	)

2142 
	#OBJ_suµ‹ãdAµliˇti⁄C⁄ãxt
 
OBJ_X509
,30L

	)

2144 
	#SN_membî
 "membî"

	)

2145 
	#NID_membî
 875

	)

2146 
	#OBJ_membî
 
OBJ_X509
,31L

	)

2148 
	#SN_ow√r
 "ow√r"

	)

2149 
	#NID_ow√r
 876

	)

2150 
	#OBJ_ow√r
 
OBJ_X509
,32L

	)

2152 
	#LN_rﬁeOccu∑¡
 "rﬁeOccu∑¡"

	)

2153 
	#NID_rﬁeOccu∑¡
 877

	)

2154 
	#OBJ_rﬁeOccu∑¡
 
OBJ_X509
,33L

	)

2156 
	#SN_£eAlso
 "£eAlso"

	)

2157 
	#NID_£eAlso
 878

	)

2158 
	#OBJ_£eAlso
 
OBJ_X509
,34L

	)

2160 
	#LN_u£rPassw‹d
 "u£rPassw‹d"

	)

2161 
	#NID_u£rPassw‹d
 879

	)

2162 
	#OBJ_u£rPassw‹d
 
OBJ_X509
,35L

	)

2164 
	#LN_u£rCîtifiˇã
 "u£rCîtifiˇã"

	)

2165 
	#NID_u£rCîtifiˇã
 880

	)

2166 
	#OBJ_u£rCîtifiˇã
 
OBJ_X509
,36L

	)

2168 
	#LN_cACîtifiˇã
 "cACîtifiˇã"

	)

2169 
	#NID_cACîtifiˇã
 881

	)

2170 
	#OBJ_cACîtifiˇã
 
OBJ_X509
,37L

	)

2172 
	#LN_auth‹ôyRevoˇti⁄Li°
 "auth‹ôyRevoˇti⁄Li°"

	)

2173 
	#NID_auth‹ôyRevoˇti⁄Li°
 882

	)

2174 
	#OBJ_auth‹ôyRevoˇti⁄Li°
 
OBJ_X509
,38L

	)

2176 
	#LN_˚πifiˇãRevoˇti⁄Li°
 "˚πifiˇãRevoˇti⁄Li°"

	)

2177 
	#NID_˚πifiˇãRevoˇti⁄Li°
 883

	)

2178 
	#OBJ_˚πifiˇãRevoˇti⁄Li°
 
OBJ_X509
,39L

	)

2180 
	#LN_¸ossCîtifiˇãPaú
 "¸ossCîtifiˇãPaú"

	)

2181 
	#NID_¸ossCîtifiˇãPaú
 884

	)

2182 
	#OBJ_¸ossCîtifiˇãPaú
 
OBJ_X509
,40L

	)

2184 
	#SN_«me
 "«me"

	)

2185 
	#LN_«me
 "«me"

	)

2186 
	#NID_«me
 173

	)

2187 
	#OBJ_«me
 
OBJ_X509
,41L

	)

2189 
	#SN_givíName
 "GN"

	)

2190 
	#LN_givíName
 "givíName"

	)

2191 
	#NID_givíName
 99

	)

2192 
	#OBJ_givíName
 
OBJ_X509
,42L

	)

2194 
	#SN_öôüls
 "öôüls"

	)

2195 
	#LN_öôüls
 "öôüls"

	)

2196 
	#NID_öôüls
 101

	)

2197 
	#OBJ_öôüls
 
OBJ_X509
,43L

	)

2199 
	#LN_gíî©i⁄QuÆifõr
 "gíî©i⁄QuÆifõr"

	)

2200 
	#NID_gíî©i⁄QuÆifõr
 509

	)

2201 
	#OBJ_gíî©i⁄QuÆifõr
 
OBJ_X509
,44L

	)

2203 
	#LN_x500UniqueIdítifõr
 "x500UniqueIdítifõr"

	)

2204 
	#NID_x500UniqueIdítifõr
 503

	)

2205 
	#OBJ_x500UniqueIdítifõr
 
OBJ_X509
,45L

	)

2207 
	#SN_dnQuÆifõr
 "dnQuÆifõr"

	)

2208 
	#LN_dnQuÆifõr
 "dnQuÆifõr"

	)

2209 
	#NID_dnQuÆifõr
 174

	)

2210 
	#OBJ_dnQuÆifõr
 
OBJ_X509
,46L

	)

2212 
	#LN_íh™˚dSórchGuide
 "íh™˚dSórchGuide"

	)

2213 
	#NID_íh™˚dSórchGuide
 885

	)

2214 
	#OBJ_íh™˚dSórchGuide
 
OBJ_X509
,47L

	)

2216 
	#LN_¥ŸocﬁInf‹m©i⁄
 "¥ŸocﬁInf‹m©i⁄"

	)

2217 
	#NID_¥ŸocﬁInf‹m©i⁄
 886

	)

2218 
	#OBJ_¥ŸocﬁInf‹m©i⁄
 
OBJ_X509
,48L

	)

2220 
	#LN_di°öguishedName
 "di°öguishedName"

	)

2221 
	#NID_di°öguishedName
 887

	)

2222 
	#OBJ_di°öguishedName
 
OBJ_X509
,49L

	)

2224 
	#LN_uniqueMembî
 "uniqueMembî"

	)

2225 
	#NID_uniqueMembî
 888

	)

2226 
	#OBJ_uniqueMembî
 
OBJ_X509
,50L

	)

2228 
	#LN_hou£Idítifõr
 "hou£Idítifõr"

	)

2229 
	#NID_hou£Idítifõr
 889

	)

2230 
	#OBJ_hou£Idítifõr
 
OBJ_X509
,51L

	)

2232 
	#LN_suµ‹ãdAlg‹ôhms
 "suµ‹ãdAlg‹ôhms"

	)

2233 
	#NID_suµ‹ãdAlg‹ôhms
 890

	)

2234 
	#OBJ_suµ‹ãdAlg‹ôhms
 
OBJ_X509
,52L

	)

2236 
	#LN_dñèRevoˇti⁄Li°
 "dñèRevoˇti⁄Li°"

	)

2237 
	#NID_dñèRevoˇti⁄Li°
 891

	)

2238 
	#OBJ_dñèRevoˇti⁄Li°
 
OBJ_X509
,53L

	)

2240 
	#SN_dmdName
 "dmdName"

	)

2241 
	#NID_dmdName
 892

	)

2242 
	#OBJ_dmdName
 
OBJ_X509
,54L

	)

2244 
	#LN_p£ud⁄ym
 "p£ud⁄ym"

	)

2245 
	#NID_p£ud⁄ym
 510

	)

2246 
	#OBJ_p£ud⁄ym
 
OBJ_X509
,65L

	)

2248 
	#SN_rﬁe
 "rﬁe"

	)

2249 
	#LN_rﬁe
 "rﬁe"

	)

2250 
	#NID_rﬁe
 400

	)

2251 
	#OBJ_rﬁe
 
OBJ_X509
,72L

	)

2253 
	#SN_X500Æg‹ôhms
 "X500Æg‹ôhms"

	)

2254 
	#LN_X500Æg‹ôhms
 "dúe˘‹y sîvi˚†-álg‹ôhms"

	)

2255 
	#NID_X500Æg‹ôhms
 378

	)

2256 
	#OBJ_X500Æg‹ôhms
 
OBJ_X500
,8L

	)

2258 
	#SN_rß
 "RSA"

	)

2259 
	#LN_rß
 "rß"

	)

2260 
	#NID_rß
 19

	)

2261 
	#OBJ_rß
 
OBJ_X500Æg‹ôhms
,1L,1L

	)

2263 
	#SN_mdc2WôhRSA
 "RSA-MDC2"

	)

2264 
	#LN_mdc2WôhRSA
 "mdc2WôhRSA"

	)

2265 
	#NID_mdc2WôhRSA
 96

	)

2266 
	#OBJ_mdc2WôhRSA
 
OBJ_X500Æg‹ôhms
,3L,100L

	)

2268 
	#SN_mdc2
 "MDC2"

	)

2269 
	#LN_mdc2
 "mdc2"

	)

2270 
	#NID_mdc2
 95

	)

2271 
	#OBJ_mdc2
 
OBJ_X500Æg‹ôhms
,3L,101L

	)

2273 
	#SN_id_˚
 "id-˚"

	)

2274 
	#NID_id_˚
 81

	)

2275 
	#OBJ_id_˚
 
OBJ_X500
,29L

	)

2277 
	#SN_subje˘_dúe˘‹y_©åibuãs
 "subje˘Dúe˘‹yAâribuãs"

	)

2278 
	#LN_subje˘_dúe˘‹y_©åibuãs
 "X509v3 Subje˘ Dúe˘‹y Aâribuãs"

	)

2279 
	#NID_subje˘_dúe˘‹y_©åibuãs
 769

	)

2280 
	#OBJ_subje˘_dúe˘‹y_©åibuãs
 
OBJ_id_˚
,9L

	)

2282 
	#SN_subje˘_key_idítifõr
 "subje˘KeyIdítifõr"

	)

2283 
	#LN_subje˘_key_idítifõr
 "X509v3 Subje˘ Key Idítifõr"

	)

2284 
	#NID_subje˘_key_idítifõr
 82

	)

2285 
	#OBJ_subje˘_key_idítifõr
 
OBJ_id_˚
,14L

	)

2287 
	#SN_key_ußge
 "keyUßge"

	)

2288 
	#LN_key_ußge
 "X509v3 Key Ußge"

	)

2289 
	#NID_key_ußge
 83

	)

2290 
	#OBJ_key_ußge
 
OBJ_id_˚
,15L

	)

2292 
	#SN_¥iv©e_key_ußge_≥riod
 "¥iv©eKeyUßgePîiod"

	)

2293 
	#LN_¥iv©e_key_ußge_≥riod
 "X509v3 Priv©êKey UßgêPîiod"

	)

2294 
	#NID_¥iv©e_key_ußge_≥riod
 84

	)

2295 
	#OBJ_¥iv©e_key_ußge_≥riod
 
OBJ_id_˚
,16L

	)

2297 
	#SN_subje˘_Æt_«me
 "subje˘A…Name"

	)

2298 
	#LN_subje˘_Æt_«me
 "X509v3 Subje˘ A…î«tivêName"

	)

2299 
	#NID_subje˘_Æt_«me
 85

	)

2300 
	#OBJ_subje˘_Æt_«me
 
OBJ_id_˚
,17L

	)

2302 
	#SN_issuî_Æt_«me
 "issuîA…Name"

	)

2303 
	#LN_issuî_Æt_«me
 "X509v3 Issuî A…î«tivêName"

	)

2304 
	#NID_issuî_Æt_«me
 86

	)

2305 
	#OBJ_issuî_Æt_«me
 
OBJ_id_˚
,18L

	)

2307 
	#SN_basic_c⁄°øöts
 "basicC⁄°øöts"

	)

2308 
	#LN_basic_c⁄°øöts
 "X509v3 Basi¯C⁄°øöts"

	)

2309 
	#NID_basic_c⁄°øöts
 87

	)

2310 
	#OBJ_basic_c⁄°øöts
 
OBJ_id_˚
,19L

	)

2312 
	#SN_¸l_numbî
 "¸lNumbî"

	)

2313 
	#LN_¸l_numbî
 "X509v3 CRL Numbî"

	)

2314 
	#NID_¸l_numbî
 88

	)

2315 
	#OBJ_¸l_numbî
 
OBJ_id_˚
,20L

	)

2317 
	#SN_¸l_ªas⁄
 "CRLRós⁄"

	)

2318 
	#LN_¸l_ªas⁄
 "X509v3 CRL Rós⁄ Code"

	)

2319 
	#NID_¸l_ªas⁄
 141

	)

2320 
	#OBJ_¸l_ªas⁄
 
OBJ_id_˚
,21L

	)

2322 
	#SN_övÆidôy_d©e
 "övÆidôyD©e"

	)

2323 
	#LN_övÆidôy_d©e
 "InvÆidôy D©e"

	)

2324 
	#NID_övÆidôy_d©e
 142

	)

2325 
	#OBJ_övÆidôy_d©e
 
OBJ_id_˚
,24L

	)

2327 
	#SN_dñè_¸l
 "dñèCRL"

	)

2328 
	#LN_dñè_¸l
 "X509v3 Dñè CRL Indiˇt‹"

	)

2329 
	#NID_dñè_¸l
 140

	)

2330 
	#OBJ_dñè_¸l
 
OBJ_id_˚
,27L

	)

2332 
	#SN_issuög_di°ributi⁄_poöt
 "issuögDi°ributi⁄Poöt"

	)

2333 
	#LN_issuög_di°ributi⁄_poöt
 "X509v3 Issuög Di°rubuti⁄ Poöt"

	)

2334 
	#NID_issuög_di°ributi⁄_poöt
 770

	)

2335 
	#OBJ_issuög_di°ributi⁄_poöt
 
OBJ_id_˚
,28L

	)

2337 
	#SN_˚πifiˇã_issuî
 "˚πifiˇãIssuî"

	)

2338 
	#LN_˚πifiˇã_issuî
 "X509v3 Cîtifiˇã Issuî"

	)

2339 
	#NID_˚πifiˇã_issuî
 771

	)

2340 
	#OBJ_˚πifiˇã_issuî
 
OBJ_id_˚
,29L

	)

2342 
	#SN_«me_c⁄°øöts
 "«meC⁄°øöts"

	)

2343 
	#LN_«me_c⁄°øöts
 "X509v3 NamêC⁄°øöts"

	)

2344 
	#NID_«me_c⁄°øöts
 666

	)

2345 
	#OBJ_«me_c⁄°øöts
 
OBJ_id_˚
,30L

	)

2347 
	#SN_¸l_di°ributi⁄_poöts
 "¸lDi°ributi⁄Poöts"

	)

2348 
	#LN_¸l_di°ributi⁄_poöts
 "X509v3 CRL Di°ributi⁄ Poöts"

	)

2349 
	#NID_¸l_di°ributi⁄_poöts
 103

	)

2350 
	#OBJ_¸l_di°ributi⁄_poöts
 
OBJ_id_˚
,31L

	)

2352 
	#SN_˚πifiˇã_pﬁicõs
 "˚πifiˇãPﬁicõs"

	)

2353 
	#LN_˚πifiˇã_pﬁicõs
 "X509v3 Cîtifiˇã Pﬁicõs"

	)

2354 
	#NID_˚πifiˇã_pﬁicõs
 89

	)

2355 
	#OBJ_˚πifiˇã_pﬁicõs
 
OBJ_id_˚
,32L

	)

2357 
	#SN_™y_pﬁicy
 "™yPﬁicy"

	)

2358 
	#LN_™y_pﬁicy
 "X509v3 Any Pﬁicy"

	)

2359 
	#NID_™y_pﬁicy
 746

	)

2360 
	#OBJ_™y_pﬁicy
 
OBJ_˚πifiˇã_pﬁicõs
,0L

	)

2362 
	#SN_pﬁicy_m≠pögs
 "pﬁicyM≠pögs"

	)

2363 
	#LN_pﬁicy_m≠pögs
 "X509v3 Pﬁicy M≠pögs"

	)

2364 
	#NID_pﬁicy_m≠pögs
 747

	)

2365 
	#OBJ_pﬁicy_m≠pögs
 
OBJ_id_˚
,33L

	)

2367 
	#SN_auth‹ôy_key_idítifõr
 "auth‹ôyKeyIdítifõr"

	)

2368 
	#LN_auth‹ôy_key_idítifõr
 "X509v3 Auth‹ôy Key Idítifõr"

	)

2369 
	#NID_auth‹ôy_key_idítifõr
 90

	)

2370 
	#OBJ_auth‹ôy_key_idítifõr
 
OBJ_id_˚
,35L

	)

2372 
	#SN_pﬁicy_c⁄°øöts
 "pﬁicyC⁄°øöts"

	)

2373 
	#LN_pﬁicy_c⁄°øöts
 "X509v3 Pﬁicy C⁄°øöts"

	)

2374 
	#NID_pﬁicy_c⁄°øöts
 401

	)

2375 
	#OBJ_pﬁicy_c⁄°øöts
 
OBJ_id_˚
,36L

	)

2377 
	#SN_ext_key_ußge
 "exãndedKeyUßge"

	)

2378 
	#LN_ext_key_ußge
 "X509v3 Exãnded Key Ußge"

	)

2379 
	#NID_ext_key_ußge
 126

	)

2380 
	#OBJ_ext_key_ußge
 
OBJ_id_˚
,37L

	)

2382 
	#SN_‰eshe°_¸l
 "‰eshe°CRL"

	)

2383 
	#LN_‰eshe°_¸l
 "X509v3 Fªshe° CRL"

	)

2384 
	#NID_‰eshe°_¸l
 857

	)

2385 
	#OBJ_‰eshe°_¸l
 
OBJ_id_˚
,46L

	)

2387 
	#SN_öhibô_™y_pﬁicy
 "öhibôAnyPﬁicy"

	)

2388 
	#LN_öhibô_™y_pﬁicy
 "X509v3 Inhibô Any Pﬁicy"

	)

2389 
	#NID_öhibô_™y_pﬁicy
 748

	)

2390 
	#OBJ_öhibô_™y_pﬁicy
 
OBJ_id_˚
,54L

	)

2392 
	#SN_èrgë_öf‹m©i⁄
 "èrgëInf‹m©i⁄"

	)

2393 
	#LN_èrgë_öf‹m©i⁄
 "X509v3 AC T¨gëög"

	)

2394 
	#NID_èrgë_öf‹m©i⁄
 402

	)

2395 
	#OBJ_èrgë_öf‹m©i⁄
 
OBJ_id_˚
,55L

	)

2397 
	#SN_no_ªv_avaû
 "noRevAvaû"

	)

2398 
	#LN_no_ªv_avaû
 "X509v3 NÿRevoˇti⁄ AvaûabÀ"

	)

2399 
	#NID_no_ªv_avaû
 403

	)

2400 
	#OBJ_no_ªv_avaû
 
OBJ_id_˚
,56L

	)

2402 
	#SN_√tsˇ≥
 "Nësˇ≥"

	)

2403 
	#LN_√tsˇ≥
 "Nësˇ≥ Communiˇti⁄†C‹p."

	)

2404 
	#NID_√tsˇ≥
 57

	)

2405 
	#OBJ_√tsˇ≥
 2L,16L,840L,1L,113730L

	)

2407 
	#SN_√tsˇ≥_˚π_exãnsi⁄
 "nsCîtExt"

	)

2408 
	#LN_√tsˇ≥_˚π_exãnsi⁄
 "Nësˇ≥ Cîtifiˇã Exãnsi⁄"

	)

2409 
	#NID_√tsˇ≥_˚π_exãnsi⁄
 58

	)

2410 
	#OBJ_√tsˇ≥_˚π_exãnsi⁄
 
OBJ_√tsˇ≥
,1L

	)

2412 
	#SN_√tsˇ≥_d©a_ty≥
 "nsD©aTy≥"

	)

2413 
	#LN_√tsˇ≥_d©a_ty≥
 "Nësˇ≥ D©®Ty≥"

	)

2414 
	#NID_√tsˇ≥_d©a_ty≥
 59

	)

2415 
	#OBJ_√tsˇ≥_d©a_ty≥
 
OBJ_√tsˇ≥
,2L

	)

2417 
	#SN_√tsˇ≥_˚π_ty≥
 "nsCîtTy≥"

	)

2418 
	#LN_√tsˇ≥_˚π_ty≥
 "Nësˇ≥ CîàTy≥"

	)

2419 
	#NID_√tsˇ≥_˚π_ty≥
 71

	)

2420 
	#OBJ_√tsˇ≥_˚π_ty≥
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,1L

	)

2422 
	#SN_√tsˇ≥_ba£_uæ
 "nsBa£Uæ"

	)

2423 
	#LN_√tsˇ≥_ba£_uæ
 "Nësˇ≥ Ba£ Uæ"

	)

2424 
	#NID_√tsˇ≥_ba£_uæ
 72

	)

2425 
	#OBJ_√tsˇ≥_ba£_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,2L

	)

2427 
	#SN_√tsˇ≥_ªvoˇti⁄_uæ
 "nsRevoˇti⁄Uæ"

	)

2428 
	#LN_√tsˇ≥_ªvoˇti⁄_uæ
 "Nësˇ≥ Revoˇti⁄ Uæ"

	)

2429 
	#NID_√tsˇ≥_ªvoˇti⁄_uæ
 73

	)

2430 
	#OBJ_√tsˇ≥_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,3L

	)

2432 
	#SN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "nsCaRevoˇti⁄Uæ"

	)

2433 
	#LN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "Nësˇ≥ CA Revoˇti⁄ Uæ"

	)

2434 
	#NID_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 74

	)

2435 
	#OBJ_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,4L

	)

2437 
	#SN_√tsˇ≥_ª√wÆ_uæ
 "nsRíewÆUæ"

	)

2438 
	#LN_√tsˇ≥_ª√wÆ_uæ
 "Nësˇ≥ RíewÆ Uæ"

	)

2439 
	#NID_√tsˇ≥_ª√wÆ_uæ
 75

	)

2440 
	#OBJ_√tsˇ≥_ª√wÆ_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,7L

	)

2442 
	#SN_√tsˇ≥_ˇ_pﬁicy_uæ
 "nsCaPﬁicyUæ"

	)

2443 
	#LN_√tsˇ≥_ˇ_pﬁicy_uæ
 "Nësˇ≥ CA Pﬁicy Uæ"

	)

2444 
	#NID_√tsˇ≥_ˇ_pﬁicy_uæ
 76

	)

2445 
	#OBJ_√tsˇ≥_ˇ_pﬁicy_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,8L

	)

2447 
	#SN_√tsˇ≥_s¶_£rvî_«me
 "nsS¶SîvîName"

	)

2448 
	#LN_√tsˇ≥_s¶_£rvî_«me
 "Nësˇ≥ SSL Sîvî Name"

	)

2449 
	#NID_√tsˇ≥_s¶_£rvî_«me
 77

	)

2450 
	#OBJ_√tsˇ≥_s¶_£rvî_«me
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,12L

	)

2452 
	#SN_√tsˇ≥_commít
 "nsCommít"

	)

2453 
	#LN_√tsˇ≥_commít
 "Nësˇ≥ Commít"

	)

2454 
	#NID_√tsˇ≥_commít
 78

	)

2455 
	#OBJ_√tsˇ≥_commít
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,13L

	)

2457 
	#SN_√tsˇ≥_˚π_£quí˚
 "nsCîtSequí˚"

	)

2458 
	#LN_√tsˇ≥_˚π_£quí˚
 "Nësˇ≥ Cîtifiˇã Sequí˚"

	)

2459 
	#NID_√tsˇ≥_˚π_£quí˚
 79

	)

2460 
	#OBJ_√tsˇ≥_˚π_£quí˚
 
OBJ_√tsˇ≥_d©a_ty≥
,5L

	)

2462 
	#SN_ns_sgc
 "nsSGC"

	)

2463 
	#LN_ns_sgc
 "Nësˇ≥ Sîvî G©ed Cry±o"

	)

2464 
	#NID_ns_sgc
 139

	)

2465 
	#OBJ_ns_sgc
 
OBJ_√tsˇ≥
,4L,1L

	)

2467 
	#SN_‹g
 "ORG"

	)

2468 
	#LN_‹g
 "‹g"

	)

2469 
	#NID_‹g
 379

	)

2470 
	#OBJ_‹g
 
OBJ_iso
,3L

	)

2472 
	#SN_dod
 "DOD"

	)

2473 
	#LN_dod
 "dod"

	)

2474 
	#NID_dod
 380

	)

2475 
	#OBJ_dod
 
OBJ_‹g
,6L

	)

2477 
	#SN_ü«
 "IANA"

	)

2478 
	#LN_ü«
 "ü«"

	)

2479 
	#NID_ü«
 381

	)

2480 
	#OBJ_ü«
 
OBJ_dod
,1L

	)

2482 
	#OBJ_öã∫ë
 
OBJ_ü«


	)

2484 
	#SN_Dúe˘‹y
 "dúe˘‹y"

	)

2485 
	#LN_Dúe˘‹y
 "Dúe˘‹y"

	)

2486 
	#NID_Dúe˘‹y
 382

	)

2487 
	#OBJ_Dúe˘‹y
 
OBJ_öã∫ë
,1L

	)

2489 
	#SN_M™agemít
 "mgmt"

	)

2490 
	#LN_M™agemít
 "M™agemít"

	)

2491 
	#NID_M™agemít
 383

	)

2492 
	#OBJ_M™agemít
 
OBJ_öã∫ë
,2L

	)

2494 
	#SN_Ex≥rimíèl
 "ex≥rimíèl"

	)

2495 
	#LN_Ex≥rimíèl
 "Ex≥rimíèl"

	)

2496 
	#NID_Ex≥rimíèl
 384

	)

2497 
	#OBJ_Ex≥rimíèl
 
OBJ_öã∫ë
,3L

	)

2499 
	#SN_Priv©e
 "¥iv©e"

	)

2500 
	#LN_Priv©e
 "Priv©e"

	)

2501 
	#NID_Priv©e
 385

	)

2502 
	#OBJ_Priv©e
 
OBJ_öã∫ë
,4L

	)

2504 
	#SN_Securôy
 "£curôy"

	)

2505 
	#LN_Securôy
 "Securôy"

	)

2506 
	#NID_Securôy
 386

	)

2507 
	#OBJ_Securôy
 
OBJ_öã∫ë
,5L

	)

2509 
	#SN_SNMPv2
 "¢mpv2"

	)

2510 
	#LN_SNMPv2
 "SNMPv2"

	)

2511 
	#NID_SNMPv2
 387

	)

2512 
	#OBJ_SNMPv2
 
OBJ_öã∫ë
,6L

	)

2514 
	#LN_Maû
 "Maû"

	)

2515 
	#NID_Maû
 388

	)

2516 
	#OBJ_Maû
 
OBJ_öã∫ë
,7L

	)

2518 
	#SN_E¡î¥i£s
 "íãΩri£s"

	)

2519 
	#LN_E¡î¥i£s
 "E¡î¥i£s"

	)

2520 
	#NID_E¡î¥i£s
 389

	)

2521 
	#OBJ_E¡î¥i£s
 
OBJ_Priv©e
,1L

	)

2523 
	#SN_dcObje˘
 "dcobje˘"

	)

2524 
	#LN_dcObje˘
 "dcObje˘"

	)

2525 
	#NID_dcObje˘
 390

	)

2526 
	#OBJ_dcObje˘
 
OBJ_E¡î¥i£s
,1466L,344L

	)

2528 
	#SN_mime_mhs
 "mime-mhs"

	)

2529 
	#LN_mime_mhs
 "MIME MHS"

	)

2530 
	#NID_mime_mhs
 504

	)

2531 
	#OBJ_mime_mhs
 
OBJ_Maû
,1L

	)

2533 
	#SN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2534 
	#LN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2535 
	#NID_mime_mhs_hódögs
 505

	)

2536 
	#OBJ_mime_mhs_hódögs
 
OBJ_mime_mhs
,1L

	)

2538 
	#SN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2539 
	#LN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2540 
	#NID_mime_mhs_bodõs
 506

	)

2541 
	#OBJ_mime_mhs_bodõs
 
OBJ_mime_mhs
,2L

	)

2543 
	#SN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2544 
	#LN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2545 
	#NID_id_hex_∑πül_mesßge
 507

	)

2546 
	#OBJ_id_hex_∑πül_mesßge
 
OBJ_mime_mhs_hódögs
,1L

	)

2548 
	#SN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2549 
	#LN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2550 
	#NID_id_hex_mu…ù¨t_mesßge
 508

	)

2551 
	#OBJ_id_hex_mu…ù¨t_mesßge
 
OBJ_mime_mhs_hódögs
,2L

	)

2553 
	#SN_æe_com¥essi⁄
 "RLE"

	)

2554 
	#LN_æe_com¥essi⁄
 "ru¿Àngth com¥essi⁄"

	)

2555 
	#NID_æe_com¥essi⁄
 124

	)

2556 
	#OBJ_æe_com¥essi⁄
 1L,1L,1L,1L,666L,1L

	)

2558 
	#SN_zlib_com¥essi⁄
 "ZLIB"

	)

2559 
	#LN_zlib_com¥essi⁄
 "zlib com¥essi⁄"

	)

2560 
	#NID_zlib_com¥essi⁄
 125

	)

2561 
	#OBJ_zlib_com¥essi⁄
 
OBJ_id_smime_Æg
,8L

	)

2563 
	#OBJ_cs‹
 2L,16L,840L,1L,101L,3L

	)

2565 
	#OBJ_ni°Alg‹ôhms
 
OBJ_cs‹
,4L

	)

2567 
	#OBJ_´s
 
OBJ_ni°Alg‹ôhms
,1L

	)

2569 
	#SN_´s_128_ecb
 "AES-128-ECB"

	)

2570 
	#LN_´s_128_ecb
 "´s-128-ecb"

	)

2571 
	#NID_´s_128_ecb
 418

	)

2572 
	#OBJ_´s_128_ecb
 
OBJ_´s
,1L

	)

2574 
	#SN_´s_128_cbc
 "AES-128-CBC"

	)

2575 
	#LN_´s_128_cbc
 "´s-128-cbc"

	)

2576 
	#NID_´s_128_cbc
 419

	)

2577 
	#OBJ_´s_128_cbc
 
OBJ_´s
,2L

	)

2579 
	#SN_´s_128_ofb128
 "AES-128-OFB"

	)

2580 
	#LN_´s_128_ofb128
 "´s-128-ofb"

	)

2581 
	#NID_´s_128_ofb128
 420

	)

2582 
	#OBJ_´s_128_ofb128
 
OBJ_´s
,3L

	)

2584 
	#SN_´s_128_cfb128
 "AES-128-CFB"

	)

2585 
	#LN_´s_128_cfb128
 "´s-128-cfb"

	)

2586 
	#NID_´s_128_cfb128
 421

	)

2587 
	#OBJ_´s_128_cfb128
 
OBJ_´s
,4L

	)

2589 
	#SN_´s_192_ecb
 "AES-192-ECB"

	)

2590 
	#LN_´s_192_ecb
 "´s-192-ecb"

	)

2591 
	#NID_´s_192_ecb
 422

	)

2592 
	#OBJ_´s_192_ecb
 
OBJ_´s
,21L

	)

2594 
	#SN_´s_192_cbc
 "AES-192-CBC"

	)

2595 
	#LN_´s_192_cbc
 "´s-192-cbc"

	)

2596 
	#NID_´s_192_cbc
 423

	)

2597 
	#OBJ_´s_192_cbc
 
OBJ_´s
,22L

	)

2599 
	#SN_´s_192_ofb128
 "AES-192-OFB"

	)

2600 
	#LN_´s_192_ofb128
 "´s-192-ofb"

	)

2601 
	#NID_´s_192_ofb128
 424

	)

2602 
	#OBJ_´s_192_ofb128
 
OBJ_´s
,23L

	)

2604 
	#SN_´s_192_cfb128
 "AES-192-CFB"

	)

2605 
	#LN_´s_192_cfb128
 "´s-192-cfb"

	)

2606 
	#NID_´s_192_cfb128
 425

	)

2607 
	#OBJ_´s_192_cfb128
 
OBJ_´s
,24L

	)

2609 
	#SN_´s_256_ecb
 "AES-256-ECB"

	)

2610 
	#LN_´s_256_ecb
 "´s-256-ecb"

	)

2611 
	#NID_´s_256_ecb
 426

	)

2612 
	#OBJ_´s_256_ecb
 
OBJ_´s
,41L

	)

2614 
	#SN_´s_256_cbc
 "AES-256-CBC"

	)

2615 
	#LN_´s_256_cbc
 "´s-256-cbc"

	)

2616 
	#NID_´s_256_cbc
 427

	)

2617 
	#OBJ_´s_256_cbc
 
OBJ_´s
,42L

	)

2619 
	#SN_´s_256_ofb128
 "AES-256-OFB"

	)

2620 
	#LN_´s_256_ofb128
 "´s-256-ofb"

	)

2621 
	#NID_´s_256_ofb128
 428

	)

2622 
	#OBJ_´s_256_ofb128
 
OBJ_´s
,43L

	)

2624 
	#SN_´s_256_cfb128
 "AES-256-CFB"

	)

2625 
	#LN_´s_256_cfb128
 "´s-256-cfb"

	)

2626 
	#NID_´s_256_cfb128
 429

	)

2627 
	#OBJ_´s_256_cfb128
 
OBJ_´s
,44L

	)

2629 
	#SN_´s_128_cfb1
 "AES-128-CFB1"

	)

2630 
	#LN_´s_128_cfb1
 "´s-128-cfb1"

	)

2631 
	#NID_´s_128_cfb1
 650

	)

2633 
	#SN_´s_192_cfb1
 "AES-192-CFB1"

	)

2634 
	#LN_´s_192_cfb1
 "´s-192-cfb1"

	)

2635 
	#NID_´s_192_cfb1
 651

	)

2637 
	#SN_´s_256_cfb1
 "AES-256-CFB1"

	)

2638 
	#LN_´s_256_cfb1
 "´s-256-cfb1"

	)

2639 
	#NID_´s_256_cfb1
 652

	)

2641 
	#SN_´s_128_cfb8
 "AES-128-CFB8"

	)

2642 
	#LN_´s_128_cfb8
 "´s-128-cfb8"

	)

2643 
	#NID_´s_128_cfb8
 653

	)

2645 
	#SN_´s_192_cfb8
 "AES-192-CFB8"

	)

2646 
	#LN_´s_192_cfb8
 "´s-192-cfb8"

	)

2647 
	#NID_´s_192_cfb8
 654

	)

2649 
	#SN_´s_256_cfb8
 "AES-256-CFB8"

	)

2650 
	#LN_´s_256_cfb8
 "´s-256-cfb8"

	)

2651 
	#NID_´s_256_cfb8
 655

	)

2653 
	#SN_des_cfb1
 "DES-CFB1"

	)

2654 
	#LN_des_cfb1
 "des-cfb1"

	)

2655 
	#NID_des_cfb1
 656

	)

2657 
	#SN_des_cfb8
 "DES-CFB8"

	)

2658 
	#LN_des_cfb8
 "des-cfb8"

	)

2659 
	#NID_des_cfb8
 657

	)

2661 
	#SN_des_ede3_cfb1
 "DES-EDE3-CFB1"

	)

2662 
	#LN_des_ede3_cfb1
 "des-ede3-cfb1"

	)

2663 
	#NID_des_ede3_cfb1
 658

	)

2665 
	#SN_des_ede3_cfb8
 "DES-EDE3-CFB8"

	)

2666 
	#LN_des_ede3_cfb8
 "des-ede3-cfb8"

	)

2667 
	#NID_des_ede3_cfb8
 659

	)

2669 
	#SN_id_´s128_wøp
 "id-´s128-wøp"

	)

2670 
	#NID_id_´s128_wøp
 788

	)

2671 
	#OBJ_id_´s128_wøp
 
OBJ_´s
,5L

	)

2673 
	#SN_id_´s192_wøp
 "id-´s192-wøp"

	)

2674 
	#NID_id_´s192_wøp
 789

	)

2675 
	#OBJ_id_´s192_wøp
 
OBJ_´s
,25L

	)

2677 
	#SN_id_´s256_wøp
 "id-´s256-wøp"

	)

2678 
	#NID_id_´s256_wøp
 790

	)

2679 
	#OBJ_id_´s256_wøp
 
OBJ_´s
,45L

	)

2681 
	#OBJ_ni°_hashÆgs
 
OBJ_ni°Alg‹ôhms
,2L

	)

2683 
	#SN_sha256
 "SHA256"

	)

2684 
	#LN_sha256
 "sha256"

	)

2685 
	#NID_sha256
 672

	)

2686 
	#OBJ_sha256
 
OBJ_ni°_hashÆgs
,1L

	)

2688 
	#SN_sha384
 "SHA384"

	)

2689 
	#LN_sha384
 "sha384"

	)

2690 
	#NID_sha384
 673

	)

2691 
	#OBJ_sha384
 
OBJ_ni°_hashÆgs
,2L

	)

2693 
	#SN_sha512
 "SHA512"

	)

2694 
	#LN_sha512
 "sha512"

	)

2695 
	#NID_sha512
 674

	)

2696 
	#OBJ_sha512
 
OBJ_ni°_hashÆgs
,3L

	)

2698 
	#SN_sha224
 "SHA224"

	)

2699 
	#LN_sha224
 "sha224"

	)

2700 
	#NID_sha224
 675

	)

2701 
	#OBJ_sha224
 
OBJ_ni°_hashÆgs
,4L

	)

2703 
	#OBJ_dß_wôh_sha2
 
OBJ_ni°Alg‹ôhms
,3L

	)

2705 
	#SN_dß_wôh_SHA224
 "dß_wôh_SHA224"

	)

2706 
	#NID_dß_wôh_SHA224
 802

	)

2707 
	#OBJ_dß_wôh_SHA224
 
OBJ_dß_wôh_sha2
,1L

	)

2709 
	#SN_dß_wôh_SHA256
 "dß_wôh_SHA256"

	)

2710 
	#NID_dß_wôh_SHA256
 803

	)

2711 
	#OBJ_dß_wôh_SHA256
 
OBJ_dß_wôh_sha2
,2L

	)

2713 
	#SN_hﬁd_ö°ru˘i⁄_code
 "hﬁdIn°ru˘i⁄Code"

	)

2714 
	#LN_hﬁd_ö°ru˘i⁄_code
 "Hﬁd In°ru˘i⁄ Code"

	)

2715 
	#NID_hﬁd_ö°ru˘i⁄_code
 430

	)

2716 
	#OBJ_hﬁd_ö°ru˘i⁄_code
 
OBJ_id_˚
,23L

	)

2718 
	#OBJ_hﬁdIn°ru˘i⁄
 
OBJ_X9_57
,2L

	)

2720 
	#SN_hﬁd_ö°ru˘i⁄_n⁄e
 "hﬁdIn°ru˘i⁄N⁄e"

	)

2721 
	#LN_hﬁd_ö°ru˘i⁄_n⁄e
 "Hﬁd In°ru˘i⁄ N⁄e"

	)

2722 
	#NID_hﬁd_ö°ru˘i⁄_n⁄e
 431

	)

2723 
	#OBJ_hﬁd_ö°ru˘i⁄_n⁄e
 
OBJ_hﬁdIn°ru˘i⁄
,1L

	)

2725 
	#SN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "hﬁdIn°ru˘i⁄CÆlIssuî"

	)

2726 
	#LN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "Hﬁd In°ru˘i⁄ CÆ»Issuî"

	)

2727 
	#NID_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 432

	)

2728 
	#OBJ_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 
OBJ_hﬁdIn°ru˘i⁄
,2L

	)

2730 
	#SN_hﬁd_ö°ru˘i⁄_ªje˘
 "hﬁdIn°ru˘i⁄Reje˘"

	)

2731 
	#LN_hﬁd_ö°ru˘i⁄_ªje˘
 "Hﬁd In°ru˘i⁄ Reje˘"

	)

2732 
	#NID_hﬁd_ö°ru˘i⁄_ªje˘
 433

	)

2733 
	#OBJ_hﬁd_ö°ru˘i⁄_ªje˘
 
OBJ_hﬁdIn°ru˘i⁄
,3L

	)

2735 
	#SN_d©a
 "d©a"

	)

2736 
	#NID_d©a
 434

	)

2737 
	#OBJ_d©a
 
OBJ_ôu_t
,9L

	)

2739 
	#SN_pss
 "pss"

	)

2740 
	#NID_pss
 435

	)

2741 
	#OBJ_pss
 
OBJ_d©a
,2342L

	)

2743 
	#SN_u˛
 "u˛"

	)

2744 
	#NID_u˛
 436

	)

2745 
	#OBJ_u˛
 
OBJ_pss
,19200300L

	)

2747 
	#SN_pûŸ
 "pûŸ"

	)

2748 
	#NID_pûŸ
 437

	)

2749 
	#OBJ_pûŸ
 
OBJ_u˛
,100L

	)

2751 
	#LN_pûŸAâribuãTy≥
 "pûŸAâribuãTy≥"

	)

2752 
	#NID_pûŸAâribuãTy≥
 438

	)

2753 
	#OBJ_pûŸAâribuãTy≥
 
OBJ_pûŸ
,1L

	)

2755 
	#LN_pûŸAâribuãSy¡ax
 "pûŸAâribuãSy¡ax"

	)

2756 
	#NID_pûŸAâribuãSy¡ax
 439

	)

2757 
	#OBJ_pûŸAâribuãSy¡ax
 
OBJ_pûŸ
,3L

	)

2759 
	#LN_pûŸObje˘Cœss
 "pûŸObje˘Cœss"

	)

2760 
	#NID_pûŸObje˘Cœss
 440

	)

2761 
	#OBJ_pûŸObje˘Cœss
 
OBJ_pûŸ
,4L

	)

2763 
	#LN_pûŸGroups
 "pûŸGroups"

	)

2764 
	#NID_pûŸGroups
 441

	)

2765 
	#OBJ_pûŸGroups
 
OBJ_pûŸ
,10L

	)

2767 
	#LN_iA5SåögSy¡ax
 "iA5SåögSy¡ax"

	)

2768 
	#NID_iA5SåögSy¡ax
 442

	)

2769 
	#OBJ_iA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,4L

	)

2771 
	#LN_ˇ£Ign‹eIA5SåögSy¡ax
 "ˇ£Ign‹eIA5SåögSy¡ax"

	)

2772 
	#NID_ˇ£Ign‹eIA5SåögSy¡ax
 443

	)

2773 
	#OBJ_ˇ£Ign‹eIA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,5L

	)

2775 
	#LN_pûŸObje˘
 "pûŸObje˘"

	)

2776 
	#NID_pûŸObje˘
 444

	)

2777 
	#OBJ_pûŸObje˘
 
OBJ_pûŸObje˘Cœss
,3L

	)

2779 
	#LN_pûŸPîs⁄
 "pûŸPîs⁄"

	)

2780 
	#NID_pûŸPîs⁄
 445

	)

2781 
	#OBJ_pûŸPîs⁄
 
OBJ_pûŸObje˘Cœss
,4L

	)

2783 
	#SN_accou¡
 "accou¡"

	)

2784 
	#NID_accou¡
 446

	)

2785 
	#OBJ_accou¡
 
OBJ_pûŸObje˘Cœss
,5L

	)

2787 
	#SN_documít
 "documít"

	)

2788 
	#NID_documít
 447

	)

2789 
	#OBJ_documít
 
OBJ_pûŸObje˘Cœss
,6L

	)

2791 
	#SN_room
 "room"

	)

2792 
	#NID_room
 448

	)

2793 
	#OBJ_room
 
OBJ_pûŸObje˘Cœss
,7L

	)

2795 
	#LN_documítSîõs
 "documítSîõs"

	)

2796 
	#NID_documítSîõs
 449

	)

2797 
	#OBJ_documítSîõs
 
OBJ_pûŸObje˘Cœss
,9L

	)

2799 
	#SN_Domaö
 "domaö"

	)

2800 
	#LN_Domaö
 "Domaö"

	)

2801 
	#NID_Domaö
 392

	)

2802 
	#OBJ_Domaö
 
OBJ_pûŸObje˘Cœss
,13L

	)

2804 
	#LN_rFC822loˇlP¨t
 "rFC822loˇlP¨t"

	)

2805 
	#NID_rFC822loˇlP¨t
 450

	)

2806 
	#OBJ_rFC822loˇlP¨t
 
OBJ_pûŸObje˘Cœss
,14L

	)

2808 
	#LN_dNSDomaö
 "dNSDomaö"

	)

2809 
	#NID_dNSDomaö
 451

	)

2810 
	#OBJ_dNSDomaö
 
OBJ_pûŸObje˘Cœss
,15L

	)

2812 
	#LN_domaöRñ©edObje˘
 "domaöRñ©edObje˘"

	)

2813 
	#NID_domaöRñ©edObje˘
 452

	)

2814 
	#OBJ_domaöRñ©edObje˘
 
OBJ_pûŸObje˘Cœss
,17L

	)

2816 
	#LN_‰õndlyCou¡ry
 "‰õndlyCou¡ry"

	)

2817 
	#NID_‰õndlyCou¡ry
 453

	)

2818 
	#OBJ_‰õndlyCou¡ry
 
OBJ_pûŸObje˘Cœss
,18L

	)

2820 
	#LN_sim∂eSecurôyObje˘
 "sim∂eSecurôyObje˘"

	)

2821 
	#NID_sim∂eSecurôyObje˘
 454

	)

2822 
	#OBJ_sim∂eSecurôyObje˘
 
OBJ_pûŸObje˘Cœss
,19L

	)

2824 
	#LN_pûŸOrg™iz©i⁄
 "pûŸOrg™iz©i⁄"

	)

2825 
	#NID_pûŸOrg™iz©i⁄
 455

	)

2826 
	#OBJ_pûŸOrg™iz©i⁄
 
OBJ_pûŸObje˘Cœss
,20L

	)

2828 
	#LN_pûŸDSA
 "pûŸDSA"

	)

2829 
	#NID_pûŸDSA
 456

	)

2830 
	#OBJ_pûŸDSA
 
OBJ_pûŸObje˘Cœss
,21L

	)

2832 
	#LN_quÆôyLabñÀdD©a
 "quÆôyLabñÀdD©a"

	)

2833 
	#NID_quÆôyLabñÀdD©a
 457

	)

2834 
	#OBJ_quÆôyLabñÀdD©a
 
OBJ_pûŸObje˘Cœss
,22L

	)

2836 
	#SN_u£rId
 "UID"

	)

2837 
	#LN_u£rId
 "u£rId"

	)

2838 
	#NID_u£rId
 458

	)

2839 
	#OBJ_u£rId
 
OBJ_pûŸAâribuãTy≥
,1L

	)

2841 
	#LN_ãxtEncodedORAddªss
 "ãxtEncodedORAddªss"

	)

2842 
	#NID_ãxtEncodedORAddªss
 459

	)

2843 
	#OBJ_ãxtEncodedORAddªss
 
OBJ_pûŸAâribuãTy≥
,2L

	)

2845 
	#SN_rfc822Maûbox
 "maû"

	)

2846 
	#LN_rfc822Maûbox
 "rfc822Maûbox"

	)

2847 
	#NID_rfc822Maûbox
 460

	)

2848 
	#OBJ_rfc822Maûbox
 
OBJ_pûŸAâribuãTy≥
,3L

	)

2850 
	#SN_öfo
 "öfo"

	)

2851 
	#NID_öfo
 461

	)

2852 
	#OBJ_öfo
 
OBJ_pûŸAâribuãTy≥
,4L

	)

2854 
	#LN_ÁvourôeDrök
 "ÁvourôeDrök"

	)

2855 
	#NID_ÁvourôeDrök
 462

	)

2856 
	#OBJ_ÁvourôeDrök
 
OBJ_pûŸAâribuãTy≥
,5L

	)

2858 
	#LN_roomNumbî
 "roomNumbî"

	)

2859 
	#NID_roomNumbî
 463

	)

2860 
	#OBJ_roomNumbî
 
OBJ_pûŸAâribuãTy≥
,6L

	)

2862 
	#SN_phŸo
 "phŸo"

	)

2863 
	#NID_phŸo
 464

	)

2864 
	#OBJ_phŸo
 
OBJ_pûŸAâribuãTy≥
,7L

	)

2866 
	#LN_u£rCœss
 "u£rCœss"

	)

2867 
	#NID_u£rCœss
 465

	)

2868 
	#OBJ_u£rCœss
 
OBJ_pûŸAâribuãTy≥
,8L

	)

2870 
	#SN_ho°
 "ho°"

	)

2871 
	#NID_ho°
 466

	)

2872 
	#OBJ_ho°
 
OBJ_pûŸAâribuãTy≥
,9L

	)

2874 
	#SN_m™agî
 "m™agî"

	)

2875 
	#NID_m™agî
 467

	)

2876 
	#OBJ_m™agî
 
OBJ_pûŸAâribuãTy≥
,10L

	)

2878 
	#LN_documítIdítifõr
 "documítIdítifõr"

	)

2879 
	#NID_documítIdítifõr
 468

	)

2880 
	#OBJ_documítIdítifõr
 
OBJ_pûŸAâribuãTy≥
,11L

	)

2882 
	#LN_documítTôÀ
 "documítTôÀ"

	)

2883 
	#NID_documítTôÀ
 469

	)

2884 
	#OBJ_documítTôÀ
 
OBJ_pûŸAâribuãTy≥
,12L

	)

2886 
	#LN_documítVîsi⁄
 "documítVîsi⁄"

	)

2887 
	#NID_documítVîsi⁄
 470

	)

2888 
	#OBJ_documítVîsi⁄
 
OBJ_pûŸAâribuãTy≥
,13L

	)

2890 
	#LN_documítAuth‹
 "documítAuth‹"

	)

2891 
	#NID_documítAuth‹
 471

	)

2892 
	#OBJ_documítAuth‹
 
OBJ_pûŸAâribuãTy≥
,14L

	)

2894 
	#LN_documítLoˇti⁄
 "documítLoˇti⁄"

	)

2895 
	#NID_documítLoˇti⁄
 472

	)

2896 
	#OBJ_documítLoˇti⁄
 
OBJ_pûŸAâribuãTy≥
,15L

	)

2898 
	#LN_homeTñïh⁄eNumbî
 "homeTñïh⁄eNumbî"

	)

2899 
	#NID_homeTñïh⁄eNumbî
 473

	)

2900 
	#OBJ_homeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,20L

	)

2902 
	#SN_£¸ë¨y
 "£¸ë¨y"

	)

2903 
	#NID_£¸ë¨y
 474

	)

2904 
	#OBJ_£¸ë¨y
 
OBJ_pûŸAâribuãTy≥
,21L

	)

2906 
	#LN_ŸhîMaûbox
 "ŸhîMaûbox"

	)

2907 
	#NID_ŸhîMaûbox
 475

	)

2908 
	#OBJ_ŸhîMaûbox
 
OBJ_pûŸAâribuãTy≥
,22L

	)

2910 
	#LN_œ°ModifõdTime
 "œ°ModifõdTime"

	)

2911 
	#NID_œ°ModifõdTime
 476

	)

2912 
	#OBJ_œ°ModifõdTime
 
OBJ_pûŸAâribuãTy≥
,23L

	)

2914 
	#LN_œ°ModifõdBy
 "œ°ModifõdBy"

	)

2915 
	#NID_œ°ModifõdBy
 477

	)

2916 
	#OBJ_œ°ModifõdBy
 
OBJ_pûŸAâribuãTy≥
,24L

	)

2918 
	#SN_domaöComp⁄ít
 "DC"

	)

2919 
	#LN_domaöComp⁄ít
 "domaöComp⁄ít"

	)

2920 
	#NID_domaöComp⁄ít
 391

	)

2921 
	#OBJ_domaöComp⁄ít
 
OBJ_pûŸAâribuãTy≥
,25L

	)

2923 
	#LN_aRec‹d
 "aRec‹d"

	)

2924 
	#NID_aRec‹d
 478

	)

2925 
	#OBJ_aRec‹d
 
OBJ_pûŸAâribuãTy≥
,26L

	)

2927 
	#LN_pûŸAâribuãTy≥27
 "pûŸAâribuãTy≥27"

	)

2928 
	#NID_pûŸAâribuãTy≥27
 479

	)

2929 
	#OBJ_pûŸAâribuãTy≥27
 
OBJ_pûŸAâribuãTy≥
,27L

	)

2931 
	#LN_mXRec‹d
 "mXRec‹d"

	)

2932 
	#NID_mXRec‹d
 480

	)

2933 
	#OBJ_mXRec‹d
 
OBJ_pûŸAâribuãTy≥
,28L

	)

2935 
	#LN_nSRec‹d
 "nSRec‹d"

	)

2936 
	#NID_nSRec‹d
 481

	)

2937 
	#OBJ_nSRec‹d
 
OBJ_pûŸAâribuãTy≥
,29L

	)

2939 
	#LN_sOARec‹d
 "sOARec‹d"

	)

2940 
	#NID_sOARec‹d
 482

	)

2941 
	#OBJ_sOARec‹d
 
OBJ_pûŸAâribuãTy≥
,30L

	)

2943 
	#LN_cNAMERec‹d
 "cNAMERec‹d"

	)

2944 
	#NID_cNAMERec‹d
 483

	)

2945 
	#OBJ_cNAMERec‹d
 
OBJ_pûŸAâribuãTy≥
,31L

	)

2947 
	#LN_assocüãdDomaö
 "assocüãdDomaö"

	)

2948 
	#NID_assocüãdDomaö
 484

	)

2949 
	#OBJ_assocüãdDomaö
 
OBJ_pûŸAâribuãTy≥
,37L

	)

2951 
	#LN_assocüãdName
 "assocüãdName"

	)

2952 
	#NID_assocüãdName
 485

	)

2953 
	#OBJ_assocüãdName
 
OBJ_pûŸAâribuãTy≥
,38L

	)

2955 
	#LN_homePo°ÆAddªss
 "homePo°ÆAddªss"

	)

2956 
	#NID_homePo°ÆAddªss
 486

	)

2957 
	#OBJ_homePo°ÆAddªss
 
OBJ_pûŸAâribuãTy≥
,39L

	)

2959 
	#LN_≥rs⁄ÆTôÀ
 "≥rs⁄ÆTôÀ"

	)

2960 
	#NID_≥rs⁄ÆTôÀ
 487

	)

2961 
	#OBJ_≥rs⁄ÆTôÀ
 
OBJ_pûŸAâribuãTy≥
,40L

	)

2963 
	#LN_mobûeTñïh⁄eNumbî
 "mobûeTñïh⁄eNumbî"

	)

2964 
	#NID_mobûeTñïh⁄eNumbî
 488

	)

2965 
	#OBJ_mobûeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,41L

	)

2967 
	#LN_∑gîTñïh⁄eNumbî
 "∑gîTñïh⁄eNumbî"

	)

2968 
	#NID_∑gîTñïh⁄eNumbî
 489

	)

2969 
	#OBJ_∑gîTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,42L

	)

2971 
	#LN_‰õndlyCou¡ryName
 "‰õndlyCou¡ryName"

	)

2972 
	#NID_‰õndlyCou¡ryName
 490

	)

2973 
	#OBJ_‰õndlyCou¡ryName
 
OBJ_pûŸAâribuãTy≥
,43L

	)

2975 
	#LN_‹g™iz©i⁄ÆSètus
 "‹g™iz©i⁄ÆSètus"

	)

2976 
	#NID_‹g™iz©i⁄ÆSètus
 491

	)

2977 
	#OBJ_‹g™iz©i⁄ÆSètus
 
OBJ_pûŸAâribuãTy≥
,45L

	)

2979 
	#LN_j™ëMaûbox
 "j™ëMaûbox"

	)

2980 
	#NID_j™ëMaûbox
 492

	)

2981 
	#OBJ_j™ëMaûbox
 
OBJ_pûŸAâribuãTy≥
,46L

	)

2983 
	#LN_maûPª„ªn˚O±i⁄
 "maûPª„ªn˚O±i⁄"

	)

2984 
	#NID_maûPª„ªn˚O±i⁄
 493

	)

2985 
	#OBJ_maûPª„ªn˚O±i⁄
 
OBJ_pûŸAâribuãTy≥
,47L

	)

2987 
	#LN_buûdögName
 "buûdögName"

	)

2988 
	#NID_buûdögName
 494

	)

2989 
	#OBJ_buûdögName
 
OBJ_pûŸAâribuãTy≥
,48L

	)

2991 
	#LN_dSAQuÆôy
 "dSAQuÆôy"

	)

2992 
	#NID_dSAQuÆôy
 495

	)

2993 
	#OBJ_dSAQuÆôy
 
OBJ_pûŸAâribuãTy≥
,49L

	)

2995 
	#LN_sögÀLevñQuÆôy
 "sögÀLevñQuÆôy"

	)

2996 
	#NID_sögÀLevñQuÆôy
 496

	)

2997 
	#OBJ_sögÀLevñQuÆôy
 
OBJ_pûŸAâribuãTy≥
,50L

	)

2999 
	#LN_subåìMöimumQuÆôy
 "subåìMöimumQuÆôy"

	)

3000 
	#NID_subåìMöimumQuÆôy
 497

	)

3001 
	#OBJ_subåìMöimumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,51L

	)

3003 
	#LN_subåìMaximumQuÆôy
 "subåìMaximumQuÆôy"

	)

3004 
	#NID_subåìMaximumQuÆôy
 498

	)

3005 
	#OBJ_subåìMaximumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,52L

	)

3007 
	#LN_≥rs⁄ÆSig«tuª
 "≥rs⁄ÆSig«tuª"

	)

3008 
	#NID_≥rs⁄ÆSig«tuª
 499

	)

3009 
	#OBJ_≥rs⁄ÆSig«tuª
 
OBJ_pûŸAâribuãTy≥
,53L

	)

3011 
	#LN_dITRedúe˘
 "dITRedúe˘"

	)

3012 
	#NID_dITRedúe˘
 500

	)

3013 
	#OBJ_dITRedúe˘
 
OBJ_pûŸAâribuãTy≥
,54L

	)

3015 
	#SN_audio
 "audio"

	)

3016 
	#NID_audio
 501

	)

3017 
	#OBJ_audio
 
OBJ_pûŸAâribuãTy≥
,55L

	)

3019 
	#LN_documítPublishî
 "documítPublishî"

	)

3020 
	#NID_documítPublishî
 502

	)

3021 
	#OBJ_documítPublishî
 
OBJ_pûŸAâribuãTy≥
,56L

	)

3023 
	#SN_id_£t
 "id-£t"

	)

3024 
	#LN_id_£t
 "Secuª EÀ˘r⁄i¯Tønß˘i⁄s"

	)

3025 
	#NID_id_£t
 512

	)

3026 
	#OBJ_id_£t
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,42L

	)

3028 
	#SN_£t_˘y≥
 "£t-˘y≥"

	)

3029 
	#LN_£t_˘y≥
 "c⁄ã¡Åy≥s"

	)

3030 
	#NID_£t_˘y≥
 513

	)

3031 
	#OBJ_£t_˘y≥
 
OBJ_id_£t
,0L

	)

3033 
	#SN_£t_msgExt
 "£t-msgExt"

	)

3034 
	#LN_£t_msgExt
 "mesßgêexãnsi⁄s"

	)

3035 
	#NID_£t_msgExt
 514

	)

3036 
	#OBJ_£t_msgExt
 
OBJ_id_£t
,1L

	)

3038 
	#SN_£t_©å
 "£t-©å"

	)

3039 
	#NID_£t_©å
 515

	)

3040 
	#OBJ_£t_©å
 
OBJ_id_£t
,3L

	)

3042 
	#SN_£t_pﬁicy
 "£t-pﬁicy"

	)

3043 
	#NID_£t_pﬁicy
 516

	)

3044 
	#OBJ_£t_pﬁicy
 
OBJ_id_£t
,5L

	)

3046 
	#SN_£t_˚πExt
 "£t-˚πExt"

	)

3047 
	#LN_£t_˚πExt
 "˚πifiˇãÉxãnsi⁄s"

	)

3048 
	#NID_£t_˚πExt
 517

	)

3049 
	#OBJ_£t_˚πExt
 
OBJ_id_£t
,7L

	)

3051 
	#SN_£t_bønd
 "£t-bønd"

	)

3052 
	#NID_£t_bønd
 518

	)

3053 
	#OBJ_£t_bønd
 
OBJ_id_£t
,8L

	)

3055 
	#SN_£t˘_PAND©a
 "£t˘-PAND©a"

	)

3056 
	#NID_£t˘_PAND©a
 519

	)

3057 
	#OBJ_£t˘_PAND©a
 
OBJ_£t_˘y≥
,0L

	)

3059 
	#SN_£t˘_PANTokí
 "£t˘-PANTokí"

	)

3060 
	#NID_£t˘_PANTokí
 520

	)

3061 
	#OBJ_£t˘_PANTokí
 
OBJ_£t_˘y≥
,1L

	)

3063 
	#SN_£t˘_PANO∆y
 "£t˘-PANO∆y"

	)

3064 
	#NID_£t˘_PANO∆y
 521

	)

3065 
	#OBJ_£t˘_PANO∆y
 
OBJ_£t_˘y≥
,2L

	)

3067 
	#SN_£t˘_OID©a
 "£t˘-OID©a"

	)

3068 
	#NID_£t˘_OID©a
 522

	)

3069 
	#OBJ_£t˘_OID©a
 
OBJ_£t_˘y≥
,3L

	)

3071 
	#SN_£t˘_PI
 "£t˘-PI"

	)

3072 
	#NID_£t˘_PI
 523

	)

3073 
	#OBJ_£t˘_PI
 
OBJ_£t_˘y≥
,4L

	)

3075 
	#SN_£t˘_PID©a
 "£t˘-PID©a"

	)

3076 
	#NID_£t˘_PID©a
 524

	)

3077 
	#OBJ_£t˘_PID©a
 
OBJ_£t_˘y≥
,5L

	)

3079 
	#SN_£t˘_PID©aUnsig√d
 "£t˘-PID©aUnsig√d"

	)

3080 
	#NID_£t˘_PID©aUnsig√d
 525

	)

3081 
	#OBJ_£t˘_PID©aUnsig√d
 
OBJ_£t_˘y≥
,6L

	)

3083 
	#SN_£t˘_HODI≈ut
 "£t˘-HODI≈ut"

	)

3084 
	#NID_£t˘_HODI≈ut
 526

	)

3085 
	#OBJ_£t˘_HODI≈ut
 
OBJ_£t_˘y≥
,7L

	)

3087 
	#SN_£t˘_AuthResBaggage
 "£t˘-AuthResBaggage"

	)

3088 
	#NID_£t˘_AuthResBaggage
 527

	)

3089 
	#OBJ_£t˘_AuthResBaggage
 
OBJ_£t_˘y≥
,8L

	)

3091 
	#SN_£t˘_AuthRevReqBaggage
 "£t˘-AuthRevReqBaggage"

	)

3092 
	#NID_£t˘_AuthRevReqBaggage
 528

	)

3093 
	#OBJ_£t˘_AuthRevReqBaggage
 
OBJ_£t_˘y≥
,9L

	)

3095 
	#SN_£t˘_AuthRevResBaggage
 "£t˘-AuthRevResBaggage"

	)

3096 
	#NID_£t˘_AuthRevResBaggage
 529

	)

3097 
	#OBJ_£t˘_AuthRevResBaggage
 
OBJ_£t_˘y≥
,10L

	)

3099 
	#SN_£t˘_C≠TokíSeq
 "£t˘-C≠TokíSeq"

	)

3100 
	#NID_£t˘_C≠TokíSeq
 530

	)

3101 
	#OBJ_£t˘_C≠TokíSeq
 
OBJ_£t_˘y≥
,11L

	)

3103 
	#SN_£t˘_PInôResD©a
 "£t˘-PInôResD©a"

	)

3104 
	#NID_£t˘_PInôResD©a
 531

	)

3105 
	#OBJ_£t˘_PInôResD©a
 
OBJ_£t_˘y≥
,12L

	)

3107 
	#SN_£t˘_PI_TBS
 "£t˘-PI-TBS"

	)

3108 
	#NID_£t˘_PI_TBS
 532

	)

3109 
	#OBJ_£t˘_PI_TBS
 
OBJ_£t_˘y≥
,13L

	)

3111 
	#SN_£t˘_PResD©a
 "£t˘-PResD©a"

	)

3112 
	#NID_£t˘_PResD©a
 533

	)

3113 
	#OBJ_£t˘_PResD©a
 
OBJ_£t_˘y≥
,14L

	)

3115 
	#SN_£t˘_AuthReqTBS
 "£t˘-AuthReqTBS"

	)

3116 
	#NID_£t˘_AuthReqTBS
 534

	)

3117 
	#OBJ_£t˘_AuthReqTBS
 
OBJ_£t_˘y≥
,16L

	)

3119 
	#SN_£t˘_AuthResTBS
 "£t˘-AuthResTBS"

	)

3120 
	#NID_£t˘_AuthResTBS
 535

	)

3121 
	#OBJ_£t˘_AuthResTBS
 
OBJ_£t_˘y≥
,17L

	)

3123 
	#SN_£t˘_AuthResTBSX
 "£t˘-AuthResTBSX"

	)

3124 
	#NID_£t˘_AuthResTBSX
 536

	)

3125 
	#OBJ_£t˘_AuthResTBSX
 
OBJ_£t_˘y≥
,18L

	)

3127 
	#SN_£t˘_AuthTokíTBS
 "£t˘-AuthTokíTBS"

	)

3128 
	#NID_£t˘_AuthTokíTBS
 537

	)

3129 
	#OBJ_£t˘_AuthTokíTBS
 
OBJ_£t_˘y≥
,19L

	)

3131 
	#SN_£t˘_C≠TokíD©a
 "£t˘-C≠TokíD©a"

	)

3132 
	#NID_£t˘_C≠TokíD©a
 538

	)

3133 
	#OBJ_£t˘_C≠TokíD©a
 
OBJ_£t_˘y≥
,20L

	)

3135 
	#SN_£t˘_C≠TokíTBS
 "£t˘-C≠TokíTBS"

	)

3136 
	#NID_£t˘_C≠TokíTBS
 539

	)

3137 
	#OBJ_£t˘_C≠TokíTBS
 
OBJ_£t_˘y≥
,21L

	)

3139 
	#SN_£t˘_AcqC¨dCodeMsg
 "£t˘-AcqC¨dCodeMsg"

	)

3140 
	#NID_£t˘_AcqC¨dCodeMsg
 540

	)

3141 
	#OBJ_£t˘_AcqC¨dCodeMsg
 
OBJ_£t_˘y≥
,22L

	)

3143 
	#SN_£t˘_AuthRevReqTBS
 "£t˘-AuthRevReqTBS"

	)

3144 
	#NID_£t˘_AuthRevReqTBS
 541

	)

3145 
	#OBJ_£t˘_AuthRevReqTBS
 
OBJ_£t_˘y≥
,23L

	)

3147 
	#SN_£t˘_AuthRevResD©a
 "£t˘-AuthRevResD©a"

	)

3148 
	#NID_£t˘_AuthRevResD©a
 542

	)

3149 
	#OBJ_£t˘_AuthRevResD©a
 
OBJ_£t_˘y≥
,24L

	)

3151 
	#SN_£t˘_AuthRevResTBS
 "£t˘-AuthRevResTBS"

	)

3152 
	#NID_£t˘_AuthRevResTBS
 543

	)

3153 
	#OBJ_£t˘_AuthRevResTBS
 
OBJ_£t_˘y≥
,25L

	)

3155 
	#SN_£t˘_C≠ReqTBS
 "£t˘-C≠ReqTBS"

	)

3156 
	#NID_£t˘_C≠ReqTBS
 544

	)

3157 
	#OBJ_£t˘_C≠ReqTBS
 
OBJ_£t_˘y≥
,26L

	)

3159 
	#SN_£t˘_C≠ReqTBSX
 "£t˘-C≠ReqTBSX"

	)

3160 
	#NID_£t˘_C≠ReqTBSX
 545

	)

3161 
	#OBJ_£t˘_C≠ReqTBSX
 
OBJ_£t_˘y≥
,27L

	)

3163 
	#SN_£t˘_C≠ResD©a
 "£t˘-C≠ResD©a"

	)

3164 
	#NID_£t˘_C≠ResD©a
 546

	)

3165 
	#OBJ_£t˘_C≠ResD©a
 
OBJ_£t_˘y≥
,28L

	)

3167 
	#SN_£t˘_C≠RevReqTBS
 "£t˘-C≠RevReqTBS"

	)

3168 
	#NID_£t˘_C≠RevReqTBS
 547

	)

3169 
	#OBJ_£t˘_C≠RevReqTBS
 
OBJ_£t_˘y≥
,29L

	)

3171 
	#SN_£t˘_C≠RevReqTBSX
 "£t˘-C≠RevReqTBSX"

	)

3172 
	#NID_£t˘_C≠RevReqTBSX
 548

	)

3173 
	#OBJ_£t˘_C≠RevReqTBSX
 
OBJ_£t_˘y≥
,30L

	)

3175 
	#SN_£t˘_C≠RevResD©a
 "£t˘-C≠RevResD©a"

	)

3176 
	#NID_£t˘_C≠RevResD©a
 549

	)

3177 
	#OBJ_£t˘_C≠RevResD©a
 
OBJ_£t_˘y≥
,31L

	)

3179 
	#SN_£t˘_CªdReqTBS
 "£t˘-CªdReqTBS"

	)

3180 
	#NID_£t˘_CªdReqTBS
 550

	)

3181 
	#OBJ_£t˘_CªdReqTBS
 
OBJ_£t_˘y≥
,32L

	)

3183 
	#SN_£t˘_CªdReqTBSX
 "£t˘-CªdReqTBSX"

	)

3184 
	#NID_£t˘_CªdReqTBSX
 551

	)

3185 
	#OBJ_£t˘_CªdReqTBSX
 
OBJ_£t_˘y≥
,33L

	)

3187 
	#SN_£t˘_CªdResD©a
 "£t˘-CªdResD©a"

	)

3188 
	#NID_£t˘_CªdResD©a
 552

	)

3189 
	#OBJ_£t˘_CªdResD©a
 
OBJ_£t_˘y≥
,34L

	)

3191 
	#SN_£t˘_CªdRevReqTBS
 "£t˘-CªdRevReqTBS"

	)

3192 
	#NID_£t˘_CªdRevReqTBS
 553

	)

3193 
	#OBJ_£t˘_CªdRevReqTBS
 
OBJ_£t_˘y≥
,35L

	)

3195 
	#SN_£t˘_CªdRevReqTBSX
 "£t˘-CªdRevReqTBSX"

	)

3196 
	#NID_£t˘_CªdRevReqTBSX
 554

	)

3197 
	#OBJ_£t˘_CªdRevReqTBSX
 
OBJ_£t_˘y≥
,36L

	)

3199 
	#SN_£t˘_CªdRevResD©a
 "£t˘-CªdRevResD©a"

	)

3200 
	#NID_£t˘_CªdRevResD©a
 555

	)

3201 
	#OBJ_£t˘_CªdRevResD©a
 
OBJ_£t_˘y≥
,37L

	)

3203 
	#SN_£t˘_PCîtReqD©a
 "£t˘-PCîtReqD©a"

	)

3204 
	#NID_£t˘_PCîtReqD©a
 556

	)

3205 
	#OBJ_£t˘_PCîtReqD©a
 
OBJ_£t_˘y≥
,38L

	)

3207 
	#SN_£t˘_PCîtResTBS
 "£t˘-PCîtResTBS"

	)

3208 
	#NID_£t˘_PCîtResTBS
 557

	)

3209 
	#OBJ_£t˘_PCîtResTBS
 
OBJ_£t_˘y≥
,39L

	)

3211 
	#SN_£t˘_B©chAdmöReqD©a
 "£t˘-B©chAdmöReqD©a"

	)

3212 
	#NID_£t˘_B©chAdmöReqD©a
 558

	)

3213 
	#OBJ_£t˘_B©chAdmöReqD©a
 
OBJ_£t_˘y≥
,40L

	)

3215 
	#SN_£t˘_B©chAdmöResD©a
 "£t˘-B©chAdmöResD©a"

	)

3216 
	#NID_£t˘_B©chAdmöResD©a
 559

	)

3217 
	#OBJ_£t˘_B©chAdmöResD©a
 
OBJ_£t_˘y≥
,41L

	)

3219 
	#SN_£t˘_C¨dCInôResTBS
 "£t˘-C¨dCInôResTBS"

	)

3220 
	#NID_£t˘_C¨dCInôResTBS
 560

	)

3221 
	#OBJ_£t˘_C¨dCInôResTBS
 
OBJ_£t_˘y≥
,42L

	)

3223 
	#SN_£t˘_MeAqCInôResTBS
 "£t˘-MeAqCInôResTBS"

	)

3224 
	#NID_£t˘_MeAqCInôResTBS
 561

	)

3225 
	#OBJ_£t˘_MeAqCInôResTBS
 
OBJ_£t_˘y≥
,43L

	)

3227 
	#SN_£t˘_RegF‹mResTBS
 "£t˘-RegF‹mResTBS"

	)

3228 
	#NID_£t˘_RegF‹mResTBS
 562

	)

3229 
	#OBJ_£t˘_RegF‹mResTBS
 
OBJ_£t_˘y≥
,44L

	)

3231 
	#SN_£t˘_CîtReqD©a
 "£t˘-CîtReqD©a"

	)

3232 
	#NID_£t˘_CîtReqD©a
 563

	)

3233 
	#OBJ_£t˘_CîtReqD©a
 
OBJ_£t_˘y≥
,45L

	)

3235 
	#SN_£t˘_CîtReqTBS
 "£t˘-CîtReqTBS"

	)

3236 
	#NID_£t˘_CîtReqTBS
 564

	)

3237 
	#OBJ_£t˘_CîtReqTBS
 
OBJ_£t_˘y≥
,46L

	)

3239 
	#SN_£t˘_CîtResD©a
 "£t˘-CîtResD©a"

	)

3240 
	#NID_£t˘_CîtResD©a
 565

	)

3241 
	#OBJ_£t˘_CîtResD©a
 
OBJ_£t_˘y≥
,47L

	)

3243 
	#SN_£t˘_CîtInqReqTBS
 "£t˘-CîtInqReqTBS"

	)

3244 
	#NID_£t˘_CîtInqReqTBS
 566

	)

3245 
	#OBJ_£t˘_CîtInqReqTBS
 
OBJ_£t_˘y≥
,48L

	)

3247 
	#SN_£t˘_Eº‹TBS
 "£t˘-Eº‹TBS"

	)

3248 
	#NID_£t˘_Eº‹TBS
 567

	)

3249 
	#OBJ_£t˘_Eº‹TBS
 
OBJ_£t_˘y≥
,49L

	)

3251 
	#SN_£t˘_PIDuÆSig√dTBE
 "£t˘-PIDuÆSig√dTBE"

	)

3252 
	#NID_£t˘_PIDuÆSig√dTBE
 568

	)

3253 
	#OBJ_£t˘_PIDuÆSig√dTBE
 
OBJ_£t_˘y≥
,50L

	)

3255 
	#SN_£t˘_PIUnsig√dTBE
 "£t˘-PIUnsig√dTBE"

	)

3256 
	#NID_£t˘_PIUnsig√dTBE
 569

	)

3257 
	#OBJ_£t˘_PIUnsig√dTBE
 
OBJ_£t_˘y≥
,51L

	)

3259 
	#SN_£t˘_AuthReqTBE
 "£t˘-AuthReqTBE"

	)

3260 
	#NID_£t˘_AuthReqTBE
 570

	)

3261 
	#OBJ_£t˘_AuthReqTBE
 
OBJ_£t_˘y≥
,52L

	)

3263 
	#SN_£t˘_AuthResTBE
 "£t˘-AuthResTBE"

	)

3264 
	#NID_£t˘_AuthResTBE
 571

	)

3265 
	#OBJ_£t˘_AuthResTBE
 
OBJ_£t_˘y≥
,53L

	)

3267 
	#SN_£t˘_AuthResTBEX
 "£t˘-AuthResTBEX"

	)

3268 
	#NID_£t˘_AuthResTBEX
 572

	)

3269 
	#OBJ_£t˘_AuthResTBEX
 
OBJ_£t_˘y≥
,54L

	)

3271 
	#SN_£t˘_AuthTokíTBE
 "£t˘-AuthTokíTBE"

	)

3272 
	#NID_£t˘_AuthTokíTBE
 573

	)

3273 
	#OBJ_£t˘_AuthTokíTBE
 
OBJ_£t_˘y≥
,55L

	)

3275 
	#SN_£t˘_C≠TokíTBE
 "£t˘-C≠TokíTBE"

	)

3276 
	#NID_£t˘_C≠TokíTBE
 574

	)

3277 
	#OBJ_£t˘_C≠TokíTBE
 
OBJ_£t_˘y≥
,56L

	)

3279 
	#SN_£t˘_C≠TokíTBEX
 "£t˘-C≠TokíTBEX"

	)

3280 
	#NID_£t˘_C≠TokíTBEX
 575

	)

3281 
	#OBJ_£t˘_C≠TokíTBEX
 
OBJ_£t_˘y≥
,57L

	)

3283 
	#SN_£t˘_AcqC¨dCodeMsgTBE
 "£t˘-AcqC¨dCodeMsgTBE"

	)

3284 
	#NID_£t˘_AcqC¨dCodeMsgTBE
 576

	)

3285 
	#OBJ_£t˘_AcqC¨dCodeMsgTBE
 
OBJ_£t_˘y≥
,58L

	)

3287 
	#SN_£t˘_AuthRevReqTBE
 "£t˘-AuthRevReqTBE"

	)

3288 
	#NID_£t˘_AuthRevReqTBE
 577

	)

3289 
	#OBJ_£t˘_AuthRevReqTBE
 
OBJ_£t_˘y≥
,59L

	)

3291 
	#SN_£t˘_AuthRevResTBE
 "£t˘-AuthRevResTBE"

	)

3292 
	#NID_£t˘_AuthRevResTBE
 578

	)

3293 
	#OBJ_£t˘_AuthRevResTBE
 
OBJ_£t_˘y≥
,60L

	)

3295 
	#SN_£t˘_AuthRevResTBEB
 "£t˘-AuthRevResTBEB"

	)

3296 
	#NID_£t˘_AuthRevResTBEB
 579

	)

3297 
	#OBJ_£t˘_AuthRevResTBEB
 
OBJ_£t_˘y≥
,61L

	)

3299 
	#SN_£t˘_C≠ReqTBE
 "£t˘-C≠ReqTBE"

	)

3300 
	#NID_£t˘_C≠ReqTBE
 580

	)

3301 
	#OBJ_£t˘_C≠ReqTBE
 
OBJ_£t_˘y≥
,62L

	)

3303 
	#SN_£t˘_C≠ReqTBEX
 "£t˘-C≠ReqTBEX"

	)

3304 
	#NID_£t˘_C≠ReqTBEX
 581

	)

3305 
	#OBJ_£t˘_C≠ReqTBEX
 
OBJ_£t_˘y≥
,63L

	)

3307 
	#SN_£t˘_C≠ResTBE
 "£t˘-C≠ResTBE"

	)

3308 
	#NID_£t˘_C≠ResTBE
 582

	)

3309 
	#OBJ_£t˘_C≠ResTBE
 
OBJ_£t_˘y≥
,64L

	)

3311 
	#SN_£t˘_C≠RevReqTBE
 "£t˘-C≠RevReqTBE"

	)

3312 
	#NID_£t˘_C≠RevReqTBE
 583

	)

3313 
	#OBJ_£t˘_C≠RevReqTBE
 
OBJ_£t_˘y≥
,65L

	)

3315 
	#SN_£t˘_C≠RevReqTBEX
 "£t˘-C≠RevReqTBEX"

	)

3316 
	#NID_£t˘_C≠RevReqTBEX
 584

	)

3317 
	#OBJ_£t˘_C≠RevReqTBEX
 
OBJ_£t_˘y≥
,66L

	)

3319 
	#SN_£t˘_C≠RevResTBE
 "£t˘-C≠RevResTBE"

	)

3320 
	#NID_£t˘_C≠RevResTBE
 585

	)

3321 
	#OBJ_£t˘_C≠RevResTBE
 
OBJ_£t_˘y≥
,67L

	)

3323 
	#SN_£t˘_CªdReqTBE
 "£t˘-CªdReqTBE"

	)

3324 
	#NID_£t˘_CªdReqTBE
 586

	)

3325 
	#OBJ_£t˘_CªdReqTBE
 
OBJ_£t_˘y≥
,68L

	)

3327 
	#SN_£t˘_CªdReqTBEX
 "£t˘-CªdReqTBEX"

	)

3328 
	#NID_£t˘_CªdReqTBEX
 587

	)

3329 
	#OBJ_£t˘_CªdReqTBEX
 
OBJ_£t_˘y≥
,69L

	)

3331 
	#SN_£t˘_CªdResTBE
 "£t˘-CªdResTBE"

	)

3332 
	#NID_£t˘_CªdResTBE
 588

	)

3333 
	#OBJ_£t˘_CªdResTBE
 
OBJ_£t_˘y≥
,70L

	)

3335 
	#SN_£t˘_CªdRevReqTBE
 "£t˘-CªdRevReqTBE"

	)

3336 
	#NID_£t˘_CªdRevReqTBE
 589

	)

3337 
	#OBJ_£t˘_CªdRevReqTBE
 
OBJ_£t_˘y≥
,71L

	)

3339 
	#SN_£t˘_CªdRevReqTBEX
 "£t˘-CªdRevReqTBEX"

	)

3340 
	#NID_£t˘_CªdRevReqTBEX
 590

	)

3341 
	#OBJ_£t˘_CªdRevReqTBEX
 
OBJ_£t_˘y≥
,72L

	)

3343 
	#SN_£t˘_CªdRevResTBE
 "£t˘-CªdRevResTBE"

	)

3344 
	#NID_£t˘_CªdRevResTBE
 591

	)

3345 
	#OBJ_£t˘_CªdRevResTBE
 
OBJ_£t_˘y≥
,73L

	)

3347 
	#SN_£t˘_B©chAdmöReqTBE
 "£t˘-B©chAdmöReqTBE"

	)

3348 
	#NID_£t˘_B©chAdmöReqTBE
 592

	)

3349 
	#OBJ_£t˘_B©chAdmöReqTBE
 
OBJ_£t_˘y≥
,74L

	)

3351 
	#SN_£t˘_B©chAdmöResTBE
 "£t˘-B©chAdmöResTBE"

	)

3352 
	#NID_£t˘_B©chAdmöResTBE
 593

	)

3353 
	#OBJ_£t˘_B©chAdmöResTBE
 
OBJ_£t_˘y≥
,75L

	)

3355 
	#SN_£t˘_RegF‹mReqTBE
 "£t˘-RegF‹mReqTBE"

	)

3356 
	#NID_£t˘_RegF‹mReqTBE
 594

	)

3357 
	#OBJ_£t˘_RegF‹mReqTBE
 
OBJ_£t_˘y≥
,76L

	)

3359 
	#SN_£t˘_CîtReqTBE
 "£t˘-CîtReqTBE"

	)

3360 
	#NID_£t˘_CîtReqTBE
 595

	)

3361 
	#OBJ_£t˘_CîtReqTBE
 
OBJ_£t_˘y≥
,77L

	)

3363 
	#SN_£t˘_CîtReqTBEX
 "£t˘-CîtReqTBEX"

	)

3364 
	#NID_£t˘_CîtReqTBEX
 596

	)

3365 
	#OBJ_£t˘_CîtReqTBEX
 
OBJ_£t_˘y≥
,78L

	)

3367 
	#SN_£t˘_CîtResTBE
 "£t˘-CîtResTBE"

	)

3368 
	#NID_£t˘_CîtResTBE
 597

	)

3369 
	#OBJ_£t˘_CîtResTBE
 
OBJ_£t_˘y≥
,79L

	)

3371 
	#SN_£t˘_CRLNŸifiˇti⁄TBS
 "£t˘-CRLNŸifiˇti⁄TBS"

	)

3372 
	#NID_£t˘_CRLNŸifiˇti⁄TBS
 598

	)

3373 
	#OBJ_£t˘_CRLNŸifiˇti⁄TBS
 
OBJ_£t_˘y≥
,80L

	)

3375 
	#SN_£t˘_CRLNŸifiˇti⁄ResTBS
 "£t˘-CRLNŸifiˇti⁄ResTBS"

	)

3376 
	#NID_£t˘_CRLNŸifiˇti⁄ResTBS
 599

	)

3377 
	#OBJ_£t˘_CRLNŸifiˇti⁄ResTBS
 
OBJ_£t_˘y≥
,81L

	)

3379 
	#SN_£t˘_BCIDi°ributi⁄TBS
 "£t˘-BCIDi°ributi⁄TBS"

	)

3380 
	#NID_£t˘_BCIDi°ributi⁄TBS
 600

	)

3381 
	#OBJ_£t˘_BCIDi°ributi⁄TBS
 
OBJ_£t_˘y≥
,82L

	)

3383 
	#SN_£ãxt_gíCry±
 "£ãxt-gíCry±"

	)

3384 
	#LN_£ãxt_gíCry±
 "gíîi¯¸y±ogøm"

	)

3385 
	#NID_£ãxt_gíCry±
 601

	)

3386 
	#OBJ_£ãxt_gíCry±
 
OBJ_£t_msgExt
,1L

	)

3388 
	#SN_£ãxt_miAuth
 "£ãxt-miAuth"

	)

3389 
	#LN_£ãxt_miAuth
 "mîch™àöôüãdáuth"

	)

3390 
	#NID_£ãxt_miAuth
 602

	)

3391 
	#OBJ_£ãxt_miAuth
 
OBJ_£t_msgExt
,3L

	)

3393 
	#SN_£ãxt_pöSecuª
 "£ãxt-pöSecuª"

	)

3394 
	#NID_£ãxt_pöSecuª
 603

	)

3395 
	#OBJ_£ãxt_pöSecuª
 
OBJ_£t_msgExt
,4L

	)

3397 
	#SN_£ãxt_pöAny
 "£ãxt-pöAny"

	)

3398 
	#NID_£ãxt_pöAny
 604

	)

3399 
	#OBJ_£ãxt_pöAny
 
OBJ_£t_msgExt
,5L

	)

3401 
	#SN_£ãxt_åack2
 "£ãxt-åack2"

	)

3402 
	#NID_£ãxt_åack2
 605

	)

3403 
	#OBJ_£ãxt_åack2
 
OBJ_£t_msgExt
,7L

	)

3405 
	#SN_£ãxt_cv
 "£ãxt-cv"

	)

3406 
	#LN_£ãxt_cv
 "addôi⁄Æ vîifiˇti⁄"

	)

3407 
	#NID_£ãxt_cv
 606

	)

3408 
	#OBJ_£ãxt_cv
 
OBJ_£t_msgExt
,8L

	)

3410 
	#SN_£t_pﬁicy_roŸ
 "£t-pﬁicy-roŸ"

	)

3411 
	#NID_£t_pﬁicy_roŸ
 607

	)

3412 
	#OBJ_£t_pﬁicy_roŸ
 
OBJ_£t_pﬁicy
,0L

	)

3414 
	#SN_£tCext_hashedRoŸ
 "£tCext-hashedRoŸ"

	)

3415 
	#NID_£tCext_hashedRoŸ
 608

	)

3416 
	#OBJ_£tCext_hashedRoŸ
 
OBJ_£t_˚πExt
,0L

	)

3418 
	#SN_£tCext_˚πTy≥
 "£tCext-˚πTy≥"

	)

3419 
	#NID_£tCext_˚πTy≥
 609

	)

3420 
	#OBJ_£tCext_˚πTy≥
 
OBJ_£t_˚πExt
,1L

	)

3422 
	#SN_£tCext_mîchD©a
 "£tCext-mîchD©a"

	)

3423 
	#NID_£tCext_mîchD©a
 610

	)

3424 
	#OBJ_£tCext_mîchD©a
 
OBJ_£t_˚πExt
,2L

	)

3426 
	#SN_£tCext_cCîtRequúed
 "£tCext-cCîtRequúed"

	)

3427 
	#NID_£tCext_cCîtRequúed
 611

	)

3428 
	#OBJ_£tCext_cCîtRequúed
 
OBJ_£t_˚πExt
,3L

	)

3430 
	#SN_£tCext_tu¬ñög
 "£tCext-tu¬ñög"

	)

3431 
	#NID_£tCext_tu¬ñög
 612

	)

3432 
	#OBJ_£tCext_tu¬ñög
 
OBJ_£t_˚πExt
,4L

	)

3434 
	#SN_£tCext_£tExt
 "£tCext-£tExt"

	)

3435 
	#NID_£tCext_£tExt
 613

	)

3436 
	#OBJ_£tCext_£tExt
 
OBJ_£t_˚πExt
,5L

	)

3438 
	#SN_£tCext_£tQuÆf
 "£tCext-£tQuÆf"

	)

3439 
	#NID_£tCext_£tQuÆf
 614

	)

3440 
	#OBJ_£tCext_£tQuÆf
 
OBJ_£t_˚πExt
,6L

	)

3442 
	#SN_£tCext_PGWYˇ∑bûôõs
 "£tCext-PGWYˇ∑bûôõs"

	)

3443 
	#NID_£tCext_PGWYˇ∑bûôõs
 615

	)

3444 
	#OBJ_£tCext_PGWYˇ∑bûôõs
 
OBJ_£t_˚πExt
,7L

	)

3446 
	#SN_£tCext_TokíIdítifõr
 "£tCext-TokíIdítifõr"

	)

3447 
	#NID_£tCext_TokíIdítifõr
 616

	)

3448 
	#OBJ_£tCext_TokíIdítifõr
 
OBJ_£t_˚πExt
,8L

	)

3450 
	#SN_£tCext_Tøck2D©a
 "£tCext-Tøck2D©a"

	)

3451 
	#NID_£tCext_Tøck2D©a
 617

	)

3452 
	#OBJ_£tCext_Tøck2D©a
 
OBJ_£t_˚πExt
,9L

	)

3454 
	#SN_£tCext_TokíTy≥
 "£tCext-TokíTy≥"

	)

3455 
	#NID_£tCext_TokíTy≥
 618

	)

3456 
	#OBJ_£tCext_TokíTy≥
 
OBJ_£t_˚πExt
,10L

	)

3458 
	#SN_£tCext_IssuîC≠abûôõs
 "£tCext-IssuîC≠abûôõs"

	)

3459 
	#NID_£tCext_IssuîC≠abûôõs
 619

	)

3460 
	#OBJ_£tCext_IssuîC≠abûôõs
 
OBJ_£t_˚πExt
,11L

	)

3462 
	#SN_£tAâr_Cît
 "£tAâr-Cît"

	)

3463 
	#NID_£tAâr_Cît
 620

	)

3464 
	#OBJ_£tAâr_Cît
 
OBJ_£t_©å
,0L

	)

3466 
	#SN_£tAâr_PGWYˇp
 "£tAâr-PGWYˇp"

	)

3467 
	#LN_£tAâr_PGWYˇp
 "∑ymíàg©eway c≠abûôõs"

	)

3468 
	#NID_£tAâr_PGWYˇp
 621

	)

3469 
	#OBJ_£tAâr_PGWYˇp
 
OBJ_£t_©å
,1L

	)

3471 
	#SN_£tAâr_TokíTy≥
 "£tAâr-TokíTy≥"

	)

3472 
	#NID_£tAâr_TokíTy≥
 622

	)

3473 
	#OBJ_£tAâr_TokíTy≥
 
OBJ_£t_©å
,2L

	)

3475 
	#SN_£tAâr_IssC≠
 "£tAâr-IssC≠"

	)

3476 
	#LN_£tAâr_IssC≠
 "issuî c≠abûôõs"

	)

3477 
	#NID_£tAâr_IssC≠
 623

	)

3478 
	#OBJ_£tAâr_IssC≠
 
OBJ_£t_©å
,3L

	)

3480 
	#SN_£t_roŸKeyThumb
 "£t-roŸKeyThumb"

	)

3481 
	#NID_£t_roŸKeyThumb
 624

	)

3482 
	#OBJ_£t_roŸKeyThumb
 
OBJ_£tAâr_Cît
,0L

	)

3484 
	#SN_£t_addPﬁicy
 "£t-addPﬁicy"

	)

3485 
	#NID_£t_addPﬁicy
 625

	)

3486 
	#OBJ_£t_addPﬁicy
 
OBJ_£tAâr_Cît
,1L

	)

3488 
	#SN_£tAâr_Tokí_EMV
 "£tAâr-Tokí-EMV"

	)

3489 
	#NID_£tAâr_Tokí_EMV
 626

	)

3490 
	#OBJ_£tAâr_Tokí_EMV
 
OBJ_£tAâr_TokíTy≥
,1L

	)

3492 
	#SN_£tAâr_Tokí_B0Prime
 "£tAâr-Tokí-B0Prime"

	)

3493 
	#NID_£tAâr_Tokí_B0Prime
 627

	)

3494 
	#OBJ_£tAâr_Tokí_B0Prime
 
OBJ_£tAâr_TokíTy≥
,2L

	)

3496 
	#SN_£tAâr_IssC≠_CVM
 "£tAâr-IssC≠-CVM"

	)

3497 
	#NID_£tAâr_IssC≠_CVM
 628

	)

3498 
	#OBJ_£tAâr_IssC≠_CVM
 
OBJ_£tAâr_IssC≠
,3L

	)

3500 
	#SN_£tAâr_IssC≠_T2
 "£tAâr-IssC≠-T2"

	)

3501 
	#NID_£tAâr_IssC≠_T2
 629

	)

3502 
	#OBJ_£tAâr_IssC≠_T2
 
OBJ_£tAâr_IssC≠
,4L

	)

3504 
	#SN_£tAâr_IssC≠_Sig
 "£tAâr-IssC≠-Sig"

	)

3505 
	#NID_£tAâr_IssC≠_Sig
 630

	)

3506 
	#OBJ_£tAâr_IssC≠_Sig
 
OBJ_£tAâr_IssC≠
,5L

	)

3508 
	#SN_£tAâr_GíCry±grm
 "£tAâr-GíCry±grm"

	)

3509 
	#LN_£tAâr_GíCry±grm
 "gíî©ê¸y±ogøm"

	)

3510 
	#NID_£tAâr_GíCry±grm
 631

	)

3511 
	#OBJ_£tAâr_GíCry±grm
 
OBJ_£tAâr_IssC≠_CVM
,1L

	)

3513 
	#SN_£tAâr_T2Enc
 "£tAâr-T2Enc"

	)

3514 
	#LN_£tAâr_T2Enc
 "í¸y±edÅøck 2"

	)

3515 
	#NID_£tAâr_T2Enc
 632

	)

3516 
	#OBJ_£tAâr_T2Enc
 
OBJ_£tAâr_IssC≠_T2
,1L

	)

3518 
	#SN_£tAâr_T2˛óπxt
 "£tAâr-T2˛óπxt"

	)

3519 
	#LN_£tAâr_T2˛óπxt
 "˛óπexàåack 2"

	)

3520 
	#NID_£tAâr_T2˛óπxt
 633

	)

3521 
	#OBJ_£tAâr_T2˛óπxt
 
OBJ_£tAâr_IssC≠_T2
,2L

	)

3523 
	#SN_£tAâr_TokICCsig
 "£tAâr-TokICCsig"

	)

3524 
	#LN_£tAâr_TokICCsig
 "ICC o∏tokí sig«tuª"

	)

3525 
	#NID_£tAâr_TokICCsig
 634

	)

3526 
	#OBJ_£tAâr_TokICCsig
 
OBJ_£tAâr_IssC≠_Sig
,1L

	)

3528 
	#SN_£tAâr_SecDevSig
 "£tAâr-SecDevSig"

	)

3529 
	#LN_£tAâr_SecDevSig
 "£cuª devi˚ sig«tuª"

	)

3530 
	#NID_£tAâr_SecDevSig
 635

	)

3531 
	#OBJ_£tAâr_SecDevSig
 
OBJ_£tAâr_IssC≠_Sig
,2L

	)

3533 
	#SN_£t_bønd_IATA_ATA
 "£t-bønd-IATA-ATA"

	)

3534 
	#NID_£t_bønd_IATA_ATA
 636

	)

3535 
	#OBJ_£t_bønd_IATA_ATA
 
OBJ_£t_bønd
,1L

	)

3537 
	#SN_£t_bønd_Döîs
 "£t-bønd-Döîs"

	)

3538 
	#NID_£t_bønd_Döîs
 637

	)

3539 
	#OBJ_£t_bønd_Döîs
 
OBJ_£t_bønd
,30L

	)

3541 
	#SN_£t_bønd_AmîiˇnEx¥ess
 "£t-bønd-AmîiˇnEx¥ess"

	)

3542 
	#NID_£t_bønd_AmîiˇnEx¥ess
 638

	)

3543 
	#OBJ_£t_bønd_AmîiˇnEx¥ess
 
OBJ_£t_bønd
,34L

	)

3545 
	#SN_£t_bønd_JCB
 "£t-bønd-JCB"

	)

3546 
	#NID_£t_bønd_JCB
 639

	)

3547 
	#OBJ_£t_bønd_JCB
 
OBJ_£t_bønd
,35L

	)

3549 
	#SN_£t_bønd_Viß
 "£t-bønd-Viß"

	)

3550 
	#NID_£t_bønd_Viß
 640

	)

3551 
	#OBJ_£t_bønd_Viß
 
OBJ_£t_bønd
,4L

	)

3553 
	#SN_£t_bønd_Ma°îC¨d
 "£t-bønd-Ma°îC¨d"

	)

3554 
	#NID_£t_bønd_Ma°îC¨d
 641

	)

3555 
	#OBJ_£t_bønd_Ma°îC¨d
 
OBJ_£t_bønd
,5L

	)

3557 
	#SN_£t_bønd_Novus
 "£t-bønd-Novus"

	)

3558 
	#NID_£t_bønd_Novus
 642

	)

3559 
	#OBJ_£t_bønd_Novus
 
OBJ_£t_bønd
,6011L

	)

3561 
	#SN_des_cdmf
 "DES-CDMF"

	)

3562 
	#LN_des_cdmf
 "des-cdmf"

	)

3563 
	#NID_des_cdmf
 643

	)

3564 
	#OBJ_des_cdmf
 
OBJ_rßdsi
,3L,10L

	)

3566 
	#SN_rßOAEPEn¸y±i⁄SET
 "rßOAEPEn¸y±i⁄SET"

	)

3567 
	#NID_rßOAEPEn¸y±i⁄SET
 644

	)

3568 
	#OBJ_rßOAEPEn¸y±i⁄SET
 
OBJ_rßdsi
,1L,1L,6L

	)

3570 
	#SN_ù£c3
 "OakÀy-EC2N-3"

	)

3571 
	#LN_ù£c3
 "ù£c3"

	)

3572 
	#NID_ù£c3
 749

	)

3574 
	#SN_ù£c4
 "OakÀy-EC2N-4"

	)

3575 
	#LN_ù£c4
 "ù£c4"

	)

3576 
	#NID_ù£c4
 750

	)

3578 
	#SN_whúÕoﬁ
 "whúÕoﬁ"

	)

3579 
	#NID_whúÕoﬁ
 804

	)

3580 
	#OBJ_whúÕoﬁ
 
OBJ_iso
,0L,10118L,3L,0L,55L

	)

3582 
	#SN_¸y±›ro
 "¸y±›ro"

	)

3583 
	#NID_¸y±›ro
 805

	)

3584 
	#OBJ_¸y±›ro
 
OBJ_membî_body
,643L,2L,2L

	)

3586 
	#SN_¸y±ocom
 "¸y±ocom"

	)

3587 
	#NID_¸y±ocom
 806

	)

3588 
	#OBJ_¸y±ocom
 
OBJ_membî_body
,643L,2L,9L

	)

3590 
	#SN_id_Go°R3411_94_wôh_Go°R3410_2001
 "id-Go°R3411-94-wôh-Go°R3410-2001"

	)

3591 
	#LN_id_Go°R3411_94_wôh_Go°R3410_2001
 "GOST R 34.11-94 wôh GOST R 34.10-2001"

	)

3592 
	#NID_id_Go°R3411_94_wôh_Go°R3410_2001
 807

	)

3593 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_2001
 
OBJ_¸y±›ro
,3L

	)

3595 
	#SN_id_Go°R3411_94_wôh_Go°R3410_94
 "id-Go°R3411-94-wôh-Go°R3410-94"

	)

3596 
	#LN_id_Go°R3411_94_wôh_Go°R3410_94
 "GOST R 34.11-94 wôh GOST R 34.10-94"

	)

3597 
	#NID_id_Go°R3411_94_wôh_Go°R3410_94
 808

	)

3598 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_94
 
OBJ_¸y±›ro
,4L

	)

3600 
	#SN_id_Go°R3411_94
 "md_go°94"

	)

3601 
	#LN_id_Go°R3411_94
 "GOST R 34.11-94"

	)

3602 
	#NID_id_Go°R3411_94
 809

	)

3603 
	#OBJ_id_Go°R3411_94
 
OBJ_¸y±›ro
,9L

	)

3605 
	#SN_id_HMACGo°R3411_94
 "id-HMACGo°R3411-94"

	)

3606 
	#LN_id_HMACGo°R3411_94
 "HMAC GOST 34.11-94"

	)

3607 
	#NID_id_HMACGo°R3411_94
 810

	)

3608 
	#OBJ_id_HMACGo°R3411_94
 
OBJ_¸y±›ro
,10L

	)

3610 
	#SN_id_Go°R3410_2001
 "go°2001"

	)

3611 
	#LN_id_Go°R3410_2001
 "GOST R 34.10-2001"

	)

3612 
	#NID_id_Go°R3410_2001
 811

	)

3613 
	#OBJ_id_Go°R3410_2001
 
OBJ_¸y±›ro
,19L

	)

3615 
	#SN_id_Go°R3410_94
 "go°94"

	)

3616 
	#LN_id_Go°R3410_94
 "GOST R 34.10-94"

	)

3617 
	#NID_id_Go°R3410_94
 812

	)

3618 
	#OBJ_id_Go°R3410_94
 
OBJ_¸y±›ro
,20L

	)

3620 
	#SN_id_Go°28147_89
 "go°89"

	)

3621 
	#LN_id_Go°28147_89
 "GOST 28147-89"

	)

3622 
	#NID_id_Go°28147_89
 813

	)

3623 
	#OBJ_id_Go°28147_89
 
OBJ_¸y±›ro
,21L

	)

3625 
	#SN_go°89_˙t
 "go°89-˙t"

	)

3626 
	#NID_go°89_˙t
 814

	)

3628 
	#SN_id_Go°28147_89_MAC
 "go°-mac"

	)

3629 
	#LN_id_Go°28147_89_MAC
 "GOST 28147-89 MAC"

	)

3630 
	#NID_id_Go°28147_89_MAC
 815

	)

3631 
	#OBJ_id_Go°28147_89_MAC
 
OBJ_¸y±›ro
,22L

	)

3633 
	#SN_id_Go°R3411_94_¥f
 "¥f-go°r3411-94"

	)

3634 
	#LN_id_Go°R3411_94_¥f
 "GOST R 34.11-94 PRF"

	)

3635 
	#NID_id_Go°R3411_94_¥f
 816

	)

3636 
	#OBJ_id_Go°R3411_94_¥f
 
OBJ_¸y±›ro
,23L

	)

3638 
	#SN_id_Go°R3410_2001DH
 "id-Go°R3410-2001DH"

	)

3639 
	#LN_id_Go°R3410_2001DH
 "GOST R 34.10-2001 DH"

	)

3640 
	#NID_id_Go°R3410_2001DH
 817

	)

3641 
	#OBJ_id_Go°R3410_2001DH
 
OBJ_¸y±›ro
,98L

	)

3643 
	#SN_id_Go°R3410_94DH
 "id-Go°R3410-94DH"

	)

3644 
	#LN_id_Go°R3410_94DH
 "GOST R 34.10-94 DH"

	)

3645 
	#NID_id_Go°R3410_94DH
 818

	)

3646 
	#OBJ_id_Go°R3410_94DH
 
OBJ_¸y±›ro
,99L

	)

3648 
	#SN_id_Go°28147_89_Cry±oPro_KeyMeshög
 "id-Go°28147-89-Cry±oPro-KeyMeshög"

	)

3649 
	#NID_id_Go°28147_89_Cry±oPro_KeyMeshög
 819

	)

3650 
	#OBJ_id_Go°28147_89_Cry±oPro_KeyMeshög
 
OBJ_¸y±›ro
,14L,1L

	)

3652 
	#SN_id_Go°28147_89_N⁄e_KeyMeshög
 "id-Go°28147-89-N⁄e-KeyMeshög"

	)

3653 
	#NID_id_Go°28147_89_N⁄e_KeyMeshög
 820

	)

3654 
	#OBJ_id_Go°28147_89_N⁄e_KeyMeshög
 
OBJ_¸y±›ro
,14L,0L

	)

3656 
	#SN_id_Go°R3411_94_Te°P¨amSë
 "id-Go°R3411-94-Te°P¨amSë"

	)

3657 
	#NID_id_Go°R3411_94_Te°P¨amSë
 821

	)

3658 
	#OBJ_id_Go°R3411_94_Te°P¨amSë
 
OBJ_¸y±›ro
,30L,0L

	)

3660 
	#SN_id_Go°R3411_94_Cry±oProP¨amSë
 "id-Go°R3411-94-Cry±oProP¨amSë"

	)

3661 
	#NID_id_Go°R3411_94_Cry±oProP¨amSë
 822

	)

3662 
	#OBJ_id_Go°R3411_94_Cry±oProP¨amSë
 
OBJ_¸y±›ro
,30L,1L

	)

3664 
	#SN_id_Go°28147_89_Te°P¨amSë
 "id-Go°28147-89-Te°P¨amSë"

	)

3665 
	#NID_id_Go°28147_89_Te°P¨amSë
 823

	)

3666 
	#OBJ_id_Go°28147_89_Te°P¨amSë
 
OBJ_¸y±›ro
,31L,0L

	)

3668 
	#SN_id_Go°28147_89_Cry±oPro_A_P¨amSë
 "id-Go°28147-89-Cry±oPro-A-P¨amSë"

	)

3669 
	#NID_id_Go°28147_89_Cry±oPro_A_P¨amSë
 824

	)

3670 
	#OBJ_id_Go°28147_89_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,31L,1L

	)

3672 
	#SN_id_Go°28147_89_Cry±oPro_B_P¨amSë
 "id-Go°28147-89-Cry±oPro-B-P¨amSë"

	)

3673 
	#NID_id_Go°28147_89_Cry±oPro_B_P¨amSë
 825

	)

3674 
	#OBJ_id_Go°28147_89_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,31L,2L

	)

3676 
	#SN_id_Go°28147_89_Cry±oPro_C_P¨amSë
 "id-Go°28147-89-Cry±oPro-C-P¨amSë"

	)

3677 
	#NID_id_Go°28147_89_Cry±oPro_C_P¨amSë
 826

	)

3678 
	#OBJ_id_Go°28147_89_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,31L,3L

	)

3680 
	#SN_id_Go°28147_89_Cry±oPro_D_P¨amSë
 "id-Go°28147-89-Cry±oPro-D-P¨amSë"

	)

3681 
	#NID_id_Go°28147_89_Cry±oPro_D_P¨amSë
 827

	)

3682 
	#OBJ_id_Go°28147_89_Cry±oPro_D_P¨amSë
 
OBJ_¸y±›ro
,31L,4L

	)

3684 
	#SN_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 "id-Go°28147-89-Cry±oPro-Osˇr-1-1-P¨amSë"

	)

3685 
	#NID_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 828

	)

3686 
	#OBJ_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 
OBJ_¸y±›ro
,31L,5L

	)

3688 
	#SN_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 "id-Go°28147-89-Cry±oPro-Osˇr-1-0-P¨amSë"

	)

3689 
	#NID_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 829

	)

3690 
	#OBJ_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 
OBJ_¸y±›ro
,31L,6L

	)

3692 
	#SN_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 "id-Go°28147-89-Cry±oPro-RIC-1-P¨amSë"

	)

3693 
	#NID_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 830

	)

3694 
	#OBJ_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 
OBJ_¸y±›ro
,31L,7L

	)

3696 
	#SN_id_Go°R3410_94_Te°P¨amSë
 "id-Go°R3410-94-Te°P¨amSë"

	)

3697 
	#NID_id_Go°R3410_94_Te°P¨amSë
 831

	)

3698 
	#OBJ_id_Go°R3410_94_Te°P¨amSë
 
OBJ_¸y±›ro
,32L,0L

	)

3700 
	#SN_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 "id-Go°R3410-94-Cry±oPro-A-P¨amSë"

	)

3701 
	#NID_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 832

	)

3702 
	#OBJ_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,32L,2L

	)

3704 
	#SN_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 "id-Go°R3410-94-Cry±oPro-B-P¨amSë"

	)

3705 
	#NID_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 833

	)

3706 
	#OBJ_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,32L,3L

	)

3708 
	#SN_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 "id-Go°R3410-94-Cry±oPro-C-P¨amSë"

	)

3709 
	#NID_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 834

	)

3710 
	#OBJ_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,32L,4L

	)

3712 
	#SN_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 "id-Go°R3410-94-Cry±oPro-D-P¨amSë"

	)

3713 
	#NID_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 835

	)

3714 
	#OBJ_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 
OBJ_¸y±›ro
,32L,5L

	)

3716 
	#SN_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchA-P¨amSë"

	)

3717 
	#NID_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 836

	)

3718 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 
OBJ_¸y±›ro
,33L,1L

	)

3720 
	#SN_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchB-P¨amSë"

	)

3721 
	#NID_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 837

	)

3722 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 
OBJ_¸y±›ro
,33L,2L

	)

3724 
	#SN_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchC-P¨amSë"

	)

3725 
	#NID_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 838

	)

3726 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 
OBJ_¸y±›ro
,33L,3L

	)

3728 
	#SN_id_Go°R3410_2001_Te°P¨amSë
 "id-Go°R3410-2001-Te°P¨amSë"

	)

3729 
	#NID_id_Go°R3410_2001_Te°P¨amSë
 839

	)

3730 
	#OBJ_id_Go°R3410_2001_Te°P¨amSë
 
OBJ_¸y±›ro
,35L,0L

	)

3732 
	#SN_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-A-P¨amSë"

	)

3733 
	#NID_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 840

	)

3734 
	#OBJ_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,35L,1L

	)

3736 
	#SN_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-B-P¨amSë"

	)

3737 
	#NID_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 841

	)

3738 
	#OBJ_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,35L,2L

	)

3740 
	#SN_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-C-P¨amSë"

	)

3741 
	#NID_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 842

	)

3742 
	#OBJ_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,35L,3L

	)

3744 
	#SN_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-XchA-P¨amSë"

	)

3745 
	#NID_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 843

	)

3746 
	#OBJ_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 
OBJ_¸y±›ro
,36L,0L

	)

3748 
	#SN_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-XchB-P¨amSë"

	)

3749 
	#NID_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 844

	)

3750 
	#OBJ_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 
OBJ_¸y±›ro
,36L,1L

	)

3752 
	#SN_id_Go°R3410_94_a
 "id-Go°R3410-94-a"

	)

3753 
	#NID_id_Go°R3410_94_a
 845

	)

3754 
	#OBJ_id_Go°R3410_94_a
 
OBJ_id_Go°R3410_94
,1L

	)

3756 
	#SN_id_Go°R3410_94_aBis
 "id-Go°R3410-94-aBis"

	)

3757 
	#NID_id_Go°R3410_94_aBis
 846

	)

3758 
	#OBJ_id_Go°R3410_94_aBis
 
OBJ_id_Go°R3410_94
,2L

	)

3760 
	#SN_id_Go°R3410_94_b
 "id-Go°R3410-94-b"

	)

3761 
	#NID_id_Go°R3410_94_b
 847

	)

3762 
	#OBJ_id_Go°R3410_94_b
 
OBJ_id_Go°R3410_94
,3L

	)

3764 
	#SN_id_Go°R3410_94_bBis
 "id-Go°R3410-94-bBis"

	)

3765 
	#NID_id_Go°R3410_94_bBis
 848

	)

3766 
	#OBJ_id_Go°R3410_94_bBis
 
OBJ_id_Go°R3410_94
,4L

	)

3768 
	#SN_id_Go°28147_89_cc
 "id-Go°28147-89-cc"

	)

3769 
	#LN_id_Go°28147_89_cc
 "GOST 28147-89 Cry±ocom P¨amSë"

	)

3770 
	#NID_id_Go°28147_89_cc
 849

	)

3771 
	#OBJ_id_Go°28147_89_cc
 
OBJ_¸y±ocom
,1L,6L,1L

	)

3773 
	#SN_id_Go°R3410_94_cc
 "go°94cc"

	)

3774 
	#LN_id_Go°R3410_94_cc
 "GOST 34.10-94 Cry±ocom"

	)

3775 
	#NID_id_Go°R3410_94_cc
 850

	)

3776 
	#OBJ_id_Go°R3410_94_cc
 
OBJ_¸y±ocom
,1L,5L,3L

	)

3778 
	#SN_id_Go°R3410_2001_cc
 "go°2001cc"

	)

3779 
	#LN_id_Go°R3410_2001_cc
 "GOST 34.10-2001 Cry±ocom"

	)

3780 
	#NID_id_Go°R3410_2001_cc
 851

	)

3781 
	#OBJ_id_Go°R3410_2001_cc
 
OBJ_¸y±ocom
,1L,5L,4L

	)

3783 
	#SN_id_Go°R3411_94_wôh_Go°R3410_94_cc
 "id-Go°R3411-94-wôh-Go°R3410-94-cc"

	)

3784 
	#LN_id_Go°R3411_94_wôh_Go°R3410_94_cc
 "GOST R 34.11-94 wôh GOST R 34.10-94 Cry±ocom"

	)

3785 
	#NID_id_Go°R3411_94_wôh_Go°R3410_94_cc
 852

	)

3786 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_94_cc
 
OBJ_¸y±ocom
,1L,3L,3L

	)

3788 
	#SN_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 "id-Go°R3411-94-wôh-Go°R3410-2001-cc"

	)

3789 
	#LN_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 "GOST R 34.11-94 wôh GOST R 34.10-2001 Cry±ocom"

	)

3790 
	#NID_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 853

	)

3791 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 
OBJ_¸y±ocom
,1L,3L,4L

	)

3793 
	#SN_id_Go°R3410_2001_P¨amSë_cc
 "id-Go°R3410-2001-P¨amSë-cc"

	)

3794 
	#LN_id_Go°R3410_2001_P¨amSë_cc
 "GOST R 3410-2001 P¨amëî Së Cry±ocom"

	)

3795 
	#NID_id_Go°R3410_2001_P¨amSë_cc
 854

	)

3796 
	#OBJ_id_Go°R3410_2001_P¨amSë_cc
 
OBJ_¸y±ocom
,1L,8L,1L

	)

3798 
	#SN_ˇmñlü_128_cbc
 "CAMELLIA-128-CBC"

	)

3799 
	#LN_ˇmñlü_128_cbc
 "ˇmñlü-128-cbc"

	)

3800 
	#NID_ˇmñlü_128_cbc
 751

	)

3801 
	#OBJ_ˇmñlü_128_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,2L

	)

3803 
	#SN_ˇmñlü_192_cbc
 "CAMELLIA-192-CBC"

	)

3804 
	#LN_ˇmñlü_192_cbc
 "ˇmñlü-192-cbc"

	)

3805 
	#NID_ˇmñlü_192_cbc
 752

	)

3806 
	#OBJ_ˇmñlü_192_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,3L

	)

3808 
	#SN_ˇmñlü_256_cbc
 "CAMELLIA-256-CBC"

	)

3809 
	#LN_ˇmñlü_256_cbc
 "ˇmñlü-256-cbc"

	)

3810 
	#NID_ˇmñlü_256_cbc
 753

	)

3811 
	#OBJ_ˇmñlü_256_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,4L

	)

3813 
	#OBJ_¡t_ds
 0L,3L,4401L,5L

	)

3815 
	#OBJ_ˇmñlü
 
OBJ_¡t_ds
,3L,1L,9L

	)

3817 
	#SN_ˇmñlü_128_ecb
 "CAMELLIA-128-ECB"

	)

3818 
	#LN_ˇmñlü_128_ecb
 "ˇmñlü-128-ecb"

	)

3819 
	#NID_ˇmñlü_128_ecb
 754

	)

3820 
	#OBJ_ˇmñlü_128_ecb
 
OBJ_ˇmñlü
,1L

	)

3822 
	#SN_ˇmñlü_128_ofb128
 "CAMELLIA-128-OFB"

	)

3823 
	#LN_ˇmñlü_128_ofb128
 "ˇmñlü-128-ofb"

	)

3824 
	#NID_ˇmñlü_128_ofb128
 766

	)

3825 
	#OBJ_ˇmñlü_128_ofb128
 
OBJ_ˇmñlü
,3L

	)

3827 
	#SN_ˇmñlü_128_cfb128
 "CAMELLIA-128-CFB"

	)

3828 
	#LN_ˇmñlü_128_cfb128
 "ˇmñlü-128-cfb"

	)

3829 
	#NID_ˇmñlü_128_cfb128
 757

	)

3830 
	#OBJ_ˇmñlü_128_cfb128
 
OBJ_ˇmñlü
,4L

	)

3832 
	#SN_ˇmñlü_192_ecb
 "CAMELLIA-192-ECB"

	)

3833 
	#LN_ˇmñlü_192_ecb
 "ˇmñlü-192-ecb"

	)

3834 
	#NID_ˇmñlü_192_ecb
 755

	)

3835 
	#OBJ_ˇmñlü_192_ecb
 
OBJ_ˇmñlü
,21L

	)

3837 
	#SN_ˇmñlü_192_ofb128
 "CAMELLIA-192-OFB"

	)

3838 
	#LN_ˇmñlü_192_ofb128
 "ˇmñlü-192-ofb"

	)

3839 
	#NID_ˇmñlü_192_ofb128
 767

	)

3840 
	#OBJ_ˇmñlü_192_ofb128
 
OBJ_ˇmñlü
,23L

	)

3842 
	#SN_ˇmñlü_192_cfb128
 "CAMELLIA-192-CFB"

	)

3843 
	#LN_ˇmñlü_192_cfb128
 "ˇmñlü-192-cfb"

	)

3844 
	#NID_ˇmñlü_192_cfb128
 758

	)

3845 
	#OBJ_ˇmñlü_192_cfb128
 
OBJ_ˇmñlü
,24L

	)

3847 
	#SN_ˇmñlü_256_ecb
 "CAMELLIA-256-ECB"

	)

3848 
	#LN_ˇmñlü_256_ecb
 "ˇmñlü-256-ecb"

	)

3849 
	#NID_ˇmñlü_256_ecb
 756

	)

3850 
	#OBJ_ˇmñlü_256_ecb
 
OBJ_ˇmñlü
,41L

	)

3852 
	#SN_ˇmñlü_256_ofb128
 "CAMELLIA-256-OFB"

	)

3853 
	#LN_ˇmñlü_256_ofb128
 "ˇmñlü-256-ofb"

	)

3854 
	#NID_ˇmñlü_256_ofb128
 768

	)

3855 
	#OBJ_ˇmñlü_256_ofb128
 
OBJ_ˇmñlü
,43L

	)

3857 
	#SN_ˇmñlü_256_cfb128
 "CAMELLIA-256-CFB"

	)

3858 
	#LN_ˇmñlü_256_cfb128
 "ˇmñlü-256-cfb"

	)

3859 
	#NID_ˇmñlü_256_cfb128
 759

	)

3860 
	#OBJ_ˇmñlü_256_cfb128
 
OBJ_ˇmñlü
,44L

	)

3862 
	#SN_ˇmñlü_128_cfb1
 "CAMELLIA-128-CFB1"

	)

3863 
	#LN_ˇmñlü_128_cfb1
 "ˇmñlü-128-cfb1"

	)

3864 
	#NID_ˇmñlü_128_cfb1
 760

	)

3866 
	#SN_ˇmñlü_192_cfb1
 "CAMELLIA-192-CFB1"

	)

3867 
	#LN_ˇmñlü_192_cfb1
 "ˇmñlü-192-cfb1"

	)

3868 
	#NID_ˇmñlü_192_cfb1
 761

	)

3870 
	#SN_ˇmñlü_256_cfb1
 "CAMELLIA-256-CFB1"

	)

3871 
	#LN_ˇmñlü_256_cfb1
 "ˇmñlü-256-cfb1"

	)

3872 
	#NID_ˇmñlü_256_cfb1
 762

	)

3874 
	#SN_ˇmñlü_128_cfb8
 "CAMELLIA-128-CFB8"

	)

3875 
	#LN_ˇmñlü_128_cfb8
 "ˇmñlü-128-cfb8"

	)

3876 
	#NID_ˇmñlü_128_cfb8
 763

	)

3878 
	#SN_ˇmñlü_192_cfb8
 "CAMELLIA-192-CFB8"

	)

3879 
	#LN_ˇmñlü_192_cfb8
 "ˇmñlü-192-cfb8"

	)

3880 
	#NID_ˇmñlü_192_cfb8
 764

	)

3882 
	#SN_ˇmñlü_256_cfb8
 "CAMELLIA-256-CFB8"

	)

3883 
	#LN_ˇmñlü_256_cfb8
 "ˇmñlü-256-cfb8"

	)

3884 
	#NID_ˇmñlü_256_cfb8
 765

	)

3886 
	#SN_kiß
 "KISA"

	)

3887 
	#LN_kiß
 "kiß"

	)

3888 
	#NID_kiß
 773

	)

3889 
	#OBJ_kiß
 
OBJ_membî_body
,410L,200004L

	)

3891 
	#SN_£ed_ecb
 "SEED-ECB"

	)

3892 
	#LN_£ed_ecb
 "£ed-ecb"

	)

3893 
	#NID_£ed_ecb
 776

	)

3894 
	#OBJ_£ed_ecb
 
OBJ_kiß
,1L,3L

	)

3896 
	#SN_£ed_cbc
 "SEED-CBC"

	)

3897 
	#LN_£ed_cbc
 "£ed-cbc"

	)

3898 
	#NID_£ed_cbc
 777

	)

3899 
	#OBJ_£ed_cbc
 
OBJ_kiß
,1L,4L

	)

3901 
	#SN_£ed_cfb128
 "SEED-CFB"

	)

3902 
	#LN_£ed_cfb128
 "£ed-cfb"

	)

3903 
	#NID_£ed_cfb128
 779

	)

3904 
	#OBJ_£ed_cfb128
 
OBJ_kiß
,1L,5L

	)

3906 
	#SN_£ed_ofb128
 "SEED-OFB"

	)

3907 
	#LN_£ed_ofb128
 "£ed-ofb"

	)

3908 
	#NID_£ed_ofb128
 778

	)

3909 
	#OBJ_£ed_ofb128
 
OBJ_kiß
,1L,6L

	)

3911 
	#SN_hmac
 "HMAC"

	)

3912 
	#LN_hmac
 "hmac"

	)

3913 
	#NID_hmac
 855

	)

	@/usr/include/openssl/objects.h

59 #i‚de‡
HEADER_OBJECTS_H


60 
	#HEADER_OBJECTS_H


	)

62 
	#USE_OBJ_MAC


	)

64 #ifde‡
USE_OBJ_MAC


65 
	~<›ís¶/obj_mac.h
>

67 
	#SN_undef
 "UNDEF"

	)

68 
	#LN_undef
 "undeföed"

	)

69 
	#NID_undef
 0

	)

70 
	#OBJ_undef
 0L

	)

72 
	#SN_Alg‹ôhm
 "Alg‹ôhm"

	)

73 
	#LN_Æg‹ôhm
 "Æg‹ôhm"

	)

74 
	#NID_Æg‹ôhm
 38

	)

75 
	#OBJ_Æg‹ôhm
 1L,3L,14L,3L,2L

	)

77 
	#LN_rßdsi
 "rßdsi"

	)

78 
	#NID_rßdsi
 1

	)

79 
	#OBJ_rßdsi
 1L,2L,840L,113549L

	)

81 
	#LN_pkcs
 "pkcs"

	)

82 
	#NID_pkcs
 2

	)

83 
	#OBJ_pkcs
 
OBJ_rßdsi
,1L

	)

85 
	#SN_md2
 "MD2"

	)

86 
	#LN_md2
 "md2"

	)

87 
	#NID_md2
 3

	)

88 
	#OBJ_md2
 
OBJ_rßdsi
,2L,2L

	)

90 
	#SN_md5
 "MD5"

	)

91 
	#LN_md5
 "md5"

	)

92 
	#NID_md5
 4

	)

93 
	#OBJ_md5
 
OBJ_rßdsi
,2L,5L

	)

95 
	#SN_rc4
 "RC4"

	)

96 
	#LN_rc4
 "rc4"

	)

97 
	#NID_rc4
 5

	)

98 
	#OBJ_rc4
 
OBJ_rßdsi
,3L,4L

	)

100 
	#LN_rßEn¸y±i⁄
 "rßEn¸y±i⁄"

	)

101 
	#NID_rßEn¸y±i⁄
 6

	)

102 
	#OBJ_rßEn¸y±i⁄
 
OBJ_pkcs
,1L,1L

	)

104 
	#SN_md2WôhRSAEn¸y±i⁄
 "RSA-MD2"

	)

105 
	#LN_md2WôhRSAEn¸y±i⁄
 "md2WôhRSAEn¸y±i⁄"

	)

106 
	#NID_md2WôhRSAEn¸y±i⁄
 7

	)

107 
	#OBJ_md2WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,2L

	)

109 
	#SN_md5WôhRSAEn¸y±i⁄
 "RSA-MD5"

	)

110 
	#LN_md5WôhRSAEn¸y±i⁄
 "md5WôhRSAEn¸y±i⁄"

	)

111 
	#NID_md5WôhRSAEn¸y±i⁄
 8

	)

112 
	#OBJ_md5WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,4L

	)

114 
	#SN_pbeWôhMD2AndDES_CBC
 "PBE-MD2-DES"

	)

115 
	#LN_pbeWôhMD2AndDES_CBC
 "pbeWôhMD2AndDES-CBC"

	)

116 
	#NID_pbeWôhMD2AndDES_CBC
 9

	)

117 
	#OBJ_pbeWôhMD2AndDES_CBC
 
OBJ_pkcs
,5L,1L

	)

119 
	#SN_pbeWôhMD5AndDES_CBC
 "PBE-MD5-DES"

	)

120 
	#LN_pbeWôhMD5AndDES_CBC
 "pbeWôhMD5AndDES-CBC"

	)

121 
	#NID_pbeWôhMD5AndDES_CBC
 10

	)

122 
	#OBJ_pbeWôhMD5AndDES_CBC
 
OBJ_pkcs
,5L,3L

	)

124 
	#LN_X500
 "X500"

	)

125 
	#NID_X500
 11

	)

126 
	#OBJ_X500
 2L,5L

	)

128 
	#LN_X509
 "X509"

	)

129 
	#NID_X509
 12

	)

130 
	#OBJ_X509
 
OBJ_X500
,4L

	)

132 
	#SN_comm⁄Name
 "CN"

	)

133 
	#LN_comm⁄Name
 "comm⁄Name"

	)

134 
	#NID_comm⁄Name
 13

	)

135 
	#OBJ_comm⁄Name
 
OBJ_X509
,3L

	)

137 
	#SN_cou¡ryName
 "C"

	)

138 
	#LN_cou¡ryName
 "cou¡ryName"

	)

139 
	#NID_cou¡ryName
 14

	)

140 
	#OBJ_cou¡ryName
 
OBJ_X509
,6L

	)

142 
	#SN_loˇlôyName
 "L"

	)

143 
	#LN_loˇlôyName
 "loˇlôyName"

	)

144 
	#NID_loˇlôyName
 15

	)

145 
	#OBJ_loˇlôyName
 
OBJ_X509
,7L

	)

150 
	#SN_°©eOrProvö˚Name
 "ST"

	)

151 
	#LN_°©eOrProvö˚Name
 "°©eOrProvö˚Name"

	)

152 
	#NID_°©eOrProvö˚Name
 16

	)

153 
	#OBJ_°©eOrProvö˚Name
 
OBJ_X509
,8L

	)

155 
	#SN_‹g™iz©i⁄Name
 "O"

	)

156 
	#LN_‹g™iz©i⁄Name
 "‹g™iz©i⁄Name"

	)

157 
	#NID_‹g™iz©i⁄Name
 17

	)

158 
	#OBJ_‹g™iz©i⁄Name
 
OBJ_X509
,10L

	)

160 
	#SN_‹g™iz©i⁄ÆUnôName
 "OU"

	)

161 
	#LN_‹g™iz©i⁄ÆUnôName
 "‹g™iz©i⁄ÆUnôName"

	)

162 
	#NID_‹g™iz©i⁄ÆUnôName
 18

	)

163 
	#OBJ_‹g™iz©i⁄ÆUnôName
 
OBJ_X509
,11L

	)

165 
	#SN_rß
 "RSA"

	)

166 
	#LN_rß
 "rß"

	)

167 
	#NID_rß
 19

	)

168 
	#OBJ_rß
 
OBJ_X500
,8L,1L,1L

	)

170 
	#LN_pkcs7
 "pkcs7"

	)

171 
	#NID_pkcs7
 20

	)

172 
	#OBJ_pkcs7
 
OBJ_pkcs
,7L

	)

174 
	#LN_pkcs7_d©a
 "pkcs7-d©a"

	)

175 
	#NID_pkcs7_d©a
 21

	)

176 
	#OBJ_pkcs7_d©a
 
OBJ_pkcs7
,1L

	)

178 
	#LN_pkcs7_sig√d
 "pkcs7-sig√dD©a"

	)

179 
	#NID_pkcs7_sig√d
 22

	)

180 
	#OBJ_pkcs7_sig√d
 
OBJ_pkcs7
,2L

	)

182 
	#LN_pkcs7_ívñ›ed
 "pkcs7-ívñ›edD©a"

	)

183 
	#NID_pkcs7_ívñ›ed
 23

	)

184 
	#OBJ_pkcs7_ívñ›ed
 
OBJ_pkcs7
,3L

	)

186 
	#LN_pkcs7_sig√dAndEnvñ›ed
 "pkcs7-sig√dAndEnvñ›edD©a"

	)

187 
	#NID_pkcs7_sig√dAndEnvñ›ed
 24

	)

188 
	#OBJ_pkcs7_sig√dAndEnvñ›ed
 
OBJ_pkcs7
,4L

	)

190 
	#LN_pkcs7_dige°
 "pkcs7-dige°D©a"

	)

191 
	#NID_pkcs7_dige°
 25

	)

192 
	#OBJ_pkcs7_dige°
 
OBJ_pkcs7
,5L

	)

194 
	#LN_pkcs7_í¸y±ed
 "pkcs7-í¸y±edD©a"

	)

195 
	#NID_pkcs7_í¸y±ed
 26

	)

196 
	#OBJ_pkcs7_í¸y±ed
 
OBJ_pkcs7
,6L

	)

198 
	#LN_pkcs3
 "pkcs3"

	)

199 
	#NID_pkcs3
 27

	)

200 
	#OBJ_pkcs3
 
OBJ_pkcs
,3L

	)

202 
	#LN_dhKeyAgªemít
 "dhKeyAgªemít"

	)

203 
	#NID_dhKeyAgªemít
 28

	)

204 
	#OBJ_dhKeyAgªemít
 
OBJ_pkcs3
,1L

	)

206 
	#SN_des_ecb
 "DES-ECB"

	)

207 
	#LN_des_ecb
 "des-ecb"

	)

208 
	#NID_des_ecb
 29

	)

209 
	#OBJ_des_ecb
 
OBJ_Æg‹ôhm
,6L

	)

211 
	#SN_des_cfb64
 "DES-CFB"

	)

212 
	#LN_des_cfb64
 "des-cfb"

	)

213 
	#NID_des_cfb64
 30

	)

215 
	#OBJ_des_cfb64
 
OBJ_Æg‹ôhm
,9L

	)

217 
	#SN_des_cbc
 "DES-CBC"

	)

218 
	#LN_des_cbc
 "des-cbc"

	)

219 
	#NID_des_cbc
 31

	)

221 
	#OBJ_des_cbc
 
OBJ_Æg‹ôhm
,7L

	)

223 
	#SN_des_ede
 "DES-EDE"

	)

224 
	#LN_des_ede
 "des-ede"

	)

225 
	#NID_des_ede
 32

	)

227 
	#OBJ_des_ede
 
OBJ_Æg‹ôhm
,17L

	)

229 
	#SN_des_ede3
 "DES-EDE3"

	)

230 
	#LN_des_ede3
 "des-ede3"

	)

231 
	#NID_des_ede3
 33

	)

233 
	#SN_idó_cbc
 "IDEA-CBC"

	)

234 
	#LN_idó_cbc
 "idó-cbc"

	)

235 
	#NID_idó_cbc
 34

	)

236 
	#OBJ_idó_cbc
 1L,3L,6L,1L,4L,1L,188L,7L,1L,1L,2L

	)

238 
	#SN_idó_cfb64
 "IDEA-CFB"

	)

239 
	#LN_idó_cfb64
 "idó-cfb"

	)

240 
	#NID_idó_cfb64
 35

	)

242 
	#SN_idó_ecb
 "IDEA-ECB"

	)

243 
	#LN_idó_ecb
 "idó-ecb"

	)

244 
	#NID_idó_ecb
 36

	)

246 
	#SN_rc2_cbc
 "RC2-CBC"

	)

247 
	#LN_rc2_cbc
 "rc2-cbc"

	)

248 
	#NID_rc2_cbc
 37

	)

249 
	#OBJ_rc2_cbc
 
OBJ_rßdsi
,3L,2L

	)

251 
	#SN_rc2_ecb
 "RC2-ECB"

	)

252 
	#LN_rc2_ecb
 "rc2-ecb"

	)

253 
	#NID_rc2_ecb
 38

	)

255 
	#SN_rc2_cfb64
 "RC2-CFB"

	)

256 
	#LN_rc2_cfb64
 "rc2-cfb"

	)

257 
	#NID_rc2_cfb64
 39

	)

259 
	#SN_rc2_ofb64
 "RC2-OFB"

	)

260 
	#LN_rc2_ofb64
 "rc2-ofb"

	)

261 
	#NID_rc2_ofb64
 40

	)

263 
	#SN_sha
 "SHA"

	)

264 
	#LN_sha
 "sha"

	)

265 
	#NID_sha
 41

	)

266 
	#OBJ_sha
 
OBJ_Æg‹ôhm
,18L

	)

268 
	#SN_shaWôhRSAEn¸y±i⁄
 "RSA-SHA"

	)

269 
	#LN_shaWôhRSAEn¸y±i⁄
 "shaWôhRSAEn¸y±i⁄"

	)

270 
	#NID_shaWôhRSAEn¸y±i⁄
 42

	)

271 
	#OBJ_shaWôhRSAEn¸y±i⁄
 
OBJ_Æg‹ôhm
,15L

	)

273 
	#SN_des_ede_cbc
 "DES-EDE-CBC"

	)

274 
	#LN_des_ede_cbc
 "des-ede-cbc"

	)

275 
	#NID_des_ede_cbc
 43

	)

277 
	#SN_des_ede3_cbc
 "DES-EDE3-CBC"

	)

278 
	#LN_des_ede3_cbc
 "des-ede3-cbc"

	)

279 
	#NID_des_ede3_cbc
 44

	)

280 
	#OBJ_des_ede3_cbc
 
OBJ_rßdsi
,3L,7L

	)

282 
	#SN_des_ofb64
 "DES-OFB"

	)

283 
	#LN_des_ofb64
 "des-ofb"

	)

284 
	#NID_des_ofb64
 45

	)

285 
	#OBJ_des_ofb64
 
OBJ_Æg‹ôhm
,8L

	)

287 
	#SN_idó_ofb64
 "IDEA-OFB"

	)

288 
	#LN_idó_ofb64
 "idó-ofb"

	)

289 
	#NID_idó_ofb64
 46

	)

291 
	#LN_pkcs9
 "pkcs9"

	)

292 
	#NID_pkcs9
 47

	)

293 
	#OBJ_pkcs9
 
OBJ_pkcs
,9L

	)

295 
	#SN_pkcs9_emaûAddªss
 "Emaû"

	)

296 
	#LN_pkcs9_emaûAddªss
 "emaûAddªss"

	)

297 
	#NID_pkcs9_emaûAddªss
 48

	)

298 
	#OBJ_pkcs9_emaûAddªss
 
OBJ_pkcs9
,1L

	)

300 
	#LN_pkcs9_un°ru˘uªdName
 "un°ru˘uªdName"

	)

301 
	#NID_pkcs9_un°ru˘uªdName
 49

	)

302 
	#OBJ_pkcs9_un°ru˘uªdName
 
OBJ_pkcs9
,2L

	)

304 
	#LN_pkcs9_c⁄ã¡Ty≥
 "c⁄ã¡Ty≥"

	)

305 
	#NID_pkcs9_c⁄ã¡Ty≥
 50

	)

306 
	#OBJ_pkcs9_c⁄ã¡Ty≥
 
OBJ_pkcs9
,3L

	)

308 
	#LN_pkcs9_mesßgeDige°
 "mesßgeDige°"

	)

309 
	#NID_pkcs9_mesßgeDige°
 51

	)

310 
	#OBJ_pkcs9_mesßgeDige°
 
OBJ_pkcs9
,4L

	)

312 
	#LN_pkcs9_signögTime
 "signögTime"

	)

313 
	#NID_pkcs9_signögTime
 52

	)

314 
	#OBJ_pkcs9_signögTime
 
OBJ_pkcs9
,5L

	)

316 
	#LN_pkcs9_cou¡îsig«tuª
 "cou¡îsig«tuª"

	)

317 
	#NID_pkcs9_cou¡îsig«tuª
 53

	)

318 
	#OBJ_pkcs9_cou¡îsig«tuª
 
OBJ_pkcs9
,6L

	)

320 
	#LN_pkcs9_chÆÀngePassw‹d
 "chÆÀngePassw‹d"

	)

321 
	#NID_pkcs9_chÆÀngePassw‹d
 54

	)

322 
	#OBJ_pkcs9_chÆÀngePassw‹d
 
OBJ_pkcs9
,7L

	)

324 
	#LN_pkcs9_un°ru˘uªdAddªss
 "un°ru˘uªdAddªss"

	)

325 
	#NID_pkcs9_un°ru˘uªdAddªss
 55

	)

326 
	#OBJ_pkcs9_un°ru˘uªdAddªss
 
OBJ_pkcs9
,8L

	)

328 
	#LN_pkcs9_extCîtAâribuãs
 "exãndedCîtifiˇãAâribuãs"

	)

329 
	#NID_pkcs9_extCîtAâribuãs
 56

	)

330 
	#OBJ_pkcs9_extCîtAâribuãs
 
OBJ_pkcs9
,9L

	)

332 
	#SN_√tsˇ≥
 "Nësˇ≥"

	)

333 
	#LN_√tsˇ≥
 "Nësˇ≥ Communiˇti⁄†C‹p."

	)

334 
	#NID_√tsˇ≥
 57

	)

335 
	#OBJ_√tsˇ≥
 2L,16L,840L,1L,113730L

	)

337 
	#SN_√tsˇ≥_˚π_exãnsi⁄
 "nsCîtExt"

	)

338 
	#LN_√tsˇ≥_˚π_exãnsi⁄
 "Nësˇ≥ Cîtifiˇã Exãnsi⁄"

	)

339 
	#NID_√tsˇ≥_˚π_exãnsi⁄
 58

	)

340 
	#OBJ_√tsˇ≥_˚π_exãnsi⁄
 
OBJ_√tsˇ≥
,1L

	)

342 
	#SN_√tsˇ≥_d©a_ty≥
 "nsD©aTy≥"

	)

343 
	#LN_√tsˇ≥_d©a_ty≥
 "Nësˇ≥ D©®Ty≥"

	)

344 
	#NID_√tsˇ≥_d©a_ty≥
 59

	)

345 
	#OBJ_√tsˇ≥_d©a_ty≥
 
OBJ_√tsˇ≥
,2L

	)

347 
	#SN_des_ede_cfb64
 "DES-EDE-CFB"

	)

348 
	#LN_des_ede_cfb64
 "des-ede-cfb"

	)

349 
	#NID_des_ede_cfb64
 60

	)

351 
	#SN_des_ede3_cfb64
 "DES-EDE3-CFB"

	)

352 
	#LN_des_ede3_cfb64
 "des-ede3-cfb"

	)

353 
	#NID_des_ede3_cfb64
 61

	)

355 
	#SN_des_ede_ofb64
 "DES-EDE-OFB"

	)

356 
	#LN_des_ede_ofb64
 "des-ede-ofb"

	)

357 
	#NID_des_ede_ofb64
 62

	)

359 
	#SN_des_ede3_ofb64
 "DES-EDE3-OFB"

	)

360 
	#LN_des_ede3_ofb64
 "des-ede3-ofb"

	)

361 
	#NID_des_ede3_ofb64
 63

	)

364 
	#SN_sha1
 "SHA1"

	)

365 
	#LN_sha1
 "sha1"

	)

366 
	#NID_sha1
 64

	)

367 
	#OBJ_sha1
 
OBJ_Æg‹ôhm
,26L

	)

371 
	#SN_sha1WôhRSAEn¸y±i⁄
 "RSA-SHA1"

	)

372 
	#LN_sha1WôhRSAEn¸y±i⁄
 "sha1WôhRSAEn¸y±i⁄"

	)

373 
	#NID_sha1WôhRSAEn¸y±i⁄
 65

	)

374 
	#OBJ_sha1WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,5L

	)

376 
	#SN_dßWôhSHA
 "DSA-SHA"

	)

377 
	#LN_dßWôhSHA
 "dßWôhSHA"

	)

378 
	#NID_dßWôhSHA
 66

	)

379 
	#OBJ_dßWôhSHA
 
OBJ_Æg‹ôhm
,13L

	)

381 
	#SN_dß_2
 "DSA-ﬁd"

	)

382 
	#LN_dß_2
 "dßEn¸y±i⁄-ﬁd"

	)

383 
	#NID_dß_2
 67

	)

384 
	#OBJ_dß_2
 
OBJ_Æg‹ôhm
,12L

	)

387 
	#SN_pbeWôhSHA1AndRC2_CBC
 "PBE-SHA1-RC2-64"

	)

388 
	#LN_pbeWôhSHA1AndRC2_CBC
 "pbeWôhSHA1AndRC2-CBC"

	)

389 
	#NID_pbeWôhSHA1AndRC2_CBC
 68

	)

390 
	#OBJ_pbeWôhSHA1AndRC2_CBC
 
OBJ_pkcs
,5L,11L

	)

396 
	#LN_id_pbkdf2
 "PBKDF2"

	)

397 
	#NID_id_pbkdf2
 69

	)

398 
	#OBJ_id_pbkdf2
 
OBJ_pkcs
,5L,12L

	)

400 
	#SN_dßWôhSHA1_2
 "DSA-SHA1-ﬁd"

	)

401 
	#LN_dßWôhSHA1_2
 "dßWôhSHA1-ﬁd"

	)

402 
	#NID_dßWôhSHA1_2
 70

	)

404 
	#OBJ_dßWôhSHA1_2
 
OBJ_Æg‹ôhm
,27L

	)

406 
	#SN_√tsˇ≥_˚π_ty≥
 "nsCîtTy≥"

	)

407 
	#LN_√tsˇ≥_˚π_ty≥
 "Nësˇ≥ CîàTy≥"

	)

408 
	#NID_√tsˇ≥_˚π_ty≥
 71

	)

409 
	#OBJ_√tsˇ≥_˚π_ty≥
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,1L

	)

411 
	#SN_√tsˇ≥_ba£_uæ
 "nsBa£Uæ"

	)

412 
	#LN_√tsˇ≥_ba£_uæ
 "Nësˇ≥ Ba£ Uæ"

	)

413 
	#NID_√tsˇ≥_ba£_uæ
 72

	)

414 
	#OBJ_√tsˇ≥_ba£_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,2L

	)

416 
	#SN_√tsˇ≥_ªvoˇti⁄_uæ
 "nsRevoˇti⁄Uæ"

	)

417 
	#LN_√tsˇ≥_ªvoˇti⁄_uæ
 "Nësˇ≥ Revoˇti⁄ Uæ"

	)

418 
	#NID_√tsˇ≥_ªvoˇti⁄_uæ
 73

	)

419 
	#OBJ_√tsˇ≥_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,3L

	)

421 
	#SN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "nsCaRevoˇti⁄Uæ"

	)

422 
	#LN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "Nësˇ≥ CA Revoˇti⁄ Uæ"

	)

423 
	#NID_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 74

	)

424 
	#OBJ_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,4L

	)

426 
	#SN_√tsˇ≥_ª√wÆ_uæ
 "nsRíewÆUæ"

	)

427 
	#LN_√tsˇ≥_ª√wÆ_uæ
 "Nësˇ≥ RíewÆ Uæ"

	)

428 
	#NID_√tsˇ≥_ª√wÆ_uæ
 75

	)

429 
	#OBJ_√tsˇ≥_ª√wÆ_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,7L

	)

431 
	#SN_√tsˇ≥_ˇ_pﬁicy_uæ
 "nsCaPﬁicyUæ"

	)

432 
	#LN_√tsˇ≥_ˇ_pﬁicy_uæ
 "Nësˇ≥ CA Pﬁicy Uæ"

	)

433 
	#NID_√tsˇ≥_ˇ_pﬁicy_uæ
 76

	)

434 
	#OBJ_√tsˇ≥_ˇ_pﬁicy_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,8L

	)

436 
	#SN_√tsˇ≥_s¶_£rvî_«me
 "nsS¶SîvîName"

	)

437 
	#LN_√tsˇ≥_s¶_£rvî_«me
 "Nësˇ≥ SSL Sîvî Name"

	)

438 
	#NID_√tsˇ≥_s¶_£rvî_«me
 77

	)

439 
	#OBJ_√tsˇ≥_s¶_£rvî_«me
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,12L

	)

441 
	#SN_√tsˇ≥_commít
 "nsCommít"

	)

442 
	#LN_√tsˇ≥_commít
 "Nësˇ≥ Commít"

	)

443 
	#NID_√tsˇ≥_commít
 78

	)

444 
	#OBJ_√tsˇ≥_commít
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,13L

	)

446 
	#SN_√tsˇ≥_˚π_£quí˚
 "nsCîtSequí˚"

	)

447 
	#LN_√tsˇ≥_˚π_£quí˚
 "Nësˇ≥ Cîtifiˇã Sequí˚"

	)

448 
	#NID_√tsˇ≥_˚π_£quí˚
 79

	)

449 
	#OBJ_√tsˇ≥_˚π_£quí˚
 
OBJ_√tsˇ≥_d©a_ty≥
,5L

	)

451 
	#SN_desx_cbc
 "DESX-CBC"

	)

452 
	#LN_desx_cbc
 "desx-cbc"

	)

453 
	#NID_desx_cbc
 80

	)

455 
	#SN_id_˚
 "id-˚"

	)

456 
	#NID_id_˚
 81

	)

457 
	#OBJ_id_˚
 2L,5L,29L

	)

459 
	#SN_subje˘_key_idítifõr
 "subje˘KeyIdítifõr"

	)

460 
	#LN_subje˘_key_idítifõr
 "X509v3 Subje˘ Key Idítifõr"

	)

461 
	#NID_subje˘_key_idítifõr
 82

	)

462 
	#OBJ_subje˘_key_idítifõr
 
OBJ_id_˚
,14L

	)

464 
	#SN_key_ußge
 "keyUßge"

	)

465 
	#LN_key_ußge
 "X509v3 Key Ußge"

	)

466 
	#NID_key_ußge
 83

	)

467 
	#OBJ_key_ußge
 
OBJ_id_˚
,15L

	)

469 
	#SN_¥iv©e_key_ußge_≥riod
 "¥iv©eKeyUßgePîiod"

	)

470 
	#LN_¥iv©e_key_ußge_≥riod
 "X509v3 Priv©êKey UßgêPîiod"

	)

471 
	#NID_¥iv©e_key_ußge_≥riod
 84

	)

472 
	#OBJ_¥iv©e_key_ußge_≥riod
 
OBJ_id_˚
,16L

	)

474 
	#SN_subje˘_Æt_«me
 "subje˘A…Name"

	)

475 
	#LN_subje˘_Æt_«me
 "X509v3 Subje˘ A…î«tivêName"

	)

476 
	#NID_subje˘_Æt_«me
 85

	)

477 
	#OBJ_subje˘_Æt_«me
 
OBJ_id_˚
,17L

	)

479 
	#SN_issuî_Æt_«me
 "issuîA…Name"

	)

480 
	#LN_issuî_Æt_«me
 "X509v3 Issuî A…î«tivêName"

	)

481 
	#NID_issuî_Æt_«me
 86

	)

482 
	#OBJ_issuî_Æt_«me
 
OBJ_id_˚
,18L

	)

484 
	#SN_basic_c⁄°øöts
 "basicC⁄°øöts"

	)

485 
	#LN_basic_c⁄°øöts
 "X509v3 Basi¯C⁄°øöts"

	)

486 
	#NID_basic_c⁄°øöts
 87

	)

487 
	#OBJ_basic_c⁄°øöts
 
OBJ_id_˚
,19L

	)

489 
	#SN_¸l_numbî
 "¸lNumbî"

	)

490 
	#LN_¸l_numbî
 "X509v3 CRL Numbî"

	)

491 
	#NID_¸l_numbî
 88

	)

492 
	#OBJ_¸l_numbî
 
OBJ_id_˚
,20L

	)

494 
	#SN_˚πifiˇã_pﬁicõs
 "˚πifiˇãPﬁicõs"

	)

495 
	#LN_˚πifiˇã_pﬁicõs
 "X509v3 Cîtifiˇã Pﬁicõs"

	)

496 
	#NID_˚πifiˇã_pﬁicõs
 89

	)

497 
	#OBJ_˚πifiˇã_pﬁicõs
 
OBJ_id_˚
,32L

	)

499 
	#SN_auth‹ôy_key_idítifõr
 "auth‹ôyKeyIdítifõr"

	)

500 
	#LN_auth‹ôy_key_idítifõr
 "X509v3 Auth‹ôy Key Idítifõr"

	)

501 
	#NID_auth‹ôy_key_idítifõr
 90

	)

502 
	#OBJ_auth‹ôy_key_idítifõr
 
OBJ_id_˚
,35L

	)

504 
	#SN_bf_cbc
 "BF-CBC"

	)

505 
	#LN_bf_cbc
 "bf-cbc"

	)

506 
	#NID_bf_cbc
 91

	)

507 
	#OBJ_bf_cbc
 1L,3L,6L,1L,4L,1L,3029L,1L,2L

	)

509 
	#SN_bf_ecb
 "BF-ECB"

	)

510 
	#LN_bf_ecb
 "bf-ecb"

	)

511 
	#NID_bf_ecb
 92

	)

513 
	#SN_bf_cfb64
 "BF-CFB"

	)

514 
	#LN_bf_cfb64
 "bf-cfb"

	)

515 
	#NID_bf_cfb64
 93

	)

517 
	#SN_bf_ofb64
 "BF-OFB"

	)

518 
	#LN_bf_ofb64
 "bf-ofb"

	)

519 
	#NID_bf_ofb64
 94

	)

521 
	#SN_mdc2
 "MDC2"

	)

522 
	#LN_mdc2
 "mdc2"

	)

523 
	#NID_mdc2
 95

	)

524 
	#OBJ_mdc2
 2L,5L,8L,3L,101L

	)

527 
	#SN_mdc2WôhRSA
 "RSA-MDC2"

	)

528 
	#LN_mdc2WôhRSA
 "mdc2wôhRSA"

	)

529 
	#NID_mdc2WôhRSA
 96

	)

530 
	#OBJ_mdc2WôhRSA
 2L,5L,8L,3L,100L

	)

532 
	#SN_rc4_40
 "RC4-40"

	)

533 
	#LN_rc4_40
 "rc4-40"

	)

534 
	#NID_rc4_40
 97

	)

536 
	#SN_rc2_40_cbc
 "RC2-40-CBC"

	)

537 
	#LN_rc2_40_cbc
 "rc2-40-cbc"

	)

538 
	#NID_rc2_40_cbc
 98

	)

540 
	#SN_givíName
 "G"

	)

541 
	#LN_givíName
 "givíName"

	)

542 
	#NID_givíName
 99

	)

543 
	#OBJ_givíName
 
OBJ_X509
,42L

	)

545 
	#SN_su∫ame
 "S"

	)

546 
	#LN_su∫ame
 "su∫ame"

	)

547 
	#NID_su∫ame
 100

	)

548 
	#OBJ_su∫ame
 
OBJ_X509
,4L

	)

550 
	#SN_öôüls
 "I"

	)

551 
	#LN_öôüls
 "öôüls"

	)

552 
	#NID_öôüls
 101

	)

553 
	#OBJ_öôüls
 
OBJ_X509
,43L

	)

555 
	#SN_uniqueIdítifõr
 "UID"

	)

556 
	#LN_uniqueIdítifõr
 "uniqueIdítifõr"

	)

557 
	#NID_uniqueIdítifõr
 102

	)

558 
	#OBJ_uniqueIdítifõr
 
OBJ_X509
,45L

	)

560 
	#SN_¸l_di°ributi⁄_poöts
 "¸lDi°ributi⁄Poöts"

	)

561 
	#LN_¸l_di°ributi⁄_poöts
 "X509v3 CRL Di°ributi⁄ Poöts"

	)

562 
	#NID_¸l_di°ributi⁄_poöts
 103

	)

563 
	#OBJ_¸l_di°ributi⁄_poöts
 
OBJ_id_˚
,31L

	)

565 
	#SN_md5WôhRSA
 "RSA-NP-MD5"

	)

566 
	#LN_md5WôhRSA
 "md5WôhRSA"

	)

567 
	#NID_md5WôhRSA
 104

	)

568 
	#OBJ_md5WôhRSA
 
OBJ_Æg‹ôhm
,3L

	)

570 
	#SN_£rülNumbî
 "SN"

	)

571 
	#LN_£rülNumbî
 "£rülNumbî"

	)

572 
	#NID_£rülNumbî
 105

	)

573 
	#OBJ_£rülNumbî
 
OBJ_X509
,5L

	)

575 
	#SN_tôÀ
 "T"

	)

576 
	#LN_tôÀ
 "tôÀ"

	)

577 
	#NID_tôÀ
 106

	)

578 
	#OBJ_tôÀ
 
OBJ_X509
,12L

	)

580 
	#SN_des¸ùti⁄
 "D"

	)

581 
	#LN_des¸ùti⁄
 "des¸ùti⁄"

	)

582 
	#NID_des¸ùti⁄
 107

	)

583 
	#OBJ_des¸ùti⁄
 
OBJ_X509
,13L

	)

586 
	#SN_ˇ°5_cbc
 "CAST5-CBC"

	)

587 
	#LN_ˇ°5_cbc
 "ˇ°5-cbc"

	)

588 
	#NID_ˇ°5_cbc
 108

	)

589 
	#OBJ_ˇ°5_cbc
 1L,2L,840L,113533L,7L,66L,10L

	)

591 
	#SN_ˇ°5_ecb
 "CAST5-ECB"

	)

592 
	#LN_ˇ°5_ecb
 "ˇ°5-ecb"

	)

593 
	#NID_ˇ°5_ecb
 109

	)

595 
	#SN_ˇ°5_cfb64
 "CAST5-CFB"

	)

596 
	#LN_ˇ°5_cfb64
 "ˇ°5-cfb"

	)

597 
	#NID_ˇ°5_cfb64
 110

	)

599 
	#SN_ˇ°5_ofb64
 "CAST5-OFB"

	)

600 
	#LN_ˇ°5_ofb64
 "ˇ°5-ofb"

	)

601 
	#NID_ˇ°5_ofb64
 111

	)

603 
	#LN_pbeWôhMD5AndCa°5_CBC
 "pbeWôhMD5AndCa°5CBC"

	)

604 
	#NID_pbeWôhMD5AndCa°5_CBC
 112

	)

605 
	#OBJ_pbeWôhMD5AndCa°5_CBC
 1L,2L,840L,113533L,7L,66L,12L

	)

611 
	#SN_dßWôhSHA1
 "DSA-SHA1"

	)

612 
	#LN_dßWôhSHA1
 "dßWôhSHA1"

	)

613 
	#NID_dßWôhSHA1
 113

	)

614 
	#OBJ_dßWôhSHA1
 1L,2L,840L,10040L,4L,3L

	)

616 
	#NID_md5_sha1
 114

	)

617 
	#SN_md5_sha1
 "MD5-SHA1"

	)

618 
	#LN_md5_sha1
 "md5-sha1"

	)

620 
	#SN_sha1WôhRSA
 "RSA-SHA1-2"

	)

621 
	#LN_sha1WôhRSA
 "sha1WôhRSA"

	)

622 
	#NID_sha1WôhRSA
 115

	)

623 
	#OBJ_sha1WôhRSA
 
OBJ_Æg‹ôhm
,29L

	)

625 
	#SN_dß
 "DSA"

	)

626 
	#LN_dß
 "dßEn¸y±i⁄"

	)

627 
	#NID_dß
 116

	)

628 
	#OBJ_dß
 1L,2L,840L,10040L,4L,1L

	)

630 
	#SN_rùemd160
 "RIPEMD160"

	)

631 
	#LN_rùemd160
 "rùemd160"

	)

632 
	#NID_rùemd160
 117

	)

633 
	#OBJ_rùemd160
 1L,3L,36L,3L,2L,1L

	)

637 
	#SN_rùemd160WôhRSA
 "RSA-RIPEMD160"

	)

638 
	#LN_rùemd160WôhRSA
 "rùemd160WôhRSA"

	)

639 
	#NID_rùemd160WôhRSA
 119

	)

640 
	#OBJ_rùemd160WôhRSA
 1L,3L,36L,3L,3L,1L,2L

	)

650 
	#SN_rc5_cbc
 "RC5-CBC"

	)

651 
	#LN_rc5_cbc
 "rc5-cbc"

	)

652 
	#NID_rc5_cbc
 120

	)

653 
	#OBJ_rc5_cbc
 
OBJ_rßdsi
,3L,8L

	)

655 
	#SN_rc5_ecb
 "RC5-ECB"

	)

656 
	#LN_rc5_ecb
 "rc5-ecb"

	)

657 
	#NID_rc5_ecb
 121

	)

659 
	#SN_rc5_cfb64
 "RC5-CFB"

	)

660 
	#LN_rc5_cfb64
 "rc5-cfb"

	)

661 
	#NID_rc5_cfb64
 122

	)

663 
	#SN_rc5_ofb64
 "RC5-OFB"

	)

664 
	#LN_rc5_ofb64
 "rc5-ofb"

	)

665 
	#NID_rc5_ofb64
 123

	)

667 
	#SN_æe_com¥essi⁄
 "RLE"

	)

668 
	#LN_æe_com¥essi⁄
 "ru¿Àngth com¥essi⁄"

	)

669 
	#NID_æe_com¥essi⁄
 124

	)

670 
	#OBJ_æe_com¥essi⁄
 1L,1L,1L,1L,666L,1L

	)

672 
	#SN_zlib_com¥essi⁄
 "ZLIB"

	)

673 
	#LN_zlib_com¥essi⁄
 "zlib com¥essi⁄"

	)

674 
	#NID_zlib_com¥essi⁄
 125

	)

675 
	#OBJ_zlib_com¥essi⁄
 1L,1L,1L,1L,666L,2L

	)

677 
	#SN_ext_key_ußge
 "exãndedKeyUßge"

	)

678 
	#LN_ext_key_ußge
 "X509v3 Exãnded Key Ußge"

	)

679 
	#NID_ext_key_ußge
 126

	)

680 
	#OBJ_ext_key_ußge
 
OBJ_id_˚
,37

	)

682 
	#SN_id_pkix
 "PKIX"

	)

683 
	#NID_id_pkix
 127

	)

684 
	#OBJ_id_pkix
 1L,3L,6L,1L,5L,5L,7L

	)

686 
	#SN_id_kp
 "id-kp"

	)

687 
	#NID_id_kp
 128

	)

688 
	#OBJ_id_kp
 
OBJ_id_pkix
,3L

	)

692 
	#SN_£rvî_auth
 "£rvîAuth"

	)

693 
	#LN_£rvî_auth
 "TLS Web Sîvî Authítiˇti⁄"

	)

694 
	#NID_£rvî_auth
 129

	)

695 
	#OBJ_£rvî_auth
 
OBJ_id_kp
,1L

	)

697 
	#SN_˛õ¡_auth
 "˛õ¡Auth"

	)

698 
	#LN_˛õ¡_auth
 "TLS Web Clõ¡ Authítiˇti⁄"

	)

699 
	#NID_˛õ¡_auth
 130

	)

700 
	#OBJ_˛õ¡_auth
 
OBJ_id_kp
,2L

	)

702 
	#SN_code_sign
 "codeSignög"

	)

703 
	#LN_code_sign
 "CodêSignög"

	)

704 
	#NID_code_sign
 131

	)

705 
	#OBJ_code_sign
 
OBJ_id_kp
,3L

	)

707 
	#SN_emaû_¥Ÿe˘
 "emaûPrŸe˘i⁄"

	)

708 
	#LN_emaû_¥Ÿe˘
 "E-maû PrŸe˘i⁄"

	)

709 
	#NID_emaû_¥Ÿe˘
 132

	)

710 
	#OBJ_emaû_¥Ÿe˘
 
OBJ_id_kp
,4L

	)

712 
	#SN_time_°amp
 "timeSèmpög"

	)

713 
	#LN_time_°amp
 "TimêSèmpög"

	)

714 
	#NID_time_°amp
 133

	)

715 
	#OBJ_time_°amp
 
OBJ_id_kp
,8L

	)

719 
	#SN_ms_code_öd
 "msCodeInd"

	)

720 
	#LN_ms_code_öd
 "Mi¸oso· IndividuÆ CodêSignög"

	)

721 
	#NID_ms_code_öd
 134

	)

722 
	#OBJ_ms_code_öd
 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

	)

724 
	#SN_ms_code_com
 "msCodeCom"

	)

725 
	#LN_ms_code_com
 "Mi¸oso· Commîcü»CodêSignög"

	)

726 
	#NID_ms_code_com
 135

	)

727 
	#OBJ_ms_code_com
 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

	)

729 
	#SN_ms_˘l_sign
 "msCTLSign"

	)

730 
	#LN_ms_˘l_sign
 "Mi¸oso· Tru° Li° Signög"

	)

731 
	#NID_ms_˘l_sign
 136

	)

732 
	#OBJ_ms_˘l_sign
 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

	)

734 
	#SN_ms_sgc
 "msSGC"

	)

735 
	#LN_ms_sgc
 "Mi¸oso· Sîvî G©ed Cry±o"

	)

736 
	#NID_ms_sgc
 137

	)

737 
	#OBJ_ms_sgc
 1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

	)

739 
	#SN_ms_efs
 "msEFS"

	)

740 
	#LN_ms_efs
 "Mi¸oso· En¸y±ed FûêSy°em"

	)

741 
	#NID_ms_efs
 138

	)

742 
	#OBJ_ms_efs
 1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

	)

746 
	#SN_ns_sgc
 "nsSGC"

	)

747 
	#LN_ns_sgc
 "Nësˇ≥ Sîvî G©ed Cry±o"

	)

748 
	#NID_ns_sgc
 139

	)

749 
	#OBJ_ns_sgc
 
OBJ_√tsˇ≥
,4L,1L

	)

751 
	#SN_dñè_¸l
 "dñèCRL"

	)

752 
	#LN_dñè_¸l
 "X509v3 Dñè CRL Indiˇt‹"

	)

753 
	#NID_dñè_¸l
 140

	)

754 
	#OBJ_dñè_¸l
 
OBJ_id_˚
,27L

	)

756 
	#SN_¸l_ªas⁄
 "CRLRós⁄"

	)

757 
	#LN_¸l_ªas⁄
 "CRL Rós⁄ Code"

	)

758 
	#NID_¸l_ªas⁄
 141

	)

759 
	#OBJ_¸l_ªas⁄
 
OBJ_id_˚
,21L

	)

761 
	#SN_övÆidôy_d©e
 "övÆidôyD©e"

	)

762 
	#LN_övÆidôy_d©e
 "InvÆidôy D©e"

	)

763 
	#NID_övÆidôy_d©e
 142

	)

764 
	#OBJ_övÆidôy_d©e
 
OBJ_id_˚
,24L

	)

766 
	#SN_sx√t
 "SXNëID"

	)

767 
	#LN_sx√t
 "Så⁄g Exå™ë ID"

	)

768 
	#NID_sx√t
 143

	)

769 
	#OBJ_sx√t
 1L,3L,101L,1L,4L,1L

	)

773 
	#OBJ_pkcs12
 
OBJ_pkcs
,12L

	)

774 
	#OBJ_pkcs12_pbeids
 
OBJ_pkcs12
, 1

	)

776 
	#SN_pbe_WôhSHA1And128BôRC4
 "PBE-SHA1-RC4-128"

	)

777 
	#LN_pbe_WôhSHA1And128BôRC4
 "pbeWôhSHA1And128BôRC4"

	)

778 
	#NID_pbe_WôhSHA1And128BôRC4
 144

	)

779 
	#OBJ_pbe_WôhSHA1And128BôRC4
 
OBJ_pkcs12_pbeids
, 1L

	)

781 
	#SN_pbe_WôhSHA1And40BôRC4
 "PBE-SHA1-RC4-40"

	)

782 
	#LN_pbe_WôhSHA1And40BôRC4
 "pbeWôhSHA1And40BôRC4"

	)

783 
	#NID_pbe_WôhSHA1And40BôRC4
 145

	)

784 
	#OBJ_pbe_WôhSHA1And40BôRC4
 
OBJ_pkcs12_pbeids
, 2L

	)

786 
	#SN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "PBE-SHA1-3DES"

	)

787 
	#LN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "pbeWôhSHA1And3-KeyTrùÀDES-CBC"

	)

788 
	#NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 146

	)

789 
	#OBJ_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
, 3L

	)

791 
	#SN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "PBE-SHA1-2DES"

	)

792 
	#LN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "pbeWôhSHA1And2-KeyTrùÀDES-CBC"

	)

793 
	#NID_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 147

	)

794 
	#OBJ_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
, 4L

	)

796 
	#SN_pbe_WôhSHA1And128BôRC2_CBC
 "PBE-SHA1-RC2-128"

	)

797 
	#LN_pbe_WôhSHA1And128BôRC2_CBC
 "pbeWôhSHA1And128BôRC2-CBC"

	)

798 
	#NID_pbe_WôhSHA1And128BôRC2_CBC
 148

	)

799 
	#OBJ_pbe_WôhSHA1And128BôRC2_CBC
 
OBJ_pkcs12_pbeids
, 5L

	)

801 
	#SN_pbe_WôhSHA1And40BôRC2_CBC
 "PBE-SHA1-RC2-40"

	)

802 
	#LN_pbe_WôhSHA1And40BôRC2_CBC
 "pbeWôhSHA1And40BôRC2-CBC"

	)

803 
	#NID_pbe_WôhSHA1And40BôRC2_CBC
 149

	)

804 
	#OBJ_pbe_WôhSHA1And40BôRC2_CBC
 
OBJ_pkcs12_pbeids
, 6L

	)

806 
	#OBJ_pkcs12_Vîsi⁄1
 
OBJ_pkcs12
, 10L

	)

808 
	#OBJ_pkcs12_BagIds
 
OBJ_pkcs12_Vîsi⁄1
, 1L

	)

810 
	#LN_keyBag
 "keyBag"

	)

811 
	#NID_keyBag
 150

	)

812 
	#OBJ_keyBag
 
OBJ_pkcs12_BagIds
, 1L

	)

814 
	#LN_pkcs8ShroudedKeyBag
 "pkcs8ShroudedKeyBag"

	)

815 
	#NID_pkcs8ShroudedKeyBag
 151

	)

816 
	#OBJ_pkcs8ShroudedKeyBag
 
OBJ_pkcs12_BagIds
, 2L

	)

818 
	#LN_˚πBag
 "˚πBag"

	)

819 
	#NID_˚πBag
 152

	)

820 
	#OBJ_˚πBag
 
OBJ_pkcs12_BagIds
, 3L

	)

822 
	#LN_¸lBag
 "¸lBag"

	)

823 
	#NID_¸lBag
 153

	)

824 
	#OBJ_¸lBag
 
OBJ_pkcs12_BagIds
, 4L

	)

826 
	#LN_£¸ëBag
 "£¸ëBag"

	)

827 
	#NID_£¸ëBag
 154

	)

828 
	#OBJ_£¸ëBag
 
OBJ_pkcs12_BagIds
, 5L

	)

830 
	#LN_ß„C⁄ã¡sBag
 "ß„C⁄ã¡sBag"

	)

831 
	#NID_ß„C⁄ã¡sBag
 155

	)

832 
	#OBJ_ß„C⁄ã¡sBag
 
OBJ_pkcs12_BagIds
, 6L

	)

834 
	#LN_‰õndlyName
 "‰õndlyName"

	)

835 
	#NID_‰õndlyName
 156

	)

836 
	#OBJ_‰õndlyName
 
OBJ_pkcs9
, 20L

	)

838 
	#LN_loˇlKeyID
 "loˇlKeyID"

	)

839 
	#NID_loˇlKeyID
 157

	)

840 
	#OBJ_loˇlKeyID
 
OBJ_pkcs9
, 21L

	)

842 
	#OBJ_˚πTy≥s
 
OBJ_pkcs9
, 22L

	)

844 
	#LN_x509Cîtifiˇã
 "x509Cîtifiˇã"

	)

845 
	#NID_x509Cîtifiˇã
 158

	)

846 
	#OBJ_x509Cîtifiˇã
 
OBJ_˚πTy≥s
, 1L

	)

848 
	#LN_sdsiCîtifiˇã
 "sdsiCîtifiˇã"

	)

849 
	#NID_sdsiCîtifiˇã
 159

	)

850 
	#OBJ_sdsiCîtifiˇã
 
OBJ_˚πTy≥s
, 2L

	)

852 
	#OBJ_¸lTy≥s
 
OBJ_pkcs9
, 23L

	)

854 
	#LN_x509Cæ
 "x509Cæ"

	)

855 
	#NID_x509Cæ
 160

	)

856 
	#OBJ_x509Cæ
 
OBJ_¸lTy≥s
, 1L

	)

860 
	#LN_pbes2
 "PBES2"

	)

861 
	#NID_pbes2
 161

	)

862 
	#OBJ_pbes2
 
OBJ_pkcs
,5L,13L

	)

864 
	#LN_pbmac1
 "PBMAC1"

	)

865 
	#NID_pbmac1
 162

	)

866 
	#OBJ_pbmac1
 
OBJ_pkcs
,5L,14L

	)

868 
	#LN_hmacWôhSHA1
 "hmacWôhSHA1"

	)

869 
	#NID_hmacWôhSHA1
 163

	)

870 
	#OBJ_hmacWôhSHA1
 
OBJ_rßdsi
,2L,7L

	)

874 
	#LN_id_qt_˝s
 "Pﬁicy QuÆifõ∏CPS"

	)

875 
	#SN_id_qt_˝s
 "id-qt-˝s"

	)

876 
	#NID_id_qt_˝s
 164

	)

877 
	#OBJ_id_qt_˝s
 
OBJ_id_pkix
,2L,1L

	)

879 
	#LN_id_qt_unŸi˚
 "Pﬁicy QuÆifõ∏U£∏NŸi˚"

	)

880 
	#SN_id_qt_unŸi˚
 "id-qt-unŸi˚"

	)

881 
	#NID_id_qt_unŸi˚
 165

	)

882 
	#OBJ_id_qt_unŸi˚
 
OBJ_id_pkix
,2L,2L

	)

884 
	#SN_rc2_64_cbc
 "RC2-64-CBC"

	)

885 
	#LN_rc2_64_cbc
 "rc2-64-cbc"

	)

886 
	#NID_rc2_64_cbc
 166

	)

888 
	#SN_SMIMEC≠abûôõs
 "SMIME-CAPS"

	)

889 
	#LN_SMIMEC≠abûôõs
 "S/MIME C≠abûôõs"

	)

890 
	#NID_SMIMEC≠abûôõs
 167

	)

891 
	#OBJ_SMIMEC≠abûôõs
 
OBJ_pkcs9
,15L

	)

893 
	#SN_pbeWôhMD2AndRC2_CBC
 "PBE-MD2-RC2-64"

	)

894 
	#LN_pbeWôhMD2AndRC2_CBC
 "pbeWôhMD2AndRC2-CBC"

	)

895 
	#NID_pbeWôhMD2AndRC2_CBC
 168

	)

896 
	#OBJ_pbeWôhMD2AndRC2_CBC
 
OBJ_pkcs
,5L,4L

	)

898 
	#SN_pbeWôhMD5AndRC2_CBC
 "PBE-MD5-RC2-64"

	)

899 
	#LN_pbeWôhMD5AndRC2_CBC
 "pbeWôhMD5AndRC2-CBC"

	)

900 
	#NID_pbeWôhMD5AndRC2_CBC
 169

	)

901 
	#OBJ_pbeWôhMD5AndRC2_CBC
 
OBJ_pkcs
,5L,6L

	)

903 
	#SN_pbeWôhSHA1AndDES_CBC
 "PBE-SHA1-DES"

	)

904 
	#LN_pbeWôhSHA1AndDES_CBC
 "pbeWôhSHA1AndDES-CBC"

	)

905 
	#NID_pbeWôhSHA1AndDES_CBC
 170

	)

906 
	#OBJ_pbeWôhSHA1AndDES_CBC
 
OBJ_pkcs
,5L,10L

	)

910 
	#LN_ms_ext_ªq
 "Mi¸oso· Exãnsi⁄ Reque°"

	)

911 
	#SN_ms_ext_ªq
 "msExtReq"

	)

912 
	#NID_ms_ext_ªq
 171

	)

913 
	#OBJ_ms_ext_ªq
 1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

	)

915 
	#LN_ext_ªq
 "Exãnsi⁄ Reque°"

	)

916 
	#SN_ext_ªq
 "extReq"

	)

917 
	#NID_ext_ªq
 172

	)

918 
	#OBJ_ext_ªq
 
OBJ_pkcs9
,14L

	)

920 
	#SN_«me
 "«me"

	)

921 
	#LN_«me
 "«me"

	)

922 
	#NID_«me
 173

	)

923 
	#OBJ_«me
 
OBJ_X509
,41L

	)

925 
	#SN_dnQuÆifõr
 "dnQuÆifõr"

	)

926 
	#LN_dnQuÆifõr
 "dnQuÆifõr"

	)

927 
	#NID_dnQuÆifõr
 174

	)

928 
	#OBJ_dnQuÆifõr
 
OBJ_X509
,46L

	)

930 
	#SN_id_≥
 "id-≥"

	)

931 
	#NID_id_≥
 175

	)

932 
	#OBJ_id_≥
 
OBJ_id_pkix
,1L

	)

934 
	#SN_id_ad
 "id-ad"

	)

935 
	#NID_id_ad
 176

	)

936 
	#OBJ_id_ad
 
OBJ_id_pkix
,48L

	)

938 
	#SN_öfo_ac˚ss
 "auth‹ôyInfoAc˚ss"

	)

939 
	#LN_öfo_ac˚ss
 "Auth‹ôy Inf‹m©i⁄ Ac˚ss"

	)

940 
	#NID_öfo_ac˚ss
 177

	)

941 
	#OBJ_öfo_ac˚ss
 
OBJ_id_≥
,1L

	)

943 
	#SN_ad_OCSP
 "OCSP"

	)

944 
	#LN_ad_OCSP
 "OCSP"

	)

945 
	#NID_ad_OCSP
 178

	)

946 
	#OBJ_ad_OCSP
 
OBJ_id_ad
,1L

	)

948 
	#SN_ad_ˇ_issuîs
 "ˇIssuîs"

	)

949 
	#LN_ad_ˇ_issuîs
 "CA Issuîs"

	)

950 
	#NID_ad_ˇ_issuîs
 179

	)

951 
	#OBJ_ad_ˇ_issuîs
 
OBJ_id_ad
,2L

	)

953 
	#SN_OCSP_sign
 "OCSPSignög"

	)

954 
	#LN_OCSP_sign
 "OCSP Signög"

	)

955 
	#NID_OCSP_sign
 180

	)

956 
	#OBJ_OCSP_sign
 
OBJ_id_kp
,9L

	)

959 
	~<›ís¶/bio.h
>

960 
	~<›ís¶/a¢1.h
>

962 
	#OBJ_NAME_TYPE_UNDEF
 0x00

	)

963 
	#OBJ_NAME_TYPE_MD_METH
 0x01

	)

964 
	#OBJ_NAME_TYPE_CIPHER_METH
 0x02

	)

965 
	#OBJ_NAME_TYPE_PKEY_METH
 0x03

	)

966 
	#OBJ_NAME_TYPE_COMP_METH
 0x04

	)

967 
	#OBJ_NAME_TYPE_NUM
 0x05

	)

969 
	#OBJ_NAME_ALIAS
 0x8000

	)

971 
	#OBJ_BSEARCH_VALUE_ON_NOMATCH
 0x01

	)

972 
	#OBJ_BSEARCH_FIRST_VALUE_ON_MATCH
 0x02

	)

975 #ifde‡ 
__˝lu•lus


979 
	sobj_«me_°


981 
ty≥
;

982 
Æüs
;

983 c⁄° *
«me
;

984 c⁄° *
d©a
;

985 } 
	tOBJ_NAME
;

987 
	#OBJ_¸óã_™d_add_obje˘
(
a
,
b
,
c
Ë
	`OBJ_¸óã
◊,b,c)

	)

990 
OBJ_NAME_öô
();

991 
OBJ_NAME_√w_ödex
((*
hash_func
)(const *),

992 (*
cmp_func
)(const *, const *),

993 (*
‰ì_func
)(const *, , const *));

994 c⁄° *
OBJ_NAME_gë
(c⁄° *
«me
,
ty≥
);

995 
OBJ_NAME_add
(c⁄° *
«me
,
ty≥
,c⁄° *
d©a
);

996 
OBJ_NAME_ªmove
(c⁄° *
«me
,
ty≥
);

997 
OBJ_NAME_˛ónup
(
ty≥
);

998 
OBJ_NAME_do_Æl
(
ty≥
,(*
‚
)(c⁄° 
OBJ_NAME
 *,*
¨g
),

999 *
¨g
);

1000 
OBJ_NAME_do_Æl_s‹ãd
(
ty≥
,(*
‚
)(c⁄° 
OBJ_NAME
 *,*
¨g
),

1001 *
¨g
);

1003 
ASN1_OBJECT
 * 
OBJ_dup
(c⁄° ASN1_OBJECT *
o
);

1004 
ASN1_OBJECT
 * 
OBJ_nid2obj
(
n
);

1005 c⁄° * 
OBJ_nid2 
(
n
);

1006 c⁄° * 
OBJ_nid2¢
(
n
);

1007 
OBJ_obj2nid
(c⁄° 
ASN1_OBJECT
 *
o
);

1008 
ASN1_OBJECT
 * 
OBJ_txt2obj
(c⁄° *
s
, 
no_«me
);

1009 
OBJ_obj2txt
(*
buf
, 
buf_Àn
, c⁄° 
ASN1_OBJECT
 *
a
, 
no_«me
);

1010 
OBJ_txt2nid
(c⁄° *
s
);

1011 
OBJ_ 2nid
(c⁄° *
s
);

1012 
OBJ_¢2nid
(c⁄° *
s
);

1013 
OBJ_cmp
(c⁄° 
ASN1_OBJECT
 *
a
,c⁄° ASN1_OBJECT *
b
);

1014 c⁄° * 
OBJ_b£¨ch
(c⁄° *
key
,c⁄° *
ba£
,
num
,
size
,

1015 (*
cmp
)(const *, const *));

1016 c⁄° * 
OBJ_b£¨ch_ex
(c⁄° *
key
,c⁄° *
ba£
,
num
,

1017 
size
, (*
cmp
)(c⁄° *, c⁄° *), 
Êags
);

1019 
OBJ_√w_nid
(
num
);

1020 
OBJ_add_obje˘
(c⁄° 
ASN1_OBJECT
 *
obj
);

1021 
OBJ_¸óã
(c⁄° *
oid
,c⁄° *
¢
,c⁄° *
 
);

1022 
OBJ_˛ónup
();

1023 
OBJ_¸óã_obje˘s
(
BIO
 *
ö
);

1029 
ERR_lﬂd_OBJ_°rögs
();

1034 
	#OBJ_F_OBJ_ADD_OBJECT
 105

	)

1035 
	#OBJ_F_OBJ_CREATE
 100

	)

1036 
	#OBJ_F_OBJ_DUP
 101

	)

1037 
	#OBJ_F_OBJ_NAME_NEW_INDEX
 106

	)

1038 
	#OBJ_F_OBJ_NID2LN
 102

	)

1039 
	#OBJ_F_OBJ_NID2OBJ
 103

	)

1040 
	#OBJ_F_OBJ_NID2SN
 104

	)

1043 
	#OBJ_R_MALLOC_FAILURE
 100

	)

1044 
	#OBJ_R_UNKNOWN_NID
 101

	)

1046 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ocsp.h

64 #i‚de‡
HEADER_OCSP_H


65 
	#HEADER_OCSP_H


	)

67 
	~<›ís¶/x509.h
>

68 
	~<›ís¶/x509v3.h
>

69 
	~<›ís¶/ß„°ack.h
>

71 #ifde‡ 
__˝lu•lus


77 
	#OCSP_DEFAULT_NONCE_LENGTH
 16

	)

79 
	#OCSP_NOCERTS
 0x1

	)

80 
	#OCSP_NOINTERN
 0x2

	)

81 
	#OCSP_NOSIGS
 0x4

	)

82 
	#OCSP_NOCHAIN
 0x8

	)

83 
	#OCSP_NOVERIFY
 0x10

	)

84 
	#OCSP_NOEXPLICIT
 0x20

	)

85 
	#OCSP_NOCASIGN
 0x40

	)

86 
	#OCSP_NODELEGATED
 0x80

	)

87 
	#OCSP_NOCHECKS
 0x100

	)

88 
	#OCSP_TRUSTOTHER
 0x200

	)

89 
	#OCSP_RESPID_KEY
 0x400

	)

90 
	#OCSP_NOTIME
 0x800

	)

98 
	soc•_˚π_id_°


100 
X509_ALGOR
 *
hashAlg‹ôhm
;

101 
ASN1_OCTET_STRING
 *
issuîNameHash
;

102 
ASN1_OCTET_STRING
 *
issuîKeyHash
;

103 
ASN1_INTEGER
 *
£rülNumbî
;

104 } 
	tOCSP_CERTID
;

106 
DECLARE_STACK_OF
(
OCSP_CERTID
)

112 
	soc•_⁄e_ªque°_°


114 
OCSP_CERTID
 *
ªqCît
;

115 
STACK_OF
(
X509_EXTENSION
Ë*
sögÀReque°Exãnsi⁄s
;

116 } 
	tOCSP_ONEREQ
;

118 
DECLARE_STACK_OF
(
OCSP_ONEREQ
)

119 
DECLARE_ASN1_SET_OF
(
OCSP_ONEREQ
)

128 
	soc•_ªq_öfo_°


130 
ASN1_INTEGER
 *
vîsi⁄
;

131 
GENERAL_NAME
 *
ªque°‹Name
;

132 
STACK_OF
(
OCSP_ONEREQ
Ë*
ªque°Li°
;

133 
STACK_OF
(
X509_EXTENSION
Ë*
ªque°Exãnsi⁄s
;

134 } 
	tOCSP_REQINFO
;

141 
	soc•_sig«tuª_°


143 
X509_ALGOR
 *
sig«tuªAlg‹ôhm
;

144 
ASN1_BIT_STRING
 *
sig«tuª
;

145 
STACK_OF
(
X509
Ë*
˚πs
;

146 } 
	tOCSP_SIGNATURE
;

152 
	soc•_ªque°_°


154 
OCSP_REQINFO
 *
tbsReque°
;

155 
OCSP_SIGNATURE
 *
›ti⁄ÆSig«tuª
;

156 } 
	tOCSP_REQUEST
;

168 
	#OCSP_RESPONSE_STATUS_SUCCESSFUL
 0

	)

169 
	#OCSP_RESPONSE_STATUS_MALFORMEDREQUEST
 1

	)

170 
	#OCSP_RESPONSE_STATUS_INTERNALERROR
 2

	)

171 
	#OCSP_RESPONSE_STATUS_TRYLATER
 3

	)

172 
	#OCSP_RESPONSE_STATUS_SIGREQUIRED
 5

	)

173 
	#OCSP_RESPONSE_STATUS_UNAUTHORIZED
 6

	)

179 
	soc•_ª•_byãs_°


181 
ASN1_OBJECT
 *
ª•⁄£Ty≥
;

182 
ASN1_OCTET_STRING
 *
ª•⁄£
;

183 } 
	tOCSP_RESPBYTES
;

189 
	soc•_ª•⁄£_°


191 
ASN1_ENUMERATED
 *
ª•⁄£Sètus
;

192 
OCSP_RESPBYTES
 *
ª•⁄£Byãs
;

199 
	#V_OCSP_RESPID_NAME
 0

	)

200 
	#V_OCSP_RESPID_KEY
 1

	)

201 
	soc•_ª•⁄dî_id_°


203 
ty≥
;

205 
X509_NAME
* 
byName
;

206 
ASN1_OCTET_STRING
 *
byKey
;

207 } 
vÆue
;

210 
DECLARE_STACK_OF
(
OCSP_RESPID
)

211 
DECLARE_ASN1_FUNCTIONS
(
OCSP_RESPID
)

221 
	soc•_ªvoked_öfo_°


223 
ASN1_GENERALIZEDTIME
 *
ªvoˇti⁄Time
;

224 
ASN1_ENUMERATED
 *
ªvoˇti⁄Rós⁄
;

225 } 
	tOCSP_REVOKEDINFO
;

232 
	#V_OCSP_CERTSTATUS_GOOD
 0

	)

233 
	#V_OCSP_CERTSTATUS_REVOKED
 1

	)

234 
	#V_OCSP_CERTSTATUS_UNKNOWN
 2

	)

235 
	soc•_˚π_°©us_°


237 
ty≥
;

239 
ASN1_NULL
 *
good
;

240 
OCSP_REVOKEDINFO
 *
ªvoked
;

241 
ASN1_NULL
 *
unknown
;

242 } 
vÆue
;

243 } 
	tOCSP_CERTSTATUS
;

252 
	soc•_sögÀ_ª•⁄£_°


254 
OCSP_CERTID
 *
˚πId
;

255 
OCSP_CERTSTATUS
 *
˚πSètus
;

256 
ASN1_GENERALIZEDTIME
 *
thisUpd©e
;

257 
ASN1_GENERALIZEDTIME
 *
√xtUpd©e
;

258 
STACK_OF
(
X509_EXTENSION
Ë*
sögÀExãnsi⁄s
;

259 } 
	tOCSP_SINGLERESP
;

261 
DECLARE_STACK_OF
(
OCSP_SINGLERESP
)

262 
DECLARE_ASN1_SET_OF
(
OCSP_SINGLERESP
)

271 
	soc•_ª•⁄£_d©a_°


273 
ASN1_INTEGER
 *
vîsi⁄
;

274 
OCSP_RESPID
 *
ª•⁄dîId
;

275 
ASN1_GENERALIZEDTIME
 *
¥odu˚dAt
;

276 
STACK_OF
(
OCSP_SINGLERESP
Ë*
ª•⁄£s
;

277 
STACK_OF
(
X509_EXTENSION
Ë*
ª•⁄£Exãnsi⁄s
;

278 } 
	tOCSP_RESPDATA
;

302 
	soc•_basic_ª•⁄£_°


304 
OCSP_RESPDATA
 *
tbsRe•⁄£D©a
;

305 
X509_ALGOR
 *
sig«tuªAlg‹ôhm
;

306 
ASN1_BIT_STRING
 *
sig«tuª
;

307 
STACK_OF
(
X509
Ë*
˚πs
;

308 } 
	tOCSP_BASICRESP
;

321 
	#OCSP_REVOKED_STATUS_NOSTATUS
 -1

	)

322 
	#OCSP_REVOKED_STATUS_UNSPECIFIED
 0

	)

323 
	#OCSP_REVOKED_STATUS_KEYCOMPROMISE
 1

	)

324 
	#OCSP_REVOKED_STATUS_CACOMPROMISE
 2

	)

325 
	#OCSP_REVOKED_STATUS_AFFILIATIONCHANGED
 3

	)

326 
	#OCSP_REVOKED_STATUS_SUPERSEDED
 4

	)

327 
	#OCSP_REVOKED_STATUS_CESSATIONOFOPERATION
 5

	)

328 
	#OCSP_REVOKED_STATUS_CERTIFICATEHOLD
 6

	)

329 
	#OCSP_REVOKED_STATUS_REMOVEFROMCRL
 8

	)

336 
	soc•_¸l_id_°


338 
ASN1_IA5STRING
 *
¸lUæ
;

339 
ASN1_INTEGER
 *
¸lNum
;

340 
ASN1_GENERALIZEDTIME
 *
¸lTime
;

341 } 
	tOCSP_CRLID
;

347 
	soc•_£rvi˚_loˇt‹_°


349 
X509_NAME
* 
issuî
;

350 
STACK_OF
(
ACCESS_DESCRIPTION
Ë*
loˇt‹
;

351 } 
	tOCSP_SERVICELOC
;

353 
	#PEM_STRING_OCSP_REQUEST
 "OCSP REQUEST"

	)

354 
	#PEM_STRING_OCSP_RESPONSE
 "OCSP RESPONSE"

	)

356 
	#d2i_OCSP_REQUEST_bio
(
bp
,
p
Ë
	`ASN1_d2i_bio_of
(
OCSP_REQUEST
,
OCSP_REQUEST_√w
,
d2i_OCSP_REQUEST
,bp,p)

	)

358 
	#d2i_OCSP_RESPONSE_bio
(
bp
,
p
Ë
	`ASN1_d2i_bio_of
(
OCSP_RESPONSE
,
OCSP_RESPONSE_√w
,
d2i_OCSP_RESPONSE
,bp,p)

	)

360 
	#PEM_ªad_bio_OCSP_REQUEST
(
bp
,
x
,
cb
Ë(
OCSP_REQUEST
 *)
	`PEM_ASN1_ªad_bio
( \

361 (*(*)())
d2i_OCSP_REQUEST
,
PEM_STRING_OCSP_REQUEST
,
bp
,(**)
x
,
cb
,
NULL
)

	)

363 
	#PEM_ªad_bio_OCSP_RESPONSE
(
bp
,
x
,
cb
)(
OCSP_RESPONSE
 *)
	`PEM_ASN1_ªad_bio
(\

364 (*(*)())
d2i_OCSP_RESPONSE
,
PEM_STRING_OCSP_RESPONSE
,
bp
,(**)
x
,
cb
,
NULL
)

	)

366 
	#PEM_wrôe_bio_OCSP_REQUEST
(
bp
,
o
) \

367 
	`PEM_ASN1_wrôe_bio
(((*)())
i2d_OCSP_REQUEST
,
PEM_STRING_OCSP_REQUEST
,\

368 
bp
,(*)
o
, 
NULL
,NULL,0,NULL,NULL)

	)

370 
	#PEM_wrôe_bio_OCSP_RESPONSE
(
bp
,
o
) \

371 
	`PEM_ASN1_wrôe_bio
(((*)())
i2d_OCSP_RESPONSE
,
PEM_STRING_OCSP_RESPONSE
,\

372 
bp
,(*)
o
, 
NULL
,NULL,0,NULL,NULL)

	)

374 
	#i2d_OCSP_RESPONSE_bio
(
bp
,
o
Ë
	`ASN1_i2d_bio_of
(
OCSP_RESPONSE
,
i2d_OCSP_RESPONSE
,bp,o)

	)

376 
	#i2d_OCSP_REQUEST_bio
(
bp
,
o
Ë
	`ASN1_i2d_bio_of
(
OCSP_REQUEST
,
i2d_OCSP_REQUEST
,bp,o)

	)

378 
	#OCSP_REQUEST_sign
(
o
,
pkey
,
md
) \

379 
	`ASN1_ôem_sign
(
	`ASN1_ITEM_Ωå
(
OCSP_REQINFO
),\

380 
o
->
›ti⁄ÆSig«tuª
->
sig«tuªAlg‹ôhm
,
NULL
,\

381 
o
->
›ti⁄ÆSig«tuª
->
sig«tuª
,o->
tbsReque°
,
pkey
,
md
)

	)

383 
	#OCSP_BASICRESP_sign
(
o
,
pkey
,
md
,
d
) \

384 
	`ASN1_ôem_sign
(
	`ASN1_ITEM_Ωå
(
OCSP_RESPDATA
),
o
->
sig«tuªAlg‹ôhm
,
NULL
,\

385 
o
->
sig«tuª
,o->
tbsRe•⁄£D©a
,
pkey
,
md
)

	)

387 
	#OCSP_REQUEST_vîify
(
a
,
r
Ë
	`ASN1_ôem_vîify
(
	`ASN1_ITEM_Ωå
(
OCSP_REQINFO
),\

388 
a
->
›ti⁄ÆSig«tuª
->
sig«tuªAlg‹ôhm
,\

389 
a
->
›ti⁄ÆSig«tuª
->
sig«tuª
,a->
tbsReque°
,
r
)

	)

391 
	#OCSP_BASICRESP_vîify
(
a
,
r
,
d
Ë
	`ASN1_ôem_vîify
(
	`ASN1_ITEM_Ωå
(
OCSP_RESPDATA
),\

392 
a
->
sig«tuªAlg‹ôhm
,a->
sig«tuª
,a->
tbsRe•⁄£D©a
,
r
)

	)

394 
	#ASN1_BIT_STRING_dige°
(
d©a
,
ty≥
,
md
,
Àn
) \

395 
	`ASN1_ôem_dige°
(
	`ASN1_ITEM_Ωå
(
ASN1_BIT_STRING
),
ty≥
,
d©a
,
md
,
Àn
)

	)

397 
	#OCSP_CERTID_dup
(
cid
Ë
	`ASN1_dup_of
(
OCSP_CERTID
,
i2d_OCSP_CERTID
,
d2i_OCSP_CERTID
,cid)

	)

399 
	#OCSP_CERTSTATUS_dup
(
cs
)\

400 (
OCSP_CERTSTATUS
*)
	`ASN1_dup
(((*)())
i2d_OCSP_CERTSTATUS
,\

401 (*(*)())
d2i_OCSP_CERTSTATUS
,(*)(
cs
))

	)

403 
OCSP_RESPONSE
 *
OCSP_£ndªq_bio
(
BIO
 *
b
, *
∑th
, 
OCSP_REQUEST
 *
ªq
);

404 
OCSP_REQ_CTX
 *
OCSP_£ndªq_√w
(
BIO
 *
io
, *
∑th
, 
OCSP_REQUEST
 *
ªq
,

405 
maxlöe
);

406 
OCSP_£ndªq_nbio
(
OCSP_RESPONSE
 **
¥e•
, 
OCSP_REQ_CTX
 *
r˘x
);

407 
OCSP_REQ_CTX_‰ì
(
OCSP_REQ_CTX
 *
r˘x
);

409 
OCSP_CERTID
 *
OCSP_˚π_to_id
(c⁄° 
EVP_MD
 *
dg°
, 
X509
 *
subje˘
, X509 *
issuî
);

411 
OCSP_CERTID
 *
OCSP_˚π_id_√w
(c⁄° 
EVP_MD
 *
dg°
,

412 
X509_NAME
 *
issuîName
,

413 
ASN1_BIT_STRING
* 
issuîKey
,

414 
ASN1_INTEGER
 *
£rülNumbî
);

416 
OCSP_ONEREQ
 *
OCSP_ªque°_add0_id
(
OCSP_REQUEST
 *
ªq
, 
OCSP_CERTID
 *
cid
);

418 
OCSP_ªque°_add1_n⁄˚
(
OCSP_REQUEST
 *
ªq
, *
vÆ
, 
Àn
);

419 
OCSP_basic_add1_n⁄˚
(
OCSP_BASICRESP
 *
ª•
, *
vÆ
, 
Àn
);

420 
OCSP_check_n⁄˚
(
OCSP_REQUEST
 *
ªq
, 
OCSP_BASICRESP
 *
bs
);

421 
OCSP_c›y_n⁄˚
(
OCSP_BASICRESP
 *
ª•
, 
OCSP_REQUEST
 *
ªq
);

423 
OCSP_ªque°_£t1_«me
(
OCSP_REQUEST
 *
ªq
, 
X509_NAME
 *
nm
);

424 
OCSP_ªque°_add1_˚π
(
OCSP_REQUEST
 *
ªq
, 
X509
 *
˚π
);

426 
OCSP_ªque°_sign
(
OCSP_REQUEST
 *
ªq
,

427 
X509
 *
sig√r
,

428 
EVP_PKEY
 *
key
,

429 c⁄° 
EVP_MD
 *
dg°
,

430 
STACK_OF
(
X509
Ë*
˚πs
,

431 
Êags
);

433 
OCSP_ª•⁄£_°©us
(
OCSP_RESPONSE
 *
ª•
);

434 
OCSP_BASICRESP
 *
OCSP_ª•⁄£_gë1_basic
(
OCSP_RESPONSE
 *
ª•
);

436 
OCSP_ª•_cou¡
(
OCSP_BASICRESP
 *
bs
);

437 
OCSP_SINGLERESP
 *
OCSP_ª•_gë0
(
OCSP_BASICRESP
 *
bs
, 
idx
);

438 
OCSP_ª•_föd
(
OCSP_BASICRESP
 *
bs
, 
OCSP_CERTID
 *
id
, 
œ°
);

439 
OCSP_sögÀ_gë0_°©us
(
OCSP_SINGLERESP
 *
sögÀ
, *
ªas⁄
,

440 
ASN1_GENERALIZEDTIME
 **
ªvtime
,

441 
ASN1_GENERALIZEDTIME
 **
thisupd
,

442 
ASN1_GENERALIZEDTIME
 **
√xtupd
);

443 
OCSP_ª•_föd_°©us
(
OCSP_BASICRESP
 *
bs
, 
OCSP_CERTID
 *
id
, *
°©us
,

444 *
ªas⁄
,

445 
ASN1_GENERALIZEDTIME
 **
ªvtime
,

446 
ASN1_GENERALIZEDTIME
 **
thisupd
,

447 
ASN1_GENERALIZEDTIME
 **
√xtupd
);

448 
OCSP_check_vÆidôy
(
ASN1_GENERALIZEDTIME
 *
thisupd
,

449 
ASN1_GENERALIZEDTIME
 *
√xtupd
,

450 
£c
, 
max£c
);

452 
OCSP_ªque°_vîify
(
OCSP_REQUEST
 *
ªq
, 
STACK_OF
(
X509
Ë*
˚πs
, 
X509_STORE
 *
°‹e
, 
Êags
);

454 
OCSP_∑r£_uæ
(*
uæ
, **
pho°
, **
µ‹t
, **
µ©h
, *
ps¶
);

456 
OCSP_id_issuî_cmp
(
OCSP_CERTID
 *
a
, OCSP_CERTID *
b
);

457 
OCSP_id_cmp
(
OCSP_CERTID
 *
a
, OCSP_CERTID *
b
);

459 
OCSP_ªque°_⁄îeq_cou¡
(
OCSP_REQUEST
 *
ªq
);

460 
OCSP_ONEREQ
 *
OCSP_ªque°_⁄îeq_gë0
(
OCSP_REQUEST
 *
ªq
, 
i
);

461 
OCSP_CERTID
 *
OCSP_⁄îeq_gë0_id
(
OCSP_ONEREQ
 *
⁄e
);

462 
OCSP_id_gë0_öfo
(
ASN1_OCTET_STRING
 **
piNameHash
, 
ASN1_OBJECT
 **
pmd
,

463 
ASN1_OCTET_STRING
 **
pikeyHash
,

464 
ASN1_INTEGER
 **
p£rül
, 
OCSP_CERTID
 *
cid
);

465 
OCSP_ªque°_is_sig√d
(
OCSP_REQUEST
 *
ªq
);

466 
OCSP_RESPONSE
 *
OCSP_ª•⁄£_¸óã
(
°©us
, 
OCSP_BASICRESP
 *
bs
);

467 
OCSP_SINGLERESP
 *
OCSP_basic_add1_°©us
(
OCSP_BASICRESP
 *
r•
,

468 
OCSP_CERTID
 *
cid
,

469 
°©us
, 
ªas⁄
,

470 
ASN1_TIME
 *
ªvtime
,

471 
ASN1_TIME
 *
thisupd
, ASN1_TIME *
√xtupd
);

472 
OCSP_basic_add1_˚π
(
OCSP_BASICRESP
 *
ª•
, 
X509
 *
˚π
);

473 
OCSP_basic_sign
(
OCSP_BASICRESP
 *
br•
,

474 
X509
 *
sig√r
, 
EVP_PKEY
 *
key
, c⁄° 
EVP_MD
 *
dg°
,

475 
STACK_OF
(
X509
Ë*
˚πs
, 
Êags
);

477 
ASN1_STRING
 *
ASN1_STRING_ícode
(ASN1_STRING *
s
, 
i2d_of_void
 *
i2d
,

478 *
d©a
, 
STACK_OF
(
ASN1_OBJECT
Ë*
sk
);

479 
	#ASN1_STRING_ícode_of
(
ty≥
,
s
,
i2d
,
d©a
,
sk
) \

480 
	`ASN1_STRING_ícode
(
s
, 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), 
d©a
, 
sk
)

	)

482 
X509_EXTENSION
 *
OCSP_¸lID_√w
(*
uæ
, *
n
, *
tim
);

484 
X509_EXTENSION
 *
OCSP_ac˚±_ª•⁄£s_√w
(**
oids
);

486 
X509_EXTENSION
 *
OCSP_¨chive_cutoff_√w
(* 
tim
);

488 
X509_EXTENSION
 *
OCSP_uæ_sv˛oc_√w
(
X509_NAME
* 
issuî
, **
uæs
);

490 
OCSP_REQUEST_gë_ext_cou¡
(
OCSP_REQUEST
 *
x
);

491 
OCSP_REQUEST_gë_ext_by_NID
(
OCSP_REQUEST
 *
x
, 
nid
, 
œ°pos
);

492 
OCSP_REQUEST_gë_ext_by_OBJ
(
OCSP_REQUEST
 *
x
, 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

493 
OCSP_REQUEST_gë_ext_by_¸ôiˇl
(
OCSP_REQUEST
 *
x
, 
¸ô
, 
œ°pos
);

494 
X509_EXTENSION
 *
OCSP_REQUEST_gë_ext
(
OCSP_REQUEST
 *
x
, 
loc
);

495 
X509_EXTENSION
 *
OCSP_REQUEST_dñëe_ext
(
OCSP_REQUEST
 *
x
, 
loc
);

496 *
OCSP_REQUEST_gë1_ext_d2i
(
OCSP_REQUEST
 *
x
, 
nid
, *
¸ô
, *
idx
);

497 
OCSP_REQUEST_add1_ext_i2d
(
OCSP_REQUEST
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

498 
Êags
);

499 
OCSP_REQUEST_add_ext
(
OCSP_REQUEST
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

501 
OCSP_ONEREQ_gë_ext_cou¡
(
OCSP_ONEREQ
 *
x
);

502 
OCSP_ONEREQ_gë_ext_by_NID
(
OCSP_ONEREQ
 *
x
, 
nid
, 
œ°pos
);

503 
OCSP_ONEREQ_gë_ext_by_OBJ
(
OCSP_ONEREQ
 *
x
, 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

504 
OCSP_ONEREQ_gë_ext_by_¸ôiˇl
(
OCSP_ONEREQ
 *
x
, 
¸ô
, 
œ°pos
);

505 
X509_EXTENSION
 *
OCSP_ONEREQ_gë_ext
(
OCSP_ONEREQ
 *
x
, 
loc
);

506 
X509_EXTENSION
 *
OCSP_ONEREQ_dñëe_ext
(
OCSP_ONEREQ
 *
x
, 
loc
);

507 *
OCSP_ONEREQ_gë1_ext_d2i
(
OCSP_ONEREQ
 *
x
, 
nid
, *
¸ô
, *
idx
);

508 
OCSP_ONEREQ_add1_ext_i2d
(
OCSP_ONEREQ
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

509 
Êags
);

510 
OCSP_ONEREQ_add_ext
(
OCSP_ONEREQ
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

512 
OCSP_BASICRESP_gë_ext_cou¡
(
OCSP_BASICRESP
 *
x
);

513 
OCSP_BASICRESP_gë_ext_by_NID
(
OCSP_BASICRESP
 *
x
, 
nid
, 
œ°pos
);

514 
OCSP_BASICRESP_gë_ext_by_OBJ
(
OCSP_BASICRESP
 *
x
, 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

515 
OCSP_BASICRESP_gë_ext_by_¸ôiˇl
(
OCSP_BASICRESP
 *
x
, 
¸ô
, 
œ°pos
);

516 
X509_EXTENSION
 *
OCSP_BASICRESP_gë_ext
(
OCSP_BASICRESP
 *
x
, 
loc
);

517 
X509_EXTENSION
 *
OCSP_BASICRESP_dñëe_ext
(
OCSP_BASICRESP
 *
x
, 
loc
);

518 *
OCSP_BASICRESP_gë1_ext_d2i
(
OCSP_BASICRESP
 *
x
, 
nid
, *
¸ô
, *
idx
);

519 
OCSP_BASICRESP_add1_ext_i2d
(
OCSP_BASICRESP
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

520 
Êags
);

521 
OCSP_BASICRESP_add_ext
(
OCSP_BASICRESP
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

523 
OCSP_SINGLERESP_gë_ext_cou¡
(
OCSP_SINGLERESP
 *
x
);

524 
OCSP_SINGLERESP_gë_ext_by_NID
(
OCSP_SINGLERESP
 *
x
, 
nid
, 
œ°pos
);

525 
OCSP_SINGLERESP_gë_ext_by_OBJ
(
OCSP_SINGLERESP
 *
x
, 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

526 
OCSP_SINGLERESP_gë_ext_by_¸ôiˇl
(
OCSP_SINGLERESP
 *
x
, 
¸ô
, 
œ°pos
);

527 
X509_EXTENSION
 *
OCSP_SINGLERESP_gë_ext
(
OCSP_SINGLERESP
 *
x
, 
loc
);

528 
X509_EXTENSION
 *
OCSP_SINGLERESP_dñëe_ext
(
OCSP_SINGLERESP
 *
x
, 
loc
);

529 *
OCSP_SINGLERESP_gë1_ext_d2i
(
OCSP_SINGLERESP
 *
x
, 
nid
, *
¸ô
, *
idx
);

530 
OCSP_SINGLERESP_add1_ext_i2d
(
OCSP_SINGLERESP
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

531 
Êags
);

532 
OCSP_SINGLERESP_add_ext
(
OCSP_SINGLERESP
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

534 
DECLARE_ASN1_FUNCTIONS
(
OCSP_SINGLERESP
)

535 
DECLARE_ASN1_FUNCTIONS
(
OCSP_CERTSTATUS
)

536 
DECLARE_ASN1_FUNCTIONS
(
OCSP_REVOKEDINFO
)

537 
DECLARE_ASN1_FUNCTIONS
(
OCSP_BASICRESP
)

538 
DECLARE_ASN1_FUNCTIONS
(
OCSP_RESPDATA
)

539 
DECLARE_ASN1_FUNCTIONS
(
OCSP_RESPID
)

540 
DECLARE_ASN1_FUNCTIONS
(
OCSP_RESPONSE
)

541 
DECLARE_ASN1_FUNCTIONS
(
OCSP_RESPBYTES
)

542 
DECLARE_ASN1_FUNCTIONS
(
OCSP_ONEREQ
)

543 
DECLARE_ASN1_FUNCTIONS
(
OCSP_CERTID
)

544 
DECLARE_ASN1_FUNCTIONS
(
OCSP_REQUEST
)

545 
DECLARE_ASN1_FUNCTIONS
(
OCSP_SIGNATURE
)

546 
DECLARE_ASN1_FUNCTIONS
(
OCSP_REQINFO
)

547 
DECLARE_ASN1_FUNCTIONS
(
OCSP_CRLID
)

548 
DECLARE_ASN1_FUNCTIONS
(
OCSP_SERVICELOC
)

550 *
OCSP_ª•⁄£_°©us_°r
(
s
);

551 *
OCSP_˚π_°©us_°r
(
s
);

552 *
OCSP_¸l_ªas⁄_°r
(
s
);

554 
OCSP_REQUEST_¥öt
(
BIO
 *
bp
, 
OCSP_REQUEST
* 
a
, 
Êags
);

555 
OCSP_RESPONSE_¥öt
(
BIO
 *
bp
, 
OCSP_RESPONSE
* 
o
, 
Êags
);

557 
OCSP_basic_vîify
(
OCSP_BASICRESP
 *
bs
, 
STACK_OF
(
X509
Ë*
˚πs
,

558 
X509_STORE
 *
°
, 
Êags
);

564 
ERR_lﬂd_OCSP_°rögs
();

569 
	#OCSP_F_ASN1_STRING_ENCODE
 100

	)

570 
	#OCSP_F_D2I_OCSP_NONCE
 102

	)

571 
	#OCSP_F_OCSP_BASIC_ADD1_STATUS
 103

	)

572 
	#OCSP_F_OCSP_BASIC_SIGN
 104

	)

573 
	#OCSP_F_OCSP_BASIC_VERIFY
 105

	)

574 
	#OCSP_F_OCSP_CERT_ID_NEW
 101

	)

575 
	#OCSP_F_OCSP_CHECK_DELEGATED
 106

	)

576 
	#OCSP_F_OCSP_CHECK_IDS
 107

	)

577 
	#OCSP_F_OCSP_CHECK_ISSUER
 108

	)

578 
	#OCSP_F_OCSP_CHECK_VALIDITY
 115

	)

579 
	#OCSP_F_OCSP_MATCH_ISSUERID
 109

	)

580 
	#OCSP_F_OCSP_PARSE_URL
 114

	)

581 
	#OCSP_F_OCSP_REQUEST_SIGN
 110

	)

582 
	#OCSP_F_OCSP_REQUEST_VERIFY
 116

	)

583 
	#OCSP_F_OCSP_RESPONSE_GET1_BASIC
 111

	)

584 
	#OCSP_F_OCSP_SENDREQ_BIO
 112

	)

585 
	#OCSP_F_PARSE_HTTP_LINE1
 117

	)

586 
	#OCSP_F_REQUEST_VERIFY
 113

	)

589 
	#OCSP_R_BAD_DATA
 100

	)

590 
	#OCSP_R_CERTIFICATE_VERIFY_ERROR
 101

	)

591 
	#OCSP_R_DIGEST_ERR
 102

	)

592 
	#OCSP_R_ERROR_IN_NEXTUPDATE_FIELD
 122

	)

593 
	#OCSP_R_ERROR_IN_THISUPDATE_FIELD
 123

	)

594 
	#OCSP_R_ERROR_PARSING_URL
 121

	)

595 
	#OCSP_R_MISSING_OCSPSIGNING_USAGE
 103

	)

596 
	#OCSP_R_NEXTUPDATE_BEFORE_THISUPDATE
 124

	)

597 
	#OCSP_R_NOT_BASIC_RESPONSE
 104

	)

598 
	#OCSP_R_NO_CERTIFICATES_IN_CHAIN
 105

	)

599 
	#OCSP_R_NO_CONTENT
 106

	)

600 
	#OCSP_R_NO_PUBLIC_KEY
 107

	)

601 
	#OCSP_R_NO_RESPONSE_DATA
 108

	)

602 
	#OCSP_R_NO_REVOKED_TIME
 109

	)

603 
	#OCSP_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE
 110

	)

604 
	#OCSP_R_REQUEST_NOT_SIGNED
 128

	)

605 
	#OCSP_R_RESPONSE_CONTAINS_NO_REVOCATION_DATA
 111

	)

606 
	#OCSP_R_ROOT_CA_NOT_TRUSTED
 112

	)

607 
	#OCSP_R_SERVER_READ_ERROR
 113

	)

608 
	#OCSP_R_SERVER_RESPONSE_ERROR
 114

	)

609 
	#OCSP_R_SERVER_RESPONSE_PARSE_ERROR
 115

	)

610 
	#OCSP_R_SERVER_WRITE_ERROR
 116

	)

611 
	#OCSP_R_SIGNATURE_FAILURE
 117

	)

612 
	#OCSP_R_SIGNER_CERTIFICATE_NOT_FOUND
 118

	)

613 
	#OCSP_R_STATUS_EXPIRED
 125

	)

614 
	#OCSP_R_STATUS_NOT_YET_VALID
 126

	)

615 
	#OCSP_R_STATUS_TOO_OLD
 127

	)

616 
	#OCSP_R_UNKNOWN_MESSAGE_DIGEST
 119

	)

617 
	#OCSP_R_UNKNOWN_NID
 120

	)

618 
	#OCSP_R_UNSUPPORTED_REQUESTORNAME_TYPE
 129

	)

620 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/opensslconf.h

6 #i‚de‡
OPENSSL_DOING_MAKEDEPEND


9 #i‚de‡
OPENSSL_NO_CMS


10 
	#OPENSSL_NO_CMS


	)

13 #i‚de‡
OPENSSL_NO_SEED


14 
	#OPENSSL_NO_SEED


	)

17 #i‚de‡
OPENSSL_NO_GMP


18 
	#OPENSSL_NO_GMP


	)

21 #i‚de‡
OPENSSL_NO_JPAKE


22 
	#OPENSSL_NO_JPAKE


	)

25 #i‚de‡
OPENSSL_NO_KRB5


26 
	#OPENSSL_NO_KRB5


	)

30 #i‚de‡
OPENSSL_THREADS


31 
	#OPENSSL_THREADS


	)

33 #i‚de‡
OPENSSL_NO_STATIC_ENGINE


34 
	#OPENSSL_NO_STATIC_ENGINE


	)

41 #ifde‡
OPENSSL_ALGORITHM_DEFINES


42 #i‡
deföed
(
OPENSSL_NO_GMP
Ë&& !deföed(
NO_GMP
)

43 
	#NO_GMP


	)

45 #i‡
deföed
(
OPENSSL_NO_KRB5
Ë&& !deföed(
NO_KRB5
)

46 
	#NO_KRB5


	)

49 #ifde‡
OPENSSL_OTHER_DEFINES


50 #i‚de‡
NO_ASM


51 
	#NO_ASM


	)

58 #unde‡
I386_ONLY


60 #i‡!(
deföed
(
VMS
Ë|| deföed(
__VMS
))

61 #i‡
deföed
(
HEADER_CRYPTLIB_H
Ë&& !deföed(
OPENSSLDIR
)

62 
	#ENGINESDIR
 "/u§/lib/ígöes"

	)

63 
	#OPENSSLDIR
 "/ëc/s¶"

	)

67 #unde‡
OPENSSL_UNISTD


68 
	#OPENSSL_UNISTD
 <
uni°d
.
h
>

	)

70 #unde‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


72 #i‡
deföed
(
HEADER_IDEA_H
Ë&& !deföed(
IDEA_INT
)

73 
	#IDEA_INT
 

	)

76 #i‡
deföed
(
HEADER_MD2_H
Ë&& !deföed(
MD2_INT
)

77 
	#MD2_INT
 

	)

80 #i‡
deföed
(
HEADER_RC2_H
Ë&& !deföed(
RC2_INT
)

82 
	#RC2_INT
 

	)

85 #i‡
deföed
(
HEADER_RC4_H
)

86 #i‡!
deföed
(
RC4_INT
)

94 
	#RC4_INT
 

	)

96 #i‡!
deföed
(
RC4_CHUNK
)

101 
	#RC4_CHUNK
 

	)

105 #i‡(
deföed
(
HEADER_NEW_DES_H
Ë|| deföed(
HEADER_DES_H
)Ë&& !deföed(
DES_LONG
)

108 #i‚de‡
DES_LONG


109 
	#DES_LONG
 

	)

113 #i‡
deföed
(
HEADER_BN_H
Ë&& !deföed(
CONFIG_HEADER_BN_H
)

114 
	#CONFIG_HEADER_BN_H


	)

115 #unde‡
BN_LLONG


123 
	#SIXTY_FOUR_BIT_LONG


	)

124 #unde‡
SIXTY_FOUR_BIT


125 #unde‡
THIRTY_TWO_BIT


126 #unde‡
SIXTEEN_BIT


127 #unde‡
EIGHT_BIT


130 #i‡
deföed
(
HEADER_RC4_LOCL_H
Ë&& !deföed(
CONFIG_HEADER_RC4_LOCL_H
)

131 
	#CONFIG_HEADER_RC4_LOCL_H


	)

134 #unde‡
RC4_INDEX


137 #i‡
deföed
(
HEADER_BF_LOCL_H
Ë&& !deföed(
CONFIG_HEADER_BF_LOCL_H
)

138 
	#CONFIG_HEADER_BF_LOCL_H


	)

139 #unde‡
BF_PTR


142 #i‡
deföed
(
HEADER_DES_LOCL_H
Ë&& !deföed(
CONFIG_HEADER_DES_LOCL_H
)

143 
	#CONFIG_HEADER_DES_LOCL_H


	)

144 #i‚de‡
DES_DEFAULT_OPTIONS


147 #i‚de‡
DES_PTR


148 #unde‡
DES_PTR


154 #i‚de‡
DES_RISC1


155 #unde‡
DES_RISC1


158 #i‚de‡
DES_RISC2


159 #unde‡
DES_RISC2


162 #i‡
deföed
(
DES_RISC1
Ë&& deföed(
DES_RISC2
)

163 
YOU
 
SHOULD
 
NOT
 
HAVE
 
BOTH
 
DES_RISC1
 
AND
 
DES_RISC2
 
	gDEFINED
!!!!!

168 #i‚de‡
DES_UNROLL


169 
	#DES_UNROLL


	)

175 #i‡!
deföed
(
DES_PTR
Ë&& !deföed(
DES_RISC1
Ë&& !deföed(
DES_RISC2
Ë&& !deföed(
DES_UNROLL
)

182 #i‡
deföed
–
sun
 )

183 
	#DES_PTR


	)

184 
	#DES_RISC1


	)

185 
	#DES_UNROLL


	)

186 #ñi‡
deföed
–
__u…rix
 )

187 
	#DES_PTR


	)

188 
	#DES_RISC2


	)

189 
	#DES_UNROLL


	)

190 #ñi‡
deföed
–
__osf1__
 )

191 
	#DES_PTR


	)

192 
	#DES_RISC2


	)

193 #ñi‡
deföed
 ( 
_AIX
 )

195 #ñi‡
deföed
–
__hpux
 )

197 #ñi‡
deföed
–
__aux
 )

199 #ñi‡
deföed
–
__dgux
 )

200 
	#DES_UNROLL


	)

201 #ñi‡
deföed
–
__sgi
 )

202 
	#DES_PTR


	)

203 
	#DES_RISC2


	)

204 
	#DES_UNROLL


	)

205 #ñi‡
deföed
–
i386
 )

206 
	#DES_PTR


	)

207 
	#DES_RISC1


	)

208 
	#DES_UNROLL


	)

	@/usr/include/openssl/opensslv.h

1 #i‚de‡
HEADER_OPENSSLV_H


2 
	#HEADER_OPENSSLV_H


	)

28 
	#OPENSSL_VERSION_NUMBER
 0x0090819fL

	)

29 #ifde‡
OPENSSL_FIPS


30 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 0.9.8y-fù†5 Feb 2013"

	)

32 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 0.9.8y 5 Feb 2013"

	)

34 
	#OPENSSL_VERSION_PTEXT
 "Ö¨ào‡" 
OPENSSL_VERSION_TEXT


	)

85 
	#SHLIB_VERSION_HISTORY
 ""

	)

86 
	#SHLIB_VERSION_NUMBER
 "6"

	)

	@/usr/include/openssl/ossl_typ.h

55 #i‚de‡
HEADER_OPENSSL_TYPES_H


56 
	#HEADER_OPENSSL_TYPES_H


	)

58 
	~<›ís¶/e_os2.h
>

60 #ifde‡
NO_ASN1_TYPEDEFS


61 
	#ASN1_INTEGER
 
ASN1_STRING


	)

62 
	#ASN1_ENUMERATED
 
ASN1_STRING


	)

63 
	#ASN1_BIT_STRING
 
ASN1_STRING


	)

64 
	#ASN1_OCTET_STRING
 
ASN1_STRING


	)

65 
	#ASN1_PRINTABLESTRING
 
ASN1_STRING


	)

66 
	#ASN1_T61STRING
 
ASN1_STRING


	)

67 
	#ASN1_IA5STRING
 
ASN1_STRING


	)

68 
	#ASN1_UTCTIME
 
ASN1_STRING


	)

69 
	#ASN1_GENERALIZEDTIME
 
ASN1_STRING


	)

70 
	#ASN1_TIME
 
ASN1_STRING


	)

71 
	#ASN1_GENERALSTRING
 
ASN1_STRING


	)

72 
	#ASN1_UNIVERSALSTRING
 
ASN1_STRING


	)

73 
	#ASN1_BMPSTRING
 
ASN1_STRING


	)

74 
	#ASN1_VISIBLESTRING
 
ASN1_STRING


	)

75 
	#ASN1_UTF8STRING
 
ASN1_STRING


	)

76 
	#ASN1_BOOLEAN
 

	)

77 
	#ASN1_NULL
 

	)

79 
a¢1_°rög_°
 
	tASN1_INTEGER
;

80 
a¢1_°rög_°
 
	tASN1_ENUMERATED
;

81 
a¢1_°rög_°
 
	tASN1_BIT_STRING
;

82 
a¢1_°rög_°
 
	tASN1_OCTET_STRING
;

83 
a¢1_°rög_°
 
	tASN1_PRINTABLESTRING
;

84 
a¢1_°rög_°
 
	tASN1_T61STRING
;

85 
a¢1_°rög_°
 
	tASN1_IA5STRING
;

86 
a¢1_°rög_°
 
	tASN1_GENERALSTRING
;

87 
a¢1_°rög_°
 
	tASN1_UNIVERSALSTRING
;

88 
a¢1_°rög_°
 
	tASN1_BMPSTRING
;

89 
a¢1_°rög_°
 
	tASN1_UTCTIME
;

90 
a¢1_°rög_°
 
	tASN1_TIME
;

91 
a¢1_°rög_°
 
	tASN1_GENERALIZEDTIME
;

92 
a¢1_°rög_°
 
	tASN1_VISIBLESTRING
;

93 
a¢1_°rög_°
 
	tASN1_UTF8STRING
;

94 
	tASN1_BOOLEAN
;

95 
	tASN1_NULL
;

98 #ifde‡
OPENSSL_SYS_WIN32


99 #unde‡
X509_NAME


100 #unde‡
X509_EXTENSIONS


101 #unde‡
X509_CERT_PAIR


102 #unde‡
PKCS7_ISSUER_AND_SERIAL


103 #unde‡
OCSP_REQUEST


104 #unde‡
OCSP_RESPONSE


107 #ifde‡
BIGNUM


108 #unde‡
BIGNUM


110 
bignum_°
 
	tBIGNUM
;

111 
bignum_˘x
 
	tBN_CTX
;

112 
bn_blödög_°
 
	tBN_BLINDING
;

113 
bn_m⁄t_˘x_°
 
	tBN_MONT_CTX
;

114 
bn_ª˝_˘x_°
 
	tBN_RECP_CTX
;

115 
bn_gícb_°
 
	tBN_GENCB
;

117 
buf_mem_°
 
	tBUF_MEM
;

119 
evp_cùhî_°
 
	tEVP_CIPHER
;

120 
evp_cùhî_˘x_°
 
	tEVP_CIPHER_CTX
;

121 
ív_md_°
 
	tEVP_MD
;

122 
ív_md_˘x_°
 
	tEVP_MD_CTX
;

123 
evp_pkey_°
 
	tEVP_PKEY
;

125 
dh_°
 
	tDH
;

126 
dh_mëhod
 
	tDH_METHOD
;

128 
dß_°
 
	tDSA
;

129 
dß_mëhod
 
	tDSA_METHOD
;

131 
rß_°
 
	tRSA
;

132 
rß_mëh_°
 
	tRSA_METHOD
;

134 
ønd_mëh_°
 
	tRAND_METHOD
;

136 
ecdh_mëhod
 
	tECDH_METHOD
;

137 
ecdß_mëhod
 
	tECDSA_METHOD
;

139 
x509_°
 
	tX509
;

140 
X509_Æg‹_°
 
	tX509_ALGOR
;

141 
X509_¸l_°
 
	tX509_CRL
;

142 
X509_«me_°
 
	tX509_NAME
;

143 
x509_°‹e_°
 
	tX509_STORE
;

144 
x509_°‹e_˘x_°
 
	tX509_STORE_CTX
;

145 
s¶_°
 
	tSSL
;

146 
s¶_˘x_°
 
	tSSL_CTX
;

148 
v3_ext_˘x
 
	tX509V3_CTX
;

149 
c⁄f_°
 
	tCONF
;

151 
°‹e_°
 
	tSTORE
;

152 
°‹e_mëhod_°
 
	tSTORE_METHOD
;

154 
ui_°
 
	tUI
;

155 
ui_mëhod_°
 
	tUI_METHOD
;

157 
°_ERR_FNS
 
	tERR_FNS
;

159 
ígöe_°
 
	tENGINE
;

161 
X509_POLICY_NODE_°
 
	tX509_POLICY_NODE
;

162 
X509_POLICY_LEVEL_°
 
	tX509_POLICY_LEVEL
;

163 
X509_POLICY_TREE_°
 
	tX509_POLICY_TREE
;

164 
X509_POLICY_CACHE_°
 
	tX509_POLICY_CACHE
;

167 
	#DECLARE_PKCS12_STACK_OF
(
ty≥
Ë

	)

168 
	#IMPLEMENT_PKCS12_STACK_OF
(
ty≥
Ë

	)

170 
¸y±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

172 
	tCRYPTO_EX_√w
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

173 
	tidx
, 
	t¨gl
, *
	t¨gp
);

174 
	tCRYPTO_EX_‰ì
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

175 
	tidx
, 
	t¨gl
, *
	t¨gp
);

176 
	tCRYPTO_EX_dup
(
	tCRYPTO_EX_DATA
 *
	tto
, CRYPTO_EX_DATA *
	t‰om
, *
	t‰om_d
,

177 
	tidx
, 
	t¨gl
, *
	t¨gp
);

179 
oc•_ªq_˘x_°
 
	tOCSP_REQ_CTX
;

180 
oc•_ª•⁄£_°
 
	tOCSP_RESPONSE
;

181 
oc•_ª•⁄dî_id_°
 
	tOCSP_RESPID
;

	@/usr/include/openssl/pem.h

59 #i‚de‡
HEADER_PEM_H


60 
	#HEADER_PEM_H


	)

62 
	~<›ís¶/e_os2.h
>

63 #i‚de‡
OPENSSL_NO_BIO


64 
	~<›ís¶/bio.h
>

66 #i‚de‡
OPENSSL_NO_STACK


67 
	~<›ís¶/°ack.h
>

69 
	~<›ís¶/evp.h
>

70 
	~<›ís¶/x509.h
>

71 
	~<›ís¶/≥m2.h
>

73 #ifde‡ 
__˝lu•lus


77 
	#PEM_BUFSIZE
 1024

	)

79 
	#PEM_OBJ_UNDEF
 0

	)

80 
	#PEM_OBJ_X509
 1

	)

81 
	#PEM_OBJ_X509_REQ
 2

	)

82 
	#PEM_OBJ_CRL
 3

	)

83 
	#PEM_OBJ_SSL_SESSION
 4

	)

84 
	#PEM_OBJ_PRIV_KEY
 10

	)

85 
	#PEM_OBJ_PRIV_RSA
 11

	)

86 
	#PEM_OBJ_PRIV_DSA
 12

	)

87 
	#PEM_OBJ_PRIV_DH
 13

	)

88 
	#PEM_OBJ_PUB_RSA
 14

	)

89 
	#PEM_OBJ_PUB_DSA
 15

	)

90 
	#PEM_OBJ_PUB_DH
 16

	)

91 
	#PEM_OBJ_DHPARAMS
 17

	)

92 
	#PEM_OBJ_DSAPARAMS
 18

	)

93 
	#PEM_OBJ_PRIV_RSA_PUBLIC
 19

	)

94 
	#PEM_OBJ_PRIV_ECDSA
 20

	)

95 
	#PEM_OBJ_PUB_ECDSA
 21

	)

96 
	#PEM_OBJ_ECPARAMETERS
 22

	)

98 
	#PEM_ERROR
 30

	)

99 
	#PEM_DEK_DES_CBC
 40

	)

100 
	#PEM_DEK_IDEA_CBC
 45

	)

101 
	#PEM_DEK_DES_EDE
 50

	)

102 
	#PEM_DEK_DES_ECB
 60

	)

103 
	#PEM_DEK_RSA
 70

	)

104 
	#PEM_DEK_RSA_MD2
 80

	)

105 
	#PEM_DEK_RSA_MD5
 90

	)

107 
	#PEM_MD_MD2
 
NID_md2


	)

108 
	#PEM_MD_MD5
 
NID_md5


	)

109 
	#PEM_MD_SHA
 
NID_sha


	)

110 
	#PEM_MD_MD2_RSA
 
NID_md2WôhRSAEn¸y±i⁄


	)

111 
	#PEM_MD_MD5_RSA
 
NID_md5WôhRSAEn¸y±i⁄


	)

112 
	#PEM_MD_SHA_RSA
 
NID_sha1WôhRSAEn¸y±i⁄


	)

114 
	#PEM_STRING_X509_OLD
 "X509 CERTIFICATE"

	)

115 
	#PEM_STRING_X509
 "CERTIFICATE"

	)

116 
	#PEM_STRING_X509_PAIR
 "CERTIFICATE PAIR"

	)

117 
	#PEM_STRING_X509_TRUSTED
 "TRUSTED CERTIFICATE"

	)

118 
	#PEM_STRING_X509_REQ_OLD
 "NEW CERTIFICATE REQUEST"

	)

119 
	#PEM_STRING_X509_REQ
 "CERTIFICATE REQUEST"

	)

120 
	#PEM_STRING_X509_CRL
 "X509 CRL"

	)

121 
	#PEM_STRING_EVP_PKEY
 "ANY PRIVATE KEY"

	)

122 
	#PEM_STRING_PUBLIC
 "PUBLIC KEY"

	)

123 
	#PEM_STRING_RSA
 "RSA PRIVATE KEY"

	)

124 
	#PEM_STRING_RSA_PUBLIC
 "RSA PUBLIC KEY"

	)

125 
	#PEM_STRING_DSA
 "DSA PRIVATE KEY"

	)

126 
	#PEM_STRING_DSA_PUBLIC
 "DSA PUBLIC KEY"

	)

127 
	#PEM_STRING_PKCS7
 "PKCS7"

	)

128 
	#PEM_STRING_PKCS7_SIGNED
 "PKCS #7 SIGNED DATA"

	)

129 
	#PEM_STRING_PKCS8
 "ENCRYPTED PRIVATE KEY"

	)

130 
	#PEM_STRING_PKCS8INF
 "PRIVATE KEY"

	)

131 
	#PEM_STRING_DHPARAMS
 "DH PARAMETERS"

	)

132 
	#PEM_STRING_SSL_SESSION
 "SSL SESSION PARAMETERS"

	)

133 
	#PEM_STRING_DSAPARAMS
 "DSA PARAMETERS"

	)

134 
	#PEM_STRING_ECDSA_PUBLIC
 "ECDSA PUBLIC KEY"

	)

135 
	#PEM_STRING_ECPARAMETERS
 "EC PARAMETERS"

	)

136 
	#PEM_STRING_ECPRIVATEKEY
 "EC PRIVATE KEY"

	)

137 
	#PEM_STRING_CMS
 "CMS"

	)

141 
	sPEM_Encode_Sól_°


143 
EVP_ENCODE_CTX
 
ícode
;

144 
EVP_MD_CTX
 
md
;

145 
EVP_CIPHER_CTX
 
cùhî
;

146 } 
	tPEM_ENCODE_SEAL_CTX
;

149 
	#PEM_TYPE_ENCRYPTED
 10

	)

150 
	#PEM_TYPE_MIC_ONLY
 20

	)

151 
	#PEM_TYPE_MIC_CLEAR
 30

	)

152 
	#PEM_TYPE_CLEAR
 40

	)

154 
	s≥m_ªcù_°


156 *
«me
;

157 
X509_NAME
 *
dn
;

159 
cùhî
;

160 
key_íc
;

162 } 
	tPEM_USER
;

164 
	s≥m_˘x_°


166 
ty≥
;

169 
vîsi⁄
;

170 
mode
;

171 } 
¥oc_ty≥
;

173 *
domaö
;

176 
cùhî
;

179 } 
DEK_öfo
;

181 
PEM_USER
 *
‹igö©‹
;

183 
num_ªcùõ¡
;

184 
PEM_USER
 **
ªcùõ¡
;

186 #i‚de‡
OPENSSL_NO_STACK


187 
STACK
 *
x509_chaö
;

189 *
x509_chaö
;

191 
EVP_MD
 *
md
;

193 
md_íc
;

194 
md_Àn
;

195 *
md_d©a
;

197 
EVP_CIPHER
 *
dec
;

198 
key_Àn
;

199 *
key
;

204 
d©a_íc
;

205 
d©a_Àn
;

206 *
d©a
;

207 } 
	tPEM_CTX
;

214 #ifde‡
OPENSSL_NO_FP_API


216 
	#IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

217 
	#IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

218 
	#IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

219 
	#IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

220 
	#IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

224 
	#IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

225 
ty≥
 *
PEM_ªad_
##
	`«me
(
FILE
 *
Â
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
)\

227  (
ty≥
*)
	`PEM_ASN1_ªad
(
	`CHECKED_D2I_OF
—y≥, 
d2i_
##
a¢1
), \

228 
°r
, 
Â
, \

229 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
), \

230 
cb
, 
u
); \

231 }

	)

233 
	#IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

234 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
) \

236  
	`PEM_ASN1_wrôe
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_
##
a¢1
), \

237 
°r
, 
Â
, \

238 
	`CHECKED_PTR_OF
(
ty≥
, 
x
), \

239 
NULL
, NULL, 0, NULL, NULL); \

240 }

	)

242 
	#IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

243 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, c⁄° 
ty≥
 *
x
) \

245  
	`PEM_ASN1_wrôe
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d_
##
a¢1
), \

246 
°r
, 
Â
, \

247 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
), \

248 
NULL
, NULL, 0, NULL, NULL); \

249 }

	)

251 
	#IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

252 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

253 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, \

254 *
u
) \

256  
	`PEM_ASN1_wrôe
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_
##
a¢1
), \

257 
°r
, 
Â
, \

258 
	`CHECKED_PTR_OF
(
ty≥
, 
x
), \

259 
íc
, 
k°r
, 
kÀn
, 
cb
, 
u
); \

260 }

	)

262 
	#IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

263 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

264 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, \

265 *
u
) \

267  
	`PEM_ASN1_wrôe
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d_
##
a¢1
), \

268 
°r
, 
Â
, \

269 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
), \

270 
íc
, 
k°r
, 
kÀn
, 
cb
, 
u
); \

271 }

	)

275 
	#IMPLEMENT_PEM_ªad_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

276 
ty≥
 *
PEM_ªad_bio_
##
	`«me
(
BIO
 *
bp
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
)\

278  (
ty≥
*)
	`PEM_ASN1_ªad_bio
(
	`CHECKED_D2I_OF
—y≥, 
d2i_
##
a¢1
), \

279 
°r
, 
bp
, \

280 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
), \

281 
cb
, 
u
); \

282 }

	)

284 
	#IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

285 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
) \

287  
	`PEM_ASN1_wrôe_bio
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_
##
a¢1
), \

288 
°r
, 
bp
, \

289 
	`CHECKED_PTR_OF
(
ty≥
, 
x
), \

290 
NULL
, NULL, 0, NULL, NULL); \

291 }

	)

293 
	#IMPLEMENT_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

294 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, c⁄° 
ty≥
 *
x
) \

296  
	`PEM_ASN1_wrôe_bio
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d_
##
a¢1
), \

297 
°r
, 
bp
, \

298 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
), \

299 
NULL
, NULL, 0, NULL, NULL); \

300 }

	)

302 
	#IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

303 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

304 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
) \

306  
	`PEM_ASN1_wrôe_bio
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_
##
a¢1
), \

307 
°r
, 
bp
, \

308 
	`CHECKED_PTR_OF
(
ty≥
, 
x
), \

309 
íc
, 
k°r
, 
kÀn
, 
cb
, 
u
); \

310 }

	)

312 
	#IMPLEMENT_PEM_wrôe_cb_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

313 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

314 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
) \

316  
	`PEM_ASN1_wrôe_bio
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d_
##
a¢1
), \

317 
°r
, 
bp
, \

318 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
), \

319 
íc
, 
k°r
, 
kÀn
, 
cb
, 
u
); \

320 }

	)

322 
	#IMPLEMENT_PEM_wrôe
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

323 
	`IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

324 
	`IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

326 
	#IMPLEMENT_PEM_wrôe_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

327 
	`IMPLEMENT_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

328 
	`IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

330 
	#IMPLEMENT_PEM_wrôe_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

331 
	`IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

332 
	`IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

334 
	#IMPLEMENT_PEM_wrôe_cb_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

335 
	`IMPLEMENT_PEM_wrôe_cb_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

336 
	`IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

338 
	#IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

339 
	`IMPLEMENT_PEM_ªad_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

340 
	`IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

342 
	#IMPLEMENT_PEM_rw
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

343 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

344 
	`IMPLEMENT_PEM_wrôe
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

346 
	#IMPLEMENT_PEM_rw_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

347 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

348 
	`IMPLEMENT_PEM_wrôe_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

350 
	#IMPLEMENT_PEM_rw_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

351 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

352 
	`IMPLEMENT_PEM_wrôe_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

356 #i‡
deföed
(
OPENSSL_SYS_WIN16
Ë|| deföed(
OPENSSL_NO_FP_API
)

358 
	#DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
Ë

	)

359 
	#DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
Ë

	)

360 
	#DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
Ë

	)

361 
	#DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
Ë

	)

365 
	#DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
) \

366 
ty≥
 *
PEM_ªad_
##
	`«me
(
FILE
 *
Â
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

368 
	#DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
) \

369 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
);

	)

371 
	#DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
) \

372 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, c⁄° 
ty≥
 *
x
);

	)

374 
	#DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
) \

375 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

376 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

380 #i‚de‡
OPENSSL_NO_BIO


381 
	#DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
) \

382 
ty≥
 *
PEM_ªad_bio_
##
	`«me
(
BIO
 *
bp
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

384 
	#DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
) \

385 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
);

	)

387 
	#DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
) \

388 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, c⁄° 
ty≥
 *
x
);

	)

390 
	#DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
) \

391 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

392 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

396 
	#DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
Ë

	)

397 
	#DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
Ë

	)

398 
	#DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
Ë

	)

399 
	#DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
Ë

	)

403 
	#DECLARE_PEM_wrôe
(
«me
, 
ty≥
) \

404 
	`DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
) \

405 
	`DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
)

	)

407 
	#DECLARE_PEM_wrôe_c⁄°
(
«me
, 
ty≥
) \

408 
	`DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
) \

409 
	`DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
)

	)

411 
	#DECLARE_PEM_wrôe_cb
(
«me
, 
ty≥
) \

412 
	`DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
) \

413 
	`DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
)

	)

415 
	#DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

416 
	`DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
) \

417 
	`DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
)

	)

419 
	#DECLARE_PEM_rw
(
«me
, 
ty≥
) \

420 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

421 
	`DECLARE_PEM_wrôe
(
«me
, 
ty≥
)

	)

423 
	#DECLARE_PEM_rw_c⁄°
(
«me
, 
ty≥
) \

424 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

425 
	`DECLARE_PEM_wrôe_c⁄°
(
«me
, 
ty≥
)

	)

427 
	#DECLARE_PEM_rw_cb
(
«me
, 
ty≥
) \

428 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

429 
	`DECLARE_PEM_wrôe_cb
(
«me
, 
ty≥
)

	)

431 #ifde‡
SSLEAY_MACROS


433 
	#PEM_wrôe_SSL_SESSION
(
Â
,
x
) \

434 
	`PEM_ASN1_wrôe
(((*)())
i2d_SSL_SESSION
, \

435 
PEM_STRING_SSL_SESSION
,
Â
, (*)
x
, 
NULL
,NULL,0,NULL,NULL)

	)

436 
	#PEM_wrôe_X509
(
Â
,
x
) \

437 
	`PEM_ASN1_wrôe
(((*)())
i2d_X509
,
PEM_STRING_X509
,
Â
, \

438 (*)
x
, 
NULL
,NULL,0,NULL,NULL)

	)

439 
	#PEM_wrôe_X509_REQ
(
Â
,
x
Ë
	`PEM_ASN1_wrôe
( \

440 ((*)())
i2d_X509_REQ
,
PEM_STRING_X509_REQ
,
Â
,(*)
x
, \

441 
NULL
,NULL,0,NULL,NULL)

	)

442 
	#PEM_wrôe_X509_CRL
(
Â
,
x
) \

443 
	`PEM_ASN1_wrôe
(((*)())
i2d_X509_CRL
,
PEM_STRING_X509_CRL
, \

444 
Â
,(*)
x
, 
NULL
,NULL,0,NULL,NULL)

	)

445 
	#PEM_wrôe_RSAPriv©eKey
(
Â
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
) \

446 
	`PEM_ASN1_wrôe
(((*)())
i2d_RSAPriv©eKey
,
PEM_STRING_RSA
,
Â
,\

447 (*)
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
)

	)

448 
	#PEM_wrôe_RSAPublicKey
(
Â
,
x
) \

449 
	`PEM_ASN1_wrôe
(((*)())
i2d_RSAPublicKey
,\

450 
PEM_STRING_RSA_PUBLIC
,
Â
,(*)
x
,
NULL
,NULL,0,NULL,NULL)

	)

451 
	#PEM_wrôe_DSAPriv©eKey
(
Â
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
) \

452 
	`PEM_ASN1_wrôe
(((*)())
i2d_DSAPriv©eKey
,
PEM_STRING_DSA
,
Â
,\

453 (*)
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
)

	)

454 
	#PEM_wrôe_Priv©eKey
(
bp
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
) \

455 
	`PEM_ASN1_wrôe
(((*)())
i2d_Priv©eKey
,\

456 (((
x
)->
ty≥
 =
EVP_PKEY_DSA
)?
PEM_STRING_DSA
:
PEM_STRING_RSA
),\

457 
bp
,(*)
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
)

	)

458 
	#PEM_wrôe_PKCS7
(
Â
,
x
) \

459 
	`PEM_ASN1_wrôe
(((*)())
i2d_PKCS7
,
PEM_STRING_PKCS7
,
Â
, \

460 (*)
x
, 
NULL
,NULL,0,NULL,NULL)

	)

461 
	#PEM_wrôe_DH∑øms
(
Â
,
x
) \

462 
	`PEM_ASN1_wrôe
(((*)())
i2d_DH∑øms
,
PEM_STRING_DHPARAMS
,
Â
,\

463 (*)
x
,
NULL
,NULL,0,NULL,NULL)

	)

465 
	#PEM_wrôe_NETSCAPE_CERT_SEQUENCE
(
Â
,
x
) \

466 
	`PEM_ASN1_wrôe
(((*)())
i2d_NETSCAPE_CERT_SEQUENCE
, \

467 
PEM_STRING_X509
,
Â
, \

468 (*)
x
, 
NULL
,NULL,0,NULL,NULL)

	)

470 
	#PEM_ªad_SSL_SESSION
(
Â
,
x
,
cb
,
u
Ë(
SSL_SESSION
 *)
	`PEM_ASN1_ªad
( \

471 (*(*)())
d2i_SSL_SESSION
,
PEM_STRING_SSL_SESSION
,
Â
,(**)
x
,
cb
,
u
)

	)

472 
	#PEM_ªad_X509
(
Â
,
x
,
cb
,
u
Ë(
X509
 *)
	`PEM_ASN1_ªad
( \

473 (*(*)())
d2i_X509
,
PEM_STRING_X509
,
Â
,(**)
x
,
cb
,
u
)

	)

474 
	#PEM_ªad_X509_REQ
(
Â
,
x
,
cb
,
u
Ë(
X509_REQ
 *)
	`PEM_ASN1_ªad
( \

475 (*(*)())
d2i_X509_REQ
,
PEM_STRING_X509_REQ
,
Â
,(**)
x
,
cb
,
u
)

	)

476 
	#PEM_ªad_X509_CRL
(
Â
,
x
,
cb
,
u
Ë(
X509_CRL
 *)
	`PEM_ASN1_ªad
( \

477 (*(*)())
d2i_X509_CRL
,
PEM_STRING_X509_CRL
,
Â
,(**)
x
,
cb
,
u
)

	)

478 
	#PEM_ªad_RSAPriv©eKey
(
Â
,
x
,
cb
,
u
Ë(
RSA
 *)
	`PEM_ASN1_ªad
( \

479 (*(*)())
d2i_RSAPriv©eKey
,
PEM_STRING_RSA
,
Â
,(**)
x
,
cb
,
u
)

	)

480 
	#PEM_ªad_RSAPublicKey
(
Â
,
x
,
cb
,
u
Ë(
RSA
 *)
	`PEM_ASN1_ªad
( \

481 (*(*)())
d2i_RSAPublicKey
,
PEM_STRING_RSA_PUBLIC
,
Â
,(**)
x
,
cb
,
u
)

	)

482 
	#PEM_ªad_DSAPriv©eKey
(
Â
,
x
,
cb
,
u
Ë(
DSA
 *)
	`PEM_ASN1_ªad
( \

483 (*(*)())
d2i_DSAPriv©eKey
,
PEM_STRING_DSA
,
Â
,(**)
x
,
cb
,
u
)

	)

484 
	#PEM_ªad_Priv©eKey
(
Â
,
x
,
cb
,
u
Ë(
EVP_PKEY
 *)
	`PEM_ASN1_ªad
( \

485 (*(*)())
d2i_Priv©eKey
,
PEM_STRING_EVP_PKEY
,
Â
,(**)
x
,
cb
,
u
)

	)

486 
	#PEM_ªad_PKCS7
(
Â
,
x
,
cb
,
u
Ë(
PKCS7
 *)
	`PEM_ASN1_ªad
( \

487 (*(*)())
d2i_PKCS7
,
PEM_STRING_PKCS7
,
Â
,(**)
x
,
cb
,
u
)

	)

488 
	#PEM_ªad_DH∑øms
(
Â
,
x
,
cb
,
u
Ë(
DH
 *)
	`PEM_ASN1_ªad
( \

489 (*(*)())
d2i_DH∑øms
,
PEM_STRING_DHPARAMS
,
Â
,(**)
x
,
cb
,
u
)

	)

491 
	#PEM_ªad_NETSCAPE_CERT_SEQUENCE
(
Â
,
x
,
cb
,
u
) \

492 (
NETSCAPE_CERT_SEQUENCE
 *)
	`PEM_ASN1_ªad
( \

493 (*(*)())
d2i_NETSCAPE_CERT_SEQUENCE
,
PEM_STRING_X509
,
Â
,\

494 (**)
x
,
cb
,
u
)

	)

496 
	#PEM_wrôe_bio_X509
(
bp
,
x
) \

497 
	`PEM_ASN1_wrôe_bio
(((*)())
i2d_X509
,
PEM_STRING_X509
,
bp
, \

498 (*)
x
, 
NULL
,NULL,0,NULL,NULL)

	)

499 
	#PEM_wrôe_bio_X509_REQ
(
bp
,
x
Ë
	`PEM_ASN1_wrôe_bio
( \

500 ((*)())
i2d_X509_REQ
,
PEM_STRING_X509_REQ
,
bp
,(*)
x
, \

501 
NULL
,NULL,0,NULL,NULL)

	)

502 
	#PEM_wrôe_bio_X509_CRL
(
bp
,
x
) \

503 
	`PEM_ASN1_wrôe_bio
(((*)())
i2d_X509_CRL
,
PEM_STRING_X509_CRL
,\

504 
bp
,(*)
x
, 
NULL
,NULL,0,NULL,NULL)

	)

505 
	#PEM_wrôe_bio_RSAPriv©eKey
(
bp
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
) \

506 
	`PEM_ASN1_wrôe_bio
(((*)())
i2d_RSAPriv©eKey
,
PEM_STRING_RSA
,\

507 
bp
,(*)
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
)

	)

508 
	#PEM_wrôe_bio_RSAPublicKey
(
bp
,
x
) \

509 
	`PEM_ASN1_wrôe_bio
(((*)())
i2d_RSAPublicKey
, \

510 
PEM_STRING_RSA_PUBLIC
,\

511 
bp
,(*)
x
,
NULL
,NULL,0,NULL,NULL)

	)

512 
	#PEM_wrôe_bio_DSAPriv©eKey
(
bp
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
) \

513 
	`PEM_ASN1_wrôe_bio
(((*)())
i2d_DSAPriv©eKey
,
PEM_STRING_DSA
,\

514 
bp
,(*)
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
)

	)

515 
	#PEM_wrôe_bio_Priv©eKey
(
bp
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
) \

516 
	`PEM_ASN1_wrôe_bio
(((*)())
i2d_Priv©eKey
,\

517 (((
x
)->
ty≥
 =
EVP_PKEY_DSA
)?
PEM_STRING_DSA
:
PEM_STRING_RSA
),\

518 
bp
,(*)
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
)

	)

519 
	#PEM_wrôe_bio_PKCS7
(
bp
,
x
) \

520 
	`PEM_ASN1_wrôe_bio
(((*)())
i2d_PKCS7
,
PEM_STRING_PKCS7
,
bp
, \

521 (*)
x
, 
NULL
,NULL,0,NULL,NULL)

	)

522 
	#PEM_wrôe_bio_DH∑øms
(
bp
,
x
) \

523 
	`PEM_ASN1_wrôe_bio
(((*)())
i2d_DH∑øms
,
PEM_STRING_DHPARAMS
,\

524 
bp
,(*)
x
,
NULL
,NULL,0,NULL,NULL)

	)

525 
	#PEM_wrôe_bio_DSA∑øms
(
bp
,
x
) \

526 
	`PEM_ASN1_wrôe_bio
(((*)())
i2d_DSA∑øms
, \

527 
PEM_STRING_DSAPARAMS
,
bp
,(*)
x
,
NULL
,NULL,0,NULL,NULL)

	)

529 
	#PEM_wrôe_bio_NETSCAPE_CERT_SEQUENCE
(
bp
,
x
) \

530 
	`PEM_ASN1_wrôe_bio
(((*)())
i2d_NETSCAPE_CERT_SEQUENCE
, \

531 
PEM_STRING_X509
,
bp
, \

532 (*)
x
, 
NULL
,NULL,0,NULL,NULL)

	)

534 
	#PEM_ªad_bio_X509
(
bp
,
x
,
cb
,
u
Ë(
X509
 *)
	`PEM_ASN1_ªad_bio
( \

535 (*(*)())
d2i_X509
,
PEM_STRING_X509
,
bp
,(**)
x
,
cb
,
u
)

	)

536 
	#PEM_ªad_bio_X509_REQ
(
bp
,
x
,
cb
,
u
Ë(
X509_REQ
 *)
	`PEM_ASN1_ªad_bio
( \

537 (*(*)())
d2i_X509_REQ
,
PEM_STRING_X509_REQ
,
bp
,(**)
x
,
cb
,
u
)

	)

538 
	#PEM_ªad_bio_X509_CRL
(
bp
,
x
,
cb
,
u
Ë(
X509_CRL
 *)
	`PEM_ASN1_ªad_bio
( \

539 (*(*)())
d2i_X509_CRL
,
PEM_STRING_X509_CRL
,
bp
,(**)
x
,
cb
,
u
)

	)

540 
	#PEM_ªad_bio_RSAPriv©eKey
(
bp
,
x
,
cb
,
u
Ë(
RSA
 *)
	`PEM_ASN1_ªad_bio
( \

541 (*(*)())
d2i_RSAPriv©eKey
,
PEM_STRING_RSA
,
bp
,(**)
x
,
cb
,
u
)

	)

542 
	#PEM_ªad_bio_RSAPublicKey
(
bp
,
x
,
cb
,
u
Ë(
RSA
 *)
	`PEM_ASN1_ªad_bio
( \

543 (*(*)())
d2i_RSAPublicKey
,
PEM_STRING_RSA_PUBLIC
,
bp
,(**)
x
,
cb
,
u
)

	)

544 
	#PEM_ªad_bio_DSAPriv©eKey
(
bp
,
x
,
cb
,
u
Ë(
DSA
 *)
	`PEM_ASN1_ªad_bio
( \

545 (*(*)())
d2i_DSAPriv©eKey
,
PEM_STRING_DSA
,
bp
,(**)
x
,
cb
,
u
)

	)

546 
	#PEM_ªad_bio_Priv©eKey
(
bp
,
x
,
cb
,
u
Ë(
EVP_PKEY
 *)
	`PEM_ASN1_ªad_bio
( \

547 (*(*)())
d2i_Priv©eKey
,
PEM_STRING_EVP_PKEY
,
bp
,(**)
x
,
cb
,
u
)

	)

549 
	#PEM_ªad_bio_PKCS7
(
bp
,
x
,
cb
,
u
Ë(
PKCS7
 *)
	`PEM_ASN1_ªad_bio
( \

550 (*(*)())
d2i_PKCS7
,
PEM_STRING_PKCS7
,
bp
,(**)
x
,
cb
,
u
)

	)

551 
	#PEM_ªad_bio_DH∑øms
(
bp
,
x
,
cb
,
u
Ë(
DH
 *)
	`PEM_ASN1_ªad_bio
( \

552 (*(*)())
d2i_DH∑øms
,
PEM_STRING_DHPARAMS
,
bp
,(**)
x
,
cb
,
u
)

	)

553 
	#PEM_ªad_bio_DSA∑øms
(
bp
,
x
,
cb
,
u
Ë(
DSA
 *)
	`PEM_ASN1_ªad_bio
( \

554 (*(*)())
d2i_DSA∑øms
,
PEM_STRING_DSAPARAMS
,
bp
,(**)
x
,
cb
,
u
)

	)

556 
	#PEM_ªad_bio_NETSCAPE_CERT_SEQUENCE
(
bp
,
x
,
cb
,
u
) \

557 (
NETSCAPE_CERT_SEQUENCE
 *)
	`PEM_ASN1_ªad_bio
( \

558 (*(*)())
d2i_NETSCAPE_CERT_SEQUENCE
,
PEM_STRING_X509
,
bp
,\

559 (**)
x
,
cb
,
u
)

	)

565 
	t≥m_∑ssw‹d_cb
(*
	tbuf
, 
	tsize
, 
	trwÊag
, *
	tu£rd©a
);

568 
	t≥m_∑ssw‹d_cb
(*
	tbuf
, 
	tsize
, 
	trwÊag
);

571 
PEM_gë_EVP_CIPHER_INFO
(*
hódî
, 
EVP_CIPHER_INFO
 *
cùhî
);

572 
PEM_do_hódî
 (
EVP_CIPHER_INFO
 *
cùhî
, *
d©a
,*
Àn
,

573 
≥m_∑ssw‹d_cb
 *
ˇŒback
,*
u
);

575 #i‚de‡
OPENSSL_NO_BIO


576 
PEM_ªad_bio
(
BIO
 *
bp
, **
«me
, **
hódî
,

577 **
d©a
,*
Àn
);

578 
PEM_wrôe_bio
(
BIO
 *
bp
,c⁄° *
«me
,*
hdr
,*
d©a
,

579 
Àn
);

580 
PEM_byãs_ªad_bio
(**
pd©a
, *
∂í
, **
≤m
, c⁄° *
«me
, 
BIO
 *
bp
,

581 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

582 * 
PEM_ASN1_ªad_bio
(
d2i_of_void
 *
d2i
, c⁄° *
«me
, 
BIO
 *
bp
,

583 **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

585 
	#PEM_ASN1_ªad_bio_of
(
ty≥
,
d2i
,
«me
,
bp
,
x
,
cb
,
u
) \

586 ((
ty≥
*)
	`PEM_ASN1_ªad_bio
(
	`CHECKED_D2I_OF
—y≥, 
d2i
), \

587 
«me
, 
bp
, \

588 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
), \

589 
cb
, 
u
))

	)

591 
PEM_ASN1_wrôe_bio
(
i2d_of_void
 *
i2d
,c⁄° *
«me
,
BIO
 *
bp
,*
x
,

592 c⁄° 
EVP_CIPHER
 *
íc
,*
k°r
,
kÀn
,

593 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

595 
	#PEM_ASN1_wrôe_bio_of
(
ty≥
,
i2d
,
«me
,
bp
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
) \

596 (
	`PEM_ASN1_wrôe_bio
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

597 
«me
, 
bp
, \

598 
	`CHECKED_PTR_OF
(
ty≥
, 
x
), \

599 
íc
, 
k°r
, 
kÀn
, 
cb
, 
u
))

	)

601 
STACK_OF
(
X509_INFO
Ë* 
PEM_X509_INFO_ªad_bio
(
BIO
 *
bp
, STACK_OF(X509_INFOË*
sk
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

602 
PEM_X509_INFO_wrôe_bio
(
BIO
 *
bp
,
X509_INFO
 *
xi
, 
EVP_CIPHER
 *
íc
,

603 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cd
, *
u
);

606 #i‚de‡
OPENSSL_SYS_WIN16


607 
PEM_ªad
(
FILE
 *
Â
, **
«me
, **
hódî
,

608 **
d©a
,*
Àn
);

609 
PEM_wrôe
(
FILE
 *
Â
,*
«me
,*
hdr
,*
d©a
,
Àn
);

610 * 
PEM_ASN1_ªad
(
d2i_of_void
 *
d2i
, c⁄° *
«me
, 
FILE
 *
Â
, **
x
,

611 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

612 
PEM_ASN1_wrôe
(
i2d_of_void
 *
i2d
,c⁄° *
«me
,
FILE
 *
Â
,

613 *
x
,c⁄° 
EVP_CIPHER
 *
íc
,*
k°r
,

614 
kÀn
,
≥m_∑ssw‹d_cb
 *
ˇŒback
, *
u
);

615 
STACK_OF
(
X509_INFO
Ë* 
PEM_X509_INFO_ªad
(
FILE
 *
Â
, STACK_OF(X509_INFOË*
sk
,

616 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

619 
PEM_SólInô
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, 
EVP_CIPHER
 *
ty≥
,

620 
EVP_MD
 *
md_ty≥
, **
ek
, *
ekl
,

621 *
iv
, 
EVP_PKEY
 **
pubk
, 
≈ubk
);

622 
PEM_SólUpd©e
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, *
out
, *
oué
,

623 *
ö
, 
öl
);

624 
PEM_SólFöÆ
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, *
sig
,*
sigl
,

625 *
out
, *
oué
, 
EVP_PKEY
 *
¥iv
);

627 
PEM_SignInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_MD
 *
ty≥
);

628 
PEM_SignUpd©e
(
EVP_MD_CTX
 *
˘x
,*
d
,
˙t
);

629 
PEM_SignFöÆ
(
EVP_MD_CTX
 *
˘x
, *
sigªt
,

630 *
sigÀn
, 
EVP_PKEY
 *
pkey
);

632 
PEM_def_ˇŒback
(*
buf
, 
num
, 
w
, *
key
);

633 
PEM_¥oc_ty≥
(*
buf
, 
ty≥
);

634 
PEM_dek_öfo
(*
buf
, c⁄° *
ty≥
, 
Àn
, *
°r
);

636 #i‚de‡
SSLEAY_MACROS


638 
	~<›ís¶/symhacks.h
>

640 
DECLARE_PEM_rw
(
X509
, X509)

642 
DECLARE_PEM_rw
(
X509_AUX
, 
X509
)

644 
DECLARE_PEM_rw
(
X509_CERT_PAIR
, X509_CERT_PAIR)

646 
DECLARE_PEM_rw
(
X509_REQ
, X509_REQ)

647 
DECLARE_PEM_wrôe
(
X509_REQ_NEW
, 
X509_REQ
)

649 
DECLARE_PEM_rw
(
X509_CRL
, X509_CRL)

651 
DECLARE_PEM_rw
(
PKCS7
, PKCS7)

653 
DECLARE_PEM_rw
(
NETSCAPE_CERT_SEQUENCE
, NETSCAPE_CERT_SEQUENCE)

655 
DECLARE_PEM_rw
(
PKCS8
, 
X509_SIG
)

657 
DECLARE_PEM_rw
(
PKCS8_PRIV_KEY_INFO
, PKCS8_PRIV_KEY_INFO)

659 #i‚de‡
OPENSSL_NO_RSA


661 
DECLARE_PEM_rw_cb
(
RSAPriv©eKey
, 
RSA
)

663 
DECLARE_PEM_rw_c⁄°
(
RSAPublicKey
, 
RSA
)

664 
DECLARE_PEM_rw
(
RSA_PUBKEY
, 
RSA
)

668 #i‚de‡
OPENSSL_NO_DSA


670 
DECLARE_PEM_rw_cb
(
DSAPriv©eKey
, 
DSA
)

672 
DECLARE_PEM_rw
(
DSA_PUBKEY
, 
DSA
)

674 
DECLARE_PEM_rw_c⁄°
(
DSA∑øms
, 
DSA
)

678 #i‚de‡
OPENSSL_NO_EC


679 
DECLARE_PEM_rw_c⁄°
(
ECPKP¨amëîs
, 
EC_GROUP
)

680 
DECLARE_PEM_rw_cb
(
ECPriv©eKey
, 
EC_KEY
)

681 
DECLARE_PEM_rw
(
EC_PUBKEY
, 
EC_KEY
)

684 #i‚de‡
OPENSSL_NO_DH


686 
DECLARE_PEM_rw_c⁄°
(
DH∑øms
, 
DH
)

690 
DECLARE_PEM_rw_cb
(
Priv©eKey
, 
EVP_PKEY
)

692 
DECLARE_PEM_rw
(
PUBKEY
, 
EVP_PKEY
)

694 
PEM_wrôe_bio_PKCS8Priv©eKey_nid
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, 
nid
,

695 *
k°r
, 
kÀn
,

696 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

697 
PEM_wrôe_bio_PKCS8Priv©eKey
(
BIO
 *, 
EVP_PKEY
 *, c⁄° 
EVP_CIPHER
 *,

698 *, , 
≥m_∑ssw‹d_cb
 *, *);

699 
i2d_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

700 *
k°r
, 
kÀn
,

701 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

702 
i2d_PKCS8Priv©eKey_nid_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, 
nid
,

703 *
k°r
, 
kÀn
,

704 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

705 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

707 
i2d_PKCS8Priv©eKey_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

708 *
k°r
, 
kÀn
,

709 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

710 
i2d_PKCS8Priv©eKey_nid_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, 
nid
,

711 *
k°r
, 
kÀn
,

712 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

713 
PEM_wrôe_PKCS8Priv©eKey_nid
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, 
nid
,

714 *
k°r
, 
kÀn
,

715 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

717 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_Â
(
FILE
 *
Â
, EVP_PKEY **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

719 
PEM_wrôe_PKCS8Priv©eKey
(
FILE
 *
Â
,
EVP_PKEY
 *
x
,c⁄° 
EVP_CIPHER
 *
íc
,

720 *
k°r
,
kÀn
, 
≥m_∑ssw‹d_cb
 *
cd
, *
u
);

729 
ERR_lﬂd_PEM_°rögs
();

734 
	#PEM_F_D2I_PKCS8PRIVATEKEY_BIO
 120

	)

735 
	#PEM_F_D2I_PKCS8PRIVATEKEY_FP
 121

	)

736 
	#PEM_F_DO_PK8PKEY
 126

	)

737 
	#PEM_F_DO_PK8PKEY_FP
 125

	)

738 
	#PEM_F_LOAD_IV
 101

	)

739 
	#PEM_F_PEM_ASN1_READ
 102

	)

740 
	#PEM_F_PEM_ASN1_READ_BIO
 103

	)

741 
	#PEM_F_PEM_ASN1_WRITE
 104

	)

742 
	#PEM_F_PEM_ASN1_WRITE_BIO
 105

	)

743 
	#PEM_F_PEM_DEF_CALLBACK
 100

	)

744 
	#PEM_F_PEM_DO_HEADER
 106

	)

745 
	#PEM_F_PEM_F_PEM_WRITE_PKCS8PRIVATEKEY
 118

	)

746 
	#PEM_F_PEM_GET_EVP_CIPHER_INFO
 107

	)

747 
	#PEM_F_PEM_PK8PKEY
 119

	)

748 
	#PEM_F_PEM_READ
 108

	)

749 
	#PEM_F_PEM_READ_BIO
 109

	)

750 
	#PEM_F_PEM_READ_BIO_PRIVATEKEY
 123

	)

751 
	#PEM_F_PEM_READ_PRIVATEKEY
 124

	)

752 
	#PEM_F_PEM_SEALFINAL
 110

	)

753 
	#PEM_F_PEM_SEALINIT
 111

	)

754 
	#PEM_F_PEM_SIGNFINAL
 112

	)

755 
	#PEM_F_PEM_WRITE
 113

	)

756 
	#PEM_F_PEM_WRITE_BIO
 114

	)

757 
	#PEM_F_PEM_X509_INFO_READ
 115

	)

758 
	#PEM_F_PEM_X509_INFO_READ_BIO
 116

	)

759 
	#PEM_F_PEM_X509_INFO_WRITE_BIO
 117

	)

762 
	#PEM_R_BAD_BASE64_DECODE
 100

	)

763 
	#PEM_R_BAD_DECRYPT
 101

	)

764 
	#PEM_R_BAD_END_LINE
 102

	)

765 
	#PEM_R_BAD_IV_CHARS
 103

	)

766 
	#PEM_R_BAD_PASSWORD_READ
 104

	)

767 
	#PEM_R_ERROR_CONVERTING_PRIVATE_KEY
 115

	)

768 
	#PEM_R_NOT_DEK_INFO
 105

	)

769 
	#PEM_R_NOT_ENCRYPTED
 106

	)

770 
	#PEM_R_NOT_PROC_TYPE
 107

	)

771 
	#PEM_R_NO_START_LINE
 108

	)

772 
	#PEM_R_PROBLEMS_GETTING_PASSWORD
 109

	)

773 
	#PEM_R_PUBLIC_KEY_NO_RSA
 110

	)

774 
	#PEM_R_READ_KEY
 111

	)

775 
	#PEM_R_SHORT_HEADER
 112

	)

776 
	#PEM_R_UNSUPPORTED_CIPHER
 113

	)

777 
	#PEM_R_UNSUPPORTED_ENCRYPTION
 114

	)

779 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/pkcs12.h

59 #i‚de‡
HEADER_PKCS12_H


60 
	#HEADER_PKCS12_H


	)

62 
	~<›ís¶/bio.h
>

63 
	~<›ís¶/x509.h
>

65 #ifde‡
__˝lu•lus


69 
	#PKCS12_KEY_ID
 1

	)

70 
	#PKCS12_IV_ID
 2

	)

71 
	#PKCS12_MAC_ID
 3

	)

74 #i‚de‡
PKCS12_DEFAULT_ITER


75 
	#PKCS12_DEFAULT_ITER
 
PKCS5_DEFAULT_ITER


	)

78 
	#PKCS12_MAC_KEY_LENGTH
 20

	)

80 
	#PKCS12_SALT_LEN
 8

	)

86 #ifde‡
PBE_UNICODE


87 
	#PKCS12_key_gí
 
PKCS12_key_gí_uni


	)

88 
	#PKCS12_add_‰õndly«me
 
PKCS12_add_‰õndly«me_uni


	)

90 
	#PKCS12_key_gí
 
PKCS12_key_gí_asc


	)

91 
	#PKCS12_add_‰õndly«me
 
PKCS12_add_‰õndly«me_asc


	)

96 
	#KEY_EX
 0x10

	)

97 
	#KEY_SIG
 0x80

	)

100 
X509_SIG
 *
döfo
;

101 
ASN1_OCTET_STRING
 *
ß…
;

102 
ASN1_INTEGER
 *
ôî
;

103 } 
	tPKCS12_MAC_DATA
;

106 
ASN1_INTEGER
 *
vîsi⁄
;

107 
PKCS12_MAC_DATA
 *
mac
;

108 
PKCS7
 *
authß„s
;

109 } 
	tPKCS12
;

111 
PREDECLARE_STACK_OF
(
PKCS12_SAFEBAG
)

114 
ASN1_OBJECT
 *
ty≥
;

116 
pkcs12_bag_°
 *
bag
;

117 
pkcs8_¥iv_key_öfo_°
 *
keybag
;

118 
X509_SIG
 *
shkeybag
;

119 
STACK_OF
(
PKCS12_SAFEBAG
Ë*
ß„s
;

120 
ASN1_TYPE
 *
Ÿhî
;

121 }
vÆue
;

122 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åib
;

123 } 
	tPKCS12_SAFEBAG
;

125 
DECLARE_STACK_OF
(
PKCS12_SAFEBAG
)

126 
DECLARE_ASN1_SET_OF
(
PKCS12_SAFEBAG
)

127 
DECLARE_PKCS12_STACK_OF
(
PKCS12_SAFEBAG
)

129 
	spkcs12_bag_°
 {

130 
ASN1_OBJECT
 *
ty≥
;

132 
ASN1_OCTET_STRING
 *
x509˚π
;

133 
ASN1_OCTET_STRING
 *
x509¸l
;

134 
ASN1_OCTET_STRING
 *
o˘ë
;

135 
ASN1_IA5STRING
 *
sdsi˚π
;

136 
ASN1_TYPE
 *
Ÿhî
;

137 }
vÆue
;

138 } 
	tPKCS12_BAGS
;

140 
	#PKCS12_ERROR
 0

	)

141 
	#PKCS12_OK
 1

	)

145 
	#M_PKCS12_x5092˚πbag
 
PKCS12_x5092˚πbag


	)

146 
	#M_PKCS12_x509¸l2˚πbag
 
PKCS12_x509¸l2˚πbag


	)

148 
	#M_PKCS12_˚πbag2x509
 
PKCS12_˚πbag2x509


	)

149 
	#M_PKCS12_˚πbag2x509¸l
 
PKCS12_˚πbag2x509¸l


	)

151 
	#M_PKCS12_u≈ack_p7d©a
 
PKCS12_u≈ack_p7d©a


	)

152 
	#M_PKCS12_∑ck_authß„s
 
PKCS12_∑ck_authß„s


	)

153 
	#M_PKCS12_u≈ack_authß„s
 
PKCS12_u≈ack_authß„s


	)

154 
	#M_PKCS12_u≈ack_p7ícd©a
 
PKCS12_u≈ack_p7ícd©a


	)

156 
	#M_PKCS12_de¸y±_skey
 
PKCS12_de¸y±_skey


	)

157 
	#M_PKCS8_de¸y±
 
PKCS8_de¸y±


	)

159 
	#M_PKCS12_bag_ty≥
(
bg
Ë
	`OBJ_obj2nid
((bg)->
ty≥
)

	)

160 
	#M_PKCS12_˚π_bag_ty≥
(
bg
Ë
	`OBJ_obj2nid
((bg)->
vÆue
.
bag
->
ty≥
)

	)

161 
	#M_PKCS12_¸l_bag_ty≥
 
M_PKCS12_˚π_bag_ty≥


	)

163 
	#PKCS12_gë_©å
(
bag
, 
©å_nid
) \

164 
	`PKCS12_gë_©å_gí
(
bag
->
©åib
, 
©å_nid
)

	)

166 
	#PKCS8_gë_©å
(
p8
, 
©å_nid
) \

167 
	`PKCS12_gë_©å_gí
(
p8
->
©åibuãs
, 
©å_nid
)

	)

169 
	#PKCS12_mac_¥e£¡
(
p12
Ë(’12)->
mac
 ? 1 : 0)

	)

172 
PKCS12_SAFEBAG
 *
PKCS12_x5092˚πbag
(
X509
 *
x509
);

173 
PKCS12_SAFEBAG
 *
PKCS12_x509¸l2˚πbag
(
X509_CRL
 *
¸l
);

174 
X509
 *
PKCS12_˚πbag2x509
(
PKCS12_SAFEBAG
 *
bag
);

175 
X509_CRL
 *
PKCS12_˚πbag2x509¸l
(
PKCS12_SAFEBAG
 *
bag
);

177 
PKCS12_SAFEBAG
 *
PKCS12_ôem_∑ck_ß„bag
(*
obj
, c⁄° 
ASN1_ITEM
 *
ô
, 
nid1
,

178 
nid2
);

179 
PKCS12_SAFEBAG
 *
PKCS12_MAKE_KEYBAG
(
PKCS8_PRIV_KEY_INFO
 *
p8
);

180 
PKCS8_PRIV_KEY_INFO
 *
PKCS8_de¸y±
(
X509_SIG
 *
p8
, c⁄° *
∑ss
, 
∑s¶í
);

181 
PKCS8_PRIV_KEY_INFO
 *
PKCS12_de¸y±_skey
(
PKCS12_SAFEBAG
 *
bag
, c⁄° *
∑ss
,

182 
∑s¶í
);

183 
X509_SIG
 *
PKCS8_í¸y±
(
pbe_nid
, c⁄° 
EVP_CIPHER
 *
cùhî
,

184 c⁄° *
∑ss
, 
∑s¶í
,

185 *
ß…
, 
ß…Àn
, 
ôî
,

186 
PKCS8_PRIV_KEY_INFO
 *
p8
);

187 
PKCS12_SAFEBAG
 *
PKCS12_MAKE_SHKEYBAG
(
pbe_nid
, c⁄° *
∑ss
,

188 
∑s¶í
, *
ß…
,

189 
ß…Àn
, 
ôî
,

190 
PKCS8_PRIV_KEY_INFO
 *
p8
);

191 
PKCS7
 *
PKCS12_∑ck_p7d©a
(
STACK_OF
(
PKCS12_SAFEBAG
Ë*
sk
);

192 
STACK_OF
(
PKCS12_SAFEBAG
Ë*
PKCS12_u≈ack_p7d©a
(
PKCS7
 *
p7
);

193 
PKCS7
 *
PKCS12_∑ck_p7ícd©a
(
pbe_nid
, c⁄° *
∑ss
, 
∑s¶í
,

194 *
ß…
, 
ß…Àn
, 
ôî
,

195 
STACK_OF
(
PKCS12_SAFEBAG
Ë*
bags
);

196 
STACK_OF
(
PKCS12_SAFEBAG
Ë*
PKCS12_u≈ack_p7ícd©a
(
PKCS7
 *
p7
, c⁄° *
∑ss
, 
∑s¶í
);

198 
PKCS12_∑ck_authß„s
(
PKCS12
 *
p12
, 
STACK_OF
(
PKCS7
Ë*
ß„s
);

199 
STACK_OF
(
PKCS7
Ë*
PKCS12_u≈ack_authß„s
(
PKCS12
 *
p12
);

201 
PKCS12_add_loˇlkeyid
(
PKCS12_SAFEBAG
 *
bag
, *
«me
, 
«mñí
);

202 
PKCS12_add_‰õndly«me_asc
(
PKCS12_SAFEBAG
 *
bag
, c⁄° *
«me
,

203 
«mñí
);

204 
PKCS12_add_CSPName_asc
(
PKCS12_SAFEBAG
 *
bag
, c⁄° *
«me
,

205 
«mñí
);

206 
PKCS12_add_‰õndly«me_uni
(
PKCS12_SAFEBAG
 *
bag
, c⁄° *
«me
,

207 
«mñí
);

208 
PKCS8_add_keyußge
(
PKCS8_PRIV_KEY_INFO
 *
p8
, 
ußge
);

209 
ASN1_TYPE
 *
PKCS12_gë_©å_gí
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
©ås
, 
©å_nid
);

210 *
PKCS12_gë_‰õndly«me
(
PKCS12_SAFEBAG
 *
bag
);

211 *
PKCS12_pbe_¸y±
(
X509_ALGOR
 *
Æg‹
, c⁄° *
∑ss
,

212 
∑s¶í
, *
ö
, 
öÀn
,

213 **
d©a
, *
d©Æí
, 
í_de
);

214 * 
PKCS12_ôem_de¸y±_d2i
(
X509_ALGOR
 *
Æg‹
, c⁄° 
ASN1_ITEM
 *
ô
,

215 c⁄° *
∑ss
, 
∑s¶í
, 
ASN1_OCTET_STRING
 *
o˘
, 
zbuf
);

216 
ASN1_OCTET_STRING
 *
PKCS12_ôem_i2d_í¸y±
(
X509_ALGOR
 *
Æg‹
, c⁄° 
ASN1_ITEM
 *
ô
,

217 c⁄° *
∑ss
, 
∑s¶í
,

218 *
obj
, 
zbuf
);

219 
PKCS12
 *
PKCS12_öô
(
mode
);

220 
PKCS12_key_gí_asc
(c⁄° *
∑ss
, 
∑s¶í
, *
ß…
,

221 
ß…Àn
, 
id
, 
ôî
, 
n
,

222 *
out
, c⁄° 
EVP_MD
 *
md_ty≥
);

223 
PKCS12_key_gí_uni
(*
∑ss
, 
∑s¶í
, *
ß…
, 
ß…Àn
, 
id
, 
ôî
, 
n
, *
out
, c⁄° 
EVP_MD
 *
md_ty≥
);

224 
PKCS12_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

225 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md_ty≥
,

226 
í_de
);

227 
PKCS12_gí_mac
(
PKCS12
 *
p12
, c⁄° *
∑ss
, 
∑s¶í
,

228 *
mac
, *
ma˛í
);

229 
PKCS12_vîify_mac
(
PKCS12
 *
p12
, c⁄° *
∑ss
, 
∑s¶í
);

230 
PKCS12_£t_mac
(
PKCS12
 *
p12
, c⁄° *
∑ss
, 
∑s¶í
,

231 *
ß…
, 
ß…Àn
, 
ôî
,

232 c⁄° 
EVP_MD
 *
md_ty≥
);

233 
PKCS12_£tup_mac
(
PKCS12
 *
p12
, 
ôî
, *
ß…
,

234 
ß…Àn
, c⁄° 
EVP_MD
 *
md_ty≥
);

235 #i‡
deföed
(
NETWARE
Ë|| deföed(
OPENSSL_SYS_NETWARE
)

237 *
OPENSSL_asc2uni
(c⁄° *
asc
, 
as˛í
, **
uni
, *
unûí
);

238 *
OPENSSL_uni2asc
(*
uni
, 
unûí
);

240 *
asc2uni
(c⁄° *
asc
, 
as˛í
, **
uni
, *
unûí
);

241 *
uni2asc
(*
uni
, 
unûí
);

243 
DECLARE_ASN1_FUNCTIONS
(
PKCS12
)

244 
DECLARE_ASN1_FUNCTIONS
(
PKCS12_MAC_DATA
)

245 
DECLARE_ASN1_FUNCTIONS
(
PKCS12_SAFEBAG
)

246 
DECLARE_ASN1_FUNCTIONS
(
PKCS12_BAGS
)

248 
DECLARE_ASN1_ITEM
(
PKCS12_SAFEBAGS
)

249 
DECLARE_ASN1_ITEM
(
PKCS12_AUTHSAFES
)

251 
PKCS12_PBE_add
();

252 
PKCS12_∑r£
(
PKCS12
 *
p12
, c⁄° *
∑ss
, 
EVP_PKEY
 **
pkey
, 
X509
 **
˚π
,

253 
STACK_OF
(
X509
Ë**
ˇ
);

254 
PKCS12
 *
PKCS12_¸óã
(*
∑ss
, *
«me
, 
EVP_PKEY
 *
pkey
, 
X509
 *
˚π
,

255 
STACK_OF
(
X509
Ë*
ˇ
, 
nid_key
, 
nid_˚π
, 
ôî
,

256 
mac_ôî
, 
keyty≥
);

258 
PKCS12_SAFEBAG
 *
PKCS12_add_˚π
(
STACK_OF
(PKCS12_SAFEBAGË**
pbags
, 
X509
 *
˚π
);

259 
PKCS12_SAFEBAG
 *
PKCS12_add_key
(
STACK_OF
(PKCS12_SAFEBAGË**
pbags
, 
EVP_PKEY
 *
key
,

260 
key_ußge
, 
ôî
,

261 
key_nid
, *
∑ss
);

262 
PKCS12_add_ß„
(
STACK_OF
(
PKCS7
Ë**
pß„s
, STACK_OF(
PKCS12_SAFEBAG
Ë*
bags
,

263 
ß„_nid
, 
ôî
, *
∑ss
);

264 
PKCS12
 *
PKCS12_add_ß„s
(
STACK_OF
(
PKCS7
Ë*
ß„s
, 
p7_nid
);

266 
i2d_PKCS12_bio
(
BIO
 *
bp
, 
PKCS12
 *
p12
);

267 
i2d_PKCS12_Â
(
FILE
 *
Â
, 
PKCS12
 *
p12
);

268 
PKCS12
 *
d2i_PKCS12_bio
(
BIO
 *
bp
, PKCS12 **
p12
);

269 
PKCS12
 *
d2i_PKCS12_Â
(
FILE
 *
Â
, PKCS12 **
p12
);

270 
PKCS12_√w∑ss
(
PKCS12
 *
p12
, *
ﬁd∑ss
, *
√w∑ss
);

276 
ERR_lﬂd_PKCS12_°rögs
();

281 
	#PKCS12_F_PARSE_BAG
 129

	)

282 
	#PKCS12_F_PARSE_BAGS
 103

	)

283 
	#PKCS12_F_PKCS12_ADD_FRIENDLYNAME
 100

	)

284 
	#PKCS12_F_PKCS12_ADD_FRIENDLYNAME_ASC
 127

	)

285 
	#PKCS12_F_PKCS12_ADD_FRIENDLYNAME_UNI
 102

	)

286 
	#PKCS12_F_PKCS12_ADD_LOCALKEYID
 104

	)

287 
	#PKCS12_F_PKCS12_CREATE
 105

	)

288 
	#PKCS12_F_PKCS12_GEN_MAC
 107

	)

289 
	#PKCS12_F_PKCS12_INIT
 109

	)

290 
	#PKCS12_F_PKCS12_ITEM_DECRYPT_D2I
 106

	)

291 
	#PKCS12_F_PKCS12_ITEM_I2D_ENCRYPT
 108

	)

292 
	#PKCS12_F_PKCS12_ITEM_PACK_SAFEBAG
 117

	)

293 
	#PKCS12_F_PKCS12_KEY_GEN_ASC
 110

	)

294 
	#PKCS12_F_PKCS12_KEY_GEN_UNI
 111

	)

295 
	#PKCS12_F_PKCS12_MAKE_KEYBAG
 112

	)

296 
	#PKCS12_F_PKCS12_MAKE_SHKEYBAG
 113

	)

297 
	#PKCS12_F_PKCS12_NEWPASS
 128

	)

298 
	#PKCS12_F_PKCS12_PACK_P7DATA
 114

	)

299 
	#PKCS12_F_PKCS12_PACK_P7ENCDATA
 115

	)

300 
	#PKCS12_F_PKCS12_PARSE
 118

	)

301 
	#PKCS12_F_PKCS12_PBE_CRYPT
 119

	)

302 
	#PKCS12_F_PKCS12_PBE_KEYIVGEN
 120

	)

303 
	#PKCS12_F_PKCS12_SETUP_MAC
 122

	)

304 
	#PKCS12_F_PKCS12_SET_MAC
 123

	)

305 
	#PKCS12_F_PKCS12_UNPACK_AUTHSAFES
 130

	)

306 
	#PKCS12_F_PKCS12_UNPACK_P7DATA
 131

	)

307 
	#PKCS12_F_PKCS12_VERIFY_MAC
 126

	)

308 
	#PKCS12_F_PKCS8_ADD_KEYUSAGE
 124

	)

309 
	#PKCS12_F_PKCS8_ENCRYPT
 125

	)

312 
	#PKCS12_R_CANT_PACK_STRUCTURE
 100

	)

313 
	#PKCS12_R_CONTENT_TYPE_NOT_DATA
 121

	)

314 
	#PKCS12_R_DECODE_ERROR
 101

	)

315 
	#PKCS12_R_ENCODE_ERROR
 102

	)

316 
	#PKCS12_R_ENCRYPT_ERROR
 103

	)

317 
	#PKCS12_R_ERROR_SETTING_ENCRYPTED_DATA_TYPE
 120

	)

318 
	#PKCS12_R_INVALID_NULL_ARGUMENT
 104

	)

319 
	#PKCS12_R_INVALID_NULL_PKCS12_POINTER
 105

	)

320 
	#PKCS12_R_IV_GEN_ERROR
 106

	)

321 
	#PKCS12_R_KEY_GEN_ERROR
 107

	)

322 
	#PKCS12_R_MAC_ABSENT
 108

	)

323 
	#PKCS12_R_MAC_GENERATION_ERROR
 109

	)

324 
	#PKCS12_R_MAC_SETUP_ERROR
 110

	)

325 
	#PKCS12_R_MAC_STRING_SET_ERROR
 111

	)

326 
	#PKCS12_R_MAC_VERIFY_ERROR
 112

	)

327 
	#PKCS12_R_MAC_VERIFY_FAILURE
 113

	)

328 
	#PKCS12_R_PARSE_ERROR
 114

	)

329 
	#PKCS12_R_PKCS12_ALGOR_CIPHERINIT_ERROR
 115

	)

330 
	#PKCS12_R_PKCS12_CIPHERFINAL_ERROR
 116

	)

331 
	#PKCS12_R_PKCS12_PBE_CRYPT_ERROR
 117

	)

332 
	#PKCS12_R_UNKNOWN_DIGEST_ALGORITHM
 118

	)

333 
	#PKCS12_R_UNSUPPORTED_PKCS12_MODE
 119

	)

335 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/pkcs7.h

59 #i‚de‡
HEADER_PKCS7_H


60 
	#HEADER_PKCS7_H


	)

62 
	~<›ís¶/a¢1.h
>

63 
	~<›ís¶/bio.h
>

64 
	~<›ís¶/e_os2.h
>

66 
	~<›ís¶/symhacks.h
>

67 
	~<›ís¶/os¶_typ.h
>

69 #ifde‡ 
__˝lu•lus


73 #ifde‡
OPENSSL_SYS_WIN32


75 #unde‡
PKCS7_ISSUER_AND_SERIAL


76 #unde‡
PKCS7_SIGNER_INFO


86 
	spkcs7_issuî_™d_£rül_°


88 
X509_NAME
 *
issuî
;

89 
ASN1_INTEGER
 *
£rül
;

90 } 
	tPKCS7_ISSUER_AND_SERIAL
;

92 
	spkcs7_sig√r_öfo_°


94 
ASN1_INTEGER
 *
vîsi⁄
;

95 
PKCS7_ISSUER_AND_SERIAL
 *
issuî_™d_£rül
;

96 
X509_ALGOR
 *
dige°_Æg
;

97 
STACK_OF
(
X509_ATTRIBUTE
Ë*
auth_©å
;

98 
X509_ALGOR
 *
dige°_íc_Æg
;

99 
ASN1_OCTET_STRING
 *
íc_dige°
;

100 
STACK_OF
(
X509_ATTRIBUTE
Ë*
u«uth_©å
;

103 
EVP_PKEY
 *
pkey
;

104 } 
	tPKCS7_SIGNER_INFO
;

106 
DECLARE_STACK_OF
(
PKCS7_SIGNER_INFO
)

107 
DECLARE_ASN1_SET_OF
(
PKCS7_SIGNER_INFO
)

109 
	spkcs7_ªcù_öfo_°


111 
ASN1_INTEGER
 *
vîsi⁄
;

112 
PKCS7_ISSUER_AND_SERIAL
 *
issuî_™d_£rül
;

113 
X509_ALGOR
 *
key_íc_Æg‹
;

114 
ASN1_OCTET_STRING
 *
íc_key
;

115 
X509
 *
˚π
;

116 } 
	tPKCS7_RECIP_INFO
;

118 
DECLARE_STACK_OF
(
PKCS7_RECIP_INFO
)

119 
DECLARE_ASN1_SET_OF
(
PKCS7_RECIP_INFO
)

121 
	spkcs7_sig√d_°


123 
ASN1_INTEGER
 *
vîsi⁄
;

124 
STACK_OF
(
X509_ALGOR
Ë*
md_Ægs
;

125 
STACK_OF
(
X509
Ë*
˚π
;

126 
STACK_OF
(
X509_CRL
Ë*
¸l
;

127 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
sig√r_öfo
;

129 
pkcs7_°
 *
c⁄ã¡s
;

130 } 
	tPKCS7_SIGNED
;

134 
	spkcs7_íc_c⁄ã¡_°


136 
ASN1_OBJECT
 *
c⁄ã¡_ty≥
;

137 
X509_ALGOR
 *
Æg‹ôhm
;

138 
ASN1_OCTET_STRING
 *
íc_d©a
;

139 c⁄° 
EVP_CIPHER
 *
cùhî
;

140 } 
	tPKCS7_ENC_CONTENT
;

142 
	spkcs7_ívñ›ed_°


144 
ASN1_INTEGER
 *
vîsi⁄
;

145 
STACK_OF
(
PKCS7_RECIP_INFO
Ë*
ªcùõ¡öfo
;

146 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

147 } 
	tPKCS7_ENVELOPE
;

149 
	spkcs7_sig√d™dívñ›ed_°


151 
ASN1_INTEGER
 *
vîsi⁄
;

152 
STACK_OF
(
X509_ALGOR
Ë*
md_Ægs
;

153 
STACK_OF
(
X509
Ë*
˚π
;

154 
STACK_OF
(
X509_CRL
Ë*
¸l
;

155 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
sig√r_öfo
;

157 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

158 
STACK_OF
(
PKCS7_RECIP_INFO
Ë*
ªcùõ¡öfo
;

159 } 
	tPKCS7_SIGN_ENVELOPE
;

161 
	spkcs7_dige°_°


163 
ASN1_INTEGER
 *
vîsi⁄
;

164 
X509_ALGOR
 *
md
;

165 
pkcs7_°
 *
c⁄ã¡s
;

166 
ASN1_OCTET_STRING
 *
dige°
;

167 } 
	tPKCS7_DIGEST
;

169 
	spkcs7_í¸y±ed_°


171 
ASN1_INTEGER
 *
vîsi⁄
;

172 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

173 } 
	tPKCS7_ENCRYPT
;

175 
	spkcs7_°


179 *
a¢1
;

180 
Àngth
;

182 
	#PKCS7_S_HEADER
 0

	)

183 
	#PKCS7_S_BODY
 1

	)

184 
	#PKCS7_S_TAIL
 2

	)

185 
°©e
;

187 
dëached
;

189 
ASN1_OBJECT
 *
ty≥
;

194 *
±r
;

197 
ASN1_OCTET_STRING
 *
d©a
;

200 
PKCS7_SIGNED
 *
sign
;

203 
PKCS7_ENVELOPE
 *
ívñ›ed
;

206 
PKCS7_SIGN_ENVELOPE
 *
sig√d_™d_ívñ›ed
;

209 
PKCS7_DIGEST
 *
dige°
;

212 
PKCS7_ENCRYPT
 *
í¸y±ed
;

215 
ASN1_TYPE
 *
Ÿhî
;

216 } 
d
;

217 } 
	tPKCS7
;

219 
DECLARE_STACK_OF
(
PKCS7
)

220 
DECLARE_ASN1_SET_OF
(
PKCS7
)

221 
DECLARE_PKCS12_STACK_OF
(
PKCS7
)

223 
	#PKCS7_OP_SET_DETACHED_SIGNATURE
 1

	)

224 
	#PKCS7_OP_GET_DETACHED_SIGNATURE
 2

	)

226 
	#PKCS7_gë_sig√d_©åibuãs
(
si
Ë((si)->
auth_©å
)

	)

227 
	#PKCS7_gë_©åibuãs
(
si
Ë((si)->
u«uth_©å
)

	)

229 
	#PKCS7_ty≥_is_sig√d
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_sig√d
)

	)

230 
	#PKCS7_ty≥_is_í¸y±ed
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_í¸y±ed
)

	)

231 
	#PKCS7_ty≥_is_ívñ›ed
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_ívñ›ed
)

	)

232 
	#PKCS7_ty≥_is_sig√dAndEnvñ›ed
(
a
) \

233 (
	`OBJ_obj2nid
((
a
)->
ty≥
Ë=
NID_pkcs7_sig√dAndEnvñ›ed
)

	)

234 
	#PKCS7_ty≥_is_d©a
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_d©a
)

	)

236 
	#PKCS7_ty≥_is_dige°
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_dige°
)

	)

238 
	#PKCS7_£t_dëached
(
p
,
v
) \

239 
	`PKCS7_˘æ
(
p
,
PKCS7_OP_SET_DETACHED_SIGNATURE
,
v
,
NULL
)

	)

240 
	#PKCS7_gë_dëached
(
p
) \

241 
	`PKCS7_˘æ
(
p
,
PKCS7_OP_GET_DETACHED_SIGNATURE
,0,
NULL
)

	)

243 
	#PKCS7_is_dëached
(
p7
Ë(
	`PKCS7_ty≥_is_sig√d
’7Ë&& 
	`PKCS7_gë_dëached
’7))

	)

245 #ifde‡
SSLEAY_MACROS


246 #i‚de‡
PKCS7_ISSUER_AND_SERIAL_dige°


247 
	#PKCS7_ISSUER_AND_SERIAL_dige°
(
d©a
,
ty≥
,
md
,
Àn
) \

248 
	`ASN1_dige°
(((*)())
i2d_PKCS7_ISSUER_AND_SERIAL
,
ty≥
,\

249 (*)
d©a
,
md
,
Àn
)

	)

255 
	#PKCS7_TEXT
 0x1

	)

256 
	#PKCS7_NOCERTS
 0x2

	)

257 
	#PKCS7_NOSIGS
 0x4

	)

258 
	#PKCS7_NOCHAIN
 0x8

	)

259 
	#PKCS7_NOINTERN
 0x10

	)

260 
	#PKCS7_NOVERIFY
 0x20

	)

261 
	#PKCS7_DETACHED
 0x40

	)

262 
	#PKCS7_BINARY
 0x80

	)

263 
	#PKCS7_NOATTR
 0x100

	)

264 
	#PKCS7_NOSMIMECAP
 0x200

	)

265 
	#PKCS7_NOOLDMIMETYPE
 0x400

	)

266 
	#PKCS7_CRLFEOL
 0x800

	)

267 
	#PKCS7_STREAM
 0x1000

	)

268 
	#PKCS7_NOCRL
 0x2000

	)

272 
	#SMIME_TEXT
 
PKCS7_TEXT


	)

273 
	#SMIME_NOCERTS
 
PKCS7_NOCERTS


	)

274 
	#SMIME_NOSIGS
 
PKCS7_NOSIGS


	)

275 
	#SMIME_NOCHAIN
 
PKCS7_NOCHAIN


	)

276 
	#SMIME_NOINTERN
 
PKCS7_NOINTERN


	)

277 
	#SMIME_NOVERIFY
 
PKCS7_NOVERIFY


	)

278 
	#SMIME_DETACHED
 
PKCS7_DETACHED


	)

279 
	#SMIME_BINARY
 
PKCS7_BINARY


	)

280 
	#SMIME_NOATTR
 
PKCS7_NOATTR


	)

282 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ISSUER_AND_SERIAL
)

284 #i‚de‡
SSLEAY_MACROS


285 
PKCS7_ISSUER_AND_SERIAL_dige°
(
PKCS7_ISSUER_AND_SERIAL
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

286 *
md
,*
Àn
);

287 #i‚de‡
OPENSSL_NO_FP_API


288 
PKCS7
 *
d2i_PKCS7_Â
(
FILE
 *
Â
,PKCS7 **
p7
);

289 
i2d_PKCS7_Â
(
FILE
 *
Â
,
PKCS7
 *
p7
);

291 
PKCS7
 *
PKCS7_dup
(PKCS7 *
p7
);

292 
PKCS7
 *
d2i_PKCS7_bio
(
BIO
 *
bp
,PKCS7 **
p7
);

293 
i2d_PKCS7_bio
(
BIO
 *
bp
,
PKCS7
 *
p7
);

296 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNER_INFO
)

297 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_RECIP_INFO
)

298 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNED
)

299 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENC_CONTENT
)

300 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENVELOPE
)

301 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGN_ENVELOPE
)

302 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_DIGEST
)

303 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENCRYPT
)

304 
DECLARE_ASN1_FUNCTIONS
(
PKCS7
)

306 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_SIGN
)

307 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_VERIFY
)

309 
DECLARE_ASN1_NDEF_FUNCTION
(
PKCS7
)

311 
PKCS7_˘æ
(
PKCS7
 *
p7
, 
cmd
, 
œrg
, *
∑rg
);

313 
PKCS7_£t_ty≥
(
PKCS7
 *
p7
, 
ty≥
);

314 
PKCS7_£t0_ty≥_Ÿhî
(
PKCS7
 *
p7
, 
ty≥
, 
ASN1_TYPE
 *
Ÿhî
);

315 
PKCS7_£t_c⁄ã¡
(
PKCS7
 *
p7
, PKCS7 *
p7_d©a
);

316 
PKCS7_SIGNER_INFO_£t
(
PKCS7_SIGNER_INFO
 *
p7i
, 
X509
 *
x509
, 
EVP_PKEY
 *
pkey
,

317 c⁄° 
EVP_MD
 *
dg°
);

318 
PKCS7_add_sig√r
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
p7i
);

319 
PKCS7_add_˚πifiˇã
(
PKCS7
 *
p7
, 
X509
 *
x509
);

320 
PKCS7_add_¸l
(
PKCS7
 *
p7
, 
X509_CRL
 *
x509
);

321 
PKCS7_c⁄ã¡_√w
(
PKCS7
 *
p7
, 
nid
);

322 
PKCS7_d©aVîify
(
X509_STORE
 *
˚π_°‹e
, 
X509_STORE_CTX
 *
˘x
,

323 
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

324 
PKCS7_sig«tuªVîify
(
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
,

325 
X509
 *
x509
);

327 
BIO
 *
PKCS7_d©aInô
(
PKCS7
 *
p7
, BIO *
bio
);

328 
PKCS7_d©aFöÆ
(
PKCS7
 *
p7
, 
BIO
 *
bio
);

329 
BIO
 *
PKCS7_d©aDecode
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, BIO *
ö_bio
, 
X509
 *
p˚π
);

332 
PKCS7_SIGNER_INFO
 *
PKCS7_add_sig«tuª
(
PKCS7
 *
p7
, 
X509
 *
x509
,

333 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
dg°
);

334 
X509
 *
PKCS7_˚π_‰om_sig√r_öfo
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

335 
PKCS7_£t_dige°
(
PKCS7
 *
p7
, c⁄° 
EVP_MD
 *
md
);

336 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
PKCS7_gë_sig√r_öfo
(
PKCS7
 *
p7
);

338 
PKCS7_RECIP_INFO
 *
PKCS7_add_ªcùõ¡
(
PKCS7
 *
p7
, 
X509
 *
x509
);

339 
PKCS7_add_ªcùõ¡_öfo
(
PKCS7
 *
p7
, 
PKCS7_RECIP_INFO
 *
ri
);

340 
PKCS7_RECIP_INFO_£t
(
PKCS7_RECIP_INFO
 *
p7i
, 
X509
 *
x509
);

341 
PKCS7_£t_cùhî
(
PKCS7
 *
p7
, c⁄° 
EVP_CIPHER
 *
cùhî
);

343 
PKCS7_ISSUER_AND_SERIAL
 *
PKCS7_gë_issuî_™d_£rül
(
PKCS7
 *
p7
, 
idx
);

344 
ASN1_OCTET_STRING
 *
PKCS7_dige°_‰om_©åibuãs
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

345 
PKCS7_add_sig√d_©åibuã
(
PKCS7_SIGNER_INFO
 *
p7si
,
nid
,
ty≥
,

346 *
d©a
);

347 
PKCS7_add_©åibuã
 (
PKCS7_SIGNER_INFO
 *
p7si
, 
nid
, 
©πy≥
,

348 *
vÆue
);

349 
ASN1_TYPE
 *
PKCS7_gë_©åibuã
(
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

350 
ASN1_TYPE
 *
PKCS7_gë_sig√d_©åibuã
(
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

351 
PKCS7_£t_sig√d_©åibuãs
(
PKCS7_SIGNER_INFO
 *
p7si
,

352 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

353 
PKCS7_£t_©åibuãs
(
PKCS7_SIGNER_INFO
 *
p7si
,
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

356 
PKCS7
 *
PKCS7_sign
(
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
, 
STACK_OF
(X509Ë*
˚πs
,

357 
BIO
 *
d©a
, 
Êags
);

358 
PKCS7_vîify
(
PKCS7
 *
p7
, 
STACK_OF
(
X509
Ë*
˚πs
, 
X509_STORE
 *
°‹e
,

359 
BIO
 *
öd©a
, BIO *
out
, 
Êags
);

360 
STACK_OF
(
X509
Ë*
PKCS7_gë0_sig√rs
(
PKCS7
 *
p7
, STACK_OF(X509Ë*
˚πs
, 
Êags
);

361 
PKCS7
 *
PKCS7_í¸y±
(
STACK_OF
(
X509
Ë*
˚πs
, 
BIO
 *
ö
, c⁄° 
EVP_CIPHER
 *
cùhî
,

362 
Êags
);

363 
PKCS7_de¸y±
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, 
X509
 *
˚π
, 
BIO
 *
d©a
, 
Êags
);

365 
PKCS7_add_©åib_smimeˇp
(
PKCS7_SIGNER_INFO
 *
si
,

366 
STACK_OF
(
X509_ALGOR
Ë*
ˇp
);

367 
STACK_OF
(
X509_ALGOR
Ë*
PKCS7_gë_smimeˇp
(
PKCS7_SIGNER_INFO
 *
si
);

368 
PKCS7_sim∂e_smimeˇp
(
STACK_OF
(
X509_ALGOR
Ë*
sk
, 
nid
, 
¨g
);

370 
SMIME_wrôe_PKCS7
(
BIO
 *
bio
, 
PKCS7
 *
p7
, BIO *
d©a
, 
Êags
);

371 
PKCS7
 *
SMIME_ªad_PKCS7
(
BIO
 *
bio
, BIO **
bc⁄t
);

372 
SMIME_¸lf_c›y
(
BIO
 *
ö
, BIO *
out
, 
Êags
);

373 
SMIME_ãxt
(
BIO
 *
ö
, BIO *
out
);

379 
ERR_lﬂd_PKCS7_°rögs
();

384 
	#PKCS7_F_B64_READ_PKCS7
 120

	)

385 
	#PKCS7_F_B64_WRITE_PKCS7
 121

	)

386 
	#PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP
 118

	)

387 
	#PKCS7_F_PKCS7_ADD_CERTIFICATE
 100

	)

388 
	#PKCS7_F_PKCS7_ADD_CRL
 101

	)

389 
	#PKCS7_F_PKCS7_ADD_RECIPIENT_INFO
 102

	)

390 
	#PKCS7_F_PKCS7_ADD_SIGNER
 103

	)

391 
	#PKCS7_F_PKCS7_BIO_ADD_DIGEST
 125

	)

392 
	#PKCS7_F_PKCS7_CTRL
 104

	)

393 
	#PKCS7_F_PKCS7_DATADECODE
 112

	)

394 
	#PKCS7_F_PKCS7_DATAFINAL
 128

	)

395 
	#PKCS7_F_PKCS7_DATAINIT
 105

	)

396 
	#PKCS7_F_PKCS7_DATASIGN
 106

	)

397 
	#PKCS7_F_PKCS7_DATAVERIFY
 107

	)

398 
	#PKCS7_F_PKCS7_DECRYPT
 114

	)

399 
	#PKCS7_F_PKCS7_ENCRYPT
 115

	)

400 
	#PKCS7_F_PKCS7_FIND_DIGEST
 127

	)

401 
	#PKCS7_F_PKCS7_GET0_SIGNERS
 124

	)

402 
	#PKCS7_F_PKCS7_SET_CIPHER
 108

	)

403 
	#PKCS7_F_PKCS7_SET_CONTENT
 109

	)

404 
	#PKCS7_F_PKCS7_SET_DIGEST
 126

	)

405 
	#PKCS7_F_PKCS7_SET_TYPE
 110

	)

406 
	#PKCS7_F_PKCS7_SIGN
 116

	)

407 
	#PKCS7_F_PKCS7_SIGNATUREVERIFY
 113

	)

408 
	#PKCS7_F_PKCS7_SIMPLE_SMIMECAP
 119

	)

409 
	#PKCS7_F_PKCS7_VERIFY
 117

	)

410 
	#PKCS7_F_SMIME_READ_PKCS7
 122

	)

411 
	#PKCS7_F_SMIME_TEXT
 123

	)

414 
	#PKCS7_R_CERTIFICATE_VERIFY_ERROR
 117

	)

415 
	#PKCS7_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 144

	)

416 
	#PKCS7_R_CIPHER_NOT_INITIALIZED
 116

	)

417 
	#PKCS7_R_CONTENT_AND_DATA_PRESENT
 118

	)

418 
	#PKCS7_R_DECODE_ERROR
 130

	)

419 
	#PKCS7_R_DECRYPTED_KEY_IS_WRONG_LENGTH
 100

	)

420 
	#PKCS7_R_DECRYPT_ERROR
 119

	)

421 
	#PKCS7_R_DIGEST_FAILURE
 101

	)

422 
	#PKCS7_R_ERROR_ADDING_RECIPIENT
 120

	)

423 
	#PKCS7_R_ERROR_SETTING_CIPHER
 121

	)

424 
	#PKCS7_R_INVALID_MIME_TYPE
 131

	)

425 
	#PKCS7_R_INVALID_NULL_POINTER
 143

	)

426 
	#PKCS7_R_MIME_NO_CONTENT_TYPE
 132

	)

427 
	#PKCS7_R_MIME_PARSE_ERROR
 133

	)

428 
	#PKCS7_R_MIME_SIG_PARSE_ERROR
 134

	)

429 
	#PKCS7_R_MISSING_CERIPEND_INFO
 103

	)

430 
	#PKCS7_R_NO_CONTENT
 122

	)

431 
	#PKCS7_R_NO_CONTENT_TYPE
 135

	)

432 
	#PKCS7_R_NO_MULTIPART_BODY_FAILURE
 136

	)

433 
	#PKCS7_R_NO_MULTIPART_BOUNDARY
 137

	)

434 
	#PKCS7_R_NO_RECIPIENT_MATCHES_CERTIFICATE
 115

	)

435 
	#PKCS7_R_NO_RECIPIENT_MATCHES_KEY
 146

	)

436 
	#PKCS7_R_NO_SIGNATURES_ON_DATA
 123

	)

437 
	#PKCS7_R_NO_SIGNERS
 142

	)

438 
	#PKCS7_R_NO_SIG_CONTENT_TYPE
 138

	)

439 
	#PKCS7_R_OPERATION_NOT_SUPPORTED_ON_THIS_TYPE
 104

	)

440 
	#PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR
 124

	)

441 
	#PKCS7_R_PKCS7_DATAFINAL
 126

	)

442 
	#PKCS7_R_PKCS7_DATAFINAL_ERROR
 125

	)

443 
	#PKCS7_R_PKCS7_DATASIGN
 145

	)

444 
	#PKCS7_R_PKCS7_PARSE_ERROR
 139

	)

445 
	#PKCS7_R_PKCS7_SIG_PARSE_ERROR
 140

	)

446 
	#PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE
 127

	)

447 
	#PKCS7_R_SIGNATURE_FAILURE
 105

	)

448 
	#PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND
 128

	)

449 
	#PKCS7_R_SIG_INVALID_MIME_TYPE
 141

	)

450 
	#PKCS7_R_SMIME_TEXT_ERROR
 129

	)

451 
	#PKCS7_R_UNABLE_TO_FIND_CERTIFICATE
 106

	)

452 
	#PKCS7_R_UNABLE_TO_FIND_MEM_BIO
 107

	)

453 
	#PKCS7_R_UNABLE_TO_FIND_MESSAGE_DIGEST
 108

	)

454 
	#PKCS7_R_UNKNOWN_DIGEST_TYPE
 109

	)

455 
	#PKCS7_R_UNKNOWN_OPERATION
 110

	)

456 
	#PKCS7_R_UNSUPPORTED_CIPHER_TYPE
 111

	)

457 
	#PKCS7_R_UNSUPPORTED_CONTENT_TYPE
 112

	)

458 
	#PKCS7_R_WRONG_CONTENT_TYPE
 113

	)

459 
	#PKCS7_R_WRONG_PKCS7_TYPE
 114

	)

461 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/rand.h

59 #i‚de‡
HEADER_RAND_H


60 
	#HEADER_RAND_H


	)

62 
	~<°dlib.h
>

63 
	~<›ís¶/os¶_typ.h
>

64 
	~<›ís¶/e_os2.h
>

66 #i‡
deföed
(
OPENSSL_SYS_WINDOWS
)

67 
	~<wödows.h
>

70 #ifde‡ 
__˝lu•lus


74 #i‡
deföed
(
OPENSSL_FIPS
)

75 
	#FIPS_RAND_SIZE_T
 

	)

81 
	sønd_mëh_°


83 (*
£ed
)(c⁄° *
buf
, 
num
);

84 (*
byãs
)(*
buf
, 
num
);

85 (*
˛ónup
)();

86 (*
add
)(c⁄° *
buf
, 
num
, 
íå›y
);

87 (*
p£ud‹™d
)(*
buf
, 
num
);

88 (*
°©us
)();

91 #ifde‡
BN_DEBUG


92 
ønd_¥edi˘abÀ
;

95 
RAND_£t_ønd_mëhod
(c⁄° 
RAND_METHOD
 *
mëh
);

96 c⁄° 
RAND_METHOD
 *
RAND_gë_ønd_mëhod
();

97 #i‚de‡
OPENSSL_NO_ENGINE


98 
RAND_£t_ønd_ígöe
(
ENGINE
 *
ígöe
);

100 
RAND_METHOD
 *
RAND_SSLóy
();

101 
RAND_˛ónup
();

102 
RAND_byãs
(*
buf
,
num
);

103 
RAND_p£udo_byãs
(*
buf
,
num
);

104 
RAND_£ed
(c⁄° *
buf
,
num
);

105 
RAND_add
(c⁄° *
buf
,
num
,
íå›y
);

106 
RAND_lﬂd_fûe
(c⁄° *
fûe
,
max_byãs
);

107 
RAND_wrôe_fûe
(c⁄° *
fûe
);

108 c⁄° *
RAND_fûe_«me
(*
fûe
,
size_t
 
num
);

109 
RAND_°©us
();

110 
RAND_quîy_egd_byãs
(c⁄° *
∑th
, *
buf
, 
byãs
);

111 
RAND_egd
(c⁄° *
∑th
);

112 
RAND_egd_byãs
(c⁄° *
∑th
,
byãs
);

113 
RAND_pﬁl
();

114 #i‚de‡
OPENSSL_NO_ENGINE


115 #ifde‡
OPENSSL_FIPS


116 
öt_RAND_öô_ígöe_ˇŒbacks
();

117 
öt_RAND_£t_ˇŒbacks
(

118 (*
£t_ønd_func
)(c⁄° 
RAND_METHOD
 *
mëh
,

119 c⁄° 
RAND_METHOD
 **
pmëh
),

120 c⁄° 
RAND_METHOD
 *(*
gë_ønd_func
)(c⁄° RAND_METHOD **
pmëh
));

124 #i‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë|| deföed(
OPENSSL_SYS_WIN32
)

126 
RAND_s¸ìn
();

127 
RAND_evít
(
UINT
, 
WPARAM
, 
LPARAM
);

135 
ERR_lﬂd_RAND_°rögs
();

140 
	#RAND_F_ENG_RAND_GET_RAND_METHOD
 108

	)

141 
	#RAND_F_FIPS_RAND
 103

	)

142 
	#RAND_F_FIPS_RAND_BYTES
 102

	)

143 
	#RAND_F_FIPS_RAND_GET_RAND_METHOD
 109

	)

144 
	#RAND_F_FIPS_RAND_SET_DT
 106

	)

145 
	#RAND_F_FIPS_SET_DT
 104

	)

146 
	#RAND_F_FIPS_SET_PRNG_SEED
 107

	)

147 
	#RAND_F_FIPS_SET_TEST_MODE
 105

	)

148 
	#RAND_F_RAND_GET_RAND_METHOD
 101

	)

149 
	#RAND_F_SSLEAY_RAND_BYTES
 100

	)

152 
	#RAND_R_NON_FIPS_METHOD
 105

	)

153 
	#RAND_R_NOT_IN_TEST_MODE
 106

	)

154 
	#RAND_R_NO_KEY_SET
 107

	)

155 
	#RAND_R_PRNG_ASKING_FOR_TOO_MUCH
 101

	)

156 
	#RAND_R_PRNG_ERROR
 108

	)

157 
	#RAND_R_PRNG_KEYED
 109

	)

158 
	#RAND_R_PRNG_NOT_REKEYED
 102

	)

159 
	#RAND_R_PRNG_NOT_RESEEDED
 103

	)

160 
	#RAND_R_PRNG_NOT_SEEDED
 100

	)

161 
	#RAND_R_PRNG_SEED_MUST_NOT_MATCH_KEY
 110

	)

162 
	#RAND_R_PRNG_STUCK
 104

	)

164 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/rc2.h

59 #i‚de‡
HEADER_RC2_H


60 
	#HEADER_RC2_H


	)

62 
	~<›ís¶/›ís¶c⁄f.h
>

63 #ifde‡
OPENSSL_NO_RC2


64 #îr‹ 
RC2
 
is
 
dißbÀd
.

67 
	#RC2_ENCRYPT
 1

	)

68 
	#RC2_DECRYPT
 0

	)

70 
	#RC2_BLOCK
 8

	)

71 
	#RC2_KEY_LENGTH
 16

	)

73 #ifde‡ 
__˝lu•lus


77 
	src2_key_°


79 
RC2_INT
 
d©a
[64];

80 } 
	tRC2_KEY
;

82 #ifde‡
OPENSSL_FIPS


83 
¥iv©e_RC2_£t_key
(
RC2_KEY
 *
key
, 
Àn
, c⁄° *
d©a
,
bôs
);

85 
RC2_£t_key
(
RC2_KEY
 *
key
, 
Àn
, c⁄° *
d©a
,
bôs
);

86 
RC2_ecb_í¸y±
(c⁄° *
ö
,*
out
,
RC2_KEY
 *
key
,

87 
íc
);

88 
RC2_í¸y±
(*
d©a
,
RC2_KEY
 *
key
);

89 
RC2_de¸y±
(*
d©a
,
RC2_KEY
 *
key
);

90 
RC2_cbc_í¸y±
(c⁄° *
ö
, *
out
, 
Àngth
,

91 
RC2_KEY
 *
ks
, *
iv
, 
íc
);

92 
RC2_cfb64_í¸y±
(c⁄° *
ö
, *
out
,

93 
Àngth
, 
RC2_KEY
 *
scheduÀ
, *
ivec
,

94 *
num
, 
íc
);

95 
RC2_ofb64_í¸y±
(c⁄° *
ö
, *
out
,

96 
Àngth
, 
RC2_KEY
 *
scheduÀ
, *
ivec
,

97 *
num
);

99 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/rc4.h

59 #i‚de‡
HEADER_RC4_H


60 
	#HEADER_RC4_H


	)

62 
	~<›ís¶/›ís¶c⁄f.h
>

63 #ifde‡
OPENSSL_NO_RC4


64 #îr‹ 
RC4
 
is
 
dißbÀd
.

67 #ifde‡ 
__˝lu•lus


71 
	src4_key_°


73 
RC4_INT
 
x
,
y
;

74 
RC4_INT
 
d©a
[256];

75 } 
	tRC4_KEY
;

78 c⁄° *
RC4_›ti⁄s
();

79 #ifde‡
OPENSSL_FIPS


80 
¥iv©e_RC4_£t_key
(
RC4_KEY
 *
key
, 
Àn
, c⁄° *
d©a
);

82 
RC4_£t_key
(
RC4_KEY
 *
key
, 
Àn
, c⁄° *
d©a
);

83 
RC4
(
RC4_KEY
 *
key
, 
Àn
, c⁄° *
öd©a
,

84 *
outd©a
);

86 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/rc5.h

59 #i‚de‡
HEADER_RC5_H


60 
	#HEADER_RC5_H


	)

62 
	~<›ís¶/›ís¶c⁄f.h
>

64 #ifde‡ 
__˝lu•lus


68 #ifde‡
OPENSSL_NO_RC5


69 #îr‹ 
RC5
 
is
 
dißbÀd
.

72 
	#RC5_ENCRYPT
 1

	)

73 
	#RC5_DECRYPT
 0

	)

76 
	#RC5_32_INT
 

	)

78 
	#RC5_32_BLOCK
 8

	)

79 
	#RC5_32_KEY_LENGTH
 16

	)

86 
	#RC5_8_ROUNDS
 8

	)

87 
	#RC5_12_ROUNDS
 12

	)

88 
	#RC5_16_ROUNDS
 16

	)

90 
	src5_key_°


93 
rounds
;

94 
RC5_32_INT
 
d©a
[2*(
RC5_16_ROUNDS
+1)];

95 } 
	tRC5_32_KEY
;

97 #ifde‡
OPENSSL_FIPS


98 
¥iv©e_RC5_32_£t_key
(
RC5_32_KEY
 *
key
, 
Àn
, c⁄° *
d©a
,

99 
rounds
);

101 
RC5_32_£t_key
(
RC5_32_KEY
 *
key
, 
Àn
, c⁄° *
d©a
,

102 
rounds
);

103 
RC5_32_ecb_í¸y±
(c⁄° *
ö
,*
out
,
RC5_32_KEY
 *
key
,

104 
íc
);

105 
RC5_32_í¸y±
(*
d©a
,
RC5_32_KEY
 *
key
);

106 
RC5_32_de¸y±
(*
d©a
,
RC5_32_KEY
 *
key
);

107 
RC5_32_cbc_í¸y±
(c⁄° *
ö
, *
out
,

108 
Àngth
, 
RC5_32_KEY
 *
ks
, *
iv
,

109 
íc
);

110 
RC5_32_cfb64_í¸y±
(c⁄° *
ö
, *
out
,

111 
Àngth
, 
RC5_32_KEY
 *
scheduÀ
,

112 *
ivec
, *
num
, 
íc
);

113 
RC5_32_ofb64_í¸y±
(c⁄° *
ö
, *
out
,

114 
Àngth
, 
RC5_32_KEY
 *
scheduÀ
,

115 *
ivec
, *
num
);

117 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ripemd.h

59 #i‚de‡
HEADER_RIPEMD_H


60 
	#HEADER_RIPEMD_H


	)

62 
	~<›ís¶/e_os2.h
>

63 
	~<°ddef.h
>

65 #ifde‡ 
__˝lu•lus


69 #ifde‡
OPENSSL_NO_RIPEMD


70 #îr‹ 
RIPEMD
 
is
 
dißbÀd
.

73 #i‡
deföed
(
OPENSSL_SYS_WIN16
Ë|| deföed(
__LP32__
)

74 
	#RIPEMD160_LONG
 

	)

75 #ñi‡
deföed
(
OPENSSL_SYS_CRAY
Ë|| deföed(
__ILP64__
)

76 
	#RIPEMD160_LONG
 

	)

77 
	#RIPEMD160_LONG_LOG2
 3

	)

79 
	#RIPEMD160_LONG
 

	)

82 
	#RIPEMD160_CBLOCK
 64

	)

83 
	#RIPEMD160_LBLOCK
 (
RIPEMD160_CBLOCK
/4)

	)

84 
	#RIPEMD160_DIGEST_LENGTH
 20

	)

86 
	sRIPEMD160°©e_°


88 
RIPEMD160_LONG
 
A
,
B
,
C
,
D
,
E
;

89 
RIPEMD160_LONG
 
Nl
,
Nh
;

90 
RIPEMD160_LONG
 
d©a
[
RIPEMD160_LBLOCK
];

91 
num
;

92 } 
	tRIPEMD160_CTX
;

93 #ifde‡
OPENSSL_FIPS


94 
¥iv©e_RIPEMD160_Inô
(
RIPEMD160_CTX
 *
c
);

96 
RIPEMD160_Inô
(
RIPEMD160_CTX
 *
c
);

97 
RIPEMD160_Upd©e
(
RIPEMD160_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

98 
RIPEMD160_FöÆ
(*
md
, 
RIPEMD160_CTX
 *
c
);

99 *
RIPEMD160
(c⁄° *
d
, 
size_t
 
n
,

100 *
md
);

101 
RIPEMD160_Tønsf‹m
(
RIPEMD160_CTX
 *
c
, c⁄° *
b
);

102 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/rsa.h

59 #i‚de‡
HEADER_RSA_H


60 
	#HEADER_RSA_H


	)

62 
	~<›ís¶/a¢1.h
>

64 #i‚de‡
OPENSSL_NO_BIO


65 
	~<›ís¶/bio.h
>

67 
	~<›ís¶/¸y±o.h
>

68 
	~<›ís¶/os¶_typ.h
>

69 #i‚de‡
OPENSSL_NO_DEPRECATED


70 
	~<›ís¶/bn.h
>

73 #ifde‡
OPENSSL_NO_RSA


74 #îr‹ 
RSA
 
is
 
dißbÀd
.

83 
	#RSA_FLAG_FIPS_METHOD
 0x0400

	)

90 
	#RSA_FLAG_NON_FIPS_ALLOW
 0x0400

	)

92 #ifde‡
OPENSSL_FIPS


93 
	#FIPS_RSA_SIZE_T
 

	)

96 #ifde‡ 
__˝lu•lus


104 
	srß_mëh_°


106 c⁄° *
«me
;

107 (*
rß_pub_íc
)(
Êí
,c⁄° *
‰om
,

108 *
to
,

109 
RSA
 *
rß
,
∑ddög
);

110 (*
rß_pub_dec
)(
Êí
,c⁄° *
‰om
,

111 *
to
,

112 
RSA
 *
rß
,
∑ddög
);

113 (*
rß_¥iv_íc
)(
Êí
,c⁄° *
‰om
,

114 *
to
,

115 
RSA
 *
rß
,
∑ddög
);

116 (*
rß_¥iv_dec
)(
Êí
,c⁄° *
‰om
,

117 *
to
,

118 
RSA
 *
rß
,
∑ddög
);

119 (*
rß_mod_exp
)(
BIGNUM
 *
r0
,c⁄° BIGNUM *
I
,
RSA
 *
rß
,
BN_CTX
 *
˘x
);

120 (*
bn_mod_exp
)(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

121 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
,

122 
BN_MONT_CTX
 *
m_˘x
);

123 (*
öô
)(
RSA
 *
rß
);

124 (*
föish
)(
RSA
 *
rß
);

125 
Êags
;

126 *
≠p_d©a
;

134 (*
rß_sign
)(
ty≥
,

135 c⁄° *
m
, 
m_Àngth
,

136 *
sigªt
, *
sigÀn
, c⁄° 
RSA
 *
rß
);

137 (*
rß_vîify
)(
dty≥
,

138 c⁄° *
m
, 
m_Àngth
,

139 *
sigbuf
, 
sigÀn
, c⁄° 
RSA
 *
rß
);

144 (*
rß_keygí
)(
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

147 
	srß_°


151 
∑d
;

152 
vîsi⁄
;

153 c⁄° 
RSA_METHOD
 *
mëh
;

155 
ENGINE
 *
ígöe
;

156 
BIGNUM
 *
n
;

157 
BIGNUM
 *
e
;

158 
BIGNUM
 *
d
;

159 
BIGNUM
 *
p
;

160 
BIGNUM
 *
q
;

161 
BIGNUM
 *
dmp1
;

162 
BIGNUM
 *
dmq1
;

163 
BIGNUM
 *
iqmp
;

165 
CRYPTO_EX_DATA
 
ex_d©a
;

166 
ª„ªn˚s
;

167 
Êags
;

170 
BN_MONT_CTX
 *
_mëhod_mod_n
;

171 
BN_MONT_CTX
 *
_mëhod_mod_p
;

172 
BN_MONT_CTX
 *
_mëhod_mod_q
;

176 *
bignum_d©a
;

177 
BN_BLINDING
 *
blödög
;

178 
BN_BLINDING
 *
mt_blödög
;

181 #i‚de‡
OPENSSL_RSA_MAX_MODULUS_BITS


182 
	#OPENSSL_RSA_MAX_MODULUS_BITS
 16384

	)

185 
	#OPENSSL_RSA_FIPS_MIN_MODULUS_BITS
 1024

	)

187 #i‚de‡
OPENSSL_RSA_SMALL_MODULUS_BITS


188 
	#OPENSSL_RSA_SMALL_MODULUS_BITS
 3072

	)

190 #i‚de‡
OPENSSL_RSA_MAX_PUBEXP_BITS


191 
	#OPENSSL_RSA_MAX_PUBEXP_BITS
 64

	)

194 
	#RSA_3
 0x3L

	)

195 
	#RSA_F4
 0x10001L

	)

197 
	#RSA_METHOD_FLAG_NO_CHECK
 0x0001

	)

199 
	#RSA_FLAG_CACHE_PUBLIC
 0x0002

	)

200 
	#RSA_FLAG_CACHE_PRIVATE
 0x0004

	)

201 
	#RSA_FLAG_BLINDING
 0x0008

	)

202 
	#RSA_FLAG_THREAD_SAFE
 0x0010

	)

208 
	#RSA_FLAG_EXT_PKEY
 0x0020

	)

212 
	#RSA_FLAG_SIGN_VER
 0x0040

	)

214 
	#RSA_FLAG_NO_BLINDING
 0x0080

	)

219 
	#RSA_FLAG_NO_CONSTTIME
 0x0100

	)

229 #i‚de‡
OPENSSL_NO_DEPRECATED


230 
	#RSA_FLAG_NO_EXP_CONSTTIME
 
RSA_FLAG_NO_CONSTTIME


	)

241 
	#RSA_PKCS1_PADDING
 1

	)

242 
	#RSA_SSLV23_PADDING
 2

	)

243 
	#RSA_NO_PADDING
 3

	)

244 
	#RSA_PKCS1_OAEP_PADDING
 4

	)

245 
	#RSA_X931_PADDING
 5

	)

247 
	#RSA_PKCS1_PADDING_SIZE
 11

	)

249 
	#RSA_£t_≠p_d©a
(
s
,
¨g
Ë
	`RSA_£t_ex_d©a
(s,0,¨g)

	)

250 
	#RSA_gë_≠p_d©a
(
s
Ë
	`RSA_gë_ex_d©a
(s,0)

	)

252 
RSA
 * 
RSA_√w
();

253 
RSA
 * 
RSA_√w_mëhod
(
ENGINE
 *
ígöe
);

254 
RSA_size
(c⁄° 
RSA
 *);

257 #i‚de‡
OPENSSL_NO_DEPRECATED


258 
RSA
 * 
RSA_gíî©e_key
(
bôs
, 
e
,

259 (*
ˇŒback
)(,,*),*
cb_¨g
);

263 
RSA_gíî©e_key_ex
(
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

264 
RSA_X931_dîive_ex
(
RSA
 *
rß
, 
BIGNUM
 *
p1
, BIGNUM *
p2
, BIGNUM *
q1
, BIGNUM *
q2
,

265 c⁄° 
BIGNUM
 *
Xp1
, c⁄° BIGNUM *
Xp2
, c⁄° BIGNUM *
Xp
,

266 c⁄° 
BIGNUM
 *
Xq1
, c⁄° BIGNUM *
Xq2
, c⁄° BIGNUM *
Xq
,

267 c⁄° 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

268 
RSA_X931_gíî©e_key_ex
(
RSA
 *
rß
, 
bôs
, c⁄° 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

270 
RSA_check_key
(c⁄° 
RSA
 *);

272 
RSA_public_í¸y±
(
Êí
, c⁄° *
‰om
,

273 *
to
, 
RSA
 *
rß
,
∑ddög
);

274 
RSA_¥iv©e_í¸y±
(
Êí
, c⁄° *
‰om
,

275 *
to
, 
RSA
 *
rß
,
∑ddög
);

276 
RSA_public_de¸y±
(
Êí
, c⁄° *
‰om
,

277 *
to
, 
RSA
 *
rß
,
∑ddög
);

278 
RSA_¥iv©e_de¸y±
(
Êí
, c⁄° *
‰om
,

279 *
to
, 
RSA
 *
rß
,
∑ddög
);

280 
RSA_‰ì
 (
RSA
 *
r
);

282 
RSA_up_ªf
(
RSA
 *
r
);

284 
RSA_Êags
(c⁄° 
RSA
 *
r
);

286 #ifde‡
OPENSSL_FIPS


287 
RSA
 *
FIPS_rß_√w
();

288 
FIPS_rß_‰ì
(
RSA
 *
r
);

291 
RSA_£t_deÁu…_mëhod
(c⁄° 
RSA_METHOD
 *
mëh
);

292 c⁄° 
RSA_METHOD
 *
RSA_gë_deÁu…_mëhod
();

293 c⁄° 
RSA_METHOD
 *
RSA_gë_mëhod
(c⁄° 
RSA
 *
rß
);

294 
RSA_£t_mëhod
(
RSA
 *
rß
, c⁄° 
RSA_METHOD
 *
mëh
);

297 
RSA_mem‹y_lock
(
RSA
 *
r
);

300 c⁄° 
RSA_METHOD
 *
RSA_PKCS1_SSLóy
();

302 c⁄° 
RSA_METHOD
 *
RSA_nuŒ_mëhod
();

304 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
RSA
, 
RSAPublicKey
)

305 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
RSA
, 
RSAPriv©eKey
)

307 #i‚de‡
OPENSSL_NO_FP_API


308 
RSA_¥öt_Â
(
FILE
 *
Â
, c⁄° 
RSA
 *
r
,
off£t
);

311 #i‚de‡
OPENSSL_NO_BIO


312 
RSA_¥öt
(
BIO
 *
bp
, c⁄° 
RSA
 *
r
,
off£t
);

315 #i‚de‡
OPENSSL_NO_RC4


316 
i2d_RSA_NET
(c⁄° 
RSA
 *
a
, **
µ
,

317 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
, 
vîify
),

318 
sgckey
);

319 
RSA
 *
d2i_RSA_NET
(RSA **
a
, c⁄° **
µ
, 
Àngth
,

320 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
, 
vîify
),

321 
sgckey
);

323 
i2d_Nësˇ≥_RSA
(c⁄° 
RSA
 *
a
, **
µ
,

324 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
,

325 
vîify
));

326 
RSA
 *
d2i_Nësˇ≥_RSA
(RSA **
a
, c⁄° **
µ
, 
Àngth
,

327 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
,

328 
vîify
));

333 
RSA_sign
(
ty≥
, c⁄° *
m
, 
m_Àngth
,

334 *
sigªt
, *
sigÀn
, 
RSA
 *
rß
);

335 
RSA_vîify
(
ty≥
, c⁄° *
m
, 
m_Àngth
,

336 *
sigbuf
, 
sigÀn
, 
RSA
 *
rß
);

340 
RSA_sign_ASN1_OCTET_STRING
(
ty≥
,

341 c⁄° *
m
, 
m_Àngth
,

342 *
sigªt
, *
sigÀn
, 
RSA
 *
rß
);

343 
RSA_vîify_ASN1_OCTET_STRING
(
ty≥
,

344 c⁄° *
m
, 
m_Àngth
,

345 *
sigbuf
, 
sigÀn
, 
RSA
 *
rß
);

347 
RSA_blödög_⁄
(
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

348 
RSA_blödög_off
(
RSA
 *
rß
);

349 
BN_BLINDING
 *
RSA_£tup_blödög
(
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

351 
RSA_∑ddög_add_PKCS1_ty≥_1
(*
to
,
éí
,

352 c⁄° *
f
,
Ê
);

353 
RSA_∑ddög_check_PKCS1_ty≥_1
(*
to
,
éí
,

354 c⁄° *
f
,
Ê
,
rß_Àn
);

355 
RSA_∑ddög_add_PKCS1_ty≥_2
(*
to
,
éí
,

356 c⁄° *
f
,
Ê
);

357 
RSA_∑ddög_check_PKCS1_ty≥_2
(*
to
,
éí
,

358 c⁄° *
f
,
Ê
,
rß_Àn
);

359 
PKCS1_MGF1
(*
mask
, 
Àn
,

360 c⁄° *
£ed
, 
£edÀn
, c⁄° 
EVP_MD
 *
dg°
);

361 
RSA_∑ddög_add_PKCS1_OAEP
(*
to
,
éí
,

362 c⁄° *
f
,
Ê
,

363 c⁄° *
p
,
∂
);

364 
RSA_∑ddög_check_PKCS1_OAEP
(*
to
,
éí
,

365 c⁄° *
f
,
Ê
,
rß_Àn
,

366 c⁄° *
p
,
∂
);

367 
RSA_∑ddög_add_SSLv23
(*
to
,
éí
,

368 c⁄° *
f
,
Ê
);

369 
RSA_∑ddög_check_SSLv23
(*
to
,
éí
,

370 c⁄° *
f
,
Ê
,
rß_Àn
);

371 
RSA_∑ddög_add_n⁄e
(*
to
,
éí
,

372 c⁄° *
f
,
Ê
);

373 
RSA_∑ddög_check_n⁄e
(*
to
,
éí
,

374 c⁄° *
f
,
Ê
,
rß_Àn
);

375 
RSA_∑ddög_add_X931
(*
to
,
éí
,

376 c⁄° *
f
,
Ê
);

377 
RSA_∑ddög_check_X931
(*
to
,
éí
,

378 c⁄° *
f
,
Ê
,
rß_Àn
);

379 
RSA_X931_hash_id
(
nid
);

381 
RSA_vîify_PKCS1_PSS
(
RSA
 *
rß
, c⁄° *
mHash
,

382 c⁄° 
EVP_MD
 *
Hash
, c⁄° *
EM
, 
sLí
);

383 
RSA_∑ddög_add_PKCS1_PSS
(
RSA
 *
rß
, *
EM
,

384 c⁄° *
mHash
,

385 c⁄° 
EVP_MD
 *
Hash
, 
sLí
);

387 
RSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

388 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

389 
RSA_£t_ex_d©a
(
RSA
 *
r
,
idx
,*
¨g
);

390 *
RSA_gë_ex_d©a
(c⁄° 
RSA
 *
r
, 
idx
);

392 
RSA
 *
RSAPublicKey_dup
(RSA *
rß
);

393 
RSA
 *
RSAPriv©eKey_dup
(RSA *
rß
);

399 
ERR_lﬂd_RSA_°rögs
();

404 
	#RSA_F_FIPS_RSA_SIGN
 140

	)

405 
	#RSA_F_FIPS_RSA_VERIFY
 141

	)

406 
	#RSA_F_MEMORY_LOCK
 100

	)

407 
	#RSA_F_RSA_BUILTIN_KEYGEN
 129

	)

408 
	#RSA_F_RSA_CHECK_KEY
 123

	)

409 
	#RSA_F_RSA_EAY_PRIVATE_DECRYPT
 101

	)

410 
	#RSA_F_RSA_EAY_PRIVATE_ENCRYPT
 102

	)

411 
	#RSA_F_RSA_EAY_PUBLIC_DECRYPT
 103

	)

412 
	#RSA_F_RSA_EAY_PUBLIC_ENCRYPT
 104

	)

413 
	#RSA_F_RSA_GENERATE_KEY
 105

	)

414 
	#RSA_F_RSA_MEMORY_LOCK
 130

	)

415 
	#RSA_F_RSA_NEW_METHOD
 106

	)

416 
	#RSA_F_RSA_NULL
 124

	)

417 
	#RSA_F_RSA_NULL_MOD_EXP
 131

	)

418 
	#RSA_F_RSA_NULL_PRIVATE_DECRYPT
 132

	)

419 
	#RSA_F_RSA_NULL_PRIVATE_ENCRYPT
 133

	)

420 
	#RSA_F_RSA_NULL_PUBLIC_DECRYPT
 134

	)

421 
	#RSA_F_RSA_NULL_PUBLIC_ENCRYPT
 135

	)

422 
	#RSA_F_RSA_PADDING_ADD_NONE
 107

	)

423 
	#RSA_F_RSA_PADDING_ADD_PKCS1_OAEP
 121

	)

424 
	#RSA_F_RSA_PADDING_ADD_PKCS1_PSS
 125

	)

425 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1
 108

	)

426 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2
 109

	)

427 
	#RSA_F_RSA_PADDING_ADD_SSLV23
 110

	)

428 
	#RSA_F_RSA_PADDING_ADD_X931
 127

	)

429 
	#RSA_F_RSA_PADDING_CHECK_NONE
 111

	)

430 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP
 122

	)

431 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1
 112

	)

432 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2
 113

	)

433 
	#RSA_F_RSA_PADDING_CHECK_SSLV23
 114

	)

434 
	#RSA_F_RSA_PADDING_CHECK_X931
 128

	)

435 
	#RSA_F_RSA_PRINT
 115

	)

436 
	#RSA_F_RSA_PRINT_FP
 116

	)

437 
	#RSA_F_RSA_PRIVATE_ENCRYPT
 137

	)

438 
	#RSA_F_RSA_PUBLIC_DECRYPT
 138

	)

439 
	#RSA_F_RSA_SETUP_BLINDING
 136

	)

440 
	#RSA_F_RSA_SET_DEFAULT_METHOD
 139

	)

441 
	#RSA_F_RSA_SET_METHOD
 142

	)

442 
	#RSA_F_RSA_SIGN
 117

	)

443 
	#RSA_F_RSA_SIGN_ASN1_OCTET_STRING
 118

	)

444 
	#RSA_F_RSA_VERIFY
 119

	)

445 
	#RSA_F_RSA_VERIFY_ASN1_OCTET_STRING
 120

	)

446 
	#RSA_F_RSA_VERIFY_PKCS1_PSS
 126

	)

449 
	#RSA_R_ALGORITHM_MISMATCH
 100

	)

450 
	#RSA_R_BAD_E_VALUE
 101

	)

451 
	#RSA_R_BAD_FIXED_HEADER_DECRYPT
 102

	)

452 
	#RSA_R_BAD_PAD_BYTE_COUNT
 103

	)

453 
	#RSA_R_BAD_SIGNATURE
 104

	)

454 
	#RSA_R_BLOCK_TYPE_IS_NOT_01
 106

	)

455 
	#RSA_R_BLOCK_TYPE_IS_NOT_02
 107

	)

456 
	#RSA_R_DATA_GREATER_THAN_MOD_LEN
 108

	)

457 
	#RSA_R_DATA_TOO_LARGE
 109

	)

458 
	#RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 110

	)

459 
	#RSA_R_DATA_TOO_LARGE_FOR_MODULUS
 132

	)

460 
	#RSA_R_DATA_TOO_SMALL
 111

	)

461 
	#RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE
 122

	)

462 
	#RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY
 112

	)

463 
	#RSA_R_DMP1_NOT_CONGRUENT_TO_D
 124

	)

464 
	#RSA_R_DMQ1_NOT_CONGRUENT_TO_D
 125

	)

465 
	#RSA_R_D_E_NOT_CONGRUENT_TO_1
 123

	)

466 
	#RSA_R_FIRST_OCTET_INVALID
 133

	)

467 
	#RSA_R_INVALID_HEADER
 137

	)

468 
	#RSA_R_INVALID_MESSAGE_LENGTH
 131

	)

469 
	#RSA_R_INVALID_PADDING
 138

	)

470 
	#RSA_R_INVALID_TRAILER
 139

	)

471 
	#RSA_R_IQMP_NOT_INVERSE_OF_Q
 126

	)

472 
	#RSA_R_KEY_SIZE_TOO_SMALL
 120

	)

473 
	#RSA_R_LAST_OCTET_INVALID
 134

	)

474 
	#RSA_R_MODULUS_TOO_LARGE
 105

	)

475 
	#RSA_R_NON_FIPS_METHOD
 141

	)

476 
	#RSA_R_NO_PUBLIC_EXPONENT
 140

	)

477 
	#RSA_R_NULL_BEFORE_BLOCK_MISSING
 113

	)

478 
	#RSA_R_N_DOES_NOT_EQUAL_P_Q
 127

	)

479 
	#RSA_R_OAEP_DECODING_ERROR
 121

	)

480 
	#RSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE
 142

	)

481 
	#RSA_R_PADDING_CHECK_FAILED
 114

	)

482 
	#RSA_R_P_NOT_PRIME
 128

	)

483 
	#RSA_R_Q_NOT_PRIME
 129

	)

484 
	#RSA_R_RSA_OPERATIONS_NOT_SUPPORTED
 130

	)

485 
	#RSA_R_SLEN_CHECK_FAILED
 136

	)

486 
	#RSA_R_SLEN_RECOVERY_FAILED
 135

	)

487 
	#RSA_R_SSLV3_ROLLBACK_ATTACK
 115

	)

488 
	#RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 116

	)

489 
	#RSA_R_UNKNOWN_ALGORITHM_TYPE
 117

	)

490 
	#RSA_R_UNKNOWN_PADDING_TYPE
 118

	)

491 
	#RSA_R_WRONG_SIGNATURE_LENGTH
 119

	)

493 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/safestack.h

55 #i‚de‡
HEADER_SAFESTACK_H


56 
	#HEADER_SAFESTACK_H


	)

58 
	~<›ís¶/°ack.h
>

60 #ifde‡
DEBUG_SAFESTACK


62 #i‚de‡
CHECKED_PTR_OF


63 
	#CHECKED_PTR_OF
(
ty≥
, 
p
) \

64 ((*Ë(1 ? 
p
 : (
ty≥
*)0))

	)

67 
	#CHECKED_SK_FREE_FUNC
(
ty≥
, 
p
) \

68 (((*)(*)Ë((1 ? 
p
 : ((*)(
ty≥
 *))0)))

	)

70 
	#CHECKED_SK_CMP_FUNC
(
ty≥
, 
p
) \

72 ((1 ? 
p
 : ((*)(c⁄° 
ty≥
 * c⁄° *, c⁄°Åy≥ * c⁄° *))0)))

	)

74 
	#STACK_OF
(
ty≥
Ë
°ack_°_
##
	)
type

75 
	#PREDECLARE_STACK_OF
(
ty≥
Ë
	`STACK_OF
—y≥);

	)

77 
	#DECLARE_STACK_OF
(
ty≥
) \

78 
	`STACK_OF
(
ty≥
) \

80 
STACK
 
°ack
; \

81 };

	)

83 
	#IMPLEMENT_STACK_OF
(
ty≥
Ë

	)

87 
	#SKM_sk_√w
(
ty≥
, 
cmp
) \

88 ((
	`STACK_OF
(
ty≥
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
—y≥, 
cmp
)))

	)

89 
	#SKM_sk_√w_nuŒ
(
ty≥
) \

90 ((
	`STACK_OF
(
ty≥
Ë*)
	`sk_√w_nuŒ
())

	)

91 
	#SKM_sk_‰ì
(
ty≥
, 
°
) \

92 
	`sk_‰ì
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
))

	)

93 
	#SKM_sk_num
(
ty≥
, 
°
) \

94 
	`sk_num
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
))

	)

95 
	#SKM_sk_vÆue
(
ty≥
, 
°
,
i
) \

96 ((
ty≥
 *)
	`sk_vÆue
(
	`CHECKED_PTR_OF
(
	`STACK_OF
—y≥), 
°
), 
i
))

	)

97 
	#SKM_sk_£t
(
ty≥
, 
°
,
i
,
vÆ
) \

98 
	`sk_£t
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), 
i
, CHECKED_PTR_OF—y≥, 
vÆ
))

	)

99 
	#SKM_sk_zîo
(
ty≥
, 
°
) \

100 
	`sk_zîo
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
))

	)

101 
	#SKM_sk_push
(
ty≥
, 
°
,
vÆ
) \

102 
	`sk_push
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), CHECKED_PTR_OF—y≥, 
vÆ
))

	)

103 
	#SKM_sk_unshi·
(
ty≥
, 
°
,
vÆ
) \

104 
	`sk_unshi·
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), CHECKED_PTR_OF—y≥, 
vÆ
))

	)

105 
	#SKM_sk_föd
(
ty≥
, 
°
,
vÆ
) \

106 
	`sk_föd
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), CHECKED_PTR_OF—y≥, 
vÆ
))

	)

107 
	#SKM_sk_dñëe
(
ty≥
, 
°
,
i
) \

108 (
ty≥
 *)
	`sk_dñëe
(
	`CHECKED_PTR_OF
(
	`STACK_OF
—y≥), 
°
), 
i
)

	)

109 
	#SKM_sk_dñëe_±r
(
ty≥
, 
°
,
±r
) \

110 (
ty≥
 *)
	`sk_dñëe_±r
(
	`CHECKED_PTR_OF
(
	`STACK_OF
—y≥), 
°
), CHECKED_PTR_OF—y≥, 
±r
))

	)

111 
	#SKM_sk_ö£π
(
ty≥
, 
°
,
vÆ
,
i
) \

112 
	`sk_ö£π
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), CHECKED_PTR_OF—y≥, 
vÆ
), 
i
)

	)

113 
	#SKM_sk_£t_cmp_func
(
ty≥
, 
°
,
cmp
) \

114 (((*)(c⁄° 
ty≥
 * const *,constÅype * const *)) \

115 
	`sk_£t_cmp_func
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), 
	`CHECKED_SK_CMP_FUNC
—y≥, 
cmp
)))

	)

116 
	#SKM_sk_dup
(
ty≥
, 
°
) \

117 (
	`STACK_OF
(
ty≥
Ë*)
	`sk_dup
(
	`CHECKED_PTR_OF
(STACK_OF—y≥), 
°
))

	)

118 
	#SKM_sk_p›_‰ì
(
ty≥
, 
°
,
‰ì_func
) \

119 
	`sk_p›_‰ì
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), 
	`CHECKED_SK_FREE_FUNC
—y≥, 
‰ì_func
))

	)

120 
	#SKM_sk_shi·
(
ty≥
, 
°
) \

121 (
ty≥
 *)
	`sk_shi·
(
	`CHECKED_PTR_OF
(
	`STACK_OF
—y≥), 
°
))

	)

122 
	#SKM_sk_p›
(
ty≥
, 
°
) \

123 (
ty≥
 *)
	`sk_p›
(
	`CHECKED_PTR_OF
(
	`STACK_OF
—y≥), 
°
))

	)

124 
	#SKM_sk_s‹t
(
ty≥
, 
°
) \

125 
	`sk_s‹t
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
))

	)

126 
	#SKM_sk_is_s‹ãd
(
ty≥
, 
°
) \

127 
	`sk_is_s‹ãd
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
))

	)

129 
	#SKM_ASN1_SET_OF_d2i
(
ty≥
, 
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

130 (
	`STACK_OF
(
ty≥
Ë*)
	`d2i_ASN1_SET
(
	`CHECKED_PTR_OF
(STACK_OF—y≥)*, 
°
), \

131 
µ
, 
Àngth
, \

132 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i_func
), \

133 
	`CHECKED_SK_FREE_FUNC
(
ty≥
, 
‰ì_func
), \

134 
ex_èg
, 
ex_˛ass
)

	)

136 
	#SKM_ASN1_SET_OF_i2d
(
ty≥
, 
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

137 
	`i2d_ASN1_SET
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), 
µ
, \

138 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_func
), \

139 
ex_èg
, 
ex_˛ass
, 
is_£t
)

	)

141 
	#SKM_ASN1_£q_∑ck
(
ty≥
, 
°
, 
i2d_func
, 
buf
, 
Àn
) \

142 
	`ASN1_£q_∑ck
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), \

143 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_func
), 
buf
, 
Àn
)

	)

145 
	#SKM_ASN1_£q_u≈ack
(
ty≥
, 
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

146 (
	`STACK_OF
(
ty≥
Ë*)
	`ASN1_£q_u≈ack
(
buf
, 
Àn
, 
	`CHECKED_D2I_OF
—y≥, 
d2i_func
), 
	`CHECKED_SK_FREE_FUNC
—y≥, 
‰ì_func
))

	)

148 
	#SKM_PKCS12_de¸y±_d2i
(
ty≥
, 
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

149 (
	`STACK_OF
(
ty≥
Ë*)
	`PKCS12_de¸y±_d2i
(
Æg‹
, \

150 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i_func
), \

151 
	`CHECKED_SK_FREE_FUNC
(
ty≥
, 
‰ì_func
), \

152 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
)

	)

156 
	#STACK_OF
(
ty≥
Ë
STACK


	)

157 
	#PREDECLARE_STACK_OF
(
ty≥
Ë

	)

158 
	#DECLARE_STACK_OF
(
ty≥
Ë

	)

159 
	#IMPLEMENT_STACK_OF
(
ty≥
Ë

	)

161 
	#SKM_sk_√w
(
ty≥
, 
cmp
) \

162 
	`sk_√w
(((*)(c⁄° * c⁄° *, c⁄° * c⁄° *))(
cmp
))

	)

163 
	#SKM_sk_√w_nuŒ
(
ty≥
) \

164 
	`sk_√w_nuŒ
()

	)

165 
	#SKM_sk_‰ì
(
ty≥
, 
°
) \

166 
	`sk_‰ì
(
°
)

	)

167 
	#SKM_sk_num
(
ty≥
, 
°
) \

168 
	`sk_num
(
°
)

	)

169 
	#SKM_sk_vÆue
(
ty≥
, 
°
,
i
) \

170 ((
ty≥
 *)
	`sk_vÆue
(
°
, 
i
))

	)

171 
	#SKM_sk_£t
(
ty≥
, 
°
,
i
,
vÆ
) \

172 ((
ty≥
 *)
	`sk_£t
(
°
, 
i
,(*)
vÆ
))

	)

173 
	#SKM_sk_zîo
(
ty≥
, 
°
) \

174 
	`sk_zîo
(
°
)

	)

175 
	#SKM_sk_push
(
ty≥
, 
°
,
vÆ
) \

176 
	`sk_push
(
°
, (*)
vÆ
)

	)

177 
	#SKM_sk_unshi·
(
ty≥
, 
°
,
vÆ
) \

178 
	`sk_unshi·
(
°
, (*)
vÆ
)

	)

179 
	#SKM_sk_föd
(
ty≥
, 
°
,
vÆ
) \

180 
	`sk_föd
(
°
, (*)
vÆ
)

	)

181 
	#SKM_sk_dñëe
(
ty≥
, 
°
,
i
) \

182 ((
ty≥
 *)
	`sk_dñëe
(
°
, 
i
))

	)

183 
	#SKM_sk_dñëe_±r
(
ty≥
, 
°
,
±r
) \

184 ((
ty≥
 *)
	`sk_dñëe_±r
(
°
,(*)
±r
))

	)

185 
	#SKM_sk_ö£π
(
ty≥
, 
°
,
vÆ
,
i
) \

186 
	`sk_ö£π
(
°
, (*)
vÆ
, 
i
)

	)

187 
	#SKM_sk_£t_cmp_func
(
ty≥
, 
°
,
cmp
) \

188 (((*)(c⁄° 
ty≥
 * const *,constÅype * const *)) \

189 
	`sk_£t_cmp_func
(
°
, ((*)(c⁄° * c⁄° *, c⁄° * c⁄° *))(
cmp
)))

	)

190 
	#SKM_sk_dup
(
ty≥
, 
°
) \

191 
	`sk_dup
(
°
)

	)

192 
	#SKM_sk_p›_‰ì
(
ty≥
, 
°
,
‰ì_func
) \

193 
	`sk_p›_‰ì
(
°
, ((*)(*))
‰ì_func
)

	)

194 
	#SKM_sk_shi·
(
ty≥
, 
°
) \

195 ((
ty≥
 *)
	`sk_shi·
(
°
))

	)

196 
	#SKM_sk_p›
(
ty≥
, 
°
) \

197 ((
ty≥
 *)
	`sk_p›
(
°
))

	)

198 
	#SKM_sk_s‹t
(
ty≥
, 
°
) \

199 
	`sk_s‹t
(
°
)

	)

200 
	#SKM_sk_is_s‹ãd
(
ty≥
, 
°
) \

201 
	`sk_is_s‹ãd
(
°
)

	)

203 
	#SKM_ASN1_SET_OF_d2i
(
ty≥
, 
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

204 
	`d2i_ASN1_SET
(
°
,
µ
,
Àngth
, (*(*)(** ,c⁄° ** ,))
d2i_func
, ((*)(*))
‰ì_func
, 
ex_èg
,
ex_˛ass
)

	)

205 
	#SKM_ASN1_SET_OF_i2d
(
ty≥
, 
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

206 
	`i2d_ASN1_SET
(
°
,
µ
,((*)(*, **))
i2d_func
,
ex_èg
,
ex_˛ass
,
is_£t
)

	)

208 
	#SKM_ASN1_£q_∑ck
(
ty≥
, 
°
, 
i2d_func
, 
buf
, 
Àn
) \

209 
	`ASN1_£q_∑ck
(
°
, ((*)(*, **))
i2d_func
, 
buf
, 
Àn
)

	)

210 
	#SKM_ASN1_£q_u≈ack
(
ty≥
, 
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

211 
	`ASN1_£q_u≈ack
(
buf
,
Àn
,(*(*)(**,c⁄° **,))
d2i_func
, ((*)(*))
‰ì_func
)

	)

213 
	#SKM_PKCS12_de¸y±_d2i
(
ty≥
, 
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

214 ((
STACK
 *)
	`PKCS12_de¸y±_d2i
(
Æg‹
,(*(*)())
d2i_func
, ((*)(*))
‰ì_func
,
∑ss
,
∑s¶í
,
o˘
,
£q
))

	)

219 
	#sk_ACCESS_DESCRIPTION_√w
(
°
Ë
	`SKM_sk_√w
(
ACCESS_DESCRIPTION
, (°))

	)

220 
	#sk_ACCESS_DESCRIPTION_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ACCESS_DESCRIPTION
)

	)

221 
	#sk_ACCESS_DESCRIPTION_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ACCESS_DESCRIPTION
, (°))

	)

222 
	#sk_ACCESS_DESCRIPTION_num
(
°
Ë
	`SKM_sk_num
(
ACCESS_DESCRIPTION
, (°))

	)

223 
	#sk_ACCESS_DESCRIPTION_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ACCESS_DESCRIPTION
, (°), (i))

	)

224 
	#sk_ACCESS_DESCRIPTION_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ACCESS_DESCRIPTION
, (°), (i), (vÆ))

	)

225 
	#sk_ACCESS_DESCRIPTION_zîo
(
°
Ë
	`SKM_sk_zîo
(
ACCESS_DESCRIPTION
, (°))

	)

226 
	#sk_ACCESS_DESCRIPTION_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

227 
	#sk_ACCESS_DESCRIPTION_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

228 
	#sk_ACCESS_DESCRIPTION_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

229 
	#sk_ACCESS_DESCRIPTION_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

230 
	#sk_ACCESS_DESCRIPTION_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ACCESS_DESCRIPTION
, (°), (i))

	)

231 
	#sk_ACCESS_DESCRIPTION_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ACCESS_DESCRIPTION
, (°), (±r))

	)

232 
	#sk_ACCESS_DESCRIPTION_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ACCESS_DESCRIPTION
, (°), (vÆ), (i))

	)

233 
	#sk_ACCESS_DESCRIPTION_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ACCESS_DESCRIPTION
, (°), (cmp))

	)

234 
	#sk_ACCESS_DESCRIPTION_dup
(
°
Ë
	`SKM_sk_dup
(
ACCESS_DESCRIPTION
, st)

	)

235 
	#sk_ACCESS_DESCRIPTION_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ACCESS_DESCRIPTION
, (°), (‰ì_func))

	)

236 
	#sk_ACCESS_DESCRIPTION_shi·
(
°
Ë
	`SKM_sk_shi·
(
ACCESS_DESCRIPTION
, (°))

	)

237 
	#sk_ACCESS_DESCRIPTION_p›
(
°
Ë
	`SKM_sk_p›
(
ACCESS_DESCRIPTION
, (°))

	)

238 
	#sk_ACCESS_DESCRIPTION_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ACCESS_DESCRIPTION
, (°))

	)

239 
	#sk_ACCESS_DESCRIPTION_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ACCESS_DESCRIPTION
, (°))

	)

241 
	#sk_ASIdOrR™ge_√w
(
°
Ë
	`SKM_sk_√w
(
ASIdOrR™ge
, (°))

	)

242 
	#sk_ASIdOrR™ge_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASIdOrR™ge
)

	)

243 
	#sk_ASIdOrR™ge_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASIdOrR™ge
, (°))

	)

244 
	#sk_ASIdOrR™ge_num
(
°
Ë
	`SKM_sk_num
(
ASIdOrR™ge
, (°))

	)

245 
	#sk_ASIdOrR™ge_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASIdOrR™ge
, (°), (i))

	)

246 
	#sk_ASIdOrR™ge_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASIdOrR™ge
, (°), (i), (vÆ))

	)

247 
	#sk_ASIdOrR™ge_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASIdOrR™ge
, (°))

	)

248 
	#sk_ASIdOrR™ge_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASIdOrR™ge
, (°), (vÆ))

	)

249 
	#sk_ASIdOrR™ge_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASIdOrR™ge
, (°), (vÆ))

	)

250 
	#sk_ASIdOrR™ge_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASIdOrR™ge
, (°), (vÆ))

	)

251 
	#sk_ASIdOrR™ge_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASIdOrR™ge
, (°), (vÆ))

	)

252 
	#sk_ASIdOrR™ge_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASIdOrR™ge
, (°), (i))

	)

253 
	#sk_ASIdOrR™ge_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASIdOrR™ge
, (°), (±r))

	)

254 
	#sk_ASIdOrR™ge_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASIdOrR™ge
, (°), (vÆ), (i))

	)

255 
	#sk_ASIdOrR™ge_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASIdOrR™ge
, (°), (cmp))

	)

256 
	#sk_ASIdOrR™ge_dup
(
°
Ë
	`SKM_sk_dup
(
ASIdOrR™ge
, st)

	)

257 
	#sk_ASIdOrR™ge_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASIdOrR™ge
, (°), (‰ì_func))

	)

258 
	#sk_ASIdOrR™ge_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASIdOrR™ge
, (°))

	)

259 
	#sk_ASIdOrR™ge_p›
(
°
Ë
	`SKM_sk_p›
(
ASIdOrR™ge
, (°))

	)

260 
	#sk_ASIdOrR™ge_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASIdOrR™ge
, (°))

	)

261 
	#sk_ASIdOrR™ge_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASIdOrR™ge
, (°))

	)

263 
	#sk_ASN1_GENERALSTRING_√w
(
°
Ë
	`SKM_sk_√w
(
ASN1_GENERALSTRING
, (°))

	)

264 
	#sk_ASN1_GENERALSTRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_GENERALSTRING
)

	)

265 
	#sk_ASN1_GENERALSTRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_GENERALSTRING
, (°))

	)

266 
	#sk_ASN1_GENERALSTRING_num
(
°
Ë
	`SKM_sk_num
(
ASN1_GENERALSTRING
, (°))

	)

267 
	#sk_ASN1_GENERALSTRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_GENERALSTRING
, (°), (i))

	)

268 
	#sk_ASN1_GENERALSTRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_GENERALSTRING
, (°), (i), (vÆ))

	)

269 
	#sk_ASN1_GENERALSTRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_GENERALSTRING
, (°))

	)

270 
	#sk_ASN1_GENERALSTRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

271 
	#sk_ASN1_GENERALSTRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

272 
	#sk_ASN1_GENERALSTRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

273 
	#sk_ASN1_GENERALSTRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

274 
	#sk_ASN1_GENERALSTRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_GENERALSTRING
, (°), (i))

	)

275 
	#sk_ASN1_GENERALSTRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_GENERALSTRING
, (°), (±r))

	)

276 
	#sk_ASN1_GENERALSTRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_GENERALSTRING
, (°), (vÆ), (i))

	)

277 
	#sk_ASN1_GENERALSTRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_GENERALSTRING
, (°), (cmp))

	)

278 
	#sk_ASN1_GENERALSTRING_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_GENERALSTRING
, st)

	)

279 
	#sk_ASN1_GENERALSTRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_GENERALSTRING
, (°), (‰ì_func))

	)

280 
	#sk_ASN1_GENERALSTRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_GENERALSTRING
, (°))

	)

281 
	#sk_ASN1_GENERALSTRING_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_GENERALSTRING
, (°))

	)

282 
	#sk_ASN1_GENERALSTRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_GENERALSTRING
, (°))

	)

283 
	#sk_ASN1_GENERALSTRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_GENERALSTRING
, (°))

	)

285 
	#sk_ASN1_INTEGER_√w
(
°
Ë
	`SKM_sk_√w
(
ASN1_INTEGER
, (°))

	)

286 
	#sk_ASN1_INTEGER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_INTEGER
)

	)

287 
	#sk_ASN1_INTEGER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_INTEGER
, (°))

	)

288 
	#sk_ASN1_INTEGER_num
(
°
Ë
	`SKM_sk_num
(
ASN1_INTEGER
, (°))

	)

289 
	#sk_ASN1_INTEGER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_INTEGER
, (°), (i))

	)

290 
	#sk_ASN1_INTEGER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_INTEGER
, (°), (i), (vÆ))

	)

291 
	#sk_ASN1_INTEGER_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_INTEGER
, (°))

	)

292 
	#sk_ASN1_INTEGER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_INTEGER
, (°), (vÆ))

	)

293 
	#sk_ASN1_INTEGER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_INTEGER
, (°), (vÆ))

	)

294 
	#sk_ASN1_INTEGER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_INTEGER
, (°), (vÆ))

	)

295 
	#sk_ASN1_INTEGER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_INTEGER
, (°), (vÆ))

	)

296 
	#sk_ASN1_INTEGER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_INTEGER
, (°), (i))

	)

297 
	#sk_ASN1_INTEGER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_INTEGER
, (°), (±r))

	)

298 
	#sk_ASN1_INTEGER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_INTEGER
, (°), (vÆ), (i))

	)

299 
	#sk_ASN1_INTEGER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_INTEGER
, (°), (cmp))

	)

300 
	#sk_ASN1_INTEGER_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_INTEGER
, st)

	)

301 
	#sk_ASN1_INTEGER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_INTEGER
, (°), (‰ì_func))

	)

302 
	#sk_ASN1_INTEGER_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_INTEGER
, (°))

	)

303 
	#sk_ASN1_INTEGER_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_INTEGER
, (°))

	)

304 
	#sk_ASN1_INTEGER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_INTEGER
, (°))

	)

305 
	#sk_ASN1_INTEGER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_INTEGER
, (°))

	)

307 
	#sk_ASN1_OBJECT_√w
(
°
Ë
	`SKM_sk_√w
(
ASN1_OBJECT
, (°))

	)

308 
	#sk_ASN1_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_OBJECT
)

	)

309 
	#sk_ASN1_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_OBJECT
, (°))

	)

310 
	#sk_ASN1_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
ASN1_OBJECT
, (°))

	)

311 
	#sk_ASN1_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_OBJECT
, (°), (i))

	)

312 
	#sk_ASN1_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_OBJECT
, (°), (i), (vÆ))

	)

313 
	#sk_ASN1_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_OBJECT
, (°))

	)

314 
	#sk_ASN1_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_OBJECT
, (°), (vÆ))

	)

315 
	#sk_ASN1_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_OBJECT
, (°), (vÆ))

	)

316 
	#sk_ASN1_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_OBJECT
, (°), (vÆ))

	)

317 
	#sk_ASN1_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_OBJECT
, (°), (vÆ))

	)

318 
	#sk_ASN1_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_OBJECT
, (°), (i))

	)

319 
	#sk_ASN1_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_OBJECT
, (°), (±r))

	)

320 
	#sk_ASN1_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_OBJECT
, (°), (vÆ), (i))

	)

321 
	#sk_ASN1_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_OBJECT
, (°), (cmp))

	)

322 
	#sk_ASN1_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_OBJECT
, st)

	)

323 
	#sk_ASN1_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_OBJECT
, (°), (‰ì_func))

	)

324 
	#sk_ASN1_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_OBJECT
, (°))

	)

325 
	#sk_ASN1_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_OBJECT
, (°))

	)

326 
	#sk_ASN1_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_OBJECT
, (°))

	)

327 
	#sk_ASN1_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_OBJECT
, (°))

	)

329 
	#sk_ASN1_STRING_TABLE_√w
(
°
Ë
	`SKM_sk_√w
(
ASN1_STRING_TABLE
, (°))

	)

330 
	#sk_ASN1_STRING_TABLE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_STRING_TABLE
)

	)

331 
	#sk_ASN1_STRING_TABLE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_STRING_TABLE
, (°))

	)

332 
	#sk_ASN1_STRING_TABLE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_STRING_TABLE
, (°))

	)

333 
	#sk_ASN1_STRING_TABLE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_STRING_TABLE
, (°), (i))

	)

334 
	#sk_ASN1_STRING_TABLE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_STRING_TABLE
, (°), (i), (vÆ))

	)

335 
	#sk_ASN1_STRING_TABLE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_STRING_TABLE
, (°))

	)

336 
	#sk_ASN1_STRING_TABLE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

337 
	#sk_ASN1_STRING_TABLE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

338 
	#sk_ASN1_STRING_TABLE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

339 
	#sk_ASN1_STRING_TABLE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

340 
	#sk_ASN1_STRING_TABLE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_STRING_TABLE
, (°), (i))

	)

341 
	#sk_ASN1_STRING_TABLE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_STRING_TABLE
, (°), (±r))

	)

342 
	#sk_ASN1_STRING_TABLE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_STRING_TABLE
, (°), (vÆ), (i))

	)

343 
	#sk_ASN1_STRING_TABLE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_STRING_TABLE
, (°), (cmp))

	)

344 
	#sk_ASN1_STRING_TABLE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_STRING_TABLE
, st)

	)

345 
	#sk_ASN1_STRING_TABLE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_STRING_TABLE
, (°), (‰ì_func))

	)

346 
	#sk_ASN1_STRING_TABLE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_STRING_TABLE
, (°))

	)

347 
	#sk_ASN1_STRING_TABLE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_STRING_TABLE
, (°))

	)

348 
	#sk_ASN1_STRING_TABLE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_STRING_TABLE
, (°))

	)

349 
	#sk_ASN1_STRING_TABLE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_STRING_TABLE
, (°))

	)

351 
	#sk_ASN1_TYPE_√w
(
°
Ë
	`SKM_sk_√w
(
ASN1_TYPE
, (°))

	)

352 
	#sk_ASN1_TYPE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_TYPE
)

	)

353 
	#sk_ASN1_TYPE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_TYPE
, (°))

	)

354 
	#sk_ASN1_TYPE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_TYPE
, (°))

	)

355 
	#sk_ASN1_TYPE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_TYPE
, (°), (i))

	)

356 
	#sk_ASN1_TYPE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_TYPE
, (°), (i), (vÆ))

	)

357 
	#sk_ASN1_TYPE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_TYPE
, (°))

	)

358 
	#sk_ASN1_TYPE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_TYPE
, (°), (vÆ))

	)

359 
	#sk_ASN1_TYPE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_TYPE
, (°), (vÆ))

	)

360 
	#sk_ASN1_TYPE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_TYPE
, (°), (vÆ))

	)

361 
	#sk_ASN1_TYPE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_TYPE
, (°), (vÆ))

	)

362 
	#sk_ASN1_TYPE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_TYPE
, (°), (i))

	)

363 
	#sk_ASN1_TYPE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_TYPE
, (°), (±r))

	)

364 
	#sk_ASN1_TYPE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_TYPE
, (°), (vÆ), (i))

	)

365 
	#sk_ASN1_TYPE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_TYPE
, (°), (cmp))

	)

366 
	#sk_ASN1_TYPE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_TYPE
, st)

	)

367 
	#sk_ASN1_TYPE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_TYPE
, (°), (‰ì_func))

	)

368 
	#sk_ASN1_TYPE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_TYPE
, (°))

	)

369 
	#sk_ASN1_TYPE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_TYPE
, (°))

	)

370 
	#sk_ASN1_TYPE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_TYPE
, (°))

	)

371 
	#sk_ASN1_TYPE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_TYPE
, (°))

	)

373 
	#sk_ASN1_VALUE_√w
(
°
Ë
	`SKM_sk_√w
(
ASN1_VALUE
, (°))

	)

374 
	#sk_ASN1_VALUE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_VALUE
)

	)

375 
	#sk_ASN1_VALUE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_VALUE
, (°))

	)

376 
	#sk_ASN1_VALUE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_VALUE
, (°))

	)

377 
	#sk_ASN1_VALUE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_VALUE
, (°), (i))

	)

378 
	#sk_ASN1_VALUE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_VALUE
, (°), (i), (vÆ))

	)

379 
	#sk_ASN1_VALUE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_VALUE
, (°))

	)

380 
	#sk_ASN1_VALUE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_VALUE
, (°), (vÆ))

	)

381 
	#sk_ASN1_VALUE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_VALUE
, (°), (vÆ))

	)

382 
	#sk_ASN1_VALUE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_VALUE
, (°), (vÆ))

	)

383 
	#sk_ASN1_VALUE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_VALUE
, (°), (vÆ))

	)

384 
	#sk_ASN1_VALUE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_VALUE
, (°), (i))

	)

385 
	#sk_ASN1_VALUE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_VALUE
, (°), (±r))

	)

386 
	#sk_ASN1_VALUE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_VALUE
, (°), (vÆ), (i))

	)

387 
	#sk_ASN1_VALUE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_VALUE
, (°), (cmp))

	)

388 
	#sk_ASN1_VALUE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_VALUE
, st)

	)

389 
	#sk_ASN1_VALUE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_VALUE
, (°), (‰ì_func))

	)

390 
	#sk_ASN1_VALUE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_VALUE
, (°))

	)

391 
	#sk_ASN1_VALUE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_VALUE
, (°))

	)

392 
	#sk_ASN1_VALUE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_VALUE
, (°))

	)

393 
	#sk_ASN1_VALUE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_VALUE
, (°))

	)

395 
	#sk_BIO_√w
(
°
Ë
	`SKM_sk_√w
(
BIO
, (°))

	)

396 
	#sk_BIO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BIO
)

	)

397 
	#sk_BIO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BIO
, (°))

	)

398 
	#sk_BIO_num
(
°
Ë
	`SKM_sk_num
(
BIO
, (°))

	)

399 
	#sk_BIO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BIO
, (°), (i))

	)

400 
	#sk_BIO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BIO
, (°), (i), (vÆ))

	)

401 
	#sk_BIO_zîo
(
°
Ë
	`SKM_sk_zîo
(
BIO
, (°))

	)

402 
	#sk_BIO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BIO
, (°), (vÆ))

	)

403 
	#sk_BIO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BIO
, (°), (vÆ))

	)

404 
	#sk_BIO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BIO
, (°), (vÆ))

	)

405 
	#sk_BIO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BIO
, (°), (vÆ))

	)

406 
	#sk_BIO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BIO
, (°), (i))

	)

407 
	#sk_BIO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BIO
, (°), (±r))

	)

408 
	#sk_BIO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BIO
, (°), (vÆ), (i))

	)

409 
	#sk_BIO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BIO
, (°), (cmp))

	)

410 
	#sk_BIO_dup
(
°
Ë
	`SKM_sk_dup
(
BIO
, st)

	)

411 
	#sk_BIO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BIO
, (°), (‰ì_func))

	)

412 
	#sk_BIO_shi·
(
°
Ë
	`SKM_sk_shi·
(
BIO
, (°))

	)

413 
	#sk_BIO_p›
(
°
Ë
	`SKM_sk_p›
(
BIO
, (°))

	)

414 
	#sk_BIO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BIO
, (°))

	)

415 
	#sk_BIO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BIO
, (°))

	)

417 
	#sk_CMS_CîtifiˇãChoi˚s_√w
(
°
Ë
	`SKM_sk_√w
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

418 
	#sk_CMS_CîtifiˇãChoi˚s_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_CîtifiˇãChoi˚s
)

	)

419 
	#sk_CMS_CîtifiˇãChoi˚s_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

420 
	#sk_CMS_CîtifiˇãChoi˚s_num
(
°
Ë
	`SKM_sk_num
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

421 
	#sk_CMS_CîtifiˇãChoi˚s_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_CîtifiˇãChoi˚s
, (°), (i))

	)

422 
	#sk_CMS_CîtifiˇãChoi˚s_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_CîtifiˇãChoi˚s
, (°), (i), (vÆ))

	)

423 
	#sk_CMS_CîtifiˇãChoi˚s_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

424 
	#sk_CMS_CîtifiˇãChoi˚s_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

425 
	#sk_CMS_CîtifiˇãChoi˚s_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

426 
	#sk_CMS_CîtifiˇãChoi˚s_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

427 
	#sk_CMS_CîtifiˇãChoi˚s_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

428 
	#sk_CMS_CîtifiˇãChoi˚s_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_CîtifiˇãChoi˚s
, (°), (i))

	)

429 
	#sk_CMS_CîtifiˇãChoi˚s_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_CîtifiˇãChoi˚s
, (°), (±r))

	)

430 
	#sk_CMS_CîtifiˇãChoi˚s_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ), (i))

	)

431 
	#sk_CMS_CîtifiˇãChoi˚s_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_CîtifiˇãChoi˚s
, (°), (cmp))

	)

432 
	#sk_CMS_CîtifiˇãChoi˚s_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_CîtifiˇãChoi˚s
, st)

	)

433 
	#sk_CMS_CîtifiˇãChoi˚s_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_CîtifiˇãChoi˚s
, (°), (‰ì_func))

	)

434 
	#sk_CMS_CîtifiˇãChoi˚s_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

435 
	#sk_CMS_CîtifiˇãChoi˚s_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

436 
	#sk_CMS_CîtifiˇãChoi˚s_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

437 
	#sk_CMS_CîtifiˇãChoi˚s_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

439 
	#sk_CMS_Recùõ¡Info_√w
(
°
Ë
	`SKM_sk_√w
(
CMS_Recùõ¡Info
, (°))

	)

440 
	#sk_CMS_Recùõ¡Info_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Recùõ¡Info
)

	)

441 
	#sk_CMS_Recùõ¡Info_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Recùõ¡Info
, (°))

	)

442 
	#sk_CMS_Recùõ¡Info_num
(
°
Ë
	`SKM_sk_num
(
CMS_Recùõ¡Info
, (°))

	)

443 
	#sk_CMS_Recùõ¡Info_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Recùõ¡Info
, (°), (i))

	)

444 
	#sk_CMS_Recùõ¡Info_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Recùõ¡Info
, (°), (i), (vÆ))

	)

445 
	#sk_CMS_Recùõ¡Info_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Recùõ¡Info
, (°))

	)

446 
	#sk_CMS_Recùõ¡Info_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

447 
	#sk_CMS_Recùõ¡Info_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

448 
	#sk_CMS_Recùõ¡Info_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

449 
	#sk_CMS_Recùõ¡Info_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

450 
	#sk_CMS_Recùõ¡Info_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Recùõ¡Info
, (°), (i))

	)

451 
	#sk_CMS_Recùõ¡Info_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Recùõ¡Info
, (°), (±r))

	)

452 
	#sk_CMS_Recùõ¡Info_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Recùõ¡Info
, (°), (vÆ), (i))

	)

453 
	#sk_CMS_Recùõ¡Info_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Recùõ¡Info
, (°), (cmp))

	)

454 
	#sk_CMS_Recùõ¡Info_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Recùõ¡Info
, st)

	)

455 
	#sk_CMS_Recùõ¡Info_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Recùõ¡Info
, (°), (‰ì_func))

	)

456 
	#sk_CMS_Recùõ¡Info_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Recùõ¡Info
, (°))

	)

457 
	#sk_CMS_Recùõ¡Info_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Recùõ¡Info
, (°))

	)

458 
	#sk_CMS_Recùõ¡Info_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Recùõ¡Info
, (°))

	)

459 
	#sk_CMS_Recùõ¡Info_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Recùõ¡Info
, (°))

	)

461 
	#sk_CMS_Revoˇti⁄InfoChoi˚_√w
(
°
Ë
	`SKM_sk_√w
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

462 
	#sk_CMS_Revoˇti⁄InfoChoi˚_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Revoˇti⁄InfoChoi˚
)

	)

463 
	#sk_CMS_Revoˇti⁄InfoChoi˚_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

464 
	#sk_CMS_Revoˇti⁄InfoChoi˚_num
(
°
Ë
	`SKM_sk_num
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

465 
	#sk_CMS_Revoˇti⁄InfoChoi˚_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i))

	)

466 
	#sk_CMS_Revoˇti⁄InfoChoi˚_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i), (vÆ))

	)

467 
	#sk_CMS_Revoˇti⁄InfoChoi˚_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

468 
	#sk_CMS_Revoˇti⁄InfoChoi˚_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

469 
	#sk_CMS_Revoˇti⁄InfoChoi˚_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

470 
	#sk_CMS_Revoˇti⁄InfoChoi˚_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

471 
	#sk_CMS_Revoˇti⁄InfoChoi˚_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

472 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i))

	)

473 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (±r))

	)

474 
	#sk_CMS_Revoˇti⁄InfoChoi˚_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ), (i))

	)

475 
	#sk_CMS_Revoˇti⁄InfoChoi˚_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (cmp))

	)

476 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Revoˇti⁄InfoChoi˚
, st)

	)

477 
	#sk_CMS_Revoˇti⁄InfoChoi˚_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (‰ì_func))

	)

478 
	#sk_CMS_Revoˇti⁄InfoChoi˚_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

479 
	#sk_CMS_Revoˇti⁄InfoChoi˚_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

480 
	#sk_CMS_Revoˇti⁄InfoChoi˚_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

481 
	#sk_CMS_Revoˇti⁄InfoChoi˚_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

483 
	#sk_CMS_Sig√rInfo_√w
(
°
Ë
	`SKM_sk_√w
(
CMS_Sig√rInfo
, (°))

	)

484 
	#sk_CMS_Sig√rInfo_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Sig√rInfo
)

	)

485 
	#sk_CMS_Sig√rInfo_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Sig√rInfo
, (°))

	)

486 
	#sk_CMS_Sig√rInfo_num
(
°
Ë
	`SKM_sk_num
(
CMS_Sig√rInfo
, (°))

	)

487 
	#sk_CMS_Sig√rInfo_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Sig√rInfo
, (°), (i))

	)

488 
	#sk_CMS_Sig√rInfo_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Sig√rInfo
, (°), (i), (vÆ))

	)

489 
	#sk_CMS_Sig√rInfo_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Sig√rInfo
, (°))

	)

490 
	#sk_CMS_Sig√rInfo_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

491 
	#sk_CMS_Sig√rInfo_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

492 
	#sk_CMS_Sig√rInfo_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

493 
	#sk_CMS_Sig√rInfo_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

494 
	#sk_CMS_Sig√rInfo_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Sig√rInfo
, (°), (i))

	)

495 
	#sk_CMS_Sig√rInfo_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Sig√rInfo
, (°), (±r))

	)

496 
	#sk_CMS_Sig√rInfo_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Sig√rInfo
, (°), (vÆ), (i))

	)

497 
	#sk_CMS_Sig√rInfo_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Sig√rInfo
, (°), (cmp))

	)

498 
	#sk_CMS_Sig√rInfo_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Sig√rInfo
, st)

	)

499 
	#sk_CMS_Sig√rInfo_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Sig√rInfo
, (°), (‰ì_func))

	)

500 
	#sk_CMS_Sig√rInfo_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Sig√rInfo
, (°))

	)

501 
	#sk_CMS_Sig√rInfo_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Sig√rInfo
, (°))

	)

502 
	#sk_CMS_Sig√rInfo_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Sig√rInfo
, (°))

	)

503 
	#sk_CMS_Sig√rInfo_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Sig√rInfo
, (°))

	)

505 
	#sk_CONF_IMODULE_√w
(
°
Ë
	`SKM_sk_√w
(
CONF_IMODULE
, (°))

	)

506 
	#sk_CONF_IMODULE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_IMODULE
)

	)

507 
	#sk_CONF_IMODULE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_IMODULE
, (°))

	)

508 
	#sk_CONF_IMODULE_num
(
°
Ë
	`SKM_sk_num
(
CONF_IMODULE
, (°))

	)

509 
	#sk_CONF_IMODULE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_IMODULE
, (°), (i))

	)

510 
	#sk_CONF_IMODULE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_IMODULE
, (°), (i), (vÆ))

	)

511 
	#sk_CONF_IMODULE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_IMODULE
, (°))

	)

512 
	#sk_CONF_IMODULE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_IMODULE
, (°), (vÆ))

	)

513 
	#sk_CONF_IMODULE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_IMODULE
, (°), (vÆ))

	)

514 
	#sk_CONF_IMODULE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_IMODULE
, (°), (vÆ))

	)

515 
	#sk_CONF_IMODULE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_IMODULE
, (°), (vÆ))

	)

516 
	#sk_CONF_IMODULE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_IMODULE
, (°), (i))

	)

517 
	#sk_CONF_IMODULE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_IMODULE
, (°), (±r))

	)

518 
	#sk_CONF_IMODULE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_IMODULE
, (°), (vÆ), (i))

	)

519 
	#sk_CONF_IMODULE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_IMODULE
, (°), (cmp))

	)

520 
	#sk_CONF_IMODULE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_IMODULE
, st)

	)

521 
	#sk_CONF_IMODULE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_IMODULE
, (°), (‰ì_func))

	)

522 
	#sk_CONF_IMODULE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_IMODULE
, (°))

	)

523 
	#sk_CONF_IMODULE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_IMODULE
, (°))

	)

524 
	#sk_CONF_IMODULE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_IMODULE
, (°))

	)

525 
	#sk_CONF_IMODULE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_IMODULE
, (°))

	)

527 
	#sk_CONF_MODULE_√w
(
°
Ë
	`SKM_sk_√w
(
CONF_MODULE
, (°))

	)

528 
	#sk_CONF_MODULE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_MODULE
)

	)

529 
	#sk_CONF_MODULE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_MODULE
, (°))

	)

530 
	#sk_CONF_MODULE_num
(
°
Ë
	`SKM_sk_num
(
CONF_MODULE
, (°))

	)

531 
	#sk_CONF_MODULE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_MODULE
, (°), (i))

	)

532 
	#sk_CONF_MODULE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_MODULE
, (°), (i), (vÆ))

	)

533 
	#sk_CONF_MODULE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_MODULE
, (°))

	)

534 
	#sk_CONF_MODULE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_MODULE
, (°), (vÆ))

	)

535 
	#sk_CONF_MODULE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_MODULE
, (°), (vÆ))

	)

536 
	#sk_CONF_MODULE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_MODULE
, (°), (vÆ))

	)

537 
	#sk_CONF_MODULE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_MODULE
, (°), (vÆ))

	)

538 
	#sk_CONF_MODULE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_MODULE
, (°), (i))

	)

539 
	#sk_CONF_MODULE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_MODULE
, (°), (±r))

	)

540 
	#sk_CONF_MODULE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_MODULE
, (°), (vÆ), (i))

	)

541 
	#sk_CONF_MODULE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_MODULE
, (°), (cmp))

	)

542 
	#sk_CONF_MODULE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_MODULE
, st)

	)

543 
	#sk_CONF_MODULE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_MODULE
, (°), (‰ì_func))

	)

544 
	#sk_CONF_MODULE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_MODULE
, (°))

	)

545 
	#sk_CONF_MODULE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_MODULE
, (°))

	)

546 
	#sk_CONF_MODULE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_MODULE
, (°))

	)

547 
	#sk_CONF_MODULE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_MODULE
, (°))

	)

549 
	#sk_CONF_VALUE_√w
(
°
Ë
	`SKM_sk_√w
(
CONF_VALUE
, (°))

	)

550 
	#sk_CONF_VALUE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_VALUE
)

	)

551 
	#sk_CONF_VALUE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_VALUE
, (°))

	)

552 
	#sk_CONF_VALUE_num
(
°
Ë
	`SKM_sk_num
(
CONF_VALUE
, (°))

	)

553 
	#sk_CONF_VALUE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_VALUE
, (°), (i))

	)

554 
	#sk_CONF_VALUE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_VALUE
, (°), (i), (vÆ))

	)

555 
	#sk_CONF_VALUE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_VALUE
, (°))

	)

556 
	#sk_CONF_VALUE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_VALUE
, (°), (vÆ))

	)

557 
	#sk_CONF_VALUE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_VALUE
, (°), (vÆ))

	)

558 
	#sk_CONF_VALUE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_VALUE
, (°), (vÆ))

	)

559 
	#sk_CONF_VALUE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_VALUE
, (°), (vÆ))

	)

560 
	#sk_CONF_VALUE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_VALUE
, (°), (i))

	)

561 
	#sk_CONF_VALUE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_VALUE
, (°), (±r))

	)

562 
	#sk_CONF_VALUE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_VALUE
, (°), (vÆ), (i))

	)

563 
	#sk_CONF_VALUE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_VALUE
, (°), (cmp))

	)

564 
	#sk_CONF_VALUE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_VALUE
, st)

	)

565 
	#sk_CONF_VALUE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_VALUE
, (°), (‰ì_func))

	)

566 
	#sk_CONF_VALUE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_VALUE
, (°))

	)

567 
	#sk_CONF_VALUE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_VALUE
, (°))

	)

568 
	#sk_CONF_VALUE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_VALUE
, (°))

	)

569 
	#sk_CONF_VALUE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_VALUE
, (°))

	)

571 
	#sk_CRYPTO_EX_DATA_FUNCS_√w
(
°
Ë
	`SKM_sk_√w
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

572 
	#sk_CRYPTO_EX_DATA_FUNCS_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CRYPTO_EX_DATA_FUNCS
)

	)

573 
	#sk_CRYPTO_EX_DATA_FUNCS_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

574 
	#sk_CRYPTO_EX_DATA_FUNCS_num
(
°
Ë
	`SKM_sk_num
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

575 
	#sk_CRYPTO_EX_DATA_FUNCS_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CRYPTO_EX_DATA_FUNCS
, (°), (i))

	)

576 
	#sk_CRYPTO_EX_DATA_FUNCS_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CRYPTO_EX_DATA_FUNCS
, (°), (i), (vÆ))

	)

577 
	#sk_CRYPTO_EX_DATA_FUNCS_zîo
(
°
Ë
	`SKM_sk_zîo
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

578 
	#sk_CRYPTO_EX_DATA_FUNCS_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

579 
	#sk_CRYPTO_EX_DATA_FUNCS_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

580 
	#sk_CRYPTO_EX_DATA_FUNCS_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

581 
	#sk_CRYPTO_EX_DATA_FUNCS_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

582 
	#sk_CRYPTO_EX_DATA_FUNCS_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CRYPTO_EX_DATA_FUNCS
, (°), (i))

	)

583 
	#sk_CRYPTO_EX_DATA_FUNCS_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CRYPTO_EX_DATA_FUNCS
, (°), (±r))

	)

584 
	#sk_CRYPTO_EX_DATA_FUNCS_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ), (i))

	)

585 
	#sk_CRYPTO_EX_DATA_FUNCS_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CRYPTO_EX_DATA_FUNCS
, (°), (cmp))

	)

586 
	#sk_CRYPTO_EX_DATA_FUNCS_dup
(
°
Ë
	`SKM_sk_dup
(
CRYPTO_EX_DATA_FUNCS
, st)

	)

587 
	#sk_CRYPTO_EX_DATA_FUNCS_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CRYPTO_EX_DATA_FUNCS
, (°), (‰ì_func))

	)

588 
	#sk_CRYPTO_EX_DATA_FUNCS_shi·
(
°
Ë
	`SKM_sk_shi·
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

589 
	#sk_CRYPTO_EX_DATA_FUNCS_p›
(
°
Ë
	`SKM_sk_p›
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

590 
	#sk_CRYPTO_EX_DATA_FUNCS_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

591 
	#sk_CRYPTO_EX_DATA_FUNCS_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

593 
	#sk_CRYPTO_dy∆ock_√w
(
°
Ë
	`SKM_sk_√w
(
CRYPTO_dy∆ock
, (°))

	)

594 
	#sk_CRYPTO_dy∆ock_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CRYPTO_dy∆ock
)

	)

595 
	#sk_CRYPTO_dy∆ock_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CRYPTO_dy∆ock
, (°))

	)

596 
	#sk_CRYPTO_dy∆ock_num
(
°
Ë
	`SKM_sk_num
(
CRYPTO_dy∆ock
, (°))

	)

597 
	#sk_CRYPTO_dy∆ock_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CRYPTO_dy∆ock
, (°), (i))

	)

598 
	#sk_CRYPTO_dy∆ock_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CRYPTO_dy∆ock
, (°), (i), (vÆ))

	)

599 
	#sk_CRYPTO_dy∆ock_zîo
(
°
Ë
	`SKM_sk_zîo
(
CRYPTO_dy∆ock
, (°))

	)

600 
	#sk_CRYPTO_dy∆ock_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

601 
	#sk_CRYPTO_dy∆ock_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

602 
	#sk_CRYPTO_dy∆ock_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

603 
	#sk_CRYPTO_dy∆ock_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

604 
	#sk_CRYPTO_dy∆ock_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CRYPTO_dy∆ock
, (°), (i))

	)

605 
	#sk_CRYPTO_dy∆ock_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CRYPTO_dy∆ock
, (°), (±r))

	)

606 
	#sk_CRYPTO_dy∆ock_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CRYPTO_dy∆ock
, (°), (vÆ), (i))

	)

607 
	#sk_CRYPTO_dy∆ock_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CRYPTO_dy∆ock
, (°), (cmp))

	)

608 
	#sk_CRYPTO_dy∆ock_dup
(
°
Ë
	`SKM_sk_dup
(
CRYPTO_dy∆ock
, st)

	)

609 
	#sk_CRYPTO_dy∆ock_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CRYPTO_dy∆ock
, (°), (‰ì_func))

	)

610 
	#sk_CRYPTO_dy∆ock_shi·
(
°
Ë
	`SKM_sk_shi·
(
CRYPTO_dy∆ock
, (°))

	)

611 
	#sk_CRYPTO_dy∆ock_p›
(
°
Ë
	`SKM_sk_p›
(
CRYPTO_dy∆ock
, (°))

	)

612 
	#sk_CRYPTO_dy∆ock_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CRYPTO_dy∆ock
, (°))

	)

613 
	#sk_CRYPTO_dy∆ock_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CRYPTO_dy∆ock
, (°))

	)

615 
	#sk_DIST_POINT_√w
(
°
Ë
	`SKM_sk_√w
(
DIST_POINT
, (°))

	)

616 
	#sk_DIST_POINT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
DIST_POINT
)

	)

617 
	#sk_DIST_POINT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
DIST_POINT
, (°))

	)

618 
	#sk_DIST_POINT_num
(
°
Ë
	`SKM_sk_num
(
DIST_POINT
, (°))

	)

619 
	#sk_DIST_POINT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
DIST_POINT
, (°), (i))

	)

620 
	#sk_DIST_POINT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
DIST_POINT
, (°), (i), (vÆ))

	)

621 
	#sk_DIST_POINT_zîo
(
°
Ë
	`SKM_sk_zîo
(
DIST_POINT
, (°))

	)

622 
	#sk_DIST_POINT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
DIST_POINT
, (°), (vÆ))

	)

623 
	#sk_DIST_POINT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
DIST_POINT
, (°), (vÆ))

	)

624 
	#sk_DIST_POINT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
DIST_POINT
, (°), (vÆ))

	)

625 
	#sk_DIST_POINT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
DIST_POINT
, (°), (vÆ))

	)

626 
	#sk_DIST_POINT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
DIST_POINT
, (°), (i))

	)

627 
	#sk_DIST_POINT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
DIST_POINT
, (°), (±r))

	)

628 
	#sk_DIST_POINT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
DIST_POINT
, (°), (vÆ), (i))

	)

629 
	#sk_DIST_POINT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
DIST_POINT
, (°), (cmp))

	)

630 
	#sk_DIST_POINT_dup
(
°
Ë
	`SKM_sk_dup
(
DIST_POINT
, st)

	)

631 
	#sk_DIST_POINT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
DIST_POINT
, (°), (‰ì_func))

	)

632 
	#sk_DIST_POINT_shi·
(
°
Ë
	`SKM_sk_shi·
(
DIST_POINT
, (°))

	)

633 
	#sk_DIST_POINT_p›
(
°
Ë
	`SKM_sk_p›
(
DIST_POINT
, (°))

	)

634 
	#sk_DIST_POINT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
DIST_POINT
, (°))

	)

635 
	#sk_DIST_POINT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
DIST_POINT
, (°))

	)

637 
	#sk_ENGINE_√w
(
°
Ë
	`SKM_sk_√w
(
ENGINE
, (°))

	)

638 
	#sk_ENGINE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ENGINE
)

	)

639 
	#sk_ENGINE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ENGINE
, (°))

	)

640 
	#sk_ENGINE_num
(
°
Ë
	`SKM_sk_num
(
ENGINE
, (°))

	)

641 
	#sk_ENGINE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ENGINE
, (°), (i))

	)

642 
	#sk_ENGINE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ENGINE
, (°), (i), (vÆ))

	)

643 
	#sk_ENGINE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ENGINE
, (°))

	)

644 
	#sk_ENGINE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ENGINE
, (°), (vÆ))

	)

645 
	#sk_ENGINE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ENGINE
, (°), (vÆ))

	)

646 
	#sk_ENGINE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ENGINE
, (°), (vÆ))

	)

647 
	#sk_ENGINE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ENGINE
, (°), (vÆ))

	)

648 
	#sk_ENGINE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ENGINE
, (°), (i))

	)

649 
	#sk_ENGINE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ENGINE
, (°), (±r))

	)

650 
	#sk_ENGINE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ENGINE
, (°), (vÆ), (i))

	)

651 
	#sk_ENGINE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ENGINE
, (°), (cmp))

	)

652 
	#sk_ENGINE_dup
(
°
Ë
	`SKM_sk_dup
(
ENGINE
, st)

	)

653 
	#sk_ENGINE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ENGINE
, (°), (‰ì_func))

	)

654 
	#sk_ENGINE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ENGINE
, (°))

	)

655 
	#sk_ENGINE_p›
(
°
Ë
	`SKM_sk_p›
(
ENGINE
, (°))

	)

656 
	#sk_ENGINE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ENGINE
, (°))

	)

657 
	#sk_ENGINE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ENGINE
, (°))

	)

659 
	#sk_ENGINE_CLEANUP_ITEM_√w
(
°
Ë
	`SKM_sk_√w
(
ENGINE_CLEANUP_ITEM
, (°))

	)

660 
	#sk_ENGINE_CLEANUP_ITEM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ENGINE_CLEANUP_ITEM
)

	)

661 
	#sk_ENGINE_CLEANUP_ITEM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ENGINE_CLEANUP_ITEM
, (°))

	)

662 
	#sk_ENGINE_CLEANUP_ITEM_num
(
°
Ë
	`SKM_sk_num
(
ENGINE_CLEANUP_ITEM
, (°))

	)

663 
	#sk_ENGINE_CLEANUP_ITEM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ENGINE_CLEANUP_ITEM
, (°), (i))

	)

664 
	#sk_ENGINE_CLEANUP_ITEM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ENGINE_CLEANUP_ITEM
, (°), (i), (vÆ))

	)

665 
	#sk_ENGINE_CLEANUP_ITEM_zîo
(
°
Ë
	`SKM_sk_zîo
(
ENGINE_CLEANUP_ITEM
, (°))

	)

666 
	#sk_ENGINE_CLEANUP_ITEM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

667 
	#sk_ENGINE_CLEANUP_ITEM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

668 
	#sk_ENGINE_CLEANUP_ITEM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

669 
	#sk_ENGINE_CLEANUP_ITEM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

670 
	#sk_ENGINE_CLEANUP_ITEM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ENGINE_CLEANUP_ITEM
, (°), (i))

	)

671 
	#sk_ENGINE_CLEANUP_ITEM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ENGINE_CLEANUP_ITEM
, (°), (±r))

	)

672 
	#sk_ENGINE_CLEANUP_ITEM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ), (i))

	)

673 
	#sk_ENGINE_CLEANUP_ITEM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ENGINE_CLEANUP_ITEM
, (°), (cmp))

	)

674 
	#sk_ENGINE_CLEANUP_ITEM_dup
(
°
Ë
	`SKM_sk_dup
(
ENGINE_CLEANUP_ITEM
, st)

	)

675 
	#sk_ENGINE_CLEANUP_ITEM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ENGINE_CLEANUP_ITEM
, (°), (‰ì_func))

	)

676 
	#sk_ENGINE_CLEANUP_ITEM_shi·
(
°
Ë
	`SKM_sk_shi·
(
ENGINE_CLEANUP_ITEM
, (°))

	)

677 
	#sk_ENGINE_CLEANUP_ITEM_p›
(
°
Ë
	`SKM_sk_p›
(
ENGINE_CLEANUP_ITEM
, (°))

	)

678 
	#sk_ENGINE_CLEANUP_ITEM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ENGINE_CLEANUP_ITEM
, (°))

	)

679 
	#sk_ENGINE_CLEANUP_ITEM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ENGINE_CLEANUP_ITEM
, (°))

	)

681 
	#sk_GENERAL_NAME_√w
(
°
Ë
	`SKM_sk_√w
(
GENERAL_NAME
, (°))

	)

682 
	#sk_GENERAL_NAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_NAME
)

	)

683 
	#sk_GENERAL_NAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_NAME
, (°))

	)

684 
	#sk_GENERAL_NAME_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_NAME
, (°))

	)

685 
	#sk_GENERAL_NAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_NAME
, (°), (i))

	)

686 
	#sk_GENERAL_NAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_NAME
, (°), (i), (vÆ))

	)

687 
	#sk_GENERAL_NAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_NAME
, (°))

	)

688 
	#sk_GENERAL_NAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_NAME
, (°), (vÆ))

	)

689 
	#sk_GENERAL_NAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_NAME
, (°), (vÆ))

	)

690 
	#sk_GENERAL_NAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_NAME
, (°), (vÆ))

	)

691 
	#sk_GENERAL_NAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_NAME
, (°), (vÆ))

	)

692 
	#sk_GENERAL_NAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_NAME
, (°), (i))

	)

693 
	#sk_GENERAL_NAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_NAME
, (°), (±r))

	)

694 
	#sk_GENERAL_NAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_NAME
, (°), (vÆ), (i))

	)

695 
	#sk_GENERAL_NAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_NAME
, (°), (cmp))

	)

696 
	#sk_GENERAL_NAME_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_NAME
, st)

	)

697 
	#sk_GENERAL_NAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_NAME
, (°), (‰ì_func))

	)

698 
	#sk_GENERAL_NAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_NAME
, (°))

	)

699 
	#sk_GENERAL_NAME_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_NAME
, (°))

	)

700 
	#sk_GENERAL_NAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_NAME
, (°))

	)

701 
	#sk_GENERAL_NAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_NAME
, (°))

	)

703 
	#sk_GENERAL_NAMES_√w
(
°
Ë
	`SKM_sk_√w
(
GENERAL_NAMES
, (°))

	)

704 
	#sk_GENERAL_NAMES_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_NAMES
)

	)

705 
	#sk_GENERAL_NAMES_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_NAMES
, (°))

	)

706 
	#sk_GENERAL_NAMES_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_NAMES
, (°))

	)

707 
	#sk_GENERAL_NAMES_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_NAMES
, (°), (i))

	)

708 
	#sk_GENERAL_NAMES_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_NAMES
, (°), (i), (vÆ))

	)

709 
	#sk_GENERAL_NAMES_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_NAMES
, (°))

	)

710 
	#sk_GENERAL_NAMES_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_NAMES
, (°), (vÆ))

	)

711 
	#sk_GENERAL_NAMES_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_NAMES
, (°), (vÆ))

	)

712 
	#sk_GENERAL_NAMES_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_NAMES
, (°), (vÆ))

	)

713 
	#sk_GENERAL_NAMES_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_NAMES
, (°), (vÆ))

	)

714 
	#sk_GENERAL_NAMES_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_NAMES
, (°), (i))

	)

715 
	#sk_GENERAL_NAMES_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_NAMES
, (°), (±r))

	)

716 
	#sk_GENERAL_NAMES_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_NAMES
, (°), (vÆ), (i))

	)

717 
	#sk_GENERAL_NAMES_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_NAMES
, (°), (cmp))

	)

718 
	#sk_GENERAL_NAMES_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_NAMES
, st)

	)

719 
	#sk_GENERAL_NAMES_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_NAMES
, (°), (‰ì_func))

	)

720 
	#sk_GENERAL_NAMES_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_NAMES
, (°))

	)

721 
	#sk_GENERAL_NAMES_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_NAMES
, (°))

	)

722 
	#sk_GENERAL_NAMES_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_NAMES
, (°))

	)

723 
	#sk_GENERAL_NAMES_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_NAMES
, (°))

	)

725 
	#sk_GENERAL_SUBTREE_√w
(
°
Ë
	`SKM_sk_√w
(
GENERAL_SUBTREE
, (°))

	)

726 
	#sk_GENERAL_SUBTREE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_SUBTREE
)

	)

727 
	#sk_GENERAL_SUBTREE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_SUBTREE
, (°))

	)

728 
	#sk_GENERAL_SUBTREE_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_SUBTREE
, (°))

	)

729 
	#sk_GENERAL_SUBTREE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_SUBTREE
, (°), (i))

	)

730 
	#sk_GENERAL_SUBTREE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_SUBTREE
, (°), (i), (vÆ))

	)

731 
	#sk_GENERAL_SUBTREE_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_SUBTREE
, (°))

	)

732 
	#sk_GENERAL_SUBTREE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

733 
	#sk_GENERAL_SUBTREE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

734 
	#sk_GENERAL_SUBTREE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

735 
	#sk_GENERAL_SUBTREE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

736 
	#sk_GENERAL_SUBTREE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_SUBTREE
, (°), (i))

	)

737 
	#sk_GENERAL_SUBTREE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_SUBTREE
, (°), (±r))

	)

738 
	#sk_GENERAL_SUBTREE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_SUBTREE
, (°), (vÆ), (i))

	)

739 
	#sk_GENERAL_SUBTREE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_SUBTREE
, (°), (cmp))

	)

740 
	#sk_GENERAL_SUBTREE_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_SUBTREE
, st)

	)

741 
	#sk_GENERAL_SUBTREE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_SUBTREE
, (°), (‰ì_func))

	)

742 
	#sk_GENERAL_SUBTREE_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_SUBTREE
, (°))

	)

743 
	#sk_GENERAL_SUBTREE_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_SUBTREE
, (°))

	)

744 
	#sk_GENERAL_SUBTREE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_SUBTREE
, (°))

	)

745 
	#sk_GENERAL_SUBTREE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_SUBTREE
, (°))

	)

747 
	#sk_IPAddªssFamûy_√w
(
°
Ë
	`SKM_sk_√w
(
IPAddªssFamûy
, (°))

	)

748 
	#sk_IPAddªssFamûy_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
IPAddªssFamûy
)

	)

749 
	#sk_IPAddªssFamûy_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
IPAddªssFamûy
, (°))

	)

750 
	#sk_IPAddªssFamûy_num
(
°
Ë
	`SKM_sk_num
(
IPAddªssFamûy
, (°))

	)

751 
	#sk_IPAddªssFamûy_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
IPAddªssFamûy
, (°), (i))

	)

752 
	#sk_IPAddªssFamûy_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
IPAddªssFamûy
, (°), (i), (vÆ))

	)

753 
	#sk_IPAddªssFamûy_zîo
(
°
Ë
	`SKM_sk_zîo
(
IPAddªssFamûy
, (°))

	)

754 
	#sk_IPAddªssFamûy_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
IPAddªssFamûy
, (°), (vÆ))

	)

755 
	#sk_IPAddªssFamûy_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
IPAddªssFamûy
, (°), (vÆ))

	)

756 
	#sk_IPAddªssFamûy_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
IPAddªssFamûy
, (°), (vÆ))

	)

757 
	#sk_IPAddªssFamûy_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
IPAddªssFamûy
, (°), (vÆ))

	)

758 
	#sk_IPAddªssFamûy_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
IPAddªssFamûy
, (°), (i))

	)

759 
	#sk_IPAddªssFamûy_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
IPAddªssFamûy
, (°), (±r))

	)

760 
	#sk_IPAddªssFamûy_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
IPAddªssFamûy
, (°), (vÆ), (i))

	)

761 
	#sk_IPAddªssFamûy_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
IPAddªssFamûy
, (°), (cmp))

	)

762 
	#sk_IPAddªssFamûy_dup
(
°
Ë
	`SKM_sk_dup
(
IPAddªssFamûy
, st)

	)

763 
	#sk_IPAddªssFamûy_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
IPAddªssFamûy
, (°), (‰ì_func))

	)

764 
	#sk_IPAddªssFamûy_shi·
(
°
Ë
	`SKM_sk_shi·
(
IPAddªssFamûy
, (°))

	)

765 
	#sk_IPAddªssFamûy_p›
(
°
Ë
	`SKM_sk_p›
(
IPAddªssFamûy
, (°))

	)

766 
	#sk_IPAddªssFamûy_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
IPAddªssFamûy
, (°))

	)

767 
	#sk_IPAddªssFamûy_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
IPAddªssFamûy
, (°))

	)

769 
	#sk_IPAddªssOrR™ge_√w
(
°
Ë
	`SKM_sk_√w
(
IPAddªssOrR™ge
, (°))

	)

770 
	#sk_IPAddªssOrR™ge_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
IPAddªssOrR™ge
)

	)

771 
	#sk_IPAddªssOrR™ge_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
IPAddªssOrR™ge
, (°))

	)

772 
	#sk_IPAddªssOrR™ge_num
(
°
Ë
	`SKM_sk_num
(
IPAddªssOrR™ge
, (°))

	)

773 
	#sk_IPAddªssOrR™ge_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
IPAddªssOrR™ge
, (°), (i))

	)

774 
	#sk_IPAddªssOrR™ge_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
IPAddªssOrR™ge
, (°), (i), (vÆ))

	)

775 
	#sk_IPAddªssOrR™ge_zîo
(
°
Ë
	`SKM_sk_zîo
(
IPAddªssOrR™ge
, (°))

	)

776 
	#sk_IPAddªssOrR™ge_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

777 
	#sk_IPAddªssOrR™ge_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

778 
	#sk_IPAddªssOrR™ge_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

779 
	#sk_IPAddªssOrR™ge_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

780 
	#sk_IPAddªssOrR™ge_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
IPAddªssOrR™ge
, (°), (i))

	)

781 
	#sk_IPAddªssOrR™ge_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
IPAddªssOrR™ge
, (°), (±r))

	)

782 
	#sk_IPAddªssOrR™ge_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
IPAddªssOrR™ge
, (°), (vÆ), (i))

	)

783 
	#sk_IPAddªssOrR™ge_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
IPAddªssOrR™ge
, (°), (cmp))

	)

784 
	#sk_IPAddªssOrR™ge_dup
(
°
Ë
	`SKM_sk_dup
(
IPAddªssOrR™ge
, st)

	)

785 
	#sk_IPAddªssOrR™ge_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
IPAddªssOrR™ge
, (°), (‰ì_func))

	)

786 
	#sk_IPAddªssOrR™ge_shi·
(
°
Ë
	`SKM_sk_shi·
(
IPAddªssOrR™ge
, (°))

	)

787 
	#sk_IPAddªssOrR™ge_p›
(
°
Ë
	`SKM_sk_p›
(
IPAddªssOrR™ge
, (°))

	)

788 
	#sk_IPAddªssOrR™ge_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
IPAddªssOrR™ge
, (°))

	)

789 
	#sk_IPAddªssOrR™ge_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
IPAddªssOrR™ge
, (°))

	)

791 
	#sk_KRB5_APREQBODY_√w
(
°
Ë
	`SKM_sk_√w
(
KRB5_APREQBODY
, (°))

	)

792 
	#sk_KRB5_APREQBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_APREQBODY
)

	)

793 
	#sk_KRB5_APREQBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_APREQBODY
, (°))

	)

794 
	#sk_KRB5_APREQBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_APREQBODY
, (°))

	)

795 
	#sk_KRB5_APREQBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_APREQBODY
, (°), (i))

	)

796 
	#sk_KRB5_APREQBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_APREQBODY
, (°), (i), (vÆ))

	)

797 
	#sk_KRB5_APREQBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_APREQBODY
, (°))

	)

798 
	#sk_KRB5_APREQBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_APREQBODY
, (°), (vÆ))

	)

799 
	#sk_KRB5_APREQBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_APREQBODY
, (°), (vÆ))

	)

800 
	#sk_KRB5_APREQBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_APREQBODY
, (°), (vÆ))

	)

801 
	#sk_KRB5_APREQBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_APREQBODY
, (°), (vÆ))

	)

802 
	#sk_KRB5_APREQBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_APREQBODY
, (°), (i))

	)

803 
	#sk_KRB5_APREQBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_APREQBODY
, (°), (±r))

	)

804 
	#sk_KRB5_APREQBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_APREQBODY
, (°), (vÆ), (i))

	)

805 
	#sk_KRB5_APREQBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_APREQBODY
, (°), (cmp))

	)

806 
	#sk_KRB5_APREQBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_APREQBODY
, st)

	)

807 
	#sk_KRB5_APREQBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_APREQBODY
, (°), (‰ì_func))

	)

808 
	#sk_KRB5_APREQBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_APREQBODY
, (°))

	)

809 
	#sk_KRB5_APREQBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_APREQBODY
, (°))

	)

810 
	#sk_KRB5_APREQBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_APREQBODY
, (°))

	)

811 
	#sk_KRB5_APREQBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_APREQBODY
, (°))

	)

813 
	#sk_KRB5_AUTHDATA_√w
(
°
Ë
	`SKM_sk_√w
(
KRB5_AUTHDATA
, (°))

	)

814 
	#sk_KRB5_AUTHDATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_AUTHDATA
)

	)

815 
	#sk_KRB5_AUTHDATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_AUTHDATA
, (°))

	)

816 
	#sk_KRB5_AUTHDATA_num
(
°
Ë
	`SKM_sk_num
(
KRB5_AUTHDATA
, (°))

	)

817 
	#sk_KRB5_AUTHDATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_AUTHDATA
, (°), (i))

	)

818 
	#sk_KRB5_AUTHDATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_AUTHDATA
, (°), (i), (vÆ))

	)

819 
	#sk_KRB5_AUTHDATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_AUTHDATA
, (°))

	)

820 
	#sk_KRB5_AUTHDATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

821 
	#sk_KRB5_AUTHDATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

822 
	#sk_KRB5_AUTHDATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

823 
	#sk_KRB5_AUTHDATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

824 
	#sk_KRB5_AUTHDATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_AUTHDATA
, (°), (i))

	)

825 
	#sk_KRB5_AUTHDATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_AUTHDATA
, (°), (±r))

	)

826 
	#sk_KRB5_AUTHDATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_AUTHDATA
, (°), (vÆ), (i))

	)

827 
	#sk_KRB5_AUTHDATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_AUTHDATA
, (°), (cmp))

	)

828 
	#sk_KRB5_AUTHDATA_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_AUTHDATA
, st)

	)

829 
	#sk_KRB5_AUTHDATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_AUTHDATA
, (°), (‰ì_func))

	)

830 
	#sk_KRB5_AUTHDATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_AUTHDATA
, (°))

	)

831 
	#sk_KRB5_AUTHDATA_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_AUTHDATA
, (°))

	)

832 
	#sk_KRB5_AUTHDATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_AUTHDATA
, (°))

	)

833 
	#sk_KRB5_AUTHDATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_AUTHDATA
, (°))

	)

835 
	#sk_KRB5_AUTHENTBODY_√w
(
°
Ë
	`SKM_sk_√w
(
KRB5_AUTHENTBODY
, (°))

	)

836 
	#sk_KRB5_AUTHENTBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_AUTHENTBODY
)

	)

837 
	#sk_KRB5_AUTHENTBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_AUTHENTBODY
, (°))

	)

838 
	#sk_KRB5_AUTHENTBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_AUTHENTBODY
, (°))

	)

839 
	#sk_KRB5_AUTHENTBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_AUTHENTBODY
, (°), (i))

	)

840 
	#sk_KRB5_AUTHENTBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_AUTHENTBODY
, (°), (i), (vÆ))

	)

841 
	#sk_KRB5_AUTHENTBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_AUTHENTBODY
, (°))

	)

842 
	#sk_KRB5_AUTHENTBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

843 
	#sk_KRB5_AUTHENTBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

844 
	#sk_KRB5_AUTHENTBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

845 
	#sk_KRB5_AUTHENTBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

846 
	#sk_KRB5_AUTHENTBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_AUTHENTBODY
, (°), (i))

	)

847 
	#sk_KRB5_AUTHENTBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_AUTHENTBODY
, (°), (±r))

	)

848 
	#sk_KRB5_AUTHENTBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_AUTHENTBODY
, (°), (vÆ), (i))

	)

849 
	#sk_KRB5_AUTHENTBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_AUTHENTBODY
, (°), (cmp))

	)

850 
	#sk_KRB5_AUTHENTBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_AUTHENTBODY
, st)

	)

851 
	#sk_KRB5_AUTHENTBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_AUTHENTBODY
, (°), (‰ì_func))

	)

852 
	#sk_KRB5_AUTHENTBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_AUTHENTBODY
, (°))

	)

853 
	#sk_KRB5_AUTHENTBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_AUTHENTBODY
, (°))

	)

854 
	#sk_KRB5_AUTHENTBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_AUTHENTBODY
, (°))

	)

855 
	#sk_KRB5_AUTHENTBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_AUTHENTBODY
, (°))

	)

857 
	#sk_KRB5_CHECKSUM_√w
(
°
Ë
	`SKM_sk_√w
(
KRB5_CHECKSUM
, (°))

	)

858 
	#sk_KRB5_CHECKSUM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_CHECKSUM
)

	)

859 
	#sk_KRB5_CHECKSUM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_CHECKSUM
, (°))

	)

860 
	#sk_KRB5_CHECKSUM_num
(
°
Ë
	`SKM_sk_num
(
KRB5_CHECKSUM
, (°))

	)

861 
	#sk_KRB5_CHECKSUM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_CHECKSUM
, (°), (i))

	)

862 
	#sk_KRB5_CHECKSUM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_CHECKSUM
, (°), (i), (vÆ))

	)

863 
	#sk_KRB5_CHECKSUM_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_CHECKSUM
, (°))

	)

864 
	#sk_KRB5_CHECKSUM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

865 
	#sk_KRB5_CHECKSUM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

866 
	#sk_KRB5_CHECKSUM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

867 
	#sk_KRB5_CHECKSUM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

868 
	#sk_KRB5_CHECKSUM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_CHECKSUM
, (°), (i))

	)

869 
	#sk_KRB5_CHECKSUM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_CHECKSUM
, (°), (±r))

	)

870 
	#sk_KRB5_CHECKSUM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_CHECKSUM
, (°), (vÆ), (i))

	)

871 
	#sk_KRB5_CHECKSUM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_CHECKSUM
, (°), (cmp))

	)

872 
	#sk_KRB5_CHECKSUM_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_CHECKSUM
, st)

	)

873 
	#sk_KRB5_CHECKSUM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_CHECKSUM
, (°), (‰ì_func))

	)

874 
	#sk_KRB5_CHECKSUM_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_CHECKSUM
, (°))

	)

875 
	#sk_KRB5_CHECKSUM_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_CHECKSUM
, (°))

	)

876 
	#sk_KRB5_CHECKSUM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_CHECKSUM
, (°))

	)

877 
	#sk_KRB5_CHECKSUM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_CHECKSUM
, (°))

	)

879 
	#sk_KRB5_ENCDATA_√w
(
°
Ë
	`SKM_sk_√w
(
KRB5_ENCDATA
, (°))

	)

880 
	#sk_KRB5_ENCDATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_ENCDATA
)

	)

881 
	#sk_KRB5_ENCDATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_ENCDATA
, (°))

	)

882 
	#sk_KRB5_ENCDATA_num
(
°
Ë
	`SKM_sk_num
(
KRB5_ENCDATA
, (°))

	)

883 
	#sk_KRB5_ENCDATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_ENCDATA
, (°), (i))

	)

884 
	#sk_KRB5_ENCDATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_ENCDATA
, (°), (i), (vÆ))

	)

885 
	#sk_KRB5_ENCDATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_ENCDATA
, (°))

	)

886 
	#sk_KRB5_ENCDATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_ENCDATA
, (°), (vÆ))

	)

887 
	#sk_KRB5_ENCDATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_ENCDATA
, (°), (vÆ))

	)

888 
	#sk_KRB5_ENCDATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_ENCDATA
, (°), (vÆ))

	)

889 
	#sk_KRB5_ENCDATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_ENCDATA
, (°), (vÆ))

	)

890 
	#sk_KRB5_ENCDATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_ENCDATA
, (°), (i))

	)

891 
	#sk_KRB5_ENCDATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_ENCDATA
, (°), (±r))

	)

892 
	#sk_KRB5_ENCDATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_ENCDATA
, (°), (vÆ), (i))

	)

893 
	#sk_KRB5_ENCDATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_ENCDATA
, (°), (cmp))

	)

894 
	#sk_KRB5_ENCDATA_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_ENCDATA
, st)

	)

895 
	#sk_KRB5_ENCDATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_ENCDATA
, (°), (‰ì_func))

	)

896 
	#sk_KRB5_ENCDATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_ENCDATA
, (°))

	)

897 
	#sk_KRB5_ENCDATA_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_ENCDATA
, (°))

	)

898 
	#sk_KRB5_ENCDATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_ENCDATA
, (°))

	)

899 
	#sk_KRB5_ENCDATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_ENCDATA
, (°))

	)

901 
	#sk_KRB5_ENCKEY_√w
(
°
Ë
	`SKM_sk_√w
(
KRB5_ENCKEY
, (°))

	)

902 
	#sk_KRB5_ENCKEY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_ENCKEY
)

	)

903 
	#sk_KRB5_ENCKEY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_ENCKEY
, (°))

	)

904 
	#sk_KRB5_ENCKEY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_ENCKEY
, (°))

	)

905 
	#sk_KRB5_ENCKEY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_ENCKEY
, (°), (i))

	)

906 
	#sk_KRB5_ENCKEY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_ENCKEY
, (°), (i), (vÆ))

	)

907 
	#sk_KRB5_ENCKEY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_ENCKEY
, (°))

	)

908 
	#sk_KRB5_ENCKEY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_ENCKEY
, (°), (vÆ))

	)

909 
	#sk_KRB5_ENCKEY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_ENCKEY
, (°), (vÆ))

	)

910 
	#sk_KRB5_ENCKEY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_ENCKEY
, (°), (vÆ))

	)

911 
	#sk_KRB5_ENCKEY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_ENCKEY
, (°), (vÆ))

	)

912 
	#sk_KRB5_ENCKEY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_ENCKEY
, (°), (i))

	)

913 
	#sk_KRB5_ENCKEY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_ENCKEY
, (°), (±r))

	)

914 
	#sk_KRB5_ENCKEY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_ENCKEY
, (°), (vÆ), (i))

	)

915 
	#sk_KRB5_ENCKEY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_ENCKEY
, (°), (cmp))

	)

916 
	#sk_KRB5_ENCKEY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_ENCKEY
, st)

	)

917 
	#sk_KRB5_ENCKEY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_ENCKEY
, (°), (‰ì_func))

	)

918 
	#sk_KRB5_ENCKEY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_ENCKEY
, (°))

	)

919 
	#sk_KRB5_ENCKEY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_ENCKEY
, (°))

	)

920 
	#sk_KRB5_ENCKEY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_ENCKEY
, (°))

	)

921 
	#sk_KRB5_ENCKEY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_ENCKEY
, (°))

	)

923 
	#sk_KRB5_PRINCNAME_√w
(
°
Ë
	`SKM_sk_√w
(
KRB5_PRINCNAME
, (°))

	)

924 
	#sk_KRB5_PRINCNAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_PRINCNAME
)

	)

925 
	#sk_KRB5_PRINCNAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_PRINCNAME
, (°))

	)

926 
	#sk_KRB5_PRINCNAME_num
(
°
Ë
	`SKM_sk_num
(
KRB5_PRINCNAME
, (°))

	)

927 
	#sk_KRB5_PRINCNAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_PRINCNAME
, (°), (i))

	)

928 
	#sk_KRB5_PRINCNAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_PRINCNAME
, (°), (i), (vÆ))

	)

929 
	#sk_KRB5_PRINCNAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_PRINCNAME
, (°))

	)

930 
	#sk_KRB5_PRINCNAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

931 
	#sk_KRB5_PRINCNAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

932 
	#sk_KRB5_PRINCNAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

933 
	#sk_KRB5_PRINCNAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

934 
	#sk_KRB5_PRINCNAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_PRINCNAME
, (°), (i))

	)

935 
	#sk_KRB5_PRINCNAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_PRINCNAME
, (°), (±r))

	)

936 
	#sk_KRB5_PRINCNAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_PRINCNAME
, (°), (vÆ), (i))

	)

937 
	#sk_KRB5_PRINCNAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_PRINCNAME
, (°), (cmp))

	)

938 
	#sk_KRB5_PRINCNAME_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_PRINCNAME
, st)

	)

939 
	#sk_KRB5_PRINCNAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_PRINCNAME
, (°), (‰ì_func))

	)

940 
	#sk_KRB5_PRINCNAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_PRINCNAME
, (°))

	)

941 
	#sk_KRB5_PRINCNAME_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_PRINCNAME
, (°))

	)

942 
	#sk_KRB5_PRINCNAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_PRINCNAME
, (°))

	)

943 
	#sk_KRB5_PRINCNAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_PRINCNAME
, (°))

	)

945 
	#sk_KRB5_TKTBODY_√w
(
°
Ë
	`SKM_sk_√w
(
KRB5_TKTBODY
, (°))

	)

946 
	#sk_KRB5_TKTBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_TKTBODY
)

	)

947 
	#sk_KRB5_TKTBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_TKTBODY
, (°))

	)

948 
	#sk_KRB5_TKTBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_TKTBODY
, (°))

	)

949 
	#sk_KRB5_TKTBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_TKTBODY
, (°), (i))

	)

950 
	#sk_KRB5_TKTBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_TKTBODY
, (°), (i), (vÆ))

	)

951 
	#sk_KRB5_TKTBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_TKTBODY
, (°))

	)

952 
	#sk_KRB5_TKTBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_TKTBODY
, (°), (vÆ))

	)

953 
	#sk_KRB5_TKTBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_TKTBODY
, (°), (vÆ))

	)

954 
	#sk_KRB5_TKTBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_TKTBODY
, (°), (vÆ))

	)

955 
	#sk_KRB5_TKTBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_TKTBODY
, (°), (vÆ))

	)

956 
	#sk_KRB5_TKTBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_TKTBODY
, (°), (i))

	)

957 
	#sk_KRB5_TKTBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_TKTBODY
, (°), (±r))

	)

958 
	#sk_KRB5_TKTBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_TKTBODY
, (°), (vÆ), (i))

	)

959 
	#sk_KRB5_TKTBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_TKTBODY
, (°), (cmp))

	)

960 
	#sk_KRB5_TKTBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_TKTBODY
, st)

	)

961 
	#sk_KRB5_TKTBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_TKTBODY
, (°), (‰ì_func))

	)

962 
	#sk_KRB5_TKTBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_TKTBODY
, (°))

	)

963 
	#sk_KRB5_TKTBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_TKTBODY
, (°))

	)

964 
	#sk_KRB5_TKTBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_TKTBODY
, (°))

	)

965 
	#sk_KRB5_TKTBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_TKTBODY
, (°))

	)

967 
	#sk_MIME_HEADER_√w
(
°
Ë
	`SKM_sk_√w
(
MIME_HEADER
, (°))

	)

968 
	#sk_MIME_HEADER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MIME_HEADER
)

	)

969 
	#sk_MIME_HEADER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MIME_HEADER
, (°))

	)

970 
	#sk_MIME_HEADER_num
(
°
Ë
	`SKM_sk_num
(
MIME_HEADER
, (°))

	)

971 
	#sk_MIME_HEADER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MIME_HEADER
, (°), (i))

	)

972 
	#sk_MIME_HEADER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MIME_HEADER
, (°), (i), (vÆ))

	)

973 
	#sk_MIME_HEADER_zîo
(
°
Ë
	`SKM_sk_zîo
(
MIME_HEADER
, (°))

	)

974 
	#sk_MIME_HEADER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MIME_HEADER
, (°), (vÆ))

	)

975 
	#sk_MIME_HEADER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MIME_HEADER
, (°), (vÆ))

	)

976 
	#sk_MIME_HEADER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MIME_HEADER
, (°), (vÆ))

	)

977 
	#sk_MIME_HEADER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MIME_HEADER
, (°), (vÆ))

	)

978 
	#sk_MIME_HEADER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MIME_HEADER
, (°), (i))

	)

979 
	#sk_MIME_HEADER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MIME_HEADER
, (°), (±r))

	)

980 
	#sk_MIME_HEADER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MIME_HEADER
, (°), (vÆ), (i))

	)

981 
	#sk_MIME_HEADER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MIME_HEADER
, (°), (cmp))

	)

982 
	#sk_MIME_HEADER_dup
(
°
Ë
	`SKM_sk_dup
(
MIME_HEADER
, st)

	)

983 
	#sk_MIME_HEADER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MIME_HEADER
, (°), (‰ì_func))

	)

984 
	#sk_MIME_HEADER_shi·
(
°
Ë
	`SKM_sk_shi·
(
MIME_HEADER
, (°))

	)

985 
	#sk_MIME_HEADER_p›
(
°
Ë
	`SKM_sk_p›
(
MIME_HEADER
, (°))

	)

986 
	#sk_MIME_HEADER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MIME_HEADER
, (°))

	)

987 
	#sk_MIME_HEADER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MIME_HEADER
, (°))

	)

989 
	#sk_MIME_PARAM_√w
(
°
Ë
	`SKM_sk_√w
(
MIME_PARAM
, (°))

	)

990 
	#sk_MIME_PARAM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MIME_PARAM
)

	)

991 
	#sk_MIME_PARAM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MIME_PARAM
, (°))

	)

992 
	#sk_MIME_PARAM_num
(
°
Ë
	`SKM_sk_num
(
MIME_PARAM
, (°))

	)

993 
	#sk_MIME_PARAM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MIME_PARAM
, (°), (i))

	)

994 
	#sk_MIME_PARAM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MIME_PARAM
, (°), (i), (vÆ))

	)

995 
	#sk_MIME_PARAM_zîo
(
°
Ë
	`SKM_sk_zîo
(
MIME_PARAM
, (°))

	)

996 
	#sk_MIME_PARAM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MIME_PARAM
, (°), (vÆ))

	)

997 
	#sk_MIME_PARAM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MIME_PARAM
, (°), (vÆ))

	)

998 
	#sk_MIME_PARAM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MIME_PARAM
, (°), (vÆ))

	)

999 
	#sk_MIME_PARAM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MIME_PARAM
, (°), (vÆ))

	)

1000 
	#sk_MIME_PARAM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MIME_PARAM
, (°), (i))

	)

1001 
	#sk_MIME_PARAM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MIME_PARAM
, (°), (±r))

	)

1002 
	#sk_MIME_PARAM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MIME_PARAM
, (°), (vÆ), (i))

	)

1003 
	#sk_MIME_PARAM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MIME_PARAM
, (°), (cmp))

	)

1004 
	#sk_MIME_PARAM_dup
(
°
Ë
	`SKM_sk_dup
(
MIME_PARAM
, st)

	)

1005 
	#sk_MIME_PARAM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MIME_PARAM
, (°), (‰ì_func))

	)

1006 
	#sk_MIME_PARAM_shi·
(
°
Ë
	`SKM_sk_shi·
(
MIME_PARAM
, (°))

	)

1007 
	#sk_MIME_PARAM_p›
(
°
Ë
	`SKM_sk_p›
(
MIME_PARAM
, (°))

	)

1008 
	#sk_MIME_PARAM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MIME_PARAM
, (°))

	)

1009 
	#sk_MIME_PARAM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MIME_PARAM
, (°))

	)

1011 
	#sk_NAME_FUNCS_√w
(
°
Ë
	`SKM_sk_√w
(
NAME_FUNCS
, (°))

	)

1012 
	#sk_NAME_FUNCS_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
NAME_FUNCS
)

	)

1013 
	#sk_NAME_FUNCS_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
NAME_FUNCS
, (°))

	)

1014 
	#sk_NAME_FUNCS_num
(
°
Ë
	`SKM_sk_num
(
NAME_FUNCS
, (°))

	)

1015 
	#sk_NAME_FUNCS_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
NAME_FUNCS
, (°), (i))

	)

1016 
	#sk_NAME_FUNCS_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
NAME_FUNCS
, (°), (i), (vÆ))

	)

1017 
	#sk_NAME_FUNCS_zîo
(
°
Ë
	`SKM_sk_zîo
(
NAME_FUNCS
, (°))

	)

1018 
	#sk_NAME_FUNCS_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
NAME_FUNCS
, (°), (vÆ))

	)

1019 
	#sk_NAME_FUNCS_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
NAME_FUNCS
, (°), (vÆ))

	)

1020 
	#sk_NAME_FUNCS_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
NAME_FUNCS
, (°), (vÆ))

	)

1021 
	#sk_NAME_FUNCS_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
NAME_FUNCS
, (°), (vÆ))

	)

1022 
	#sk_NAME_FUNCS_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
NAME_FUNCS
, (°), (i))

	)

1023 
	#sk_NAME_FUNCS_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
NAME_FUNCS
, (°), (±r))

	)

1024 
	#sk_NAME_FUNCS_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
NAME_FUNCS
, (°), (vÆ), (i))

	)

1025 
	#sk_NAME_FUNCS_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
NAME_FUNCS
, (°), (cmp))

	)

1026 
	#sk_NAME_FUNCS_dup
(
°
Ë
	`SKM_sk_dup
(
NAME_FUNCS
, st)

	)

1027 
	#sk_NAME_FUNCS_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
NAME_FUNCS
, (°), (‰ì_func))

	)

1028 
	#sk_NAME_FUNCS_shi·
(
°
Ë
	`SKM_sk_shi·
(
NAME_FUNCS
, (°))

	)

1029 
	#sk_NAME_FUNCS_p›
(
°
Ë
	`SKM_sk_p›
(
NAME_FUNCS
, (°))

	)

1030 
	#sk_NAME_FUNCS_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
NAME_FUNCS
, (°))

	)

1031 
	#sk_NAME_FUNCS_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
NAME_FUNCS
, (°))

	)

1033 
	#sk_OCSP_CERTID_√w
(
°
Ë
	`SKM_sk_√w
(
OCSP_CERTID
, (°))

	)

1034 
	#sk_OCSP_CERTID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_CERTID
)

	)

1035 
	#sk_OCSP_CERTID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_CERTID
, (°))

	)

1036 
	#sk_OCSP_CERTID_num
(
°
Ë
	`SKM_sk_num
(
OCSP_CERTID
, (°))

	)

1037 
	#sk_OCSP_CERTID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_CERTID
, (°), (i))

	)

1038 
	#sk_OCSP_CERTID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_CERTID
, (°), (i), (vÆ))

	)

1039 
	#sk_OCSP_CERTID_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_CERTID
, (°))

	)

1040 
	#sk_OCSP_CERTID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_CERTID
, (°), (vÆ))

	)

1041 
	#sk_OCSP_CERTID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_CERTID
, (°), (vÆ))

	)

1042 
	#sk_OCSP_CERTID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_CERTID
, (°), (vÆ))

	)

1043 
	#sk_OCSP_CERTID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_CERTID
, (°), (vÆ))

	)

1044 
	#sk_OCSP_CERTID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_CERTID
, (°), (i))

	)

1045 
	#sk_OCSP_CERTID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_CERTID
, (°), (±r))

	)

1046 
	#sk_OCSP_CERTID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_CERTID
, (°), (vÆ), (i))

	)

1047 
	#sk_OCSP_CERTID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_CERTID
, (°), (cmp))

	)

1048 
	#sk_OCSP_CERTID_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_CERTID
, st)

	)

1049 
	#sk_OCSP_CERTID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_CERTID
, (°), (‰ì_func))

	)

1050 
	#sk_OCSP_CERTID_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_CERTID
, (°))

	)

1051 
	#sk_OCSP_CERTID_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_CERTID
, (°))

	)

1052 
	#sk_OCSP_CERTID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_CERTID
, (°))

	)

1053 
	#sk_OCSP_CERTID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_CERTID
, (°))

	)

1055 
	#sk_OCSP_ONEREQ_√w
(
°
Ë
	`SKM_sk_√w
(
OCSP_ONEREQ
, (°))

	)

1056 
	#sk_OCSP_ONEREQ_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_ONEREQ
)

	)

1057 
	#sk_OCSP_ONEREQ_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_ONEREQ
, (°))

	)

1058 
	#sk_OCSP_ONEREQ_num
(
°
Ë
	`SKM_sk_num
(
OCSP_ONEREQ
, (°))

	)

1059 
	#sk_OCSP_ONEREQ_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_ONEREQ
, (°), (i))

	)

1060 
	#sk_OCSP_ONEREQ_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_ONEREQ
, (°), (i), (vÆ))

	)

1061 
	#sk_OCSP_ONEREQ_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_ONEREQ
, (°))

	)

1062 
	#sk_OCSP_ONEREQ_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1063 
	#sk_OCSP_ONEREQ_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1064 
	#sk_OCSP_ONEREQ_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1065 
	#sk_OCSP_ONEREQ_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1066 
	#sk_OCSP_ONEREQ_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_ONEREQ
, (°), (i))

	)

1067 
	#sk_OCSP_ONEREQ_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_ONEREQ
, (°), (±r))

	)

1068 
	#sk_OCSP_ONEREQ_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_ONEREQ
, (°), (vÆ), (i))

	)

1069 
	#sk_OCSP_ONEREQ_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_ONEREQ
, (°), (cmp))

	)

1070 
	#sk_OCSP_ONEREQ_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_ONEREQ
, st)

	)

1071 
	#sk_OCSP_ONEREQ_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_ONEREQ
, (°), (‰ì_func))

	)

1072 
	#sk_OCSP_ONEREQ_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_ONEREQ
, (°))

	)

1073 
	#sk_OCSP_ONEREQ_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_ONEREQ
, (°))

	)

1074 
	#sk_OCSP_ONEREQ_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_ONEREQ
, (°))

	)

1075 
	#sk_OCSP_ONEREQ_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_ONEREQ
, (°))

	)

1077 
	#sk_OCSP_RESPID_√w
(
°
Ë
	`SKM_sk_√w
(
OCSP_RESPID
, (°))

	)

1078 
	#sk_OCSP_RESPID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_RESPID
)

	)

1079 
	#sk_OCSP_RESPID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_RESPID
, (°))

	)

1080 
	#sk_OCSP_RESPID_num
(
°
Ë
	`SKM_sk_num
(
OCSP_RESPID
, (°))

	)

1081 
	#sk_OCSP_RESPID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_RESPID
, (°), (i))

	)

1082 
	#sk_OCSP_RESPID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_RESPID
, (°), (i), (vÆ))

	)

1083 
	#sk_OCSP_RESPID_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_RESPID
, (°))

	)

1084 
	#sk_OCSP_RESPID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_RESPID
, (°), (vÆ))

	)

1085 
	#sk_OCSP_RESPID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_RESPID
, (°), (vÆ))

	)

1086 
	#sk_OCSP_RESPID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_RESPID
, (°), (vÆ))

	)

1087 
	#sk_OCSP_RESPID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_RESPID
, (°), (vÆ))

	)

1088 
	#sk_OCSP_RESPID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_RESPID
, (°), (i))

	)

1089 
	#sk_OCSP_RESPID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_RESPID
, (°), (±r))

	)

1090 
	#sk_OCSP_RESPID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_RESPID
, (°), (vÆ), (i))

	)

1091 
	#sk_OCSP_RESPID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_RESPID
, (°), (cmp))

	)

1092 
	#sk_OCSP_RESPID_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_RESPID
, st)

	)

1093 
	#sk_OCSP_RESPID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_RESPID
, (°), (‰ì_func))

	)

1094 
	#sk_OCSP_RESPID_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_RESPID
, (°))

	)

1095 
	#sk_OCSP_RESPID_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_RESPID
, (°))

	)

1096 
	#sk_OCSP_RESPID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_RESPID
, (°))

	)

1097 
	#sk_OCSP_RESPID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_RESPID
, (°))

	)

1099 
	#sk_OCSP_SINGLERESP_√w
(
°
Ë
	`SKM_sk_√w
(
OCSP_SINGLERESP
, (°))

	)

1100 
	#sk_OCSP_SINGLERESP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_SINGLERESP
)

	)

1101 
	#sk_OCSP_SINGLERESP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_SINGLERESP
, (°))

	)

1102 
	#sk_OCSP_SINGLERESP_num
(
°
Ë
	`SKM_sk_num
(
OCSP_SINGLERESP
, (°))

	)

1103 
	#sk_OCSP_SINGLERESP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_SINGLERESP
, (°), (i))

	)

1104 
	#sk_OCSP_SINGLERESP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_SINGLERESP
, (°), (i), (vÆ))

	)

1105 
	#sk_OCSP_SINGLERESP_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_SINGLERESP
, (°))

	)

1106 
	#sk_OCSP_SINGLERESP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1107 
	#sk_OCSP_SINGLERESP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1108 
	#sk_OCSP_SINGLERESP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1109 
	#sk_OCSP_SINGLERESP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1110 
	#sk_OCSP_SINGLERESP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_SINGLERESP
, (°), (i))

	)

1111 
	#sk_OCSP_SINGLERESP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_SINGLERESP
, (°), (±r))

	)

1112 
	#sk_OCSP_SINGLERESP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_SINGLERESP
, (°), (vÆ), (i))

	)

1113 
	#sk_OCSP_SINGLERESP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_SINGLERESP
, (°), (cmp))

	)

1114 
	#sk_OCSP_SINGLERESP_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_SINGLERESP
, st)

	)

1115 
	#sk_OCSP_SINGLERESP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_SINGLERESP
, (°), (‰ì_func))

	)

1116 
	#sk_OCSP_SINGLERESP_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_SINGLERESP
, (°))

	)

1117 
	#sk_OCSP_SINGLERESP_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_SINGLERESP
, (°))

	)

1118 
	#sk_OCSP_SINGLERESP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_SINGLERESP
, (°))

	)

1119 
	#sk_OCSP_SINGLERESP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_SINGLERESP
, (°))

	)

1121 
	#sk_PKCS12_SAFEBAG_√w
(
°
Ë
	`SKM_sk_√w
(
PKCS12_SAFEBAG
, (°))

	)

1122 
	#sk_PKCS12_SAFEBAG_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS12_SAFEBAG
)

	)

1123 
	#sk_PKCS12_SAFEBAG_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS12_SAFEBAG
, (°))

	)

1124 
	#sk_PKCS12_SAFEBAG_num
(
°
Ë
	`SKM_sk_num
(
PKCS12_SAFEBAG
, (°))

	)

1125 
	#sk_PKCS12_SAFEBAG_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS12_SAFEBAG
, (°), (i))

	)

1126 
	#sk_PKCS12_SAFEBAG_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS12_SAFEBAG
, (°), (i), (vÆ))

	)

1127 
	#sk_PKCS12_SAFEBAG_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS12_SAFEBAG
, (°))

	)

1128 
	#sk_PKCS12_SAFEBAG_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1129 
	#sk_PKCS12_SAFEBAG_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1130 
	#sk_PKCS12_SAFEBAG_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1131 
	#sk_PKCS12_SAFEBAG_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1132 
	#sk_PKCS12_SAFEBAG_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS12_SAFEBAG
, (°), (i))

	)

1133 
	#sk_PKCS12_SAFEBAG_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS12_SAFEBAG
, (°), (±r))

	)

1134 
	#sk_PKCS12_SAFEBAG_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS12_SAFEBAG
, (°), (vÆ), (i))

	)

1135 
	#sk_PKCS12_SAFEBAG_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS12_SAFEBAG
, (°), (cmp))

	)

1136 
	#sk_PKCS12_SAFEBAG_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS12_SAFEBAG
, st)

	)

1137 
	#sk_PKCS12_SAFEBAG_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS12_SAFEBAG
, (°), (‰ì_func))

	)

1138 
	#sk_PKCS12_SAFEBAG_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS12_SAFEBAG
, (°))

	)

1139 
	#sk_PKCS12_SAFEBAG_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS12_SAFEBAG
, (°))

	)

1140 
	#sk_PKCS12_SAFEBAG_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS12_SAFEBAG
, (°))

	)

1141 
	#sk_PKCS12_SAFEBAG_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS12_SAFEBAG
, (°))

	)

1143 
	#sk_PKCS7_√w
(
°
Ë
	`SKM_sk_√w
(
PKCS7
, (°))

	)

1144 
	#sk_PKCS7_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7
)

	)

1145 
	#sk_PKCS7_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7
, (°))

	)

1146 
	#sk_PKCS7_num
(
°
Ë
	`SKM_sk_num
(
PKCS7
, (°))

	)

1147 
	#sk_PKCS7_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7
, (°), (i))

	)

1148 
	#sk_PKCS7_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7
, (°), (i), (vÆ))

	)

1149 
	#sk_PKCS7_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7
, (°))

	)

1150 
	#sk_PKCS7_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7
, (°), (vÆ))

	)

1151 
	#sk_PKCS7_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7
, (°), (vÆ))

	)

1152 
	#sk_PKCS7_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7
, (°), (vÆ))

	)

1153 
	#sk_PKCS7_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7
, (°), (vÆ))

	)

1154 
	#sk_PKCS7_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7
, (°), (i))

	)

1155 
	#sk_PKCS7_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7
, (°), (±r))

	)

1156 
	#sk_PKCS7_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7
, (°), (vÆ), (i))

	)

1157 
	#sk_PKCS7_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7
, (°), (cmp))

	)

1158 
	#sk_PKCS7_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7
, st)

	)

1159 
	#sk_PKCS7_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7
, (°), (‰ì_func))

	)

1160 
	#sk_PKCS7_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7
, (°))

	)

1161 
	#sk_PKCS7_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7
, (°))

	)

1162 
	#sk_PKCS7_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7
, (°))

	)

1163 
	#sk_PKCS7_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7
, (°))

	)

1165 
	#sk_PKCS7_RECIP_INFO_√w
(
°
Ë
	`SKM_sk_√w
(
PKCS7_RECIP_INFO
, (°))

	)

1166 
	#sk_PKCS7_RECIP_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7_RECIP_INFO
)

	)

1167 
	#sk_PKCS7_RECIP_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7_RECIP_INFO
, (°))

	)

1168 
	#sk_PKCS7_RECIP_INFO_num
(
°
Ë
	`SKM_sk_num
(
PKCS7_RECIP_INFO
, (°))

	)

1169 
	#sk_PKCS7_RECIP_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7_RECIP_INFO
, (°), (i))

	)

1170 
	#sk_PKCS7_RECIP_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7_RECIP_INFO
, (°), (i), (vÆ))

	)

1171 
	#sk_PKCS7_RECIP_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7_RECIP_INFO
, (°))

	)

1172 
	#sk_PKCS7_RECIP_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1173 
	#sk_PKCS7_RECIP_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1174 
	#sk_PKCS7_RECIP_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1175 
	#sk_PKCS7_RECIP_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1176 
	#sk_PKCS7_RECIP_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7_RECIP_INFO
, (°), (i))

	)

1177 
	#sk_PKCS7_RECIP_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7_RECIP_INFO
, (°), (±r))

	)

1178 
	#sk_PKCS7_RECIP_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7_RECIP_INFO
, (°), (vÆ), (i))

	)

1179 
	#sk_PKCS7_RECIP_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7_RECIP_INFO
, (°), (cmp))

	)

1180 
	#sk_PKCS7_RECIP_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7_RECIP_INFO
, st)

	)

1181 
	#sk_PKCS7_RECIP_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7_RECIP_INFO
, (°), (‰ì_func))

	)

1182 
	#sk_PKCS7_RECIP_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7_RECIP_INFO
, (°))

	)

1183 
	#sk_PKCS7_RECIP_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7_RECIP_INFO
, (°))

	)

1184 
	#sk_PKCS7_RECIP_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7_RECIP_INFO
, (°))

	)

1185 
	#sk_PKCS7_RECIP_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7_RECIP_INFO
, (°))

	)

1187 
	#sk_PKCS7_SIGNER_INFO_√w
(
°
Ë
	`SKM_sk_√w
(
PKCS7_SIGNER_INFO
, (°))

	)

1188 
	#sk_PKCS7_SIGNER_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7_SIGNER_INFO
)

	)

1189 
	#sk_PKCS7_SIGNER_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7_SIGNER_INFO
, (°))

	)

1190 
	#sk_PKCS7_SIGNER_INFO_num
(
°
Ë
	`SKM_sk_num
(
PKCS7_SIGNER_INFO
, (°))

	)

1191 
	#sk_PKCS7_SIGNER_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7_SIGNER_INFO
, (°), (i))

	)

1192 
	#sk_PKCS7_SIGNER_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7_SIGNER_INFO
, (°), (i), (vÆ))

	)

1193 
	#sk_PKCS7_SIGNER_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7_SIGNER_INFO
, (°))

	)

1194 
	#sk_PKCS7_SIGNER_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1195 
	#sk_PKCS7_SIGNER_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1196 
	#sk_PKCS7_SIGNER_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1197 
	#sk_PKCS7_SIGNER_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1198 
	#sk_PKCS7_SIGNER_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7_SIGNER_INFO
, (°), (i))

	)

1199 
	#sk_PKCS7_SIGNER_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7_SIGNER_INFO
, (°), (±r))

	)

1200 
	#sk_PKCS7_SIGNER_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7_SIGNER_INFO
, (°), (vÆ), (i))

	)

1201 
	#sk_PKCS7_SIGNER_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7_SIGNER_INFO
, (°), (cmp))

	)

1202 
	#sk_PKCS7_SIGNER_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7_SIGNER_INFO
, st)

	)

1203 
	#sk_PKCS7_SIGNER_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7_SIGNER_INFO
, (°), (‰ì_func))

	)

1204 
	#sk_PKCS7_SIGNER_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7_SIGNER_INFO
, (°))

	)

1205 
	#sk_PKCS7_SIGNER_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7_SIGNER_INFO
, (°))

	)

1206 
	#sk_PKCS7_SIGNER_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7_SIGNER_INFO
, (°))

	)

1207 
	#sk_PKCS7_SIGNER_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7_SIGNER_INFO
, (°))

	)

1209 
	#sk_POLICYINFO_√w
(
°
Ë
	`SKM_sk_√w
(
POLICYINFO
, (°))

	)

1210 
	#sk_POLICYINFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICYINFO
)

	)

1211 
	#sk_POLICYINFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICYINFO
, (°))

	)

1212 
	#sk_POLICYINFO_num
(
°
Ë
	`SKM_sk_num
(
POLICYINFO
, (°))

	)

1213 
	#sk_POLICYINFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICYINFO
, (°), (i))

	)

1214 
	#sk_POLICYINFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICYINFO
, (°), (i), (vÆ))

	)

1215 
	#sk_POLICYINFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICYINFO
, (°))

	)

1216 
	#sk_POLICYINFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICYINFO
, (°), (vÆ))

	)

1217 
	#sk_POLICYINFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICYINFO
, (°), (vÆ))

	)

1218 
	#sk_POLICYINFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICYINFO
, (°), (vÆ))

	)

1219 
	#sk_POLICYINFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICYINFO
, (°), (vÆ))

	)

1220 
	#sk_POLICYINFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICYINFO
, (°), (i))

	)

1221 
	#sk_POLICYINFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICYINFO
, (°), (±r))

	)

1222 
	#sk_POLICYINFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICYINFO
, (°), (vÆ), (i))

	)

1223 
	#sk_POLICYINFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICYINFO
, (°), (cmp))

	)

1224 
	#sk_POLICYINFO_dup
(
°
Ë
	`SKM_sk_dup
(
POLICYINFO
, st)

	)

1225 
	#sk_POLICYINFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICYINFO
, (°), (‰ì_func))

	)

1226 
	#sk_POLICYINFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICYINFO
, (°))

	)

1227 
	#sk_POLICYINFO_p›
(
°
Ë
	`SKM_sk_p›
(
POLICYINFO
, (°))

	)

1228 
	#sk_POLICYINFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICYINFO
, (°))

	)

1229 
	#sk_POLICYINFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICYINFO
, (°))

	)

1231 
	#sk_POLICYQUALINFO_√w
(
°
Ë
	`SKM_sk_√w
(
POLICYQUALINFO
, (°))

	)

1232 
	#sk_POLICYQUALINFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICYQUALINFO
)

	)

1233 
	#sk_POLICYQUALINFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICYQUALINFO
, (°))

	)

1234 
	#sk_POLICYQUALINFO_num
(
°
Ë
	`SKM_sk_num
(
POLICYQUALINFO
, (°))

	)

1235 
	#sk_POLICYQUALINFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICYQUALINFO
, (°), (i))

	)

1236 
	#sk_POLICYQUALINFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICYQUALINFO
, (°), (i), (vÆ))

	)

1237 
	#sk_POLICYQUALINFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICYQUALINFO
, (°))

	)

1238 
	#sk_POLICYQUALINFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICYQUALINFO
, (°), (vÆ))

	)

1239 
	#sk_POLICYQUALINFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICYQUALINFO
, (°), (vÆ))

	)

1240 
	#sk_POLICYQUALINFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICYQUALINFO
, (°), (vÆ))

	)

1241 
	#sk_POLICYQUALINFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICYQUALINFO
, (°), (vÆ))

	)

1242 
	#sk_POLICYQUALINFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICYQUALINFO
, (°), (i))

	)

1243 
	#sk_POLICYQUALINFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICYQUALINFO
, (°), (±r))

	)

1244 
	#sk_POLICYQUALINFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICYQUALINFO
, (°), (vÆ), (i))

	)

1245 
	#sk_POLICYQUALINFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICYQUALINFO
, (°), (cmp))

	)

1246 
	#sk_POLICYQUALINFO_dup
(
°
Ë
	`SKM_sk_dup
(
POLICYQUALINFO
, st)

	)

1247 
	#sk_POLICYQUALINFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICYQUALINFO
, (°), (‰ì_func))

	)

1248 
	#sk_POLICYQUALINFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICYQUALINFO
, (°))

	)

1249 
	#sk_POLICYQUALINFO_p›
(
°
Ë
	`SKM_sk_p›
(
POLICYQUALINFO
, (°))

	)

1250 
	#sk_POLICYQUALINFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICYQUALINFO
, (°))

	)

1251 
	#sk_POLICYQUALINFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICYQUALINFO
, (°))

	)

1253 
	#sk_POLICY_MAPPING_√w
(
°
Ë
	`SKM_sk_√w
(
POLICY_MAPPING
, (°))

	)

1254 
	#sk_POLICY_MAPPING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICY_MAPPING
)

	)

1255 
	#sk_POLICY_MAPPING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICY_MAPPING
, (°))

	)

1256 
	#sk_POLICY_MAPPING_num
(
°
Ë
	`SKM_sk_num
(
POLICY_MAPPING
, (°))

	)

1257 
	#sk_POLICY_MAPPING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICY_MAPPING
, (°), (i))

	)

1258 
	#sk_POLICY_MAPPING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICY_MAPPING
, (°), (i), (vÆ))

	)

1259 
	#sk_POLICY_MAPPING_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICY_MAPPING
, (°))

	)

1260 
	#sk_POLICY_MAPPING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICY_MAPPING
, (°), (vÆ))

	)

1261 
	#sk_POLICY_MAPPING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICY_MAPPING
, (°), (vÆ))

	)

1262 
	#sk_POLICY_MAPPING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICY_MAPPING
, (°), (vÆ))

	)

1263 
	#sk_POLICY_MAPPING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICY_MAPPING
, (°), (vÆ))

	)

1264 
	#sk_POLICY_MAPPING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICY_MAPPING
, (°), (i))

	)

1265 
	#sk_POLICY_MAPPING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICY_MAPPING
, (°), (±r))

	)

1266 
	#sk_POLICY_MAPPING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICY_MAPPING
, (°), (vÆ), (i))

	)

1267 
	#sk_POLICY_MAPPING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICY_MAPPING
, (°), (cmp))

	)

1268 
	#sk_POLICY_MAPPING_dup
(
°
Ë
	`SKM_sk_dup
(
POLICY_MAPPING
, st)

	)

1269 
	#sk_POLICY_MAPPING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICY_MAPPING
, (°), (‰ì_func))

	)

1270 
	#sk_POLICY_MAPPING_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICY_MAPPING
, (°))

	)

1271 
	#sk_POLICY_MAPPING_p›
(
°
Ë
	`SKM_sk_p›
(
POLICY_MAPPING
, (°))

	)

1272 
	#sk_POLICY_MAPPING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICY_MAPPING
, (°))

	)

1273 
	#sk_POLICY_MAPPING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICY_MAPPING
, (°))

	)

1275 
	#sk_SSL_CIPHER_√w
(
°
Ë
	`SKM_sk_√w
(
SSL_CIPHER
, (°))

	)

1276 
	#sk_SSL_CIPHER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SSL_CIPHER
)

	)

1277 
	#sk_SSL_CIPHER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SSL_CIPHER
, (°))

	)

1278 
	#sk_SSL_CIPHER_num
(
°
Ë
	`SKM_sk_num
(
SSL_CIPHER
, (°))

	)

1279 
	#sk_SSL_CIPHER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SSL_CIPHER
, (°), (i))

	)

1280 
	#sk_SSL_CIPHER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SSL_CIPHER
, (°), (i), (vÆ))

	)

1281 
	#sk_SSL_CIPHER_zîo
(
°
Ë
	`SKM_sk_zîo
(
SSL_CIPHER
, (°))

	)

1282 
	#sk_SSL_CIPHER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SSL_CIPHER
, (°), (vÆ))

	)

1283 
	#sk_SSL_CIPHER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SSL_CIPHER
, (°), (vÆ))

	)

1284 
	#sk_SSL_CIPHER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SSL_CIPHER
, (°), (vÆ))

	)

1285 
	#sk_SSL_CIPHER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SSL_CIPHER
, (°), (vÆ))

	)

1286 
	#sk_SSL_CIPHER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SSL_CIPHER
, (°), (i))

	)

1287 
	#sk_SSL_CIPHER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SSL_CIPHER
, (°), (±r))

	)

1288 
	#sk_SSL_CIPHER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SSL_CIPHER
, (°), (vÆ), (i))

	)

1289 
	#sk_SSL_CIPHER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SSL_CIPHER
, (°), (cmp))

	)

1290 
	#sk_SSL_CIPHER_dup
(
°
Ë
	`SKM_sk_dup
(
SSL_CIPHER
, st)

	)

1291 
	#sk_SSL_CIPHER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SSL_CIPHER
, (°), (‰ì_func))

	)

1292 
	#sk_SSL_CIPHER_shi·
(
°
Ë
	`SKM_sk_shi·
(
SSL_CIPHER
, (°))

	)

1293 
	#sk_SSL_CIPHER_p›
(
°
Ë
	`SKM_sk_p›
(
SSL_CIPHER
, (°))

	)

1294 
	#sk_SSL_CIPHER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SSL_CIPHER
, (°))

	)

1295 
	#sk_SSL_CIPHER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SSL_CIPHER
, (°))

	)

1297 
	#sk_SSL_COMP_√w
(
°
Ë
	`SKM_sk_√w
(
SSL_COMP
, (°))

	)

1298 
	#sk_SSL_COMP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SSL_COMP
)

	)

1299 
	#sk_SSL_COMP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SSL_COMP
, (°))

	)

1300 
	#sk_SSL_COMP_num
(
°
Ë
	`SKM_sk_num
(
SSL_COMP
, (°))

	)

1301 
	#sk_SSL_COMP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SSL_COMP
, (°), (i))

	)

1302 
	#sk_SSL_COMP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SSL_COMP
, (°), (i), (vÆ))

	)

1303 
	#sk_SSL_COMP_zîo
(
°
Ë
	`SKM_sk_zîo
(
SSL_COMP
, (°))

	)

1304 
	#sk_SSL_COMP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SSL_COMP
, (°), (vÆ))

	)

1305 
	#sk_SSL_COMP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SSL_COMP
, (°), (vÆ))

	)

1306 
	#sk_SSL_COMP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SSL_COMP
, (°), (vÆ))

	)

1307 
	#sk_SSL_COMP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SSL_COMP
, (°), (vÆ))

	)

1308 
	#sk_SSL_COMP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SSL_COMP
, (°), (i))

	)

1309 
	#sk_SSL_COMP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SSL_COMP
, (°), (±r))

	)

1310 
	#sk_SSL_COMP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SSL_COMP
, (°), (vÆ), (i))

	)

1311 
	#sk_SSL_COMP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SSL_COMP
, (°), (cmp))

	)

1312 
	#sk_SSL_COMP_dup
(
°
Ë
	`SKM_sk_dup
(
SSL_COMP
, st)

	)

1313 
	#sk_SSL_COMP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SSL_COMP
, (°), (‰ì_func))

	)

1314 
	#sk_SSL_COMP_shi·
(
°
Ë
	`SKM_sk_shi·
(
SSL_COMP
, (°))

	)

1315 
	#sk_SSL_COMP_p›
(
°
Ë
	`SKM_sk_p›
(
SSL_COMP
, (°))

	)

1316 
	#sk_SSL_COMP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SSL_COMP
, (°))

	)

1317 
	#sk_SSL_COMP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SSL_COMP
, (°))

	)

1319 
	#sk_STORE_OBJECT_√w
(
°
Ë
	`SKM_sk_√w
(
STORE_OBJECT
, (°))

	)

1320 
	#sk_STORE_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STORE_OBJECT
)

	)

1321 
	#sk_STORE_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STORE_OBJECT
, (°))

	)

1322 
	#sk_STORE_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
STORE_OBJECT
, (°))

	)

1323 
	#sk_STORE_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STORE_OBJECT
, (°), (i))

	)

1324 
	#sk_STORE_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STORE_OBJECT
, (°), (i), (vÆ))

	)

1325 
	#sk_STORE_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
STORE_OBJECT
, (°))

	)

1326 
	#sk_STORE_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STORE_OBJECT
, (°), (vÆ))

	)

1327 
	#sk_STORE_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STORE_OBJECT
, (°), (vÆ))

	)

1328 
	#sk_STORE_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STORE_OBJECT
, (°), (vÆ))

	)

1329 
	#sk_STORE_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STORE_OBJECT
, (°), (vÆ))

	)

1330 
	#sk_STORE_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STORE_OBJECT
, (°), (i))

	)

1331 
	#sk_STORE_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STORE_OBJECT
, (°), (±r))

	)

1332 
	#sk_STORE_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STORE_OBJECT
, (°), (vÆ), (i))

	)

1333 
	#sk_STORE_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STORE_OBJECT
, (°), (cmp))

	)

1334 
	#sk_STORE_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
STORE_OBJECT
, st)

	)

1335 
	#sk_STORE_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STORE_OBJECT
, (°), (‰ì_func))

	)

1336 
	#sk_STORE_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
STORE_OBJECT
, (°))

	)

1337 
	#sk_STORE_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
STORE_OBJECT
, (°))

	)

1338 
	#sk_STORE_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STORE_OBJECT
, (°))

	)

1339 
	#sk_STORE_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STORE_OBJECT
, (°))

	)

1341 
	#sk_SXNETID_√w
(
°
Ë
	`SKM_sk_√w
(
SXNETID
, (°))

	)

1342 
	#sk_SXNETID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SXNETID
)

	)

1343 
	#sk_SXNETID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SXNETID
, (°))

	)

1344 
	#sk_SXNETID_num
(
°
Ë
	`SKM_sk_num
(
SXNETID
, (°))

	)

1345 
	#sk_SXNETID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SXNETID
, (°), (i))

	)

1346 
	#sk_SXNETID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SXNETID
, (°), (i), (vÆ))

	)

1347 
	#sk_SXNETID_zîo
(
°
Ë
	`SKM_sk_zîo
(
SXNETID
, (°))

	)

1348 
	#sk_SXNETID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SXNETID
, (°), (vÆ))

	)

1349 
	#sk_SXNETID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SXNETID
, (°), (vÆ))

	)

1350 
	#sk_SXNETID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SXNETID
, (°), (vÆ))

	)

1351 
	#sk_SXNETID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SXNETID
, (°), (vÆ))

	)

1352 
	#sk_SXNETID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SXNETID
, (°), (i))

	)

1353 
	#sk_SXNETID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SXNETID
, (°), (±r))

	)

1354 
	#sk_SXNETID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SXNETID
, (°), (vÆ), (i))

	)

1355 
	#sk_SXNETID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SXNETID
, (°), (cmp))

	)

1356 
	#sk_SXNETID_dup
(
°
Ë
	`SKM_sk_dup
(
SXNETID
, st)

	)

1357 
	#sk_SXNETID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SXNETID
, (°), (‰ì_func))

	)

1358 
	#sk_SXNETID_shi·
(
°
Ë
	`SKM_sk_shi·
(
SXNETID
, (°))

	)

1359 
	#sk_SXNETID_p›
(
°
Ë
	`SKM_sk_p›
(
SXNETID
, (°))

	)

1360 
	#sk_SXNETID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SXNETID
, (°))

	)

1361 
	#sk_SXNETID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SXNETID
, (°))

	)

1363 
	#sk_UI_STRING_√w
(
°
Ë
	`SKM_sk_√w
(
UI_STRING
, (°))

	)

1364 
	#sk_UI_STRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
UI_STRING
)

	)

1365 
	#sk_UI_STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
UI_STRING
, (°))

	)

1366 
	#sk_UI_STRING_num
(
°
Ë
	`SKM_sk_num
(
UI_STRING
, (°))

	)

1367 
	#sk_UI_STRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
UI_STRING
, (°), (i))

	)

1368 
	#sk_UI_STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
UI_STRING
, (°), (i), (vÆ))

	)

1369 
	#sk_UI_STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
UI_STRING
, (°))

	)

1370 
	#sk_UI_STRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
UI_STRING
, (°), (vÆ))

	)

1371 
	#sk_UI_STRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
UI_STRING
, (°), (vÆ))

	)

1372 
	#sk_UI_STRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
UI_STRING
, (°), (vÆ))

	)

1373 
	#sk_UI_STRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
UI_STRING
, (°), (vÆ))

	)

1374 
	#sk_UI_STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
UI_STRING
, (°), (i))

	)

1375 
	#sk_UI_STRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
UI_STRING
, (°), (±r))

	)

1376 
	#sk_UI_STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
UI_STRING
, (°), (vÆ), (i))

	)

1377 
	#sk_UI_STRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
UI_STRING
, (°), (cmp))

	)

1378 
	#sk_UI_STRING_dup
(
°
Ë
	`SKM_sk_dup
(
UI_STRING
, st)

	)

1379 
	#sk_UI_STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
UI_STRING
, (°), (‰ì_func))

	)

1380 
	#sk_UI_STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
UI_STRING
, (°))

	)

1381 
	#sk_UI_STRING_p›
(
°
Ë
	`SKM_sk_p›
(
UI_STRING
, (°))

	)

1382 
	#sk_UI_STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
UI_STRING
, (°))

	)

1383 
	#sk_UI_STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
UI_STRING
, (°))

	)

1385 
	#sk_X509_√w
(
°
Ë
	`SKM_sk_√w
(
X509
, (°))

	)

1386 
	#sk_X509_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509
)

	)

1387 
	#sk_X509_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509
, (°))

	)

1388 
	#sk_X509_num
(
°
Ë
	`SKM_sk_num
(
X509
, (°))

	)

1389 
	#sk_X509_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509
, (°), (i))

	)

1390 
	#sk_X509_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509
, (°), (i), (vÆ))

	)

1391 
	#sk_X509_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509
, (°))

	)

1392 
	#sk_X509_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509
, (°), (vÆ))

	)

1393 
	#sk_X509_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509
, (°), (vÆ))

	)

1394 
	#sk_X509_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509
, (°), (vÆ))

	)

1395 
	#sk_X509_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509
, (°), (vÆ))

	)

1396 
	#sk_X509_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509
, (°), (i))

	)

1397 
	#sk_X509_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509
, (°), (±r))

	)

1398 
	#sk_X509_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509
, (°), (vÆ), (i))

	)

1399 
	#sk_X509_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509
, (°), (cmp))

	)

1400 
	#sk_X509_dup
(
°
Ë
	`SKM_sk_dup
(
X509
, st)

	)

1401 
	#sk_X509_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509
, (°), (‰ì_func))

	)

1402 
	#sk_X509_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509
, (°))

	)

1403 
	#sk_X509_p›
(
°
Ë
	`SKM_sk_p›
(
X509
, (°))

	)

1404 
	#sk_X509_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509
, (°))

	)

1405 
	#sk_X509_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509
, (°))

	)

1407 
	#sk_X509V3_EXT_METHOD_√w
(
°
Ë
	`SKM_sk_√w
(
X509V3_EXT_METHOD
, (°))

	)

1408 
	#sk_X509V3_EXT_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509V3_EXT_METHOD
)

	)

1409 
	#sk_X509V3_EXT_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509V3_EXT_METHOD
, (°))

	)

1410 
	#sk_X509V3_EXT_METHOD_num
(
°
Ë
	`SKM_sk_num
(
X509V3_EXT_METHOD
, (°))

	)

1411 
	#sk_X509V3_EXT_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509V3_EXT_METHOD
, (°), (i))

	)

1412 
	#sk_X509V3_EXT_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509V3_EXT_METHOD
, (°), (i), (vÆ))

	)

1413 
	#sk_X509V3_EXT_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509V3_EXT_METHOD
, (°))

	)

1414 
	#sk_X509V3_EXT_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1415 
	#sk_X509V3_EXT_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1416 
	#sk_X509V3_EXT_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1417 
	#sk_X509V3_EXT_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1418 
	#sk_X509V3_EXT_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509V3_EXT_METHOD
, (°), (i))

	)

1419 
	#sk_X509V3_EXT_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509V3_EXT_METHOD
, (°), (±r))

	)

1420 
	#sk_X509V3_EXT_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509V3_EXT_METHOD
, (°), (vÆ), (i))

	)

1421 
	#sk_X509V3_EXT_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509V3_EXT_METHOD
, (°), (cmp))

	)

1422 
	#sk_X509V3_EXT_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
X509V3_EXT_METHOD
, st)

	)

1423 
	#sk_X509V3_EXT_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509V3_EXT_METHOD
, (°), (‰ì_func))

	)

1424 
	#sk_X509V3_EXT_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509V3_EXT_METHOD
, (°))

	)

1425 
	#sk_X509V3_EXT_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
X509V3_EXT_METHOD
, (°))

	)

1426 
	#sk_X509V3_EXT_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509V3_EXT_METHOD
, (°))

	)

1427 
	#sk_X509V3_EXT_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509V3_EXT_METHOD
, (°))

	)

1429 
	#sk_X509_ALGOR_√w
(
°
Ë
	`SKM_sk_√w
(
X509_ALGOR
, (°))

	)

1430 
	#sk_X509_ALGOR_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_ALGOR
)

	)

1431 
	#sk_X509_ALGOR_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_ALGOR
, (°))

	)

1432 
	#sk_X509_ALGOR_num
(
°
Ë
	`SKM_sk_num
(
X509_ALGOR
, (°))

	)

1433 
	#sk_X509_ALGOR_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_ALGOR
, (°), (i))

	)

1434 
	#sk_X509_ALGOR_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_ALGOR
, (°), (i), (vÆ))

	)

1435 
	#sk_X509_ALGOR_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_ALGOR
, (°))

	)

1436 
	#sk_X509_ALGOR_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_ALGOR
, (°), (vÆ))

	)

1437 
	#sk_X509_ALGOR_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_ALGOR
, (°), (vÆ))

	)

1438 
	#sk_X509_ALGOR_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_ALGOR
, (°), (vÆ))

	)

1439 
	#sk_X509_ALGOR_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_ALGOR
, (°), (vÆ))

	)

1440 
	#sk_X509_ALGOR_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_ALGOR
, (°), (i))

	)

1441 
	#sk_X509_ALGOR_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_ALGOR
, (°), (±r))

	)

1442 
	#sk_X509_ALGOR_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_ALGOR
, (°), (vÆ), (i))

	)

1443 
	#sk_X509_ALGOR_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_ALGOR
, (°), (cmp))

	)

1444 
	#sk_X509_ALGOR_dup
(
°
Ë
	`SKM_sk_dup
(
X509_ALGOR
, st)

	)

1445 
	#sk_X509_ALGOR_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_ALGOR
, (°), (‰ì_func))

	)

1446 
	#sk_X509_ALGOR_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_ALGOR
, (°))

	)

1447 
	#sk_X509_ALGOR_p›
(
°
Ë
	`SKM_sk_p›
(
X509_ALGOR
, (°))

	)

1448 
	#sk_X509_ALGOR_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_ALGOR
, (°))

	)

1449 
	#sk_X509_ALGOR_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_ALGOR
, (°))

	)

1451 
	#sk_X509_ATTRIBUTE_√w
(
°
Ë
	`SKM_sk_√w
(
X509_ATTRIBUTE
, (°))

	)

1452 
	#sk_X509_ATTRIBUTE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_ATTRIBUTE
)

	)

1453 
	#sk_X509_ATTRIBUTE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_ATTRIBUTE
, (°))

	)

1454 
	#sk_X509_ATTRIBUTE_num
(
°
Ë
	`SKM_sk_num
(
X509_ATTRIBUTE
, (°))

	)

1455 
	#sk_X509_ATTRIBUTE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_ATTRIBUTE
, (°), (i))

	)

1456 
	#sk_X509_ATTRIBUTE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_ATTRIBUTE
, (°), (i), (vÆ))

	)

1457 
	#sk_X509_ATTRIBUTE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_ATTRIBUTE
, (°))

	)

1458 
	#sk_X509_ATTRIBUTE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1459 
	#sk_X509_ATTRIBUTE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1460 
	#sk_X509_ATTRIBUTE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1461 
	#sk_X509_ATTRIBUTE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1462 
	#sk_X509_ATTRIBUTE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_ATTRIBUTE
, (°), (i))

	)

1463 
	#sk_X509_ATTRIBUTE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_ATTRIBUTE
, (°), (±r))

	)

1464 
	#sk_X509_ATTRIBUTE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_ATTRIBUTE
, (°), (vÆ), (i))

	)

1465 
	#sk_X509_ATTRIBUTE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_ATTRIBUTE
, (°), (cmp))

	)

1466 
	#sk_X509_ATTRIBUTE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_ATTRIBUTE
, st)

	)

1467 
	#sk_X509_ATTRIBUTE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_ATTRIBUTE
, (°), (‰ì_func))

	)

1468 
	#sk_X509_ATTRIBUTE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_ATTRIBUTE
, (°))

	)

1469 
	#sk_X509_ATTRIBUTE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_ATTRIBUTE
, (°))

	)

1470 
	#sk_X509_ATTRIBUTE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_ATTRIBUTE
, (°))

	)

1471 
	#sk_X509_ATTRIBUTE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_ATTRIBUTE
, (°))

	)

1473 
	#sk_X509_CRL_√w
(
°
Ë
	`SKM_sk_√w
(
X509_CRL
, (°))

	)

1474 
	#sk_X509_CRL_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_CRL
)

	)

1475 
	#sk_X509_CRL_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_CRL
, (°))

	)

1476 
	#sk_X509_CRL_num
(
°
Ë
	`SKM_sk_num
(
X509_CRL
, (°))

	)

1477 
	#sk_X509_CRL_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_CRL
, (°), (i))

	)

1478 
	#sk_X509_CRL_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_CRL
, (°), (i), (vÆ))

	)

1479 
	#sk_X509_CRL_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_CRL
, (°))

	)

1480 
	#sk_X509_CRL_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_CRL
, (°), (vÆ))

	)

1481 
	#sk_X509_CRL_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_CRL
, (°), (vÆ))

	)

1482 
	#sk_X509_CRL_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_CRL
, (°), (vÆ))

	)

1483 
	#sk_X509_CRL_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_CRL
, (°), (vÆ))

	)

1484 
	#sk_X509_CRL_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_CRL
, (°), (i))

	)

1485 
	#sk_X509_CRL_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_CRL
, (°), (±r))

	)

1486 
	#sk_X509_CRL_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_CRL
, (°), (vÆ), (i))

	)

1487 
	#sk_X509_CRL_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_CRL
, (°), (cmp))

	)

1488 
	#sk_X509_CRL_dup
(
°
Ë
	`SKM_sk_dup
(
X509_CRL
, st)

	)

1489 
	#sk_X509_CRL_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_CRL
, (°), (‰ì_func))

	)

1490 
	#sk_X509_CRL_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_CRL
, (°))

	)

1491 
	#sk_X509_CRL_p›
(
°
Ë
	`SKM_sk_p›
(
X509_CRL
, (°))

	)

1492 
	#sk_X509_CRL_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_CRL
, (°))

	)

1493 
	#sk_X509_CRL_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_CRL
, (°))

	)

1495 
	#sk_X509_EXTENSION_√w
(
°
Ë
	`SKM_sk_√w
(
X509_EXTENSION
, (°))

	)

1496 
	#sk_X509_EXTENSION_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_EXTENSION
)

	)

1497 
	#sk_X509_EXTENSION_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_EXTENSION
, (°))

	)

1498 
	#sk_X509_EXTENSION_num
(
°
Ë
	`SKM_sk_num
(
X509_EXTENSION
, (°))

	)

1499 
	#sk_X509_EXTENSION_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_EXTENSION
, (°), (i))

	)

1500 
	#sk_X509_EXTENSION_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_EXTENSION
, (°), (i), (vÆ))

	)

1501 
	#sk_X509_EXTENSION_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_EXTENSION
, (°))

	)

1502 
	#sk_X509_EXTENSION_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_EXTENSION
, (°), (vÆ))

	)

1503 
	#sk_X509_EXTENSION_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_EXTENSION
, (°), (vÆ))

	)

1504 
	#sk_X509_EXTENSION_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_EXTENSION
, (°), (vÆ))

	)

1505 
	#sk_X509_EXTENSION_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_EXTENSION
, (°), (vÆ))

	)

1506 
	#sk_X509_EXTENSION_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_EXTENSION
, (°), (i))

	)

1507 
	#sk_X509_EXTENSION_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_EXTENSION
, (°), (±r))

	)

1508 
	#sk_X509_EXTENSION_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_EXTENSION
, (°), (vÆ), (i))

	)

1509 
	#sk_X509_EXTENSION_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_EXTENSION
, (°), (cmp))

	)

1510 
	#sk_X509_EXTENSION_dup
(
°
Ë
	`SKM_sk_dup
(
X509_EXTENSION
, st)

	)

1511 
	#sk_X509_EXTENSION_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_EXTENSION
, (°), (‰ì_func))

	)

1512 
	#sk_X509_EXTENSION_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_EXTENSION
, (°))

	)

1513 
	#sk_X509_EXTENSION_p›
(
°
Ë
	`SKM_sk_p›
(
X509_EXTENSION
, (°))

	)

1514 
	#sk_X509_EXTENSION_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_EXTENSION
, (°))

	)

1515 
	#sk_X509_EXTENSION_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_EXTENSION
, (°))

	)

1517 
	#sk_X509_INFO_√w
(
°
Ë
	`SKM_sk_√w
(
X509_INFO
, (°))

	)

1518 
	#sk_X509_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_INFO
)

	)

1519 
	#sk_X509_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_INFO
, (°))

	)

1520 
	#sk_X509_INFO_num
(
°
Ë
	`SKM_sk_num
(
X509_INFO
, (°))

	)

1521 
	#sk_X509_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_INFO
, (°), (i))

	)

1522 
	#sk_X509_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_INFO
, (°), (i), (vÆ))

	)

1523 
	#sk_X509_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_INFO
, (°))

	)

1524 
	#sk_X509_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_INFO
, (°), (vÆ))

	)

1525 
	#sk_X509_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_INFO
, (°), (vÆ))

	)

1526 
	#sk_X509_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_INFO
, (°), (vÆ))

	)

1527 
	#sk_X509_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_INFO
, (°), (vÆ))

	)

1528 
	#sk_X509_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_INFO
, (°), (i))

	)

1529 
	#sk_X509_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_INFO
, (°), (±r))

	)

1530 
	#sk_X509_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_INFO
, (°), (vÆ), (i))

	)

1531 
	#sk_X509_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_INFO
, (°), (cmp))

	)

1532 
	#sk_X509_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
X509_INFO
, st)

	)

1533 
	#sk_X509_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_INFO
, (°), (‰ì_func))

	)

1534 
	#sk_X509_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_INFO
, (°))

	)

1535 
	#sk_X509_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
X509_INFO
, (°))

	)

1536 
	#sk_X509_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_INFO
, (°))

	)

1537 
	#sk_X509_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_INFO
, (°))

	)

1539 
	#sk_X509_LOOKUP_√w
(
°
Ë
	`SKM_sk_√w
(
X509_LOOKUP
, (°))

	)

1540 
	#sk_X509_LOOKUP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_LOOKUP
)

	)

1541 
	#sk_X509_LOOKUP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_LOOKUP
, (°))

	)

1542 
	#sk_X509_LOOKUP_num
(
°
Ë
	`SKM_sk_num
(
X509_LOOKUP
, (°))

	)

1543 
	#sk_X509_LOOKUP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_LOOKUP
, (°), (i))

	)

1544 
	#sk_X509_LOOKUP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_LOOKUP
, (°), (i), (vÆ))

	)

1545 
	#sk_X509_LOOKUP_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_LOOKUP
, (°))

	)

1546 
	#sk_X509_LOOKUP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_LOOKUP
, (°), (vÆ))

	)

1547 
	#sk_X509_LOOKUP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_LOOKUP
, (°), (vÆ))

	)

1548 
	#sk_X509_LOOKUP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_LOOKUP
, (°), (vÆ))

	)

1549 
	#sk_X509_LOOKUP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_LOOKUP
, (°), (vÆ))

	)

1550 
	#sk_X509_LOOKUP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_LOOKUP
, (°), (i))

	)

1551 
	#sk_X509_LOOKUP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_LOOKUP
, (°), (±r))

	)

1552 
	#sk_X509_LOOKUP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_LOOKUP
, (°), (vÆ), (i))

	)

1553 
	#sk_X509_LOOKUP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_LOOKUP
, (°), (cmp))

	)

1554 
	#sk_X509_LOOKUP_dup
(
°
Ë
	`SKM_sk_dup
(
X509_LOOKUP
, st)

	)

1555 
	#sk_X509_LOOKUP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_LOOKUP
, (°), (‰ì_func))

	)

1556 
	#sk_X509_LOOKUP_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_LOOKUP
, (°))

	)

1557 
	#sk_X509_LOOKUP_p›
(
°
Ë
	`SKM_sk_p›
(
X509_LOOKUP
, (°))

	)

1558 
	#sk_X509_LOOKUP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_LOOKUP
, (°))

	)

1559 
	#sk_X509_LOOKUP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_LOOKUP
, (°))

	)

1561 
	#sk_X509_NAME_√w
(
°
Ë
	`SKM_sk_√w
(
X509_NAME
, (°))

	)

1562 
	#sk_X509_NAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_NAME
)

	)

1563 
	#sk_X509_NAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_NAME
, (°))

	)

1564 
	#sk_X509_NAME_num
(
°
Ë
	`SKM_sk_num
(
X509_NAME
, (°))

	)

1565 
	#sk_X509_NAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_NAME
, (°), (i))

	)

1566 
	#sk_X509_NAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_NAME
, (°), (i), (vÆ))

	)

1567 
	#sk_X509_NAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_NAME
, (°))

	)

1568 
	#sk_X509_NAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_NAME
, (°), (vÆ))

	)

1569 
	#sk_X509_NAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_NAME
, (°), (vÆ))

	)

1570 
	#sk_X509_NAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_NAME
, (°), (vÆ))

	)

1571 
	#sk_X509_NAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_NAME
, (°), (vÆ))

	)

1572 
	#sk_X509_NAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_NAME
, (°), (i))

	)

1573 
	#sk_X509_NAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_NAME
, (°), (±r))

	)

1574 
	#sk_X509_NAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_NAME
, (°), (vÆ), (i))

	)

1575 
	#sk_X509_NAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_NAME
, (°), (cmp))

	)

1576 
	#sk_X509_NAME_dup
(
°
Ë
	`SKM_sk_dup
(
X509_NAME
, st)

	)

1577 
	#sk_X509_NAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_NAME
, (°), (‰ì_func))

	)

1578 
	#sk_X509_NAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_NAME
, (°))

	)

1579 
	#sk_X509_NAME_p›
(
°
Ë
	`SKM_sk_p›
(
X509_NAME
, (°))

	)

1580 
	#sk_X509_NAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_NAME
, (°))

	)

1581 
	#sk_X509_NAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_NAME
, (°))

	)

1583 
	#sk_X509_NAME_ENTRY_√w
(
°
Ë
	`SKM_sk_√w
(
X509_NAME_ENTRY
, (°))

	)

1584 
	#sk_X509_NAME_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_NAME_ENTRY
)

	)

1585 
	#sk_X509_NAME_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_NAME_ENTRY
, (°))

	)

1586 
	#sk_X509_NAME_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
X509_NAME_ENTRY
, (°))

	)

1587 
	#sk_X509_NAME_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_NAME_ENTRY
, (°), (i))

	)

1588 
	#sk_X509_NAME_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_NAME_ENTRY
, (°), (i), (vÆ))

	)

1589 
	#sk_X509_NAME_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_NAME_ENTRY
, (°))

	)

1590 
	#sk_X509_NAME_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1591 
	#sk_X509_NAME_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1592 
	#sk_X509_NAME_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1593 
	#sk_X509_NAME_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1594 
	#sk_X509_NAME_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_NAME_ENTRY
, (°), (i))

	)

1595 
	#sk_X509_NAME_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_NAME_ENTRY
, (°), (±r))

	)

1596 
	#sk_X509_NAME_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_NAME_ENTRY
, (°), (vÆ), (i))

	)

1597 
	#sk_X509_NAME_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_NAME_ENTRY
, (°), (cmp))

	)

1598 
	#sk_X509_NAME_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
X509_NAME_ENTRY
, st)

	)

1599 
	#sk_X509_NAME_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_NAME_ENTRY
, (°), (‰ì_func))

	)

1600 
	#sk_X509_NAME_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_NAME_ENTRY
, (°))

	)

1601 
	#sk_X509_NAME_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
X509_NAME_ENTRY
, (°))

	)

1602 
	#sk_X509_NAME_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_NAME_ENTRY
, (°))

	)

1603 
	#sk_X509_NAME_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_NAME_ENTRY
, (°))

	)

1605 
	#sk_X509_OBJECT_√w
(
°
Ë
	`SKM_sk_√w
(
X509_OBJECT
, (°))

	)

1606 
	#sk_X509_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_OBJECT
)

	)

1607 
	#sk_X509_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_OBJECT
, (°))

	)

1608 
	#sk_X509_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
X509_OBJECT
, (°))

	)

1609 
	#sk_X509_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_OBJECT
, (°), (i))

	)

1610 
	#sk_X509_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_OBJECT
, (°), (i), (vÆ))

	)

1611 
	#sk_X509_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_OBJECT
, (°))

	)

1612 
	#sk_X509_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_OBJECT
, (°), (vÆ))

	)

1613 
	#sk_X509_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_OBJECT
, (°), (vÆ))

	)

1614 
	#sk_X509_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_OBJECT
, (°), (vÆ))

	)

1615 
	#sk_X509_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_OBJECT
, (°), (vÆ))

	)

1616 
	#sk_X509_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_OBJECT
, (°), (i))

	)

1617 
	#sk_X509_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_OBJECT
, (°), (±r))

	)

1618 
	#sk_X509_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_OBJECT
, (°), (vÆ), (i))

	)

1619 
	#sk_X509_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_OBJECT
, (°), (cmp))

	)

1620 
	#sk_X509_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
X509_OBJECT
, st)

	)

1621 
	#sk_X509_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_OBJECT
, (°), (‰ì_func))

	)

1622 
	#sk_X509_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_OBJECT
, (°))

	)

1623 
	#sk_X509_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
X509_OBJECT
, (°))

	)

1624 
	#sk_X509_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_OBJECT
, (°))

	)

1625 
	#sk_X509_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_OBJECT
, (°))

	)

1627 
	#sk_X509_POLICY_DATA_√w
(
°
Ë
	`SKM_sk_√w
(
X509_POLICY_DATA
, (°))

	)

1628 
	#sk_X509_POLICY_DATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_POLICY_DATA
)

	)

1629 
	#sk_X509_POLICY_DATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_POLICY_DATA
, (°))

	)

1630 
	#sk_X509_POLICY_DATA_num
(
°
Ë
	`SKM_sk_num
(
X509_POLICY_DATA
, (°))

	)

1631 
	#sk_X509_POLICY_DATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_POLICY_DATA
, (°), (i))

	)

1632 
	#sk_X509_POLICY_DATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_POLICY_DATA
, (°), (i), (vÆ))

	)

1633 
	#sk_X509_POLICY_DATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_POLICY_DATA
, (°))

	)

1634 
	#sk_X509_POLICY_DATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1635 
	#sk_X509_POLICY_DATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1636 
	#sk_X509_POLICY_DATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1637 
	#sk_X509_POLICY_DATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1638 
	#sk_X509_POLICY_DATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_POLICY_DATA
, (°), (i))

	)

1639 
	#sk_X509_POLICY_DATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_POLICY_DATA
, (°), (±r))

	)

1640 
	#sk_X509_POLICY_DATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_POLICY_DATA
, (°), (vÆ), (i))

	)

1641 
	#sk_X509_POLICY_DATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_POLICY_DATA
, (°), (cmp))

	)

1642 
	#sk_X509_POLICY_DATA_dup
(
°
Ë
	`SKM_sk_dup
(
X509_POLICY_DATA
, st)

	)

1643 
	#sk_X509_POLICY_DATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_POLICY_DATA
, (°), (‰ì_func))

	)

1644 
	#sk_X509_POLICY_DATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_POLICY_DATA
, (°))

	)

1645 
	#sk_X509_POLICY_DATA_p›
(
°
Ë
	`SKM_sk_p›
(
X509_POLICY_DATA
, (°))

	)

1646 
	#sk_X509_POLICY_DATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_POLICY_DATA
, (°))

	)

1647 
	#sk_X509_POLICY_DATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_POLICY_DATA
, (°))

	)

1649 
	#sk_X509_POLICY_NODE_√w
(
°
Ë
	`SKM_sk_√w
(
X509_POLICY_NODE
, (°))

	)

1650 
	#sk_X509_POLICY_NODE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_POLICY_NODE
)

	)

1651 
	#sk_X509_POLICY_NODE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_POLICY_NODE
, (°))

	)

1652 
	#sk_X509_POLICY_NODE_num
(
°
Ë
	`SKM_sk_num
(
X509_POLICY_NODE
, (°))

	)

1653 
	#sk_X509_POLICY_NODE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_POLICY_NODE
, (°), (i))

	)

1654 
	#sk_X509_POLICY_NODE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_POLICY_NODE
, (°), (i), (vÆ))

	)

1655 
	#sk_X509_POLICY_NODE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_POLICY_NODE
, (°))

	)

1656 
	#sk_X509_POLICY_NODE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1657 
	#sk_X509_POLICY_NODE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1658 
	#sk_X509_POLICY_NODE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1659 
	#sk_X509_POLICY_NODE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1660 
	#sk_X509_POLICY_NODE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_POLICY_NODE
, (°), (i))

	)

1661 
	#sk_X509_POLICY_NODE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_POLICY_NODE
, (°), (±r))

	)

1662 
	#sk_X509_POLICY_NODE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_POLICY_NODE
, (°), (vÆ), (i))

	)

1663 
	#sk_X509_POLICY_NODE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_POLICY_NODE
, (°), (cmp))

	)

1664 
	#sk_X509_POLICY_NODE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_POLICY_NODE
, st)

	)

1665 
	#sk_X509_POLICY_NODE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_POLICY_NODE
, (°), (‰ì_func))

	)

1666 
	#sk_X509_POLICY_NODE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_POLICY_NODE
, (°))

	)

1667 
	#sk_X509_POLICY_NODE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_POLICY_NODE
, (°))

	)

1668 
	#sk_X509_POLICY_NODE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_POLICY_NODE
, (°))

	)

1669 
	#sk_X509_POLICY_NODE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_POLICY_NODE
, (°))

	)

1671 
	#sk_X509_POLICY_REF_√w
(
°
Ë
	`SKM_sk_√w
(
X509_POLICY_REF
, (°))

	)

1672 
	#sk_X509_POLICY_REF_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_POLICY_REF
)

	)

1673 
	#sk_X509_POLICY_REF_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_POLICY_REF
, (°))

	)

1674 
	#sk_X509_POLICY_REF_num
(
°
Ë
	`SKM_sk_num
(
X509_POLICY_REF
, (°))

	)

1675 
	#sk_X509_POLICY_REF_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_POLICY_REF
, (°), (i))

	)

1676 
	#sk_X509_POLICY_REF_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_POLICY_REF
, (°), (i), (vÆ))

	)

1677 
	#sk_X509_POLICY_REF_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_POLICY_REF
, (°))

	)

1678 
	#sk_X509_POLICY_REF_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_POLICY_REF
, (°), (vÆ))

	)

1679 
	#sk_X509_POLICY_REF_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_POLICY_REF
, (°), (vÆ))

	)

1680 
	#sk_X509_POLICY_REF_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_POLICY_REF
, (°), (vÆ))

	)

1681 
	#sk_X509_POLICY_REF_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_POLICY_REF
, (°), (vÆ))

	)

1682 
	#sk_X509_POLICY_REF_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_POLICY_REF
, (°), (i))

	)

1683 
	#sk_X509_POLICY_REF_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_POLICY_REF
, (°), (±r))

	)

1684 
	#sk_X509_POLICY_REF_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_POLICY_REF
, (°), (vÆ), (i))

	)

1685 
	#sk_X509_POLICY_REF_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_POLICY_REF
, (°), (cmp))

	)

1686 
	#sk_X509_POLICY_REF_dup
(
°
Ë
	`SKM_sk_dup
(
X509_POLICY_REF
, st)

	)

1687 
	#sk_X509_POLICY_REF_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_POLICY_REF
, (°), (‰ì_func))

	)

1688 
	#sk_X509_POLICY_REF_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_POLICY_REF
, (°))

	)

1689 
	#sk_X509_POLICY_REF_p›
(
°
Ë
	`SKM_sk_p›
(
X509_POLICY_REF
, (°))

	)

1690 
	#sk_X509_POLICY_REF_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_POLICY_REF
, (°))

	)

1691 
	#sk_X509_POLICY_REF_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_POLICY_REF
, (°))

	)

1693 
	#sk_X509_PURPOSE_√w
(
°
Ë
	`SKM_sk_√w
(
X509_PURPOSE
, (°))

	)

1694 
	#sk_X509_PURPOSE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_PURPOSE
)

	)

1695 
	#sk_X509_PURPOSE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_PURPOSE
, (°))

	)

1696 
	#sk_X509_PURPOSE_num
(
°
Ë
	`SKM_sk_num
(
X509_PURPOSE
, (°))

	)

1697 
	#sk_X509_PURPOSE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_PURPOSE
, (°), (i))

	)

1698 
	#sk_X509_PURPOSE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_PURPOSE
, (°), (i), (vÆ))

	)

1699 
	#sk_X509_PURPOSE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_PURPOSE
, (°))

	)

1700 
	#sk_X509_PURPOSE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_PURPOSE
, (°), (vÆ))

	)

1701 
	#sk_X509_PURPOSE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_PURPOSE
, (°), (vÆ))

	)

1702 
	#sk_X509_PURPOSE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_PURPOSE
, (°), (vÆ))

	)

1703 
	#sk_X509_PURPOSE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_PURPOSE
, (°), (vÆ))

	)

1704 
	#sk_X509_PURPOSE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_PURPOSE
, (°), (i))

	)

1705 
	#sk_X509_PURPOSE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_PURPOSE
, (°), (±r))

	)

1706 
	#sk_X509_PURPOSE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_PURPOSE
, (°), (vÆ), (i))

	)

1707 
	#sk_X509_PURPOSE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_PURPOSE
, (°), (cmp))

	)

1708 
	#sk_X509_PURPOSE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_PURPOSE
, st)

	)

1709 
	#sk_X509_PURPOSE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_PURPOSE
, (°), (‰ì_func))

	)

1710 
	#sk_X509_PURPOSE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_PURPOSE
, (°))

	)

1711 
	#sk_X509_PURPOSE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_PURPOSE
, (°))

	)

1712 
	#sk_X509_PURPOSE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_PURPOSE
, (°))

	)

1713 
	#sk_X509_PURPOSE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_PURPOSE
, (°))

	)

1715 
	#sk_X509_REVOKED_√w
(
°
Ë
	`SKM_sk_√w
(
X509_REVOKED
, (°))

	)

1716 
	#sk_X509_REVOKED_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_REVOKED
)

	)

1717 
	#sk_X509_REVOKED_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_REVOKED
, (°))

	)

1718 
	#sk_X509_REVOKED_num
(
°
Ë
	`SKM_sk_num
(
X509_REVOKED
, (°))

	)

1719 
	#sk_X509_REVOKED_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_REVOKED
, (°), (i))

	)

1720 
	#sk_X509_REVOKED_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_REVOKED
, (°), (i), (vÆ))

	)

1721 
	#sk_X509_REVOKED_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_REVOKED
, (°))

	)

1722 
	#sk_X509_REVOKED_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_REVOKED
, (°), (vÆ))

	)

1723 
	#sk_X509_REVOKED_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_REVOKED
, (°), (vÆ))

	)

1724 
	#sk_X509_REVOKED_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_REVOKED
, (°), (vÆ))

	)

1725 
	#sk_X509_REVOKED_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_REVOKED
, (°), (vÆ))

	)

1726 
	#sk_X509_REVOKED_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_REVOKED
, (°), (i))

	)

1727 
	#sk_X509_REVOKED_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_REVOKED
, (°), (±r))

	)

1728 
	#sk_X509_REVOKED_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_REVOKED
, (°), (vÆ), (i))

	)

1729 
	#sk_X509_REVOKED_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_REVOKED
, (°), (cmp))

	)

1730 
	#sk_X509_REVOKED_dup
(
°
Ë
	`SKM_sk_dup
(
X509_REVOKED
, st)

	)

1731 
	#sk_X509_REVOKED_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_REVOKED
, (°), (‰ì_func))

	)

1732 
	#sk_X509_REVOKED_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_REVOKED
, (°))

	)

1733 
	#sk_X509_REVOKED_p›
(
°
Ë
	`SKM_sk_p›
(
X509_REVOKED
, (°))

	)

1734 
	#sk_X509_REVOKED_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_REVOKED
, (°))

	)

1735 
	#sk_X509_REVOKED_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_REVOKED
, (°))

	)

1737 
	#sk_X509_TRUST_√w
(
°
Ë
	`SKM_sk_√w
(
X509_TRUST
, (°))

	)

1738 
	#sk_X509_TRUST_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_TRUST
)

	)

1739 
	#sk_X509_TRUST_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_TRUST
, (°))

	)

1740 
	#sk_X509_TRUST_num
(
°
Ë
	`SKM_sk_num
(
X509_TRUST
, (°))

	)

1741 
	#sk_X509_TRUST_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_TRUST
, (°), (i))

	)

1742 
	#sk_X509_TRUST_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_TRUST
, (°), (i), (vÆ))

	)

1743 
	#sk_X509_TRUST_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_TRUST
, (°))

	)

1744 
	#sk_X509_TRUST_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_TRUST
, (°), (vÆ))

	)

1745 
	#sk_X509_TRUST_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_TRUST
, (°), (vÆ))

	)

1746 
	#sk_X509_TRUST_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_TRUST
, (°), (vÆ))

	)

1747 
	#sk_X509_TRUST_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_TRUST
, (°), (vÆ))

	)

1748 
	#sk_X509_TRUST_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_TRUST
, (°), (i))

	)

1749 
	#sk_X509_TRUST_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_TRUST
, (°), (±r))

	)

1750 
	#sk_X509_TRUST_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_TRUST
, (°), (vÆ), (i))

	)

1751 
	#sk_X509_TRUST_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_TRUST
, (°), (cmp))

	)

1752 
	#sk_X509_TRUST_dup
(
°
Ë
	`SKM_sk_dup
(
X509_TRUST
, st)

	)

1753 
	#sk_X509_TRUST_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_TRUST
, (°), (‰ì_func))

	)

1754 
	#sk_X509_TRUST_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_TRUST
, (°))

	)

1755 
	#sk_X509_TRUST_p›
(
°
Ë
	`SKM_sk_p›
(
X509_TRUST
, (°))

	)

1756 
	#sk_X509_TRUST_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_TRUST
, (°))

	)

1757 
	#sk_X509_TRUST_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_TRUST
, (°))

	)

1759 
	#sk_X509_VERIFY_PARAM_√w
(
°
Ë
	`SKM_sk_√w
(
X509_VERIFY_PARAM
, (°))

	)

1760 
	#sk_X509_VERIFY_PARAM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_VERIFY_PARAM
)

	)

1761 
	#sk_X509_VERIFY_PARAM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_VERIFY_PARAM
, (°))

	)

1762 
	#sk_X509_VERIFY_PARAM_num
(
°
Ë
	`SKM_sk_num
(
X509_VERIFY_PARAM
, (°))

	)

1763 
	#sk_X509_VERIFY_PARAM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_VERIFY_PARAM
, (°), (i))

	)

1764 
	#sk_X509_VERIFY_PARAM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_VERIFY_PARAM
, (°), (i), (vÆ))

	)

1765 
	#sk_X509_VERIFY_PARAM_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_VERIFY_PARAM
, (°))

	)

1766 
	#sk_X509_VERIFY_PARAM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

1767 
	#sk_X509_VERIFY_PARAM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

1768 
	#sk_X509_VERIFY_PARAM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

1769 
	#sk_X509_VERIFY_PARAM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

1770 
	#sk_X509_VERIFY_PARAM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_VERIFY_PARAM
, (°), (i))

	)

1771 
	#sk_X509_VERIFY_PARAM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_VERIFY_PARAM
, (°), (±r))

	)

1772 
	#sk_X509_VERIFY_PARAM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_VERIFY_PARAM
, (°), (vÆ), (i))

	)

1773 
	#sk_X509_VERIFY_PARAM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_VERIFY_PARAM
, (°), (cmp))

	)

1774 
	#sk_X509_VERIFY_PARAM_dup
(
°
Ë
	`SKM_sk_dup
(
X509_VERIFY_PARAM
, st)

	)

1775 
	#sk_X509_VERIFY_PARAM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_VERIFY_PARAM
, (°), (‰ì_func))

	)

1776 
	#sk_X509_VERIFY_PARAM_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_VERIFY_PARAM
, (°))

	)

1777 
	#sk_X509_VERIFY_PARAM_p›
(
°
Ë
	`SKM_sk_p›
(
X509_VERIFY_PARAM
, (°))

	)

1778 
	#sk_X509_VERIFY_PARAM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_VERIFY_PARAM
, (°))

	)

1779 
	#sk_X509_VERIFY_PARAM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_VERIFY_PARAM
, (°))

	)

1781 
	#d2i_ASN1_SET_OF_ACCESS_DESCRIPTION
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1782 
	`SKM_ASN1_SET_OF_d2i
(
ACCESS_DESCRIPTION
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1783 
	#i2d_ASN1_SET_OF_ACCESS_DESCRIPTION
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1784 
	`SKM_ASN1_SET_OF_i2d
(
ACCESS_DESCRIPTION
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1785 
	#ASN1_£q_∑ck_ACCESS_DESCRIPTION
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1786 
	`SKM_ASN1_£q_∑ck
(
ACCESS_DESCRIPTION
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1787 
	#ASN1_£q_u≈ack_ACCESS_DESCRIPTION
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1788 
	`SKM_ASN1_£q_u≈ack
(
ACCESS_DESCRIPTION
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1790 
	#d2i_ASN1_SET_OF_ASN1_INTEGER
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1791 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_INTEGER
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1792 
	#i2d_ASN1_SET_OF_ASN1_INTEGER
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1793 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_INTEGER
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1794 
	#ASN1_£q_∑ck_ASN1_INTEGER
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1795 
	`SKM_ASN1_£q_∑ck
(
ASN1_INTEGER
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1796 
	#ASN1_£q_u≈ack_ASN1_INTEGER
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1797 
	`SKM_ASN1_£q_u≈ack
(
ASN1_INTEGER
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1799 
	#d2i_ASN1_SET_OF_ASN1_OBJECT
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1800 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_OBJECT
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1801 
	#i2d_ASN1_SET_OF_ASN1_OBJECT
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1802 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_OBJECT
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1803 
	#ASN1_£q_∑ck_ASN1_OBJECT
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1804 
	`SKM_ASN1_£q_∑ck
(
ASN1_OBJECT
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1805 
	#ASN1_£q_u≈ack_ASN1_OBJECT
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1806 
	`SKM_ASN1_£q_u≈ack
(
ASN1_OBJECT
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1808 
	#d2i_ASN1_SET_OF_ASN1_TYPE
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1809 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_TYPE
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1810 
	#i2d_ASN1_SET_OF_ASN1_TYPE
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1811 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_TYPE
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1812 
	#ASN1_£q_∑ck_ASN1_TYPE
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1813 
	`SKM_ASN1_£q_∑ck
(
ASN1_TYPE
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1814 
	#ASN1_£q_u≈ack_ASN1_TYPE
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1815 
	`SKM_ASN1_£q_u≈ack
(
ASN1_TYPE
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1817 
	#d2i_ASN1_SET_OF_DIST_POINT
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1818 
	`SKM_ASN1_SET_OF_d2i
(
DIST_POINT
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1819 
	#i2d_ASN1_SET_OF_DIST_POINT
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1820 
	`SKM_ASN1_SET_OF_i2d
(
DIST_POINT
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1821 
	#ASN1_£q_∑ck_DIST_POINT
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1822 
	`SKM_ASN1_£q_∑ck
(
DIST_POINT
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1823 
	#ASN1_£q_u≈ack_DIST_POINT
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1824 
	`SKM_ASN1_£q_u≈ack
(
DIST_POINT
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1826 
	#d2i_ASN1_SET_OF_GENERAL_NAME
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1827 
	`SKM_ASN1_SET_OF_d2i
(
GENERAL_NAME
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1828 
	#i2d_ASN1_SET_OF_GENERAL_NAME
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1829 
	`SKM_ASN1_SET_OF_i2d
(
GENERAL_NAME
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1830 
	#ASN1_£q_∑ck_GENERAL_NAME
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1831 
	`SKM_ASN1_£q_∑ck
(
GENERAL_NAME
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1832 
	#ASN1_£q_u≈ack_GENERAL_NAME
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1833 
	`SKM_ASN1_£q_u≈ack
(
GENERAL_NAME
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1835 
	#d2i_ASN1_SET_OF_OCSP_ONEREQ
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1836 
	`SKM_ASN1_SET_OF_d2i
(
OCSP_ONEREQ
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1837 
	#i2d_ASN1_SET_OF_OCSP_ONEREQ
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1838 
	`SKM_ASN1_SET_OF_i2d
(
OCSP_ONEREQ
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1839 
	#ASN1_£q_∑ck_OCSP_ONEREQ
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1840 
	`SKM_ASN1_£q_∑ck
(
OCSP_ONEREQ
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1841 
	#ASN1_£q_u≈ack_OCSP_ONEREQ
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1842 
	`SKM_ASN1_£q_u≈ack
(
OCSP_ONEREQ
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1844 
	#d2i_ASN1_SET_OF_OCSP_SINGLERESP
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1845 
	`SKM_ASN1_SET_OF_d2i
(
OCSP_SINGLERESP
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1846 
	#i2d_ASN1_SET_OF_OCSP_SINGLERESP
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1847 
	`SKM_ASN1_SET_OF_i2d
(
OCSP_SINGLERESP
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1848 
	#ASN1_£q_∑ck_OCSP_SINGLERESP
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1849 
	`SKM_ASN1_£q_∑ck
(
OCSP_SINGLERESP
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1850 
	#ASN1_£q_u≈ack_OCSP_SINGLERESP
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1851 
	`SKM_ASN1_£q_u≈ack
(
OCSP_SINGLERESP
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1853 
	#d2i_ASN1_SET_OF_PKCS12_SAFEBAG
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1854 
	`SKM_ASN1_SET_OF_d2i
(
PKCS12_SAFEBAG
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1855 
	#i2d_ASN1_SET_OF_PKCS12_SAFEBAG
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1856 
	`SKM_ASN1_SET_OF_i2d
(
PKCS12_SAFEBAG
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1857 
	#ASN1_£q_∑ck_PKCS12_SAFEBAG
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1858 
	`SKM_ASN1_£q_∑ck
(
PKCS12_SAFEBAG
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1859 
	#ASN1_£q_u≈ack_PKCS12_SAFEBAG
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1860 
	`SKM_ASN1_£q_u≈ack
(
PKCS12_SAFEBAG
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1862 
	#d2i_ASN1_SET_OF_PKCS7
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1863 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1864 
	#i2d_ASN1_SET_OF_PKCS7
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1865 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1866 
	#ASN1_£q_∑ck_PKCS7
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1867 
	`SKM_ASN1_£q_∑ck
(
PKCS7
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1868 
	#ASN1_£q_u≈ack_PKCS7
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1869 
	`SKM_ASN1_£q_u≈ack
(
PKCS7
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1871 
	#d2i_ASN1_SET_OF_PKCS7_RECIP_INFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1872 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7_RECIP_INFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1873 
	#i2d_ASN1_SET_OF_PKCS7_RECIP_INFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1874 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7_RECIP_INFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1875 
	#ASN1_£q_∑ck_PKCS7_RECIP_INFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1876 
	`SKM_ASN1_£q_∑ck
(
PKCS7_RECIP_INFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1877 
	#ASN1_£q_u≈ack_PKCS7_RECIP_INFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1878 
	`SKM_ASN1_£q_u≈ack
(
PKCS7_RECIP_INFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1880 
	#d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1881 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7_SIGNER_INFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1882 
	#i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1883 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7_SIGNER_INFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1884 
	#ASN1_£q_∑ck_PKCS7_SIGNER_INFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1885 
	`SKM_ASN1_£q_∑ck
(
PKCS7_SIGNER_INFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1886 
	#ASN1_£q_u≈ack_PKCS7_SIGNER_INFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1887 
	`SKM_ASN1_£q_u≈ack
(
PKCS7_SIGNER_INFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1889 
	#d2i_ASN1_SET_OF_POLICYINFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1890 
	`SKM_ASN1_SET_OF_d2i
(
POLICYINFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1891 
	#i2d_ASN1_SET_OF_POLICYINFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1892 
	`SKM_ASN1_SET_OF_i2d
(
POLICYINFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1893 
	#ASN1_£q_∑ck_POLICYINFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1894 
	`SKM_ASN1_£q_∑ck
(
POLICYINFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1895 
	#ASN1_£q_u≈ack_POLICYINFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1896 
	`SKM_ASN1_£q_u≈ack
(
POLICYINFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1898 
	#d2i_ASN1_SET_OF_POLICYQUALINFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1899 
	`SKM_ASN1_SET_OF_d2i
(
POLICYQUALINFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1900 
	#i2d_ASN1_SET_OF_POLICYQUALINFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1901 
	`SKM_ASN1_SET_OF_i2d
(
POLICYQUALINFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1902 
	#ASN1_£q_∑ck_POLICYQUALINFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1903 
	`SKM_ASN1_£q_∑ck
(
POLICYQUALINFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1904 
	#ASN1_£q_u≈ack_POLICYQUALINFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1905 
	`SKM_ASN1_£q_u≈ack
(
POLICYQUALINFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1907 
	#d2i_ASN1_SET_OF_SXNETID
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1908 
	`SKM_ASN1_SET_OF_d2i
(
SXNETID
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1909 
	#i2d_ASN1_SET_OF_SXNETID
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1910 
	`SKM_ASN1_SET_OF_i2d
(
SXNETID
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1911 
	#ASN1_£q_∑ck_SXNETID
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1912 
	`SKM_ASN1_£q_∑ck
(
SXNETID
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1913 
	#ASN1_£q_u≈ack_SXNETID
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1914 
	`SKM_ASN1_£q_u≈ack
(
SXNETID
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1916 
	#d2i_ASN1_SET_OF_X509
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1917 
	`SKM_ASN1_SET_OF_d2i
(
X509
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1918 
	#i2d_ASN1_SET_OF_X509
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1919 
	`SKM_ASN1_SET_OF_i2d
(
X509
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1920 
	#ASN1_£q_∑ck_X509
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1921 
	`SKM_ASN1_£q_∑ck
(
X509
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1922 
	#ASN1_£q_u≈ack_X509
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1923 
	`SKM_ASN1_£q_u≈ack
(
X509
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1925 
	#d2i_ASN1_SET_OF_X509_ALGOR
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1926 
	`SKM_ASN1_SET_OF_d2i
(
X509_ALGOR
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1927 
	#i2d_ASN1_SET_OF_X509_ALGOR
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1928 
	`SKM_ASN1_SET_OF_i2d
(
X509_ALGOR
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1929 
	#ASN1_£q_∑ck_X509_ALGOR
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1930 
	`SKM_ASN1_£q_∑ck
(
X509_ALGOR
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1931 
	#ASN1_£q_u≈ack_X509_ALGOR
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1932 
	`SKM_ASN1_£q_u≈ack
(
X509_ALGOR
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1934 
	#d2i_ASN1_SET_OF_X509_ATTRIBUTE
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1935 
	`SKM_ASN1_SET_OF_d2i
(
X509_ATTRIBUTE
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1936 
	#i2d_ASN1_SET_OF_X509_ATTRIBUTE
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1937 
	`SKM_ASN1_SET_OF_i2d
(
X509_ATTRIBUTE
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1938 
	#ASN1_£q_∑ck_X509_ATTRIBUTE
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1939 
	`SKM_ASN1_£q_∑ck
(
X509_ATTRIBUTE
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1940 
	#ASN1_£q_u≈ack_X509_ATTRIBUTE
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1941 
	`SKM_ASN1_£q_u≈ack
(
X509_ATTRIBUTE
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1943 
	#d2i_ASN1_SET_OF_X509_CRL
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1944 
	`SKM_ASN1_SET_OF_d2i
(
X509_CRL
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1945 
	#i2d_ASN1_SET_OF_X509_CRL
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1946 
	`SKM_ASN1_SET_OF_i2d
(
X509_CRL
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1947 
	#ASN1_£q_∑ck_X509_CRL
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1948 
	`SKM_ASN1_£q_∑ck
(
X509_CRL
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1949 
	#ASN1_£q_u≈ack_X509_CRL
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1950 
	`SKM_ASN1_£q_u≈ack
(
X509_CRL
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1952 
	#d2i_ASN1_SET_OF_X509_EXTENSION
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1953 
	`SKM_ASN1_SET_OF_d2i
(
X509_EXTENSION
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1954 
	#i2d_ASN1_SET_OF_X509_EXTENSION
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1955 
	`SKM_ASN1_SET_OF_i2d
(
X509_EXTENSION
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1956 
	#ASN1_£q_∑ck_X509_EXTENSION
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1957 
	`SKM_ASN1_£q_∑ck
(
X509_EXTENSION
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1958 
	#ASN1_£q_u≈ack_X509_EXTENSION
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1959 
	`SKM_ASN1_£q_u≈ack
(
X509_EXTENSION
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1961 
	#d2i_ASN1_SET_OF_X509_NAME_ENTRY
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1962 
	`SKM_ASN1_SET_OF_d2i
(
X509_NAME_ENTRY
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1963 
	#i2d_ASN1_SET_OF_X509_NAME_ENTRY
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1964 
	`SKM_ASN1_SET_OF_i2d
(
X509_NAME_ENTRY
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1965 
	#ASN1_£q_∑ck_X509_NAME_ENTRY
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1966 
	`SKM_ASN1_£q_∑ck
(
X509_NAME_ENTRY
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1967 
	#ASN1_£q_u≈ack_X509_NAME_ENTRY
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1968 
	`SKM_ASN1_£q_u≈ack
(
X509_NAME_ENTRY
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1970 
	#d2i_ASN1_SET_OF_X509_REVOKED
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1971 
	`SKM_ASN1_SET_OF_d2i
(
X509_REVOKED
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1972 
	#i2d_ASN1_SET_OF_X509_REVOKED
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1973 
	`SKM_ASN1_SET_OF_i2d
(
X509_REVOKED
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1974 
	#ASN1_£q_∑ck_X509_REVOKED
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1975 
	`SKM_ASN1_£q_∑ck
(
X509_REVOKED
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1976 
	#ASN1_£q_u≈ack_X509_REVOKED
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1977 
	`SKM_ASN1_£q_u≈ack
(
X509_REVOKED
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1979 
	#PKCS12_de¸y±_d2i_PKCS12_SAFEBAG
(
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

1980 
	`SKM_PKCS12_de¸y±_d2i
(
PKCS12_SAFEBAG
, (
Æg‹
), (
d2i_func
), (
‰ì_func
), (
∑ss
), (
∑s¶í
), (
o˘
), (
£q
))

	)

1982 
	#PKCS12_de¸y±_d2i_PKCS7
(
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

1983 
	`SKM_PKCS12_de¸y±_d2i
(
PKCS7
, (
Æg‹
), (
d2i_func
), (
‰ì_func
), (
∑ss
), (
∑s¶í
), (
o˘
), (
£q
))

	)

	@/usr/include/openssl/sha.h

59 #i‚de‡
HEADER_SHA_H


60 
	#HEADER_SHA_H


	)

62 
	~<›ís¶/e_os2.h
>

63 
	~<°ddef.h
>

65 #ifde‡ 
__˝lu•lus


69 #i‡
deföed
(
OPENSSL_NO_SHA
Ë|| (deföed(
OPENSSL_NO_SHA0
Ë&& deföed(
OPENSSL_NO_SHA1
))

70 #îr‹ 
SHA
 
is
 
dißbÀd
.

73 #i‡
deföed
(
OPENSSL_FIPS
)

74 
	#FIPS_SHA_SIZE_T
 
size_t


	)

84 #i‡
deföed
(
OPENSSL_SYS_WIN16
Ë|| deföed(
__LP32__
)

85 
	#SHA_LONG
 

	)

86 #ñi‡
deföed
(
OPENSSL_SYS_CRAY
Ë|| deföed(
__ILP64__
)

87 
	#SHA_LONG
 

	)

88 
	#SHA_LONG_LOG2
 3

	)

90 
	#SHA_LONG
 

	)

93 
	#SHA_LBLOCK
 16

	)

94 
	#SHA_CBLOCK
 (
SHA_LBLOCK
*4Ë

	)

97 
	#SHA_LAST_BLOCK
 (
SHA_CBLOCK
-8)

	)

98 
	#SHA_DIGEST_LENGTH
 20

	)

100 
	sSHA°©e_°


102 
SHA_LONG
 
h0
,
h1
,
h2
,
h3
,
h4
;

103 
SHA_LONG
 
Nl
,
Nh
;

104 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

105 
num
;

106 } 
	tSHA_CTX
;

108 #i‚de‡
OPENSSL_NO_SHA0


109 #ifde‡
OPENSSL_FIPS


110 
¥iv©e_SHA_Inô
(
SHA_CTX
 *
c
);

112 
SHA_Inô
(
SHA_CTX
 *
c
);

113 
SHA_Upd©e
(
SHA_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

114 
SHA_FöÆ
(*
md
, 
SHA_CTX
 *
c
);

115 *
SHA
(c⁄° *
d
, 
size_t
 
n
, *
md
);

116 
SHA_Tønsf‹m
(
SHA_CTX
 *
c
, c⁄° *
d©a
);

118 #i‚de‡
OPENSSL_NO_SHA1


119 
SHA1_Inô
(
SHA_CTX
 *
c
);

120 
SHA1_Upd©e
(
SHA_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

121 
SHA1_FöÆ
(*
md
, 
SHA_CTX
 *
c
);

122 *
SHA1
(c⁄° *
d
, 
size_t
 
n
, *
md
);

123 
SHA1_Tønsf‹m
(
SHA_CTX
 *
c
, c⁄° *
d©a
);

126 
	#SHA256_CBLOCK
 (
SHA_LBLOCK
*4Ë

	)

129 
	#SHA224_DIGEST_LENGTH
 28

	)

130 
	#SHA256_DIGEST_LENGTH
 32

	)

132 
	sSHA256°©e_°


134 
SHA_LONG
 
h
[8];

135 
SHA_LONG
 
Nl
,
Nh
;

136 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

137 
num
,
md_Àn
;

138 } 
	tSHA256_CTX
;

140 #i‚de‡
OPENSSL_NO_SHA256


141 
SHA224_Inô
(
SHA256_CTX
 *
c
);

142 
SHA224_Upd©e
(
SHA256_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

143 
SHA224_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

144 *
SHA224
(c⁄° *
d
, 
size_t
 
n
,*
md
);

145 
SHA256_Inô
(
SHA256_CTX
 *
c
);

146 
SHA256_Upd©e
(
SHA256_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

147 
SHA256_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

148 *
SHA256
(c⁄° *
d
, 
size_t
 
n
,*
md
);

149 
SHA256_Tønsf‹m
(
SHA256_CTX
 *
c
, c⁄° *
d©a
);

152 
	#SHA384_DIGEST_LENGTH
 48

	)

153 
	#SHA512_DIGEST_LENGTH
 64

	)

155 #i‚de‡
OPENSSL_NO_SHA512


161 
	#SHA512_CBLOCK
 (
SHA_LBLOCK
*8Ë

	)

164 #i‡(
deföed
(
_WIN32
Ë|| deföed(
_WIN64
)Ë&& !deföed(
__MINGW32__
)

165 
	#SHA_LONG64
 
__öt64


	)

166 
	#U64
(
C
ËC##
UI64


	)

167 #ñi‡
deföed
(
__¨ch64__
)

168 
	#SHA_LONG64
 

	)

169 
	#U64
(
C
ËC##
UL


	)

171 
	#SHA_LONG64
 

	)

172 
	#U64
(
C
ËC##
ULL


	)

175 
	sSHA512°©e_°


177 
SHA_LONG64
 
h
[8];

178 
SHA_LONG64
 
Nl
,
Nh
;

180 
SHA_LONG64
 
d
[
SHA_LBLOCK
];

181 
p
[
SHA512_CBLOCK
];

182 } 
u
;

183 
num
,
md_Àn
;

184 } 
	tSHA512_CTX
;

187 #i‚de‡
OPENSSL_NO_SHA512


188 
SHA384_Inô
(
SHA512_CTX
 *
c
);

189 
SHA384_Upd©e
(
SHA512_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

190 
SHA384_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

191 *
SHA384
(c⁄° *
d
, 
size_t
 
n
,*
md
);

192 
SHA512_Inô
(
SHA512_CTX
 *
c
);

193 
SHA512_Upd©e
(
SHA512_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

194 
SHA512_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

195 *
SHA512
(c⁄° *
d
, 
size_t
 
n
,*
md
);

196 
SHA512_Tønsf‹m
(
SHA512_CTX
 *
c
, c⁄° *
d©a
);

199 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl.h

170 #i‚de‡
HEADER_SSL_H


171 
	#HEADER_SSL_H


	)

173 
	~<›ís¶/e_os2.h
>

175 #i‚de‡
OPENSSL_NO_COMP


176 
	~<›ís¶/comp.h
>

178 #i‚de‡
OPENSSL_NO_BIO


179 
	~<›ís¶/bio.h
>

181 #i‚de‡
OPENSSL_NO_DEPRECATED


182 #i‚de‡
OPENSSL_NO_X509


183 
	~<›ís¶/x509.h
>

185 
	~<›ís¶/¸y±o.h
>

186 
	~<›ís¶/lhash.h
>

187 
	~<›ís¶/buf„r.h
>

189 
	~<›ís¶/≥m.h
>

190 
	~<›ís¶/hmac.h
>

192 
	~<›ís¶/ks¶.h
>

193 
	~<›ís¶/ß„°ack.h
>

194 
	~<›ís¶/symhacks.h
>

196 #ifde‡ 
__˝lu•lus


204 
	#SSL_SESSION_ASN1_VERSION
 0x0001

	)

207 
	#SSL_TXT_NULL_WITH_MD5
 
SSL2_TXT_NULL_WITH_MD5


	)

208 
	#SSL_TXT_RC4_128_WITH_MD5
 
SSL2_TXT_RC4_128_WITH_MD5


	)

209 
	#SSL_TXT_RC4_128_EXPORT40_WITH_MD5
 
SSL2_TXT_RC4_128_EXPORT40_WITH_MD5


	)

210 
	#SSL_TXT_RC2_128_CBC_WITH_MD5
 
SSL2_TXT_RC2_128_CBC_WITH_MD5


	)

211 
	#SSL_TXT_RC2_128_CBC_EXPORT40_WITH_MD5
 
SSL2_TXT_RC2_128_CBC_EXPORT40_WITH_MD5


	)

212 
	#SSL_TXT_IDEA_128_CBC_WITH_MD5
 
SSL2_TXT_IDEA_128_CBC_WITH_MD5


	)

213 
	#SSL_TXT_DES_64_CBC_WITH_MD5
 
SSL2_TXT_DES_64_CBC_WITH_MD5


	)

214 
	#SSL_TXT_DES_64_CBC_WITH_SHA
 
SSL2_TXT_DES_64_CBC_WITH_SHA


	)

215 
	#SSL_TXT_DES_192_EDE3_CBC_WITH_MD5
 
SSL2_TXT_DES_192_EDE3_CBC_WITH_MD5


	)

216 
	#SSL_TXT_DES_192_EDE3_CBC_WITH_SHA
 
SSL2_TXT_DES_192_EDE3_CBC_WITH_SHA


	)

220 
	#SSL_TXT_KRB5_DES_64_CBC_SHA
 
SSL3_TXT_KRB5_DES_64_CBC_SHA


	)

221 
	#SSL_TXT_KRB5_DES_192_CBC3_SHA
 
SSL3_TXT_KRB5_DES_192_CBC3_SHA


	)

222 
	#SSL_TXT_KRB5_RC4_128_SHA
 
SSL3_TXT_KRB5_RC4_128_SHA


	)

223 
	#SSL_TXT_KRB5_IDEA_128_CBC_SHA
 
SSL3_TXT_KRB5_IDEA_128_CBC_SHA


	)

224 
	#SSL_TXT_KRB5_DES_64_CBC_MD5
 
SSL3_TXT_KRB5_DES_64_CBC_MD5


	)

225 
	#SSL_TXT_KRB5_DES_192_CBC3_MD5
 
SSL3_TXT_KRB5_DES_192_CBC3_MD5


	)

226 
	#SSL_TXT_KRB5_RC4_128_MD5
 
SSL3_TXT_KRB5_RC4_128_MD5


	)

227 
	#SSL_TXT_KRB5_IDEA_128_CBC_MD5
 
SSL3_TXT_KRB5_IDEA_128_CBC_MD5


	)

229 
	#SSL_TXT_KRB5_DES_40_CBC_SHA
 
SSL3_TXT_KRB5_DES_40_CBC_SHA


	)

230 
	#SSL_TXT_KRB5_RC2_40_CBC_SHA
 
SSL3_TXT_KRB5_RC2_40_CBC_SHA


	)

231 
	#SSL_TXT_KRB5_RC4_40_SHA
 
SSL3_TXT_KRB5_RC4_40_SHA


	)

232 
	#SSL_TXT_KRB5_DES_40_CBC_MD5
 
SSL3_TXT_KRB5_DES_40_CBC_MD5


	)

233 
	#SSL_TXT_KRB5_RC2_40_CBC_MD5
 
SSL3_TXT_KRB5_RC2_40_CBC_MD5


	)

234 
	#SSL_TXT_KRB5_RC4_40_MD5
 
SSL3_TXT_KRB5_RC4_40_MD5


	)

236 
	#SSL_TXT_KRB5_DES_40_CBC_SHA
 
SSL3_TXT_KRB5_DES_40_CBC_SHA


	)

237 
	#SSL_TXT_KRB5_DES_40_CBC_MD5
 
SSL3_TXT_KRB5_DES_40_CBC_MD5


	)

238 
	#SSL_TXT_KRB5_DES_64_CBC_SHA
 
SSL3_TXT_KRB5_DES_64_CBC_SHA


	)

239 
	#SSL_TXT_KRB5_DES_64_CBC_MD5
 
SSL3_TXT_KRB5_DES_64_CBC_MD5


	)

240 
	#SSL_TXT_KRB5_DES_192_CBC3_SHA
 
SSL3_TXT_KRB5_DES_192_CBC3_SHA


	)

241 
	#SSL_TXT_KRB5_DES_192_CBC3_MD5
 
SSL3_TXT_KRB5_DES_192_CBC3_MD5


	)

242 
	#SSL_MAX_KRB5_PRINCIPAL_LENGTH
 256

	)

244 
	#SSL_MAX_SSL_SESSION_ID_LENGTH
 32

	)

245 
	#SSL_MAX_SID_CTX_LENGTH
 32

	)

247 
	#SSL_MIN_RSA_MODULUS_LENGTH_IN_BYTES
 (512/8)

	)

248 
	#SSL_MAX_KEY_ARG_LENGTH
 8

	)

249 
	#SSL_MAX_MASTER_KEY_LENGTH
 48

	)

252 
	#SSL_TXT_LOW
 "LOW"

	)

253 
	#SSL_TXT_MEDIUM
 "MEDIUM"

	)

254 
	#SSL_TXT_HIGH
 "HIGH"

	)

255 
	#SSL_TXT_FIPS
 "FIPS"

	)

256 
	#SSL_TXT_kFZA
 "kFZA"

	)

257 
	#SSL_TXT_aFZA
 "aFZA"

	)

258 
	#SSL_TXT_eFZA
 "eFZA"

	)

259 
	#SSL_TXT_FZA
 "FZA"

	)

261 
	#SSL_TXT_aNULL
 "aNULL"

	)

262 
	#SSL_TXT_eNULL
 "eNULL"

	)

263 
	#SSL_TXT_NULL
 "NULL"

	)

265 
	#SSL_TXT_kKRB5
 "kKRB5"

	)

266 
	#SSL_TXT_aKRB5
 "aKRB5"

	)

267 
	#SSL_TXT_KRB5
 "KRB5"

	)

269 
	#SSL_TXT_kRSA
 "kRSA"

	)

270 
	#SSL_TXT_kDHr
 "kDHr"

	)

271 
	#SSL_TXT_kDHd
 "kDHd"

	)

272 
	#SSL_TXT_kEDH
 "kEDH"

	)

273 
	#SSL_TXT_aRSA
 "aRSA"

	)

274 
	#SSL_TXT_aDSS
 "aDSS"

	)

275 
	#SSL_TXT_aDH
 "aDH"

	)

276 
	#SSL_TXT_DSS
 "DSS"

	)

277 
	#SSL_TXT_DH
 "DH"

	)

278 
	#SSL_TXT_EDH
 "EDH"

	)

279 
	#SSL_TXT_ADH
 "ADH"

	)

280 
	#SSL_TXT_RSA
 "RSA"

	)

281 
	#SSL_TXT_DES
 "DES"

	)

282 
	#SSL_TXT_3DES
 "3DES"

	)

283 
	#SSL_TXT_RC4
 "RC4"

	)

284 
	#SSL_TXT_RC2
 "RC2"

	)

285 
	#SSL_TXT_IDEA
 "IDEA"

	)

286 
	#SSL_TXT_SEED
 "SEED"

	)

287 
	#SSL_TXT_AES
 "AES"

	)

288 
	#SSL_TXT_CAMELLIA
 "CAMELLIA"

	)

289 
	#SSL_TXT_MD5
 "MD5"

	)

290 
	#SSL_TXT_SHA1
 "SHA1"

	)

291 
	#SSL_TXT_SHA
 "SHA"

	)

292 
	#SSL_TXT_EXP
 "EXP"

	)

293 
	#SSL_TXT_EXPORT
 "EXPORT"

	)

294 
	#SSL_TXT_EXP40
 "EXPORT40"

	)

295 
	#SSL_TXT_EXP56
 "EXPORT56"

	)

296 
	#SSL_TXT_SSLV2
 "SSLv2"

	)

297 
	#SSL_TXT_SSLV3
 "SSLv3"

	)

298 
	#SSL_TXT_TLSV1
 "TLSv1"

	)

299 
	#SSL_TXT_ALL
 "ALL"

	)

300 
	#SSL_TXT_ECC
 "ECCdø·"

	)

316 
	#SSL_TXT_CMPALL
 "COMPLEMENTOFALL"

	)

317 
	#SSL_TXT_CMPDEF
 "COMPLEMENTOFDEFAULT"

	)

323 
	#SSL_DEFAULT_CIPHER_LIST
 "AES:ALL"

	)

326 
	#SSL_SENT_SHUTDOWN
 1

	)

327 
	#SSL_RECEIVED_SHUTDOWN
 2

	)

329 #ifde‡
__˝lu•lus


333 #ifde‡ 
__˝lu•lus


337 #i‡(
deföed
(
OPENSSL_NO_RSA
Ë|| deföed(
OPENSSL_NO_MD5
)Ë&& !deföed(
OPENSSL_NO_SSL2
)

338 
	#OPENSSL_NO_SSL2


	)

341 
	#SSL_FILETYPE_ASN1
 
X509_FILETYPE_ASN1


	)

342 
	#SSL_FILETYPE_PEM
 
X509_FILETYPE_PEM


	)

347 
s¶_°
 *
	ts¶_¸ock_°
;

350 
	ss¶_cùhî_°


352 
vÆid
;

353 c⁄° *
«me
;

354 
id
;

355 
Æg‹ôhms
;

356 
Ægo_°ªngth
;

357 
Æg‹ôhm2
;

358 
°ªngth_bôs
;

359 
Æg_bôs
;

360 
mask
;

361 
mask_°ªngth
;

362 } 
	tSSL_CIPHER
;

364 
DECLARE_STACK_OF
(
SSL_CIPHER
)

367 
	ss¶_mëhod_°


369 
vîsi⁄
;

370 (*
s¶_√w
)(
SSL
 *
s
);

371 (*
s¶_˛ór
)(
SSL
 *
s
);

372 (*
s¶_‰ì
)(
SSL
 *
s
);

373 (*
s¶_ac˚±
)(
SSL
 *
s
);

374 (*
s¶_c⁄√˘
)(
SSL
 *
s
);

375 (*
s¶_ªad
)(
SSL
 *
s
,*
buf
,
Àn
);

376 (*
s¶_≥ek
)(
SSL
 *
s
,*
buf
,
Àn
);

377 (*
s¶_wrôe
)(
SSL
 *
s
,c⁄° *
buf
,
Àn
);

378 (*
s¶_shutdown
)(
SSL
 *
s
);

379 (*
s¶_ª√gŸüã
)(
SSL
 *
s
);

380 (*
s¶_ª√gŸüã_check
)(
SSL
 *
s
);

381 (*
s¶_gë_mesßge
)(
SSL
 *
s
, 
°1
, 
°n
, 
mt
, 

382 
max
, *
ok
);

383 (*
s¶_ªad_byãs
)(
SSL
 *
s
, 
ty≥
, *
buf
, 
Àn
,

384 
≥ek
);

385 (*
s¶_wrôe_byãs
)(
SSL
 *
s
, 
ty≥
, c⁄° *
buf_
, 
Àn
);

386 (*
s¶_di•©ch_Æît
)(
SSL
 *
s
);

387 (*
s¶_˘æ
)(
SSL
 *
s
,
cmd
,
œrg
,*
∑rg
);

388 (*
s¶_˘x_˘æ
)(
SSL_CTX
 *
˘x
,
cmd
,
œrg
,*
∑rg
);

389 
SSL_CIPHER
 *(*
gë_cùhî_by_ch¨
)(c⁄° *
±r
);

390 (*
put_cùhî_by_ch¨
)(c⁄° 
SSL_CIPHER
 *
cùhî
,*
±r
);

391 (*
s¶_≥ndög
)(c⁄° 
SSL
 *
s
);

392 (*
num_cùhîs
)();

393 
SSL_CIPHER
 *(*
gë_cùhî
)(
ncùhî
);

394 
s¶_mëhod_°
 *(*
gë_s¶_mëhod
)(
vîsi⁄
);

395 (*
gë_timeout
)();

396 
s¶3_íc_mëhod
 *
s¶3_íc
;

397 (*
s¶_vîsi⁄
)();

398 (*
s¶_ˇŒback_˘æ
)(
SSL
 *
s
, 
cb_id
, (*
Â
)());

399 (*
s¶_˘x_ˇŒback_˘æ
)(
SSL_CTX
 *
s
, 
cb_id
, (*
Â
)());

400 } 
	tSSL_METHOD
;

421 
	ss¶_£ssi⁄_°


423 
s¶_vîsi⁄
;

427 
key_¨g_Àngth
;

428 
key_¨g
[
SSL_MAX_KEY_ARG_LENGTH
];

429 
ma°î_key_Àngth
;

430 
ma°î_key
[
SSL_MAX_MASTER_KEY_LENGTH
];

432 
£ssi⁄_id_Àngth
;

433 
£ssi⁄_id
[
SSL_MAX_SSL_SESSION_ID_LENGTH
];

437 
sid_˘x_Àngth
;

438 
sid_˘x
[
SSL_MAX_SID_CTX_LENGTH
];

440 #i‚de‡
OPENSSL_NO_KRB5


441 
krb5_˛õ¡_¥öc_Àn
;

442 
krb5_˛õ¡_¥öc
[
SSL_MAX_KRB5_PRINCIPAL_LENGTH
];

445 
nŸ_ªsumabÀ
;

448 
£ss_˚π_°
 *
£ss_˚π
;

454 
X509
 *
≥î
;

457 
vîify_ªsu…
;

459 
ª„ªn˚s
;

460 
timeout
;

461 
time
;

463 
com¥ess_mëh
;

465 
SSL_CIPHER
 *
cùhî
;

466 
cùhî_id
;

470 
STACK_OF
(
SSL_CIPHER
Ë*
cùhîs
;

472 
CRYPTO_EX_DATA
 
ex_d©a
;

476 
s¶_£ssi⁄_°
 *
¥ev
,*
√xt
;

477 #i‚de‡
OPENSSL_NO_TLSEXT


478 *
é£xt_ho°«me
;

480 *
é£xt_tick
;

481 
size_t
 
é£xt_tickÀn
;

482 
é£xt_tick_li„time_höt
;

484 } 
	tSSL_SESSION
;

487 
	#SSL_OP_MICROSOFT_SESS_ID_BUG
 0x00000001L

	)

488 
	#SSL_OP_NETSCAPE_CHALLENGE_BUG
 0x00000002L

	)

490 
	#SSL_OP_LEGACY_SERVER_CONNECT
 0x00000004L

	)

491 
	#SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG
 0x00000008L

	)

492 
	#SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG
 0x00000010L

	)

493 
	#SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER
 0x00000020L

	)

494 
	#SSL_OP_MSIE_SSLV2_RSA_PADDING
 0x00000040L

	)

495 
	#SSL_OP_SSLEAY_080_CLIENT_DH_BUG
 0x00000080L

	)

496 
	#SSL_OP_TLS_D5_BUG
 0x00000100L

	)

497 
	#SSL_OP_TLS_BLOCK_PADDING_BUG
 0x00000200L

	)

504 
	#SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
 0x00000800L

	)

508 
	#SSL_OP_ALL
 0x00000FFFL

	)

511 
	#SSL_OP_NO_QUERY_MTU
 0x00001000L

	)

513 
	#SSL_OP_COOKIE_EXCHANGE
 0x00002000L

	)

515 
	#SSL_OP_NO_TICKET
 0x00004000L

	)

517 
	#SSL_OP_CISCO_ANYCONNECT
 0x00008000L

	)

520 
	#SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION
 0x00010000L

	)

522 
	#SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION
 0x00040000L

	)

524 
	#SSL_OP_SINGLE_ECDH_USE
 0x00080000L

	)

526 
	#SSL_OP_SINGLE_DH_USE
 0x00100000L

	)

529 
	#SSL_OP_EPHEMERAL_RSA
 0x00200000L

	)

532 
	#SSL_OP_CIPHER_SERVER_PREFERENCE
 0x00400000L

	)

537 
	#SSL_OP_TLS_ROLLBACK_BUG
 0x00800000L

	)

539 
	#SSL_OP_NO_SSLv2
 0x01000000L

	)

540 
	#SSL_OP_NO_SSLv3
 0x02000000L

	)

541 
	#SSL_OP_NO_TLSv1
 0x04000000L

	)

545 
	#SSL_OP_PKCS1_CHECK_1
 0x08000000L

	)

546 
	#SSL_OP_PKCS1_CHECK_2
 0x10000000L

	)

547 
	#SSL_OP_NETSCAPE_CA_DN_BUG
 0x20000000L

	)

548 
	#SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG
 0x40000000L

	)

553 
	#SSL_MODE_ENABLE_PARTIAL_WRITE
 0x00000001L

	)

558 
	#SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER
 0x00000002L

	)

561 
	#SSL_MODE_AUTO_RETRY
 0x00000004L

	)

563 
	#SSL_MODE_NO_AUTO_CHAIN
 0x00000008L

	)

569 
	#SSL_CTX_£t_›ti⁄s
(
˘x
,
›
) \

570 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_OPTIONS
,(
›
),
NULL
)

	)

571 
	#SSL_CTX_˛ór_›ti⁄s
(
˘x
,
›
) \

572 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CLEAR_OPTIONS
,(
›
),
NULL
)

	)

573 
	#SSL_CTX_gë_›ti⁄s
(
˘x
) \

574 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_OPTIONS
,0,
NULL
)

	)

575 
	#SSL_£t_›ti⁄s
(
s¶
,
›
) \

576 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_OPTIONS
,(
›
),
NULL
)

	)

577 
	#SSL_˛ór_›ti⁄s
(
s¶
,
›
) \

578 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_OPTIONS
,(
›
),
NULL
)

	)

579 
	#SSL_gë_›ti⁄s
(
s¶
) \

580 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_OPTIONS
,0,
NULL
)

	)

582 
	#SSL_CTX_£t_mode
(
˘x
,
›
) \

583 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_MODE
,(
›
),
NULL
)

	)

584 
	#SSL_CTX_˛ór_mode
(
˘x
,
›
) \

585 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CLEAR_MODE
,(
›
),
NULL
)

	)

586 
	#SSL_CTX_gë_mode
(
˘x
) \

587 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_MODE
,0,
NULL
)

	)

588 
	#SSL_˛ór_mode
(
s¶
,
›
) \

589 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_MODE
,(
›
),
NULL
)

	)

590 
	#SSL_£t_mode
(
s¶
,
›
) \

591 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_MODE
,(
›
),
NULL
)

	)

592 
	#SSL_gë_mode
(
s¶
) \

593 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_MODE
,0,
NULL
)

	)

594 
	#SSL_£t_mtu
(
s¶
, 
mtu
) \

595 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_SET_MTU
,(
mtu
),
NULL
)

	)

597 
	#SSL_gë_£cuª_ª√gŸüti⁄_suµ‹t
(
s¶
) \

598 
	`SSL_˘æ
((
s¶
), 
SSL_CTRL_GET_RI_SUPPORT
, 0, 
NULL
)

	)

600 
SSL_CTX_£t_msg_ˇŒback
(
SSL_CTX
 *
˘x
, (*
cb
)(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
));

601 
SSL_£t_msg_ˇŒback
(
SSL
 *
s¶
, (*
cb
)(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, SSL *s¶, *
¨g
));

602 
	#SSL_CTX_£t_msg_ˇŒback_¨g
(
˘x
, 
¨g
Ë
	`SSL_CTX_˘æ
((˘x), 
SSL_CTRL_SET_MSG_CALLBACK_ARG
, 0, (¨g))

	)

603 
	#SSL_£t_msg_ˇŒback_¨g
(
s¶
, 
¨g
Ë
	`SSL_˘æ
((s¶), 
SSL_CTRL_SET_MSG_CALLBACK_ARG
, 0, (¨g))

	)

607 #i‡
deföed
(
OPENSSL_SYS_MSDOS
Ë&& !deföed(
OPENSSL_SYS_WIN32
)

608 
	#SSL_MAX_CERT_LIST_DEFAULT
 1024*30

	)

610 
	#SSL_MAX_CERT_LIST_DEFAULT
 1024*100

	)

613 
	#SSL_SESSION_CACHE_MAX_SIZE_DEFAULT
 (1024*20)

	)

628 (*
GEN_SESSION_CB
)(c⁄° 
	tSSL
 *
	ts¶
, *
	tid
,

629 *
	tid_Àn
);

631 
	ss¶_comp_°


633 
id
;

634 c⁄° *
«me
;

635 #i‚de‡
OPENSSL_NO_COMP


636 
COMP_METHOD
 *
mëhod
;

638 *
mëhod
;

640 } 
	tSSL_COMP
;

642 
DECLARE_STACK_OF
(
SSL_COMP
)

644 
	ss¶_˘x_°


646 
SSL_METHOD
 *
mëhod
;

648 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°
;

650 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°_by_id
;

652 
x509_°‹e_°
 *
˚π_°‹e
;

653 
lhash_°
 *
£ssi⁄s
;

656 
£ssi⁄_ˇche_size
;

657 
s¶_£ssi⁄_°
 *
£ssi⁄_ˇche_hód
;

658 
s¶_£ssi⁄_°
 *
£ssi⁄_ˇche_èû
;

665 
£ssi⁄_ˇche_mode
;

670 
£ssi⁄_timeout
;

680 (*
√w_£ssi⁄_cb
)(
s¶_°
 *
s¶
,
SSL_SESSION
 *
£ss
);

681 (*
ªmove_£ssi⁄_cb
)(
s¶_˘x_°
 *
˘x
,
SSL_SESSION
 *
£ss
);

682 
SSL_SESSION
 *(*
gë_£ssi⁄_cb
)(
s¶_°
 *
s¶
,

683 *
d©a
,
Àn
,*
c›y
);

687 
£ss_c⁄√˘
;

688 
£ss_c⁄√˘_ª√gŸüã
;

689 
£ss_c⁄√˘_good
;

690 
£ss_ac˚±
;

691 
£ss_ac˚±_ª√gŸüã
;

692 
£ss_ac˚±_good
;

693 
£ss_miss
;

694 
£ss_timeout
;

695 
£ss_ˇche_fuŒ
;

696 
£ss_hô
;

697 
£ss_cb_hô
;

703 } 
°©s
;

705 
ª„ªn˚s
;

708 (*
≠p_vîify_ˇŒback
)(
X509_STORE_CTX
 *, *);

709 *
≠p_vîify_¨g
;

714 
≥m_∑ssw‹d_cb
 *
deÁu…_∑sswd_ˇŒback
;

717 *
deÁu…_∑sswd_ˇŒback_u£rd©a
;

720 (*
˛õ¡_˚π_cb
)(
SSL
 *
s¶
, 
X509
 **
x509
, 
EVP_PKEY
 **
pkey
);

723 (*
≠p_gí_cookõ_cb
)(
SSL
 *
s¶
, *
cookõ
,

724 *
cookõ_Àn
);

727 (*
≠p_vîify_cookõ_cb
)(
SSL
 *
s¶
, *
cookõ
,

728 
cookõ_Àn
);

730 
CRYPTO_EX_DATA
 
ex_d©a
;

732 c⁄° 
EVP_MD
 *
rß_md5
;

733 c⁄° 
EVP_MD
 *
md5
;

734 c⁄° 
EVP_MD
 *
sha1
;

736 
STACK_OF
(
X509
Ë*
exåa_˚πs
;

737 
STACK_OF
(
SSL_COMP
Ë*
comp_mëhods
;

742 (*
öfo_ˇŒback
)(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
);

745 
STACK_OF
(
X509_NAME
Ë*
˛õ¡_CA
;

750 
›ti⁄s
;

751 
mode
;

752 
max_˚π_li°
;

754 
˚π_°
 *
˚π
;

755 
ªad_ahód
;

758 (*
msg_ˇŒback
)(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
);

759 *
msg_ˇŒback_¨g
;

761 
vîify_mode
;

762 
sid_˘x_Àngth
;

763 
sid_˘x
[
SSL_MAX_SID_CTX_LENGTH
];

764 (*
deÁu…_vîify_ˇŒback
)(
ok
,
X509_STORE_CTX
 *
˘x
);

767 
GEN_SESSION_CB
 
gíî©e_£ssi⁄_id
;

769 
X509_VERIFY_PARAM
 *
∑øm
;

772 
puΩo£
;

773 
åu°
;

776 
quõt_shutdown
;

778 #i‚de‡
OPENSSL_ENGINE


781 
ENGINE
 *
˛õ¡_˚π_ígöe
;

784 #i‚de‡
OPENSSL_NO_TLSEXT


786 (*
é£xt_£rvî«me_ˇŒback
)(
SSL
*, *, *);

787 *
é£xt_£rvî«me_¨g
;

789 
é£xt_tick_key_«me
[16];

790 
é£xt_tick_hmac_key
[16];

791 
é£xt_tick_´s_key
[16];

793 (*
é£xt_tickë_key_cb
)(
SSL
 *
s¶
,

794 *
«me
, *
iv
,

795 
EVP_CIPHER_CTX
 *
e˘x
,

796 
HMAC_CTX
 *
h˘x
, 
íc
);

800 (*
é£xt_°©us_cb
)(
SSL
 *
s¶
, *
¨g
);

801 *
é£xt_°©us_¨g
;

806 
	#SSL_SESS_CACHE_OFF
 0x0000

	)

807 
	#SSL_SESS_CACHE_CLIENT
 0x0001

	)

808 
	#SSL_SESS_CACHE_SERVER
 0x0002

	)

809 
	#SSL_SESS_CACHE_BOTH
 (
SSL_SESS_CACHE_CLIENT
|
SSL_SESS_CACHE_SERVER
)

	)

810 
	#SSL_SESS_CACHE_NO_AUTO_CLEAR
 0x0080

	)

812 
	#SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
 0x0100

	)

813 
	#SSL_SESS_CACHE_NO_INTERNAL_STORE
 0x0200

	)

814 
	#SSL_SESS_CACHE_NO_INTERNAL
 \

815 (
SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
|
SSL_SESS_CACHE_NO_INTERNAL_STORE
)

	)

817 
lhash_°
 *
SSL_CTX_£ssi⁄s
(
SSL_CTX
 *
˘x
);

818 
	#SSL_CTX_£ss_numbî
(
˘x
) \

819 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_NUMBER
,0,
NULL
)

	)

820 
	#SSL_CTX_£ss_c⁄√˘
(
˘x
) \

821 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT
,0,
NULL
)

	)

822 
	#SSL_CTX_£ss_c⁄√˘_good
(
˘x
) \

823 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT_GOOD
,0,
NULL
)

	)

824 
	#SSL_CTX_£ss_c⁄√˘_ª√gŸüã
(
˘x
) \

825 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT_RENEGOTIATE
,0,
NULL
)

	)

826 
	#SSL_CTX_£ss_ac˚±
(
˘x
) \

827 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT
,0,
NULL
)

	)

828 
	#SSL_CTX_£ss_ac˚±_ª√gŸüã
(
˘x
) \

829 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
,0,
NULL
)

	)

830 
	#SSL_CTX_£ss_ac˚±_good
(
˘x
) \

831 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT_GOOD
,0,
NULL
)

	)

832 
	#SSL_CTX_£ss_hôs
(
˘x
) \

833 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_HIT
,0,
NULL
)

	)

834 
	#SSL_CTX_£ss_cb_hôs
(
˘x
) \

835 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CB_HIT
,0,
NULL
)

	)

836 
	#SSL_CTX_£ss_mis£s
(
˘x
) \

837 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_MISSES
,0,
NULL
)

	)

838 
	#SSL_CTX_£ss_timeouts
(
˘x
) \

839 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_TIMEOUTS
,0,
NULL
)

	)

840 
	#SSL_CTX_£ss_ˇche_fuŒ
(
˘x
) \

841 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CACHE_FULL
,0,
NULL
)

	)

843 
SSL_CTX_£ss_£t_√w_cb
(
SSL_CTX
 *
˘x
, (*
√w_£ssi⁄_cb
)(
s¶_°
 *
s¶
,
SSL_SESSION
 *
£ss
));

844 (*
SSL_CTX_£ss_gë_√w_cb
(
SSL_CTX
 *
˘x
))(
s¶_°
 *
s¶
, 
SSL_SESSION
 *
£ss
);

845 
SSL_CTX_£ss_£t_ªmove_cb
(
SSL_CTX
 *
˘x
, (*
ªmove_£ssi⁄_cb
)(
s¶_˘x_°
 *˘x,
SSL_SESSION
 *
£ss
));

846 (*
SSL_CTX_£ss_gë_ªmove_cb
(
SSL_CTX
 *
˘x
))(
s¶_˘x_°
 *˘x, 
SSL_SESSION
 *
£ss
);

847 
SSL_CTX_£ss_£t_gë_cb
(
SSL_CTX
 *
˘x
, 
SSL_SESSION
 *(*
gë_£ssi⁄_cb
)(
s¶_°
 *
s¶
, *
d©a
,
Àn
,*
c›y
));

848 
SSL_SESSION
 *(*
SSL_CTX_£ss_gë_gë_cb
(
SSL_CTX
 *
˘x
))(
s¶_°
 *
s¶
, *
D©a
, 
Àn
, *
c›y
);

849 
SSL_CTX_£t_öfo_ˇŒback
(
SSL_CTX
 *
˘x
, (*
cb
)(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
));

850 (*
SSL_CTX_gë_öfo_ˇŒback
(
SSL_CTX
 *
˘x
))(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
);

851 
SSL_CTX_£t_˛õ¡_˚π_cb
(
SSL_CTX
 *
˘x
, (*
˛õ¡_˚π_cb
)(
SSL
 *
s¶
, 
X509
 **
x509
, 
EVP_PKEY
 **
pkey
));

852 (*
SSL_CTX_gë_˛õ¡_˚π_cb
(
SSL_CTX
 *
˘x
))(
SSL
 *
s¶
, 
X509
 **
x509
, 
EVP_PKEY
 **
pkey
);

853 #i‚de‡
OPENSSL_NO_ENGINE


854 
SSL_CTX_£t_˛õ¡_˚π_ígöe
(
SSL_CTX
 *
˘x
, 
ENGINE
 *
e
);

856 
SSL_CTX_£t_cookõ_gíî©e_cb
(
SSL_CTX
 *
˘x
, (*
≠p_gí_cookõ_cb
)(
SSL
 *
s¶
, *
cookõ
, *
cookõ_Àn
));

857 
SSL_CTX_£t_cookõ_vîify_cb
(
SSL_CTX
 *
˘x
, (*
≠p_vîify_cookõ_cb
)(
SSL
 *
s¶
, *
cookõ
, 
cookõ_Àn
));

859 
	#SSL_NOTHING
 1

	)

860 
	#SSL_WRITING
 2

	)

861 
	#SSL_READING
 3

	)

862 
	#SSL_X509_LOOKUP
 4

	)

865 
	#SSL_w™t_nŸhög
(
s
Ë(
	`SSL_w™t
(sË=
SSL_NOTHING
)

	)

866 
	#SSL_w™t_ªad
(
s
Ë(
	`SSL_w™t
(sË=
SSL_READING
)

	)

867 
	#SSL_w™t_wrôe
(
s
Ë(
	`SSL_w™t
(sË=
SSL_WRITING
)

	)

868 
	#SSL_w™t_x509_lookup
(
s
Ë(
	`SSL_w™t
(sË=
SSL_X509_LOOKUP
)

	)

870 
	ss¶_°


875 
vîsi⁄
;

876 
ty≥
;

878 
SSL_METHOD
 *
mëhod
;

884 #i‚de‡
OPENSSL_NO_BIO


885 
BIO
 *
rbio
;

886 
BIO
 *
wbio
;

887 
BIO
 *
bbio
;

890 *
rbio
;

891 *
wbio
;

892 *
bbio
;

898 
rw°©e
;

901 
ö_h™dshake
;

902 (*
h™dshake_func
)(
SSL
 *);

912 
£rvî
;

914 
√w_£ssi⁄
;

920 
quõt_shutdown
;

921 
shutdown
;

923 
°©e
;

924 
r°©e
;

926 
BUF_MEM
 *
öô_buf
;

927 *
öô_msg
;

928 
öô_num
;

929 
öô_off
;

932 *
∑ckë
;

933 
∑ckë_Àngth
;

935 
s¶2_°©e_°
 *
s2
;

936 
s¶3_°©e_°
 *
s3
;

937 
dés1_°©e_°
 *
d1
;

939 
ªad_ahód
;

943 (*
msg_ˇŒback
)(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
);

944 *
msg_ˇŒback_¨g
;

946 
hô
;

948 
X509_VERIFY_PARAM
 *
∑øm
;

951 
puΩo£
;

952 
åu°
;

956 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°
;

957 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°_by_id
;

962 
EVP_CIPHER_CTX
 *
íc_ªad_˘x
;

963 c⁄° 
EVP_MD
 *
ªad_hash
;

964 #i‚de‡
OPENSSL_NO_COMP


965 
COMP_CTX
 *
ex∑nd
;

967 *
ex∑nd
;

970 
EVP_CIPHER_CTX
 *
íc_wrôe_˘x
;

971 c⁄° 
EVP_MD
 *
wrôe_hash
;

972 #i‚de‡
OPENSSL_NO_COMP


973 
COMP_CTX
 *
com¥ess
;

975 *
com¥ess
;

982 
˚π_°
 *
˚π
;

986 
sid_˘x_Àngth
;

987 
sid_˘x
[
SSL_MAX_SID_CTX_LENGTH
];

990 
SSL_SESSION
 *
£ssi⁄
;

993 
GEN_SESSION_CB
 
gíî©e_£ssi⁄_id
;

996 
vîify_mode
;

998 (*
vîify_ˇŒback
)(
ok
,
X509_STORE_CTX
 *
˘x
);

1000 (*
öfo_ˇŒback
)(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
);

1002 
îr‹
;

1003 
îr‹_code
;

1005 #i‚de‡
OPENSSL_NO_KRB5


1006 
KSSL_CTX
 *
ks¶_˘x
;

1009 
SSL_CTX
 *
˘x
;

1012 
debug
;

1015 
vîify_ªsu…
;

1016 
CRYPTO_EX_DATA
 
ex_d©a
;

1019 
STACK_OF
(
X509_NAME
Ë*
˛õ¡_CA
;

1021 
ª„ªn˚s
;

1022 
›ti⁄s
;

1023 
mode
;

1024 
max_˚π_li°
;

1025 
fú°_∑ckë
;

1026 
˛õ¡_vîsi⁄
;

1028 #i‚de‡
OPENSSL_NO_TLSEXT


1030 (*
é£xt_debug_cb
)(
SSL
 *
s
, 
˛õ¡_£rvî
, 
ty≥
,

1031 *
d©a
, 
Àn
,

1032 *
¨g
);

1033 *
é£xt_debug_¨g
;

1034 *
é£xt_ho°«me
;

1035 
£rvî«me_d⁄e
;

1042 
é£xt_°©us_ty≥
;

1044 
é£xt_°©us_ex≥˘ed
;

1046 
STACK_OF
(
OCSP_RESPID
Ë*
é£xt_oc•_ids
;

1047 
X509_EXTENSIONS
 *
é£xt_oc•_exts
;

1049 *
é£xt_oc•_ª•
;

1050 
é£xt_oc•_ª•Àn
;

1053 
é£xt_tickë_ex≥˘ed
;

1054 
SSL_CTX
 * 
öôül_˘x
;

1055 
	#£ssi⁄_˘x
 
öôül_˘x


	)

1057 
	#£ssi⁄_˘x
 
˘x


	)

1061 #ifde‡
__˝lu•lus


1065 
	~<›ís¶/s¶2.h
>

1066 
	~<›ís¶/s¶3.h
>

1067 
	~<›ís¶/és1.h
>

1068 
	~<›ís¶/dés1.h
>

1069 
	~<›ís¶/s¶23.h
>

1071 #ifde‡ 
__˝lu•lus


1076 
	#SSL_£t_≠p_d©a
(
s
,
¨g
Ë(
	`SSL_£t_ex_d©a
(s,0,(*Ôrg))

	)

1077 
	#SSL_gë_≠p_d©a
(
s
Ë(
	`SSL_gë_ex_d©a
(s,0))

	)

1078 
	#SSL_SESSION_£t_≠p_d©a
(
s
,
a
Ë(
	`SSL_SESSION_£t_ex_d©a
(s,0,(*Ô))

	)

1079 
	#SSL_SESSION_gë_≠p_d©a
(
s
Ë(
	`SSL_SESSION_gë_ex_d©a
(s,0))

	)

1080 
	#SSL_CTX_gë_≠p_d©a
(
˘x
Ë(
	`SSL_CTX_gë_ex_d©a
(˘x,0))

	)

1081 
	#SSL_CTX_£t_≠p_d©a
(
˘x
,
¨g
Ë(
	`SSL_CTX_£t_ex_d©a
(˘x,0,(*Ôrg))

	)

1090 
	#SSL_ST_CONNECT
 0x1000

	)

1091 
	#SSL_ST_ACCEPT
 0x2000

	)

1092 
	#SSL_ST_MASK
 0x0FFF

	)

1093 
	#SSL_ST_INIT
 (
SSL_ST_CONNECT
|
SSL_ST_ACCEPT
)

	)

1094 
	#SSL_ST_BEFORE
 0x4000

	)

1095 
	#SSL_ST_OK
 0x03

	)

1096 
	#SSL_ST_RENEGOTIATE
 (0x04|
SSL_ST_INIT
)

	)

1098 
	#SSL_CB_LOOP
 0x01

	)

1099 
	#SSL_CB_EXIT
 0x02

	)

1100 
	#SSL_CB_READ
 0x04

	)

1101 
	#SSL_CB_WRITE
 0x08

	)

1102 
	#SSL_CB_ALERT
 0x4000

	)

1103 
	#SSL_CB_READ_ALERT
 (
SSL_CB_ALERT
|
SSL_CB_READ
)

	)

1104 
	#SSL_CB_WRITE_ALERT
 (
SSL_CB_ALERT
|
SSL_CB_WRITE
)

	)

1105 
	#SSL_CB_ACCEPT_LOOP
 (
SSL_ST_ACCEPT
|
SSL_CB_LOOP
)

	)

1106 
	#SSL_CB_ACCEPT_EXIT
 (
SSL_ST_ACCEPT
|
SSL_CB_EXIT
)

	)

1107 
	#SSL_CB_CONNECT_LOOP
 (
SSL_ST_CONNECT
|
SSL_CB_LOOP
)

	)

1108 
	#SSL_CB_CONNECT_EXIT
 (
SSL_ST_CONNECT
|
SSL_CB_EXIT
)

	)

1109 
	#SSL_CB_HANDSHAKE_START
 0x10

	)

1110 
	#SSL_CB_HANDSHAKE_DONE
 0x20

	)

1113 
	#SSL_gë_°©e
(
a
Ë
	`SSL_°©e
◊)

	)

1114 
	#SSL_is_öô_föished
(
a
Ë(
	`SSL_°©e
◊Ë=
SSL_ST_OK
)

	)

1115 
	#SSL_ö_öô
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_INIT
)

	)

1116 
	#SSL_ö_bef‹e
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_BEFORE
)

	)

1117 
	#SSL_ö_c⁄√˘_öô
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_CONNECT
)

	)

1118 
	#SSL_ö_ac˚±_öô
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_ACCEPT
)

	)

1122 
	#SSL_ST_READ_HEADER
 0xF0

	)

1123 
	#SSL_ST_READ_BODY
 0xF1

	)

1124 
	#SSL_ST_READ_DONE
 0xF2

	)

1130 
size_t
 
SSL_gë_föished
(c⁄° 
SSL
 *
s
, *
buf
, size_à
cou¡
);

1131 
size_t
 
SSL_gë_≥î_föished
(c⁄° 
SSL
 *
s
, *
buf
, size_à
cou¡
);

1135 
	#SSL_VERIFY_NONE
 0x00

	)

1136 
	#SSL_VERIFY_PEER
 0x01

	)

1137 
	#SSL_VERIFY_FAIL_IF_NO_PEER_CERT
 0x02

	)

1138 
	#SSL_VERIFY_CLIENT_ONCE
 0x04

	)

1140 
	#O≥nSSL_add_s¶_Æg‹ôhms
(Ë
	`SSL_libøry_öô
()

	)

1141 
	#SSLóy_add_s¶_Æg‹ôhms
(Ë
	`SSL_libøry_öô
()

	)

1145 
	#SSL_CTX_£t_deÁu…_vîify
(
a
,
b
,
c
Ë
	`SSL_CTX_£t_vîify
◊,b,c)

	)

1146 
	#SSL_£t_¥ef_cùhî
(
c
,
n
Ë
	`SSL_£t_cùhî_li°
(c,n)

	)

1147 
	#SSL_add_£ssi⁄
(
a
,
b
Ë
	`SSL_CTX_add_£ssi⁄
(◊),(b))

	)

1148 
	#SSL_ªmove_£ssi⁄
(
a
,
b
Ë
	`SSL_CTX_ªmove_£ssi⁄
(◊),(b))

	)

1149 
	#SSL_Êush_£ssi⁄s
(
a
,
b
Ë
	`SSL_CTX_Êush_£ssi⁄s
(◊),(b))

	)

1152 
	#SSL_gë_cùhî
(
s
) \

1153 
	`SSL_CIPHER_gë_«me
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1154 
	#SSL_gë_cùhî_bôs
(
s
,
≈
) \

1155 
	`SSL_CIPHER_gë_bôs
(
	`SSL_gë_cuºít_cùhî
(
s
),
≈
)

	)

1156 
	#SSL_gë_cùhî_vîsi⁄
(
s
) \

1157 
	`SSL_CIPHER_gë_vîsi⁄
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1158 
	#SSL_gë_cùhî_«me
(
s
) \

1159 
	`SSL_CIPHER_gë_«me
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1160 
	#SSL_gë_time
(
a
Ë
	`SSL_SESSION_gë_time
◊)

	)

1161 
	#SSL_£t_time
(
a
,
b
Ë
	`SSL_SESSION_£t_time
(◊),(b))

	)

1162 
	#SSL_gë_timeout
(
a
Ë
	`SSL_SESSION_gë_timeout
◊)

	)

1163 
	#SSL_£t_timeout
(
a
,
b
Ë
	`SSL_SESSION_£t_timeout
(◊),(b))

	)

1166 
	#d2i_SSL_SESSION_bio
(
bp
,
s_id
Ë
	`ASN1_d2i_bio_of
(
SSL_SESSION
,
SSL_SESSION_√w
,
d2i_SSL_SESSION
,bp,s_id)

	)

1167 
	#i2d_SSL_SESSION_bio
(
bp
,
s_id
Ë
	`ASN1_i2d_bio_of
(
SSL_SESSION
,
i2d_SSL_SESSION
,bp,s_id)

	)

1168 
	#PEM_ªad_SSL_SESSION
(
Â
,
x
,
cb
,
u
Ë(
SSL_SESSION
 *)
	`PEM_ASN1_ªad
( \

1169 (*(*)())
d2i_SSL_SESSION
,
PEM_STRING_SSL_SESSION
,
Â
,(**)
x
,
cb
,
u
)

	)

1170 
	#PEM_ªad_bio_SSL_SESSION
(
bp
,
x
,
cb
,
u
Ë
	`PEM_ASN1_ªad_bio_of
(
SSL_SESSION
,
d2i_SSL_SESSION
,
PEM_STRING_SSL_SESSION
,bp,x,cb,u)

	)

1171 
	#PEM_wrôe_SSL_SESSION
(
Â
,
x
) \

1172 
	`PEM_ASN1_wrôe
(((*)())
i2d_SSL_SESSION
, \

1173 
PEM_STRING_SSL_SESSION
,
Â
, (*)
x
, 
NULL
,NULL,0,NULL,NULL)

	)

1174 
	#PEM_wrôe_bio_SSL_SESSION
(
bp
,
x
) \

1175 
	`PEM_ASN1_wrôe_bio_of
(
SSL_SESSION
,
i2d_SSL_SESSION
,
PEM_STRING_SSL_SESSION
,
bp
,
x
,
NULL
,NULL,0,NULL,NULL)

	)

1178 
	#SSL_AD_REASON_OFFSET
 1000

	)

1180 
	#SSL_AD_CLOSE_NOTIFY
 
SSL3_AD_CLOSE_NOTIFY


	)

1181 
	#SSL_AD_UNEXPECTED_MESSAGE
 
SSL3_AD_UNEXPECTED_MESSAGE


	)

1182 
	#SSL_AD_BAD_RECORD_MAC
 
SSL3_AD_BAD_RECORD_MAC


	)

1183 
	#SSL_AD_DECRYPTION_FAILED
 
TLS1_AD_DECRYPTION_FAILED


	)

1184 
	#SSL_AD_RECORD_OVERFLOW
 
TLS1_AD_RECORD_OVERFLOW


	)

1185 
	#SSL_AD_DECOMPRESSION_FAILURE
 
SSL3_AD_DECOMPRESSION_FAILURE


	)

1186 
	#SSL_AD_HANDSHAKE_FAILURE
 
SSL3_AD_HANDSHAKE_FAILURE


	)

1187 
	#SSL_AD_NO_CERTIFICATE
 
SSL3_AD_NO_CERTIFICATE


	)

1188 
	#SSL_AD_BAD_CERTIFICATE
 
SSL3_AD_BAD_CERTIFICATE


	)

1189 
	#SSL_AD_UNSUPPORTED_CERTIFICATE
 
SSL3_AD_UNSUPPORTED_CERTIFICATE


	)

1190 
	#SSL_AD_CERTIFICATE_REVOKED
 
SSL3_AD_CERTIFICATE_REVOKED


	)

1191 
	#SSL_AD_CERTIFICATE_EXPIRED
 
SSL3_AD_CERTIFICATE_EXPIRED


	)

1192 
	#SSL_AD_CERTIFICATE_UNKNOWN
 
SSL3_AD_CERTIFICATE_UNKNOWN


	)

1193 
	#SSL_AD_ILLEGAL_PARAMETER
 
SSL3_AD_ILLEGAL_PARAMETER


	)

1194 
	#SSL_AD_UNKNOWN_CA
 
TLS1_AD_UNKNOWN_CA


	)

1195 
	#SSL_AD_ACCESS_DENIED
 
TLS1_AD_ACCESS_DENIED


	)

1196 
	#SSL_AD_DECODE_ERROR
 
TLS1_AD_DECODE_ERROR


	)

1197 
	#SSL_AD_DECRYPT_ERROR
 
TLS1_AD_DECRYPT_ERROR


	)

1198 
	#SSL_AD_EXPORT_RESTRICTION
 
TLS1_AD_EXPORT_RESTRICTION


	)

1199 
	#SSL_AD_PROTOCOL_VERSION
 
TLS1_AD_PROTOCOL_VERSION


	)

1200 
	#SSL_AD_INSUFFICIENT_SECURITY
 
TLS1_AD_INSUFFICIENT_SECURITY


	)

1201 
	#SSL_AD_INTERNAL_ERROR
 
TLS1_AD_INTERNAL_ERROR


	)

1202 
	#SSL_AD_USER_CANCELLED
 
TLS1_AD_USER_CANCELLED


	)

1203 
	#SSL_AD_NO_RENEGOTIATION
 
TLS1_AD_NO_RENEGOTIATION


	)

1204 
	#SSL_AD_UNSUPPORTED_EXTENSION
 
TLS1_AD_UNSUPPORTED_EXTENSION


	)

1205 
	#SSL_AD_CERTIFICATE_UNOBTAINABLE
 
TLS1_AD_CERTIFICATE_UNOBTAINABLE


	)

1206 
	#SSL_AD_UNRECOGNIZED_NAME
 
TLS1_AD_UNRECOGNIZED_NAME


	)

1207 
	#SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE
 
TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE


	)

1209 
	#SSL_ERROR_NONE
 0

	)

1210 
	#SSL_ERROR_SSL
 1

	)

1211 
	#SSL_ERROR_WANT_READ
 2

	)

1212 
	#SSL_ERROR_WANT_WRITE
 3

	)

1213 
	#SSL_ERROR_WANT_X509_LOOKUP
 4

	)

1214 
	#SSL_ERROR_SYSCALL
 5

	)

1215 
	#SSL_ERROR_ZERO_RETURN
 6

	)

1216 
	#SSL_ERROR_WANT_CONNECT
 7

	)

1217 
	#SSL_ERROR_WANT_ACCEPT
 8

	)

1219 
	#SSL_CTRL_NEED_TMP_RSA
 1

	)

1220 
	#SSL_CTRL_SET_TMP_RSA
 2

	)

1221 
	#SSL_CTRL_SET_TMP_DH
 3

	)

1222 
	#SSL_CTRL_SET_TMP_ECDH
 4

	)

1223 
	#SSL_CTRL_SET_TMP_RSA_CB
 5

	)

1224 
	#SSL_CTRL_SET_TMP_DH_CB
 6

	)

1225 
	#SSL_CTRL_SET_TMP_ECDH_CB
 7

	)

1227 
	#SSL_CTRL_GET_SESSION_REUSED
 8

	)

1228 
	#SSL_CTRL_GET_CLIENT_CERT_REQUEST
 9

	)

1229 
	#SSL_CTRL_GET_NUM_RENEGOTIATIONS
 10

	)

1230 
	#SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
 11

	)

1231 
	#SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
 12

	)

1232 
	#SSL_CTRL_GET_FLAGS
 13

	)

1233 
	#SSL_CTRL_EXTRA_CHAIN_CERT
 14

	)

1235 
	#SSL_CTRL_SET_MSG_CALLBACK
 15

	)

1236 
	#SSL_CTRL_SET_MSG_CALLBACK_ARG
 16

	)

1239 
	#SSL_CTRL_SET_MTU
 17

	)

1241 
	#SSL_CTRL_SESS_NUMBER
 20

	)

1242 
	#SSL_CTRL_SESS_CONNECT
 21

	)

1243 
	#SSL_CTRL_SESS_CONNECT_GOOD
 22

	)

1244 
	#SSL_CTRL_SESS_CONNECT_RENEGOTIATE
 23

	)

1245 
	#SSL_CTRL_SESS_ACCEPT
 24

	)

1246 
	#SSL_CTRL_SESS_ACCEPT_GOOD
 25

	)

1247 
	#SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
 26

	)

1248 
	#SSL_CTRL_SESS_HIT
 27

	)

1249 
	#SSL_CTRL_SESS_CB_HIT
 28

	)

1250 
	#SSL_CTRL_SESS_MISSES
 29

	)

1251 
	#SSL_CTRL_SESS_TIMEOUTS
 30

	)

1252 
	#SSL_CTRL_SESS_CACHE_FULL
 31

	)

1253 
	#SSL_CTRL_OPTIONS
 32

	)

1254 
	#SSL_CTRL_MODE
 33

	)

1256 
	#SSL_CTRL_GET_READ_AHEAD
 40

	)

1257 
	#SSL_CTRL_SET_READ_AHEAD
 41

	)

1258 
	#SSL_CTRL_SET_SESS_CACHE_SIZE
 42

	)

1259 
	#SSL_CTRL_GET_SESS_CACHE_SIZE
 43

	)

1260 
	#SSL_CTRL_SET_SESS_CACHE_MODE
 44

	)

1261 
	#SSL_CTRL_GET_SESS_CACHE_MODE
 45

	)

1263 
	#SSL_CTRL_GET_MAX_CERT_LIST
 50

	)

1264 
	#SSL_CTRL_SET_MAX_CERT_LIST
 51

	)

1267 #i‚de‡
OPENSSL_NO_TLSEXT


1268 
	#SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
 53

	)

1269 
	#SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
 54

	)

1270 
	#SSL_CTRL_SET_TLSEXT_HOSTNAME
 55

	)

1271 
	#SSL_CTRL_SET_TLSEXT_DEBUG_CB
 56

	)

1272 
	#SSL_CTRL_SET_TLSEXT_DEBUG_ARG
 57

	)

1273 
	#SSL_CTRL_GET_TLSEXT_TICKET_KEYS
 58

	)

1274 
	#SSL_CTRL_SET_TLSEXT_TICKET_KEYS
 59

	)

1276 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
 63

	)

1277 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG
 64

	)

1278 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
 65

	)

1279 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS
 66

	)

1280 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS
 67

	)

1281 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS
 68

	)

1282 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS
 69

	)

1283 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP
 70

	)

1284 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP
 71

	)

1286 
	#SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB
 72

	)

1289 
	#DTLS_CTRL_GET_TIMEOUT
 73

	)

1290 
	#DTLS_CTRL_HANDLE_TIMEOUT
 74

	)

1291 
	#DTLS_CTRL_LISTEN
 75

	)

1293 
	#SSL_CTRL_GET_RI_SUPPORT
 76

	)

1294 
	#SSL_CTRL_CLEAR_OPTIONS
 77

	)

1295 
	#SSL_CTRL_CLEAR_MODE
 78

	)

1297 
	#DTLSv1_gë_timeout
(
s¶
, 
¨g
) \

1298 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_GET_TIMEOUT
,0, (*)
¨g
)

	)

1299 
	#DTLSv1_h™dÀ_timeout
(
s¶
) \

1300 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_HANDLE_TIMEOUT
,0, 
NULL
)

	)

1301 
	#DTLSv1_li°í
(
s¶
, 
≥î
) \

1302 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_LISTEN
,0, (*)
≥î
)

	)

1304 
	#SSL_£ssi⁄_ªu£d
(
s¶
) \

1305 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_SESSION_REUSED
,0,
NULL
)

	)

1306 
	#SSL_num_ª√gŸüti⁄s
(
s¶
) \

1307 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_NUM_RENEGOTIATIONS
,0,
NULL
)

	)

1308 
	#SSL_˛ór_num_ª√gŸüti⁄s
(
s¶
) \

1309 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
,0,
NULL
)

	)

1310 
	#SSL_tŸÆ_ª√gŸüti⁄s
(
s¶
) \

1311 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
,0,
NULL
)

	)

1313 
	#SSL_CTX_√ed_tmp_RSA
(
˘x
) \

1314 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_NEED_TMP_RSA
,0,
NULL
)

	)

1315 
	#SSL_CTX_£t_tmp_rß
(
˘x
,
rß
) \

1316 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_RSA
,0,(*)
rß
)

	)

1317 
	#SSL_CTX_£t_tmp_dh
(
˘x
,
dh
) \

1318 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_DH
,0,(*)
dh
)

	)

1319 
	#SSL_CTX_£t_tmp_ecdh
(
˘x
,
ecdh
) \

1320 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_ECDH
,0,(*)
ecdh
)

	)

1322 
	#SSL_√ed_tmp_RSA
(
s¶
) \

1323 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_NEED_TMP_RSA
,0,
NULL
)

	)

1324 
	#SSL_£t_tmp_rß
(
s¶
,
rß
) \

1325 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_RSA
,0,(*)
rß
)

	)

1326 
	#SSL_£t_tmp_dh
(
s¶
,
dh
) \

1327 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_DH
,0,(*)
dh
)

	)

1328 
	#SSL_£t_tmp_ecdh
(
s¶
,
ecdh
) \

1329 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_ECDH
,0,(*)
ecdh
)

	)

1331 
	#SSL_CTX_add_exåa_chaö_˚π
(
˘x
,
x509
) \

1332 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_EXTRA_CHAIN_CERT
,0,(*)
x509
)

	)

1334 #i‚de‡
OPENSSL_NO_BIO


1335 
BIO_METHOD
 *
BIO_f_s¶
();

1336 
BIO
 *
BIO_√w_s¶
(
SSL_CTX
 *
˘x
,
˛õ¡
);

1337 
BIO
 *
BIO_√w_s¶_c⁄√˘
(
SSL_CTX
 *
˘x
);

1338 
BIO
 *
BIO_√w_buf„r_s¶_c⁄√˘
(
SSL_CTX
 *
˘x
);

1339 
BIO_s¶_c›y_£ssi⁄_id
(
BIO
 *
to
,BIO *
‰om
);

1340 
BIO_s¶_shutdown
(
BIO
 *
s¶_bio
);

1344 
SSL_CTX_£t_cùhî_li°
(
SSL_CTX
 *,c⁄° *
°r
);

1345 
SSL_CTX
 *
SSL_CTX_√w
(
SSL_METHOD
 *
mëh
);

1346 
SSL_CTX_‰ì
(
SSL_CTX
 *);

1347 
SSL_CTX_£t_timeout
(
SSL_CTX
 *
˘x
,
t
);

1348 
SSL_CTX_gë_timeout
(c⁄° 
SSL_CTX
 *
˘x
);

1349 
X509_STORE
 *
SSL_CTX_gë_˚π_°‹e
(c⁄° 
SSL_CTX
 *);

1350 
SSL_CTX_£t_˚π_°‹e
(
SSL_CTX
 *,
X509_STORE
 *);

1351 
SSL_w™t
(c⁄° 
SSL
 *
s
);

1352 
SSL_˛ór
(
SSL
 *
s
);

1354 
SSL_CTX_Êush_£ssi⁄s
(
SSL_CTX
 *
˘x
,
tm
);

1356 
SSL_CIPHER
 *
SSL_gë_cuºít_cùhî
(c⁄° 
SSL
 *
s
);

1357 
SSL_CIPHER_gë_bôs
(c⁄° 
SSL_CIPHER
 *
c
,*
Æg_bôs
);

1358 * 
SSL_CIPHER_gë_vîsi⁄
(c⁄° 
SSL_CIPHER
 *
c
);

1359 c⁄° * 
SSL_CIPHER_gë_«me
(c⁄° 
SSL_CIPHER
 *
c
);

1361 
SSL_gë_fd
(c⁄° 
SSL
 *
s
);

1362 
SSL_gë_rfd
(c⁄° 
SSL
 *
s
);

1363 
SSL_gë_wfd
(c⁄° 
SSL
 *
s
);

1364 c⁄° * 
SSL_gë_cùhî_li°
(c⁄° 
SSL
 *
s
,
n
);

1365 * 
SSL_gë_sh¨ed_cùhîs
(c⁄° 
SSL
 *
s
, *
buf
, 
Àn
);

1366 
SSL_gë_ªad_ahód
(c⁄° 
SSL
 * 
s
);

1367 
SSL_≥ndög
(c⁄° 
SSL
 *
s
);

1368 #i‚de‡
OPENSSL_NO_SOCK


1369 
SSL_£t_fd
(
SSL
 *
s
, 
fd
);

1370 
SSL_£t_rfd
(
SSL
 *
s
, 
fd
);

1371 
SSL_£t_wfd
(
SSL
 *
s
, 
fd
);

1373 #i‚de‡
OPENSSL_NO_BIO


1374 
SSL_£t_bio
(
SSL
 *
s
, 
BIO
 *
rbio
,BIO *
wbio
);

1375 
BIO
 * 
SSL_gë_rbio
(c⁄° 
SSL
 *
s
);

1376 
BIO
 * 
SSL_gë_wbio
(c⁄° 
SSL
 *
s
);

1378 
SSL_£t_cùhî_li°
(
SSL
 *
s
, c⁄° *
°r
);

1379 
SSL_£t_ªad_ahód
(
SSL
 *
s
, 
yes
);

1380 
SSL_gë_vîify_mode
(c⁄° 
SSL
 *
s
);

1381 
SSL_gë_vîify_dïth
(c⁄° 
SSL
 *
s
);

1382 (*
SSL_gë_vîify_ˇŒback
(c⁄° 
SSL
 *
s
))(,
X509_STORE_CTX
 *);

1383 
SSL_£t_vîify
(
SSL
 *
s
, 
mode
,

1384 (*
ˇŒback
)(
ok
,
X509_STORE_CTX
 *
˘x
));

1385 
SSL_£t_vîify_dïth
(
SSL
 *
s
, 
dïth
);

1386 #i‚de‡
OPENSSL_NO_RSA


1387 
SSL_u£_RSAPriv©eKey
(
SSL
 *
s¶
, 
RSA
 *
rß
);

1389 
SSL_u£_RSAPriv©eKey_ASN1
(
SSL
 *
s¶
, *
d
, 
Àn
);

1390 
SSL_u£_Priv©eKey
(
SSL
 *
s¶
, 
EVP_PKEY
 *
pkey
);

1391 
SSL_u£_Priv©eKey_ASN1
(
pk
,
SSL
 *
s¶
, c⁄° *
d
, 
Àn
);

1392 
SSL_u£_˚πifiˇã
(
SSL
 *
s¶
, 
X509
 *
x
);

1393 
SSL_u£_˚πifiˇã_ASN1
(
SSL
 *
s¶
, c⁄° *
d
, 
Àn
);

1395 #i‚de‡
OPENSSL_NO_STDIO


1396 
SSL_u£_RSAPriv©eKey_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1397 
SSL_u£_Priv©eKey_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1398 
SSL_u£_˚πifiˇã_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1399 
SSL_CTX_u£_RSAPriv©eKey_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

1400 
SSL_CTX_u£_Priv©eKey_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

1401 
SSL_CTX_u£_˚πifiˇã_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

1402 
SSL_CTX_u£_˚πifiˇã_chaö_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
);

1403 
STACK_OF
(
X509_NAME
Ë*
SSL_lﬂd_˛õ¡_CA_fûe
(c⁄° *
fûe
);

1404 
SSL_add_fûe_˚π_subje˘s_to_°ack
(
STACK_OF
(
X509_NAME
Ë*
°ackCAs
,

1405 c⁄° *
fûe
);

1406 #i‚de‡
OPENSSL_SYS_VMS


1407 #i‚de‡
OPENSSL_SYS_MACINTOSH_CLASSIC


1408 
SSL_add_dú_˚π_subje˘s_to_°ack
(
STACK_OF
(
X509_NAME
Ë*
°ackCAs
,

1409 c⁄° *
dú
);

1415 
SSL_lﬂd_îr‹_°rögs
();

1416 c⁄° *
SSL_°©e_°rög
(c⁄° 
SSL
 *
s
);

1417 c⁄° *
SSL_r°©e_°rög
(c⁄° 
SSL
 *
s
);

1418 c⁄° *
SSL_°©e_°rög_l⁄g
(c⁄° 
SSL
 *
s
);

1419 c⁄° *
SSL_r°©e_°rög_l⁄g
(c⁄° 
SSL
 *
s
);

1420 
SSL_SESSION_gë_time
(c⁄° 
SSL_SESSION
 *
s
);

1421 
SSL_SESSION_£t_time
(
SSL_SESSION
 *
s
, 
t
);

1422 
SSL_SESSION_gë_timeout
(c⁄° 
SSL_SESSION
 *
s
);

1423 
SSL_SESSION_£t_timeout
(
SSL_SESSION
 *
s
, 
t
);

1424 
SSL_c›y_£ssi⁄_id
(
SSL
 *
to
,c⁄° SSL *
‰om
);

1426 
SSL_SESSION
 *
SSL_SESSION_√w
();

1427 
SSL_SESSION_hash
(c⁄° 
SSL_SESSION
 *
a
);

1428 
SSL_SESSION_cmp
(c⁄° 
SSL_SESSION
 *
a
,c⁄° SSL_SESSION *
b
);

1429 c⁄° *
SSL_SESSION_gë_id
(c⁄° 
SSL_SESSION
 *
s
, *
Àn
);

1430 #i‚de‡
OPENSSL_NO_FP_API


1431 
SSL_SESSION_¥öt_Â
(
FILE
 *
Â
,c⁄° 
SSL_SESSION
 *
£s
);

1433 #i‚de‡
OPENSSL_NO_BIO


1434 
SSL_SESSION_¥öt
(
BIO
 *
Â
,c⁄° 
SSL_SESSION
 *
£s
);

1436 
SSL_SESSION_‰ì
(
SSL_SESSION
 *
£s
);

1437 
i2d_SSL_SESSION
(
SSL_SESSION
 *
ö
,**
µ
);

1438 
SSL_£t_£ssi⁄
(
SSL
 *
to
, 
SSL_SESSION
 *
£ssi⁄
);

1439 
SSL_CTX_add_£ssi⁄
(
SSL_CTX
 *
s
, 
SSL_SESSION
 *
c
);

1440 
SSL_CTX_ªmove_£ssi⁄
(
SSL_CTX
 *,
SSL_SESSION
 *
c
);

1441 
SSL_CTX_£t_gíî©e_£ssi⁄_id
(
SSL_CTX
 *, 
GEN_SESSION_CB
);

1442 
SSL_£t_gíî©e_£ssi⁄_id
(
SSL
 *, 
GEN_SESSION_CB
);

1443 
SSL_has_m©chög_£ssi⁄_id
(c⁄° 
SSL
 *
s¶
, c⁄° *
id
,

1444 
id_Àn
);

1445 
SSL_SESSION
 *
d2i_SSL_SESSION
(SSL_SESSION **
a
,c⁄° **
µ
,

1446 
Àngth
);

1448 #ifde‡
HEADER_X509_H


1449 
X509
 * 
SSL_gë_≥î_˚πifiˇã
(c⁄° 
SSL
 *
s
);

1452 
STACK_OF
(
X509
Ë*
SSL_gë_≥î_˚π_chaö
(c⁄° 
SSL
 *
s
);

1454 
SSL_CTX_gë_vîify_mode
(c⁄° 
SSL_CTX
 *
˘x
);

1455 
SSL_CTX_gë_vîify_dïth
(c⁄° 
SSL_CTX
 *
˘x
);

1456 (*
SSL_CTX_gë_vîify_ˇŒback
(c⁄° 
SSL_CTX
 *
˘x
))(,
X509_STORE_CTX
 *);

1457 
SSL_CTX_£t_vîify
(
SSL_CTX
 *
˘x
,
mode
,

1458 (*
ˇŒback
)(, 
X509_STORE_CTX
 *));

1459 
SSL_CTX_£t_vîify_dïth
(
SSL_CTX
 *
˘x
,
dïth
);

1460 
SSL_CTX_£t_˚π_vîify_ˇŒback
(
SSL_CTX
 *
˘x
, (*
cb
)(
X509_STORE_CTX
 *,*), *
¨g
);

1461 #i‚de‡
OPENSSL_NO_RSA


1462 
SSL_CTX_u£_RSAPriv©eKey
(
SSL_CTX
 *
˘x
, 
RSA
 *
rß
);

1464 
SSL_CTX_u£_RSAPriv©eKey_ASN1
(
SSL_CTX
 *
˘x
, c⁄° *
d
, 
Àn
);

1465 
SSL_CTX_u£_Priv©eKey
(
SSL_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
);

1466 
SSL_CTX_u£_Priv©eKey_ASN1
(
pk
,
SSL_CTX
 *
˘x
,

1467 c⁄° *
d
, 
Àn
);

1468 
SSL_CTX_u£_˚πifiˇã
(
SSL_CTX
 *
˘x
, 
X509
 *
x
);

1469 
SSL_CTX_u£_˚πifiˇã_ASN1
(
SSL_CTX
 *
˘x
, 
Àn
, c⁄° *
d
);

1471 
SSL_CTX_£t_deÁu…_∑sswd_cb
(
SSL_CTX
 *
˘x
, 
≥m_∑ssw‹d_cb
 *
cb
);

1472 
SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
(
SSL_CTX
 *
˘x
, *
u
);

1474 
SSL_CTX_check_¥iv©e_key
(c⁄° 
SSL_CTX
 *
˘x
);

1475 
SSL_check_¥iv©e_key
(c⁄° 
SSL
 *
˘x
);

1477 
SSL_CTX_£t_£ssi⁄_id_c⁄ãxt
(
SSL_CTX
 *
˘x
,c⁄° *
sid_˘x
,

1478 
sid_˘x_Àn
);

1480 
SSL
 * 
SSL_√w
(
SSL_CTX
 *
˘x
);

1481 
SSL_£t_£ssi⁄_id_c⁄ãxt
(
SSL
 *
s¶
,c⁄° *
sid_˘x
,

1482 
sid_˘x_Àn
);

1484 
SSL_CTX_£t_puΩo£
(
SSL_CTX
 *
s
, 
puΩo£
);

1485 
SSL_£t_puΩo£
(
SSL
 *
s
, 
puΩo£
);

1486 
SSL_CTX_£t_åu°
(
SSL_CTX
 *
s
, 
åu°
);

1487 
SSL_£t_åu°
(
SSL
 *
s
, 
åu°
);

1489 
SSL_‰ì
(
SSL
 *
s¶
);

1490 
SSL_ac˚±
(
SSL
 *
s¶
);

1491 
SSL_c⁄√˘
(
SSL
 *
s¶
);

1492 
SSL_ªad
(
SSL
 *
s¶
,*
buf
,
num
);

1493 
SSL_≥ek
(
SSL
 *
s¶
,*
buf
,
num
);

1494 
SSL_wrôe
(
SSL
 *
s¶
,c⁄° *
buf
,
num
);

1495 
SSL_˘æ
(
SSL
 *
s¶
,
cmd
, 
œrg
, *
∑rg
);

1496 
SSL_ˇŒback_˘æ
(
SSL
 *, , (*)());

1497 
SSL_CTX_˘æ
(
SSL_CTX
 *
˘x
,
cmd
, 
œrg
, *
∑rg
);

1498 
SSL_CTX_ˇŒback_˘æ
(
SSL_CTX
 *, , (*)());

1500 
SSL_gë_îr‹
(c⁄° 
SSL
 *
s
,
ªt_code
);

1501 c⁄° *
SSL_gë_vîsi⁄
(c⁄° 
SSL
 *
s
);

1504 
SSL_CTX_£t_s¶_vîsi⁄
(
SSL_CTX
 *
˘x
,
SSL_METHOD
 *
mëh
);

1506 
SSL_METHOD
 *
SSLv2_mëhod
();

1507 
SSL_METHOD
 *
SSLv2_£rvî_mëhod
();

1508 
SSL_METHOD
 *
SSLv2_˛õ¡_mëhod
();

1510 
SSL_METHOD
 *
SSLv3_mëhod
();

1511 
SSL_METHOD
 *
SSLv3_£rvî_mëhod
();

1512 
SSL_METHOD
 *
SSLv3_˛õ¡_mëhod
();

1514 
SSL_METHOD
 *
SSLv23_mëhod
();

1515 
SSL_METHOD
 *
SSLv23_£rvî_mëhod
();

1516 
SSL_METHOD
 *
SSLv23_˛õ¡_mëhod
();

1518 
SSL_METHOD
 *
TLSv1_mëhod
();

1519 
SSL_METHOD
 *
TLSv1_£rvî_mëhod
();

1520 
SSL_METHOD
 *
TLSv1_˛õ¡_mëhod
();

1522 
SSL_METHOD
 *
DTLSv1_mëhod
();

1523 
SSL_METHOD
 *
DTLSv1_£rvî_mëhod
();

1524 
SSL_METHOD
 *
DTLSv1_˛õ¡_mëhod
();

1526 
STACK_OF
(
SSL_CIPHER
Ë*
SSL_gë_cùhîs
(c⁄° 
SSL
 *
s
);

1528 
SSL_do_h™dshake
(
SSL
 *
s
);

1529 
SSL_ª√gŸüã
(
SSL
 *
s
);

1530 
SSL_ª√gŸüã_≥ndög
(
SSL
 *
s
);

1531 
SSL_shutdown
(
SSL
 *
s
);

1533 
SSL_METHOD
 *
SSL_gë_s¶_mëhod
(
SSL
 *
s
);

1534 
SSL_£t_s¶_mëhod
(
SSL
 *
s
,
SSL_METHOD
 *
mëhod
);

1535 c⁄° *
SSL_Æît_ty≥_°rög_l⁄g
(
vÆue
);

1536 c⁄° *
SSL_Æît_ty≥_°rög
(
vÆue
);

1537 c⁄° *
SSL_Æît_desc_°rög_l⁄g
(
vÆue
);

1538 c⁄° *
SSL_Æît_desc_°rög
(
vÆue
);

1540 
SSL_£t_˛õ¡_CA_li°
(
SSL
 *
s
, 
STACK_OF
(
X509_NAME
Ë*
«me_li°
);

1541 
SSL_CTX_£t_˛õ¡_CA_li°
(
SSL_CTX
 *
˘x
, 
STACK_OF
(
X509_NAME
Ë*
«me_li°
);

1542 
STACK_OF
(
X509_NAME
Ë*
SSL_gë_˛õ¡_CA_li°
(c⁄° 
SSL
 *
s
);

1543 
STACK_OF
(
X509_NAME
Ë*
SSL_CTX_gë_˛õ¡_CA_li°
(c⁄° 
SSL_CTX
 *
s
);

1544 
SSL_add_˛õ¡_CA
(
SSL
 *
s¶
,
X509
 *
x
);

1545 
SSL_CTX_add_˛õ¡_CA
(
SSL_CTX
 *
˘x
,
X509
 *
x
);

1547 
SSL_£t_c⁄√˘_°©e
(
SSL
 *
s
);

1548 
SSL_£t_ac˚±_°©e
(
SSL
 *
s
);

1550 
SSL_gë_deÁu…_timeout
(c⁄° 
SSL
 *
s
);

1552 
SSL_libøry_öô
();

1554 *
SSL_CIPHER_des¸ùti⁄
(c⁄° 
SSL_CIPHER
 *,*
buf
,
size
);

1555 
STACK_OF
(
X509_NAME
Ë*
SSL_dup_CA_li°
(STACK_OF(X509_NAMEË*
sk
);

1557 
SSL
 *
SSL_dup
(SSL *
s¶
);

1559 
X509
 *
SSL_gë_˚πifiˇã
(c⁄° 
SSL
 *
s¶
);

1560  
evp_pkey_°
 *
SSL_gë_¥iv©ekey
(
SSL
 *
s¶
);

1562 
SSL_CTX_£t_quõt_shutdown
(
SSL_CTX
 *
˘x
,
mode
);

1563 
SSL_CTX_gë_quõt_shutdown
(c⁄° 
SSL_CTX
 *
˘x
);

1564 
SSL_£t_quõt_shutdown
(
SSL
 *
s¶
,
mode
);

1565 
SSL_gë_quõt_shutdown
(c⁄° 
SSL
 *
s¶
);

1566 
SSL_£t_shutdown
(
SSL
 *
s¶
,
mode
);

1567 
SSL_gë_shutdown
(c⁄° 
SSL
 *
s¶
);

1568 
SSL_vîsi⁄
(c⁄° 
SSL
 *
s¶
);

1569 
SSL_CTX_£t_deÁu…_vîify_∑ths
(
SSL_CTX
 *
˘x
);

1570 
SSL_CTX_lﬂd_vîify_loˇti⁄s
(
SSL_CTX
 *
˘x
, c⁄° *
CAfûe
,

1571 c⁄° *
CA∑th
);

1572 
	#SSL_gë0_£ssi⁄
 
SSL_gë_£ssi⁄


	)

1573 
SSL_SESSION
 *
SSL_gë_£ssi⁄
(c⁄° 
SSL
 *
s¶
);

1574 
SSL_SESSION
 *
SSL_gë1_£ssi⁄
(
SSL
 *
s¶
);

1575 
SSL_CTX
 *
SSL_gë_SSL_CTX
(c⁄° 
SSL
 *
s¶
);

1576 
SSL_CTX
 *
SSL_£t_SSL_CTX
(
SSL
 *
s¶
, SSL_CTX* 
˘x
);

1577 
SSL_£t_öfo_ˇŒback
(
SSL
 *
s¶
,

1578 (*
cb
)(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
));

1579 (*
SSL_gë_öfo_ˇŒback
(c⁄° 
SSL
 *
s¶
))(c⁄° SSL *s¶,
ty≥
,
vÆ
);

1580 
SSL_°©e
(c⁄° 
SSL
 *
s¶
);

1582 
SSL_£t_vîify_ªsu…
(
SSL
 *
s¶
,
v
);

1583 
SSL_gë_vîify_ªsu…
(c⁄° 
SSL
 *
s¶
);

1585 
SSL_£t_ex_d©a
(
SSL
 *
s¶
,
idx
,*
d©a
);

1586 *
SSL_gë_ex_d©a
(c⁄° 
SSL
 *
s¶
,
idx
);

1587 
SSL_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

1588 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

1590 
SSL_SESSION_£t_ex_d©a
(
SSL_SESSION
 *
ss
,
idx
,*
d©a
);

1591 *
SSL_SESSION_gë_ex_d©a
(c⁄° 
SSL_SESSION
 *
ss
,
idx
);

1592 
SSL_SESSION_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

1593 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

1595 
SSL_CTX_£t_ex_d©a
(
SSL_CTX
 *
s¶
,
idx
,*
d©a
);

1596 *
SSL_CTX_gë_ex_d©a
(c⁄° 
SSL_CTX
 *
s¶
,
idx
);

1597 
SSL_CTX_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

1598 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

1600 
SSL_gë_ex_d©a_X509_STORE_CTX_idx
();

1602 
	#SSL_CTX_£ss_£t_ˇche_size
(
˘x
,
t
) \

1603 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SESS_CACHE_SIZE
,
t
,
NULL
)

	)

1604 
	#SSL_CTX_£ss_gë_ˇche_size
(
˘x
) \

1605 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_SESS_CACHE_SIZE
,0,
NULL
)

	)

1606 
	#SSL_CTX_£t_£ssi⁄_ˇche_mode
(
˘x
,
m
) \

1607 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SESS_CACHE_MODE
,
m
,
NULL
)

	)

1608 
	#SSL_CTX_gë_£ssi⁄_ˇche_mode
(
˘x
) \

1609 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_SESS_CACHE_MODE
,0,
NULL
)

	)

1611 
	#SSL_CTX_gë_deÁu…_ªad_ahód
(
˘x
Ë
	`SSL_CTX_gë_ªad_ahód
(˘x)

	)

1612 
	#SSL_CTX_£t_deÁu…_ªad_ahód
(
˘x
,
m
Ë
	`SSL_CTX_£t_ªad_ahód
(˘x,m)

	)

1613 
	#SSL_CTX_gë_ªad_ahód
(
˘x
) \

1614 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_READ_AHEAD
,0,
NULL
)

	)

1615 
	#SSL_CTX_£t_ªad_ahód
(
˘x
,
m
) \

1616 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_READ_AHEAD
,
m
,
NULL
)

	)

1617 
	#SSL_CTX_gë_max_˚π_li°
(
˘x
) \

1618 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_MAX_CERT_LIST
,0,
NULL
)

	)

1619 
	#SSL_CTX_£t_max_˚π_li°
(
˘x
,
m
) \

1620 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_MAX_CERT_LIST
,
m
,
NULL
)

	)

1621 
	#SSL_gë_max_˚π_li°
(
s¶
) \

1622 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_MAX_CERT_LIST
,0,
NULL
)

	)

1623 
	#SSL_£t_max_˚π_li°
(
s¶
,
m
) \

1624 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_MAX_CERT_LIST
,
m
,
NULL
)

	)

1627 #i‚de‡
OPENSSL_NO_RSA


1628 
SSL_CTX_£t_tmp_rß_ˇŒback
(
SSL_CTX
 *
˘x
,

1629 
RSA
 *(*
cb
)(
SSL
 *
s¶
,
is_exp‹t
,

1630 
keyÀngth
));

1632 
SSL_£t_tmp_rß_ˇŒback
(
SSL
 *
s¶
,

1633 
RSA
 *(*
cb
)(
SSL
 *
s¶
,
is_exp‹t
,

1634 
keyÀngth
));

1636 #i‚de‡
OPENSSL_NO_DH


1637 
SSL_CTX_£t_tmp_dh_ˇŒback
(
SSL_CTX
 *
˘x
,

1638 
DH
 *(*
dh
)(
SSL
 *
s¶
,
is_exp‹t
,

1639 
keyÀngth
));

1640 
SSL_£t_tmp_dh_ˇŒback
(
SSL
 *
s¶
,

1641 
DH
 *(*
dh
)(
SSL
 *
s¶
,
is_exp‹t
,

1642 
keyÀngth
));

1644 #i‚de‡
OPENSSL_NO_ECDH


1645 
SSL_CTX_£t_tmp_ecdh_ˇŒback
(
SSL_CTX
 *
˘x
,

1646 
EC_KEY
 *(*
ecdh
)(
SSL
 *
s¶
,
is_exp‹t
,

1647 
keyÀngth
));

1648 
SSL_£t_tmp_ecdh_ˇŒback
(
SSL
 *
s¶
,

1649 
EC_KEY
 *(*
ecdh
)(
SSL
 *
s¶
,
is_exp‹t
,

1650 
keyÀngth
));

1653 #i‚de‡
OPENSSL_NO_COMP


1654 c⁄° 
COMP_METHOD
 *
SSL_gë_cuºít_com¥essi⁄
(
SSL
 *
s
);

1655 c⁄° 
COMP_METHOD
 *
SSL_gë_cuºít_ex∑nsi⁄
(
SSL
 *
s
);

1656 c⁄° *
SSL_COMP_gë_«me
(c⁄° 
COMP_METHOD
 *
comp
);

1657 
STACK_OF
(
SSL_COMP
Ë*
SSL_COMP_gë_com¥essi⁄_mëhods
();

1658 
SSL_COMP_add_com¥essi⁄_mëhod
(
id
,
COMP_METHOD
 *
cm
);

1660 c⁄° *
SSL_gë_cuºít_com¥essi⁄
(
SSL
 *
s
);

1661 c⁄° *
SSL_gë_cuºít_ex∑nsi⁄
(
SSL
 *
s
);

1662 c⁄° *
SSL_COMP_gë_«me
(c⁄° *
comp
);

1663 *
SSL_COMP_gë_com¥essi⁄_mëhods
();

1664 
SSL_COMP_add_com¥essi⁄_mëhod
(
id
,*
cm
);

1671 
ERR_lﬂd_SSL_°rögs
();

1676 
	#SSL_F_CLIENT_CERTIFICATE
 100

	)

1677 
	#SSL_F_CLIENT_FINISHED
 167

	)

1678 
	#SSL_F_CLIENT_HELLO
 101

	)

1679 
	#SSL_F_CLIENT_MASTER_KEY
 102

	)

1680 
	#SSL_F_D2I_SSL_SESSION
 103

	)

1681 
	#SSL_F_DO_DTLS1_WRITE
 245

	)

1682 
	#SSL_F_DO_SSL3_WRITE
 104

	)

1683 
	#SSL_F_DTLS1_ACCEPT
 246

	)

1684 
	#SSL_F_DTLS1_ADD_CERT_TO_BUF
 280

	)

1685 
	#SSL_F_DTLS1_BUFFER_RECORD
 247

	)

1686 
	#SSL_F_DTLS1_CHECK_TIMEOUT_NUM
 293

	)

1687 
	#SSL_F_DTLS1_CLIENT_HELLO
 248

	)

1688 
	#SSL_F_DTLS1_CONNECT
 249

	)

1689 
	#SSL_F_DTLS1_ENC
 250

	)

1690 
	#SSL_F_DTLS1_GET_HELLO_VERIFY
 251

	)

1691 
	#SSL_F_DTLS1_GET_MESSAGE
 252

	)

1692 
	#SSL_F_DTLS1_GET_MESSAGE_FRAGMENT
 253

	)

1693 
	#SSL_F_DTLS1_GET_RECORD
 254

	)

1694 
	#SSL_F_DTLS1_HANDLE_TIMEOUT
 282

	)

1695 
	#SSL_F_DTLS1_OUTPUT_CERT_CHAIN
 255

	)

1696 
	#SSL_F_DTLS1_PREPROCESS_FRAGMENT
 277

	)

1697 
	#SSL_F_DTLS1_PROCESS_OUT_OF_SEQ_MESSAGE
 256

	)

1698 
	#SSL_F_DTLS1_PROCESS_RECORD
 257

	)

1699 
	#SSL_F_DTLS1_READ_BYTES
 258

	)

1700 
	#SSL_F_DTLS1_READ_FAILED
 259

	)

1701 
	#SSL_F_DTLS1_SEND_CERTIFICATE_REQUEST
 260

	)

1702 
	#SSL_F_DTLS1_SEND_CLIENT_CERTIFICATE
 261

	)

1703 
	#SSL_F_DTLS1_SEND_CLIENT_KEY_EXCHANGE
 262

	)

1704 
	#SSL_F_DTLS1_SEND_CLIENT_VERIFY
 263

	)

1705 
	#SSL_F_DTLS1_SEND_HELLO_VERIFY_REQUEST
 264

	)

1706 
	#SSL_F_DTLS1_SEND_SERVER_CERTIFICATE
 265

	)

1707 
	#SSL_F_DTLS1_SEND_SERVER_HELLO
 266

	)

1708 
	#SSL_F_DTLS1_SEND_SERVER_KEY_EXCHANGE
 267

	)

1709 
	#SSL_F_DTLS1_WRITE_APP_DATA_BYTES
 268

	)

1710 
	#SSL_F_GET_CLIENT_FINISHED
 105

	)

1711 
	#SSL_F_GET_CLIENT_HELLO
 106

	)

1712 
	#SSL_F_GET_CLIENT_MASTER_KEY
 107

	)

1713 
	#SSL_F_GET_SERVER_FINISHED
 108

	)

1714 
	#SSL_F_GET_SERVER_HELLO
 109

	)

1715 
	#SSL_F_GET_SERVER_VERIFY
 110

	)

1716 
	#SSL_F_I2D_SSL_SESSION
 111

	)

1717 
	#SSL_F_READ_N
 112

	)

1718 
	#SSL_F_REQUEST_CERTIFICATE
 113

	)

1719 
	#SSL_F_SERVER_FINISH
 239

	)

1720 
	#SSL_F_SERVER_HELLO
 114

	)

1721 
	#SSL_F_SERVER_VERIFY
 240

	)

1722 
	#SSL_F_SSL23_ACCEPT
 115

	)

1723 
	#SSL_F_SSL23_CLIENT_HELLO
 116

	)

1724 
	#SSL_F_SSL23_CONNECT
 117

	)

1725 
	#SSL_F_SSL23_GET_CLIENT_HELLO
 118

	)

1726 
	#SSL_F_SSL23_GET_SERVER_HELLO
 119

	)

1727 
	#SSL_F_SSL23_PEEK
 237

	)

1728 
	#SSL_F_SSL23_READ
 120

	)

1729 
	#SSL_F_SSL23_WRITE
 121

	)

1730 
	#SSL_F_SSL2_ACCEPT
 122

	)

1731 
	#SSL_F_SSL2_CONNECT
 123

	)

1732 
	#SSL_F_SSL2_ENC_INIT
 124

	)

1733 
	#SSL_F_SSL2_GENERATE_KEY_MATERIAL
 241

	)

1734 
	#SSL_F_SSL2_PEEK
 234

	)

1735 
	#SSL_F_SSL2_READ
 125

	)

1736 
	#SSL_F_SSL2_READ_INTERNAL
 236

	)

1737 
	#SSL_F_SSL2_SET_CERTIFICATE
 126

	)

1738 
	#SSL_F_SSL2_WRITE
 127

	)

1739 
	#SSL_F_SSL3_ACCEPT
 128

	)

1740 
	#SSL_F_SSL3_ADD_CERT_TO_BUF
 281

	)

1741 
	#SSL_F_SSL3_CALLBACK_CTRL
 233

	)

1742 
	#SSL_F_SSL3_CHANGE_CIPHER_STATE
 129

	)

1743 
	#SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM
 130

	)

1744 
	#SSL_F_SSL3_CHECK_CLIENT_HELLO
 292

	)

1745 
	#SSL_F_SSL3_CLIENT_HELLO
 131

	)

1746 
	#SSL_F_SSL3_CONNECT
 132

	)

1747 
	#SSL_F_SSL3_CTRL
 213

	)

1748 
	#SSL_F_SSL3_CTX_CTRL
 133

	)

1749 
	#SSL_F_SSL3_DO_CHANGE_CIPHER_SPEC
 279

	)

1750 
	#SSL_F_SSL3_ENC
 134

	)

1751 
	#SSL_F_SSL3_GENERATE_KEY_BLOCK
 238

	)

1752 
	#SSL_F_SSL3_GET_CERTIFICATE_REQUEST
 135

	)

1753 
	#SSL_F_SSL3_GET_CERT_STATUS
 288

	)

1754 
	#SSL_F_SSL3_GET_CERT_VERIFY
 136

	)

1755 
	#SSL_F_SSL3_GET_CLIENT_CERTIFICATE
 137

	)

1756 
	#SSL_F_SSL3_GET_CLIENT_HELLO
 138

	)

1757 
	#SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE
 139

	)

1758 
	#SSL_F_SSL3_GET_FINISHED
 140

	)

1759 
	#SSL_F_SSL3_GET_KEY_EXCHANGE
 141

	)

1760 
	#SSL_F_SSL3_GET_MESSAGE
 142

	)

1761 
	#SSL_F_SSL3_GET_NEW_SESSION_TICKET
 283

	)

1762 
	#SSL_F_SSL3_GET_RECORD
 143

	)

1763 
	#SSL_F_SSL3_GET_SERVER_CERTIFICATE
 144

	)

1764 
	#SSL_F_SSL3_GET_SERVER_DONE
 145

	)

1765 
	#SSL_F_SSL3_GET_SERVER_HELLO
 146

	)

1766 
	#SSL_F_SSL3_NEW_SESSION_TICKET
 284

	)

1767 
	#SSL_F_SSL3_OUTPUT_CERT_CHAIN
 147

	)

1768 
	#SSL_F_SSL3_PEEK
 235

	)

1769 
	#SSL_F_SSL3_READ_BYTES
 148

	)

1770 
	#SSL_F_SSL3_READ_N
 149

	)

1771 
	#SSL_F_SSL3_SEND_CERTIFICATE_REQUEST
 150

	)

1772 
	#SSL_F_SSL3_SEND_CLIENT_CERTIFICATE
 151

	)

1773 
	#SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE
 152

	)

1774 
	#SSL_F_SSL3_SEND_CLIENT_VERIFY
 153

	)

1775 
	#SSL_F_SSL3_SEND_SERVER_CERTIFICATE
 154

	)

1776 
	#SSL_F_SSL3_SEND_SERVER_HELLO
 242

	)

1777 
	#SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE
 155

	)

1778 
	#SSL_F_SSL3_SETUP_BUFFERS
 156

	)

1779 
	#SSL_F_SSL3_SETUP_KEY_BLOCK
 157

	)

1780 
	#SSL_F_SSL3_WRITE_BYTES
 158

	)

1781 
	#SSL_F_SSL3_WRITE_PENDING
 159

	)

1782 
	#SSL_F_SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT
 285

	)

1783 
	#SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT
 272

	)

1784 
	#SSL_F_SSL_ADD_DIR_CERT_SUBJECTS_TO_STACK
 215

	)

1785 
	#SSL_F_SSL_ADD_FILE_CERT_SUBJECTS_TO_STACK
 216

	)

1786 
	#SSL_F_SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT
 286

	)

1787 
	#SSL_F_SSL_ADD_SERVERHELLO_TLSEXT
 273

	)

1788 
	#SSL_F_SSL_BAD_METHOD
 160

	)

1789 
	#SSL_F_SSL_BYTES_TO_CIPHER_LIST
 161

	)

1790 
	#SSL_F_SSL_CERT_DUP
 221

	)

1791 
	#SSL_F_SSL_CERT_INST
 222

	)

1792 
	#SSL_F_SSL_CERT_INSTANTIATE
 214

	)

1793 
	#SSL_F_SSL_CERT_NEW
 162

	)

1794 
	#SSL_F_SSL_CHECK_PRIVATE_KEY
 163

	)

1795 
	#SSL_F_SSL_CHECK_SERVERHELLO_TLSEXT
 274

	)

1796 
	#SSL_F_SSL_CIPHER_PROCESS_RULESTR
 230

	)

1797 
	#SSL_F_SSL_CIPHER_STRENGTH_SORT
 231

	)

1798 
	#SSL_F_SSL_CLEAR
 164

	)

1799 
	#SSL_F_SSL_COMP_ADD_COMPRESSION_METHOD
 165

	)

1800 
	#SSL_F_SSL_CREATE_CIPHER_LIST
 166

	)

1801 
	#SSL_F_SSL_CTRL
 232

	)

1802 
	#SSL_F_SSL_CTX_CHECK_PRIVATE_KEY
 168

	)

1803 
	#SSL_F_SSL_CTX_NEW
 169

	)

1804 
	#SSL_F_SSL_CTX_SET_CIPHER_LIST
 269

	)

1805 
	#SSL_F_SSL_CTX_SET_CLIENT_CERT_ENGINE
 278

	)

1806 
	#SSL_F_SSL_CTX_SET_PURPOSE
 226

	)

1807 
	#SSL_F_SSL_CTX_SET_SESSION_ID_CONTEXT
 219

	)

1808 
	#SSL_F_SSL_CTX_SET_SSL_VERSION
 170

	)

1809 
	#SSL_F_SSL_CTX_SET_TRUST
 229

	)

1810 
	#SSL_F_SSL_CTX_USE_CERTIFICATE
 171

	)

1811 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_ASN1
 172

	)

1812 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_CHAIN_FILE
 220

	)

1813 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_FILE
 173

	)

1814 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY
 174

	)

1815 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY_ASN1
 175

	)

1816 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY_FILE
 176

	)

1817 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY
 177

	)

1818 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_ASN1
 178

	)

1819 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_FILE
 179

	)

1820 
	#SSL_F_SSL_DO_HANDSHAKE
 180

	)

1821 
	#SSL_F_SSL_GET_NEW_SESSION
 181

	)

1822 
	#SSL_F_SSL_GET_PREV_SESSION
 217

	)

1823 
	#SSL_F_SSL_GET_SERVER_SEND_CERT
 182

	)

1824 
	#SSL_F_SSL_GET_SERVER_SEND_PKEY
 317

	)

1825 
	#SSL_F_SSL_GET_SIGN_PKEY
 183

	)

1826 
	#SSL_F_SSL_INIT_WBIO_BUFFER
 184

	)

1827 
	#SSL_F_SSL_LOAD_CLIENT_CA_FILE
 185

	)

1828 
	#SSL_F_SSL_NEW
 186

	)

1829 
	#SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT
 287

	)

1830 
	#SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT
 290

	)

1831 
	#SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT
 289

	)

1832 
	#SSL_F_SSL_PARSE_SERVERHELLO_TLSEXT
 291

	)

1833 
	#SSL_F_SSL_PEEK
 270

	)

1834 
	#SSL_F_SSL_PREPARE_CLIENTHELLO_TLSEXT
 275

	)

1835 
	#SSL_F_SSL_PREPARE_SERVERHELLO_TLSEXT
 276

	)

1836 
	#SSL_F_SSL_READ
 223

	)

1837 
	#SSL_F_SSL_RSA_PRIVATE_DECRYPT
 187

	)

1838 
	#SSL_F_SSL_RSA_PUBLIC_ENCRYPT
 188

	)

1839 
	#SSL_F_SSL_SESSION_NEW
 189

	)

1840 
	#SSL_F_SSL_SESSION_PRINT_FP
 190

	)

1841 
	#SSL_F_SSL_SESS_CERT_NEW
 225

	)

1842 
	#SSL_F_SSL_SET_CERT
 191

	)

1843 
	#SSL_F_SSL_SET_CIPHER_LIST
 271

	)

1844 
	#SSL_F_SSL_SET_FD
 192

	)

1845 
	#SSL_F_SSL_SET_PKEY
 193

	)

1846 
	#SSL_F_SSL_SET_PURPOSE
 227

	)

1847 
	#SSL_F_SSL_SET_RFD
 194

	)

1848 
	#SSL_F_SSL_SET_SESSION
 195

	)

1849 
	#SSL_F_SSL_SET_SESSION_ID_CONTEXT
 218

	)

1850 
	#SSL_F_SSL_SET_TRUST
 228

	)

1851 
	#SSL_F_SSL_SET_WFD
 196

	)

1852 
	#SSL_F_SSL_SHUTDOWN
 224

	)

1853 
	#SSL_F_SSL_UNDEFINED_CONST_FUNCTION
 243

	)

1854 
	#SSL_F_SSL_UNDEFINED_FUNCTION
 197

	)

1855 
	#SSL_F_SSL_UNDEFINED_VOID_FUNCTION
 244

	)

1856 
	#SSL_F_SSL_USE_CERTIFICATE
 198

	)

1857 
	#SSL_F_SSL_USE_CERTIFICATE_ASN1
 199

	)

1858 
	#SSL_F_SSL_USE_CERTIFICATE_FILE
 200

	)

1859 
	#SSL_F_SSL_USE_PRIVATEKEY
 201

	)

1860 
	#SSL_F_SSL_USE_PRIVATEKEY_ASN1
 202

	)

1861 
	#SSL_F_SSL_USE_PRIVATEKEY_FILE
 203

	)

1862 
	#SSL_F_SSL_USE_RSAPRIVATEKEY
 204

	)

1863 
	#SSL_F_SSL_USE_RSAPRIVATEKEY_ASN1
 205

	)

1864 
	#SSL_F_SSL_USE_RSAPRIVATEKEY_FILE
 206

	)

1865 
	#SSL_F_SSL_VERIFY_CERT_CHAIN
 207

	)

1866 
	#SSL_F_SSL_WRITE
 208

	)

1867 
	#SSL_F_TLS1_CHANGE_CIPHER_STATE
 209

	)

1868 
	#SSL_F_TLS1_ENC
 210

	)

1869 
	#SSL_F_TLS1_SETUP_KEY_BLOCK
 211

	)

1870 
	#SSL_F_WRITE_PENDING
 212

	)

1873 
	#SSL_R_APP_DATA_IN_HANDSHAKE
 100

	)

1874 
	#SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT
 272

	)

1875 
	#SSL_R_BAD_ALERT_RECORD
 101

	)

1876 
	#SSL_R_BAD_AUTHENTICATION_TYPE
 102

	)

1877 
	#SSL_R_BAD_CHANGE_CIPHER_SPEC
 103

	)

1878 
	#SSL_R_BAD_CHECKSUM
 104

	)

1879 
	#SSL_R_BAD_DATA_RETURNED_BY_CALLBACK
 106

	)

1880 
	#SSL_R_BAD_DECOMPRESSION
 107

	)

1881 
	#SSL_R_BAD_DH_G_LENGTH
 108

	)

1882 
	#SSL_R_BAD_DH_PUB_KEY_LENGTH
 109

	)

1883 
	#SSL_R_BAD_DH_P_LENGTH
 110

	)

1884 
	#SSL_R_BAD_DIGEST_LENGTH
 111

	)

1885 
	#SSL_R_BAD_DSA_SIGNATURE
 112

	)

1886 
	#SSL_R_BAD_ECC_CERT
 304

	)

1887 
	#SSL_R_BAD_ECDSA_SIGNATURE
 305

	)

1888 
	#SSL_R_BAD_ECPOINT
 306

	)

1889 
	#SSL_R_BAD_HELLO_REQUEST
 105

	)

1890 
	#SSL_R_BAD_LENGTH
 271

	)

1891 
	#SSL_R_BAD_MAC_DECODE
 113

	)

1892 
	#SSL_R_BAD_MESSAGE_TYPE
 114

	)

1893 
	#SSL_R_BAD_PACKET_LENGTH
 115

	)

1894 
	#SSL_R_BAD_PROTOCOL_VERSION_NUMBER
 116

	)

1895 
	#SSL_R_BAD_RESPONSE_ARGUMENT
 117

	)

1896 
	#SSL_R_BAD_RSA_DECRYPT
 118

	)

1897 
	#SSL_R_BAD_RSA_ENCRYPT
 119

	)

1898 
	#SSL_R_BAD_RSA_E_LENGTH
 120

	)

1899 
	#SSL_R_BAD_RSA_MODULUS_LENGTH
 121

	)

1900 
	#SSL_R_BAD_RSA_SIGNATURE
 122

	)

1901 
	#SSL_R_BAD_SIGNATURE
 123

	)

1902 
	#SSL_R_BAD_SSL_FILETYPE
 124

	)

1903 
	#SSL_R_BAD_SSL_SESSION_ID_LENGTH
 125

	)

1904 
	#SSL_R_BAD_STATE
 126

	)

1905 
	#SSL_R_BAD_WRITE_RETRY
 127

	)

1906 
	#SSL_R_BIO_NOT_SET
 128

	)

1907 
	#SSL_R_BLOCK_CIPHER_PAD_IS_WRONG
 129

	)

1908 
	#SSL_R_BN_LIB
 130

	)

1909 
	#SSL_R_CA_DN_LENGTH_MISMATCH
 131

	)

1910 
	#SSL_R_CA_DN_TOO_LONG
 132

	)

1911 
	#SSL_R_CCS_RECEIVED_EARLY
 133

	)

1912 
	#SSL_R_CERTIFICATE_VERIFY_FAILED
 134

	)

1913 
	#SSL_R_CERT_LENGTH_MISMATCH
 135

	)

1914 
	#SSL_R_CHALLENGE_IS_DIFFERENT
 136

	)

1915 
	#SSL_R_CIPHER_CODE_WRONG_LENGTH
 137

	)

1916 
	#SSL_R_CIPHER_OR_HASH_UNAVAILABLE
 138

	)

1917 
	#SSL_R_CIPHER_TABLE_SRC_ERROR
 139

	)

1918 
	#SSL_R_CLIENTHELLO_TLSEXT
 157

	)

1919 
	#SSL_R_COMPRESSED_LENGTH_TOO_LONG
 140

	)

1920 
	#SSL_R_COMPRESSION_FAILURE
 141

	)

1921 
	#SSL_R_COMPRESSION_ID_NOT_WITHIN_PRIVATE_RANGE
 307

	)

1922 
	#SSL_R_COMPRESSION_LIBRARY_ERROR
 142

	)

1923 
	#SSL_R_CONNECTION_ID_IS_DIFFERENT
 143

	)

1924 
	#SSL_R_CONNECTION_TYPE_NOT_SET
 144

	)

1925 
	#SSL_R_COOKIE_MISMATCH
 308

	)

1926 
	#SSL_R_DATA_BETWEEN_CCS_AND_FINISHED
 145

	)

1927 
	#SSL_R_DATA_LENGTH_TOO_LONG
 146

	)

1928 
	#SSL_R_DECRYPTION_FAILED
 147

	)

1929 
	#SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC
 281

	)

1930 
	#SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG
 148

	)

1931 
	#SSL_R_DIGEST_CHECK_FAILED
 149

	)

1932 
	#SSL_R_DTLS_MESSAGE_TOO_BIG
 318

	)

1933 
	#SSL_R_DUPLICATE_COMPRESSION_ID
 309

	)

1934 
	#SSL_R_ECGROUP_TOO_LARGE_FOR_CIPHER
 310

	)

1935 
	#SSL_R_ENCRYPTED_LENGTH_TOO_LONG
 150

	)

1936 
	#SSL_R_ERROR_GENERATING_TMP_RSA_KEY
 282

	)

1937 
	#SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST
 151

	)

1938 
	#SSL_R_EXCESSIVE_MESSAGE_SIZE
 152

	)

1939 
	#SSL_R_EXTRA_DATA_IN_MESSAGE
 153

	)

1940 
	#SSL_R_GOT_A_FIN_BEFORE_A_CCS
 154

	)

1941 
	#SSL_R_HTTPS_PROXY_REQUEST
 155

	)

1942 
	#SSL_R_HTTP_REQUEST
 156

	)

1943 
	#SSL_R_ILLEGAL_PADDING
 283

	)

1944 
	#SSL_R_INVALID_CHALLENGE_LENGTH
 158

	)

1945 
	#SSL_R_INVALID_COMMAND
 280

	)

1946 
	#SSL_R_INVALID_PURPOSE
 278

	)

1947 
	#SSL_R_INVALID_STATUS_RESPONSE
 316

	)

1948 
	#SSL_R_INVALID_TICKET_KEYS_LENGTH
 275

	)

1949 
	#SSL_R_INVALID_TRUST
 279

	)

1950 
	#SSL_R_KEY_ARG_TOO_LONG
 284

	)

1951 
	#SSL_R_KRB5
 285

	)

1952 
	#SSL_R_KRB5_C_CC_PRINC
 286

	)

1953 
	#SSL_R_KRB5_C_GET_CRED
 287

	)

1954 
	#SSL_R_KRB5_C_INIT
 288

	)

1955 
	#SSL_R_KRB5_C_MK_REQ
 289

	)

1956 
	#SSL_R_KRB5_S_BAD_TICKET
 290

	)

1957 
	#SSL_R_KRB5_S_INIT
 291

	)

1958 
	#SSL_R_KRB5_S_RD_REQ
 292

	)

1959 
	#SSL_R_KRB5_S_TKT_EXPIRED
 293

	)

1960 
	#SSL_R_KRB5_S_TKT_NYV
 294

	)

1961 
	#SSL_R_KRB5_S_TKT_SKEW
 295

	)

1962 
	#SSL_R_LENGTH_MISMATCH
 159

	)

1963 
	#SSL_R_LENGTH_TOO_SHORT
 160

	)

1964 
	#SSL_R_LIBRARY_BUG
 274

	)

1965 
	#SSL_R_LIBRARY_HAS_NO_CIPHERS
 161

	)

1966 
	#SSL_R_MESSAGE_TOO_LONG
 296

	)

1967 
	#SSL_R_MISSING_DH_DSA_CERT
 162

	)

1968 
	#SSL_R_MISSING_DH_KEY
 163

	)

1969 
	#SSL_R_MISSING_DH_RSA_CERT
 164

	)

1970 
	#SSL_R_MISSING_DSA_SIGNING_CERT
 165

	)

1971 
	#SSL_R_MISSING_EXPORT_TMP_DH_KEY
 166

	)

1972 
	#SSL_R_MISSING_EXPORT_TMP_RSA_KEY
 167

	)

1973 
	#SSL_R_MISSING_RSA_CERTIFICATE
 168

	)

1974 
	#SSL_R_MISSING_RSA_ENCRYPTING_CERT
 169

	)

1975 
	#SSL_R_MISSING_RSA_SIGNING_CERT
 170

	)

1976 
	#SSL_R_MISSING_TMP_DH_KEY
 171

	)

1977 
	#SSL_R_MISSING_TMP_ECDH_KEY
 311

	)

1978 
	#SSL_R_MISSING_TMP_RSA_KEY
 172

	)

1979 
	#SSL_R_MISSING_TMP_RSA_PKEY
 173

	)

1980 
	#SSL_R_MISSING_VERIFY_MESSAGE
 174

	)

1981 
	#SSL_R_MULTIPLE_SGC_RESTARTS
 325

	)

1982 
	#SSL_R_NON_SSLV2_INITIAL_PACKET
 175

	)

1983 
	#SSL_R_NO_CERTIFICATES_RETURNED
 176

	)

1984 
	#SSL_R_NO_CERTIFICATE_ASSIGNED
 177

	)

1985 
	#SSL_R_NO_CERTIFICATE_RETURNED
 178

	)

1986 
	#SSL_R_NO_CERTIFICATE_SET
 179

	)

1987 
	#SSL_R_NO_CERTIFICATE_SPECIFIED
 180

	)

1988 
	#SSL_R_NO_CIPHERS_AVAILABLE
 181

	)

1989 
	#SSL_R_NO_CIPHERS_PASSED
 182

	)

1990 
	#SSL_R_NO_CIPHERS_SPECIFIED
 183

	)

1991 
	#SSL_R_NO_CIPHER_LIST
 184

	)

1992 
	#SSL_R_NO_CIPHER_MATCH
 185

	)

1993 
	#SSL_R_NO_CLIENT_CERT_METHOD
 317

	)

1994 
	#SSL_R_NO_CLIENT_CERT_RECEIVED
 186

	)

1995 
	#SSL_R_NO_COMPRESSION_SPECIFIED
 187

	)

1996 
	#SSL_R_NO_METHOD_SPECIFIED
 188

	)

1997 
	#SSL_R_NO_PRIVATEKEY
 189

	)

1998 
	#SSL_R_NO_PRIVATE_KEY_ASSIGNED
 190

	)

1999 
	#SSL_R_NO_PROTOCOLS_AVAILABLE
 191

	)

2000 
	#SSL_R_NO_PUBLICKEY
 192

	)

2001 
	#SSL_R_NO_RENEGOTIATION
 319

	)

2002 
	#SSL_R_NO_SHARED_CIPHER
 193

	)

2003 
	#SSL_R_NO_VERIFY_CALLBACK
 194

	)

2004 
	#SSL_R_NULL_SSL_CTX
 195

	)

2005 
	#SSL_R_NULL_SSL_METHOD_PASSED
 196

	)

2006 
	#SSL_R_OLD_SESSION_CIPHER_NOT_RETURNED
 197

	)

2007 
	#SSL_R_ONLY_TLS_ALLOWED_IN_FIPS_MODE
 297

	)

2008 
	#SSL_R_PACKET_LENGTH_TOO_LONG
 198

	)

2009 
	#SSL_R_PARSE_TLSEXT
 223

	)

2010 
	#SSL_R_PATH_TOO_LONG
 270

	)

2011 
	#SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE
 199

	)

2012 
	#SSL_R_PEER_ERROR
 200

	)

2013 
	#SSL_R_PEER_ERROR_CERTIFICATE
 201

	)

2014 
	#SSL_R_PEER_ERROR_NO_CERTIFICATE
 202

	)

2015 
	#SSL_R_PEER_ERROR_NO_CIPHER
 203

	)

2016 
	#SSL_R_PEER_ERROR_UNSUPPORTED_CERTIFICATE_TYPE
 204

	)

2017 
	#SSL_R_PRE_MAC_LENGTH_TOO_LONG
 205

	)

2018 
	#SSL_R_PROBLEMS_MAPPING_CIPHER_FUNCTIONS
 206

	)

2019 
	#SSL_R_PROTOCOL_IS_SHUTDOWN
 207

	)

2020 
	#SSL_R_PUBLIC_KEY_ENCRYPT_ERROR
 208

	)

2021 
	#SSL_R_PUBLIC_KEY_IS_NOT_RSA
 209

	)

2022 
	#SSL_R_PUBLIC_KEY_NOT_RSA
 210

	)

2023 
	#SSL_R_READ_BIO_NOT_SET
 211

	)

2024 
	#SSL_R_READ_TIMEOUT_EXPIRED
 312

	)

2025 
	#SSL_R_READ_WRONG_PACKET_TYPE
 212

	)

2026 
	#SSL_R_RECORD_LENGTH_MISMATCH
 213

	)

2027 
	#SSL_R_RECORD_TOO_LARGE
 214

	)

2028 
	#SSL_R_RECORD_TOO_SMALL
 298

	)

2029 
	#SSL_R_RENEGOTIATE_EXT_TOO_LONG
 320

	)

2030 
	#SSL_R_RENEGOTIATION_ENCODING_ERR
 321

	)

2031 
	#SSL_R_RENEGOTIATION_MISMATCH
 322

	)

2032 
	#SSL_R_REQUIRED_CIPHER_MISSING
 215

	)

2033 
	#SSL_R_REUSE_CERT_LENGTH_NOT_ZERO
 216

	)

2034 
	#SSL_R_REUSE_CERT_TYPE_NOT_ZERO
 217

	)

2035 
	#SSL_R_REUSE_CIPHER_LIST_NOT_ZERO
 218

	)

2036 
	#SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING
 324

	)

2037 
	#SSL_R_SERVERHELLO_TLSEXT
 224

	)

2038 
	#SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED
 277

	)

2039 
	#SSL_R_SHORT_READ
 219

	)

2040 
	#SSL_R_SIGNATURE_FOR_NON_SIGNING_CERTIFICATE
 220

	)

2041 
	#SSL_R_SSL23_DOING_SESSION_ID_REUSE
 221

	)

2042 
	#SSL_R_SSL2_CONNECTION_ID_TOO_LONG
 299

	)

2043 
	#SSL_R_SSL3_EXT_INVALID_SERVERNAME
 225

	)

2044 
	#SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE
 226

	)

2045 
	#SSL_R_SSL3_SESSION_ID_TOO_LONG
 300

	)

2046 
	#SSL_R_SSL3_SESSION_ID_TOO_SHORT
 222

	)

2047 
	#SSL_R_SSLV3_ALERT_BAD_CERTIFICATE
 1042

	)

2048 
	#SSL_R_SSLV3_ALERT_BAD_RECORD_MAC
 1020

	)

2049 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED
 1045

	)

2050 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED
 1044

	)

2051 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN
 1046

	)

2052 
	#SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE
 1030

	)

2053 
	#SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE
 1040

	)

2054 
	#SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER
 1047

	)

2055 
	#SSL_R_SSLV3_ALERT_NO_CERTIFICATE
 1041

	)

2056 
	#SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE
 1010

	)

2057 
	#SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE
 1043

	)

2058 
	#SSL_R_SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION
 228

	)

2059 
	#SSL_R_SSL_HANDSHAKE_FAILURE
 229

	)

2060 
	#SSL_R_SSL_LIBRARY_HAS_NO_CIPHERS
 230

	)

2061 
	#SSL_R_SSL_SESSION_ID_CALLBACK_FAILED
 301

	)

2062 
	#SSL_R_SSL_SESSION_ID_CONFLICT
 302

	)

2063 
	#SSL_R_SSL_SESSION_ID_CONTEXT_TOO_LONG
 273

	)

2064 
	#SSL_R_SSL_SESSION_ID_HAS_BAD_LENGTH
 303

	)

2065 
	#SSL_R_SSL_SESSION_ID_IS_DIFFERENT
 231

	)

2066 
	#SSL_R_TLSV1_ALERT_ACCESS_DENIED
 1049

	)

2067 
	#SSL_R_TLSV1_ALERT_DECODE_ERROR
 1050

	)

2068 
	#SSL_R_TLSV1_ALERT_DECRYPTION_FAILED
 1021

	)

2069 
	#SSL_R_TLSV1_ALERT_DECRYPT_ERROR
 1051

	)

2070 
	#SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION
 1060

	)

2071 
	#SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY
 1071

	)

2072 
	#SSL_R_TLSV1_ALERT_INTERNAL_ERROR
 1080

	)

2073 
	#SSL_R_TLSV1_ALERT_NO_RENEGOTIATION
 1100

	)

2074 
	#SSL_R_TLSV1_ALERT_PROTOCOL_VERSION
 1070

	)

2075 
	#SSL_R_TLSV1_ALERT_RECORD_OVERFLOW
 1022

	)

2076 
	#SSL_R_TLSV1_ALERT_UNKNOWN_CA
 1048

	)

2077 
	#SSL_R_TLSV1_ALERT_USER_CANCELLED
 1090

	)

2078 
	#SSL_R_TLS_CLIENT_CERT_REQ_WITH_ANON_CIPHER
 232

	)

2079 
	#SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST
 227

	)

2080 
	#SSL_R_TLS_PEER_DID_NOT_RESPOND_WITH_CERTIFICATE_LIST
 233

	)

2081 
	#SSL_R_TLS_RSA_ENCRYPTED_VALUE_LENGTH_IS_WRONG
 234

	)

2082 
	#SSL_R_TRIED_TO_USE_UNSUPPORTED_CIPHER
 235

	)

2083 
	#SSL_R_UNABLE_TO_DECODE_DH_CERTS
 236

	)

2084 
	#SSL_R_UNABLE_TO_DECODE_ECDH_CERTS
 313

	)

2085 
	#SSL_R_UNABLE_TO_EXTRACT_PUBLIC_KEY
 237

	)

2086 
	#SSL_R_UNABLE_TO_FIND_DH_PARAMETERS
 238

	)

2087 
	#SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS
 314

	)

2088 
	#SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS
 239

	)

2089 
	#SSL_R_UNABLE_TO_FIND_SSL_METHOD
 240

	)

2090 
	#SSL_R_UNABLE_TO_LOAD_SSL2_MD5_ROUTINES
 241

	)

2091 
	#SSL_R_UNABLE_TO_LOAD_SSL3_MD5_ROUTINES
 242

	)

2092 
	#SSL_R_UNABLE_TO_LOAD_SSL3_SHA1_ROUTINES
 243

	)

2093 
	#SSL_R_UNEXPECTED_MESSAGE
 244

	)

2094 
	#SSL_R_UNEXPECTED_RECORD
 245

	)

2095 
	#SSL_R_UNINITIALIZED
 276

	)

2096 
	#SSL_R_UNKNOWN_ALERT_TYPE
 246

	)

2097 
	#SSL_R_UNKNOWN_CERTIFICATE_TYPE
 247

	)

2098 
	#SSL_R_UNKNOWN_CIPHER_RETURNED
 248

	)

2099 
	#SSL_R_UNKNOWN_CIPHER_TYPE
 249

	)

2100 
	#SSL_R_UNKNOWN_KEY_EXCHANGE_TYPE
 250

	)

2101 
	#SSL_R_UNKNOWN_PKEY_TYPE
 251

	)

2102 
	#SSL_R_UNKNOWN_PROTOCOL
 252

	)

2103 
	#SSL_R_UNKNOWN_REMOTE_ERROR_TYPE
 253

	)

2104 
	#SSL_R_UNKNOWN_SSL_VERSION
 254

	)

2105 
	#SSL_R_UNKNOWN_STATE
 255

	)

2106 
	#SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED
 323

	)

2107 
	#SSL_R_UNSUPPORTED_CIPHER
 256

	)

2108 
	#SSL_R_UNSUPPORTED_COMPRESSION_ALGORITHM
 257

	)

2109 
	#SSL_R_UNSUPPORTED_ELLIPTIC_CURVE
 315

	)

2110 
	#SSL_R_UNSUPPORTED_PROTOCOL
 258

	)

2111 
	#SSL_R_UNSUPPORTED_SSL_VERSION
 259

	)

2112 
	#SSL_R_UNSUPPORTED_STATUS_TYPE
 329

	)

2113 
	#SSL_R_WRITE_BIO_NOT_SET
 260

	)

2114 
	#SSL_R_WRONG_CIPHER_RETURNED
 261

	)

2115 
	#SSL_R_WRONG_MESSAGE_TYPE
 262

	)

2116 
	#SSL_R_WRONG_NUMBER_OF_KEY_BITS
 263

	)

2117 
	#SSL_R_WRONG_SIGNATURE_LENGTH
 264

	)

2118 
	#SSL_R_WRONG_SIGNATURE_SIZE
 265

	)

2119 
	#SSL_R_WRONG_SSL_VERSION
 266

	)

2120 
	#SSL_R_WRONG_VERSION_NUMBER
 267

	)

2121 
	#SSL_R_X509_LIB
 268

	)

2122 
	#SSL_R_X509_VERIFICATION_SETUP_PROBLEMS
 269

	)

2124 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/stack.h

59 #i‚de‡
HEADER_STACK_H


60 
	#HEADER_STACK_H


	)

62 #ifde‡ 
__˝lu•lus


66 
	s°ack_°


68 
num
;

69 **
d©a
;

70 
s‹ãd
;

72 
num_Æloc
;

73 (*
comp
)(const * const *, const * const *);

74 } 
	tSTACK
;

76 
	#M_sk_num
(
sk
Ë((skË? (sk)->
num
:-1)

	)

77 
	#M_sk_vÆue
(
sk
,
n
Ë((skË? (sk)->
d©a
[n] : 
NULL
)

	)

79 
sk_num
(c⁄° 
STACK
 *);

80 *
sk_vÆue
(c⁄° 
STACK
 *, );

82 *
sk_£t
(
STACK
 *, , *);

84 
STACK
 *
sk_√w
((*
cmp
)(const * const *, const * const *));

85 
STACK
 *
sk_√w_nuŒ
();

86 
sk_‰ì
(
STACK
 *);

87 
sk_p›_‰ì
(
STACK
 *
°
, (*
func
)(*));

88 
sk_ö£π
(
STACK
 *
sk
,*
d©a
,
whîe
);

89 *
sk_dñëe
(
STACK
 *
°
,
loc
);

90 *
sk_dñëe_±r
(
STACK
 *
°
, *
p
);

91 
sk_föd
(
STACK
 *
°
,*
d©a
);

92 
sk_föd_ex
(
STACK
 *
°
,*
d©a
);

93 
sk_push
(
STACK
 *
°
,*
d©a
);

94 
sk_unshi·
(
STACK
 *
°
,*
d©a
);

95 *
sk_shi·
(
STACK
 *
°
);

96 *
sk_p›
(
STACK
 *
°
);

97 
sk_zîo
(
STACK
 *
°
);

98 (*
sk_£t_cmp_func
(
STACK
 *
sk
, (*
c
)(const * const *,

101 
STACK
 *
sk_dup
(STACK *
°
);

102 
sk_s‹t
(
STACK
 *
°
);

103 
sk_is_s‹ãd
(c⁄° 
STACK
 *
°
);

105 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/txt_db.h

59 #i‚de‡
HEADER_TXT_DB_H


60 
	#HEADER_TXT_DB_H


	)

62 
	~<›ís¶/›ís¶c⁄f.h
>

63 #i‚de‡
OPENSSL_NO_BIO


64 
	~<›ís¶/bio.h
>

66 
	~<›ís¶/°ack.h
>

67 
	~<›ís¶/lhash.h
>

69 
	#DB_ERROR_OK
 0

	)

70 
	#DB_ERROR_MALLOC
 1

	)

71 
	#DB_ERROR_INDEX_CLASH
 2

	)

72 
	#DB_ERROR_INDEX_OUT_OF_RANGE
 3

	)

73 
	#DB_ERROR_NO_INDEX
 4

	)

74 
	#DB_ERROR_INSERT_INDEX_CLASH
 5

	)

76 #ifde‡ 
__˝lu•lus


80 
	stxt_db_°


82 
num_fõlds
;

83 
STACK
 *
d©a
;

84 
LHASH
 **
ödex
;

85 (**
quÆ
)(**);

86 
îr‹
;

87 
¨g1
;

88 
¨g2
;

89 **
¨g_row
;

90 } 
	tTXT_DB
;

92 #i‚de‡
OPENSSL_NO_BIO


93 
TXT_DB
 *
TXT_DB_ªad
(
BIO
 *
ö
, 
num
);

94 
TXT_DB_wrôe
(
BIO
 *
out
, 
TXT_DB
 *
db
);

96 
TXT_DB
 *
TXT_DB_ªad
(*
ö
, 
num
);

97 
TXT_DB_wrôe
(*
out
, 
TXT_DB
 *
db
);

99 
TXT_DB_¸óã_ödex
(
TXT_DB
 *
db
,
fõld
,(*
quÆ
)(**),

100 
LHASH_HASH_FN_TYPE
 
hash
, 
LHASH_COMP_FN_TYPE
 
cmp
);

101 
TXT_DB_‰ì
(
TXT_DB
 *
db
);

102 **
TXT_DB_gë_by_ödex
(
TXT_DB
 *
db
, 
idx
, **
vÆue
);

103 
TXT_DB_ö£π
(
TXT_DB
 *
db
,**
vÆue
);

105 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ui.h

59 #i‚de‡
HEADER_UI_H


60 
	#HEADER_UI_H


	)

62 #i‚de‡
OPENSSL_NO_DEPRECATED


63 
	~<›ís¶/¸y±o.h
>

65 
	~<›ís¶/ß„°ack.h
>

66 
	~<›ís¶/os¶_typ.h
>

68 #ifde‡ 
__˝lu•lus


83 
UI
 *
UI_√w
();

84 
UI
 *
UI_√w_mëhod
(c⁄° 
UI_METHOD
 *
mëhod
);

85 
UI_‰ì
(
UI
 *
ui
);

130 
UI_add_öput_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

131 *
ªsu…_buf
, 
mösize
, 
maxsize
);

132 
UI_dup_öput_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

133 *
ªsu…_buf
, 
mösize
, 
maxsize
);

134 
UI_add_vîify_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

135 *
ªsu…_buf
, 
mösize
, 
maxsize
, c⁄° *
ã°_buf
);

136 
UI_dup_vîify_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

137 *
ªsu…_buf
, 
mösize
, 
maxsize
, c⁄° *
ã°_buf
);

138 
UI_add_öput_boﬁón
(
UI
 *
ui
, c⁄° *
¥om±
, c⁄° *
a˘i⁄_desc
,

139 c⁄° *
ok_ch¨s
, c⁄° *
ˇn˚l_ch¨s
,

140 
Êags
, *
ªsu…_buf
);

141 
UI_dup_öput_boﬁón
(
UI
 *
ui
, c⁄° *
¥om±
, c⁄° *
a˘i⁄_desc
,

142 c⁄° *
ok_ch¨s
, c⁄° *
ˇn˚l_ch¨s
,

143 
Êags
, *
ªsu…_buf
);

144 
UI_add_öfo_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

145 
UI_dup_öfo_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

146 
UI_add_îr‹_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

147 
UI_dup_îr‹_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

151 
	#UI_INPUT_FLAG_ECHO
 0x01

	)

157 
	#UI_INPUT_FLAG_DEFAULT_PWD
 0x02

	)

168 
	#UI_INPUT_FLAG_USER_BASE
 16

	)

188 *
UI_c⁄°ru˘_¥om±
(
UI
 *
ui_mëhod
,

189 c⁄° *
obje˘_desc
, c⁄° *
obje˘_«me
);

201 *
UI_add_u£r_d©a
(
UI
 *
ui
, *
u£r_d©a
);

203 *
UI_gë0_u£r_d©a
(
UI
 *
ui
);

206 c⁄° *
UI_gë0_ªsu…
(
UI
 *
ui
, 
i
);

209 
UI_¥o˚ss
(
UI
 *
ui
);

214 
UI_˘æ
(
UI
 *
ui
, 
cmd
, 
i
, *
p
, (*
f
)());

220 
	#UI_CTRL_PRINT_ERRORS
 1

	)

224 
	#UI_CTRL_IS_REDOABLE
 2

	)

228 
	#UI_£t_≠p_d©a
(
s
,
¨g
Ë
	`UI_£t_ex_d©a
(s,0,¨g)

	)

229 
	#UI_gë_≠p_d©a
(
s
Ë
	`UI_gë_ex_d©a
(s,0)

	)

230 
UI_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

231 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

232 
UI_£t_ex_d©a
(
UI
 *
r
,
idx
,*
¨g
);

233 *
UI_gë_ex_d©a
(
UI
 *
r
, 
idx
);

236 
UI_£t_deÁu…_mëhod
(c⁄° 
UI_METHOD
 *
mëh
);

237 c⁄° 
UI_METHOD
 *
UI_gë_deÁu…_mëhod
();

238 c⁄° 
UI_METHOD
 *
UI_gë_mëhod
(
UI
 *
ui
);

239 c⁄° 
UI_METHOD
 *
UI_£t_mëhod
(
UI
 *
ui
, c⁄° UI_METHOD *
mëh
);

242 
UI_METHOD
 *
UI_O≥nSSL
();

290 
DECLARE_STACK_OF
(
UI_STRING
)

291 
ui_°rög_°
 
	tUI_STRING
;

295 
	eUI_°rög_ty≥s


297 
UIT_NONE
=0,

298 
UIT_PROMPT
,

299 
UIT_VERIFY
,

300 
UIT_BOOLEAN
,

301 
UIT_INFO
,

302 
UIT_ERROR


306 
UI_METHOD
 *
UI_¸óã_mëhod
(*
«me
);

307 
UI_de°roy_mëhod
(
UI_METHOD
 *
ui_mëhod
);

308 
UI_mëhod_£t_›íî
(
UI_METHOD
 *
mëhod
, (*
›íî
)(
UI
 *
ui
));

309 
UI_mëhod_£t_wrôî
(
UI_METHOD
 *
mëhod
, (*
wrôî
)(
UI
 *
ui
, 
UI_STRING
 *
uis
));

310 
UI_mëhod_£t_Êushî
(
UI_METHOD
 *
mëhod
, (*
Êushî
)(
UI
 *
ui
));

311 
UI_mëhod_£t_ªadî
(
UI_METHOD
 *
mëhod
, (*
ªadî
)(
UI
 *
ui
, 
UI_STRING
 *
uis
));

312 
UI_mëhod_£t_˛o£r
(
UI_METHOD
 *
mëhod
, (*
˛o£r
)(
UI
 *
ui
));

313 (*
UI_mëhod_gë_›íî
(
UI_METHOD
 *
mëhod
))(
UI
*);

314 (*
UI_mëhod_gë_wrôî
(
UI_METHOD
 *
mëhod
))(
UI
*,
UI_STRING
*);

315 (*
UI_mëhod_gë_Êushî
(
UI_METHOD
 *
mëhod
))(
UI
*);

316 (*
UI_mëhod_gë_ªadî
(
UI_METHOD
 *
mëhod
))(
UI
*,
UI_STRING
*);

317 (*
UI_mëhod_gë_˛o£r
(
UI_METHOD
 *
mëhod
))(
UI
*);

323 
UI_°rög_ty≥s
 
UI_gë_°rög_ty≥
(
UI_STRING
 *
uis
);

325 
UI_gë_öput_Êags
(
UI_STRING
 *
uis
);

327 c⁄° *
UI_gë0_ouçut_°rög
(
UI_STRING
 *
uis
);

329 c⁄° *
UI_gë0_a˘i⁄_°rög
(
UI_STRING
 *
uis
);

331 c⁄° *
UI_gë0_ªsu…_°rög
(
UI_STRING
 *
uis
);

333 c⁄° *
UI_gë0_ã°_°rög
(
UI_STRING
 *
uis
);

335 
UI_gë_ªsu…_mösize
(
UI_STRING
 *
uis
);

337 
UI_gë_ªsu…_maxsize
(
UI_STRING
 *
uis
);

339 
UI_£t_ªsu…
(
UI
 *
ui
, 
UI_STRING
 *
uis
, c⁄° *
ªsu…
);

343 
UI_UTIL_ªad_pw_°rög
(*
buf
,
Àngth
,c⁄° *
¥om±
,
vîify
);

344 
UI_UTIL_ªad_pw
(*
buf
,*
buff
,
size
,c⁄° *
¥om±
,
vîify
);

351 
ERR_lﬂd_UI_°rögs
();

356 
	#UI_F_GENERAL_ALLOCATE_BOOLEAN
 108

	)

357 
	#UI_F_GENERAL_ALLOCATE_PROMPT
 109

	)

358 
	#UI_F_GENERAL_ALLOCATE_STRING
 100

	)

359 
	#UI_F_UI_CTRL
 111

	)

360 
	#UI_F_UI_DUP_ERROR_STRING
 101

	)

361 
	#UI_F_UI_DUP_INFO_STRING
 102

	)

362 
	#UI_F_UI_DUP_INPUT_BOOLEAN
 110

	)

363 
	#UI_F_UI_DUP_INPUT_STRING
 103

	)

364 
	#UI_F_UI_DUP_VERIFY_STRING
 106

	)

365 
	#UI_F_UI_GET0_RESULT
 107

	)

366 
	#UI_F_UI_NEW_METHOD
 104

	)

367 
	#UI_F_UI_SET_RESULT
 105

	)

370 
	#UI_R_COMMON_OK_AND_CANCEL_CHARACTERS
 104

	)

371 
	#UI_R_INDEX_TOO_LARGE
 102

	)

372 
	#UI_R_INDEX_TOO_SMALL
 103

	)

373 
	#UI_R_NO_RESULT_BUFFER
 105

	)

374 
	#UI_R_RESULT_TOO_LARGE
 100

	)

375 
	#UI_R_RESULT_TOO_SMALL
 101

	)

376 
	#UI_R_UNKNOWN_CONTROL_COMMAND
 106

	)

378 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509.h

64 #i‚de‡
HEADER_X509_H


65 
	#HEADER_X509_H


	)

67 
	~<›ís¶/e_os2.h
>

68 
	~<›ís¶/symhacks.h
>

69 #i‚de‡
OPENSSL_NO_BUFFER


70 
	~<›ís¶/buf„r.h
>

72 #i‚de‡
OPENSSL_NO_EVP


73 
	~<›ís¶/evp.h
>

75 #i‚de‡
OPENSSL_NO_BIO


76 
	~<›ís¶/bio.h
>

78 
	~<›ís¶/°ack.h
>

79 
	~<›ís¶/a¢1.h
>

80 
	~<›ís¶/ß„°ack.h
>

82 #i‚de‡
OPENSSL_NO_EC


83 
	~<›ís¶/ec.h
>

86 #i‚de‡
OPENSSL_NO_ECDSA


87 
	~<›ís¶/ecdß.h
>

90 #i‚de‡
OPENSSL_NO_ECDH


91 
	~<›ís¶/ecdh.h
>

94 #i‚de‡
OPENSSL_NO_DEPRECATED


95 #i‚de‡
OPENSSL_NO_RSA


96 
	~<›ís¶/rß.h
>

98 #i‚de‡
OPENSSL_NO_DSA


99 
	~<›ís¶/dß.h
>

101 #i‚de‡
OPENSSL_NO_DH


102 
	~<›ís¶/dh.h
>

106 #i‚de‡
OPENSSL_NO_SHA


107 
	~<›ís¶/sha.h
>

109 
	~<›ís¶/os¶_typ.h
>

111 #ifde‡ 
__˝lu•lus


115 #ifde‡
OPENSSL_SYS_WIN32


117 #unde‡
X509_NAME


118 #unde‡
X509_CERT_PAIR


119 #unde‡
X509_EXTENSIONS


122 
	#X509_FILETYPE_PEM
 1

	)

123 
	#X509_FILETYPE_ASN1
 2

	)

124 
	#X509_FILETYPE_DEFAULT
 3

	)

126 
	#X509v3_KU_DIGITAL_SIGNATURE
 0x0080

	)

127 
	#X509v3_KU_NON_REPUDIATION
 0x0040

	)

128 
	#X509v3_KU_KEY_ENCIPHERMENT
 0x0020

	)

129 
	#X509v3_KU_DATA_ENCIPHERMENT
 0x0010

	)

130 
	#X509v3_KU_KEY_AGREEMENT
 0x0008

	)

131 
	#X509v3_KU_KEY_CERT_SIGN
 0x0004

	)

132 
	#X509v3_KU_CRL_SIGN
 0x0002

	)

133 
	#X509v3_KU_ENCIPHER_ONLY
 0x0001

	)

134 
	#X509v3_KU_DECIPHER_ONLY
 0x8000

	)

135 
	#X509v3_KU_UNDEF
 0xffff

	)

137 
	sX509_obje˘s_°


139 
nid
;

140 (*
a2i
)();

141 (*
i2a
)();

142 } 
	tX509_OBJECTS
;

144 
	sX509_Æg‹_°


146 
ASN1_OBJECT
 *
Æg‹ôhm
;

147 
ASN1_TYPE
 *
∑ømëî
;

150 
DECLARE_ASN1_SET_OF
(
X509_ALGOR
)

152 
STACK_OF
(
	tX509_ALGOR
Ë
	tX509_ALGORS
;

154 
	sX509_vÆ_°


156 
ASN1_TIME
 *
nŸBef‹e
;

157 
ASN1_TIME
 *
nŸA·î
;

158 } 
	tX509_VAL
;

160 
	sX509_pubkey_°


162 
X509_ALGOR
 *
Æg‹
;

163 
ASN1_BIT_STRING
 *
public_key
;

164 
EVP_PKEY
 *
pkey
;

165 } 
	tX509_PUBKEY
;

167 
	sX509_sig_°


169 
X509_ALGOR
 *
Æg‹
;

170 
ASN1_OCTET_STRING
 *
dige°
;

171 } 
	tX509_SIG
;

173 
	sX509_«me_íåy_°


175 
ASN1_OBJECT
 *
obje˘
;

176 
ASN1_STRING
 *
vÆue
;

177 
£t
;

178 
size
;

179 } 
	tX509_NAME_ENTRY
;

181 
DECLARE_STACK_OF
(
X509_NAME_ENTRY
)

182 
DECLARE_ASN1_SET_OF
(
X509_NAME_ENTRY
)

185 
	sX509_«me_°


187 
STACK_OF
(
X509_NAME_ENTRY
Ë*
íåõs
;

188 
modifõd
;

189 #i‚de‡
OPENSSL_NO_BUFFER


190 
BUF_MEM
 *
byãs
;

192 *
byãs
;

194 
hash
;

197 
DECLARE_STACK_OF
(
X509_NAME
)

199 
	#X509_EX_V_NETSCAPE_HACK
 0x8000

	)

200 
	#X509_EX_V_INIT
 0x0001

	)

201 
	sX509_exãnsi⁄_°


203 
ASN1_OBJECT
 *
obje˘
;

204 
ASN1_BOOLEAN
 
¸ôiˇl
;

205 
ASN1_OCTET_STRING
 *
vÆue
;

206 } 
	tX509_EXTENSION
;

208 
STACK_OF
(
	tX509_EXTENSION
Ë
	tX509_EXTENSIONS
;

210 
DECLARE_STACK_OF
(
X509_EXTENSION
)

211 
DECLARE_ASN1_SET_OF
(
X509_EXTENSION
)

214 
	sx509_©åibuãs_°


216 
ASN1_OBJECT
 *
obje˘
;

217 
sögÀ
;

219 *
±r
;

220  
STACK_OF
(
ASN1_TYPE
Ë*
£t
;

221  
ASN1_TYPE
 *
sögÀ
;

222 } 
vÆue
;

223 } 
	tX509_ATTRIBUTE
;

225 
DECLARE_STACK_OF
(
X509_ATTRIBUTE
)

226 
DECLARE_ASN1_SET_OF
(
X509_ATTRIBUTE
)

229 
	sX509_ªq_öfo_°


231 
ASN1_ENCODING
 
íc
;

232 
ASN1_INTEGER
 *
vîsi⁄
;

233 
X509_NAME
 *
subje˘
;

234 
X509_PUBKEY
 *
pubkey
;

236 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

237 } 
	tX509_REQ_INFO
;

239 
	sX509_ªq_°


241 
X509_REQ_INFO
 *
ªq_öfo
;

242 
X509_ALGOR
 *
sig_Æg
;

243 
ASN1_BIT_STRING
 *
sig«tuª
;

244 
ª„ªn˚s
;

245 } 
	tX509_REQ
;

247 
	sx509_cöf_°


249 
ASN1_INTEGER
 *
vîsi⁄
;

250 
ASN1_INTEGER
 *
£rülNumbî
;

251 
X509_ALGOR
 *
sig«tuª
;

252 
X509_NAME
 *
issuî
;

253 
X509_VAL
 *
vÆidôy
;

254 
X509_NAME
 *
subje˘
;

255 
X509_PUBKEY
 *
key
;

256 
ASN1_BIT_STRING
 *
issuîUID
;

257 
ASN1_BIT_STRING
 *
subje˘UID
;

258 
STACK_OF
(
X509_EXTENSION
Ë*
exãnsi⁄s
;

259 
ASN1_ENCODING
 
íc
;

260 } 
	tX509_CINF
;

268 
	sx509_˚π_aux_°


270 
STACK_OF
(
ASN1_OBJECT
Ë*
åu°
;

271 
STACK_OF
(
ASN1_OBJECT
Ë*
ªje˘
;

272 
ASN1_UTF8STRING
 *
Æüs
;

273 
ASN1_OCTET_STRING
 *
keyid
;

274 
STACK_OF
(
X509_ALGOR
Ë*
Ÿhî
;

275 } 
	tX509_CERT_AUX
;

277 
	sx509_°


279 
X509_CINF
 *
˚π_öfo
;

280 
X509_ALGOR
 *
sig_Æg
;

281 
ASN1_BIT_STRING
 *
sig«tuª
;

282 
vÆid
;

283 
ª„ªn˚s
;

284 *
«me
;

285 
CRYPTO_EX_DATA
 
ex_d©a
;

287 
ex_∑thÀn
;

288 
ex_p˝©hÀn
;

289 
ex_Êags
;

290 
ex_kußge
;

291 
ex_xkußge
;

292 
ex_ns˚π
;

293 
ASN1_OCTET_STRING
 *
skid
;

294 
AUTHORITY_KEYID_°
 *
akid
;

295 
X509_POLICY_CACHE
 *
pﬁicy_ˇche
;

296 #i‚de‡
OPENSSL_NO_RFC3779


297 
STACK_OF
(
IPAddªssFamûy
Ë*
rfc3779_addr
;

298 
ASIdítifõrs_°
 *
rfc3779_asid
;

300 #i‚de‡
OPENSSL_NO_SHA


301 
sha1_hash
[
SHA_DIGEST_LENGTH
];

303 
X509_CERT_AUX
 *
aux
;

306 
DECLARE_STACK_OF
(
X509
)

307 
DECLARE_ASN1_SET_OF
(
X509
)

311 
	sx509_åu°_°
 {

312 
åu°
;

313 
Êags
;

314 (*
check_åu°
)(
x509_åu°_°
 *, 
X509
 *, );

315 *
«me
;

316 
¨g1
;

317 *
¨g2
;

318 } 
	tX509_TRUST
;

320 
DECLARE_STACK_OF
(
X509_TRUST
)

322 
	sx509_˚π_∑ú_°
 {

323 
X509
 *
f‹w¨d
;

324 
X509
 *
ªvî£
;

325 } 
	tX509_CERT_PAIR
;

329 
	#X509_TRUST_DEFAULT
 -1

	)

331 
	#X509_TRUST_COMPAT
 1

	)

332 
	#X509_TRUST_SSL_CLIENT
 2

	)

333 
	#X509_TRUST_SSL_SERVER
 3

	)

334 
	#X509_TRUST_EMAIL
 4

	)

335 
	#X509_TRUST_OBJECT_SIGN
 5

	)

336 
	#X509_TRUST_OCSP_SIGN
 6

	)

337 
	#X509_TRUST_OCSP_REQUEST
 7

	)

340 
	#X509_TRUST_MIN
 1

	)

341 
	#X509_TRUST_MAX
 7

	)

345 
	#X509_TRUST_DYNAMIC
 1

	)

346 
	#X509_TRUST_DYNAMIC_NAME
 2

	)

350 
	#X509_TRUST_TRUSTED
 1

	)

351 
	#X509_TRUST_REJECTED
 2

	)

352 
	#X509_TRUST_UNTRUSTED
 3

	)

356 
	#X509_FLAG_COMPAT
 0

	)

357 
	#X509_FLAG_NO_HEADER
 1L

	)

358 
	#X509_FLAG_NO_VERSION
 (1L << 1)

	)

359 
	#X509_FLAG_NO_SERIAL
 (1L << 2)

	)

360 
	#X509_FLAG_NO_SIGNAME
 (1L << 3)

	)

361 
	#X509_FLAG_NO_ISSUER
 (1L << 4)

	)

362 
	#X509_FLAG_NO_VALIDITY
 (1L << 5)

	)

363 
	#X509_FLAG_NO_SUBJECT
 (1L << 6)

	)

364 
	#X509_FLAG_NO_PUBKEY
 (1L << 7)

	)

365 
	#X509_FLAG_NO_EXTENSIONS
 (1L << 8)

	)

366 
	#X509_FLAG_NO_SIGDUMP
 (1L << 9)

	)

367 
	#X509_FLAG_NO_AUX
 (1L << 10)

	)

368 
	#X509_FLAG_NO_ATTRIBUTES
 (1L << 11)

	)

374 
	#XN_FLAG_SEP_MASK
 (0x‡<< 16)

	)

376 
	#XN_FLAG_COMPAT
 0

	)

377 
	#XN_FLAG_SEP_COMMA_PLUS
 (1 << 16Ë

	)

378 
	#XN_FLAG_SEP_CPLUS_SPC
 (2 << 16Ë

	)

379 
	#XN_FLAG_SEP_SPLUS_SPC
 (3 << 16Ë

	)

380 
	#XN_FLAG_SEP_MULTILINE
 (4 << 16Ë

	)

382 
	#XN_FLAG_DN_REV
 (1 << 20Ë

	)

386 
	#XN_FLAG_FN_MASK
 (0x3 << 21)

	)

388 
	#XN_FLAG_FN_SN
 0

	)

389 
	#XN_FLAG_FN_LN
 (1 << 21Ë

	)

390 
	#XN_FLAG_FN_OID
 (2 << 21Ë

	)

391 
	#XN_FLAG_FN_NONE
 (3 << 21Ë

	)

393 
	#XN_FLAG_SPC_EQ
 (1 << 23Ë

	)

399 
	#XN_FLAG_DUMP_UNKNOWN_FIELDS
 (1 << 24)

	)

401 
	#XN_FLAG_FN_ALIGN
 (1 << 25Ë

	)

405 
	#XN_FLAG_RFC2253
 (
ASN1_STRFLGS_RFC2253
 | \

406 
XN_FLAG_SEP_COMMA_PLUS
 | \

407 
XN_FLAG_DN_REV
 | \

408 
XN_FLAG_FN_SN
 | \

409 
XN_FLAG_DUMP_UNKNOWN_FIELDS
)

	)

413 
	#XN_FLAG_ONELINE
 (
ASN1_STRFLGS_RFC2253
 | \

414 
ASN1_STRFLGS_ESC_QUOTE
 | \

415 
XN_FLAG_SEP_CPLUS_SPC
 | \

416 
XN_FLAG_SPC_EQ
 | \

417 
XN_FLAG_FN_SN
)

	)

421 
	#XN_FLAG_MULTILINE
 (
ASN1_STRFLGS_ESC_CTRL
 | \

422 
ASN1_STRFLGS_ESC_MSB
 | \

423 
XN_FLAG_SEP_MULTILINE
 | \

424 
XN_FLAG_SPC_EQ
 | \

425 
XN_FLAG_FN_LN
 | \

426 
XN_FLAG_FN_ALIGN
)

	)

428 
	sX509_ªvoked_°


430 
ASN1_INTEGER
 *
£rülNumbî
;

431 
ASN1_TIME
 *
ªvoˇti⁄D©e
;

432 
STACK_OF
(
X509_EXTENSION
Ë *
exãnsi⁄s
;

433 
£quí˚
;

434 } 
	tX509_REVOKED
;

436 
DECLARE_STACK_OF
(
X509_REVOKED
)

437 
DECLARE_ASN1_SET_OF
(
X509_REVOKED
)

439 
	sX509_¸l_öfo_°


441 
ASN1_INTEGER
 *
vîsi⁄
;

442 
X509_ALGOR
 *
sig_Æg
;

443 
X509_NAME
 *
issuî
;

444 
ASN1_TIME
 *
œ°Upd©e
;

445 
ASN1_TIME
 *
√xtUpd©e
;

446 
STACK_OF
(
X509_REVOKED
Ë*
ªvoked
;

447 
STACK_OF
(
X509_EXTENSION
Ë *
exãnsi⁄s
;

448 
ASN1_ENCODING
 
íc
;

449 } 
	tX509_CRL_INFO
;

451 
	sX509_¸l_°


454 
X509_CRL_INFO
 *
¸l
;

455 
X509_ALGOR
 *
sig_Æg
;

456 
ASN1_BIT_STRING
 *
sig«tuª
;

457 
ª„ªn˚s
;

460 
DECLARE_STACK_OF
(
X509_CRL
)

461 
DECLARE_ASN1_SET_OF
(
X509_CRL
)

463 
	s¥iv©e_key_°


465 
vîsi⁄
;

467 
X509_ALGOR
 *
íc_Æg‹
;

468 
ASN1_OCTET_STRING
 *
íc_pkey
;

471 
EVP_PKEY
 *
dec_pkey
;

474 
key_Àngth
;

475 *
key_d©a
;

476 
key_‰ì
;

479 
EVP_CIPHER_INFO
 
cùhî
;

481 
ª„ªn˚s
;

482 } 
	tX509_PKEY
;

484 #i‚de‡
OPENSSL_NO_EVP


485 
	sX509_öfo_°


487 
X509
 *
x509
;

488 
X509_CRL
 *
¸l
;

489 
X509_PKEY
 *
x_pkey
;

491 
EVP_CIPHER_INFO
 
íc_cùhî
;

492 
íc_Àn
;

493 *
íc_d©a
;

495 
ª„ªn˚s
;

496 } 
	tX509_INFO
;

498 
DECLARE_STACK_OF
(
X509_INFO
)

505 
	sNësˇ≥_•kac_°


507 
X509_PUBKEY
 *
pubkey
;

508 
ASN1_IA5STRING
 *
chÆÀnge
;

509 } 
	tNETSCAPE_SPKAC
;

511 
	sNësˇ≥_•ki_°


513 
NETSCAPE_SPKAC
 *
•kac
;

514 
X509_ALGOR
 *
sig_Æg‹
;

515 
ASN1_BIT_STRING
 *
sig«tuª
;

516 } 
	tNETSCAPE_SPKI
;

519 
	sNësˇ≥_˚πifiˇã_£quí˚


521 
ASN1_OBJECT
 *
ty≥
;

522 
STACK_OF
(
X509
Ë*
˚πs
;

523 } 
	tNETSCAPE_CERT_SEQUENCE
;

534 
	sPBEPARAM_°
 {

535 
ASN1_OCTET_STRING
 *
ß…
;

536 
ASN1_INTEGER
 *
ôî
;

537 } 
	tPBEPARAM
;

541 
	sPBE2PARAM_°
 {

542 
X509_ALGOR
 *
keyfunc
;

543 
X509_ALGOR
 *
í¸y±i⁄
;

544 } 
	tPBE2PARAM
;

546 
	sPBKDF2PARAM_°
 {

547 
ASN1_TYPE
 *
ß…
;

548 
ASN1_INTEGER
 *
ôî
;

549 
ASN1_INTEGER
 *
keyÀngth
;

550 
X509_ALGOR
 *
¥f
;

551 } 
	tPBKDF2PARAM
;

556 
	spkcs8_¥iv_key_öfo_°


558 
brokí
;

559 
	#PKCS8_OK
 0

	)

560 
	#PKCS8_NO_OCTET
 1

	)

561 
	#PKCS8_EMBEDDED_PARAM
 2

	)

562 
	#PKCS8_NS_DB
 3

	)

563 
ASN1_INTEGER
 *
vîsi⁄
;

564 
X509_ALGOR
 *
pkeyÆg
;

565 
ASN1_TYPE
 *
pkey
;

566 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

567 } 
	tPKCS8_PRIV_KEY_INFO
;

569 #ifde‡ 
__˝lu•lus


573 
	~<›ís¶/x509_vfy.h
>

574 
	~<›ís¶/pkcs7.h
>

576 #ifde‡ 
__˝lu•lus


580 #ifde‡
SSLEAY_MACROS


581 
	#X509_vîify
(
a
,
r
Ë
	`ASN1_vîify
(((*)())
i2d_X509_CINF
,a->
sig_Æg
,\

582 
a
->
sig«tuª
,(*Ô->
˚π_öfo
,
r
)

	)

583 
	#X509_REQ_vîify
(
a
,
r
Ë
	`ASN1_vîify
(((*)())
i2d_X509_REQ_INFO
, \

584 
a
->
sig_Æg
,a->
sig«tuª
,(*Ô->
ªq_öfo
,
r
)

	)

585 
	#X509_CRL_vîify
(
a
,
r
Ë
	`ASN1_vîify
(((*)())
i2d_X509_CRL_INFO
, \

586 
a
->
sig_Æg
,á->
sig«tuª
,(*Ô->
¸l
,
r
)

	)

588 
	#X509_sign
(
x
,
pkey
,
md
) \

589 
	`ASN1_sign
(((*)())
i2d_X509_CINF
, 
x
->
˚π_öfo
->
sig«tuª
, \

590 
x
->
sig_Æg
, x->
sig«tuª
, (*)x->
˚π_öfo
,
pkey
,
md
)

	)

591 
	#X509_REQ_sign
(
x
,
pkey
,
md
) \

592 
	`ASN1_sign
(((*)())
i2d_X509_REQ_INFO
,
x
->
sig_Æg
, 
NULL
, \

593 
x
->
sig«tuª
, (*)x->
ªq_öfo
,
pkey
,
md
)

	)

594 
	#X509_CRL_sign
(
x
,
pkey
,
md
) \

595 
	`ASN1_sign
(((*)())
i2d_X509_CRL_INFO
,
x
->
¸l
->
sig_Æg
,x->sig_alg, \

596 
x
->
sig«tuª
, (*)x->
¸l
,
pkey
,
md
)

	)

597 
	#NETSCAPE_SPKI_sign
(
x
,
pkey
,
md
) \

598 
	`ASN1_sign
(((*)())
i2d_NETSCAPE_SPKAC
, 
x
->
sig_Æg‹
,
NULL
, \

599 
x
->
sig«tuª
, (*)x->
•kac
,
pkey
,
md
)

	)

601 
	#X509_dup
(
x509
Ë(
X509
 *)
	`ASN1_dup
(((*)())
i2d_X509
, \

602 (*(*)())
d2i_X509
,(*)
x509
)

	)

603 
	#X509_ATTRIBUTE_dup
(
xa
Ë(
X509_ATTRIBUTE
 *)
	`ASN1_dup
(\

604 ((*)())
i2d_X509_ATTRIBUTE
, \

605 (*(*)())
d2i_X509_ATTRIBUTE
,(*)
xa
)

	)

606 
	#X509_EXTENSION_dup
(
ex
Ë(
X509_EXTENSION
 *)
	`ASN1_dup
( \

607 ((*)())
i2d_X509_EXTENSION
, \

608 (*(*)())
d2i_X509_EXTENSION
,(*)
ex
)

	)

609 
	#d2i_X509_Â
(
Â
,
x509
Ë(
X509
 *)
	`ASN1_d2i_Â
((*(*)())
X509_√w
, \

610 (*(*)())
d2i_X509
, (
Â
),(**)(
x509
))

	)

611 
	#i2d_X509_Â
(
Â
,
x509
Ë
	`ASN1_i2d_Â
(
i2d_X509
,Â,(*)x509)

	)

612 
	#d2i_X509_bio
(
bp
,
x509
Ë(
X509
 *)
	`ASN1_d2i_bio
((*(*)())
X509_√w
, \

613 (*(*)())
d2i_X509
, (
bp
),(**)(
x509
))

	)

614 
	#i2d_X509_bio
(
bp
,
x509
Ë
	`ASN1_i2d_bio
(
i2d_X509
,bp,(*)x509)

	)

616 
	#X509_CRL_dup
(
¸l
Ë(
X509_CRL
 *)
	`ASN1_dup
(((*)())
i2d_X509_CRL
, \

617 (*(*)())
d2i_X509_CRL
,(*)
¸l
)

	)

618 
	#d2i_X509_CRL_Â
(
Â
,
¸l
Ë(
X509_CRL
 *)
	`ASN1_d2i_Â
((*(*)()) \

619 
X509_CRL_√w
,(*(*)())
d2i_X509_CRL
, (
Â
),\

620 (**)(
¸l
))

	)

621 
	#i2d_X509_CRL_Â
(
Â
,
¸l
Ë
	`ASN1_i2d_Â
(
i2d_X509_CRL
,fp,\

622 (*)
¸l
)

	)

623 
	#d2i_X509_CRL_bio
(
bp
,
¸l
Ë(
X509_CRL
 *)
	`ASN1_d2i_bio
((*(*)()) \

624 
X509_CRL_√w
,(*(*)())
d2i_X509_CRL
, (
bp
),\

625 (**)(
¸l
))

	)

626 
	#i2d_X509_CRL_bio
(
bp
,
¸l
Ë
	`ASN1_i2d_bio
(
i2d_X509_CRL
,bp,\

627 (*)
¸l
)

	)

629 
	#PKCS7_dup
(
p7
Ë(
PKCS7
 *)
	`ASN1_dup
(((*)())
i2d_PKCS7
, \

630 (*(*)())
d2i_PKCS7
,(*)
p7
)

	)

631 
	#d2i_PKCS7_Â
(
Â
,
p7
Ë(
PKCS7
 *)
	`ASN1_d2i_Â
((*(*)()) \

632 
PKCS7_√w
,(*(*)())
d2i_PKCS7
, (
Â
),\

633 (**)(
p7
))

	)

634 
	#i2d_PKCS7_Â
(
Â
,
p7
Ë
	`ASN1_i2d_Â
(
i2d_PKCS7
,fp,\

635 (*)
p7
)

	)

636 
	#d2i_PKCS7_bio
(
bp
,
p7
Ë(
PKCS7
 *)
	`ASN1_d2i_bio
((*(*)()) \

637 
PKCS7_√w
,(*(*)())
d2i_PKCS7
, (
bp
),\

638 (**)(
p7
))

	)

639 
	#i2d_PKCS7_bio
(
bp
,
p7
Ë
	`ASN1_i2d_bio
(
i2d_PKCS7
,bp,\

640 (*)
p7
)

	)

642 
	#X509_REQ_dup
(
ªq
Ë(
X509_REQ
 *)
	`ASN1_dup
(((*)())
i2d_X509_REQ
, \

643 (*(*)())
d2i_X509_REQ
,(*)
ªq
)

	)

644 
	#d2i_X509_REQ_Â
(
Â
,
ªq
Ë(
X509_REQ
 *)
	`ASN1_d2i_Â
((*(*)())\

645 
X509_REQ_√w
, (*(*)())
d2i_X509_REQ
, (
Â
),\

646 (**)(
ªq
))

	)

647 
	#i2d_X509_REQ_Â
(
Â
,
ªq
Ë
	`ASN1_i2d_Â
(
i2d_X509_REQ
,fp,\

648 (*)
ªq
)

	)

649 
	#d2i_X509_REQ_bio
(
bp
,
ªq
Ë(
X509_REQ
 *)
	`ASN1_d2i_bio
((*(*)())\

650 
X509_REQ_√w
, (*(*)())
d2i_X509_REQ
, (
bp
),\

651 (**)(
ªq
))

	)

652 
	#i2d_X509_REQ_bio
(
bp
,
ªq
Ë
	`ASN1_i2d_bio
(
i2d_X509_REQ
,bp,\

653 (*)
ªq
)

	)

655 
	#RSAPublicKey_dup
(
rß
Ë(
RSA
 *)
	`ASN1_dup
(((*)())
i2d_RSAPublicKey
, \

656 (*(*)())
d2i_RSAPublicKey
,(*)
rß
)

	)

657 
	#RSAPriv©eKey_dup
(
rß
Ë(
RSA
 *)
	`ASN1_dup
(((*)())
i2d_RSAPriv©eKey
, \

658 (*(*)())
d2i_RSAPriv©eKey
,(*)
rß
)

	)

660 
	#d2i_RSAPriv©eKey_Â
(
Â
,
rß
Ë(
RSA
 *)
	`ASN1_d2i_Â
((*(*)())\

661 
RSA_√w
,(*(*)())
d2i_RSAPriv©eKey
, (
Â
), \

662 (**)(
rß
))

	)

663 
	#i2d_RSAPriv©eKey_Â
(
Â
,
rß
Ë
	`ASN1_i2d_Â
(
i2d_RSAPriv©eKey
,fp, \

664 (*)
rß
)

	)

665 
	#d2i_RSAPriv©eKey_bio
(
bp
,
rß
Ë(
RSA
 *)
	`ASN1_d2i_bio
((*(*)())\

666 
RSA_√w
,(*(*)())
d2i_RSAPriv©eKey
, (
bp
), \

667 (**)(
rß
))

	)

668 
	#i2d_RSAPriv©eKey_bio
(
bp
,
rß
Ë
	`ASN1_i2d_bio
(
i2d_RSAPriv©eKey
,bp, \

669 (*)
rß
)

	)

671 
	#d2i_RSAPublicKey_Â
(
Â
,
rß
Ë(
RSA
 *)
	`ASN1_d2i_Â
((*(*)())\

672 
RSA_√w
,(*(*)())
d2i_RSAPublicKey
, (
Â
), \

673 (**)(
rß
))

	)

674 
	#i2d_RSAPublicKey_Â
(
Â
,
rß
Ë
	`ASN1_i2d_Â
(
i2d_RSAPublicKey
,fp, \

675 (*)
rß
)

	)

676 
	#d2i_RSAPublicKey_bio
(
bp
,
rß
Ë(
RSA
 *)
	`ASN1_d2i_bio
((*(*)())\

677 
RSA_√w
,(*(*)())
d2i_RSAPublicKey
, (
bp
), \

678 (**)(
rß
))

	)

679 
	#i2d_RSAPublicKey_bio
(
bp
,
rß
Ë
	`ASN1_i2d_bio
(
i2d_RSAPublicKey
,bp, \

680 (*)
rß
)

	)

682 
	#d2i_DSAPriv©eKey_Â
(
Â
,
dß
Ë(
DSA
 *)
	`ASN1_d2i_Â
((*(*)())\

683 
DSA_√w
,(*(*)())
d2i_DSAPriv©eKey
, (
Â
), \

684 (**)(
dß
))

	)

685 
	#i2d_DSAPriv©eKey_Â
(
Â
,
dß
Ë
	`ASN1_i2d_Â
(
i2d_DSAPriv©eKey
,fp, \

686 (*)
dß
)

	)

687 
	#d2i_DSAPriv©eKey_bio
(
bp
,
dß
Ë(
DSA
 *)
	`ASN1_d2i_bio
((*(*)())\

688 
DSA_√w
,(*(*)())
d2i_DSAPriv©eKey
, (
bp
), \

689 (**)(
dß
))

	)

690 
	#i2d_DSAPriv©eKey_bio
(
bp
,
dß
Ë
	`ASN1_i2d_bio
(
i2d_DSAPriv©eKey
,bp, \

691 (*)
dß
)

	)

693 
	#d2i_ECPriv©eKey_Â
(
Â
,
ecdß
Ë(
EC_KEY
 *)
	`ASN1_d2i_Â
((*(*)())\

694 
EC_KEY_√w
,(*(*)())
d2i_ECPriv©eKey
, (
Â
), \

695 (**)(
ecdß
))

	)

696 
	#i2d_ECPriv©eKey_Â
(
Â
,
ecdß
Ë
	`ASN1_i2d_Â
(
i2d_ECPriv©eKey
,fp, \

697 (*)
ecdß
)

	)

698 
	#d2i_ECPriv©eKey_bio
(
bp
,
ecdß
Ë(
EC_KEY
 *)
	`ASN1_d2i_bio
((*(*)())\

699 
EC_KEY_√w
,(*(*)())
d2i_ECPriv©eKey
, (
bp
), \

700 (**)(
ecdß
))

	)

701 
	#i2d_ECPriv©eKey_bio
(
bp
,
ecdß
Ë
	`ASN1_i2d_bio
(
i2d_ECPriv©eKey
,bp, \

702 (*)
ecdß
)

	)

704 
	#X509_ALGOR_dup
(
xn
Ë(
X509_ALGOR
 *)
	`ASN1_dup
(((*)())
i2d_X509_ALGOR
,\

705 (*(*)())
d2i_X509_ALGOR
,(*)
xn
)

	)

707 
	#X509_NAME_dup
(
xn
Ë(
X509_NAME
 *)
	`ASN1_dup
(((*)())
i2d_X509_NAME
, \

708 (*(*)())
d2i_X509_NAME
,(*)
xn
)

	)

709 
	#X509_NAME_ENTRY_dup
(
√
Ë(
X509_NAME_ENTRY
 *)
	`ASN1_dup
( \

710 ((*)())
i2d_X509_NAME_ENTRY
, \

711 (*(*)())
d2i_X509_NAME_ENTRY
,\

712 (*)
√
)

	)

714 
	#X509_dige°
(
d©a
,
ty≥
,
md
,
Àn
) \

715 
	`ASN1_dige°
(((*)())
i2d_X509
,
ty≥
,(*)
d©a
,
md
,
Àn
)

	)

716 
	#X509_NAME_dige°
(
d©a
,
ty≥
,
md
,
Àn
) \

717 
	`ASN1_dige°
(((*)())
i2d_X509_NAME
,
ty≥
,(*)
d©a
,
md
,
Àn
)

	)

718 #i‚de‡
PKCS7_ISSUER_AND_SERIAL_dige°


719 
	#PKCS7_ISSUER_AND_SERIAL_dige°
(
d©a
,
ty≥
,
md
,
Àn
) \

720 
	`ASN1_dige°
(((*)())
i2d_PKCS7_ISSUER_AND_SERIAL
,
ty≥
,\

721 (*)
d©a
,
md
,
Àn
)

	)

725 
	#X509_EXT_PACK_UNKNOWN
 1

	)

726 
	#X509_EXT_PACK_STRING
 2

	)

728 
	#X509_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
˚π_öfo
->
vîsi⁄
)

	)

730 
	#X509_gë_nŸBef‹e
(
x
Ë((x)->
˚π_öfo
->
vÆidôy
->
nŸBef‹e
)

	)

731 
	#X509_gë_nŸA·î
(
x
Ë((x)->
˚π_öfo
->
vÆidôy
->
nŸA·î
)

	)

732 
	#X509_exåa˘_key
(
x
Ë
	`X509_gë_pubkey
(xË

	)

733 
	#X509_REQ_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
ªq_öfo
->
vîsi⁄
)

	)

734 
	#X509_REQ_gë_subje˘_«me
(
x
Ë((x)->
ªq_öfo
->
subje˘
)

	)

735 
	#X509_REQ_exåa˘_key
(
a
Ë
	`X509_REQ_gë_pubkey
◊)

	)

736 
	#X509_«me_cmp
(
a
,
b
Ë
	`X509_NAME_cmp
(◊),(b))

	)

737 
	#X509_gë_sig«tuª_ty≥
(
x
Ë
	`EVP_PKEY_ty≥
(
	`OBJ_obj2nid
((x)->
sig_Æg
->
Æg‹ôhm
))

	)

739 
	#X509_CRL_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
¸l
->
vîsi⁄
)

	)

740 
	#X509_CRL_gë_œ°Upd©e
(
x
Ë((x)->
¸l
->
œ°Upd©e
)

	)

741 
	#X509_CRL_gë_√xtUpd©e
(
x
Ë((x)->
¸l
->
√xtUpd©e
)

	)

742 
	#X509_CRL_gë_issuî
(
x
Ë((x)->
¸l
->
issuî
)

	)

743 
	#X509_CRL_gë_REVOKED
(
x
Ë((x)->
¸l
->
ªvoked
)

	)

747 
	#X509_gë_X509_PUBKEY
(
x
Ë((x)->
˚π_öfo
->
key
)

	)

750 c⁄° *
X509_vîify_˚π_îr‹_°rög
(
n
);

752 #i‚de‡
SSLEAY_MACROS


753 #i‚de‡
OPENSSL_NO_EVP


754 
X509_vîify
(
X509
 *
a
, 
EVP_PKEY
 *
r
);

756 
X509_REQ_vîify
(
X509_REQ
 *
a
, 
EVP_PKEY
 *
r
);

757 
X509_CRL_vîify
(
X509_CRL
 *
a
, 
EVP_PKEY
 *
r
);

758 
NETSCAPE_SPKI_vîify
(
NETSCAPE_SPKI
 *
a
, 
EVP_PKEY
 *
r
);

760 
NETSCAPE_SPKI
 * 
NETSCAPE_SPKI_b64_decode
(c⁄° *
°r
, 
Àn
);

761 * 
NETSCAPE_SPKI_b64_ícode
(
NETSCAPE_SPKI
 *
x
);

762 
EVP_PKEY
 *
NETSCAPE_SPKI_gë_pubkey
(
NETSCAPE_SPKI
 *
x
);

763 
NETSCAPE_SPKI_£t_pubkey
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
);

765 
NETSCAPE_SPKI_¥öt
(
BIO
 *
out
, 
NETSCAPE_SPKI
 *
•ki
);

767 
X509_sig«tuª_¥öt
(
BIO
 *
bp
,
X509_ALGOR
 *
Æg
, 
ASN1_STRING
 *
sig
);

769 
X509_sign
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

770 
X509_REQ_sign
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

771 
X509_CRL_sign
(
X509_CRL
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

772 
NETSCAPE_SPKI_sign
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

774 
X509_pubkey_dige°
(c⁄° 
X509
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

775 *
md
, *
Àn
);

776 
X509_dige°
(c⁄° 
X509
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

777 *
md
, *
Àn
);

778 
X509_CRL_dige°
(c⁄° 
X509_CRL
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

779 *
md
, *
Àn
);

780 
X509_REQ_dige°
(c⁄° 
X509_REQ
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

781 *
md
, *
Àn
);

782 
X509_NAME_dige°
(c⁄° 
X509_NAME
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

783 *
md
, *
Àn
);

786 #i‚de‡
OPENSSL_NO_FP_API


787 
X509
 *
d2i_X509_Â
(
FILE
 *
Â
, X509 **
x509
);

788 
i2d_X509_Â
(
FILE
 *
Â
,
X509
 *
x509
);

789 
X509_CRL
 *
d2i_X509_CRL_Â
(
FILE
 *
Â
,X509_CRL **
¸l
);

790 
i2d_X509_CRL_Â
(
FILE
 *
Â
,
X509_CRL
 *
¸l
);

791 
X509_REQ
 *
d2i_X509_REQ_Â
(
FILE
 *
Â
,X509_REQ **
ªq
);

792 
i2d_X509_REQ_Â
(
FILE
 *
Â
,
X509_REQ
 *
ªq
);

793 #i‚de‡
OPENSSL_NO_RSA


794 
RSA
 *
d2i_RSAPriv©eKey_Â
(
FILE
 *
Â
,RSA **
rß
);

795 
i2d_RSAPriv©eKey_Â
(
FILE
 *
Â
,
RSA
 *
rß
);

796 
RSA
 *
d2i_RSAPublicKey_Â
(
FILE
 *
Â
,RSA **
rß
);

797 
i2d_RSAPublicKey_Â
(
FILE
 *
Â
,
RSA
 *
rß
);

798 
RSA
 *
d2i_RSA_PUBKEY_Â
(
FILE
 *
Â
,RSA **
rß
);

799 
i2d_RSA_PUBKEY_Â
(
FILE
 *
Â
,
RSA
 *
rß
);

801 #i‚de‡
OPENSSL_NO_DSA


802 
DSA
 *
d2i_DSA_PUBKEY_Â
(
FILE
 *
Â
, DSA **
dß
);

803 
i2d_DSA_PUBKEY_Â
(
FILE
 *
Â
, 
DSA
 *
dß
);

804 
DSA
 *
d2i_DSAPriv©eKey_Â
(
FILE
 *
Â
, DSA **
dß
);

805 
i2d_DSAPriv©eKey_Â
(
FILE
 *
Â
, 
DSA
 *
dß
);

807 #i‚de‡
OPENSSL_NO_EC


808 
EC_KEY
 *
d2i_EC_PUBKEY_Â
(
FILE
 *
Â
, EC_KEY **
eckey
);

809 
i2d_EC_PUBKEY_Â
(
FILE
 *
Â
, 
EC_KEY
 *
eckey
);

810 
EC_KEY
 *
d2i_ECPriv©eKey_Â
(
FILE
 *
Â
, EC_KEY **
eckey
);

811 
i2d_ECPriv©eKey_Â
(
FILE
 *
Â
, 
EC_KEY
 *
eckey
);

813 
X509_SIG
 *
d2i_PKCS8_Â
(
FILE
 *
Â
,X509_SIG **
p8
);

814 
i2d_PKCS8_Â
(
FILE
 *
Â
,
X509_SIG
 *
p8
);

815 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_Â
(
FILE
 *
Â
,

816 
PKCS8_PRIV_KEY_INFO
 **
p8öf
);

817 
i2d_PKCS8_PRIV_KEY_INFO_Â
(
FILE
 *
Â
,
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

818 
i2d_PKCS8Priv©eKeyInfo_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
key
);

819 
i2d_Priv©eKey_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
pkey
);

820 
EVP_PKEY
 *
d2i_Priv©eKey_Â
(
FILE
 *
Â
, EVP_PKEY **
a
);

821 
i2d_PUBKEY_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
pkey
);

822 
EVP_PKEY
 *
d2i_PUBKEY_Â
(
FILE
 *
Â
, EVP_PKEY **
a
);

825 #i‚de‡
OPENSSL_NO_BIO


826 
X509
 *
d2i_X509_bio
(
BIO
 *
bp
,X509 **
x509
);

827 
i2d_X509_bio
(
BIO
 *
bp
,
X509
 *
x509
);

828 
X509_CRL
 *
d2i_X509_CRL_bio
(
BIO
 *
bp
,X509_CRL **
¸l
);

829 
i2d_X509_CRL_bio
(
BIO
 *
bp
,
X509_CRL
 *
¸l
);

830 
X509_REQ
 *
d2i_X509_REQ_bio
(
BIO
 *
bp
,X509_REQ **
ªq
);

831 
i2d_X509_REQ_bio
(
BIO
 *
bp
,
X509_REQ
 *
ªq
);

832 #i‚de‡
OPENSSL_NO_RSA


833 
RSA
 *
d2i_RSAPriv©eKey_bio
(
BIO
 *
bp
,RSA **
rß
);

834 
i2d_RSAPriv©eKey_bio
(
BIO
 *
bp
,
RSA
 *
rß
);

835 
RSA
 *
d2i_RSAPublicKey_bio
(
BIO
 *
bp
,RSA **
rß
);

836 
i2d_RSAPublicKey_bio
(
BIO
 *
bp
,
RSA
 *
rß
);

837 
RSA
 *
d2i_RSA_PUBKEY_bio
(
BIO
 *
bp
,RSA **
rß
);

838 
i2d_RSA_PUBKEY_bio
(
BIO
 *
bp
,
RSA
 *
rß
);

840 #i‚de‡
OPENSSL_NO_DSA


841 
DSA
 *
d2i_DSA_PUBKEY_bio
(
BIO
 *
bp
, DSA **
dß
);

842 
i2d_DSA_PUBKEY_bio
(
BIO
 *
bp
, 
DSA
 *
dß
);

843 
DSA
 *
d2i_DSAPriv©eKey_bio
(
BIO
 *
bp
, DSA **
dß
);

844 
i2d_DSAPriv©eKey_bio
(
BIO
 *
bp
, 
DSA
 *
dß
);

846 #i‚de‡
OPENSSL_NO_EC


847 
EC_KEY
 *
d2i_EC_PUBKEY_bio
(
BIO
 *
bp
, EC_KEY **
eckey
);

848 
i2d_EC_PUBKEY_bio
(
BIO
 *
bp
, 
EC_KEY
 *
eckey
);

849 
EC_KEY
 *
d2i_ECPriv©eKey_bio
(
BIO
 *
bp
, EC_KEY **
eckey
);

850 
i2d_ECPriv©eKey_bio
(
BIO
 *
bp
, 
EC_KEY
 *
eckey
);

852 
X509_SIG
 *
d2i_PKCS8_bio
(
BIO
 *
bp
,X509_SIG **
p8
);

853 
i2d_PKCS8_bio
(
BIO
 *
bp
,
X509_SIG
 *
p8
);

854 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
,

855 
PKCS8_PRIV_KEY_INFO
 **
p8öf
);

856 
i2d_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
,
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

857 
i2d_PKCS8Priv©eKeyInfo_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
key
);

858 
i2d_Priv©eKey_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
pkey
);

859 
EVP_PKEY
 *
d2i_Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

860 
i2d_PUBKEY_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
pkey
);

861 
EVP_PKEY
 *
d2i_PUBKEY_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

864 
X509
 *
X509_dup
(X509 *
x509
);

865 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_dup
(X509_ATTRIBUTE *
xa
);

866 
X509_EXTENSION
 *
X509_EXTENSION_dup
(X509_EXTENSION *
ex
);

867 
X509_CRL
 *
X509_CRL_dup
(X509_CRL *
¸l
);

868 
X509_REQ
 *
X509_REQ_dup
(X509_REQ *
ªq
);

869 
X509_ALGOR
 *
X509_ALGOR_dup
(X509_ALGOR *
xn
);

870 
X509_ALGOR_£t0
(
X509_ALGOR
 *
Æg
, 
ASN1_OBJECT
 *
aobj
, 
±y≥
, *
pvÆ
);

871 
X509_ALGOR_gë0
(
ASN1_OBJECT
 **
∑obj
, *
µty≥
, **
µvÆ
,

872 
X509_ALGOR
 *
Æg‹
);

874 
X509_NAME
 *
X509_NAME_dup
(X509_NAME *
xn
);

875 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_dup
(X509_NAME_ENTRY *
√
);

879 
X509_cmp_time
(
ASN1_TIME
 *
s
, 
time_t
 *
t
);

880 
X509_cmp_cuºít_time
(
ASN1_TIME
 *
s
);

881 
ASN1_TIME
 * 
X509_time_adj
(ASN1_TIME *
s
, 
adj
, 
time_t
 *
t
);

882 
ASN1_TIME
 * 
X509_gmtime_adj
(ASN1_TIME *
s
, 
adj
);

884 c⁄° * 
X509_gë_deÁu…_˚π_¨ó
();

885 c⁄° * 
X509_gë_deÁu…_˚π_dú
();

886 c⁄° * 
X509_gë_deÁu…_˚π_fûe
();

887 c⁄° * 
X509_gë_deÁu…_˚π_dú_ív
();

888 c⁄° * 
X509_gë_deÁu…_˚π_fûe_ív
();

889 c⁄° * 
X509_gë_deÁu…_¥iv©e_dú
();

891 
X509_REQ
 * 
X509_to_X509_REQ
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

892 
X509
 * 
X509_REQ_to_X509
(
X509_REQ
 *
r
, 
days
,
EVP_PKEY
 *
pkey
);

894 
DECLARE_ASN1_FUNCTIONS
(
X509_ALGOR
)

895 
DECLARE_ASN1_ENCODE_FUNCTIONS
(
X509_ALGORS
, X509_ALGORS, X509_ALGORS)

896 
DECLARE_ASN1_FUNCTIONS
(
X509_VAL
)

898 
DECLARE_ASN1_FUNCTIONS
(
X509_PUBKEY
)

900 
X509_PUBKEY_£t
(
X509_PUBKEY
 **
x
, 
EVP_PKEY
 *
pkey
);

901 
EVP_PKEY
 * 
X509_PUBKEY_gë
(
X509_PUBKEY
 *
key
);

902 
X509_gë_pubkey_∑ømëîs
(
EVP_PKEY
 *
pkey
,

903 
STACK_OF
(
X509
Ë*
chaö
);

904 
i2d_PUBKEY
(
EVP_PKEY
 *
a
,**
µ
);

905 
EVP_PKEY
 * 
d2i_PUBKEY
(EVP_PKEY **
a
,c⁄° **
µ
,

906 
Àngth
);

907 #i‚de‡
OPENSSL_NO_RSA


908 
i2d_RSA_PUBKEY
(
RSA
 *
a
,**
µ
);

909 
RSA
 * 
d2i_RSA_PUBKEY
(RSA **
a
,c⁄° **
µ
,

910 
Àngth
);

912 #i‚de‡
OPENSSL_NO_DSA


913 
i2d_DSA_PUBKEY
(
DSA
 *
a
,**
µ
);

914 
DSA
 * 
d2i_DSA_PUBKEY
(DSA **
a
,c⁄° **
µ
,

915 
Àngth
);

917 #i‚de‡
OPENSSL_NO_EC


918 
i2d_EC_PUBKEY
(
EC_KEY
 *
a
, **
µ
);

919 
EC_KEY
 *
d2i_EC_PUBKEY
(EC_KEY **
a
, c⁄° **
µ
,

920 
Àngth
);

923 
DECLARE_ASN1_FUNCTIONS
(
X509_SIG
)

924 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ_INFO
)

925 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ
)

927 
DECLARE_ASN1_FUNCTIONS
(
X509_ATTRIBUTE
)

928 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã
(
nid
, 
©πy≥
, *
vÆue
);

930 
DECLARE_ASN1_FUNCTIONS
(
X509_EXTENSION
)

931 
DECLARE_ASN1_ENCODE_FUNCTIONS
(
X509_EXTENSIONS
, X509_EXTENSIONS, X509_EXTENSIONS)

933 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME_ENTRY
)

935 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME
)

937 
X509_NAME_£t
(
X509_NAME
 **
xn
, X509_NAME *
«me
);

939 
DECLARE_ASN1_FUNCTIONS
(
X509_CINF
)

941 
DECLARE_ASN1_FUNCTIONS
(
X509
)

942 
DECLARE_ASN1_FUNCTIONS
(
X509_CERT_AUX
)

944 
DECLARE_ASN1_FUNCTIONS
(
X509_CERT_PAIR
)

946 
X509_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

947 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

948 
X509_£t_ex_d©a
(
X509
 *
r
, 
idx
, *
¨g
);

949 *
X509_gë_ex_d©a
(
X509
 *
r
, 
idx
);

950 
i2d_X509_AUX
(
X509
 *
a
,**
µ
);

951 
X509
 * 
d2i_X509_AUX
(X509 **
a
,c⁄° **
µ
,
Àngth
);

953 
X509_Æüs_£t1
(
X509
 *
x
, *
«me
, 
Àn
);

954 
X509_keyid_£t1
(
X509
 *
x
, *
id
, 
Àn
);

955 * 
X509_Æüs_gë0
(
X509
 *
x
, *
Àn
);

956 * 
X509_keyid_gë0
(
X509
 *
x
, *
Àn
);

957 (*
X509_TRUST_£t_deÁu…
((*
åu°
)(, 
X509
 *, )))(, X509 *, );

958 
X509_TRUST_£t
(*
t
, 
åu°
);

959 
X509_add1_åu°_obje˘
(
X509
 *
x
, 
ASN1_OBJECT
 *
obj
);

960 
X509_add1_ªje˘_obje˘
(
X509
 *
x
, 
ASN1_OBJECT
 *
obj
);

961 
X509_åu°_˛ór
(
X509
 *
x
);

962 
X509_ªje˘_˛ór
(
X509
 *
x
);

964 
DECLARE_ASN1_FUNCTIONS
(
X509_REVOKED
)

965 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL_INFO
)

966 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL
)

968 
X509_CRL_add0_ªvoked
(
X509_CRL
 *
¸l
, 
X509_REVOKED
 *
ªv
);

970 
X509_PKEY
 * 
X509_PKEY_√w
();

971 
X509_PKEY_‰ì
(
X509_PKEY
 *
a
);

972 
i2d_X509_PKEY
(
X509_PKEY
 *
a
,**
µ
);

973 
X509_PKEY
 * 
d2i_X509_PKEY
(X509_PKEY **
a
,c⁄° **
µ
,
Àngth
);

975 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKI
)

976 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKAC
)

977 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_CERT_SEQUENCE
)

979 #i‚de‡
OPENSSL_NO_EVP


980 
X509_INFO
 * 
X509_INFO_√w
();

981 
X509_INFO_‰ì
(
X509_INFO
 *
a
);

982 * 
X509_NAME_⁄ñöe
(
X509_NAME
 *
a
,*
buf
,
size
);

984 
ASN1_vîify
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Æg‹1
,

985 
ASN1_BIT_STRING
 *
sig«tuª
,*
d©a
,
EVP_PKEY
 *
pkey
);

987 
ASN1_dige°
(
i2d_of_void
 *
i2d
,c⁄° 
EVP_MD
 *
ty≥
,*
d©a
,

988 *
md
,*
Àn
);

990 
ASN1_sign
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Æg‹1
,

991 
X509_ALGOR
 *
Æg‹2
, 
ASN1_BIT_STRING
 *
sig«tuª
,

992 *
d©a
,
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
ty≥
);

994 
ASN1_ôem_dige°
(c⁄° 
ASN1_ITEM
 *
ô
,c⁄° 
EVP_MD
 *
ty≥
,*
d©a
,

995 *
md
,*
Àn
);

997 
ASN1_ôem_vîify
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
,

998 
ASN1_BIT_STRING
 *
sig«tuª
,*
d©a
,
EVP_PKEY
 *
pkey
);

1000 
ASN1_ôem_sign
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
, X509_ALGOR *
Æg‹2
,

1001 
ASN1_BIT_STRING
 *
sig«tuª
,

1002 *
d©a
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
ty≥
);

1005 
X509_£t_vîsi⁄
(
X509
 *
x
,
vîsi⁄
);

1006 
X509_£t_£rülNumbî
(
X509
 *
x
, 
ASN1_INTEGER
 *
£rül
);

1007 
ASN1_INTEGER
 * 
X509_gë_£rülNumbî
(
X509
 *
x
);

1008 
X509_£t_issuî_«me
(
X509
 *
x
, 
X509_NAME
 *
«me
);

1009 
X509_NAME
 * 
X509_gë_issuî_«me
(
X509
 *
a
);

1010 
X509_£t_subje˘_«me
(
X509
 *
x
, 
X509_NAME
 *
«me
);

1011 
X509_NAME
 * 
X509_gë_subje˘_«me
(
X509
 *
a
);

1012 
X509_£t_nŸBef‹e
(
X509
 *
x
, 
ASN1_TIME
 *
tm
);

1013 
X509_£t_nŸA·î
(
X509
 *
x
, 
ASN1_TIME
 *
tm
);

1014 
X509_£t_pubkey
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
);

1015 
EVP_PKEY
 * 
X509_gë_pubkey
(
X509
 *
x
);

1016 
ASN1_BIT_STRING
 * 
X509_gë0_pubkey_bô°r
(c⁄° 
X509
 *
x
);

1017 
X509_˚πifiˇã_ty≥
(
X509
 *
x
,
EVP_PKEY
 *
pubkey
 );

1019 
X509_REQ_£t_vîsi⁄
(
X509_REQ
 *
x
,
vîsi⁄
);

1020 
X509_REQ_£t_subje˘_«me
(
X509_REQ
 *
ªq
,
X509_NAME
 *
«me
);

1021 
X509_REQ_£t_pubkey
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
);

1022 
EVP_PKEY
 * 
X509_REQ_gë_pubkey
(
X509_REQ
 *
ªq
);

1023 
X509_REQ_exãnsi⁄_nid
(
nid
);

1024 * 
X509_REQ_gë_exãnsi⁄_nids
();

1025 
X509_REQ_£t_exãnsi⁄_nids
(*
nids
);

1026 
STACK_OF
(
X509_EXTENSION
Ë*
X509_REQ_gë_exãnsi⁄s
(
X509_REQ
 *
ªq
);

1027 
X509_REQ_add_exãnsi⁄s_nid
(
X509_REQ
 *
ªq
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
,

1028 
nid
);

1029 
X509_REQ_add_exãnsi⁄s
(
X509_REQ
 *
ªq
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
);

1030 
X509_REQ_gë_©å_cou¡
(c⁄° 
X509_REQ
 *
ªq
);

1031 
X509_REQ_gë_©å_by_NID
(c⁄° 
X509_REQ
 *
ªq
, 
nid
,

1032 
œ°pos
);

1033 
X509_REQ_gë_©å_by_OBJ
(c⁄° 
X509_REQ
 *
ªq
, 
ASN1_OBJECT
 *
obj
,

1034 
œ°pos
);

1035 
X509_ATTRIBUTE
 *
X509_REQ_gë_©å
(c⁄° 
X509_REQ
 *
ªq
, 
loc
);

1036 
X509_ATTRIBUTE
 *
X509_REQ_dñëe_©å
(
X509_REQ
 *
ªq
, 
loc
);

1037 
X509_REQ_add1_©å
(
X509_REQ
 *
ªq
, 
X509_ATTRIBUTE
 *
©å
);

1038 
X509_REQ_add1_©å_by_OBJ
(
X509_REQ
 *
ªq
,

1039 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1040 c⁄° *
byãs
, 
Àn
);

1041 
X509_REQ_add1_©å_by_NID
(
X509_REQ
 *
ªq
,

1042 
nid
, 
ty≥
,

1043 c⁄° *
byãs
, 
Àn
);

1044 
X509_REQ_add1_©å_by_txt
(
X509_REQ
 *
ªq
,

1045 c⁄° *
©å«me
, 
ty≥
,

1046 c⁄° *
byãs
, 
Àn
);

1048 
X509_CRL_£t_vîsi⁄
(
X509_CRL
 *
x
, 
vîsi⁄
);

1049 
X509_CRL_£t_issuî_«me
(
X509_CRL
 *
x
, 
X509_NAME
 *
«me
);

1050 
X509_CRL_£t_œ°Upd©e
(
X509_CRL
 *
x
, 
ASN1_TIME
 *
tm
);

1051 
X509_CRL_£t_√xtUpd©e
(
X509_CRL
 *
x
, 
ASN1_TIME
 *
tm
);

1052 
X509_CRL_s‹t
(
X509_CRL
 *
¸l
);

1054 
X509_REVOKED_£t_£rülNumbî
(
X509_REVOKED
 *
x
, 
ASN1_INTEGER
 *
£rül
);

1055 
X509_REVOKED_£t_ªvoˇti⁄D©e
(
X509_REVOKED
 *
r
, 
ASN1_TIME
 *
tm
);

1057 
X509_REQ_check_¥iv©e_key
(
X509_REQ
 *
x509
,
EVP_PKEY
 *
pkey
);

1059 
X509_check_¥iv©e_key
(
X509
 *
x509
,
EVP_PKEY
 *
pkey
);

1061 
X509_issuî_™d_£rül_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

1062 
X509_issuî_™d_£rül_hash
(
X509
 *
a
);

1064 
X509_issuî_«me_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

1065 
X509_issuî_«me_hash
(
X509
 *
a
);

1067 
X509_subje˘_«me_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

1068 
X509_subje˘_«me_hash
(
X509
 *
x
);

1070 
X509_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

1071 
X509_NAME_cmp
(c⁄° 
X509_NAME
 *
a
, c⁄° X509_NAME *
b
);

1072 
X509_NAME_hash
(
X509_NAME
 *
x
);

1074 
X509_CRL_cmp
(c⁄° 
X509_CRL
 *
a
, c⁄° X509_CRL *
b
);

1075 #i‚de‡
OPENSSL_NO_FP_API


1076 
X509_¥öt_ex_Â
(
FILE
 *
bp
,
X509
 *
x
, 
nmÊag
, 
cÊag
);

1077 
X509_¥öt_Â
(
FILE
 *
bp
,
X509
 *
x
);

1078 
X509_CRL_¥öt_Â
(
FILE
 *
bp
,
X509_CRL
 *
x
);

1079 
X509_REQ_¥öt_Â
(
FILE
 *
bp
,
X509_REQ
 *
ªq
);

1080 
X509_NAME_¥öt_ex_Â
(
FILE
 *
Â
, 
X509_NAME
 *
nm
, 
ödít
, 
Êags
);

1083 #i‚de‡
OPENSSL_NO_BIO


1084 
X509_NAME_¥öt
(
BIO
 *
bp
, 
X509_NAME
 *
«me
, 
oba£
);

1085 
X509_NAME_¥öt_ex
(
BIO
 *
out
, 
X509_NAME
 *
nm
, 
ödít
, 
Êags
);

1086 
X509_¥öt_ex
(
BIO
 *
bp
,
X509
 *
x
, 
nmÊag
, 
cÊag
);

1087 
X509_¥öt
(
BIO
 *
bp
,
X509
 *
x
);

1088 
X509_oc•id_¥öt
(
BIO
 *
bp
,
X509
 *
x
);

1089 
X509_CERT_AUX_¥öt
(
BIO
 *
bp
,
X509_CERT_AUX
 *
x
, 
ödít
);

1090 
X509_CRL_¥öt
(
BIO
 *
bp
,
X509_CRL
 *
x
);

1091 
X509_REQ_¥öt_ex
(
BIO
 *
bp
, 
X509_REQ
 *
x
, 
nmÊag
, 
cÊag
);

1092 
X509_REQ_¥öt
(
BIO
 *
bp
,
X509_REQ
 *
ªq
);

1095 
X509_NAME_íåy_cou¡
(
X509_NAME
 *
«me
);

1096 
X509_NAME_gë_ãxt_by_NID
(
X509_NAME
 *
«me
, 
nid
,

1097 *
buf
,
Àn
);

1098 
X509_NAME_gë_ãxt_by_OBJ
(
X509_NAME
 *
«me
, 
ASN1_OBJECT
 *
obj
,

1099 *
buf
,
Àn
);

1103 
X509_NAME_gë_ödex_by_NID
(
X509_NAME
 *
«me
,
nid
,
œ°pos
);

1104 
X509_NAME_gë_ödex_by_OBJ
(
X509_NAME
 *
«me
,
ASN1_OBJECT
 *
obj
,

1105 
œ°pos
);

1106 
X509_NAME_ENTRY
 *
X509_NAME_gë_íåy
(
X509_NAME
 *
«me
, 
loc
);

1107 
X509_NAME_ENTRY
 *
X509_NAME_dñëe_íåy
(
X509_NAME
 *
«me
, 
loc
);

1108 
X509_NAME_add_íåy
(
X509_NAME
 *
«me
,
X509_NAME_ENTRY
 *
√
,

1109 
loc
, 
£t
);

1110 
X509_NAME_add_íåy_by_OBJ
(
X509_NAME
 *
«me
, 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1111 *
byãs
, 
Àn
, 
loc
, 
£t
);

1112 
X509_NAME_add_íåy_by_NID
(
X509_NAME
 *
«me
, 
nid
, 
ty≥
,

1113 *
byãs
, 
Àn
, 
loc
, 
£t
);

1114 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_txt
(X509_NAME_ENTRY **
√
,

1115 c⁄° *
fõld
, 
ty≥
, c⁄° *
byãs
, 
Àn
);

1116 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_NID
(X509_NAME_ENTRY **
√
, 
nid
,

1117 
ty≥
,*
byãs
, 
Àn
);

1118 
X509_NAME_add_íåy_by_txt
(
X509_NAME
 *
«me
, c⁄° *
fõld
, 
ty≥
,

1119 c⁄° *
byãs
, 
Àn
, 
loc
, 
£t
);

1120 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_OBJ
(X509_NAME_ENTRY **
√
,

1121 
ASN1_OBJECT
 *
obj
, 
ty≥
,c⁄° *
byãs
,

1122 
Àn
);

1123 
X509_NAME_ENTRY_£t_obje˘
(
X509_NAME_ENTRY
 *
√
,

1124 
ASN1_OBJECT
 *
obj
);

1125 
X509_NAME_ENTRY_£t_d©a
(
X509_NAME_ENTRY
 *
√
, 
ty≥
,

1126 c⁄° *
byãs
, 
Àn
);

1127 
ASN1_OBJECT
 * 
X509_NAME_ENTRY_gë_obje˘
(
X509_NAME_ENTRY
 *
√
);

1128 
ASN1_STRING
 * 
X509_NAME_ENTRY_gë_d©a
(
X509_NAME_ENTRY
 *
√
);

1130 
X509v3_gë_ext_cou¡
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
);

1131 
X509v3_gë_ext_by_NID
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1132 
nid
, 
œ°pos
);

1133 
X509v3_gë_ext_by_OBJ
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1134 
ASN1_OBJECT
 *
obj
,
œ°pos
);

1135 
X509v3_gë_ext_by_¸ôiˇl
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1136 
¸ô
, 
œ°pos
);

1137 
X509_EXTENSION
 *
X509v3_gë_ext
(c⁄° 
STACK_OF
(X509_EXTENSIONË*
x
, 
loc
);

1138 
X509_EXTENSION
 *
X509v3_dñëe_ext
(
STACK_OF
(X509_EXTENSIONË*
x
, 
loc
);

1139 
STACK_OF
(
X509_EXTENSION
Ë*
X509v3_add_ext
(STACK_OF(X509_EXTENSIONË**
x
,

1140 
X509_EXTENSION
 *
ex
, 
loc
);

1142 
X509_gë_ext_cou¡
(
X509
 *
x
);

1143 
X509_gë_ext_by_NID
(
X509
 *
x
, 
nid
, 
œ°pos
);

1144 
X509_gë_ext_by_OBJ
(
X509
 *
x
,
ASN1_OBJECT
 *
obj
,
œ°pos
);

1145 
X509_gë_ext_by_¸ôiˇl
(
X509
 *
x
, 
¸ô
, 
œ°pos
);

1146 
X509_EXTENSION
 *
X509_gë_ext
(
X509
 *
x
, 
loc
);

1147 
X509_EXTENSION
 *
X509_dñëe_ext
(
X509
 *
x
, 
loc
);

1148 
X509_add_ext
(
X509
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1149 * 
X509_gë_ext_d2i
(
X509
 *
x
, 
nid
, *
¸ô
, *
idx
);

1150 
X509_add1_ext_i2d
(
X509
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1151 
Êags
);

1153 
X509_CRL_gë_ext_cou¡
(
X509_CRL
 *
x
);

1154 
X509_CRL_gë_ext_by_NID
(
X509_CRL
 *
x
, 
nid
, 
œ°pos
);

1155 
X509_CRL_gë_ext_by_OBJ
(
X509_CRL
 *
x
,
ASN1_OBJECT
 *
obj
,
œ°pos
);

1156 
X509_CRL_gë_ext_by_¸ôiˇl
(
X509_CRL
 *
x
, 
¸ô
, 
œ°pos
);

1157 
X509_EXTENSION
 *
X509_CRL_gë_ext
(
X509_CRL
 *
x
, 
loc
);

1158 
X509_EXTENSION
 *
X509_CRL_dñëe_ext
(
X509_CRL
 *
x
, 
loc
);

1159 
X509_CRL_add_ext
(
X509_CRL
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1160 * 
X509_CRL_gë_ext_d2i
(
X509_CRL
 *
x
, 
nid
, *
¸ô
, *
idx
);

1161 
X509_CRL_add1_ext_i2d
(
X509_CRL
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1162 
Êags
);

1164 
X509_REVOKED_gë_ext_cou¡
(
X509_REVOKED
 *
x
);

1165 
X509_REVOKED_gë_ext_by_NID
(
X509_REVOKED
 *
x
, 
nid
, 
œ°pos
);

1166 
X509_REVOKED_gë_ext_by_OBJ
(
X509_REVOKED
 *
x
,
ASN1_OBJECT
 *
obj
,
œ°pos
);

1167 
X509_REVOKED_gë_ext_by_¸ôiˇl
(
X509_REVOKED
 *
x
, 
¸ô
, 
œ°pos
);

1168 
X509_EXTENSION
 *
X509_REVOKED_gë_ext
(
X509_REVOKED
 *
x
, 
loc
);

1169 
X509_EXTENSION
 *
X509_REVOKED_dñëe_ext
(
X509_REVOKED
 *
x
, 
loc
);

1170 
X509_REVOKED_add_ext
(
X509_REVOKED
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1171 * 
X509_REVOKED_gë_ext_d2i
(
X509_REVOKED
 *
x
, 
nid
, *
¸ô
, *
idx
);

1172 
X509_REVOKED_add1_ext_i2d
(
X509_REVOKED
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1173 
Êags
);

1175 
X509_EXTENSION
 *
X509_EXTENSION_¸óã_by_NID
(X509_EXTENSION **
ex
,

1176 
nid
, 
¸ô
, 
ASN1_OCTET_STRING
 *
d©a
);

1177 
X509_EXTENSION
 *
X509_EXTENSION_¸óã_by_OBJ
(X509_EXTENSION **
ex
,

1178 
ASN1_OBJECT
 *
obj
,
¸ô
,
ASN1_OCTET_STRING
 *
d©a
);

1179 
X509_EXTENSION_£t_obje˘
(
X509_EXTENSION
 *
ex
,
ASN1_OBJECT
 *
obj
);

1180 
X509_EXTENSION_£t_¸ôiˇl
(
X509_EXTENSION
 *
ex
, 
¸ô
);

1181 
X509_EXTENSION_£t_d©a
(
X509_EXTENSION
 *
ex
,

1182 
ASN1_OCTET_STRING
 *
d©a
);

1183 
ASN1_OBJECT
 * 
X509_EXTENSION_gë_obje˘
(
X509_EXTENSION
 *
ex
);

1184 
ASN1_OCTET_STRING
 *
X509_EXTENSION_gë_d©a
(
X509_EXTENSION
 *
√
);

1185 
X509_EXTENSION_gë_¸ôiˇl
(
X509_EXTENSION
 *
ex
);

1187 
X509©_gë_©å_cou¡
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
);

1188 
X509©_gë_©å_by_NID
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
, 
nid
,

1189 
œ°pos
);

1190 
X509©_gë_©å_by_OBJ
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
, 
ASN1_OBJECT
 *
obj
,

1191 
œ°pos
);

1192 
X509_ATTRIBUTE
 *
X509©_gë_©å
(c⁄° 
STACK_OF
(X509_ATTRIBUTEË*
x
, 
loc
);

1193 
X509_ATTRIBUTE
 *
X509©_dñëe_©å
(
STACK_OF
(X509_ATTRIBUTEË*
x
, 
loc
);

1194 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å
(STACK_OF(X509_ATTRIBUTEË**
x
,

1195 
X509_ATTRIBUTE
 *
©å
);

1196 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_OBJ
(STACK_OF(X509_ATTRIBUTEË**
x
,

1197 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1198 c⁄° *
byãs
, 
Àn
);

1199 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_NID
(STACK_OF(X509_ATTRIBUTEË**
x
,

1200 
nid
, 
ty≥
,

1201 c⁄° *
byãs
, 
Àn
);

1202 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_txt
(STACK_OF(X509_ATTRIBUTEË**
x
,

1203 c⁄° *
©å«me
, 
ty≥
,

1204 c⁄° *
byãs
, 
Àn
);

1205 *
X509©_gë0_d©a_by_OBJ
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
,

1206 
ASN1_OBJECT
 *
obj
, 
œ°pos
, 
ty≥
);

1207 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_NID
(X509_ATTRIBUTE **
©å
, 
nid
,

1208 
©πy≥
, c⁄° *
d©a
, 
Àn
);

1209 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_OBJ
(X509_ATTRIBUTE **
©å
,

1210 c⁄° 
ASN1_OBJECT
 *
obj
, 
©πy≥
, c⁄° *
d©a
, 
Àn
);

1211 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_txt
(X509_ATTRIBUTE **
©å
,

1212 c⁄° *
©∫ame
, 
ty≥
, c⁄° *
byãs
, 
Àn
);

1213 
X509_ATTRIBUTE_£t1_obje˘
(
X509_ATTRIBUTE
 *
©å
, c⁄° 
ASN1_OBJECT
 *
obj
);

1214 
X509_ATTRIBUTE_£t1_d©a
(
X509_ATTRIBUTE
 *
©å
, 
©åty≥
, c⁄° *
d©a
, 
Àn
);

1215 *
X509_ATTRIBUTE_gë0_d©a
(
X509_ATTRIBUTE
 *
©å
, 
idx
,

1216 
©πy≥
, *
d©a
);

1217 
X509_ATTRIBUTE_cou¡
(
X509_ATTRIBUTE
 *
©å
);

1218 
ASN1_OBJECT
 *
X509_ATTRIBUTE_gë0_obje˘
(
X509_ATTRIBUTE
 *
©å
);

1219 
ASN1_TYPE
 *
X509_ATTRIBUTE_gë0_ty≥
(
X509_ATTRIBUTE
 *
©å
, 
idx
);

1221 
EVP_PKEY_gë_©å_cou¡
(c⁄° 
EVP_PKEY
 *
key
);

1222 
EVP_PKEY_gë_©å_by_NID
(c⁄° 
EVP_PKEY
 *
key
, 
nid
,

1223 
œ°pos
);

1224 
EVP_PKEY_gë_©å_by_OBJ
(c⁄° 
EVP_PKEY
 *
key
, 
ASN1_OBJECT
 *
obj
,

1225 
œ°pos
);

1226 
X509_ATTRIBUTE
 *
EVP_PKEY_gë_©å
(c⁄° 
EVP_PKEY
 *
key
, 
loc
);

1227 
X509_ATTRIBUTE
 *
EVP_PKEY_dñëe_©å
(
EVP_PKEY
 *
key
, 
loc
);

1228 
EVP_PKEY_add1_©å
(
EVP_PKEY
 *
key
, 
X509_ATTRIBUTE
 *
©å
);

1229 
EVP_PKEY_add1_©å_by_OBJ
(
EVP_PKEY
 *
key
,

1230 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1231 c⁄° *
byãs
, 
Àn
);

1232 
EVP_PKEY_add1_©å_by_NID
(
EVP_PKEY
 *
key
,

1233 
nid
, 
ty≥
,

1234 c⁄° *
byãs
, 
Àn
);

1235 
EVP_PKEY_add1_©å_by_txt
(
EVP_PKEY
 *
key
,

1236 c⁄° *
©å«me
, 
ty≥
,

1237 c⁄° *
byãs
, 
Àn
);

1239 
X509_vîify_˚π
(
X509_STORE_CTX
 *
˘x
);

1242 
X509
 *
X509_föd_by_issuî_™d_£rül
(
STACK_OF
(X509Ë*
sk
,
X509_NAME
 *
«me
,

1243 
ASN1_INTEGER
 *
£rül
);

1244 
X509
 *
X509_föd_by_subje˘
(
STACK_OF
(X509Ë*
sk
,
X509_NAME
 *
«me
);

1246 
DECLARE_ASN1_FUNCTIONS
(
PBEPARAM
)

1247 
DECLARE_ASN1_FUNCTIONS
(
PBE2PARAM
)

1248 
DECLARE_ASN1_FUNCTIONS
(
PBKDF2PARAM
)

1250 
X509_ALGOR
 *
PKCS5_pbe_£t
(
Æg
, 
ôî
, *
ß…
, 
ß…Àn
);

1251 
X509_ALGOR
 *
PKCS5_pbe2_£t
(c⁄° 
EVP_CIPHER
 *
cùhî
, 
ôî
,

1252 *
ß…
, 
ß…Àn
);

1256 
DECLARE_ASN1_FUNCTIONS
(
PKCS8_PRIV_KEY_INFO
)

1258 
EVP_PKEY
 *
EVP_PKCS82PKEY
(
PKCS8_PRIV_KEY_INFO
 *
p8
);

1259 
PKCS8_PRIV_KEY_INFO
 *
EVP_PKEY2PKCS8
(
EVP_PKEY
 *
pkey
);

1260 
PKCS8_PRIV_KEY_INFO
 *
EVP_PKEY2PKCS8_brokí
(
EVP_PKEY
 *
pkey
, 
brokí
);

1261 
PKCS8_PRIV_KEY_INFO
 *
PKCS8_£t_brokí
(PKCS8_PRIV_KEY_INFO *
p8
, 
brokí
);

1263 
X509_check_åu°
(
X509
 *
x
, 
id
, 
Êags
);

1264 
X509_TRUST_gë_cou¡
();

1265 
X509_TRUST
 * 
X509_TRUST_gë0
(
idx
);

1266 
X509_TRUST_gë_by_id
(
id
);

1267 
X509_TRUST_add
(
id
, 
Êags
, (*
ck
)(
X509_TRUST
 *, 
X509
 *, ),

1268 *
«me
, 
¨g1
, *
¨g2
);

1269 
X509_TRUST_˛ónup
();

1270 
X509_TRUST_gë_Êags
(
X509_TRUST
 *
xp
);

1271 *
X509_TRUST_gë0_«me
(
X509_TRUST
 *
xp
);

1272 
X509_TRUST_gë_åu°
(
X509_TRUST
 *
xp
);

1278 
ERR_lﬂd_X509_°rögs
();

1283 
	#X509_F_ADD_CERT_DIR
 100

	)

1284 
	#X509_F_BY_FILE_CTRL
 101

	)

1285 
	#X509_F_CHECK_POLICY
 145

	)

1286 
	#X509_F_DIR_CTRL
 102

	)

1287 
	#X509_F_GET_CERT_BY_SUBJECT
 103

	)

1288 
	#X509_F_NETSCAPE_SPKI_B64_DECODE
 129

	)

1289 
	#X509_F_NETSCAPE_SPKI_B64_ENCODE
 130

	)

1290 
	#X509_F_X509AT_ADD1_ATTR
 135

	)

1291 
	#X509_F_X509V3_ADD_EXT
 104

	)

1292 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_NID
 136

	)

1293 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ
 137

	)

1294 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_TXT
 140

	)

1295 
	#X509_F_X509_ATTRIBUTE_GET0_DATA
 139

	)

1296 
	#X509_F_X509_ATTRIBUTE_SET1_DATA
 138

	)

1297 
	#X509_F_X509_CHECK_PRIVATE_KEY
 128

	)

1298 
	#X509_F_X509_CRL_PRINT_FP
 147

	)

1299 
	#X509_F_X509_EXTENSION_CREATE_BY_NID
 108

	)

1300 
	#X509_F_X509_EXTENSION_CREATE_BY_OBJ
 109

	)

1301 
	#X509_F_X509_GET_PUBKEY_PARAMETERS
 110

	)

1302 
	#X509_F_X509_LOAD_CERT_CRL_FILE
 132

	)

1303 
	#X509_F_X509_LOAD_CERT_FILE
 111

	)

1304 
	#X509_F_X509_LOAD_CRL_FILE
 112

	)

1305 
	#X509_F_X509_NAME_ADD_ENTRY
 113

	)

1306 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_NID
 114

	)

1307 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_TXT
 131

	)

1308 
	#X509_F_X509_NAME_ENTRY_SET_OBJECT
 115

	)

1309 
	#X509_F_X509_NAME_ONELINE
 116

	)

1310 
	#X509_F_X509_NAME_PRINT
 117

	)

1311 
	#X509_F_X509_PRINT_EX_FP
 118

	)

1312 
	#X509_F_X509_PUBKEY_GET
 119

	)

1313 
	#X509_F_X509_PUBKEY_SET
 120

	)

1314 
	#X509_F_X509_REQ_CHECK_PRIVATE_KEY
 144

	)

1315 
	#X509_F_X509_REQ_PRINT_EX
 121

	)

1316 
	#X509_F_X509_REQ_PRINT_FP
 122

	)

1317 
	#X509_F_X509_REQ_TO_X509
 123

	)

1318 
	#X509_F_X509_STORE_ADD_CERT
 124

	)

1319 
	#X509_F_X509_STORE_ADD_CRL
 125

	)

1320 
	#X509_F_X509_STORE_CTX_GET1_ISSUER
 146

	)

1321 
	#X509_F_X509_STORE_CTX_INIT
 143

	)

1322 
	#X509_F_X509_STORE_CTX_NEW
 142

	)

1323 
	#X509_F_X509_STORE_CTX_PURPOSE_INHERIT
 134

	)

1324 
	#X509_F_X509_TO_X509_REQ
 126

	)

1325 
	#X509_F_X509_TRUST_ADD
 133

	)

1326 
	#X509_F_X509_TRUST_SET
 141

	)

1327 
	#X509_F_X509_VERIFY_CERT
 127

	)

1330 
	#X509_R_BAD_X509_FILETYPE
 100

	)

1331 
	#X509_R_BASE64_DECODE_ERROR
 118

	)

1332 
	#X509_R_CANT_CHECK_DH_KEY
 114

	)

1333 
	#X509_R_CERT_ALREADY_IN_HASH_TABLE
 101

	)

1334 
	#X509_R_ERR_ASN1_LIB
 102

	)

1335 
	#X509_R_INVALID_DIRECTORY
 113

	)

1336 
	#X509_R_INVALID_FIELD_NAME
 119

	)

1337 
	#X509_R_INVALID_TRUST
 123

	)

1338 
	#X509_R_KEY_TYPE_MISMATCH
 115

	)

1339 
	#X509_R_KEY_VALUES_MISMATCH
 116

	)

1340 
	#X509_R_LOADING_CERT_DIR
 103

	)

1341 
	#X509_R_LOADING_DEFAULTS
 104

	)

1342 
	#X509_R_NO_CERT_SET_FOR_US_TO_VERIFY
 105

	)

1343 
	#X509_R_SHOULD_RETRY
 106

	)

1344 
	#X509_R_UNABLE_TO_FIND_PARAMETERS_IN_CHAIN
 107

	)

1345 
	#X509_R_UNABLE_TO_GET_CERTS_PUBLIC_KEY
 108

	)

1346 
	#X509_R_UNKNOWN_KEY_TYPE
 117

	)

1347 
	#X509_R_UNKNOWN_NID
 109

	)

1348 
	#X509_R_UNKNOWN_PURPOSE_ID
 121

	)

1349 
	#X509_R_UNKNOWN_TRUST_ID
 120

	)

1350 
	#X509_R_UNSUPPORTED_ALGORITHM
 111

	)

1351 
	#X509_R_WRONG_LOOKUP_TYPE
 112

	)

1352 
	#X509_R_WRONG_TYPE
 122

	)

1354 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509_vfy.h

59 #i‚de‡
HEADER_X509_H


60 
	~<›ís¶/x509.h
>

65 #i‚de‡
HEADER_X509_VFY_H


66 
	#HEADER_X509_VFY_H


	)

68 
	~<›ís¶/›ís¶c⁄f.h
>

69 #i‚de‡
OPENSSL_NO_LHASH


70 
	~<›ís¶/lhash.h
>

72 
	~<›ís¶/bio.h
>

73 
	~<›ís¶/¸y±o.h
>

74 
	~<›ís¶/symhacks.h
>

76 #ifde‡ 
__˝lu•lus


81 
	sx509_hash_dú_°


83 
num_dús
;

84 **
dús
;

85 *
dús_ty≥
;

86 
num_dús_Ælo˚d
;

87 } 
	tX509_HASH_DIR_CTX
;

89 
	sx509_fûe_°


91 
num_∑ths
;

92 
num_Ælo˚d
;

93 **
∑ths
;

94 *
∑th_ty≥
;

95 } 
	tX509_CERT_FILE_CTX
;

115 
	#X509_LU_RETRY
 -1

	)

116 
	#X509_LU_FAIL
 0

	)

117 
	#X509_LU_X509
 1

	)

118 
	#X509_LU_CRL
 2

	)

119 
	#X509_LU_PKEY
 3

	)

121 
	sx509_obje˘_°


124 
ty≥
;

126 *
±r
;

127 
X509
 *
x509
;

128 
X509_CRL
 *
¸l
;

129 
EVP_PKEY
 *
pkey
;

130 } 
d©a
;

131 } 
	tX509_OBJECT
;

133 
x509_lookup_°
 
	tX509_LOOKUP
;

135 
DECLARE_STACK_OF
(
X509_LOOKUP
)

136 
DECLARE_STACK_OF
(
X509_OBJECT
)

139 
	sx509_lookup_mëhod_°


141 c⁄° *
«me
;

142 (*
√w_ôem
)(
X509_LOOKUP
 *
˘x
);

143 (*
‰ì
)(
X509_LOOKUP
 *
˘x
);

144 (*
öô
)(
X509_LOOKUP
 *
˘x
);

145 (*
shutdown
)(
X509_LOOKUP
 *
˘x
);

146 (*
˘æ
)(
X509_LOOKUP
 *
˘x
,
cmd
,c⁄° *
¨gc
,
¨gl
,

147 **
ªt
);

148 (*
gë_by_subje˘
)(
X509_LOOKUP
 *
˘x
,
ty≥
,
X509_NAME
 *
«me
,

149 
X509_OBJECT
 *
ªt
);

150 (*
gë_by_issuî_£rül
)(
X509_LOOKUP
 *
˘x
,
ty≥
,
X509_NAME
 *
«me
,

151 
ASN1_INTEGER
 *
£rül
,
X509_OBJECT
 *
ªt
);

152 (*
gë_by_fögî¥öt
)(
X509_LOOKUP
 *
˘x
,
ty≥
,

153 *
byãs
,
Àn
,

154 
X509_OBJECT
 *
ªt
);

155 (*
gë_by_Æüs
)(
X509_LOOKUP
 *
˘x
,
ty≥
,*
°r
,
Àn
,

156 
X509_OBJECT
 *
ªt
);

157 } 
	tX509_LOOKUP_METHOD
;

164 
	sX509_VERIFY_PARAM_°


166 *
«me
;

167 
time_t
 
check_time
;

168 
öh_Êags
;

169 
Êags
;

170 
puΩo£
;

171 
åu°
;

172 
dïth
;

173 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicõs
;

174 } 
	tX509_VERIFY_PARAM
;

176 
DECLARE_STACK_OF
(
X509_VERIFY_PARAM
)

181 
	sx509_°‹e_°


184 
ˇche
;

185 
STACK_OF
(
X509_OBJECT
Ë*
objs
;

188 
STACK_OF
(
X509_LOOKUP
Ë*
gë_˚π_mëhods
;

190 
X509_VERIFY_PARAM
 *
∑øm
;

193 (*
vîify
)(
X509_STORE_CTX
 *
˘x
);

194 (*
vîify_cb
)(
ok
,
X509_STORE_CTX
 *
˘x
);

195 (*
gë_issuî
)(
X509
 **
issuî
, 
X509_STORE_CTX
 *
˘x
, X509 *
x
);

196 (*
check_issued
)(
X509_STORE_CTX
 *
˘x
, 
X509
 *
x
, X509 *
issuî
);

197 (*
check_ªvoˇti⁄
)(
X509_STORE_CTX
 *
˘x
);

198 (*
gë_¸l
)(
X509_STORE_CTX
 *
˘x
, 
X509_CRL
 **
¸l
, 
X509
 *
x
);

199 (*
check_¸l
)(
X509_STORE_CTX
 *
˘x
, 
X509_CRL
 *
¸l
);

200 (*
˚π_¸l
)(
X509_STORE_CTX
 *
˘x
, 
X509_CRL
 *
¸l
, 
X509
 *
x
);

201 (*
˛ónup
)(
X509_STORE_CTX
 *
˘x
);

203 
CRYPTO_EX_DATA
 
ex_d©a
;

204 
ª„ªn˚s
;

207 
X509_STORE_£t_dïth
(
X509_STORE
 *
°‹e
, 
dïth
);

209 
	#X509_STORE_£t_vîify_cb_func
(
˘x
,
func
Ë((˘x)->
vîify_cb
=(func))

	)

210 
	#X509_STORE_£t_vîify_func
(
˘x
,
func
Ë((˘x)->
vîify
=(func))

	)

213 
	sx509_lookup_°


215 
öô
;

216 
skù
;

217 
X509_LOOKUP_METHOD
 *
mëhod
;

218 *
mëhod_d©a
;

220 
X509_STORE
 *
°‹e_˘x
;

226 
	sx509_°‹e_˘x_°


228 
X509_STORE
 *
˘x
;

229 
cuºít_mëhod
;

232 
X509
 *
˚π
;

233 
STACK_OF
(
X509
Ë*
u¡ru°ed
;

234 
STACK_OF
(
X509_CRL
Ë*
¸ls
;

236 
X509_VERIFY_PARAM
 *
∑øm
;

237 *
Ÿhî_˘x
;

240 (*
vîify
)(
X509_STORE_CTX
 *
˘x
);

241 (*
vîify_cb
)(
ok
,
X509_STORE_CTX
 *
˘x
);

242 (*
gë_issuî
)(
X509
 **
issuî
, 
X509_STORE_CTX
 *
˘x
, X509 *
x
);

243 (*
check_issued
)(
X509_STORE_CTX
 *
˘x
, 
X509
 *
x
, X509 *
issuî
);

244 (*
check_ªvoˇti⁄
)(
X509_STORE_CTX
 *
˘x
);

245 (*
gë_¸l
)(
X509_STORE_CTX
 *
˘x
, 
X509_CRL
 **
¸l
, 
X509
 *
x
);

246 (*
check_¸l
)(
X509_STORE_CTX
 *
˘x
, 
X509_CRL
 *
¸l
);

247 (*
˚π_¸l
)(
X509_STORE_CTX
 *
˘x
, 
X509_CRL
 *
¸l
, 
X509
 *
x
);

248 (*
check_pﬁicy
)(
X509_STORE_CTX
 *
˘x
);

249 (*
˛ónup
)(
X509_STORE_CTX
 *
˘x
);

252 
vÆid
;

253 
œ°_u¡ru°ed
;

254 
STACK_OF
(
X509
Ë*
chaö
;

255 
X509_POLICY_TREE
 *
åì
;

257 
ex∂icô_pﬁicy
;

260 
îr‹_dïth
;

261 
îr‹
;

262 
X509
 *
cuºít_˚π
;

263 
X509
 *
cuºít_issuî
;

264 
X509_CRL
 *
cuºít_¸l
;

266 
CRYPTO_EX_DATA
 
ex_d©a
;

269 
X509_STORE_CTX_£t_dïth
(
X509_STORE_CTX
 *
˘x
, 
dïth
);

271 
	#X509_STORE_CTX_£t_≠p_d©a
(
˘x
,
d©a
) \

272 
	`X509_STORE_CTX_£t_ex_d©a
(
˘x
,0,
d©a
)

	)

273 
	#X509_STORE_CTX_gë_≠p_d©a
(
˘x
) \

274 
	`X509_STORE_CTX_gë_ex_d©a
(
˘x
,0)

	)

276 
	#X509_L_FILE_LOAD
 1

	)

277 
	#X509_L_ADD_DIR
 2

	)

279 
	#X509_LOOKUP_lﬂd_fûe
(
x
,
«me
,
ty≥
) \

280 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_FILE_LOAD
,(
«me
),()(
ty≥
),
NULL
)

	)

282 
	#X509_LOOKUP_add_dú
(
x
,
«me
,
ty≥
) \

283 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_ADD_DIR
,(
«me
),()(
ty≥
),
NULL
)

	)

285 
	#X509_V_OK
 0

	)

288 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT
 2

	)

289 
	#X509_V_ERR_UNABLE_TO_GET_CRL
 3

	)

290 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE
 4

	)

291 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE
 5

	)

292 
	#X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY
 6

	)

293 
	#X509_V_ERR_CERT_SIGNATURE_FAILURE
 7

	)

294 
	#X509_V_ERR_CRL_SIGNATURE_FAILURE
 8

	)

295 
	#X509_V_ERR_CERT_NOT_YET_VALID
 9

	)

296 
	#X509_V_ERR_CERT_HAS_EXPIRED
 10

	)

297 
	#X509_V_ERR_CRL_NOT_YET_VALID
 11

	)

298 
	#X509_V_ERR_CRL_HAS_EXPIRED
 12

	)

299 
	#X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD
 13

	)

300 
	#X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD
 14

	)

301 
	#X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD
 15

	)

302 
	#X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD
 16

	)

303 
	#X509_V_ERR_OUT_OF_MEM
 17

	)

304 
	#X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
 18

	)

305 
	#X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN
 19

	)

306 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
 20

	)

307 
	#X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE
 21

	)

308 
	#X509_V_ERR_CERT_CHAIN_TOO_LONG
 22

	)

309 
	#X509_V_ERR_CERT_REVOKED
 23

	)

310 
	#X509_V_ERR_INVALID_CA
 24

	)

311 
	#X509_V_ERR_PATH_LENGTH_EXCEEDED
 25

	)

312 
	#X509_V_ERR_INVALID_PURPOSE
 26

	)

313 
	#X509_V_ERR_CERT_UNTRUSTED
 27

	)

314 
	#X509_V_ERR_CERT_REJECTED
 28

	)

316 
	#X509_V_ERR_SUBJECT_ISSUER_MISMATCH
 29

	)

317 
	#X509_V_ERR_AKID_SKID_MISMATCH
 30

	)

318 
	#X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH
 31

	)

319 
	#X509_V_ERR_KEYUSAGE_NO_CERTSIGN
 32

	)

321 
	#X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER
 33

	)

322 
	#X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION
 34

	)

323 
	#X509_V_ERR_KEYUSAGE_NO_CRL_SIGN
 35

	)

324 
	#X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION
 36

	)

325 
	#X509_V_ERR_INVALID_NON_CA
 37

	)

326 
	#X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED
 38

	)

327 
	#X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE
 39

	)

328 
	#X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED
 40

	)

330 
	#X509_V_ERR_INVALID_EXTENSION
 41

	)

331 
	#X509_V_ERR_INVALID_POLICY_EXTENSION
 42

	)

332 
	#X509_V_ERR_NO_EXPLICIT_POLICY
 43

	)

334 
	#X509_V_ERR_UNNESTED_RESOURCE
 44

	)

337 
	#X509_V_ERR_APPLICATION_VERIFICATION
 50

	)

342 
	#X509_V_FLAG_CB_ISSUER_CHECK
 0x1

	)

344 
	#X509_V_FLAG_USE_CHECK_TIME
 0x2

	)

346 
	#X509_V_FLAG_CRL_CHECK
 0x4

	)

348 
	#X509_V_FLAG_CRL_CHECK_ALL
 0x8

	)

350 
	#X509_V_FLAG_IGNORE_CRITICAL
 0x10

	)

352 
	#X509_V_FLAG_X509_STRICT
 0x20

	)

354 
	#X509_V_FLAG_ALLOW_PROXY_CERTS
 0x40

	)

356 
	#X509_V_FLAG_POLICY_CHECK
 0x80

	)

358 
	#X509_V_FLAG_EXPLICIT_POLICY
 0x100

	)

360 
	#X509_V_FLAG_INHIBIT_ANY
 0x200

	)

362 
	#X509_V_FLAG_INHIBIT_MAP
 0x400

	)

364 
	#X509_V_FLAG_NOTIFY_POLICY
 0x800

	)

367 
	#X509_V_FLAG_CHECK_SS_SIGNATURE
 0x4000

	)

369 
	#X509_VP_FLAG_DEFAULT
 0x1

	)

370 
	#X509_VP_FLAG_OVERWRITE
 0x2

	)

371 
	#X509_VP_FLAG_RESET_FLAGS
 0x4

	)

372 
	#X509_VP_FLAG_LOCKED
 0x8

	)

373 
	#X509_VP_FLAG_ONCE
 0x10

	)

376 
	#X509_V_FLAG_POLICY_MASK
 (
X509_V_FLAG_POLICY_CHECK
 \

377 | 
X509_V_FLAG_EXPLICIT_POLICY
 \

378 | 
X509_V_FLAG_INHIBIT_ANY
 \

379 | 
X509_V_FLAG_INHIBIT_MAP
)

	)

381 
X509_OBJECT_idx_by_subje˘
(
STACK_OF
(
X509_OBJECT
Ë*
h
, 
ty≥
,

382 
X509_NAME
 *
«me
);

383 
X509_OBJECT
 *
X509_OBJECT_ªåõve_by_subje˘
(
STACK_OF
(X509_OBJECTË*
h
,
ty≥
,
X509_NAME
 *
«me
);

384 
X509_OBJECT
 *
X509_OBJECT_ªåõve_m©ch
(
STACK_OF
(X509_OBJECTË*
h
, X509_OBJECT *
x
);

385 
X509_OBJECT_up_ªf_cou¡
(
X509_OBJECT
 *
a
);

386 
X509_OBJECT_‰ì_c⁄ã¡s
(
X509_OBJECT
 *
a
);

387 
X509_STORE
 *
X509_STORE_√w
();

388 
X509_STORE_‰ì
(
X509_STORE
 *
v
);

390 
X509_STORE_£t_Êags
(
X509_STORE
 *
˘x
, 
Êags
);

391 
X509_STORE_£t_puΩo£
(
X509_STORE
 *
˘x
, 
puΩo£
);

392 
X509_STORE_£t_åu°
(
X509_STORE
 *
˘x
, 
åu°
);

393 
X509_STORE_£t1_∑øm
(
X509_STORE
 *
˘x
, 
X509_VERIFY_PARAM
 *
pm
);

395 
X509_STORE_CTX
 *
X509_STORE_CTX_√w
();

397 
X509_STORE_CTX_gë1_issuî
(
X509
 **
issuî
, 
X509_STORE_CTX
 *
˘x
, X509 *
x
);

399 
X509_STORE_CTX_‰ì
(
X509_STORE_CTX
 *
˘x
);

400 
X509_STORE_CTX_öô
(
X509_STORE_CTX
 *
˘x
, 
X509_STORE
 *
°‹e
,

401 
X509
 *
x509
, 
STACK_OF
(X509Ë*
chaö
);

402 
X509_STORE_CTX_åu°ed_°ack
(
X509_STORE_CTX
 *
˘x
, 
STACK_OF
(
X509
Ë*
sk
);

403 
X509_STORE_CTX_˛ónup
(
X509_STORE_CTX
 *
˘x
);

405 
X509_LOOKUP
 *
X509_STORE_add_lookup
(
X509_STORE
 *
v
, 
X509_LOOKUP_METHOD
 *
m
);

407 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_hash_dú
();

408 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_fûe
();

410 
X509_STORE_add_˚π
(
X509_STORE
 *
˘x
, 
X509
 *
x
);

411 
X509_STORE_add_¸l
(
X509_STORE
 *
˘x
, 
X509_CRL
 *
x
);

413 
X509_STORE_gë_by_subje˘
(
X509_STORE_CTX
 *
vs
,
ty≥
,
X509_NAME
 *
«me
,

414 
X509_OBJECT
 *
ªt
);

416 
X509_LOOKUP_˘æ
(
X509_LOOKUP
 *
˘x
, 
cmd
, c⁄° *
¨gc
,

417 
¨gl
, **
ªt
);

419 #i‚de‡
OPENSSL_NO_STDIO


420 
X509_lﬂd_˚π_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

421 
X509_lﬂd_¸l_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

422 
X509_lﬂd_˚π_¸l_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

426 
X509_LOOKUP
 *
X509_LOOKUP_√w
(
X509_LOOKUP_METHOD
 *
mëhod
);

427 
X509_LOOKUP_‰ì
(
X509_LOOKUP
 *
˘x
);

428 
X509_LOOKUP_öô
(
X509_LOOKUP
 *
˘x
);

429 
X509_LOOKUP_by_subje˘
(
X509_LOOKUP
 *
˘x
, 
ty≥
, 
X509_NAME
 *
«me
,

430 
X509_OBJECT
 *
ªt
);

431 
X509_LOOKUP_by_issuî_£rül
(
X509_LOOKUP
 *
˘x
, 
ty≥
, 
X509_NAME
 *
«me
,

432 
ASN1_INTEGER
 *
£rül
, 
X509_OBJECT
 *
ªt
);

433 
X509_LOOKUP_by_fögî¥öt
(
X509_LOOKUP
 *
˘x
, 
ty≥
,

434 *
byãs
, 
Àn
, 
X509_OBJECT
 *
ªt
);

435 
X509_LOOKUP_by_Æüs
(
X509_LOOKUP
 *
˘x
, 
ty≥
, *
°r
,

436 
Àn
, 
X509_OBJECT
 *
ªt
);

437 
X509_LOOKUP_shutdown
(
X509_LOOKUP
 *
˘x
);

439 #i‚de‡
OPENSSL_NO_STDIO


440 
X509_STORE_lﬂd_loˇti⁄s
 (
X509_STORE
 *
˘x
,

441 c⁄° *
fûe
, c⁄° *
dú
);

442 
X509_STORE_£t_deÁu…_∑ths
(
X509_STORE
 *
˘x
);

445 
X509_STORE_CTX_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

446 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

447 
X509_STORE_CTX_£t_ex_d©a
(
X509_STORE_CTX
 *
˘x
,
idx
,*
d©a
);

448 * 
X509_STORE_CTX_gë_ex_d©a
(
X509_STORE_CTX
 *
˘x
,
idx
);

449 
X509_STORE_CTX_gë_îr‹
(
X509_STORE_CTX
 *
˘x
);

450 
X509_STORE_CTX_£t_îr‹
(
X509_STORE_CTX
 *
˘x
,
s
);

451 
X509_STORE_CTX_gë_îr‹_dïth
(
X509_STORE_CTX
 *
˘x
);

452 
X509
 * 
X509_STORE_CTX_gë_cuºít_˚π
(
X509_STORE_CTX
 *
˘x
);

453 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë_chaö
(
X509_STORE_CTX
 *
˘x
);

454 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë1_chaö
(
X509_STORE_CTX
 *
˘x
);

455 
X509_STORE_CTX_£t_˚π
(
X509_STORE_CTX
 *
c
,
X509
 *
x
);

456 
X509_STORE_CTX_£t_chaö
(
X509_STORE_CTX
 *
c
,
STACK_OF
(
X509
Ë*
sk
);

457 
X509_STORE_CTX_£t0_¸ls
(
X509_STORE_CTX
 *
c
,
STACK_OF
(
X509_CRL
Ë*
sk
);

458 
X509_STORE_CTX_£t_puΩo£
(
X509_STORE_CTX
 *
˘x
, 
puΩo£
);

459 
X509_STORE_CTX_£t_åu°
(
X509_STORE_CTX
 *
˘x
, 
åu°
);

460 
X509_STORE_CTX_puΩo£_öhîô
(
X509_STORE_CTX
 *
˘x
, 
def_puΩo£
,

461 
puΩo£
, 
åu°
);

462 
X509_STORE_CTX_£t_Êags
(
X509_STORE_CTX
 *
˘x
, 
Êags
);

463 
X509_STORE_CTX_£t_time
(
X509_STORE_CTX
 *
˘x
, 
Êags
,

464 
time_t
 
t
);

465 
X509_STORE_CTX_£t_vîify_cb
(
X509_STORE_CTX
 *
˘x
,

466 (*
vîify_cb
)(, 
X509_STORE_CTX
 *));

468 
X509_POLICY_TREE
 *
X509_STORE_CTX_gë0_pﬁicy_åì
(
X509_STORE_CTX
 *
˘x
);

469 
X509_STORE_CTX_gë_ex∂icô_pﬁicy
(
X509_STORE_CTX
 *
˘x
);

471 
X509_VERIFY_PARAM
 *
X509_STORE_CTX_gë0_∑øm
(
X509_STORE_CTX
 *
˘x
);

472 
X509_STORE_CTX_£t0_∑øm
(
X509_STORE_CTX
 *
˘x
, 
X509_VERIFY_PARAM
 *
∑øm
);

473 
X509_STORE_CTX_£t_deÁu…
(
X509_STORE_CTX
 *
˘x
, c⁄° *
«me
);

477 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_√w
();

478 
X509_VERIFY_PARAM_‰ì
(
X509_VERIFY_PARAM
 *
∑øm
);

479 
X509_VERIFY_PARAM_öhîô
(
X509_VERIFY_PARAM
 *
to
,

480 c⁄° 
X509_VERIFY_PARAM
 *
‰om
);

481 
X509_VERIFY_PARAM_£t1
(
X509_VERIFY_PARAM
 *
to
,

482 c⁄° 
X509_VERIFY_PARAM
 *
‰om
);

483 
X509_VERIFY_PARAM_£t1_«me
(
X509_VERIFY_PARAM
 *
∑øm
, c⁄° *
«me
);

484 
X509_VERIFY_PARAM_£t_Êags
(
X509_VERIFY_PARAM
 *
∑øm
, 
Êags
);

485 
X509_VERIFY_PARAM_˛ór_Êags
(
X509_VERIFY_PARAM
 *
∑øm
,

486 
Êags
);

487 
X509_VERIFY_PARAM_gë_Êags
(
X509_VERIFY_PARAM
 *
∑øm
);

488 
X509_VERIFY_PARAM_£t_puΩo£
(
X509_VERIFY_PARAM
 *
∑øm
, 
puΩo£
);

489 
X509_VERIFY_PARAM_£t_åu°
(
X509_VERIFY_PARAM
 *
∑øm
, 
åu°
);

490 
X509_VERIFY_PARAM_£t_dïth
(
X509_VERIFY_PARAM
 *
∑øm
, 
dïth
);

491 
X509_VERIFY_PARAM_£t_time
(
X509_VERIFY_PARAM
 *
∑øm
, 
time_t
 
t
);

492 
X509_VERIFY_PARAM_add0_pﬁicy
(
X509_VERIFY_PARAM
 *
∑øm
,

493 
ASN1_OBJECT
 *
pﬁicy
);

494 
X509_VERIFY_PARAM_£t1_pﬁicõs
(
X509_VERIFY_PARAM
 *
∑øm
,

495 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicõs
);

496 
X509_VERIFY_PARAM_gë_dïth
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

498 
X509_VERIFY_PARAM_add0_èbÀ
(
X509_VERIFY_PARAM
 *
∑øm
);

499 c⁄° 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_lookup
(c⁄° *
«me
);

500 
X509_VERIFY_PARAM_èbÀ_˛ónup
();

502 
X509_pﬁicy_check
(
X509_POLICY_TREE
 **
±ªe
, *
≥x∂icô_pﬁicy
,

503 
STACK_OF
(
X509
Ë*
˚πs
,

504 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicy_oids
,

505 
Êags
);

507 
X509_pﬁicy_åì_‰ì
(
X509_POLICY_TREE
 *
åì
);

509 
X509_pﬁicy_åì_Àvñ_cou¡
(c⁄° 
X509_POLICY_TREE
 *
åì
);

510 
X509_POLICY_LEVEL
 *

511 
X509_pﬁicy_åì_gë0_Àvñ
(c⁄° 
X509_POLICY_TREE
 *
åì
, 
i
);

513 
STACK_OF
(
X509_POLICY_NODE
) *

514 
X509_pﬁicy_åì_gë0_pﬁicõs
(c⁄° 
X509_POLICY_TREE
 *
åì
);

516 
STACK_OF
(
X509_POLICY_NODE
) *

517 
X509_pﬁicy_åì_gë0_u£r_pﬁicõs
(c⁄° 
X509_POLICY_TREE
 *
åì
);

519 
X509_pﬁicy_Àvñ_node_cou¡
(
X509_POLICY_LEVEL
 *
Àvñ
);

521 
X509_POLICY_NODE
 *
X509_pﬁicy_Àvñ_gë0_node
(
X509_POLICY_LEVEL
 *
Àvñ
, 
i
);

523 c⁄° 
ASN1_OBJECT
 *
X509_pﬁicy_node_gë0_pﬁicy
(c⁄° 
X509_POLICY_NODE
 *
node
);

525 
STACK_OF
(
POLICYQUALINFO
) *

526 
X509_pﬁicy_node_gë0_quÆifõrs
(c⁄° 
X509_POLICY_NODE
 *
node
);

527 c⁄° 
X509_POLICY_NODE
 *

528 
X509_pﬁicy_node_gë0_∑ª¡
(c⁄° 
X509_POLICY_NODE
 *
node
);

530 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509v3.h

58 #i‚de‡
HEADER_X509V3_H


59 
	#HEADER_X509V3_H


	)

61 
	~<›ís¶/bio.h
>

62 
	~<›ís¶/x509.h
>

63 
	~<›ís¶/c⁄f.h
>

65 #ifde‡
__˝lu•lus


70 
v3_ext_mëhod
;

71 
v3_ext_˘x
;

75 * (*
	tX509V3_EXT_NEW
)();

76 (*
X509V3_EXT_FREE
)(*);

77 * (*
	tX509V3_EXT_D2I
)(*, const ** , );

78 (*
X509V3_EXT_I2D
)(*, **);

79 
STACK_OF
(
	tCONF_VALUE
Ë* (*
	tX509V3_EXT_I2V
)(
	tv3_ext_mëhod
 *
	tmëhod
, *
	text
, 
	tSTACK_OF
(CONF_VALUEË*
	texéi°
);

80 * (*
	tX509V3_EXT_V2I
)(
	tv3_ext_mëhod
 *
	tmëhod
, 
	tv3_ext_˘x
 *
	t˘x
, 
	tSTACK_OF
(
	tCONF_VALUE
Ë*
	tvÆues
);

81 * (*
	tX509V3_EXT_I2S
)(
	tv3_ext_mëhod
 *
	tmëhod
, *
	text
);

82 * (*
	tX509V3_EXT_S2I
)(
	tv3_ext_mëhod
 *
	tmëhod
, 
	tv3_ext_˘x
 *
	t˘x
, c⁄° *
	t°r
);

83 (*
X509V3_EXT_I2R
)(
	tv3_ext_mëhod
 *
	tmëhod
, *
	text
, 
	tBIO
 *
	tout
, 
	tödít
);

84 * (*
	tX509V3_EXT_R2I
)(
	tv3_ext_mëhod
 *
	tmëhod
, 
	tv3_ext_˘x
 *
	t˘x
, c⁄° *
	t°r
);

88 
	sv3_ext_mëhod
 {

89 
ext_nid
;

90 
ext_Êags
;

92 
ASN1_ITEM_EXP
 *
ô
;

94 
X509V3_EXT_NEW
 
ext_√w
;

95 
X509V3_EXT_FREE
 
ext_‰ì
;

96 
X509V3_EXT_D2I
 
d2i
;

97 
X509V3_EXT_I2D
 
i2d
;

100 
X509V3_EXT_I2S
 
i2s
;

101 
X509V3_EXT_S2I
 
s2i
;

104 
X509V3_EXT_I2V
 
i2v
;

105 
X509V3_EXT_V2I
 
v2i
;

108 
X509V3_EXT_I2R
 
i2r
;

109 
X509V3_EXT_R2I
 
r2i
;

111 *
u§_d©a
;

114 
	sX509V3_CONF_METHOD_°
 {

115 * (*
gë_°rög
)(*
db
, *
£˘i⁄
, *
vÆue
);

116 
STACK_OF
(
CONF_VALUE
Ë* (*
gë_£˘i⁄
)(*
db
, *
£˘i⁄
);

117 (*
‰ì_°rög
)(*
db
, * 
°rög
);

118 (*
‰ì_£˘i⁄
)(*
db
, 
STACK_OF
(
CONF_VALUE
Ë*
£˘i⁄
);

119 } 
	tX509V3_CONF_METHOD
;

122 
	sv3_ext_˘x
 {

123 
	#CTX_TEST
 0x1

	)

124 
Êags
;

125 
X509
 *
issuî_˚π
;

126 
X509
 *
subje˘_˚π
;

127 
X509_REQ
 *
subje˘_ªq
;

128 
X509_CRL
 *
¸l
;

129 
X509V3_CONF_METHOD
 *
db_mëh
;

130 *
db
;

134 
v3_ext_mëhod
 
	tX509V3_EXT_METHOD
;

136 
DECLARE_STACK_OF
(
X509V3_EXT_METHOD
)

139 
	#X509V3_EXT_DYNAMIC
 0x1

	)

140 
	#X509V3_EXT_CTX_DEP
 0x2

	)

141 
	#X509V3_EXT_MULTILINE
 0x4

	)

143 
BIT_STRING_BITNAME
 
	tENUMERATED_NAMES
;

145 
	sBASIC_CONSTRAINTS_°
 {

146 
ˇ
;

147 
ASN1_INTEGER
 *
∑thÀn
;

148 } 
	tBASIC_CONSTRAINTS
;

151 
	sPKEY_USAGE_PERIOD_°
 {

152 
ASN1_GENERALIZEDTIME
 *
nŸBef‹e
;

153 
ASN1_GENERALIZEDTIME
 *
nŸA·î
;

154 } 
	tPKEY_USAGE_PERIOD
;

156 
	sŸhîName_°
 {

157 
ASN1_OBJECT
 *
ty≥_id
;

158 
ASN1_TYPE
 *
vÆue
;

159 } 
	tOTHERNAME
;

161 
	sEDIP¨tyName_°
 {

162 
ASN1_STRING
 *
«meAssig√r
;

163 
ASN1_STRING
 *
∑πyName
;

164 } 
	tEDIPARTYNAME
;

166 
	sGENERAL_NAME_°
 {

168 
	#GEN_OTHERNAME
 0

	)

169 
	#GEN_EMAIL
 1

	)

170 
	#GEN_DNS
 2

	)

171 
	#GEN_X400
 3

	)

172 
	#GEN_DIRNAME
 4

	)

173 
	#GEN_EDIPARTY
 5

	)

174 
	#GEN_URI
 6

	)

175 
	#GEN_IPADD
 7

	)

176 
	#GEN_RID
 8

	)

178 
ty≥
;

180 *
±r
;

181 
OTHERNAME
 *
ŸhîName
;

182 
ASN1_IA5STRING
 *
rfc822Name
;

183 
ASN1_IA5STRING
 *
dNSName
;

184 
ASN1_TYPE
 *
x400Addªss
;

185 
X509_NAME
 *
dúe˘‹yName
;

186 
EDIPARTYNAME
 *
ediP¨tyName
;

187 
ASN1_IA5STRING
 *
unif‹mResour˚Idítifõr
;

188 
ASN1_OCTET_STRING
 *
iPAddªss
;

189 
ASN1_OBJECT
 *
ªgi°îedID
;

192 
ASN1_OCTET_STRING
 *
ù
;

193 
X509_NAME
 *
dún
;

194 
ASN1_IA5STRING
 *
ü5
;

195 
ASN1_OBJECT
 *
rid
;

196 
ASN1_TYPE
 *
Ÿhî
;

197 } 
d
;

198 } 
	tGENERAL_NAME
;

200 
STACK_OF
(
	tGENERAL_NAME
Ë
	tGENERAL_NAMES
;

202 
	sACCESS_DESCRIPTION_°
 {

203 
ASN1_OBJECT
 *
mëhod
;

204 
GENERAL_NAME
 *
loˇti⁄
;

205 } 
	tACCESS_DESCRIPTION
;

207 
STACK_OF
(
	tACCESS_DESCRIPTION
Ë
	tAUTHORITY_INFO_ACCESS
;

209 
STACK_OF
(
	tASN1_OBJECT
Ë
	tEXTENDED_KEY_USAGE
;

211 
DECLARE_STACK_OF
(
GENERAL_NAME
)

212 
DECLARE_ASN1_SET_OF
(
GENERAL_NAME
)

214 
DECLARE_STACK_OF
(
ACCESS_DESCRIPTION
)

215 
DECLARE_ASN1_SET_OF
(
ACCESS_DESCRIPTION
)

217 
	sDIST_POINT_NAME_°
 {

218 
ty≥
;

220 
GENERAL_NAMES
 *
fuŒ«me
;

221 
STACK_OF
(
X509_NAME_ENTRY
Ë*
ªœtivíame
;

222 } 
«me
;

223 } 
	tDIST_POINT_NAME
;

225 
	sDIST_POINT_°
 {

226 
DIST_POINT_NAME
 *
di°poöt
;

227 
ASN1_BIT_STRING
 *
ªas⁄s
;

228 
GENERAL_NAMES
 *
CRLissuî
;

229 } 
	tDIST_POINT
;

231 
STACK_OF
(
	tDIST_POINT
Ë
	tCRL_DIST_POINTS
;

233 
DECLARE_STACK_OF
(
DIST_POINT
)

234 
DECLARE_ASN1_SET_OF
(
DIST_POINT
)

236 
	sAUTHORITY_KEYID_°
 {

237 
ASN1_OCTET_STRING
 *
keyid
;

238 
GENERAL_NAMES
 *
issuî
;

239 
ASN1_INTEGER
 *
£rül
;

240 } 
	tAUTHORITY_KEYID
;

244 
	sSXNET_ID_°
 {

245 
ASN1_INTEGER
 *
z⁄e
;

246 
ASN1_OCTET_STRING
 *
u£r
;

247 } 
	tSXNETID
;

249 
DECLARE_STACK_OF
(
SXNETID
)

250 
DECLARE_ASN1_SET_OF
(
SXNETID
)

252 
	sSXNET_°
 {

253 
ASN1_INTEGER
 *
vîsi⁄
;

254 
STACK_OF
(
SXNETID
Ë*
ids
;

255 } 
	tSXNET
;

257 
	sNOTICEREF_°
 {

258 
ASN1_STRING
 *
‹g™iz©i⁄
;

259 
STACK_OF
(
ASN1_INTEGER
Ë*
nŸi˚nos
;

260 } 
	tNOTICEREF
;

262 
	sUSERNOTICE_°
 {

263 
NOTICEREF
 *
nŸi˚ªf
;

264 
ASN1_STRING
 *
ex±ext
;

265 } 
	tUSERNOTICE
;

267 
	sPOLICYQUALINFO_°
 {

268 
ASN1_OBJECT
 *
pquÆid
;

270 
ASN1_IA5STRING
 *
˝suri
;

271 
USERNOTICE
 *
u£∫Ÿi˚
;

272 
ASN1_TYPE
 *
Ÿhî
;

273 } 
d
;

274 } 
	tPOLICYQUALINFO
;

276 
DECLARE_STACK_OF
(
POLICYQUALINFO
)

277 
DECLARE_ASN1_SET_OF
(
POLICYQUALINFO
)

279 
	sPOLICYINFO_°
 {

280 
ASN1_OBJECT
 *
pﬁicyid
;

281 
STACK_OF
(
POLICYQUALINFO
Ë*
quÆifõrs
;

282 } 
	tPOLICYINFO
;

284 
STACK_OF
(
	tPOLICYINFO
Ë
	tCERTIFICATEPOLICIES
;

286 
DECLARE_STACK_OF
(
POLICYINFO
)

287 
DECLARE_ASN1_SET_OF
(
POLICYINFO
)

289 
	sPOLICY_MAPPING_°
 {

290 
ASN1_OBJECT
 *
issuîDomaöPﬁicy
;

291 
ASN1_OBJECT
 *
subje˘DomaöPﬁicy
;

292 } 
	tPOLICY_MAPPING
;

294 
DECLARE_STACK_OF
(
POLICY_MAPPING
)

296 
STACK_OF
(
	tPOLICY_MAPPING
Ë
	tPOLICY_MAPPINGS
;

298 
	sGENERAL_SUBTREE_°
 {

299 
GENERAL_NAME
 *
ba£
;

300 
ASN1_INTEGER
 *
möimum
;

301 
ASN1_INTEGER
 *
maximum
;

302 } 
	tGENERAL_SUBTREE
;

304 
DECLARE_STACK_OF
(
GENERAL_SUBTREE
)

306 
	sNAME_CONSTRAINTS_°
 {

307 
STACK_OF
(
GENERAL_SUBTREE
Ë*
≥rmôãdSubåìs
;

308 
STACK_OF
(
GENERAL_SUBTREE
Ë*
ex˛udedSubåìs
;

309 } 
	tNAME_CONSTRAINTS
;

311 
	sPOLICY_CONSTRAINTS_°
 {

312 
ASN1_INTEGER
 *
ªquúeEx∂icôPﬁicy
;

313 
ASN1_INTEGER
 *
öhibôPﬁicyM≠pög
;

314 } 
	tPOLICY_CONSTRAINTS
;

317 
	sPROXY_POLICY_°


319 
ASN1_OBJECT
 *
pﬁicyL™guage
;

320 
ASN1_OCTET_STRING
 *
pﬁicy
;

321 } 
	tPROXY_POLICY
;

323 
	sPROXY_CERT_INFO_EXTENSION_°


325 
ASN1_INTEGER
 *
pcP©hLígthC⁄°øöt
;

326 
PROXY_POLICY
 *
¥oxyPﬁicy
;

327 } 
	tPROXY_CERT_INFO_EXTENSION
;

329 
DECLARE_ASN1_FUNCTIONS
(
PROXY_POLICY
)

330 
DECLARE_ASN1_FUNCTIONS
(
PROXY_CERT_INFO_EXTENSION
)

333 
	#X509V3_c⁄f_îr
(
vÆ
Ë
	`ERR_add_îr‹_d©a
(6, "£˘i⁄:", vÆ->
£˘i⁄
, \

334 ",«me:", 
vÆ
->
«me
, ",vÆue:", vÆ->
vÆue
);

	)

336 
	#X509V3_£t_˘x_ã°
(
˘x
) \

337 
	`X509V3_£t_˘x
(
˘x
, 
NULL
, NULL, NULL, NULL, 
CTX_TEST
)

	)

338 
	#X509V3_£t_˘x_nodb
(
˘x
Ë(˘x)->
db
 = 
NULL
;

	)

340 
	#EXT_BITSTRING
(
nid
, 
èbÀ
Ë{Çid, 0, 
	`ASN1_ITEM_ªf
(
ASN1_BIT_STRING
), \

343 (
X509V3_EXT_I2V
)
i2v_ASN1_BIT_STRING
, \

344 (
X509V3_EXT_V2I
)
v2i_ASN1_BIT_STRING
, \

345 
NULL
, NULL, \

346 
èbÀ
}

	)

348 
	#EXT_IA5STRING
(
nid
Ë{Çid, 0, 
	`ASN1_ITEM_ªf
(
ASN1_IA5STRING
), \

350 (
X509V3_EXT_I2S
)
i2s_ASN1_IA5STRING
, \

351 (
X509V3_EXT_S2I
)
s2i_ASN1_IA5STRING
, \

353 
NULL
}

	)

355 
	#EXT_END
 { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	)

360 
	#EXFLAG_BCONS
 0x1

	)

361 
	#EXFLAG_KUSAGE
 0x2

	)

362 
	#EXFLAG_XKUSAGE
 0x4

	)

363 
	#EXFLAG_NSCERT
 0x8

	)

365 
	#EXFLAG_CA
 0x10

	)

367 
	#EXFLAG_SI
 0x20

	)

368 
	#EXFLAG_SS
 0x20

	)

369 
	#EXFLAG_V1
 0x40

	)

370 
	#EXFLAG_INVALID
 0x80

	)

371 
	#EXFLAG_SET
 0x100

	)

372 
	#EXFLAG_CRITICAL
 0x200

	)

373 
	#EXFLAG_PROXY
 0x400

	)

375 
	#EXFLAG_INVALID_POLICY
 0x800

	)

377 
	#KU_DIGITAL_SIGNATURE
 0x0080

	)

378 
	#KU_NON_REPUDIATION
 0x0040

	)

379 
	#KU_KEY_ENCIPHERMENT
 0x0020

	)

380 
	#KU_DATA_ENCIPHERMENT
 0x0010

	)

381 
	#KU_KEY_AGREEMENT
 0x0008

	)

382 
	#KU_KEY_CERT_SIGN
 0x0004

	)

383 
	#KU_CRL_SIGN
 0x0002

	)

384 
	#KU_ENCIPHER_ONLY
 0x0001

	)

385 
	#KU_DECIPHER_ONLY
 0x8000

	)

387 
	#NS_SSL_CLIENT
 0x80

	)

388 
	#NS_SSL_SERVER
 0x40

	)

389 
	#NS_SMIME
 0x20

	)

390 
	#NS_OBJSIGN
 0x10

	)

391 
	#NS_SSL_CA
 0x04

	)

392 
	#NS_SMIME_CA
 0x02

	)

393 
	#NS_OBJSIGN_CA
 0x01

	)

394 
	#NS_ANY_CA
 (
NS_SSL_CA
|
NS_SMIME_CA
|
NS_OBJSIGN_CA
)

	)

396 
	#XKU_SSL_SERVER
 0x1

	)

397 
	#XKU_SSL_CLIENT
 0x2

	)

398 
	#XKU_SMIME
 0x4

	)

399 
	#XKU_CODE_SIGN
 0x8

	)

400 
	#XKU_SGC
 0x10

	)

401 
	#XKU_OCSP_SIGN
 0x20

	)

402 
	#XKU_TIMESTAMP
 0x40

	)

403 
	#XKU_DVCS
 0x80

	)

405 
	#X509_PURPOSE_DYNAMIC
 0x1

	)

406 
	#X509_PURPOSE_DYNAMIC_NAME
 0x2

	)

408 
	sx509_puΩo£_°
 {

409 
puΩo£
;

410 
åu°
;

411 
Êags
;

412 (*
check_puΩo£
)(c⁄° 
x509_puΩo£_°
 *,

413 c⁄° 
X509
 *, );

414 *
«me
;

415 *
¢ame
;

416 *
u§_d©a
;

417 } 
	tX509_PURPOSE
;

419 
	#X509_PURPOSE_SSL_CLIENT
 1

	)

420 
	#X509_PURPOSE_SSL_SERVER
 2

	)

421 
	#X509_PURPOSE_NS_SSL_SERVER
 3

	)

422 
	#X509_PURPOSE_SMIME_SIGN
 4

	)

423 
	#X509_PURPOSE_SMIME_ENCRYPT
 5

	)

424 
	#X509_PURPOSE_CRL_SIGN
 6

	)

425 
	#X509_PURPOSE_ANY
 7

	)

426 
	#X509_PURPOSE_OCSP_HELPER
 8

	)

428 
	#X509_PURPOSE_MIN
 1

	)

429 
	#X509_PURPOSE_MAX
 8

	)

433 
	#X509V3_EXT_UNKNOWN_MASK
 (0xfL << 16)

	)

435 
	#X509V3_EXT_DEFAULT
 0

	)

437 
	#X509V3_EXT_ERROR_UNKNOWN
 (1L << 16)

	)

439 
	#X509V3_EXT_PARSE_UNKNOWN
 (2L << 16)

	)

441 
	#X509V3_EXT_DUMP_UNKNOWN
 (3L << 16)

	)

445 
	#X509V3_ADD_OP_MASK
 0xfL

	)

446 
	#X509V3_ADD_DEFAULT
 0L

	)

447 
	#X509V3_ADD_APPEND
 1L

	)

448 
	#X509V3_ADD_REPLACE
 2L

	)

449 
	#X509V3_ADD_REPLACE_EXISTING
 3L

	)

450 
	#X509V3_ADD_KEEP_EXISTING
 4L

	)

451 
	#X509V3_ADD_DELETE
 5L

	)

452 
	#X509V3_ADD_SILENT
 0x10

	)

454 
DECLARE_STACK_OF
(
X509_PURPOSE
)

456 
DECLARE_ASN1_FUNCTIONS
(
BASIC_CONSTRAINTS
)

458 
DECLARE_ASN1_FUNCTIONS
(
SXNET
)

459 
DECLARE_ASN1_FUNCTIONS
(
SXNETID
)

461 
SXNET_add_id_asc
(
SXNET
 **
psx
, *
z⁄e
, *
u£r
, 
u£æí
);

462 
SXNET_add_id_ul⁄g
(
SXNET
 **
psx
, 
lz⁄e
, *
u£r
, 
u£æí
);

463 
SXNET_add_id_INTEGER
(
SXNET
 **
psx
, 
ASN1_INTEGER
 *
iz⁄e
, *
u£r
, 
u£æí
);

465 
ASN1_OCTET_STRING
 *
SXNET_gë_id_asc
(
SXNET
 *
sx
, *
z⁄e
);

466 
ASN1_OCTET_STRING
 *
SXNET_gë_id_ul⁄g
(
SXNET
 *
sx
, 
lz⁄e
);

467 
ASN1_OCTET_STRING
 *
SXNET_gë_id_INTEGER
(
SXNET
 *
sx
, 
ASN1_INTEGER
 *
z⁄e
);

469 
DECLARE_ASN1_FUNCTIONS
(
AUTHORITY_KEYID
)

471 
DECLARE_ASN1_FUNCTIONS
(
PKEY_USAGE_PERIOD
)

473 
DECLARE_ASN1_FUNCTIONS
(
GENERAL_NAME
)

476 
ASN1_BIT_STRING
 *
v2i_ASN1_BIT_STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

477 
X509V3_CTX
 *
˘x
, 
STACK_OF
(
CONF_VALUE
Ë*
nvÆ
);

478 
STACK_OF
(
CONF_VALUE
Ë*
i2v_ASN1_BIT_STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

479 
ASN1_BIT_STRING
 *
bôs
,

480 
STACK_OF
(
CONF_VALUE
Ë*
exéi°
);

482 
STACK_OF
(
CONF_VALUE
Ë*
i2v_GENERAL_NAME
(
X509V3_EXT_METHOD
 *
mëhod
, 
GENERAL_NAME
 *
gí
, STACK_OF(CONF_VALUEË*
ªt
);

483 
GENERAL_NAME_¥öt
(
BIO
 *
out
, 
GENERAL_NAME
 *
gí
);

485 
DECLARE_ASN1_FUNCTIONS
(
GENERAL_NAMES
)

487 
STACK_OF
(
CONF_VALUE
Ë*
i2v_GENERAL_NAMES
(
X509V3_EXT_METHOD
 *
mëhod
,

488 
GENERAL_NAMES
 *
gí
, 
STACK_OF
(
CONF_VALUE
Ë*
exéi°
);

489 
GENERAL_NAMES
 *
v2i_GENERAL_NAMES
(
X509V3_EXT_METHOD
 *
mëhod
,

490 
X509V3_CTX
 *
˘x
, 
STACK_OF
(
CONF_VALUE
Ë*
nvÆ
);

492 
DECLARE_ASN1_FUNCTIONS
(
OTHERNAME
)

493 
DECLARE_ASN1_FUNCTIONS
(
EDIPARTYNAME
)

495 *
i2s_ASN1_OCTET_STRING
(
X509V3_EXT_METHOD
 *
mëhod
, 
ASN1_OCTET_STRING
 *
ü5
);

496 
ASN1_OCTET_STRING
 *
s2i_ASN1_OCTET_STRING
(
X509V3_EXT_METHOD
 *
mëhod
, 
X509V3_CTX
 *
˘x
, *
°r
);

498 
DECLARE_ASN1_FUNCTIONS
(
EXTENDED_KEY_USAGE
)

499 
i2a_ACCESS_DESCRIPTION
(
BIO
 *
bp
, 
ACCESS_DESCRIPTION
* 
a
);

501 
DECLARE_ASN1_FUNCTIONS
(
CERTIFICATEPOLICIES
)

502 
DECLARE_ASN1_FUNCTIONS
(
POLICYINFO
)

503 
DECLARE_ASN1_FUNCTIONS
(
POLICYQUALINFO
)

504 
DECLARE_ASN1_FUNCTIONS
(
USERNOTICE
)

505 
DECLARE_ASN1_FUNCTIONS
(
NOTICEREF
)

507 
DECLARE_ASN1_FUNCTIONS
(
CRL_DIST_POINTS
)

508 
DECLARE_ASN1_FUNCTIONS
(
DIST_POINT
)

509 
DECLARE_ASN1_FUNCTIONS
(
DIST_POINT_NAME
)

511 
DECLARE_ASN1_FUNCTIONS
(
ACCESS_DESCRIPTION
)

512 
DECLARE_ASN1_FUNCTIONS
(
AUTHORITY_INFO_ACCESS
)

514 
DECLARE_ASN1_ITEM
(
POLICY_MAPPING
)

515 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
POLICY_MAPPING
)

516 
DECLARE_ASN1_ITEM
(
POLICY_MAPPINGS
)

518 
DECLARE_ASN1_ITEM
(
GENERAL_SUBTREE
)

519 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
GENERAL_SUBTREE
)

521 
DECLARE_ASN1_ITEM
(
NAME_CONSTRAINTS
)

522 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
NAME_CONSTRAINTS
)

524 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
POLICY_CONSTRAINTS
)

525 
DECLARE_ASN1_ITEM
(
POLICY_CONSTRAINTS
)

527 #ifde‡
HEADER_CONF_H


528 
GENERAL_NAME
 *
v2i_GENERAL_NAME
(
X509V3_EXT_METHOD
 *
mëhod
, 
X509V3_CTX
 *
˘x
,

529 
CONF_VALUE
 *
˙f
);

530 
GENERAL_NAME
 *
v2i_GENERAL_NAME_ex
(GENERAL_NAME *
out
, 
X509V3_EXT_METHOD
 *
mëhod
,

531 
X509V3_CTX
 *
˘x
, 
CONF_VALUE
 *
˙f
, 
is_nc
);

532 
X509V3_c⁄f_‰ì
(
CONF_VALUE
 *
vÆ
);

534 
X509_EXTENSION
 *
X509V3_EXT_nc⁄f_nid
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, 
ext_nid
, *
vÆue
);

535 
X509_EXTENSION
 *
X509V3_EXT_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
«me
, *
vÆue
);

536 
X509V3_EXT_add_nc⁄f_sk
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
, 
STACK_OF
(
X509_EXTENSION
Ë**
sk
);

537 
X509V3_EXT_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
, 
X509
 *
˚π
);

538 
X509V3_EXT_REQ_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
, 
X509_REQ
 *
ªq
);

539 
X509V3_EXT_CRL_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
, 
X509_CRL
 *
¸l
);

541 
X509_EXTENSION
 *
X509V3_EXT_c⁄f_nid
(
LHASH
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, 
ext_nid
, *
vÆue
);

542 
X509_EXTENSION
 *
X509V3_EXT_c⁄f
(
LHASH
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
«me
, *
vÆue
);

543 
X509V3_EXT_add_c⁄f
(
LHASH
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
, 
X509
 *
˚π
);

544 
X509V3_EXT_REQ_add_c⁄f
(
LHASH
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
, 
X509_REQ
 *
ªq
);

545 
X509V3_EXT_CRL_add_c⁄f
(
LHASH
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
, 
X509_CRL
 *
¸l
);

547 
X509V3_add_vÆue_boﬁ_nf
(*
«me
, 
a¢1_boﬁ
,

548 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

549 
X509V3_gë_vÆue_boﬁ
(
CONF_VALUE
 *
vÆue
, *
a¢1_boﬁ
);

550 
X509V3_gë_vÆue_öt
(
CONF_VALUE
 *
vÆue
, 
ASN1_INTEGER
 **
aöt
);

551 
X509V3_£t_nc⁄f
(
X509V3_CTX
 *
˘x
, 
CONF
 *
c⁄f
);

552 
X509V3_£t_c⁄f_lhash
(
X509V3_CTX
 *
˘x
, 
LHASH
 *
lhash
);

555 * 
X509V3_gë_°rög
(
X509V3_CTX
 *
˘x
, *
«me
, *
£˘i⁄
);

556 
STACK_OF
(
CONF_VALUE
Ë* 
X509V3_gë_£˘i⁄
(
X509V3_CTX
 *
˘x
, *
£˘i⁄
);

557 
X509V3_°rög_‰ì
(
X509V3_CTX
 *
˘x
, *
°r
);

558 
X509V3_£˘i⁄_‰ì
–
X509V3_CTX
 *
˘x
, 
STACK_OF
(
CONF_VALUE
Ë*
£˘i⁄
);

559 
X509V3_£t_˘x
(
X509V3_CTX
 *
˘x
, 
X509
 *
issuî
, X509 *
subje˘
,

560 
X509_REQ
 *
ªq
, 
X509_CRL
 *
¸l
, 
Êags
);

562 
X509V3_add_vÆue
(c⁄° *
«me
, c⁄° *
vÆue
,

563 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

564 
X509V3_add_vÆue_uch¨
(c⁄° *
«me
, c⁄° *
vÆue
,

565 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

566 
X509V3_add_vÆue_boﬁ
(c⁄° *
«me
, 
a¢1_boﬁ
,

567 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

568 
X509V3_add_vÆue_öt
(c⁄° *
«me
, 
ASN1_INTEGER
 *
aöt
,

569 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

570 * 
i2s_ASN1_INTEGER
(
X509V3_EXT_METHOD
 *
mëh
, 
ASN1_INTEGER
 *
aöt
);

571 
ASN1_INTEGER
 * 
s2i_ASN1_INTEGER
(
X509V3_EXT_METHOD
 *
mëh
, *
vÆue
);

572 * 
i2s_ASN1_ENUMERATED
(
X509V3_EXT_METHOD
 *
mëh
, 
ASN1_ENUMERATED
 *
aöt
);

573 * 
i2s_ASN1_ENUMERATED_TABLE
(
X509V3_EXT_METHOD
 *
mëh
, 
ASN1_ENUMERATED
 *
aöt
);

574 
X509V3_EXT_add
(
X509V3_EXT_METHOD
 *
ext
);

575 
X509V3_EXT_add_li°
(
X509V3_EXT_METHOD
 *
exéi°
);

576 
X509V3_EXT_add_Æüs
(
nid_to
, 
nid_‰om
);

577 
X509V3_EXT_˛ónup
();

579 
X509V3_EXT_METHOD
 *
X509V3_EXT_gë
(
X509_EXTENSION
 *
ext
);

580 
X509V3_EXT_METHOD
 *
X509V3_EXT_gë_nid
(
nid
);

581 
X509V3_add_°™d¨d_exãnsi⁄s
();

582 
STACK_OF
(
CONF_VALUE
Ë*
X509V3_∑r£_li°
(c⁄° *
löe
);

583 *
X509V3_EXT_d2i
(
X509_EXTENSION
 *
ext
);

584 *
X509V3_gë_d2i
(
STACK_OF
(
X509_EXTENSION
Ë*
x
, 
nid
, *
¸ô
, *
idx
);

587 
X509_EXTENSION
 *
X509V3_EXT_i2d
(
ext_nid
, 
¸ô
, *
ext_°ruc
);

588 
X509V3_add1_i2d
(
STACK_OF
(
X509_EXTENSION
Ë**
x
, 
nid
, *
vÆue
, 
¸ô
, 
Êags
);

590 *
hex_to_°rög
(*
buf„r
, 
Àn
);

591 *
°rög_to_hex
(*
°r
, *
Àn
);

592 
«me_cmp
(c⁄° *
«me
, c⁄° *
cmp
);

594 
X509V3_EXT_vÆ_¥n
(
BIO
 *
out
, 
STACK_OF
(
CONF_VALUE
Ë*
vÆ
, 
ödít
,

595 
ml
);

596 
X509V3_EXT_¥öt
(
BIO
 *
out
, 
X509_EXTENSION
 *
ext
, 
Êag
, 
ödít
);

597 
X509V3_EXT_¥öt_Â
(
FILE
 *
out
, 
X509_EXTENSION
 *
ext
, 
Êag
, 
ödít
);

599 
X509V3_exãnsi⁄s_¥öt
(
BIO
 *
out
, *
tôÀ
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
, 
Êag
, 
ödít
);

601 
X509_check_ˇ
(
X509
 *
x
);

602 
X509_check_puΩo£
(
X509
 *
x
, 
id
, 
ˇ
);

603 
X509_suµ‹ãd_exãnsi⁄
(
X509_EXTENSION
 *
ex
);

604 
X509_PURPOSE_£t
(*
p
, 
puΩo£
);

605 
X509_check_issued
(
X509
 *
issuî
, X509 *
subje˘
);

606 
X509_PURPOSE_gë_cou¡
();

607 
X509_PURPOSE
 * 
X509_PURPOSE_gë0
(
idx
);

608 
X509_PURPOSE_gë_by_¢ame
(*
¢ame
);

609 
X509_PURPOSE_gë_by_id
(
id
);

610 
X509_PURPOSE_add
(
id
, 
åu°
, 
Êags
,

611 (*
ck
)(c⁄° 
X509_PURPOSE
 *, c⁄° 
X509
 *, ),

612 *
«me
, *
¢ame
, *
¨g
);

613 *
X509_PURPOSE_gë0_«me
(
X509_PURPOSE
 *
xp
);

614 *
X509_PURPOSE_gë0_¢ame
(
X509_PURPOSE
 *
xp
);

615 
X509_PURPOSE_gë_åu°
(
X509_PURPOSE
 *
xp
);

616 
X509_PURPOSE_˛ónup
();

617 
X509_PURPOSE_gë_id
(
X509_PURPOSE
 *);

619 
STACK
 *
X509_gë1_emaû
(
X509
 *
x
);

620 
STACK
 *
X509_REQ_gë1_emaû
(
X509_REQ
 *
x
);

621 
X509_emaû_‰ì
(
STACK
 *
sk
);

622 
STACK
 *
X509_gë1_oc•
(
X509
 *
x
);

624 
ASN1_OCTET_STRING
 *
a2i_IPADDRESS
(c⁄° *
ùasc
);

625 
ASN1_OCTET_STRING
 *
a2i_IPADDRESS_NC
(c⁄° *
ùasc
);

626 
a2i_ùadd
(*
ùout
, c⁄° *
ùasc
);

627 
X509V3_NAME_‰om_£˘i⁄
(
X509_NAME
 *
nm
, 
STACK_OF
(
CONF_VALUE
)*
dn_sk
,

628 
chty≥
);

630 
X509_POLICY_NODE_¥öt
(
BIO
 *
out
, 
X509_POLICY_NODE
 *
node
, 
ödít
);

632 #i‚de‡
OPENSSL_NO_RFC3779


634 
	sASR™ge_°
 {

635 
ASN1_INTEGER
 *
mö
, *
max
;

636 } 
	tASR™ge
;

638 
	#ASIdOrR™ge_id
 0

	)

639 
	#ASIdOrR™ge_ønge
 1

	)

641 
	sASIdOrR™ge_°
 {

642 
ty≥
;

644 
ASN1_INTEGER
 *
id
;

645 
ASR™ge
 *
ønge
;

646 } 
u
;

647 } 
	tASIdOrR™ge
;

649 
STACK_OF
(
	tASIdOrR™ge
Ë
	tASIdOrR™ges
;

650 
DECLARE_STACK_OF
(
ASIdOrR™ge
)

652 
	#ASIdítifõrChoi˚_öhîô
 0

	)

653 
	#ASIdítifõrChoi˚_asIdsOrR™ges
 1

	)

655 
	sASIdítifõrChoi˚_°
 {

656 
ty≥
;

658 
ASN1_NULL
 *
öhîô
;

659 
ASIdOrR™ges
 *
asIdsOrR™ges
;

660 } 
u
;

661 } 
	tASIdítifõrChoi˚
;

663 
	sASIdítifõrs_°
 {

664 
ASIdítifõrChoi˚
 *
a¢um
, *
rdi
;

665 } 
	tASIdítifõrs
;

667 
DECLARE_ASN1_FUNCTIONS
(
ASR™ge
)

668 
DECLARE_ASN1_FUNCTIONS
(
ASIdOrR™ge
)

669 
DECLARE_ASN1_FUNCTIONS
(
ASIdítifõrChoi˚
)

670 
DECLARE_ASN1_FUNCTIONS
(
ASIdítifõrs
)

673 
	sIPAddªssR™ge_°
 {

674 
ASN1_BIT_STRING
 *
mö
, *
max
;

675 } 
	tIPAddªssR™ge
;

677 
	#IPAddªssOrR™ge_addªssPªfix
 0

	)

678 
	#IPAddªssOrR™ge_addªssR™ge
 1

	)

680 
	sIPAddªssOrR™ge_°
 {

681 
ty≥
;

683 
ASN1_BIT_STRING
 *
addªssPªfix
;

684 
IPAddªssR™ge
 *
addªssR™ge
;

685 } 
u
;

686 } 
	tIPAddªssOrR™ge
;

688 
STACK_OF
(
	tIPAddªssOrR™ge
Ë
	tIPAddªssOrR™ges
;

689 
DECLARE_STACK_OF
(
IPAddªssOrR™ge
)

691 
	#IPAddªssChoi˚_öhîô
 0

	)

692 
	#IPAddªssChoi˚_addªs£sOrR™ges
 1

	)

694 
	sIPAddªssChoi˚_°
 {

695 
ty≥
;

697 
ASN1_NULL
 *
öhîô
;

698 
IPAddªssOrR™ges
 *
addªs£sOrR™ges
;

699 } 
u
;

700 } 
	tIPAddªssChoi˚
;

702 
	sIPAddªssFamûy_°
 {

703 
ASN1_OCTET_STRING
 *
addªssFamûy
;

704 
IPAddªssChoi˚
 *
ùAddªssChoi˚
;

705 } 
	tIPAddªssFamûy
;

707 
STACK_OF
(
	tIPAddªssFamûy
Ë
	tIPAddrBlocks
;

708 
DECLARE_STACK_OF
(
IPAddªssFamûy
)

710 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssR™ge
)

711 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssOrR™ge
)

712 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssChoi˚
)

713 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssFamûy
)

718 
	#V3_ASID_ASNUM
 0

	)

719 
	#V3_ASID_RDI
 1

	)

727 
	#IANA_AFI_IPV4
 1

	)

728 
	#IANA_AFI_IPV6
 2

	)

735 
v3_asid_add_öhîô
(
ASIdítifõrs
 *
asid
, 
which
);

736 
v3_asid_add_id_‹_ønge
(
ASIdítifõrs
 *
asid
, 
which
,

737 
ASN1_INTEGER
 *
mö
, ASN1_INTEGER *
max
);

738 
v3_addr_add_öhîô
(
IPAddrBlocks
 *
addr
,

739 c⁄° 
afi
, c⁄° *
ßfi
);

740 
v3_addr_add_¥efix
(
IPAddrBlocks
 *
addr
,

741 c⁄° 
afi
, c⁄° *
ßfi
,

742 *
a
, c⁄° 
¥efixÀn
);

743 
v3_addr_add_ønge
(
IPAddrBlocks
 *
addr
,

744 c⁄° 
afi
, c⁄° *
ßfi
,

745 *
mö
, *
max
);

746 
v3_addr_gë_afi
(c⁄° 
IPAddªssFamûy
 *
f
);

747 
v3_addr_gë_ønge
(
IPAddªssOrR™ge
 *
a‹
, c⁄° 
afi
,

748 *
mö
, *
max
,

749 c⁄° 
Àngth
);

754 
v3_asid_is_ˇn⁄iˇl
(
ASIdítifõrs
 *
asid
);

755 
v3_addr_is_ˇn⁄iˇl
(
IPAddrBlocks
 *
addr
);

756 
v3_asid_ˇn⁄ize
(
ASIdítifõrs
 *
asid
);

757 
v3_addr_ˇn⁄ize
(
IPAddrBlocks
 *
addr
);

762 
v3_asid_öhîôs
(
ASIdítifõrs
 *
asid
);

763 
v3_addr_öhîôs
(
IPAddrBlocks
 *
addr
);

764 
v3_asid_sub£t
(
ASIdítifõrs
 *
a
, ASIdítifõr†*
b
);

765 
v3_addr_sub£t
(
IPAddrBlocks
 *
a
, IPAddrBlock†*
b
);

770 
v3_asid_vÆid©e_∑th
(
X509_STORE_CTX
 *);

771 
v3_addr_vÆid©e_∑th
(
X509_STORE_CTX
 *);

772 
v3_asid_vÆid©e_ªsour˚_£t
(
STACK_OF
(
X509
Ë*
chaö
,

773 
ASIdítifõrs
 *
ext
,

774 
Ælow_öhîô™˚
);

775 
v3_addr_vÆid©e_ªsour˚_£t
(
STACK_OF
(
X509
Ë*
chaö
,

776 
IPAddrBlocks
 *
ext
,

777 
Ælow_öhîô™˚
);

785 
ERR_lﬂd_X509V3_°rögs
();

790 
	#X509V3_F_ASIDENTIFIERCHOICE_CANONIZE
 156

	)

791 
	#X509V3_F_ASIDENTIFIERCHOICE_IS_CANONICAL
 157

	)

792 
	#X509V3_F_COPY_EMAIL
 122

	)

793 
	#X509V3_F_COPY_ISSUER
 123

	)

794 
	#X509V3_F_DO_DIRNAME
 144

	)

795 
	#X509V3_F_DO_EXT_CONF
 124

	)

796 
	#X509V3_F_DO_EXT_I2D
 135

	)

797 
	#X509V3_F_DO_EXT_NCONF
 151

	)

798 
	#X509V3_F_DO_I2V_NAME_CONSTRAINTS
 148

	)

799 
	#X509V3_F_HEX_TO_STRING
 111

	)

800 
	#X509V3_F_I2S_ASN1_ENUMERATED
 121

	)

801 
	#X509V3_F_I2S_ASN1_IA5STRING
 149

	)

802 
	#X509V3_F_I2S_ASN1_INTEGER
 120

	)

803 
	#X509V3_F_I2V_AUTHORITY_INFO_ACCESS
 138

	)

804 
	#X509V3_F_NOTICE_SECTION
 132

	)

805 
	#X509V3_F_NREF_NOS
 133

	)

806 
	#X509V3_F_POLICY_SECTION
 131

	)

807 
	#X509V3_F_PROCESS_PCI_VALUE
 150

	)

808 
	#X509V3_F_R2I_CERTPOL
 130

	)

809 
	#X509V3_F_R2I_PCI
 155

	)

810 
	#X509V3_F_S2I_ASN1_IA5STRING
 100

	)

811 
	#X509V3_F_S2I_ASN1_INTEGER
 108

	)

812 
	#X509V3_F_S2I_ASN1_OCTET_STRING
 112

	)

813 
	#X509V3_F_S2I_ASN1_SKEY_ID
 114

	)

814 
	#X509V3_F_S2I_SKEY_ID
 115

	)

815 
	#X509V3_F_STRING_TO_HEX
 113

	)

816 
	#X509V3_F_SXNET_ADD_ID_ASC
 125

	)

817 
	#X509V3_F_SXNET_ADD_ID_INTEGER
 126

	)

818 
	#X509V3_F_SXNET_ADD_ID_ULONG
 127

	)

819 
	#X509V3_F_SXNET_GET_ID_ASC
 128

	)

820 
	#X509V3_F_SXNET_GET_ID_ULONG
 129

	)

821 
	#X509V3_F_V2I_ASIDENTIFIERS
 158

	)

822 
	#X509V3_F_V2I_ASN1_BIT_STRING
 101

	)

823 
	#X509V3_F_V2I_AUTHORITY_INFO_ACCESS
 139

	)

824 
	#X509V3_F_V2I_AUTHORITY_KEYID
 119

	)

825 
	#X509V3_F_V2I_BASIC_CONSTRAINTS
 102

	)

826 
	#X509V3_F_V2I_CRLD
 134

	)

827 
	#X509V3_F_V2I_EXTENDED_KEY_USAGE
 103

	)

828 
	#X509V3_F_V2I_GENERAL_NAMES
 118

	)

829 
	#X509V3_F_V2I_GENERAL_NAME_EX
 117

	)

830 
	#X509V3_F_V2I_IPADDRBLOCKS
 159

	)

831 
	#X509V3_F_V2I_ISSUER_ALT
 153

	)

832 
	#X509V3_F_V2I_NAME_CONSTRAINTS
 147

	)

833 
	#X509V3_F_V2I_POLICY_CONSTRAINTS
 146

	)

834 
	#X509V3_F_V2I_POLICY_MAPPINGS
 145

	)

835 
	#X509V3_F_V2I_SUBJECT_ALT
 154

	)

836 
	#X509V3_F_V3_ADDR_VALIDATE_PATH_INTERNAL
 160

	)

837 
	#X509V3_F_V3_GENERIC_EXTENSION
 116

	)

838 
	#X509V3_F_X509V3_ADD1_I2D
 140

	)

839 
	#X509V3_F_X509V3_ADD_VALUE
 105

	)

840 
	#X509V3_F_X509V3_EXT_ADD
 104

	)

841 
	#X509V3_F_X509V3_EXT_ADD_ALIAS
 106

	)

842 
	#X509V3_F_X509V3_EXT_CONF
 107

	)

843 
	#X509V3_F_X509V3_EXT_I2D
 136

	)

844 
	#X509V3_F_X509V3_EXT_NCONF
 152

	)

845 
	#X509V3_F_X509V3_GET_SECTION
 142

	)

846 
	#X509V3_F_X509V3_GET_STRING
 143

	)

847 
	#X509V3_F_X509V3_GET_VALUE_BOOL
 110

	)

848 
	#X509V3_F_X509V3_PARSE_LIST
 109

	)

849 
	#X509V3_F_X509_PURPOSE_ADD
 137

	)

850 
	#X509V3_F_X509_PURPOSE_SET
 141

	)

853 
	#X509V3_R_BAD_IP_ADDRESS
 118

	)

854 
	#X509V3_R_BAD_OBJECT
 119

	)

855 
	#X509V3_R_BN_DEC2BN_ERROR
 100

	)

856 
	#X509V3_R_BN_TO_ASN1_INTEGER_ERROR
 101

	)

857 
	#X509V3_R_DIRNAME_ERROR
 149

	)

858 
	#X509V3_R_DUPLICATE_ZONE_ID
 133

	)

859 
	#X509V3_R_ERROR_CONVERTING_ZONE
 131

	)

860 
	#X509V3_R_ERROR_CREATING_EXTENSION
 144

	)

861 
	#X509V3_R_ERROR_IN_EXTENSION
 128

	)

862 
	#X509V3_R_EXPECTED_A_SECTION_NAME
 137

	)

863 
	#X509V3_R_EXTENSION_EXISTS
 145

	)

864 
	#X509V3_R_EXTENSION_NAME_ERROR
 115

	)

865 
	#X509V3_R_EXTENSION_NOT_FOUND
 102

	)

866 
	#X509V3_R_EXTENSION_SETTING_NOT_SUPPORTED
 103

	)

867 
	#X509V3_R_EXTENSION_VALUE_ERROR
 116

	)

868 
	#X509V3_R_ILLEGAL_EMPTY_EXTENSION
 151

	)

869 
	#X509V3_R_ILLEGAL_HEX_DIGIT
 113

	)

870 
	#X509V3_R_INCORRECT_POLICY_SYNTAX_TAG
 152

	)

871 
	#X509V3_R_INVALID_ASNUMBER
 160

	)

872 
	#X509V3_R_INVALID_ASRANGE
 161

	)

873 
	#X509V3_R_INVALID_BOOLEAN_STRING
 104

	)

874 
	#X509V3_R_INVALID_EXTENSION_STRING
 105

	)

875 
	#X509V3_R_INVALID_INHERITANCE
 162

	)

876 
	#X509V3_R_INVALID_IPADDRESS
 163

	)

877 
	#X509V3_R_INVALID_NAME
 106

	)

878 
	#X509V3_R_INVALID_NULL_ARGUMENT
 107

	)

879 
	#X509V3_R_INVALID_NULL_NAME
 108

	)

880 
	#X509V3_R_INVALID_NULL_VALUE
 109

	)

881 
	#X509V3_R_INVALID_NUMBER
 140

	)

882 
	#X509V3_R_INVALID_NUMBERS
 141

	)

883 
	#X509V3_R_INVALID_OBJECT_IDENTIFIER
 110

	)

884 
	#X509V3_R_INVALID_OPTION
 138

	)

885 
	#X509V3_R_INVALID_POLICY_IDENTIFIER
 134

	)

886 
	#X509V3_R_INVALID_PROXY_POLICY_SETTING
 153

	)

887 
	#X509V3_R_INVALID_PURPOSE
 146

	)

888 
	#X509V3_R_INVALID_SAFI
 164

	)

889 
	#X509V3_R_INVALID_SECTION
 135

	)

890 
	#X509V3_R_INVALID_SYNTAX
 143

	)

891 
	#X509V3_R_ISSUER_DECODE_ERROR
 126

	)

892 
	#X509V3_R_MISSING_VALUE
 124

	)

893 
	#X509V3_R_NEED_ORGANIZATION_AND_NUMBERS
 142

	)

894 
	#X509V3_R_NO_CONFIG_DATABASE
 136

	)

895 
	#X509V3_R_NO_ISSUER_CERTIFICATE
 121

	)

896 
	#X509V3_R_NO_ISSUER_DETAILS
 127

	)

897 
	#X509V3_R_NO_POLICY_IDENTIFIER
 139

	)

898 
	#X509V3_R_NO_PROXY_CERT_POLICY_LANGUAGE_DEFINED
 154

	)

899 
	#X509V3_R_NO_PUBLIC_KEY
 114

	)

900 
	#X509V3_R_NO_SUBJECT_DETAILS
 125

	)

901 
	#X509V3_R_ODD_NUMBER_OF_DIGITS
 112

	)

902 
	#X509V3_R_OPERATION_NOT_DEFINED
 148

	)

903 
	#X509V3_R_OTHERNAME_ERROR
 147

	)

904 
	#X509V3_R_POLICY_LANGUAGE_ALREADTY_DEFINED
 155

	)

905 
	#X509V3_R_POLICY_PATH_LENGTH
 156

	)

906 
	#X509V3_R_POLICY_PATH_LENGTH_ALREADTY_DEFINED
 157

	)

907 
	#X509V3_R_POLICY_SYNTAX_NOT_CURRENTLY_SUPPORTED
 158

	)

908 
	#X509V3_R_POLICY_WHEN_PROXY_LANGUAGE_REQUIRES_NO_POLICY
 159

	)

909 
	#X509V3_R_SECTION_NOT_FOUND
 150

	)

910 
	#X509V3_R_UNABLE_TO_GET_ISSUER_DETAILS
 122

	)

911 
	#X509V3_R_UNABLE_TO_GET_ISSUER_KEYID
 123

	)

912 
	#X509V3_R_UNKNOWN_BIT_STRING_ARGUMENT
 111

	)

913 
	#X509V3_R_UNKNOWN_EXTENSION
 129

	)

914 
	#X509V3_R_UNKNOWN_EXTENSION_NAME
 130

	)

915 
	#X509V3_R_UNKNOWN_OPTION
 120

	)

916 
	#X509V3_R_UNSUPPORTED_OPTION
 117

	)

917 
	#X509V3_R_USER_TOO_LONG
 132

	)

919 #ifde‡ 
__˝lu•lus


	@/usr/include/signal.h

37 #i‚de‡
_SIGNAL_H_


38 
	#_SIGNAL_H_


	)

40 
	~<sys/cdefs.h
>

41 
	~<sys/_ty≥s.h
>

42 
	~<sys/sig«l.h
>

44 #i‡
__BSD_VISIBLE


49 
__c⁄°
 *__c⁄° 
sys_sig«me
[
NSIG
];

50 
__c⁄°
 *__c⁄° 
sys_sigli°
[
NSIG
];

51 
__c⁄°
 
sys_nsig
;

54 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


55 #i‚de‡
_PID_T_DECLARED


56 
__pid_t
 
	tpid_t
;

57 
	#_PID_T_DECLARED


	)

61 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


62 
	g±hªad
;

63 
±hªad
 *
	t__±hªad_t
;

64 #i‡!
deföed
(
_PTHREAD_T_DECLARED
Ë&& 
__POSIX_VISIBLE
 >= 200809

65 
__±hªad_t
 
	t±hªad_t
;

66 
	#_PTHREAD_T_DECLARED


	)

70 
__BEGIN_DECLS


71 
øi£
();

73 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


74 
kûl
(
__pid_t
, );

75 
±hªad_kûl
(
__±hªad_t
, );

76 
±hªad_sigmask
(, c⁄° 
__sig£t_t
 * 
__ª°ri˘
,

77 
__sig£t_t
 * 
__ª°ri˘
);

78 
siga˘i⁄
(, c⁄° siga˘i⁄ * 
__ª°ri˘
,

79 
siga˘i⁄
 * 
__ª°ri˘
);

80 
sigadd£t
(
sig£t_t
 *, );

81 
sigdñ£t
(
sig£t_t
 *, );

82 
sigem±y£t
(
sig£t_t
 *);

83 
sigfûl£t
(
sig£t_t
 *);

84 
sigismembî
(c⁄° 
sig£t_t
 *, );

85 
sig≥ndög
(
sig£t_t
 *);

86 
sig¥ocmask
(, c⁄° 
sig£t_t
 * 
__ª°ri˘
, sigset_t * __restrict);

87 
sigsu•íd
(c⁄° 
sig£t_t
 *);

88 
sigwaô
(c⁄° 
sig£t_t
 * 
__ª°ri˘
, * __restrict);

91 #i‡
__POSIX_VISIBLE
 >199506 || 
__XSI_VISIBLE
 >= 600

92 
sigqueue
(
__pid_t
, , c⁄° 
sigvÆ
);

94 
	gtime•ec
;

95 
sigtimedwaô
(c⁄° 
sig£t_t
 * 
__ª°ri˘
, 
sigöfo_t
 * __restrict,

96 c⁄° 
time•ec
 * 
__ª°ri˘
);

97 
sigwaôöfo
(c⁄° 
sig£t_t
 * 
__ª°ri˘
, 
sigöfo_t
 * __restrict);

100 #i‡
__XSI_VISIBLE


101 
kûÕg
(
__pid_t
, );

102 
sigÆt°ack
(c⁄° 
°ack_t
 * 
__ª°ri˘
, stack_t * __restrict);

103 
sighﬁd
();

104 
sigign‹e
();

105 
sig∑u£
();

106 
sigªl£
();

107 (*
sig£t
(, (*)()))();

108 
	`xsi_sig∑u£
();

111 #i‡
__XSI_VISIBLE
 >= 600

112 
	`sigöãºu±
(, );

115 #i‡
__POSIX_VISIBLE
 >200809 || 
__BSD_VISIBLE


116 
	`psig«l
(, const *);

119 #i‡
__BSD_VISIBLE


120 
	`sigblock
();

121 
__uc⁄ãxt
;

122 
	`sigªtu∫
(c⁄° 
__uc⁄ãxt
 *);

123 
	`sig£tmask
();

124 
	`sig°ack
(c⁄° 
sig°ack
 *, sigstack *);

125 
	`sigvec
(, 
sigvec
 *, sigvec *);

127 
__END_DECLS


	@/usr/include/stdio.h

40 #i‚def 
_STDIO_H_


41 
	#_STDIO_H_


	)

43 
	~<sys/cdefs.h
>

44 
	~<sys/_nuŒ.h
>

45 
	~<sys/_ty≥s.h
>

47 
__off_t
 
	tÂos_t
;

49 #i‚de‡
_SIZE_T_DECLARED


50 
__size_t
 
	tsize_t
;

51 
	#_SIZE_T_DECLARED


	)

54 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200809

55 #i‚de‡
_OFF_T_DECLARED


56 
	#_OFF_T_DECLARED


	)

57 
__off_t
 
	toff_t
;

59 #i‚de‡
_SSIZE_T_DECLARED


60 
	#_SSIZE_T_DECLARED


	)

61 
__ssize_t
 
	tssize_t
;

65 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


66 #i‚de‡
_VA_LIST_DECLARED


67 
__va_li°
 
	tva_li°
;

68 
	#_VA_LIST_DECLARED


	)

72 
	#_FSTDIO


	)

81 
	s__sbuf
 {

82 *
	m_ba£
;

83 
	m_size
;

114 
	s__sFILE
 {

115 *
	m_p
;

116 
	m_r
;

117 
	m_w
;

118 
	m_Êags
;

119 
	m_fûe
;

120 
__sbuf
 
	m_bf
;

121 
	m_lbfsize
;

124 *
	m_cookõ
;

125 (*
	m_˛o£
)(*);

126 (*
	m_ªad
)(*, *, );

127 
Âos_t
 (*
_£ek
)(*, 
	mÂos_t
, );

128 (*
	m_wrôe
)(*, const *, );

131 
__sbuf
 
	m_ub
;

132 *
	m_up
;

133 
	m_ur
;

136 
	m_ubuf
[3];

137 
	m_nbuf
[1];

140 
__sbuf
 
	m_lb
;

143 
	m_blksize
;

144 
Âos_t
 
	m_off£t
;

146 
±hªad_muãx
 *
	m_Ê_muãx
;

147 
±hªad
 *
	m_Ê_ow√r
;

148 
	m_Ê_cou¡
;

149 
	m_‹õ¡©i⁄
;

150 
__mb°©e_t
 
	m_mb°©e
;

151 } 
	tFILE
;

153 #i‚de‡
_STDSTREAM_DECLARED


154 
__BEGIN_DECLS


155 
FILE
 *
__°döp
;

156 
FILE
 *
__°douç
;

157 
FILE
 *
__°dîΩ
;

158 
	g__END_DECLS


159 
	#_STDSTREAM_DECLARED


	)

162 
	#__SLBF
 0x0001

	)

163 
	#__SNBF
 0x0002

	)

164 
	#__SRD
 0x0004

	)

165 
	#__SWR
 0x0008

	)

167 
	#__SRW
 0x0010

	)

168 
	#__SEOF
 0x0020

	)

169 
	#__SERR
 0x0040

	)

170 
	#__SMBF
 0x0080

	)

171 
	#__SAPP
 0x0100

	)

172 
	#__SSTR
 0x0200

	)

173 
	#__SOPT
 0x0400

	)

174 
	#__SNPT
 0x0800

	)

175 
	#__SOFF
 0x1000

	)

176 
	#__SMOD
 0x2000

	)

177 
	#__SALC
 0x4000

	)

178 
	#__SIGN
 0x8000

	)

189 
	#_IOFBF
 0

	)

190 
	#_IOLBF
 1

	)

191 
	#_IONBF
 2

	)

193 
	#BUFSIZ
 1024

	)

194 
	#EOF
 (-1)

	)

202 #i‚de‡
FOPEN_MAX


203 
	#FOPEN_MAX
 20

	)

205 
	#FILENAME_MAX
 1024

	)

208 #i‡
__XSI_VISIBLE


209 
	#P_tmpdú
 "/v¨/tmp/"

	)

211 
	#L_tm≤am
 1024

	)

212 
	#TMP_MAX
 308915776

	)

214 #i‚de‡
SEEK_SET


215 
	#SEEK_SET
 0

	)

217 #i‚de‡
SEEK_CUR


218 
	#SEEK_CUR
 1

	)

220 #i‚de‡
SEEK_END


221 
	#SEEK_END
 2

	)

224 
	#°dö
 
__°döp


	)

225 
	#°dout
 
__°douç


	)

226 
	#°dîr
 
__°dîΩ


	)

228 
__BEGIN_DECLS


232 
˛óªº
(
FILE
 *);

233 
f˛o£
(
FILE
 *);

234 
„of
(
FILE
 *);

235 
„º‹
(
FILE
 *);

236 
fÊush
(
FILE
 *);

237 
fgëc
(
FILE
 *);

238 
fgëpos
(
FILE
 * 
__ª°ri˘
, 
Âos_t
 * __restrict);

239 *
fgës
(* 
__ª°ri˘
, , 
FILE
 * __restrict);

240 
FILE
 *
f›í
(c⁄° * 
__ª°ri˘
, const * __restrict);

241 
Ârötf
(
FILE
 * 
__ª°ri˘
, const * __restrict, ...);

242 
Âutc
(, 
FILE
 *);

243 
Âuts
(c⁄° * 
__ª°ri˘
, 
FILE
 * __restrict);

244 
size_t
 
‰ód
(* 
__ª°ri˘
, size_t, size_t, 
FILE
 * __restrict);

245 
FILE
 *
‰e›í
(c⁄° * 
__ª°ri˘
, const * __restrict, FILE * __restrict);

246 
fsˇnf
(
FILE
 * 
__ª°ri˘
, const * __restrict, ...);

247 
f£ek
(
FILE
 *, , );

248 
f£ços
(
FILE
 *, c⁄° 
Âos_t
 *);

249 
·ñl
(
FILE
 *);

250 
size_t
 
fwrôe
(c⁄° * 
__ª°ri˘
, size_t, size_t, 
FILE
 * __restrict);

251 
gëc
(
FILE
 *);

252 
gëch¨
();

253 *
gës
(*);

254 
≥º‹
(const *);

255 
¥ötf
(c⁄° * 
__ª°ri˘
, ...);

256 
putc
(, 
FILE
 *);

257 
putch¨
();

258 
puts
(const *);

259 
ªmove
(const *);

260 
ª«me
(const *, const *);

261 
ªwöd
(
FILE
 *);

262 
sˇnf
(c⁄° * 
__ª°ri˘
, ...);

263 
£tbuf
(
FILE
 * 
__ª°ri˘
, * __restrict);

264 
£tvbuf
(
FILE
 * 
__ª°ri˘
, * __ª°ri˘, , 
size_t
);

265 
•rötf
(* 
__ª°ri˘
, const * __restrict, ...);

266 
ssˇnf
(c⁄° * 
__ª°ri˘
, const * __restrict, ...);

267 
FILE
 *
tmpfûe
();

268 *
tm≤am
(*);

269 
ungëc
(, 
FILE
 *);

270 
vÂrötf
(
FILE
 * 
__ª°ri˘
, const * __restrict,

271 
__va_li°
);

272 
v¥ötf
(c⁄° * 
__ª°ri˘
, 
__va_li°
);

273 
v•rötf
(* 
__ª°ri˘
, const * __restrict,

274 
__va_li°
);

276 #i‡
__ISO_C_VISIBLE
 >= 1999

277 
	$¢¥ötf
(* 
__ª°ri˘
, 
size_t
, const * __restrict,

278 ...Ë
	`__¥ötÊike
(3, 4);

279 
	$vfsˇnf
(
FILE
 * 
__ª°ri˘
, c⁄° * __ª°ri˘, 
__va_li°
)

280 
	`__sˇnÊike
(2, 0);

281 
	$vsˇnf
(c⁄° * 
__ª°ri˘
, 
__va_li°
Ë
	`__sˇnÊike
(1, 0);

282 
	$v¢¥ötf
(* 
__ª°ri˘
, 
size_t
, const * __restrict,

283 
__va_li°
Ë
	`__¥ötÊike
(3, 0);

284 
	$vssˇnf
(c⁄° * 
__ª°ri˘
, c⁄° * __ª°ri˘, 
__va_li°
)

285 
	`__sˇnÊike
(2, 0);

291 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 <= 199506

293 
	#L_cu£rid
 17

	)

296 #i‡
__POSIX_VISIBLE


297 
	#L_˘îmid
 1024

	)

299 *
	`˘îmid
(*);

300 
FILE
 *
	`fd›í
(, const *);

301 
	`fûío
(
FILE
 *);

304 #i‡
__POSIX_VISIBLE
 >= 199209

305 
	`p˛o£
(
FILE
 *);

306 
FILE
 *
	`p›í
(const *, const *);

309 #i‡
__POSIX_VISIBLE
 >= 199506

310 
	`·rylockfûe
(
FILE
 *);

311 
	`Êockfûe
(
FILE
 *);

312 
	`fu∆ockfûe
(
FILE
 *);

318 
	`gëc_u∆ocked
(
FILE
 *);

319 
	`gëch¨_u∆ocked
();

320 
	`putc_u∆ocked
(, 
FILE
 *);

321 
	`putch¨_u∆ocked
();

323 #i‡
__BSD_VISIBLE


324 
	`˛óªº_u∆ocked
(
FILE
 *);

325 
	`„of_u∆ocked
(
FILE
 *);

326 
	`„º‹_u∆ocked
(
FILE
 *);

327 
	`fûío_u∆ocked
(
FILE
 *);

330 #i‡
__POSIX_VISIBLE
 >= 200112

331 
	`f£eko
(
FILE
 *, 
__off_t
, );

332 
__off_t
 
	`·ñlo
(
FILE
 *);

335 #i‡
__BSD_VISIBLE
 || 
__XSI_VISIBLE
 > 0 && __XSI_VISIBLE < 600

336 
	`gëw
(
FILE
 *);

337 
	`putw
(, 
FILE
 *);

340 #i‡
__XSI_VISIBLE


341 *
	`ãm≤am
(const *, const *);

344 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200809

345 
ssize_t
 
	`gëdñim
(** 
__ª°ri˘
, 
size_t
 * __restrict, ,

346 
FILE
 * 
__ª°ri˘
);

347 
	`ª«mót
(, const *, , const *);

348 
	`vd¥ötf
(, c⁄° * 
__ª°ri˘
, 
__va_li°
);

359 #i‚de‡
_WITH_GETLINE


360 #i‡
	`deföed
(
_BSD_SOURCE
Ë|| deföed(
_GNU_SOURCE
)

361 
	#_WITH_GETLINE


	)

362 #ñi‡
	`deföed
(
_POSIX_C_SOURCE
)

363 #i‡
_POSIX_C_SOURCE
 >= 200809

364 
	#_WITH_GETLINE


	)

369 #ifde‡
_WITH_GETLINE


370 
ssize_t
 
	`gëlöe
(** 
__ª°ri˘
, 
size_t
 * __ª°ri˘, 
FILE
 * __restrict);

373 #i‚de‡
_WITH_DPRINTF


374 #i‡
	`deföed
(
_BSD_SOURCE
Ë|| deföed(
_GNU_SOURCE
)

375 
	#_WITH_DPRINTF


	)

376 #ñi‡
	`deföed
(
_POSIX_C_SOURCE
)

377 #i‡
_POSIX_C_SOURCE
 >= 200809

378 
	#_WITH_DPRINTF


	)

383 #ifde‡
_WITH_DPRINTF


384 (
d¥ötf
)(, c⁄° * 
__ª°ri˘
, ...);

392 #i‡
__BSD_VISIBLE


393 
	$a•rötf
(**, c⁄° *, ...Ë
	`__¥ötÊike
(2, 3);

394 *
	`˘îmid_r
(*);

395 
	`f˛o£Æl
();

396 *
	`fgë 
(
FILE
 *, 
size_t
 *);

397 c⁄° *
	$fmtcheck
(c⁄° *, c⁄° *Ë
	`__f‹m©_¨g
(2);

398 
	`Âurge
(
FILE
 *);

399 
	`£tbuf„r
(
FILE
 *, *, );

400 
	`£éöebuf
(
FILE
 *);

401 
	$va•rötf
(**, c⁄° *, 
__va_li°
)

402 
	`__¥ötÊike
(2, 0);

409 
__c⁄°
 
sys_√º
;

410 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

415 
FILE
 *
	`fun›í
(const *,

418 
	$Âos_t
 (*)(*, 
Âos_t
, ),

420 
	#‰›í
(
cookõ
, 
‚
Ë
	`fun›í
(cookõ, fn, 0, 0, 0)

	)

421 
	#fw›í
(
cookõ
, 
‚
Ë
	`fun›í
(cookõ, 0, fn, 0, 0)

	)

426 #i‚de‡
_FTRUNCATE_DECLARED


427 
	#_FTRUNCATE_DECLARED


	)

428 
	`·runˇã
(, 
__off_t
);

430 #i‚de‡
_LSEEK_DECLARED


431 
	#_LSEEK_DECLARED


	)

432 
__off_t
 
	`l£ek
(, __off_t, );

434 #i‚de‡
_MMAP_DECLARED


435 
	#_MMAP_DECLARED


	)

436 *
	`mm≠
(*, 
size_t
, , , , 
__off_t
);

438 #i‚de‡
_TRUNCATE_DECLARED


439 
	#_TRUNCATE_DECLARED


	)

440 
	`åunˇã
(c⁄° *, 
__off_t
);

447 
	`__§gë
(
FILE
 *);

448 
	`__swbuf
(, 
FILE
 *);

454 
	#__sgëc
(
p
Ë(--’)->
_r
 < 0 ? 
	`__§gë
’Ë: ()(*’)->
_p
++))

	)

455 #i‡
	`deföed
(
__GNUC__
Ë&& deföed(
__STDC__
)

456 
__ölöe
 
	$__•utc
(
_c
, 
FILE
 *
_p
) {

457 i‡(--
_p
->
_w
 >0 || (_p->_w >_p->
_lbfsize
 && ()
_c
 != '\n'))

458  (*
_p
->_p++ = 
_c
);

460  (
	`__swbuf
(
_c
, 
_p
));

461 
	}
}

466 
	#__•utc
(
c
, 
p
) \

467 (--(
p
)->
_w
 < 0 ? \

468 (
p
)->
_w
 >’)->
_lbfsize
 ? \

469 (*(
p
)->
_p
 = (
c
)), *(p)->_p != '\n' ? \

470 ()*(
p
)->
_p
++ : \

471 
	`__swbuf
('\n', 
p
) : \

472 
	`__swbuf
(()(
c
), 
p
) : \

473 (*(
p
)->
_p
 = (
c
), ()*’)->_p++))

	)

476 
	#__s„of
(
p
Ë((’)->
_Êags
 & 
__SEOF
Ë!0)

	)

477 
	#__s„º‹
(
p
Ë((’)->
_Êags
 & 
__SERR
Ë!0)

	)

478 
	#__s˛óªº
(
p
Ë(()(’)->
_Êags
 &~(
__SERR
|
__SEOF
)))

	)

479 
	#__sfûío
(
p
Ë(’)->
_fûe
)

	)

481 
__i°hªaded
;

483 
	#„of
(
p
Ë(!
__i°hªaded
 ? 
	`__s„of
’Ë: (
„of
)’))

	)

484 
	#„º‹
(
p
Ë(!
__i°hªaded
 ? 
	`__s„º‹
’Ë: (
„º‹
)’))

	)

485 
	#˛óªº
(
p
Ë(!
__i°hªaded
 ? 
	`__s˛óªº
’Ë: (
˛óªº
)’))

	)

487 #i‡
__POSIX_VISIBLE


488 
	#fûío
(
p
Ë(!
__i°hªaded
 ? 
	`__sfûío
’Ë: (
fûío
)’))

	)

491 
	#gëc
(
Â
Ë(!
__i°hªaded
 ? 
	`__sgëc
(ÂË: (
gëc
)(Â))

	)

492 
	#putc
(
x
, 
Â
Ë(!
__i°hªaded
 ? 
	`__•utc
(x, fpË: (
putc
)(x, fp))

	)

494 
	#gëch¨
(Ë
	`gëc
(
°dö
)

	)

495 
	#putch¨
(
x
Ë
	`putc
(x, 
°dout
)

	)

497 #i‡
__BSD_VISIBLE


502 
	#„of_u∆ocked
(
p
Ë
	`__s„of
’)

	)

503 
	#„º‹_u∆ocked
(
p
Ë
	`__s„º‹
’)

	)

504 
	#˛óªº_u∆ocked
(
p
Ë
	`__s˛óªº
’)

	)

505 
	#fûío_u∆ocked
(
p
Ë
	`__sfûío
’)

	)

507 #i‡
__POSIX_VISIBLE
 >= 199506

508 
	#gëc_u∆ocked
(
Â
Ë
	`__sgëc
(Â)

	)

509 
	#putc_u∆ocked
(
x
, 
Â
Ë
	`__•utc
(x, fp)

	)

511 
	#gëch¨_u∆ocked
(Ë
	`gëc_u∆ocked
(
°dö
)

	)

512 
	#putch¨_u∆ocked
(
x
Ë
	`putc_u∆ocked
(x, 
°dout
)

	)

515 
	g__END_DECLS


	@/usr/include/stdlib.h

37 #i‚de‡
_STDLIB_H_


38 
	#_STDLIB_H_


	)

40 
	~<sys/cdefs.h
>

41 
	~<sys/_nuŒ.h
>

42 
	~<sys/_ty≥s.h
>

44 #i‡
__BSD_VISIBLE


45 #i‚de‡
_RUNE_T_DECLARED


46 
__ru√_t
 
	tru√_t
;

47 
	#_RUNE_T_DECLARED


	)

51 #i‚de‡
_SIZE_T_DECLARED


52 
__size_t
 
	tsize_t
;

53 
	#_SIZE_T_DECLARED


	)

56 #i‚def 
__˝lu•lus


57 #i‚de‡
_WCHAR_T_DECLARED


58 
__wch¨_t
 
	twch¨_t
;

59 
	#_WCHAR_T_DECLARED


	)

64 
	mquŸ
;

65 
	mªm
;

66 } 
	tdiv_t
;

69 
	mquŸ
;

70 
	mªm
;

71 } 
	tldiv_t
;

73 
	#EXIT_FAILURE
 1

	)

74 
	#EXIT_SUCCESS
 0

	)

76 
	#RAND_MAX
 0x7fffffff

	)

78 
__mb_cur_max
;

79 
	#MB_CUR_MAX
 
__mb_cur_max


	)

81 
__BEGIN_DECLS


82 
	$ab‹t
(Ë
__dód2
;

83 
	$abs
(Ë
__puª2
;

84 
	`©exô
((*)());

85 
	`©of
(const *);

86 
	`©oi
(const *);

87 
	`©ﬁ
(const *);

88 *
	`b£¨ch
(c⁄° *, c⁄° *, 
size_t
,

89 
size_t
, (*)(const *, const *));

90 *
	$ˇŒoc
(
size_t
, size_tË
__mÆloc_like
;

91 
div_t
 
	$div
(, Ë
__puª2
;

92 
	$exô
(Ë
__dód2
;

93 
	`‰ì
(*);

94 *
	`gëív
(const *);

95 
	$œbs
(Ë
__puª2
;

96 
ldiv_t
 
	$ldiv
(, Ë
__puª2
;

97 *
	$mÆloc
(
size_t
Ë
__mÆloc_like
;

98 
	`mbÀn
(c⁄° *, 
size_t
);

99 
size_t
 
	`mb°owcs
(
wch¨_t
 * 
__ª°ri˘
 , const * __restrict, size_t);

100 
	`mbtowc
(
wch¨_t
 * 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

101 
	`qs‹t
(*, 
size_t
, size_t,

103 
	`ønd
();

104 *
	`ªÆloc
(*, 
size_t
);

105 
	`§™d
();

106 
	`°πod
(c⁄° * 
__ª°ri˘
, ** __restrict);

107 
	`°πof
(c⁄° * 
__ª°ri˘
, ** __restrict);

108 
	`°πﬁ
(c⁄° * 
__ª°ri˘
, ** __restrict, );

110 
	`°πﬁd
(c⁄° * 
__ª°ri˘
, ** __restrict);

112 
	`°πoul
(c⁄° * 
__ª°ri˘
, ** __restrict, );

113 
	`sy°em
(const *);

114 
	`w˘omb
(*, 
wch¨_t
);

115 
size_t
 
	`wc°ombs
(* 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict, size_t);

127 #i‡
__ISO_C_VISIBLE
 >= 1999

128 #ifde‡
__LONG_LONG_SUPPORTED


131 
quŸ
;

132 
ªm
;

133 } 
	tŒdiv_t
;

137 
	`©ﬁl
(const *);

140 
	$Œabs
(Ë
__puª2
;

142 
Œdiv_t
 
	$Œdiv
(, Ë
__puª2
;

145 
	`°πﬁl
(c⁄° * 
__ª°ri˘
, ** __restrict, );

148 
	`°πouŒ
(c⁄° * 
__ª°ri˘
, ** __restrict, );

151 
	$_Exô
(Ë
__dód2
;

159 #i‡
__POSIX_VISIBLE


160 
	`posix_memÆign
(**, 
size_t
, size_t);

161 
	`ønd_r
(*);

162 *
	`ªÆ∑th
(c⁄° * 
__ª°ri˘
, * __restrict);

163 
	`£ãnv
(const *, const *, );

164 
	`un£ãnv
(const *);

167 #i‡
__POSIX_VISIBLE
 >200809 || 
__XSI_VISIBLE


168 
	`gësub›t
(**, *const *, **);

169 #i‚de‡
_MKDTEMP_DECLARED


170 *
	`mkdãmp
(*);

171 
	#_MKDTEMP_DECLARED


	)

173 #i‚de‡
_MKSTEMP_DECLARED


174 
	`mk°emp
(*);

175 
	#_MKSTEMP_DECLARED


	)

185 #i‡
__XSI_VISIBLE


187 
	`a64l
(const *);

188 
	`dønd48
();

190 
	`î™d48
([3]);

193 
	`gø¡±
();

194 *
	`öô°©e
(, *, );

195 
	`jønd48
([3]);

196 *
	`l64a
();

197 
	`lc⁄g48
([7]);

198 
	`Ã™d48
();

199 #i‡!
	`deföed
(
_MKTEMP_DECLARED
Ë&& (
__BSD_VISIBLE
 || 
__XSI_VISIBLE
 <= 600)

200 *
	`mkãmp
(*);

201 
	#_MKTEMP_DECLARED


	)

203 
	`mønd48
();

204 
	`ƒ™d48
([3]);

205 
	`posix_›í±
();

206 *
	`±¢ame
();

207 
	`puãnv
(*);

208 
	`øndom
();

210 *
	`£ed48
([3]);

211 #i‚de‡
_SETKEY_DECLARED


212 
	`£tkey
(const *);

213 
	#_SETKEY_DECLARED


	)

215 *
	`£t°©e
( *);

216 
	`§™d48
();

217 
	`§™dom
();

218 
	`u∆ock±
();

221 #i‡
__BSD_VISIBLE


222 c⁄° *
_mÆloc_›ti⁄s
;

223 (*
_mÆloc_mesßge
)(const *, const *, const *,

235 #i‡
__GNUC__
 >2 || 
	`deföed
(
__INTEL_COMPILER
)

236 #unde‡
Æloˇ


237 
	#Æloˇ
(
sz
Ë
	`__buûtö_Æloˇ
(sz)

	)

238 #ñi‡
	`deföed
(
löt
)

239 *
	`Æloˇ
(
size_t
);

242 
	$ab‹t2
(c⁄° *, , **Ë
__dód2
;

243 
__uöt32_t


244 
	`¨c4øndom
();

245 
	`¨c4øndom_addøndom
(*, );

246 
	`¨c4øndom_buf
(*, 
size_t
);

247 
	`¨c4øndom_°ú
();

248 
__uöt32_t


249 
	`¨c4øndom_unif‹m
(
__uöt32_t
);

250 *
	`gëbsize
(*, *);

252 *
	`cgëˇp
(*, const *, );

253 
	`cgë˛o£
();

254 
	`cgëít
(**, **, const *);

255 
	`cgëfú°
(**, **);

256 
	`cgëm©ch
(const *, const *);

257 
	`cgë√xt
(**, **);

258 
	`cgënum
(*, const *, *);

259 
	`cgë£t
(const *);

260 
	`cgë°r
(*, const *, **);

261 
	`cgëu°r
(*, const *, **);

263 
	`d´m⁄
(, );

264 *
	`dev«me
(
__dev_t
, 
__mode_t
);

265 *
	`dev«me_r
(
__dev_t
, 
__mode_t
, *, );

266 *
	`fdev«me
();

267 *
	`fdev«me_r
(, *, );

268 
	`gëlﬂdavg
([], );

269 
__c⁄°
 *

270 
	`gë¥og«me
();

272 
	`hóps‹t
(*, 
size_t
, size_t, (*)(const *, const *));

273 
	`l64a_r
(, *, );

274 
	`mîges‹t
(*, 
size_t
, size_t, (*)(const *, const *));

275 
	`qs‹t_r
(*, 
size_t
, size_t, *,

277 
	`ødixs‹t
(const **, , const *,

279 *
	`ªÆlocf
(*, 
size_t
);

280 
	`Ωm©ch
(const *);

281 
	`£çrog«me
(const *);

282 
	`§adixs‹t
(const **, , const *,

284 
	`§™ddev
();

285 
	`§™domdev
();

287 
	`°π⁄um
(const *, , , const **);

290 
__öt64_t


291 
	`°πoq
(const *, **, );

292 
__uöt64_t


293 
	`°πouq
(const *, **, );

295 *
sub›èrg
;

297 
__END_DECLS


	@/usr/include/string.h

37 #i‚de‡
_STRING_H_


38 
	#_STRING_H_


	)

40 
	~<sys/cdefs.h
>

41 
	~<sys/_nuŒ.h
>

42 
	~<sys/_ty≥s.h
>

48 #i‡
__BSD_VISIBLE


49 
	~<°rögs.h
>

52 #i‚de‡
_SIZE_T_DECLARED


53 
__size_t
 
	tsize_t
;

54 
	#_SIZE_T_DECLARED


	)

57 
	g__BEGIN_DECLS


58 #i‡
__XSI_VISIBLE
 >= 600

59 *
memc˝y
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, , 
size_t
);

61 *
	$memchr
(c⁄° *, , 
size_t
Ë
__puª
;

62 #i‡
__BSD_VISIBLE


63 *
	$memrchr
(c⁄° *, , 
size_t
Ë
__puª
;

65 
	$memcmp
(c⁄° *, c⁄° *, 
size_t
Ë
__puª
;

66 *
	`mem˝y
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

67 #i‡
__BSD_VISIBLE


68 *
	$memmem
(c⁄° *, 
size_t
, c⁄° *, size_tË
__puª
;

70 *
	`memmove
(*, c⁄° *, 
size_t
);

71 *
	`mem£t
(*, , 
size_t
);

72 #i‡
__POSIX_VISIBLE
 >200809 || 
__BSD_VISIBLE


73 *
	`°p˝y
(* 
__ª°ri˘
, const * __restrict);

74 *
	`°≤˝y
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

76 #i‡
__BSD_VISIBLE


77 *
	$°rˇ£°r
(c⁄° *, c⁄° *Ë
__puª
;

79 *
	`°rˇt
(* 
__ª°ri˘
, const * __restrict);

80 *
	$°rchr
(c⁄° *, Ë
__puª
;

81 
	$°rcmp
(c⁄° *, c⁄° *Ë
__puª
;

82 
	`°rcﬁl
(const *, const *);

83 *
	`°r˝y
(* 
__ª°ri˘
, const * __restrict);

84 
size_t
 
	$°rc•n
(c⁄° *, c⁄° *Ë
__puª
;

85 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


86 *
	$°rdup
(c⁄° *Ë
__mÆloc_like
;

88 *
	`°ªº‹
();

89 #i‡
__POSIX_VISIBLE
 >= 200112

90 
	`°ªº‹_r
(, *, 
size_t
);

92 #i‡
__BSD_VISIBLE


93 
size_t
 
	`°æˇt
(* 
__ª°ri˘
, const * __restrict, size_t);

94 
size_t
 
	`°æ˝y
(* 
__ª°ri˘
, const * __restrict, size_t);

96 
size_t
 
	$°æí
(c⁄° *Ë
__puª
;

97 #i‡
__BSD_VISIBLE


98 
	`°rmode
(, *);

100 *
	`°∫ˇt
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

101 
	$°∫cmp
(c⁄° *, c⁄° *, 
size_t
Ë
__puª
;

102 *
	`°∫˝y
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

103 #i‡
__POSIX_VISIBLE
 >200809 || 
__BSD_VISIBLE


104 *
	$°∫dup
(c⁄° *, 
size_t
Ë
__mÆloc_like
;

105 
size_t
 
	$°∫Àn
(c⁄° *, 
size_t
Ë
__puª
;

107 #i‡
__BSD_VISIBLE


108 *
	$°∫°r
(c⁄° *, c⁄° *, 
size_t
Ë
__puª
;

110 *
	$°Ωbrk
(c⁄° *, c⁄° *Ë
__puª
;

111 *
	$°ºchr
(c⁄° *, Ë
__puª
;

112 #i‡
__BSD_VISIBLE


113 *
	`°r£p
(**, const *);

115 #i‡
__POSIX_VISIBLE
 >200809 || 
__BSD_VISIBLE


116 *
	`°rsig«l
();

118 
size_t
 
	$°r•n
(c⁄° *, c⁄° *Ë
__puª
;

119 *
	$°r°r
(c⁄° *, c⁄° *Ë
__puª
;

120 *
	`°πok
(* 
__ª°ri˘
, const * __restrict);

121 #i‡
__POSIX_VISIBLE
 >199506 || 
__XSI_VISIBLE
 >= 500

122 *
	`°πok_r
(*, const *, **);

124 
size_t
 
	`°rx‰m
(* 
__ª°ri˘
, const * __restrict, size_t);

125 #i‡
__BSD_VISIBLE


127 #i‚de‡
_SWAB_DECLARED


128 
	#_SWAB_DECLARED


	)

130 #i‚de‡
_SSIZE_T_DECLARED


131 
__ssize_t
 
	tssize_t
;

132 
	#_SSIZE_T_DECLARED


	)

135 
	`swab
(c⁄° * 
__ª°ri˘
, * __ª°ri˘, 
ssize_t
);

139 
__END_DECLS


	@/usr/include/strings.h

29 #i‚de‡
_STRINGS_H_


30 
	#_STRINGS_H_


	)

32 
	~<sys/cdefs.h
>

33 
	~<sys/_ty≥s.h
>

35 #i‚de‡
_SIZE_T_DECLARED


36 
__size_t
 
	tsize_t
;

37 
	#_SIZE_T_DECLARED


	)

40 
	g__BEGIN_DECLS


41 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 <= 200112

42 
	$bcmp
(c⁄° *, c⁄° *, 
size_t
Ë
__puª
;

43 
	`bc›y
(c⁄° *, *, 
size_t
);

44 
	`bzîo
(*, 
size_t
);

46 #i‡
__XSI_VISIBLE


47 
	$ffs
(Ë
__puª2
;

49 #ifde‡
__BSD_VISIBLE


50 
	$ff¶
(Ë
__puª2
;

51 
	$ff¶l
(Ë
__puª2
;

52 
	$Ês
(Ë
__puª2
;

53 
	$Ê¶
(Ë
__puª2
;

54 
	$Ê¶l
(Ë
__puª2
;

56 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 <= 200112

57 *
	$ödex
(c⁄° *, Ë
__puª
;

58 *
	$rödex
(c⁄° *, Ë
__puª
;

60 
	$°rˇ£cmp
(c⁄° *, c⁄° *Ë
__puª
;

61 
	$°∫ˇ£cmp
(c⁄° *, c⁄° *, 
size_t
Ë
__puª
;

62 
__END_DECLS


	@/usr/include/sys/file.h

33 #i‚de‡
_SYS_FILE_H_


34 
	#_SYS_FILE_H_


	)

36 #i‚de‡
_KERNEL


37 
	~<sys/ty≥s.h
>

38 
	~<sys/f˙é.h
>

39 
	~<sys/uni°d.h
>

41 
	~<sys/queue.h
>

42 
	~<sys/ªfcou¡.h
>

43 
	~<sys/_lock.h
>

44 
	~<sys/_muãx.h
>

46 
	g°©
;

47 
	gthªad
;

48 
	guio
;

49 
	gknŸe
;

50 
	gvnode
;

51 
	gsockë
;

56 
	#DTYPE_VNODE
 1

	)

57 
	#DTYPE_SOCKET
 2

	)

58 
	#DTYPE_PIPE
 3

	)

59 
	#DTYPE_FIFO
 4

	)

60 
	#DTYPE_KQUEUE
 5

	)

61 
	#DTYPE_CRYPTO
 6

	)

62 
	#DTYPE_MQUEUE
 7

	)

63 
	#DTYPE_SHM
 8

	)

64 
	#DTYPE_SEM
 9

	)

65 
	#DTYPE_PTS
 10

	)

67 #ifde‡
_KERNEL


69 
	gfûe
;

70 
	gu¸ed
;

72 
	tfo_rdwr_t
(
	tfûe
 *
	tÂ
, 
	tuio
 *uio,

73 
	tu¸ed
 *
	ta˘ive_¸ed
, 
	tÊags
,

74 
	tthªad
 *
	ttd
);

75 
	#FOF_OFFSET
 1

	)

76 
	tfo_åunˇã_t
(
	tfûe
 *
	tÂ
, 
	toff_t
 
	tÀngth
,

77 
	tu¸ed
 *
	ta˘ive_¸ed
, 
	tthªad
 *
	ttd
);

78 
	tfo_io˘l_t
(
	tfûe
 *
	tÂ
, 
	tu_l⁄g
 
	tcom
, *
	td©a
,

79 
	tu¸ed
 *
	ta˘ive_¸ed
, 
	tthªad
 *
	ttd
);

80 
	tfo_pﬁl_t
(
	tfûe
 *
	tÂ
, 
	tevíts
,

81 
	tu¸ed
 *
	ta˘ive_¸ed
, 
	tthªad
 *
	ttd
);

82 
	tfo_kqfûãr_t
(
	tfûe
 *
	tÂ
, 
	tknŸe
 *
	tkn
);

83 
	tfo_°©_t
(
	tfûe
 *
	tÂ
, 
	t°©
 *
	tsb
,

84 
	tu¸ed
 *
	ta˘ive_¸ed
, 
	tthªad
 *
	ttd
);

85 
	tfo_˛o£_t
(
	tfûe
 *
	tÂ
, 
	tthªad
 *
	ttd
);

86 
	tfo_Êags_t
;

88 
	sfûe›s
 {

89 
fo_rdwr_t
 *
	mfo_ªad
;

90 
fo_rdwr_t
 *
	mfo_wrôe
;

91 
fo_åunˇã_t
 *
	mfo_åunˇã
;

92 
fo_io˘l_t
 *
	mfo_io˘l
;

93 
fo_pﬁl_t
 *
	mfo_pﬁl
;

94 
fo_kqfûãr_t
 *
	mfo_kqfûãr
;

95 
fo_°©_t
 *
	mfo_°©
;

96 
fo_˛o£_t
 *
	mfo_˛o£
;

97 
fo_Êags_t
 
	mfo_Êags
;

100 
	#DFLAG_PASSABLE
 0x01

	)

101 
	#DFLAG_SEEKABLE
 0x02

	)

104 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_WANT_FILE
)

116 
	sÁdvi£_öfo
 {

117 
	mÁ_advi˚
;

118 
off_t
 
	mÁ_°¨t
;

119 
off_t
 
	mÁ_íd
;

120 
off_t
 
	mÁ_¥ev°¨t
;

121 
off_t
 
	mÁ_¥evíd
;

124 
	sfûe
 {

125 *
	mf_d©a
;

126 
fûe›s
 *
	mf_›s
;

127 
u¸ed
 *
	mf_¸ed
;

128 
vnode
 *
	mf_vnode
;

129 
	mf_ty≥
;

130 
	mf_vƒód_Êags
;

131 vﬁ©ûê
u_öt
 
	mf_Êag
;

132 vﬁ©ûê
u_öt
 
	mf_cou¡
;

136 
	mf_£qcou¡
;

137 
off_t
 
	mf_√xtoff
;

139 
cdev_¥ivd©a
 *
	mfvn_cdev¥iv
;

141 
Ádvi£_öfo
 *
	mfvn_advi˚
;

142 } 
	mf_vnun
;

146 
off_t
 
	mf_off£t
;

150 *
	mf_œbñ
;

153 
	#f_cdev¥iv
 
f_vnun
.
fvn_cdev¥iv


	)

154 
	#f_advi˚
 
f_vnun
.
fvn_advi˚


	)

156 
	#FOFFSET_LOCKED
 0x1

	)

157 
	#FOFFSET_LOCK_WAITING
 0x2

	)

164 
	sxfûe
 {

165 
size_t
 
	mxf_size
;

166 
pid_t
 
	mxf_pid
;

167 
uid_t
 
	mxf_uid
;

168 
	mxf_fd
;

169 *
	mxf_fûe
;

170 
	mxf_ty≥
;

171 
	mxf_cou¡
;

172 
	mxf_msgcou¡
;

173 
off_t
 
	mxf_off£t
;

174 *
	mxf_d©a
;

175 *
	mxf_vnode
;

176 
u_öt
 
	mxf_Êag
;

179 #ifde‡
_KERNEL


181 #ifde‡
MALLOC_DECLARE


182 
MALLOC_DECLARE
(
M_FILE
);

185 
fûe›s
 
vn›s
;

186 
fûe›s
 
badfûe›s
;

187 
fûe›s
 
sockë›s
;

188 
maxfûes
;

189 
maxfûe•î¥oc
;

190 vﬁ©ûê
›ífûes
;

192 
fgë
(
thªad
 *
td
, 
fd
, 
fûe
 **
Âp
);

193 
fgë_ªad
(
thªad
 *
td
, 
fd
, 
fûe
 **
Âp
);

194 
fgë_wrôe
(
thªad
 *
td
, 
fd
, 
fûe
 **
Âp
);

195 
_fdr›
(
fûe
 *
Â
, 
thªad
 *
td
);

202 
fo_rdwr_t
 
	gsoo_ªad
;

203 
fo_rdwr_t
 
	gsoo_wrôe
;

204 
fo_åunˇã_t
 
	gsoo_åunˇã
;

205 
fo_io˘l_t
 
	gsoo_io˘l
;

206 
fo_pﬁl_t
 
	gsoo_pﬁl
;

207 
fo_kqfûãr_t
 
	gsoo_kqfûãr
;

208 
fo_°©_t
 
	gsoo_°©
;

209 
fo_˛o£_t
 
	gsoo_˛o£
;

211 
föô
(
fûe
 *, 
u_öt
, , *, 
fûe›s
 *);

212 
fgëvp
(
thªad
 *
td
, 
fd
, 
vnode
 **
vµ
);

213 
fgëvp_ªad
(
thªad
 *
td
, 
fd
, 
vnode
 **
vµ
);

214 
fgëvp_wrôe
(
thªad
 *
td
, 
fd
, 
vnode
 **
vµ
);

216 
fgësock
(
thªad
 *
td
, 
fd
, 
sockë
 **
•p
, 
u_öt
 *
fÊagp
);

217 
Âutsock
(
sockë
 *
•
);

219 
	#fhﬁd
(
Â
) \

220 (
	`ªfcou¡_acquúe
(&(
Â
)->
f_cou¡
))

	)

221 
	#fdr›
(
Â
, 
td
) \

222 (
	`ªfcou¡_ªÀa£
(&(
Â
)->
f_cou¡
Ë? 
	`_fdr›
((Â), (
td
)Ë: 0)

	)

224 
__ölöe
 
fo_rdwr_t
 
	gfo_ªad
;

225 
__ölöe
 
fo_rdwr_t
 
	gfo_wrôe
;

226 
__ölöe
 
fo_åunˇã_t
 
	gfo_åunˇã
;

227 
__ölöe
 
fo_io˘l_t
 
	gfo_io˘l
;

228 
__ölöe
 
fo_pﬁl_t
 
	gfo_pﬁl
;

229 
__ölöe
 
fo_kqfûãr_t
 
	gfo_kqfûãr
;

230 
__ölöe
 
fo_°©_t
 
	gfo_°©
;

231 
__ölöe
 
fo_˛o£_t
 
	gfo_˛o£
;

233 
__ölöe
 

234 
	$fo_ªad
(
Â
, 
uio
, 
a˘ive_¸ed
, 
Êags
, 
td
)

235 
fûe
 *
Â
;

236 
uio
 *uio;

237 
u¸ed
 *
a˘ive_¸ed
;

238 
Êags
;

239 
thªad
 *
td
;

242  ((*
Â
->
f_›s
->
fo_ªad
)(Â, 
uio
, 
a˘ive_¸ed
, 
Êags
, 
td
));

243 
	}
}

245 
__ölöe
 

246 
	$fo_wrôe
(
Â
, 
uio
, 
a˘ive_¸ed
, 
Êags
, 
td
)

247 
fûe
 *
Â
;

248 
uio
 *uio;

249 
u¸ed
 *
a˘ive_¸ed
;

250 
Êags
;

251 
thªad
 *
td
;

254  ((*
Â
->
f_›s
->
fo_wrôe
)(Â, 
uio
, 
a˘ive_¸ed
, 
Êags
, 
td
));

255 
	}
}

257 
__ölöe
 

258 
	$fo_åunˇã
(
Â
, 
Àngth
, 
a˘ive_¸ed
, 
td
)

259 
fûe
 *
Â
;

260 
off_t
 
Àngth
;

261 
u¸ed
 *
a˘ive_¸ed
;

262 
thªad
 *
td
;

265  ((*
Â
->
f_›s
->
fo_åunˇã
)(Â, 
Àngth
, 
a˘ive_¸ed
, 
td
));

266 
	}
}

268 
__ölöe
 

269 
	$fo_io˘l
(
Â
, 
com
, 
d©a
, 
a˘ive_¸ed
, 
td
)

270 
fûe
 *
Â
;

271 
u_l⁄g
 
com
;

272 *
d©a
;

273 
u¸ed
 *
a˘ive_¸ed
;

274 
thªad
 *
td
;

277  ((*
Â
->
f_›s
->
fo_io˘l
)(Â, 
com
, 
d©a
, 
a˘ive_¸ed
, 
td
));

278 
	}
}

280 
__ölöe
 

281 
	$fo_pﬁl
(
Â
, 
evíts
, 
a˘ive_¸ed
, 
td
)

282 
fûe
 *
Â
;

283 
evíts
;

284 
u¸ed
 *
a˘ive_¸ed
;

285 
thªad
 *
td
;

288  ((*
Â
->
f_›s
->
fo_pﬁl
)(Â, 
evíts
, 
a˘ive_¸ed
, 
td
));

289 
	}
}

291 
__ölöe
 

292 
	$fo_°©
(
Â
, 
sb
, 
a˘ive_¸ed
, 
td
)

293 
fûe
 *
Â
;

294 
°©
 *
sb
;

295 
u¸ed
 *
a˘ive_¸ed
;

296 
thªad
 *
td
;

299  ((*
Â
->
f_›s
->
fo_°©
)(Â, 
sb
, 
a˘ive_¸ed
, 
td
));

300 
	}
}

302 
__ölöe
 

303 
	$fo_˛o£
(
Â
, 
td
)

304 
fûe
 *
Â
;

305 
thªad
 *
td
;

308  ((*
Â
->
f_›s
->
fo_˛o£
)(Â, 
td
));

309 
	}
}

311 
__ölöe
 

312 
	$fo_kqfûãr
(
Â
, 
kn
)

313 
fûe
 *
Â
;

314 
knŸe
 *
kn
;

317  ((*
Â
->
f_›s
->
fo_kqfûãr
)(Â, 
kn
));

318 
	}
}

	@/usr/include/sys/resource.h

33 #i‚de‡
_SYS_RESOURCE_H_


34 
	#_SYS_RESOURCE_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_timevÆ.h
>

38 
	~<sys/_ty≥s.h
>

43 
	#PRIO_MIN
 -20

	)

44 
	#PRIO_MAX
 20

	)

46 
	#PRIO_PROCESS
 0

	)

47 
	#PRIO_PGRP
 1

	)

48 
	#PRIO_USER
 2

	)

57 
	#RUSAGE_SELF
 0

	)

58 
	#RUSAGE_CHILDREN
 -1

	)

59 
	#RUSAGE_THREAD
 1

	)

61 
	srußge
 {

62 
timevÆ
 
	mru_utime
;

63 
timevÆ
 
	mru_°ime
;

64 
	mru_maxrss
;

65 
	#ru_fú°
 
ru_ixrss


	)

66 
	mru_ixrss
;

67 
	mru_idrss
;

68 
	mru_i§ss
;

69 
	mru_möÊt
;

70 
	mru_majÊt
;

71 
	mru_nsw≠
;

72 
	mru_öblock
;

73 
	mru_oublock
;

74 
	mru_msg¢d
;

75 
	mru_msgrcv
;

76 
	mru_nsig«ls
;

77 
	mru_nvcsw
;

78 
	mru_nivcsw
;

79 
	#ru_œ°
 
ru_nivcsw


	)

85 
	#RLIMIT_CPU
 0

	)

86 
	#RLIMIT_FSIZE
 1

	)

87 
	#RLIMIT_DATA
 2

	)

88 
	#RLIMIT_STACK
 3

	)

89 
	#RLIMIT_CORE
 4

	)

90 
	#RLIMIT_RSS
 5

	)

91 
	#RLIMIT_MEMLOCK
 6

	)

92 
	#RLIMIT_NPROC
 7

	)

93 
	#RLIMIT_NOFILE
 8

	)

94 
	#RLIMIT_SBSIZE
 9

	)

95 
	#RLIMIT_VMEM
 10

	)

96 
	#RLIMIT_AS
 
RLIMIT_VMEM


	)

97 
	#RLIMIT_NPTS
 11

	)

98 
	#RLIMIT_SWAP
 12

	)

100 
	#RLIM_NLIMITS
 13

	)

102 
	#RLIM_INFINITY
 ((
æim_t
)(((
uöt64_t
)1 << 63Ë- 1))

	)

110 #ifde‡
_RLIMIT_IDENT


111 c⁄° *
	gæimô_idít
[
RLIM_NLIMITS
] = {

128 #i‚de‡
_RLIM_T_DECLARED


129 
__æim_t
 
	tæim_t
;

130 
	#_RLIM_T_DECLARED


	)

133 
	sæimô
 {

134 
æim_t
 
	mæim_cur
;

135 
æim_t
 
	mæim_max
;

138 #i‡
__BSD_VISIBLE


140 
	s‹limô
 {

141 
__öt32_t
 
	mæim_cur
;

142 
__öt32_t
 
	mæim_max
;

145 
	slﬂdavg
 {

146 
__fix±_t
 
	mldavg
[3];

147 
	mfsˇÀ
;

150 
	#CP_USER
 0

	)

151 
	#CP_NICE
 1

	)

152 
	#CP_SYS
 2

	)

153 
	#CP_INTR
 3

	)

154 
	#CP_IDLE
 4

	)

155 
	#CPUSTATES
 5

	)

159 #ifde‡
_KERNEL


161 
lﬂdavg
 
avîu¬abÀ
;

162 
ªad_˝u_time
(*
˝_time
);

166 
__BEGIN_DECLS


168 
gë¥i‹ôy
(, );

169 
gëæimô
(, 
æimô
 *);

170 
gërußge
(, 
rußge
 *);

171 
£çri‹ôy
(, , );

172 
£ålimô
(, c⁄° 
æimô
 *);

173 
	g__END_DECLS


	@/usr/include/sys/select.h

32 #i‚de‡
_SYS_SELECT_H_


33 
	#_SYS_SELECT_H_


	)

35 
	~<sys/cdefs.h
>

36 
	~<sys/_ty≥s.h
>

38 
	~<sys/_sig£t.h
>

39 
	~<sys/_timevÆ.h
>

40 
	~<sys/time•ec.h
>

42 
	t__fd_mask
;

43 #i‡
__BSD_VISIBLE


44 
__fd_mask
 
	tfd_mask
;

47 #i‚de‡
_SIGSET_T_DECLARED


48 
	#_SIGSET_T_DECLARED


	)

49 
__sig£t_t
 
	tsig£t_t
;

58 #i‚def 
FD_SETSIZE


59 
	#FD_SETSIZE
 1024U

	)

62 
	#_NFDBITS
 ((
__fd_mask
Ë* 8Ë

	)

63 #i‡
__BSD_VISIBLE


64 
	#NFDBITS
 
_NFDBITS


	)

67 #i‚de‡
_howm™y


68 
	#_howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

71 
	sfd_£t
 {

72 
__fd_mask
 
	m__fds_bôs
[
_howm™y
(
FD_SETSIZE
, 
_NFDBITS
)];

73 } 
	tfd_£t
;

74 #i‡
__BSD_VISIBLE


75 
	#fds_bôs
 
__fds_bôs


	)

78 
	#__fd£t_mask
(
n
Ë((
__fd_mask
)1 << (“Ë% 
_NFDBITS
))

	)

79 
	#FD_CLR
(
n
, 
p
Ë(’)->
__fds_bôs
[“)/
_NFDBITS
] &~
	`__fd£t_mask
“))

	)

80 #i‡
__BSD_VISIBLE


81 
	#FD_COPY
(
f
, 
t
Ë()(*—Ë*(f))

	)

83 
	#FD_ISSET
(
n
, 
p
Ë((’)->
__fds_bôs
[“)/
_NFDBITS
] & 
	`__fd£t_mask
“)Ë!0)

	)

84 
	#FD_SET
(
n
, 
p
Ë(’)->
__fds_bôs
[“)/
_NFDBITS
] |
	`__fd£t_mask
“))

	)

85 
	#FD_ZERO
(
p
) do { \

86 
fd_£t
 *
_p
; \

87 
__size_t
 
_n
; \

89 
_p
 = (
p
); \

90 
_n
 = 
	`_howm™y
(
FD_SETSIZE
, 
_NFDBITS
); \

91 
_n
 > 0) \

92 
_p
->
__fds_bôs
[--
_n
] = 0; \

93 } 0)

	)

95 #i‚de‡
_KERNEL


97 
__BEGIN_DECLS


98 
p£À˘
(, 
fd_£t
 *
__ª°ri˘
, fd_set *__restrict, fd_set *__restrict,

99 c⁄° 
time•ec
 *
__ª°ri˘
, c⁄° 
sig£t_t
 *__restrict);

100 #i‚de‡
_SELECT_DECLARED


101 
	#_SELECT_DECLARED


	)

103 
£À˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

105 
	g__END_DECLS


	@/usr/include/sys/socket.h

33 #i‚de‡
_SYS_SOCKET_H_


34 
	#_SYS_SOCKET_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_ty≥s.h
>

38 
	~<sys/_iovec.h
>

39 
	#_NO_NAMESPACE_POLLUTION


	)

40 
	~<machöe/∑øm.h
>

41 #unde‡
_NO_NAMESPACE_POLLUTION


50 #i‡
__BSD_VISIBLE


51 #i‚de‡
_GID_T_DECLARED


52 
__gid_t
 
	tgid_t
;

53 
	#_GID_T_DECLARED


	)

56 #i‚de‡
_OFF_T_DECLARED


57 
__off_t
 
	toff_t
;

58 
	#_OFF_T_DECLARED


	)

61 #i‚de‡
_PID_T_DECLARED


62 
__pid_t
 
	tpid_t
;

63 
	#_PID_T_DECLARED


	)

67 #i‚de‡
_SA_FAMILY_T_DECLARED


68 
__ß_Ámûy_t
 
	tß_Ámûy_t
;

69 
	#_SA_FAMILY_T_DECLARED


	)

72 #i‚de‡
_SOCKLEN_T_DECLARED


73 
__sockÀn_t
 
	tsockÀn_t
;

74 
	#_SOCKLEN_T_DECLARED


	)

77 #i‚de‡
_SSIZE_T_DECLARED


78 
__ssize_t
 
	tssize_t
;

79 
	#_SSIZE_T_DECLARED


	)

82 #i‡
__BSD_VISIBLE


83 #i‚de‡
_UID_T_DECLARED


84 
__uid_t
 
	tuid_t
;

85 
	#_UID_T_DECLARED


	)

92 
	#SOCK_STREAM
 1

	)

93 
	#SOCK_DGRAM
 2

	)

94 
	#SOCK_RAW
 3

	)

95 #i‡
__BSD_VISIBLE


96 
	#SOCK_RDM
 4

	)

98 
	#SOCK_SEQPACKET
 5

	)

103 
	#SO_DEBUG
 0x0001

	)

104 
	#SO_ACCEPTCONN
 0x0002

	)

105 
	#SO_REUSEADDR
 0x0004

	)

106 
	#SO_KEEPALIVE
 0x0008

	)

107 
	#SO_DONTROUTE
 0x0010

	)

108 
	#SO_BROADCAST
 0x0020

	)

109 #i‡
__BSD_VISIBLE


110 
	#SO_USELOOPBACK
 0x0040

	)

112 
	#SO_LINGER
 0x0080

	)

113 
	#SO_OOBINLINE
 0x0100

	)

114 #i‡
__BSD_VISIBLE


115 
	#SO_REUSEPORT
 0x0200

	)

116 
	#SO_TIMESTAMP
 0x0400

	)

117 
	#SO_NOSIGPIPE
 0x0800

	)

118 
	#SO_ACCEPTFILTER
 0x1000

	)

119 
	#SO_BINTIME
 0x2000

	)

121 
	#SO_NO_OFFLOAD
 0x4000

	)

122 
	#SO_NO_DDP
 0x8000

	)

127 
	#SO_SNDBUF
 0x1001

	)

128 
	#SO_RCVBUF
 0x1002

	)

129 
	#SO_SNDLOWAT
 0x1003

	)

130 
	#SO_RCVLOWAT
 0x1004

	)

131 
	#SO_SNDTIMEO
 0x1005

	)

132 
	#SO_RCVTIMEO
 0x1006

	)

133 
	#SO_ERROR
 0x1007

	)

134 
	#SO_TYPE
 0x1008

	)

135 #i‡
__BSD_VISIBLE


136 
	#SO_LABEL
 0x1009

	)

137 
	#SO_PEERLABEL
 0x1010

	)

138 
	#SO_LISTENQLIMIT
 0x1011

	)

139 
	#SO_LISTENQLEN
 0x1012

	)

140 
	#SO_LISTENINCQLEN
 0x1013

	)

141 
	#SO_SETFIB
 0x1014

	)

142 
	#SO_PROTOCOL
 0x1016

	)

143 
	#SO_PROTOTYPE
 
SO_PROTOCOL


	)

151 #i‡
__BSD_VISIBLE


152 
	#SO_VENDOR
 0x80000000

	)

158 
	slögî
 {

159 
	ml_⁄off
;

160 
	ml_lögî
;

163 #i‡
__BSD_VISIBLE


164 
	sac˚±_fûãr_¨g
 {

165 
	maf_«me
[16];

166 
	maf_¨g
[256-16];

173 
	#SOL_SOCKET
 0xfff‡

	)

178 
	#AF_UNSPEC
 0

	)

179 #i‡
__BSD_VISIBLE


180 
	#AF_LOCAL
 
AF_UNIX


	)

182 
	#AF_UNIX
 1

	)

183 
	#AF_INET
 2

	)

184 #i‡
__BSD_VISIBLE


185 
	#AF_IMPLINK
 3

	)

186 
	#AF_PUP
 4

	)

187 
	#AF_CHAOS
 5

	)

188 
	#AF_NETBIOS
 6

	)

189 
	#AF_ISO
 7

	)

190 
	#AF_OSI
 
AF_ISO


	)

191 
	#AF_ECMA
 8

	)

192 
	#AF_DATAKIT
 9

	)

193 
	#AF_CCITT
 10

	)

194 
	#AF_SNA
 11

	)

195 
	#AF_DEC√t
 12

	)

196 
	#AF_DLI
 13

	)

197 
	#AF_LAT
 14

	)

198 
	#AF_HYLINK
 15

	)

199 
	#AF_APPLETALK
 16

	)

200 
	#AF_ROUTE
 17

	)

201 
	#AF_LINK
 18

	)

202 
	#p£udo_AF_XTP
 19

	)

203 
	#AF_COIP
 20

	)

204 
	#AF_CNT
 21

	)

205 
	#p£udo_AF_RTIP
 22

	)

206 
	#AF_IPX
 23

	)

207 
	#AF_SIP
 24

	)

208 
	#p£udo_AF_PIP
 25

	)

209 
	#AF_ISDN
 26

	)

210 
	#AF_E164
 
AF_ISDN


	)

211 
	#p£udo_AF_KEY
 27

	)

213 
	#AF_INET6
 28

	)

214 #i‡
__BSD_VISIBLE


215 
	#AF_NATM
 29

	)

216 
	#AF_ATM
 30

	)

217 
	#p£udo_AF_HDRCMPLT
 31

	)

220 
	#AF_NETGRAPH
 32

	)

221 
	#AF_SLOW
 33

	)

222 
	#AF_SCLUSTER
 34

	)

223 
	#AF_ARP
 35

	)

224 
	#AF_BLUETOOTH
 36

	)

225 
	#AF_IEEE80211
 37

	)

226 
	#AF_MAX
 38

	)

232 
	#AF_VENDOR00
 39

	)

233 
	#AF_VENDOR01
 41

	)

234 
	#AF_VENDOR02
 43

	)

235 
	#AF_VENDOR03
 45

	)

236 
	#AF_VENDOR04
 47

	)

237 
	#AF_VENDOR05
 49

	)

238 
	#AF_VENDOR06
 51

	)

239 
	#AF_VENDOR07
 53

	)

240 
	#AF_VENDOR08
 55

	)

241 
	#AF_VENDOR09
 57

	)

242 
	#AF_VENDOR10
 59

	)

243 
	#AF_VENDOR11
 61

	)

244 
	#AF_VENDOR12
 63

	)

245 
	#AF_VENDOR13
 65

	)

246 
	#AF_VENDOR14
 67

	)

247 
	#AF_VENDOR15
 69

	)

248 
	#AF_VENDOR16
 71

	)

249 
	#AF_VENDOR17
 73

	)

250 
	#AF_VENDOR18
 75

	)

251 
	#AF_VENDOR19
 77

	)

252 
	#AF_VENDOR20
 79

	)

253 
	#AF_VENDOR21
 81

	)

254 
	#AF_VENDOR22
 83

	)

255 
	#AF_VENDOR23
 85

	)

256 
	#AF_VENDOR24
 87

	)

257 
	#AF_VENDOR25
 89

	)

258 
	#AF_VENDOR26
 91

	)

259 
	#AF_VENDOR27
 93

	)

260 
	#AF_VENDOR28
 95

	)

261 
	#AF_VENDOR29
 97

	)

262 
	#AF_VENDOR30
 99

	)

263 
	#AF_VENDOR31
 101

	)

264 
	#AF_VENDOR32
 103

	)

265 
	#AF_VENDOR33
 105

	)

266 
	#AF_VENDOR34
 107

	)

267 
	#AF_VENDOR35
 109

	)

268 
	#AF_VENDOR36
 111

	)

269 
	#AF_VENDOR37
 113

	)

270 
	#AF_VENDOR38
 115

	)

271 
	#AF_VENDOR39
 117

	)

272 
	#AF_VENDOR40
 119

	)

273 
	#AF_VENDOR41
 121

	)

274 
	#AF_VENDOR42
 123

	)

275 
	#AF_VENDOR43
 125

	)

276 
	#AF_VENDOR44
 127

	)

277 
	#AF_VENDOR45
 129

	)

278 
	#AF_VENDOR46
 131

	)

279 
	#AF_VENDOR47
 133

	)

286 
	ssockaddr
 {

287 
	mß_Àn
;

288 
ß_Ámûy_t
 
	mß_Ámûy
;

289 
	mß_d©a
[14];

291 #i‡
__BSD_VISIBLE


292 
	#SOCK_MAXADDRLEN
 255

	)

298 
	ssock¥Ÿo
 {

299 
	m•_Ámûy
;

300 
	m•_¥Ÿocﬁ
;

304 #i‚def 
_STRUCT_SOCKADDR_STORAGE_DECLARED


308 
	#_SS_MAXSIZE
 128U

	)

309 
	#_SS_ALIGNSIZE
 ((
__öt64_t
))

	)

310 
	#_SS_PAD1SIZE
 (
_SS_ALIGNSIZE
 - () - \

311 (
ß_Ámûy_t
))

	)

312 
	#_SS_PAD2SIZE
 (
_SS_MAXSIZE
 - () - \

313 (
ß_Ámûy_t
Ë- 
_SS_PAD1SIZE
 - 
_SS_ALIGNSIZE
)

	)

315 
	ssockaddr_°‹age
 {

316 
	mss_Àn
;

317 
ß_Ámûy_t
 
	mss_Ámûy
;

318 
	m__ss_∑d1
[
_SS_PAD1SIZE
];

319 
__öt64_t
 
	m__ss_Æign
;

320 
	m__ss_∑d2
[
_SS_PAD2SIZE
];

322 
	#_STRUCT_SOCKADDR_STORAGE_DECLARED


	)

325 #i‡
__BSD_VISIBLE


329 
	#PF_UNSPEC
 
AF_UNSPEC


	)

330 
	#PF_LOCAL
 
AF_LOCAL


	)

331 
	#PF_UNIX
 
PF_LOCAL


	)

332 
	#PF_INET
 
AF_INET


	)

333 
	#PF_IMPLINK
 
AF_IMPLINK


	)

334 
	#PF_PUP
 
AF_PUP


	)

335 
	#PF_CHAOS
 
AF_CHAOS


	)

336 
	#PF_NETBIOS
 
AF_NETBIOS


	)

337 
	#PF_ISO
 
AF_ISO


	)

338 
	#PF_OSI
 
AF_ISO


	)

339 
	#PF_ECMA
 
AF_ECMA


	)

340 
	#PF_DATAKIT
 
AF_DATAKIT


	)

341 
	#PF_CCITT
 
AF_CCITT


	)

342 
	#PF_SNA
 
AF_SNA


	)

343 
	#PF_DEC√t
 
AF_DEC√t


	)

344 
	#PF_DLI
 
AF_DLI


	)

345 
	#PF_LAT
 
AF_LAT


	)

346 
	#PF_HYLINK
 
AF_HYLINK


	)

347 
	#PF_APPLETALK
 
AF_APPLETALK


	)

348 
	#PF_ROUTE
 
AF_ROUTE


	)

349 
	#PF_LINK
 
AF_LINK


	)

350 
	#PF_XTP
 
p£udo_AF_XTP


	)

351 
	#PF_COIP
 
AF_COIP


	)

352 
	#PF_CNT
 
AF_CNT


	)

353 
	#PF_SIP
 
AF_SIP


	)

354 
	#PF_IPX
 
AF_IPX


	)

355 
	#PF_RTIP
 
p£udo_AF_RTIP


	)

356 
	#PF_PIP
 
p£udo_AF_PIP


	)

357 
	#PF_ISDN
 
AF_ISDN


	)

358 
	#PF_KEY
 
p£udo_AF_KEY


	)

359 
	#PF_INET6
 
AF_INET6


	)

360 
	#PF_NATM
 
AF_NATM


	)

361 
	#PF_ATM
 
AF_ATM


	)

362 
	#PF_NETGRAPH
 
AF_NETGRAPH


	)

363 
	#PF_SLOW
 
AF_SLOW


	)

364 
	#PF_SCLUSTER
 
AF_SCLUSTER


	)

365 
	#PF_ARP
 
AF_ARP


	)

366 
	#PF_BLUETOOTH
 
AF_BLUETOOTH


	)

368 
	#PF_MAX
 
AF_MAX


	)

378 
	#NET_MAXID
 
AF_MAX


	)

380 
	#CTL_NET_NAMES
 { \

382 { "unix", 
CTLTYPE_NODE
 }, \

383 { "öë", 
CTLTYPE_NODE
 }, \

384 { "im∂ök", 
CTLTYPE_NODE
 }, \

385 { "pup", 
CTLTYPE_NODE
 }, \

386 { "chaos", 
CTLTYPE_NODE
 }, \

387 { "xîox_ns", 
CTLTYPE_NODE
 }, \

388 { "iso", 
CTLTYPE_NODE
 }, \

389 { "emˇ", 
CTLTYPE_NODE
 }, \

390 { "d©akô", 
CTLTYPE_NODE
 }, \

391 { "ccôt", 
CTLTYPE_NODE
 }, \

392 { "ibm_¢a", 
CTLTYPE_NODE
 }, \

393 { "de˙ë", 
CTLTYPE_NODE
 }, \

394 { "dec_dli", 
CTLTYPE_NODE
 }, \

395 { "œt", 
CTLTYPE_NODE
 }, \

396 { "hylök", 
CTLTYPE_NODE
 }, \

397 { "≠∂ëÆk", 
CTLTYPE_NODE
 }, \

398 { "rouã", 
CTLTYPE_NODE
 }, \

399 { "lök_œyî", 
CTLTYPE_NODE
 }, \

400 { "xç", 
CTLTYPE_NODE
 }, \

401 { "coù", 
CTLTYPE_NODE
 }, \

402 { "˙t", 
CTLTYPE_NODE
 }, \

403 { "πù", 
CTLTYPE_NODE
 }, \

404 { "ùx", 
CTLTYPE_NODE
 }, \

405 { "sù", 
CTLTYPE_NODE
 }, \

406 { "pù", 
CTLTYPE_NODE
 }, \

407 { "isdn", 
CTLTYPE_NODE
 }, \

408 { "key", 
CTLTYPE_NODE
 }, \

409 { "öë6", 
CTLTYPE_NODE
 }, \

410 { "«tm", 
CTLTYPE_NODE
 }, \

411 { "©m", 
CTLTYPE_NODE
 }, \

412 { "hdrcom∂ëe", 
CTLTYPE_NODE
 }, \

413 { "√tgøph", 
CTLTYPE_NODE
 }, \

414 { "¢p", 
CTLTYPE_NODE
 }, \

415 { "s˝", 
CTLTYPE_NODE
 }, \

416 }

	)

426 
	#NET_RT_DUMP
 1

	)

427 
	#NET_RT_FLAGS
 2

	)

428 
	#NET_RT_IFLIST
 3

	)

429 
	#NET_RT_IFMALIST
 4

	)

430 
	#NET_RT_IFLISTL
 5

	)

432 
	#NET_RT_MAXID
 6

	)

434 
	#CTL_NET_RT_NAMES
 { \

436 { "dump", 
CTLTYPE_STRUCT
 }, \

437 { "Êags", 
CTLTYPE_STRUCT
 }, \

438 { "iÊi°", 
CTLTYPE_STRUCT
 }, \

439 { "ifmÆi°", 
CTLTYPE_STRUCT
 }, \

440 { "iÊi°l", 
CTLTYPE_STRUCT
 }, \

441 }

	)

447 
	#SOMAXCONN
 128

	)

453 
	smsghdr
 {

454 *
	mmsg_«me
;

455 
sockÀn_t
 
	mmsg_«mñí
;

456 
iovec
 *
	mmsg_iov
;

457 
	mmsg_iovÀn
;

458 *
	mmsg_c⁄åﬁ
;

459 
sockÀn_t
 
	mmsg_c⁄åﬁÀn
;

460 
	mmsg_Êags
;

463 
	#MSG_OOB
 0x1

	)

464 
	#MSG_PEEK
 0x2

	)

465 
	#MSG_DONTROUTE
 0x4

	)

466 
	#MSG_EOR
 0x8

	)

467 
	#MSG_TRUNC
 0x10

	)

468 
	#MSG_CTRUNC
 0x20

	)

469 
	#MSG_WAITALL
 0x40

	)

470 
	#MSG_NOTIFICATION
 0x2000

	)

471 #i‡
__BSD_VISIBLE


472 
	#MSG_DONTWAIT
 0x80

	)

473 
	#MSG_EOF
 0x100

	)

474 
	#MSG_NBIO
 0x4000

	)

475 
	#MSG_COMPAT
 0x8000

	)

477 #ifde‡
_KERNEL


478 
	#MSG_SOCALLBCK
 0x10000

	)

480 #i‡
__BSD_VISIBLE


481 
	#MSG_NOSIGNAL
 0x20000

	)

490 
	scmsghdr
 {

491 
sockÀn_t
 
	mcmsg_Àn
;

492 
	mcmsg_Àvñ
;

493 
	mcmsg_ty≥
;

497 #i‡
__BSD_VISIBLE


503 
	#CMGROUP_MAX
 16

	)

512 
	scmsg¸ed
 {

513 
pid_t
 
	mcm¸ed_pid
;

514 
uid_t
 
	mcm¸ed_uid
;

515 
uid_t
 
	mcm¸ed_euid
;

516 
gid_t
 
	mcm¸ed_gid
;

517 
	mcm¸ed_ngroups
;

518 
gid_t
 
	mcm¸ed_groups
[
CMGROUP_MAX
];

524 
	ssock¸ed
 {

525 
uid_t
 
	msc_uid
;

526 
uid_t
 
	msc_euid
;

527 
gid_t
 
	msc_gid
;

528 
gid_t
 
	msc_egid
;

529 
	msc_ngroups
;

530 
gid_t
 
	msc_groups
[1];

536 
	#SOCKCREDSIZE
(
ngΩs
) \

537 ((
sock¸ed
Ë+ ((
gid_t
Ë* ((
ngΩs
Ë- 1)))

	)

542 
	#CMSG_DATA
(
cmsg
) ((*)(cmsg) + \

543 
	`_ALIGN
((
cmsghdr
)))

	)

546 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
) \

547 ((*)(
cmsg
Ë=
NULL
 ? 
	`CMSG_FIRSTHDR
(
mhdr
) : \

548 ((*)(
cmsg
Ë+ 
	`_ALIGN
(((
cmsghdr
 *)(cmsg))->
cmsg_Àn
) + \

549 
	`_ALIGN
((
cmsghdr
)) > \

550 (*)(
mhdr
)->
msg_c⁄åﬁ
 + (mhdr)->
msg_c⁄åﬁÀn
) ? \

551 (
cmsghdr
 *)0 : \

552 (
cmsghdr
 *)((*)(
cmsg
) + \

553 
	`_ALIGN
(((
cmsghdr
 *)(
cmsg
))->
cmsg_Àn
)))

	)

559 
	#CMSG_FIRSTHDR
(
mhdr
) \

560 ((
mhdr
)->
msg_c⁄åﬁÀn
 >(
cmsghdr
) ? \

561 (
cmsghdr
 *)(
mhdr
)->
msg_c⁄åﬁ
 : \

562 (
cmsghdr
 *)
NULL
)

	)

564 #i‡
__BSD_VISIBLE


566 
	#CMSG_SPACE
(
l
Ë(
	`_ALIGN
((
cmsghdr
)Ë+ _ALIGN÷))

	)

567 
	#CMSG_LEN
(
l
Ë(
	`_ALIGN
((
cmsghdr
)Ë+ (l))

	)

570 #ifde‡
_KERNEL


571 
	#CMSG_ALIGN
(
n
Ë
	`_ALIGN
“)

	)

575 
	#SCM_RIGHTS
 0x01

	)

576 #i‡
__BSD_VISIBLE


577 
	#SCM_TIMESTAMP
 0x02

	)

578 
	#SCM_CREDS
 0x03

	)

579 
	#SCM_BINTIME
 0x04

	)

582 #i‡
__BSD_VISIBLE


586 
	sosockaddr
 {

587 
	mß_Ámûy
;

588 
	mß_d©a
[14];

594 
	somsghdr
 {

595 *
	mmsg_«me
;

596 
	mmsg_«mñí
;

597 
iovec
 *
	mmsg_iov
;

598 
	mmsg_iovÀn
;

599 *
	mmsg_ac¸ights
;

600 
	mmsg_ac¸ight¶í
;

607 
	#SHUT_RD
 0

	)

608 
	#SHUT_WR
 1

	)

609 
	#SHUT_RDWR
 2

	)

612 
	#PRU_FLUSH_RD
 
SHUT_RD


	)

613 
	#PRU_FLUSH_WR
 
SHUT_WR


	)

614 
	#PRU_FLUSH_RDWR
 
SHUT_RDWR


	)

617 #i‡
__BSD_VISIBLE


621 
	ssf_hdå
 {

622 
iovec
 *
	mhódîs
;

623 
	mhdr_˙t
;

624 
iovec
 *
	måaûîs
;

625 
	mål_˙t
;

631 
	#SF_NODISKIO
 0x00000001

	)

632 
	#SF_MNOWAIT
 0x00000002

	)

633 
	#SF_SYNC
 0x00000004

	)

636 #i‚def 
_KERNEL


638 
	~<sys/cdefs.h
>

640 
__BEGIN_DECLS


641 
ac˚±
(, 
sockaddr
 * 
__ª°ri˘
, 
sockÀn_t
 * __restrict);

642 
böd
(, c⁄° 
sockaddr
 *, 
sockÀn_t
);

643 
c⁄√˘
(, c⁄° 
sockaddr
 *, 
sockÀn_t
);

644 
gë≥î«me
(, 
sockaddr
 * 
__ª°ri˘
, 
sockÀn_t
 * __restrict);

645 
gësock«me
(, 
sockaddr
 * 
__ª°ri˘
, 
sockÀn_t
 * __restrict);

646 
gësock›t
(, , , * 
__ª°ri˘
, 
sockÀn_t
 * __restrict);

647 
li°í
(, );

648 
ssize_t
 
ªcv
(, *, 
size_t
, );

649 
ssize_t
 
ªcv‰om
(, *, 
size_t
, , 
sockaddr
 * 
__ª°ri˘
, 
sockÀn_t
 * __restrict);

650 
ssize_t
 
ªcvmsg
(, 
msghdr
 *, );

651 
ssize_t
 
£nd
(, c⁄° *, 
size_t
, );

652 
ssize_t
 
£ndto
(, const *,

653 
size_t
, , c⁄° 
sockaddr
 *, 
sockÀn_t
);

654 
ssize_t
 
£ndmsg
(, c⁄° 
msghdr
 *, );

655 #i‡
__BSD_VISIBLE


656 
£ndfûe
(, , 
off_t
, 
size_t
, 
sf_hdå
 *, off_t *, );

657 
£tfib
();

659 
£tsock›t
(, , , c⁄° *, 
sockÀn_t
);

660 
shutdown
(, );

661 
sock©m¨k
();

662 
sockë
(, , );

663 
sockë∑ú
(, , , *);

664 
	g__END_DECLS


668 #ifde‡
_KERNEL


669 
	gsockë
;

671 
t˝cb
 *
so_sŸŸ˝cb
(
sockë
 *
so
);

672 
öpcb
 *
so_sŸoöpcb
(
sockë
 *
so
);

673 
sockbuf
 *
so_sockbuf_¢d
(
sockë
 *);

674 
sockbuf
 *
so_sockbuf_rcv
(
sockë
 *);

676 
so_°©e_gë
(c⁄° 
sockë
 *);

677 
so_°©e_£t
(
sockë
 *, );

679 
so_›ti⁄s_gë
(c⁄° 
sockë
 *);

680 
so_›ti⁄s_£t
(
sockë
 *, );

682 
so_îr‹_gë
(c⁄° 
sockë
 *);

683 
so_îr‹_£t
(
sockë
 *, );

685 
so_lögî_gë
(c⁄° 
sockë
 *);

686 
so_lögî_£t
(
sockë
 *, );

688 
¥Ÿosw
 *
so_¥Ÿosw_gë
(c⁄° 
sockë
 *);

689 
so_¥Ÿosw_£t
(
sockë
 *, 
¥Ÿosw
 *);

691 
so_s‹wakeup_locked
(
sockë
 *
so
);

692 
so_sowwakeup_locked
(
sockë
 *
so
);

694 
so_s‹wakeup
(
sockë
 *
so
);

695 
so_sowwakeup
(
sockë
 *
so
);

697 
so_lock
(
sockë
 *
so
);

698 
so_u∆ock
(
sockë
 *
so
);

700 
so_li°íîs_≠∂y_Æl
(
sockë
 *
so
, (*
func
)(sockë *, *), *
¨g
);

	@/usr/include/sys/stat.h

38 #i‚de‡
_SYS_STAT_H_


39 
	#_SYS_STAT_H_


	)

41 
	~<sys/cdefs.h
>

42 
	~<sys/_ty≥s.h
>

44 #i‚de‡
_BLKSIZE_T_DECLARED


45 
__blksize_t
 
	tblksize_t
;

46 
	#_BLKSIZE_T_DECLARED


	)

49 #i‚de‡
_BLKCNT_T_DECLARED


50 
__blk˙t_t
 
	tblk˙t_t
;

51 
	#_BLKCNT_T_DECLARED


	)

54 #i‚de‡
_DEV_T_DECLARED


55 
__dev_t
 
	tdev_t
;

56 
	#_DEV_T_DECLARED


	)

59 #i‚de‡
_FFLAGS_T_DECLARED


60 
__fÊags_t
 
	tfÊags_t
;

61 
	#_FFLAGS_T_DECLARED


	)

64 #i‚de‡
_GID_T_DECLARED


65 
__gid_t
 
	tgid_t
;

66 
	#_GID_T_DECLARED


	)

69 #i‚de‡
_INO_T_DECLARED


70 
__öo_t
 
	töo_t
;

71 
	#_INO_T_DECLARED


	)

74 #i‚de‡
_MODE_T_DECLARED


75 
__mode_t
 
	tmode_t
;

76 
	#_MODE_T_DECLARED


	)

79 #i‚de‡
_NLINK_T_DECLARED


80 
__∆ök_t
 
	t∆ök_t
;

81 
	#_NLINK_T_DECLARED


	)

84 #i‚de‡
_OFF_T_DECLARED


85 
__off_t
 
	toff_t
;

86 
	#_OFF_T_DECLARED


	)

89 #i‚de‡
_TIME_T_DECLARED


90 
__time_t
 
	ttime_t
;

91 
	#_TIME_T_DECLARED


	)

94 #i‚de‡
_UID_T_DECLARED


95 
__uid_t
 
	tuid_t
;

96 
	#_UID_T_DECLARED


	)

99 #i‡!
deföed
(
_KERNEL
Ë&& 
__BSD_VISIBLE


104 
	~<sys/time.h
>

107 #i‡!
__BSD_VISIBLE


108 
	~<sys/_time•ec.h
>

111 #i‡
__BSD_VISIBLE


112 
	so°©
 {

113 
__uöt16_t
 
	m°_dev
;

114 
öo_t
 
	m°_öo
;

115 
mode_t
 
	m°_mode
;

116 
∆ök_t
 
	m°_∆ök
;

117 
__uöt16_t
 
	m°_uid
;

118 
__uöt16_t
 
	m°_gid
;

119 
__uöt16_t
 
	m°_rdev
;

120 
__öt32_t
 
	m°_size
;

121 
time•ec
 
	m°_©ime•ec
;

122 
time•ec
 
	m°_mtime•ec
;

123 
time•ec
 
	m°_˘ime•ec
;

124 
__öt32_t
 
	m°_blksize
;

125 
__öt32_t
 
	m°_blocks
;

126 
fÊags_t
 
	m°_Êags
;

127 
__uöt32_t
 
	m°_gí
;

131 
	s°©
 {

132 
__dev_t
 
	m°_dev
;

133 
öo_t
 
	m°_öo
;

134 
mode_t
 
	m°_mode
;

135 
∆ök_t
 
	m°_∆ök
;

136 
uid_t
 
	m°_uid
;

137 
gid_t
 
	m°_gid
;

138 
__dev_t
 
	m°_rdev
;

139 #i‡
__BSD_VISIBLE


140 
time•ec
 
	m°_©ime•ec
;

141 
time•ec
 
	m°_mtime•ec
;

142 
time•ec
 
	m°_˘ime•ec
;

144 
time_t
 
	m°_©ime
;

145 
	m__°_©imí£c
;

146 
time_t
 
	m°_mtime
;

147 
	m__°_mtimí£c
;

148 
time_t
 
	m°_˘ime
;

149 
	m__°_˘imí£c
;

151 
off_t
 
	m°_size
;

152 
blk˙t_t
 
	m°_blocks
;

153 
blksize_t
 
	m°_blksize
;

154 
fÊags_t
 
	m°_Êags
;

155 
__uöt32_t
 
	m°_gí
;

156 
__öt32_t
 
	m°_l•¨e
;

157 #i‡
__BSD_VISIBLE


158 
time•ec
 
	m°_búthtime•ec
;

167 :(8 / 2Ë* (16 - ()(
time•ec
));

168 :(8 / 2Ë* (16 - ()(
time•ec
));

170 
time_t
 
	m°_búthtime
;

171 
	m°_búthtimí£c
;

172 :(8 / 2Ë* (16 - ()(
__time•ec
));

173 :(8 / 2Ë* (16 - ()(
__time•ec
));

177 #i‡
__BSD_VISIBLE


178 
	sn°©
 {

179 
__dev_t
 
	m°_dev
;

180 
öo_t
 
	m°_öo
;

181 
__uöt32_t
 
	m°_mode
;

182 
__uöt32_t
 
	m°_∆ök
;

183 
uid_t
 
	m°_uid
;

184 
gid_t
 
	m°_gid
;

185 
__dev_t
 
	m°_rdev
;

186 
time•ec
 
	m°_©ime•ec
;

187 
time•ec
 
	m°_mtime•ec
;

188 
time•ec
 
	m°_˘ime•ec
;

189 
off_t
 
	m°_size
;

190 
blk˙t_t
 
	m°_blocks
;

191 
blksize_t
 
	m°_blksize
;

192 
fÊags_t
 
	m°_Êags
;

193 
__uöt32_t
 
	m°_gí
;

194 
time•ec
 
	m°_búthtime•ec
;

198 :(8 / 2Ë* (16 - ()(
time•ec
));

199 :(8 / 2Ë* (16 - ()(
time•ec
));

203 #i‡
__BSD_VISIBLE


204 
	#°_©ime
 
°_©ime•ec
.
tv_£c


	)

205 
	#°_mtime
 
°_mtime•ec
.
tv_£c


	)

206 
	#°_˘ime
 
°_˘ime•ec
.
tv_£c


	)

207 
	#°_búthtime
 
°_búthtime•ec
.
tv_£c


	)

210 
	#S_ISUID
 0004000

	)

211 
	#S_ISGID
 0002000

	)

212 #i‡
__BSD_VISIBLE


213 
	#S_ISTXT
 0001000

	)

216 
	#S_IRWXU
 0000700

	)

217 
	#S_IRUSR
 0000400

	)

218 
	#S_IWUSR
 0000200

	)

219 
	#S_IXUSR
 0000100

	)

221 #i‡
__BSD_VISIBLE


222 
	#S_IREAD
 
S_IRUSR


	)

223 
	#S_IWRITE
 
S_IWUSR


	)

224 
	#S_IEXEC
 
S_IXUSR


	)

227 
	#S_IRWXG
 0000070

	)

228 
	#S_IRGRP
 0000040

	)

229 
	#S_IWGRP
 0000020

	)

230 
	#S_IXGRP
 0000010

	)

232 
	#S_IRWXO
 0000007

	)

233 
	#S_IROTH
 0000004

	)

234 
	#S_IWOTH
 0000002

	)

235 
	#S_IXOTH
 0000001

	)

237 #i‡
__XSI_VISIBLE


238 
	#S_IFMT
 0170000

	)

239 
	#S_IFIFO
 0010000

	)

240 
	#S_IFCHR
 0020000

	)

241 
	#S_IFDIR
 0040000

	)

242 
	#S_IFBLK
 0060000

	)

243 
	#S_IFREG
 0100000

	)

244 
	#S_IFLNK
 0120000

	)

245 
	#S_IFSOCK
 0140000

	)

246 
	#S_ISVTX
 0001000

	)

248 #i‡
__BSD_VISIBLE


249 
	#S_IFWHT
 0160000

	)

252 
	#S_ISDIR
(
m
Ë(((mË& 0170000Ë=0040000Ë

	)

253 
	#S_ISCHR
(
m
Ë(((mË& 0170000Ë=0020000Ë

	)

254 
	#S_ISBLK
(
m
Ë(((mË& 0170000Ë=0060000Ë

	)

255 
	#S_ISREG
(
m
Ë(((mË& 0170000Ë=0100000Ë

	)

256 
	#S_ISFIFO
(
m
Ë(((mË& 0170000Ë=0010000Ë

	)

257 #i‡
__POSIX_VISIBLE
 >= 200112

258 
	#S_ISLNK
(
m
Ë(((mË& 0170000Ë=0120000Ë

	)

259 
	#S_ISSOCK
(
m
Ë(((mË& 0170000Ë=0140000Ë

	)

261 #i‡
__BSD_VISIBLE


262 
	#S_ISWHT
(
m
Ë(((mË& 0170000Ë=0160000Ë

	)

265 #i‡
__BSD_VISIBLE


266 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

268 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISTXT
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

270 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

272 
	#S_BLKSIZE
 512

	)

279 
	#UF_SETTABLE
 0x0000fff‡

	)

280 
	#UF_NODUMP
 0x00000001

	)

281 
	#UF_IMMUTABLE
 0x00000002

	)

282 
	#UF_APPEND
 0x00000004

	)

283 
	#UF_OPAQUE
 0x00000008

	)

284 
	#UF_NOUNLINK
 0x00000010

	)

288 
	#SF_SETTABLE
 0xffff0000

	)

289 
	#SF_ARCHIVED
 0x00010000

	)

290 
	#SF_IMMUTABLE
 0x00020000

	)

291 
	#SF_APPEND
 0x00040000

	)

292 
	#SF_NOUNLINK
 0x00100000

	)

293 
	#SF_SNAPSHOT
 0x00200000

	)

295 #ifde‡
_KERNEL


299 
	#OPAQUE
 (
UF_OPAQUE
)

	)

300 
	#APPEND
 (
UF_APPEND
 | 
SF_APPEND
)

	)

301 
	#IMMUTABLE
 (
UF_IMMUTABLE
 | 
SF_IMMUTABLE
)

	)

302 
	#NOUNLINK
 (
UF_NOUNLINK
 | 
SF_NOUNLINK
)

	)

307 #i‚de‡
_KERNEL


308 
	g__BEGIN_DECLS


309 #i‡
__BSD_VISIBLE


310 
chÊags
(const *, );

312 
chmod
(c⁄° *, 
mode_t
);

313 #i‡
__BSD_VISIBLE


314 
fchÊags
(, );

316 #i‡
__POSIX_VISIBLE
 >= 200112

317 
fchmod
(, 
mode_t
);

319 #i‡
__POSIX_VISIBLE
 >= 200809

320 
fchmod©
(, c⁄° *, 
mode_t
, );

322 
f°©
(, 
°©
 *);

323 #i‡
__BSD_VISIBLE


324 
lchÊags
(const *, );

325 
lchmod
(c⁄° *, 
mode_t
);

327 #i‡
__POSIX_VISIBLE
 >= 200112

328 
l°©
(c⁄° * 
__ª°ri˘
, 
°©
 * __restrict);

330 
mkdú
(c⁄° *, 
mode_t
);

331 
mkfifo
(c⁄° *, 
mode_t
);

332 #i‡!
deföed
(
_MKNOD_DECLARED
Ë&& 
__XSI_VISIBLE


333 
mknod
(c⁄° *, 
mode_t
, 
dev_t
);

334 
	#_MKNOD_DECLARED


	)

336 
°©
(c⁄° * 
__ª°ri˘
, stat * __restrict);

337 
mode_t
 
umask
(mode_t);

338 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200809

339 
f°©©
(, c⁄° *, 
°©
 *, );

340 
mkdú©
(, c⁄° *, 
mode_t
);

341 
mkfifﬂt
(, c⁄° *, 
mode_t
);

343 #i‡
__BSD_VISIBLE
 || 
__XSI_VISIBLE
 >= 700

344 
mknod©
(, c⁄° *, 
mode_t
, 
dev_t
);

346 
	g__END_DECLS


	@/usr/include/sys/time.h

33 #i‚de‡
_SYS_TIME_H_


34 
	#_SYS_TIME_H_


	)

36 
	~<sys/_timevÆ.h
>

37 
	~<sys/ty≥s.h
>

38 
	~<sys/time•ec.h
>

40 
	stimez⁄e
 {

41 
	mtz_möuãswe°
;

42 
	mtz_d°time
;

44 
	#DST_NONE
 0

	)

45 
	#DST_USA
 1

	)

46 
	#DST_AUST
 2

	)

47 
	#DST_WET
 3

	)

48 
	#DST_MET
 4

	)

49 
	#DST_EET
 5

	)

50 
	#DST_CAN
 6

	)

52 #i‡
__BSD_VISIBLE


53 
	sbötime
 {

54 
time_t
 
	m£c
;

55 
uöt64_t
 
	m‰ac
;

58 
__ölöe
 

59 
	$bötime_addx
(
bötime
 *
bt
, 
uöt64_t
 
x
)

61 
uöt64_t
 
u
;

63 
u
 = 
bt
->
‰ac
;

64 
bt
->
‰ac
 +
x
;

65 i‡(
u
 > 
bt
->
‰ac
)

66 
bt
->
£c
++;

67 
	}
}

69 
__ölöe
 

70 
	$bötime_add
(
bötime
 *
bt
, c⁄° bötimê*
bt2
)

72 
uöt64_t
 
u
;

74 
u
 = 
bt
->
‰ac
;

75 
bt
->
‰ac
 +
bt2
->frac;

76 i‡(
u
 > 
bt
->
‰ac
)

77 
bt
->
£c
++;

78 
bt
->
£c
 +
bt2
->sec;

79 
	}
}

81 
__ölöe
 

82 
	$bötime_sub
(
bötime
 *
bt
, c⁄° bötimê*
bt2
)

84 
uöt64_t
 
u
;

86 
u
 = 
bt
->
‰ac
;

87 
bt
->
‰ac
 -
bt2
->frac;

88 i‡(
u
 < 
bt
->
‰ac
)

89 
bt
->
£c
--;

90 
bt
->
£c
 -
bt2
->sec;

91 
	}
}

107 
__ölöe
 

108 
	$bötime2time•ec
(c⁄° 
bötime
 *
bt
, 
time•ec
 *
ts
)

111 
ts
->
tv_£c
 = 
bt
->
£c
;

112 
ts
->
tv_n£c
 = ((
uöt64_t
)1000000000 * (
uöt32_t
)(
bt
->
‰ac
 >> 32)) >> 32;

113 
	}
}

115 
__ölöe
 

116 
	$time•ec2bötime
(c⁄° 
time•ec
 *
ts
, 
bötime
 *
bt
)

119 
bt
->
£c
 = 
ts
->
tv_£c
;

121 
bt
->
‰ac
 = 
ts
->
tv_n£c
 * (
uöt64_t
)18446744073LL;

122 
	}
}

124 
__ölöe
 

125 
	$bötime2timevÆ
(c⁄° 
bötime
 *
bt
, 
timevÆ
 *
tv
)

128 
tv
->
tv_£c
 = 
bt
->
£c
;

129 
tv
->
tv_u£c
 = ((
uöt64_t
)1000000 * (
uöt32_t
)(
bt
->
‰ac
 >> 32)) >> 32;

130 
	}
}

132 
__ölöe
 

133 
	$timevÆ2bötime
(c⁄° 
timevÆ
 *
tv
, 
bötime
 *
bt
)

136 
bt
->
£c
 = 
tv
->
tv_£c
;

138 
bt
->
‰ac
 = 
tv
->
tv_u£c
 * (
uöt64_t
)18446744073709LL;

139 
	}
}

142 #ifde‡
_KERNEL


145 
	#time•ec˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_n£c
 = 0)

	)

146 
	#time•ecis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_n£c
)

	)

147 
	#time•eccmp
(
tvp
, 
uvp
, 
cmp
) \

148 (((
tvp
)->
tv_£c
 =(
uvp
)->tv_sec) ? \

149 ((
tvp
)->
tv_n£c
 
	`cmp
 (
uvp
)->tv_nsec) : \

150 ((
tvp
)->
tv_£c
 
	`cmp
 (
uvp
)->tv_£c))

	)

151 
	#time•eˇdd
(
vvp
, 
uvp
) \

153 (
vvp
)->
tv_£c
 +(
uvp
)->tv_sec; \

154 (
vvp
)->
tv_n£c
 +(
uvp
)->tv_nsec; \

155 i‡((
vvp
)->
tv_n£c
 >= 1000000000) { \

156 (
vvp
)->
tv_£c
++; \

157 (
vvp
)->
tv_n£c
 -= 1000000000; \

159 } 0)

	)

160 
	#time•ecsub
(
vvp
, 
uvp
) \

162 (
vvp
)->
tv_£c
 -(
uvp
)->tv_sec; \

163 (
vvp
)->
tv_n£c
 -(
uvp
)->tv_nsec; \

164 i‡((
vvp
)->
tv_n£c
 < 0) { \

165 (
vvp
)->
tv_£c
--; \

166 (
vvp
)->
tv_n£c
 += 1000000000; \

168 } 0)

	)

172 
	#timevÆ˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

173 
	#timevÆis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

174 
	#timevÆcmp
(
tvp
, 
uvp
, 
cmp
) \

175 (((
tvp
)->
tv_£c
 =(
uvp
)->tv_sec) ? \

176 ((
tvp
)->
tv_u£c
 
	`cmp
 (
uvp
)->tv_usec) : \

177 ((
tvp
)->
tv_£c
 
	`cmp
 (
uvp
)->tv_£c))

	)

183 #i‚de‡
_KERNEL


185 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

186 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

187 
	#timîcmp
(
tvp
, 
uvp
, 
cmp
) \

188 (((
tvp
)->
tv_£c
 =(
uvp
)->tv_sec) ? \

189 ((
tvp
)->
tv_u£c
 
	`cmp
 (
uvp
)->tv_usec) : \

190 ((
tvp
)->
tv_£c
 
	`cmp
 (
uvp
)->tv_£c))

	)

191 
	#timîadd
(
tvp
, 
uvp
, 
vvp
) \

193 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£¯+ (
uvp
)->tv_sec; \

194 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£¯+ (
uvp
)->tv_usec; \

195 i‡((
vvp
)->
tv_u£c
 >= 1000000) { \

196 (
vvp
)->
tv_£c
++; \

197 (
vvp
)->
tv_u£c
 -= 1000000; \

199 } 0)

	)

200 
	#timîsub
(
tvp
, 
uvp
, 
vvp
) \

202 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£¯- (
uvp
)->tv_sec; \

203 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£¯- (
uvp
)->tv_usec; \

204 i‡((
vvp
)->
tv_u£c
 < 0) { \

205 (
vvp
)->
tv_£c
--; \

206 (
vvp
)->
tv_u£c
 += 1000000; \

208 } 0)

	)

215 
	#ITIMER_REAL
 0

	)

216 
	#ITIMER_VIRTUAL
 1

	)

217 
	#ITIMER_PROF
 2

	)

219 
	sôimîvÆ
 {

220 
timevÆ
 
	mô_öãrvÆ
;

221 
timevÆ
 
	mô_vÆue
;

227 
	s˛ocköfo
 {

228 
	mhz
;

229 
	mtick
;

230 
	m•¨e
;

231 
	m°©hz
;

232 
	m¥ofhz
;

236 #i‚de‡
CLOCK_REALTIME


237 
	#CLOCK_REALTIME
 0

	)

238 
	#CLOCK_VIRTUAL
 1

	)

239 
	#CLOCK_PROF
 2

	)

240 
	#CLOCK_MONOTONIC
 4

	)

241 
	#CLOCK_UPTIME
 5

	)

242 
	#CLOCK_UPTIME_PRECISE
 7

	)

243 
	#CLOCK_UPTIME_FAST
 8

	)

244 
	#CLOCK_REALTIME_PRECISE
 9

	)

245 
	#CLOCK_REALTIME_FAST
 10

	)

246 
	#CLOCK_MONOTONIC_PRECISE
 11

	)

247 
	#CLOCK_MONOTONIC_FAST
 12

	)

248 
	#CLOCK_SECOND
 13

	)

249 
	#CLOCK_THREAD_CPUTIME_ID
 14

	)

252 #i‚de‡
TIMER_ABSTIME


253 
	#TIMER_RELTIME
 0x0

	)

254 
	#TIMER_ABSTIME
 0x1

	)

257 #ifde‡
_KERNEL


262 
öôtodr
(
time_t
 
ba£
);

263 
ª£âodr
();

265 vﬁ©ûê
time_t
 
time_£c⁄d
;

266 vﬁ©ûê
time_t
 
time_u±ime
;

267 
timevÆ
 
boŸtime
;

291 
böu±ime
(
bötime
 *
bt
);

292 
«nou±ime
(
time•ec
 *
t•
);

293 
mi¸ou±ime
(
timevÆ
 *
tvp
);

295 
bötime
(bötimê*
bt
);

296 
«nŸime
(
time•ec
 *
t•
);

297 
mi¸Ÿime
(
timevÆ
 *
tvp
);

299 
gëböu±ime
(
bötime
 *
bt
);

300 
gë«nou±ime
(
time•ec
 *
t•
);

301 
gëmi¸ou±ime
(
timevÆ
 *
tvp
);

303 
gëbötime
(
bötime
 *
bt
);

304 
gë«nŸime
(
time•ec
 *
t•
);

305 
gëmi¸Ÿime
(
timevÆ
 *
tvp
);

308 
ôimîde¸
(
ôimîvÆ
 *
ôp
, 
u£c
);

309 
ôimîfix
(
timevÆ
 *
tv
);

310 
µ§©echeck
(
timevÆ
 *, *, );

311 
øãcheck
(
timevÆ
 *, const timeval *);

312 
timevÆadd
(
timevÆ
 *
t1
, c⁄° timevÆ *
t2
);

313 
timevÆsub
(
timevÆ
 *
t1
, c⁄° timevÆ *
t2
);

314 
tvtohz
(
timevÆ
 *
tv
);

316 
	~<time.h
>

318 
	~<sys/cdefs.h
>

319 
	~<sys/£À˘.h
>

321 
__BEGIN_DECLS


322 
£tôimî
(, c⁄° 
ôimîvÆ
 *, itimerval *);

323 
utimes
(c⁄° *, c⁄° 
timevÆ
 *);

325 #i‡
__BSD_VISIBLE


326 
adjtime
(c⁄° 
timevÆ
 *, timeval *);

327 
futimes
(, c⁄° 
timevÆ
 *);

328 
futimeßt
(, c⁄° *, c⁄° 
timevÆ
 [2]);

329 
lutimes
(c⁄° *, c⁄° 
timevÆ
 *);

330 
£âimeofday
(c⁄° 
timevÆ
 *, c⁄° 
timez⁄e
 *);

333 #i‡
__XSI_VISIBLE


334 
gëôimî
(, 
ôimîvÆ
 *);

335 
gëtimeofday
(
timevÆ
 *, 
timez⁄e
 *);

338 
	g__END_DECLS


	@/usr/include/sys/times.h

38 #i‚def 
_SYS_TIMES_H_


39 
	#_SYS_TIMES_H_


	)

41 
	~<sys/_ty≥s.h
>

43 #i‚de‡
_CLOCK_T_DECLARED


44 
__˛ock_t
 
	t˛ock_t
;

45 
	#_CLOCK_T_DECLARED


	)

48 
	stms
 {

49 
˛ock_t
 
	mtms_utime
;

50 
˛ock_t
 
	mtms_°ime
;

51 
˛ock_t
 
	mtms_cutime
;

52 
˛ock_t
 
	mtms_c°ime
;

55 #i‚de‡
_KERNEL


56 
	~<sys/cdefs.h
>

58 
__BEGIN_DECLS


59 
˛ock_t
 
times
(
tms
 *);

60 
	g__END_DECLS


	@/usr/include/sys/types.h

38 #i‚de‡
_SYS_TYPES_H_


39 
	#_SYS_TYPES_H_


	)

41 
	~<sys/cdefs.h
>

44 
	~<machöe/ídün.h
>

45 
	~<sys/_ty≥s.h
>

47 
	~<sys/_±hªadty≥s.h
>

49 #i‡
__BSD_VISIBLE


50 
	tu_ch¨
;

51 
	tu_sh‹t
;

52 
	tu_öt
;

53 
	tu_l⁄g
;

54 #i‚de‡
_KERNEL


55 
	tush‹t
;

56 
	tuöt
;

63 #i‚de‡
_INT8_T_DECLARED


64 
__öt8_t
 
	töt8_t
;

65 
	#_INT8_T_DECLARED


	)

68 #i‚de‡
_INT16_T_DECLARED


69 
__öt16_t
 
	töt16_t
;

70 
	#_INT16_T_DECLARED


	)

73 #i‚de‡
_INT32_T_DECLARED


74 
__öt32_t
 
	töt32_t
;

75 
	#_INT32_T_DECLARED


	)

78 #i‚de‡
_INT64_T_DECLARED


79 
__öt64_t
 
	töt64_t
;

80 
	#_INT64_T_DECLARED


	)

83 #i‚de‡
_UINT8_T_DECLARED


84 
__uöt8_t
 
	tuöt8_t
;

85 
	#_UINT8_T_DECLARED


	)

88 #i‚de‡
_UINT16_T_DECLARED


89 
__uöt16_t
 
	tuöt16_t
;

90 
	#_UINT16_T_DECLARED


	)

93 #i‚de‡
_UINT32_T_DECLARED


94 
__uöt32_t
 
	tuöt32_t
;

95 
	#_UINT32_T_DECLARED


	)

98 #i‚de‡
_UINT64_T_DECLARED


99 
__uöt64_t
 
	tuöt64_t
;

100 
	#_UINT64_T_DECLARED


	)

103 #i‚de‡
_INTPTR_T_DECLARED


104 
__öçå_t
 
	töçå_t
;

105 
__uöçå_t
 
	tuöçå_t
;

106 
	#_INTPTR_T_DECLARED


	)

109 
__uöt8_t
 
	tu_öt8_t
;

110 
__uöt16_t
 
	tu_öt16_t
;

111 
__uöt32_t
 
	tu_öt32_t
;

112 
__uöt64_t
 
	tu_öt64_t
;

114 
__uöt64_t
 
	tu_quad_t
;

115 
__öt64_t
 
	tquad_t
;

116 
quad_t
 * 
	tqaddr_t
;

118 * 
	tˇddr_t
;

119 
__c⁄°
 * 
	tc_ˇddr_t
;

120 
__vﬁ©ûe
 *
	tv_ˇddr_t
;

122 #i‚de‡
_BLKSIZE_T_DECLARED


123 
__blksize_t
 
	tblksize_t
;

124 
	#_BLKSIZE_T_DECLARED


	)

127 
__˝uwhich_t
 
	t˝uwhich_t
;

128 
__˝uÀvñ_t
 
	t˝uÀvñ_t
;

129 
__˝u£tid_t
 
	t˝u£tid_t
;

131 #i‚de‡
_BLKCNT_T_DECLARED


132 
__blk˙t_t
 
	tblk˙t_t
;

133 
	#_BLKCNT_T_DECLARED


	)

136 #i‚de‡
_CLOCK_T_DECLARED


137 
__˛ock_t
 
	t˛ock_t
;

138 
	#_CLOCK_T_DECLARED


	)

141 #i‚de‡
_CLOCKID_T_DECLARED


142 
__˛ockid_t
 
	t˛ockid_t
;

143 
	#_CLOCKID_T_DECLARED


	)

146 
__˝umask_t
 
	t˝umask_t
;

147 
__¸ôiˇl_t
 
	t¸ôiˇl_t
;

148 
__öt64_t
 
	tdaddr_t
;

150 #i‚de‡
_DEV_T_DECLARED


151 
__dev_t
 
	tdev_t
;

152 
	#_DEV_T_DECLARED


	)

155 #i‚de‡
_FFLAGS_T_DECLARED


156 
__fÊags_t
 
	tfÊags_t
;

157 
	#_FFLAGS_T_DECLARED


	)

160 
__fix±_t
 
	tfix±_t
;

162 #i‚de‡
_FSBLKCNT_T_DECLARED


163 
__fsblk˙t_t
 
	tfsblk˙t_t
;

164 
__fsfû˙t_t
 
	tfsfû˙t_t
;

165 
	#_FSBLKCNT_T_DECLARED


	)

168 #i‚de‡
_GID_T_DECLARED


169 
__gid_t
 
	tgid_t
;

170 
	#_GID_T_DECLARED


	)

173 #i‚de‡
_IN_ADDR_T_DECLARED


174 
__uöt32_t
 
	tö_addr_t
;

175 
	#_IN_ADDR_T_DECLARED


	)

178 #i‚de‡
_IN_PORT_T_DECLARED


179 
__uöt16_t
 
	tö_p‹t_t
;

180 
	#_IN_PORT_T_DECLARED


	)

183 #i‚de‡
_ID_T_DECLARED


184 
__id_t
 
	tid_t
;

185 
	#_ID_T_DECLARED


	)

188 #i‚de‡
_INO_T_DECLARED


189 
__öo_t
 
	töo_t
;

190 
	#_INO_T_DECLARED


	)

193 #i‚de‡
_KEY_T_DECLARED


194 
__key_t
 
	tkey_t
;

195 
	#_KEY_T_DECLARED


	)

198 #i‚de‡
_LWPID_T_DECLARED


199 
__lwpid_t
 
	tlwpid_t
;

200 
	#_LWPID_T_DECLARED


	)

203 #i‚de‡
_MODE_T_DECLARED


204 
__mode_t
 
	tmode_t
;

205 
	#_MODE_T_DECLARED


	)

208 #i‚de‡
_ACCMODE_T_DECLARED


209 
__accmode_t
 
	taccmode_t
;

210 
	#_ACCMODE_T_DECLARED


	)

213 #i‚de‡
_NLINK_T_DECLARED


214 
__∆ök_t
 
	t∆ök_t
;

215 
	#_NLINK_T_DECLARED


	)

218 #i‚de‡
_OFF_T_DECLARED


219 
__off_t
 
	toff_t
;

220 
	#_OFF_T_DECLARED


	)

223 #i‚de‡
_PID_T_DECLARED


224 
__pid_t
 
	tpid_t
;

225 
	#_PID_T_DECLARED


	)

228 
__ªgi°î_t
 
	tªgi°î_t
;

230 #i‚de‡
_RLIM_T_DECLARED


231 
__æim_t
 
	tæim_t
;

232 
	#_RLIM_T_DECLARED


	)

235 
__£gsz_t
 
	t£gsz_t
;

237 #i‚de‡
_SIZE_T_DECLARED


238 
__size_t
 
	tsize_t
;

239 
	#_SIZE_T_DECLARED


	)

242 #i‚de‡
_SSIZE_T_DECLARED


243 
__ssize_t
 
	tssize_t
;

244 
	#_SSIZE_T_DECLARED


	)

247 #i‚de‡
_SUSECONDS_T_DECLARED


248 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

249 
	#_SUSECONDS_T_DECLARED


	)

252 #i‚de‡
_TIME_T_DECLARED


253 
__time_t
 
	ttime_t
;

254 
	#_TIME_T_DECLARED


	)

257 #i‚de‡
_TIMER_T_DECLARED


258 
__timî_t
 
	ttimî_t
;

259 
	#_TIMER_T_DECLARED


	)

262 #i‚de‡
_MQD_T_DECLARED


263 
__mqd_t
 
	tmqd_t
;

264 
	#_MQD_T_DECLARED


	)

267 
__u_ªgi°î_t
 
	tu_ªgi°î_t
;

269 #i‚de‡
_UID_T_DECLARED


270 
__uid_t
 
	tuid_t
;

271 
	#_UID_T_DECLARED


	)

274 #i‚de‡
_USECONDS_T_DECLARED


275 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

276 
	#_USECONDS_T_DECLARED


	)

279 
__vm_off£t_t
 
	tvm_off£t_t
;

280 
__vm_ooff£t_t
 
	tvm_ooff£t_t
;

281 
__vm_∑ddr_t
 
	tvm_∑ddr_t
;

282 
__vm_pödex_t
 
	tvm_pödex_t
;

283 
__vm_size_t
 
	tvm_size_t
;

285 #ifde‡
_KERNEL


286 
	tboﬁón_t
;

287 
devi˚
 *
	tdevi˚_t
;

288 
__ötÂå_t
 
	tötÂå_t
;

298 
__uöt32_t
 
	töåmask_t
;

300 
__uötÂå_t
 
	tuötÂå_t
;

301 
__uöt64_t
 
	tuoff_t
;

302 
	tvm_mem©å_t
;

303 
vm_∑ge
 *
	tvm_∑ge_t
;

305 
	#off£tof
(
ty≥
, 
fõld
Ë
	`__off£tof
—y≥, fõld)

	)

313 #i‡
__BSD_VISIBLE


315 
	~<sys/£À˘.h
>

322 
	#maj‹
(
x
Ë(()(((
u_öt
)(xË>> 8)&0xff)Ë

	)

323 
	#mö‹
(
x
Ë(()((x)&0xffff00ff)Ë

	)

324 
	#makedev
(
x
,
y
Ë((
dev_t
)(((xË<< 8Ë| (y))Ë

	)

331 #i‚de‡
_KERNEL


332 
	g__BEGIN_DECLS


333 #i‚de‡
_FTRUNCATE_DECLARED


334 
	#_FTRUNCATE_DECLARED


	)

335 
·runˇã
(, 
off_t
);

337 #i‚de‡
_LSEEK_DECLARED


338 
	#_LSEEK_DECLARED


	)

339 
off_t
 
l£ek
(, off_t, );

341 #i‚de‡
_MMAP_DECLARED


342 
	#_MMAP_DECLARED


	)

343 * 
mm≠
(*, 
size_t
, , , , 
off_t
);

345 #i‚de‡
_TRUNCATE_DECLARED


346 
	#_TRUNCATE_DECLARED


	)

347 
åunˇã
(c⁄° *, 
off_t
);

349 
	g__END_DECLS


	@/usr/include/sys/uio.h

33 #i‚de‡
_SYS_UIO_H_


34 
	#_SYS_UIO_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_ty≥s.h
>

38 
	~<sys/_iovec.h
>

40 #i‚de‡
_SSIZE_T_DECLARED


41 
__ssize_t
 
	tssize_t
;

42 
	#_SSIZE_T_DECLARED


	)

45 #i‚de‡
_OFF_T_DECLARED


46 
__off_t
 
	toff_t
;

47 
	#_OFF_T_DECLARED


	)

50 #i‡
__BSD_VISIBLE


51 
	euio_rw
 { 
	mUIO_READ
, 
	mUIO_WRITE
 };

54 
	euio_£g
 {

55 
	mUIO_USERSPACE
,

56 
	mUIO_SYSSPACE
,

57 
	mUIO_NOCOPY


61 #ifde‡
_KERNEL


63 
	suio
 {

64 
iovec
 *
	muio_iov
;

65 
	muio_iov˙t
;

66 
off_t
 
	muio_off£t
;

67 
ssize_t
 
	muio_ªsid
;

68 
uio_£g
 
	muio_£gÊg
;

69 
uio_rw
 
	muio_rw
;

70 
thªad
 *
	muio_td
;

84 
	#UIO_MAXIOV
 1024

	)

86 
	gvm_obje˘
;

87 
	gvm_∑ge
;

89 
uio
 *
˛⁄euio
(uiÿ*
ui›
);

90 
c›yö‰om
(c⁄° * 
__ª°ri˘
 
§c
, * __ª°ri˘ 
d°
,

91 
size_t
 
Àn
, 
£g
);

92 
c›yöiov
(
iovec
 *
iovp
, 
u_öt
 
iov˙t
, iove¯**
iov
,

93 
îr‹
);

94 
c›yö°r‰om
(c⁄° * 
__ª°ri˘
 
§c
, * __ª°ri˘ 
d°
,

95 
size_t
 
Àn
, size_à* 
__ª°ri˘
 
c›õd
, 
£g
);

96 
c›yöuio
(
iovec
 *
iovp
, 
u_öt
 
iov˙t
, 
uio
 **
ui›
);

97 
c›yout_m≠
(
thªad
 *
td
, 
vm_off£t_t
 *
addr
, 
size_t
 
sz
);

98 
c›yout_unm≠
(
thªad
 *
td
, 
vm_off£t_t
 
addr
, 
size_t
 
sz
);

99 
uio_yõld
();

100 
uiomove
(*
˝
, 
n
, 
uio
 *uio);

101 
uiomove_‰ombuf
(*
buf
, 
buÊí
, 
uio
 *uio);

102 
uiomove_‰omphys
(
vm_∑ge
 *
ma
[], 
vm_off£t_t
 
off£t
, 
n
,

103 
uio
 *uio);

104 
uiomove_noÁu…
(*
˝
, 
n
, 
uio
 *uio);

105 
uiomoveco
(*
˝
, 
n
, 
uio
 *uio, 
di•oßbÀ
);

109 
__BEGIN_DECLS


110 
ssize_t
 
ªadv
(, c⁄° 
iovec
 *, );

111 
ssize_t
 
wrôev
(, c⁄° 
iovec
 *, );

112 #i‡
__BSD_VISIBLE


113 
ssize_t
 
¥ódv
(, c⁄° 
iovec
 *, , 
off_t
);

114 
ssize_t
 
pwrôev
(, c⁄° 
iovec
 *, , 
off_t
);

116 
	g__END_DECLS


	@/usr/include/time.h

45 #i‚de‡
_TIME_H_


46 
	#_TIME_H_


	)

48 
	~<sys/cdefs.h
>

49 
	~<sys/_nuŒ.h
>

50 
	~<sys/_ty≥s.h
>

52 #i‡
__POSIX_VISIBLE
 > 0 && __POSIX_VISIBLE < 200112 || 
__BSD_VISIBLE


57 
	#CLK_TCK
 128

	)

61 
	#CLOCKS_PER_SEC
 128

	)

63 #i‚de‡
_CLOCK_T_DECLARED


64 
__˛ock_t
 
	t˛ock_t
;

65 
	#_CLOCK_T_DECLARED


	)

68 #i‚de‡
_TIME_T_DECLARED


69 
__time_t
 
	ttime_t
;

70 
	#_TIME_T_DECLARED


	)

73 #i‚de‡
_SIZE_T_DECLARED


74 
__size_t
 
	tsize_t
;

75 
	#_SIZE_T_DECLARED


	)

78 #i‡
__POSIX_VISIBLE
 >= 199309

82 #i‚de‡
_CLOCKID_T_DECLARED


83 
__˛ockid_t
 
	t˛ockid_t
;

84 
	#_CLOCKID_T_DECLARED


	)

87 #i‚de‡
_TIMER_T_DECLARED


88 
__timî_t
 
	ttimî_t
;

89 
	#_TIMER_T_DECLARED


	)

92 
	~<sys/time•ec.h
>

96 #i‡!
deföed
(
CLOCK_REALTIME
Ë&& 
__POSIX_VISIBLE
 >= 200112

97 
	#CLOCK_REALTIME
 0

	)

98 #ifde‡
__BSD_VISIBLE


99 
	#CLOCK_VIRTUAL
 1

	)

100 
	#CLOCK_PROF
 2

	)

102 
	#CLOCK_MONOTONIC
 4

	)

103 
	#CLOCK_UPTIME
 5

	)

104 
	#CLOCK_UPTIME_PRECISE
 7

	)

105 
	#CLOCK_UPTIME_FAST
 8

	)

106 
	#CLOCK_REALTIME_PRECISE
 9

	)

107 
	#CLOCK_REALTIME_FAST
 10

	)

108 
	#CLOCK_MONOTONIC_PRECISE
 11

	)

109 
	#CLOCK_MONOTONIC_FAST
 12

	)

110 
	#CLOCK_SECOND
 13

	)

111 
	#CLOCK_THREAD_CPUTIME_ID
 14

	)

114 #i‡!
deföed
(
TIMER_ABSTIME
Ë&& 
__POSIX_VISIBLE
 >= 200112

115 #i‡
__BSD_VISIBLE


116 
	#TIMER_RELTIME
 0x0

	)

118 
	#TIMER_ABSTIME
 0x1

	)

121 
	stm
 {

122 
	mtm_£c
;

123 
	mtm_mö
;

124 
	mtm_hour
;

125 
	mtm_mday
;

126 
	mtm_m⁄
;

127 
	mtm_yór
;

128 
	mtm_wday
;

129 
	mtm_yday
;

130 
	mtm_isd°
;

131 
	mtm_gmtoff
;

132 *
	mtm_z⁄e
;

135 #i‡
__POSIX_VISIBLE


136 *
tz«me
[];

139 
__BEGIN_DECLS


140 *
as˘ime
(c⁄° 
tm
 *);

141 
˛ock_t
 
˛ock
();

142 *
˘ime
(c⁄° 
time_t
 *);

143 
dif·ime
(
time_t
,Åime_t);

145 
tm
 *
gmtime
(c⁄° 
time_t
 *);

146 
tm
 *
loˇ…ime
(c⁄° 
time_t
 *);

147 
time_t
 
mktime
(
tm
 *);

148 
size_t
 
°r·ime
(* 
__ª°ri˘
, size_t, const * __restrict,

149 c⁄° 
tm
 * 
__ª°ri˘
);

150 
time_t
 
time
(time_t *);

151 #i‡
__POSIX_VISIBLE
 >= 200112

152 
	gsigevít
;

153 
timî_¸óã
(
˛ockid_t
, 
sigevít
 *
__ª°ri˘
, 
timî_t
 *__restrict);

154 
timî_dñëe
(
timî_t
);

155 
timî_gëtime
(
timî_t
, 
ôimî•ec
 *);

156 
timî_gëovîrun
(
timî_t
);

157 
timî_£âime
(
timî_t
, , c⁄° 
ôimî•ec
 *
__ª°ri˘
,

158 
ôimî•ec
 *
__ª°ri˘
);

160 #i‡
__POSIX_VISIBLE


161 
tz£t
();

164 #i‡
__POSIX_VISIBLE
 >= 199309

165 
˛ock_gëªs
(
˛ockid_t
, 
time•ec
 *);

166 
˛ock_gëtime
(
˛ockid_t
, 
time•ec
 *);

167 
˛ock_£âime
(
˛ockid_t
, c⁄° 
time•ec
 *);

169 
«no¶ìp
(c⁄° 
time•ec
 *, timespec *);

172 #i‡
__POSIX_VISIBLE
 >= 199506

173 *
as˘ime_r
(c⁄° 
tm
 *, *);

174 *
˘ime_r
(c⁄° 
time_t
 *, *);

175 
tm
 *
gmtime_r
(c⁄° 
time_t
 *, tm *);

176 
tm
 *
loˇ…ime_r
(c⁄° 
time_t
 *, tm *);

179 #i‡
__XSI_VISIBLE


180 *
°Ωtime
(c⁄° * 
__ª°ri˘
, const * __restrict,

181 
tm
 * 
__ª°ri˘
);

184 #i‡
__BSD_VISIBLE


185 *
timez⁄e
(, );

186 
tz£twÆl
();

187 
time_t
 
timñoˇl
(
tm
 * const);

188 
time_t
 
timegm
(
tm
 * const);

190 
	g__END_DECLS


	@/usr/include/unistd.h

37 #i‚de‡
_UNISTD_H_


38 
	#_UNISTD_H_


	)

40 
	~<sys/cdefs.h
>

41 
	~<sys/ty≥s.h
>

42 
	~<sys/uni°d.h
>

43 
	~<sys/_nuŒ.h
>

44 
	~<sys/_ty≥s.h
>

46 #i‚de‡
_GID_T_DECLARED


47 
__gid_t
 
	tgid_t
;

48 
	#_GID_T_DECLARED


	)

51 #i‚de‡
_OFF_T_DECLARED


52 
__off_t
 
	toff_t
;

53 
	#_OFF_T_DECLARED


	)

56 #i‚de‡
_PID_T_DECLARED


57 
__pid_t
 
	tpid_t
;

58 
	#_PID_T_DECLARED


	)

61 #i‚de‡
_SIZE_T_DECLARED


62 
__size_t
 
	tsize_t
;

63 
	#_SIZE_T_DECLARED


	)

66 #i‚de‡
_SSIZE_T_DECLARED


67 
__ssize_t
 
	tssize_t
;

68 
	#_SSIZE_T_DECLARED


	)

71 #i‚de‡
_UID_T_DECLARED


72 
__uid_t
 
	tuid_t
;

73 
	#_UID_T_DECLARED


	)

76 #i‚de‡
_USECONDS_T_DECLARED


77 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

78 
	#_USECONDS_T_DECLARED


	)

81 
	#STDIN_FILENO
 0

	)

82 
	#STDOUT_FILENO
 1

	)

83 
	#STDERR_FILENO
 2

	)

85 #i‡
__XSI_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200112

86 
	#F_ULOCK
 0

	)

87 
	#F_LOCK
 1

	)

88 
	#F_TLOCK
 2

	)

89 
	#F_TEST
 3

	)

106 
	#_POSIX_BARRIERS
 200112L

	)

107 
	#_POSIX_READER_WRITER_LOCKS
 200112L

	)

108 
	#_POSIX_REGEXP
 1

	)

109 
	#_POSIX_SHELL
 1

	)

110 
	#_POSIX_SPAWN
 200112L

	)

111 
	#_POSIX_SPIN_LOCKS
 200112L

	)

112 
	#_POSIX_THREAD_ATTR_STACKADDR
 200112L

	)

113 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200112L

	)

114 
	#_POSIX_THREAD_CPUTIME
 200112L

	)

115 
	#_POSIX_THREAD_PRIO_INHERIT
 200112L

	)

116 
	#_POSIX_THREAD_PRIO_PROTECT
 200112L

	)

117 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200112L

	)

118 
	#_POSIX_THREAD_PROCESS_SHARED
 -1

	)

119 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 -1

	)

120 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

121 
	#_POSIX_THREADS
 200112L

	)

122 
	#_POSIX_TRACE
 -1

	)

123 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

124 
	#_POSIX_TRACE_INHERIT
 -1

	)

125 
	#_POSIX_TRACE_LOG
 -1

	)

126 
	#_POSIX2_C_BIND
 200112L

	)

127 
	#_POSIX2_C_DEV
 -1

	)

128 
	#_POSIX2_CHAR_TERM
 1

	)

129 
	#_POSIX2_FORT_DEV
 -1

	)

130 
	#_POSIX2_FORT_RUN
 200112L

	)

131 
	#_POSIX2_LOCALEDEF
 -1

	)

132 
	#_POSIX2_PBS
 -1

	)

133 
	#_POSIX2_PBS_ACCOUNTING
 -1

	)

134 
	#_POSIX2_PBS_CHECKPOINT
 -1

	)

135 
	#_POSIX2_PBS_LOCATE
 -1

	)

136 
	#_POSIX2_PBS_MESSAGE
 -1

	)

137 
	#_POSIX2_PBS_TRACK
 -1

	)

138 
	#_POSIX2_SW_DEV
 -1

	)

139 
	#_POSIX2_UPE
 200112L

	)

140 
	#_V6_ILP32_OFF32
 -1

	)

141 
	#_V6_ILP32_OFFBIG
 0

	)

142 
	#_V6_LP64_OFF64
 0

	)

143 
	#_V6_LPBIG_OFFBIG
 -1

	)

145 #i‡
__XSI_VISIBLE


146 
	#_XOPEN_CRYPT
 -1

	)

147 
	#_XOPEN_ENH_I18N
 -1

	)

148 
	#_XOPEN_LEGACY
 -1

	)

149 
	#_XOPEN_REALTIME
 -1

	)

150 
	#_XOPEN_REALTIME_THREADS
 -1

	)

151 
	#_XOPEN_UNIX
 -1

	)

155 
	#_POSIX2_VERSION
 199212L

	)

166 
	#_SC_ARG_MAX
 1

	)

167 
	#_SC_CHILD_MAX
 2

	)

168 
	#_SC_CLK_TCK
 3

	)

169 
	#_SC_NGROUPS_MAX
 4

	)

170 
	#_SC_OPEN_MAX
 5

	)

171 
	#_SC_JOB_CONTROL
 6

	)

172 
	#_SC_SAVED_IDS
 7

	)

173 
	#_SC_VERSION
 8

	)

174 
	#_SC_BC_BASE_MAX
 9

	)

175 
	#_SC_BC_DIM_MAX
 10

	)

176 
	#_SC_BC_SCALE_MAX
 11

	)

177 
	#_SC_BC_STRING_MAX
 12

	)

178 
	#_SC_COLL_WEIGHTS_MAX
 13

	)

179 
	#_SC_EXPR_NEST_MAX
 14

	)

180 
	#_SC_LINE_MAX
 15

	)

181 
	#_SC_RE_DUP_MAX
 16

	)

182 
	#_SC_2_VERSION
 17

	)

183 
	#_SC_2_C_BIND
 18

	)

184 
	#_SC_2_C_DEV
 19

	)

185 
	#_SC_2_CHAR_TERM
 20

	)

186 
	#_SC_2_FORT_DEV
 21

	)

187 
	#_SC_2_FORT_RUN
 22

	)

188 
	#_SC_2_LOCALEDEF
 23

	)

189 
	#_SC_2_SW_DEV
 24

	)

190 
	#_SC_2_UPE
 25

	)

191 
	#_SC_STREAM_MAX
 26

	)

192 
	#_SC_TZNAME_MAX
 27

	)

194 #i‡
__POSIX_VISIBLE
 >= 199309

195 
	#_SC_ASYNCHRONOUS_IO
 28

	)

196 
	#_SC_MAPPED_FILES
 29

	)

197 
	#_SC_MEMLOCK
 30

	)

198 
	#_SC_MEMLOCK_RANGE
 31

	)

199 
	#_SC_MEMORY_PROTECTION
 32

	)

200 
	#_SC_MESSAGE_PASSING
 33

	)

201 
	#_SC_PRIORITIZED_IO
 34

	)

202 
	#_SC_PRIORITY_SCHEDULING
 35

	)

203 
	#_SC_REALTIME_SIGNALS
 36

	)

204 
	#_SC_SEMAPHORES
 37

	)

205 
	#_SC_FSYNC
 38

	)

206 
	#_SC_SHARED_MEMORY_OBJECTS
 39

	)

207 
	#_SC_SYNCHRONIZED_IO
 40

	)

208 
	#_SC_TIMERS
 41

	)

209 
	#_SC_AIO_LISTIO_MAX
 42

	)

210 
	#_SC_AIO_MAX
 43

	)

211 
	#_SC_AIO_PRIO_DELTA_MAX
 44

	)

212 
	#_SC_DELAYTIMER_MAX
 45

	)

213 
	#_SC_MQ_OPEN_MAX
 46

	)

214 
	#_SC_PAGESIZE
 47

	)

215 
	#_SC_RTSIG_MAX
 48

	)

216 
	#_SC_SEM_NSEMS_MAX
 49

	)

217 
	#_SC_SEM_VALUE_MAX
 50

	)

218 
	#_SC_SIGQUEUE_MAX
 51

	)

219 
	#_SC_TIMER_MAX
 52

	)

222 #i‡
__POSIX_VISIBLE
 >= 200112

223 
	#_SC_2_PBS
 59

	)

224 
	#_SC_2_PBS_ACCOUNTING
 60

	)

225 
	#_SC_2_PBS_CHECKPOINT
 61

	)

226 
	#_SC_2_PBS_LOCATE
 62

	)

227 
	#_SC_2_PBS_MESSAGE
 63

	)

228 
	#_SC_2_PBS_TRACK
 64

	)

229 
	#_SC_ADVISORY_INFO
 65

	)

230 
	#_SC_BARRIERS
 66

	)

231 
	#_SC_CLOCK_SELECTION
 67

	)

232 
	#_SC_CPUTIME
 68

	)

233 
	#_SC_FILE_LOCKING
 69

	)

234 
	#_SC_GETGR_R_SIZE_MAX
 70

	)

235 
	#_SC_GETPW_R_SIZE_MAX
 71

	)

236 
	#_SC_HOST_NAME_MAX
 72

	)

237 
	#_SC_LOGIN_NAME_MAX
 73

	)

238 
	#_SC_MONOTONIC_CLOCK
 74

	)

239 
	#_SC_MQ_PRIO_MAX
 75

	)

240 
	#_SC_READER_WRITER_LOCKS
 76

	)

241 
	#_SC_REGEXP
 77

	)

242 
	#_SC_SHELL
 78

	)

243 
	#_SC_SPAWN
 79

	)

244 
	#_SC_SPIN_LOCKS
 80

	)

245 
	#_SC_SPORADIC_SERVER
 81

	)

246 
	#_SC_THREAD_ATTR_STACKADDR
 82

	)

247 
	#_SC_THREAD_ATTR_STACKSIZE
 83

	)

248 
	#_SC_THREAD_CPUTIME
 84

	)

249 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 85

	)

250 
	#_SC_THREAD_KEYS_MAX
 86

	)

251 
	#_SC_THREAD_PRIO_INHERIT
 87

	)

252 
	#_SC_THREAD_PRIO_PROTECT
 88

	)

253 
	#_SC_THREAD_PRIORITY_SCHEDULING
 89

	)

254 
	#_SC_THREAD_PROCESS_SHARED
 90

	)

255 
	#_SC_THREAD_SAFE_FUNCTIONS
 91

	)

256 
	#_SC_THREAD_SPORADIC_SERVER
 92

	)

257 
	#_SC_THREAD_STACK_MIN
 93

	)

258 
	#_SC_THREAD_THREADS_MAX
 94

	)

259 
	#_SC_TIMEOUTS
 95

	)

260 
	#_SC_THREADS
 96

	)

261 
	#_SC_TRACE
 97

	)

262 
	#_SC_TRACE_EVENT_FILTER
 98

	)

263 
	#_SC_TRACE_INHERIT
 99

	)

264 
	#_SC_TRACE_LOG
 100

	)

265 
	#_SC_TTY_NAME_MAX
 101

	)

266 
	#_SC_TYPED_MEMORY_OBJECTS
 102

	)

267 
	#_SC_V6_ILP32_OFF32
 103

	)

268 
	#_SC_V6_ILP32_OFFBIG
 104

	)

269 
	#_SC_V6_LP64_OFF64
 105

	)

270 
	#_SC_V6_LPBIG_OFFBIG
 106

	)

271 
	#_SC_IPV6
 118

	)

272 
	#_SC_RAW_SOCKETS
 119

	)

273 
	#_SC_SYMLOOP_MAX
 120

	)

276 #i‡
__XSI_VISIBLE


277 
	#_SC_ATEXIT_MAX
 107

	)

278 
	#_SC_IOV_MAX
 56

	)

279 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

280 
	#_SC_XOPEN_CRYPT
 108

	)

281 
	#_SC_XOPEN_ENH_I18N
 109

	)

282 
	#_SC_XOPEN_LEGACY
 110

	)

283 
	#_SC_XOPEN_REALTIME
 111

	)

284 
	#_SC_XOPEN_REALTIME_THREADS
 112

	)

285 
	#_SC_XOPEN_SHM
 113

	)

286 
	#_SC_XOPEN_STREAMS
 114

	)

287 
	#_SC_XOPEN_UNIX
 115

	)

288 
	#_SC_XOPEN_VERSION
 116

	)

289 
	#_SC_XOPEN_XCU_VERSION
 117

	)

292 #i‡
__BSD_VISIBLE


293 
	#_SC_NPROCESSORS_CONF
 57

	)

294 
	#_SC_NPROCESSORS_ONLN
 58

	)

298 
	#_SC_PHYS_PAGES
 121

	)

301 #i‡
__POSIX_VISIBLE
 >= 199209

302 
	#_CS_PATH
 1

	)

305 #i‡
__POSIX_VISIBLE
 >= 200112

306 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 2

	)

307 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 3

	)

308 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 4

	)

309 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 5

	)

310 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 6

	)

311 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 7

	)

312 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 8

	)

313 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 9

	)

314 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 10

	)

315 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 11

	)

316 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 12

	)

317 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 13

	)

318 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 14

	)

321 
__BEGIN_DECLS


323 
	$_exô
(Ë
__dód2
;

324 
	`ac˚ss
(const *, );

325 
	`Æ¨m
();

326 
	`chdú
(const *);

327 
	`chown
(c⁄° *, 
uid_t
, 
gid_t
);

328 
	`˛o£
();

329 
	`˛o£‰om
();

330 
	`dup
();

331 
	`dup2
(, );

332 
	`exe˛
(const *, const *, ...);

333 
	`exe˛e
(const *, const *, ...);

334 
	`exe˛p
(const *, const *, ...);

335 
	`execv
(const *, * const *);

336 
	`execve
(const *, * const *, * const *);

337 
	`execvp
(const *, * const *);

338 
pid_t
 
	`f‹k
();

339 
	`Â©hc⁄f
(, );

340 *
	`gëcwd
(*, 
size_t
);

341 
gid_t
 
	`gëegid
();

342 
uid_t
 
	`gëeuid
();

343 
gid_t
 
	`gëgid
();

344 
	`gëgroups
(, 
gid_t
 []);

345 *
	`gëlogö
();

346 
pid_t
 
	`gëpgΩ
();

347 
pid_t
 
	`gëpid
();

348 
pid_t
 
	`gëµid
();

349 
uid_t
 
	`gëuid
();

350 
	`ißây
();

351 
	`lök
(const *, const *);

352 #i‚de‡
_LSEEK_DECLARED


353 
	#_LSEEK_DECLARED


	)

354 
off_t
 
	`l£ek
(, off_t, );

356 
	`∑thc⁄f
(const *, );

357 
	`∑u£
();

358 
	`pùe
(*);

359 
ssize_t
 
	`ªad
(, *, 
size_t
);

360 
	`rmdú
(const *);

361 
	`£tgid
(
gid_t
);

362 
	`£çgid
(
pid_t
,Öid_t);

363 
pid_t
 
	`£tsid
();

364 
	`£tuid
(
uid_t
);

365 
	`¶ìp
();

366 
	`sysc⁄f
();

367 
pid_t
 
	`tcgëpgΩ
();

368 
	`tc£çgΩ
(, 
pid_t
);

369 *
	`ây«me
();

370 
	`ây«me_r
(, *, 
size_t
);

371 
	`u∆ök
(const *);

372 
ssize_t
 
	`wrôe
(, c⁄° *, 
size_t
);

375 #i‡
__POSIX_VISIBLE
 >199209 || 
__XSI_VISIBLE


376 
size_t
 
	`c⁄f°r
(, *, size_t);

377 #i‚de‡
_GETOPT_DECLARED


378 
	#_GETOPT_DECLARED


	)

379 
	`gë›t
(, * const [], const *);

381 *
›èrg
;

382 
›töd
, 
›ãº
, 
›t›t
;

387 #i‡
__POSIX_VISIBLE
 >199506 || 
__XSI_VISIBLE


388 
	`fsync
();

394 #i‚de‡
_FTRUNCATE_DECLARED


395 
	#_FTRUNCATE_DECLARED


	)

396 
	`·runˇã
(, 
off_t
);

400 #i‡
__POSIX_VISIBLE
 >= 199506

401 
	`gëlogö_r
(*, );

405 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


406 
	`fchown
(, 
uid_t
, 
gid_t
);

407 
ssize_t
 
	`ªadlök
(c⁄° * 
__ª°ri˘
, * __ª°ri˘, 
size_t
);

409 #i‡
__POSIX_VISIBLE
 >= 200112

410 
	`gëho°«me
(*, 
size_t
);

411 
	`£ãgid
(
gid_t
);

412 
	`£ãuid
(
uid_t
);

416 #i‡
__POSIX_VISIBLE
 >200809 || 
__XSI_VISIBLE


417 
	`gësid
(
pid_t
 
_pid
);

418 
	`fchdú
();

419 
	`gëpgid
(
pid_t
 
_pid
);

420 
	`lchown
(c⁄° *, 
uid_t
, 
gid_t
);

421 
ssize_t
 
	`¥ód
(, *, 
size_t
, 
off_t
);

422 
ssize_t
 
	`pwrôe
(, c⁄° *, 
size_t
, 
off_t
);

425 #i‚de‡
_TRUNCATE_DECLARED


426 
	#_TRUNCATE_DECLARED


	)

427 
	`åunˇã
(c⁄° *, 
off_t
);

431 #i‡
__POSIX_VISIBLE
 >200809 || 
__BSD_VISIBLE


432 
	`Ác˚sßt
(, const *, , );

433 
	`fchow«t
(, c⁄° *, 
uid_t
, 
gid_t
, );

434 
	`„xecve
(, *const [], *const []);

435 
	`lök©
(, const *, , const *, );

436 
ssize_t
 
	`ªadlök©
(, c⁄° * 
__ª°ri˘
, * __ª°ri˘, 
size_t
);

437 
	`symlök©
(const *, , const *);

438 
	`u∆ök©
(, const *, );

446 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE
 >402 || 
__BSD_VISIBLE


447 
	`symlök
(c⁄° * 
__ª°ri˘
, const * __restrict);

451 #i‡
__XSI_VISIBLE


452 *
	`¸y±
(const *, const *);

454 
	`í¸y±
(*, );

455 
	`gëho°id
();

456 
	`lockf
(, , 
off_t
);

457 
	`ni˚
();

458 
	`£çgΩ
(
pid_t
 
_pid
,Öid_à
_pgΩ
);

459 
	`£åegid
(
gid_t
, gid_t);

460 
	`£åeuid
(
uid_t
, uid_t);

462 #i‚de‡
_SWAB_DECLARED


463 
	#_SWAB_DECLARED


	)

464 
	`swab
(c⁄° * 
__ª°ri˘
, * __ª°ri˘, 
ssize_t
);

467 
	`sync
();

471 #i‡(
__XSI_VISIBLE
 && __XSI_VISIBLE <500Ë|| 
__BSD_VISIBLE


472 
	`brk
(const *);

473 
	`chroŸ
(const *);

474 
	`gëdèbÀsize
();

475 
	$gë∑gesize
(Ë
__puª2
;

476 *
	`gë∑ss
(const *);

477 *
	`sbrk
(
öçå_t
);

480 #i‡(
__XSI_VISIBLE
 && __XSI_VISIBLE <600Ë|| 
__BSD_VISIBLE


481 *
	`gëwd
(*);

482 
u£c⁄ds_t


483 
	`uÆ¨m
(
u£c⁄ds_t
, useconds_t);

484 
	`u¶ìp
(
u£c⁄ds_t
);

485 
pid_t
 
	`vf‹k
();

488 #i‡
__BSD_VISIBLE


489 
timevÆ
;

490 
	`ac˘
(const *);

491 
	`async_d´m⁄
();

492 
	`check_utûôy_com∑t
(const *);

494 
	`¸y±_gë_f‹m©
();

495 
	`¸y±_£t_f‹m©
(const *);

496 
	`des_cùhî
(const *, *, , );

497 
	`des_£tkey
(c⁄° *
key
);

498 
	`óc˚ss
(const *, );

499 
	`ídu£rshñl
();

500 
	`exe˘
(const *, * const *, * const *);

501 
	`execvP
(const *, const *, * const *);

502 
	`„©uª_¥e£¡
(const *);

503 *
	`fÊag°o°r
(
u_l⁄g
);

504 
	`gëdomaö«me
(*, );

505 
	`gëgrou∂i°
(c⁄° *, 
gid_t
, gid_t *, *);

506 
mode_t
 
	`gëmode
(const *, mode_t);

507 
	`gëo§ñd©e
();

508 
	`gë≥îeid
(, 
uid_t
 *, 
gid_t
 *);

509 
	`gëªsgid
(
gid_t
 *, gid_t *, gid_t *);

510 
	`gëªsuid
(
uid_t
 *, uid_t *, uid_t *);

511 *
	`gëu£rshñl
();

512 
	`öôgroups
(c⁄° *, 
gid_t
);

513 
	`úu£rok
(, , const *, const *);

514 
	`úu£rok_ß
(const *, , , const *, const *);

515 
	`is£tugid
();

516 
	`__FªeBSD_libc_íãr_ª°ri˘ed_mode
();

517 
	`Õ©hc⁄f
(const *, );

518 #i‚de‡
_MKDTEMP_DECLARED


519 *
	`mkdãmp
(*);

520 
	#_MKDTEMP_DECLARED


	)

522 #i‚def 
_MKNOD_DECLARED


523 
	`mknod
(c⁄° *, 
mode_t
, 
dev_t
);

524 
	#_MKNOD_DECLARED


	)

526 #i‚de‡
_MKSTEMP_DECLARED


527 
	`mk°emp
(*);

528 
	#_MKSTEMP_DECLARED


	)

530 
	`mk°emps
(*, );

531 #i‚de‡
_MKTEMP_DECLARED


532 *
	`mkãmp
(*);

533 
	#_MKTEMP_DECLARED


	)

535 
	`nfssvc
(, *);

536 
	`¥ofû
(*, 
size_t
, 
vm_off£t_t
, );

537 
	`rcmd
(**, , const *, const *, const *, *);

538 
	`rcmd_af
(**, , const *,

540 
	`rcmdsh
(**, , const *,

542 *
	`ª_comp
(const *);

543 
	`ª_exec
(const *);

544 
	`ªboŸ
();

545 
	`ªvoke
(const *);

546 
pid_t
 
	`rf‹k
();

547 
pid_t
 
	`rf‹k_thªad
(, *, (*)(*), *);

548 
	`ºesvp‹t
(*);

549 
	`ºesvp‹t_af
(*, );

550 
	`ru£rok
(const *, , const *, const *);

551 #i‡
__BSD_VISIBLE


552 #i‚de‡
_SELECT_DECLARED


553 
	#_SELECT_DECLARED


	)

554 
	`£À˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

557 
	`£tdomaö«me
(const *, );

558 
	`£tgroups
(, c⁄° 
gid_t
 *);

559 
	`£tho°id
();

560 
	`£tho°«me
(const *, );

561 #i‚de‡
_SETKEY_DECLARED


562 
	`£tkey
(const *);

563 
	#_SETKEY_DECLARED


	)

565 
	`£éogö
(const *);

566 *
	`£tmode
(const *);

567 
	$£çro˘ôÀ
(c⁄° *
_fmt
, ...Ë
	`__¥ötf0like
(1, 2);

568 
	`£åesgid
(
gid_t
, gid_t, gid_t);

569 
	`£åesuid
(
uid_t
, uid_t, uid_t);

570 
	`£ågid
(
gid_t
);

571 
	`£åuid
(
uid_t
);

572 
	`£tu£rshñl
();

573 
	`°πofÊags
(**, 
u_l⁄g
 *, u_long *);

574 
	`sw≠⁄
(const *);

575 
	`sw≠off
(const *);

576 
	`sysˇŒ
(, ...);

577 
off_t
 
	`__sysˇŒ
(
quad_t
, ...);

578 
	`ây¶Ÿ
();

579 
	`undñëe
(const *);

580 
	`unwhôeout
(const *);

581 *
	`vÆloc
(
size_t
);

583 #i‚de‡
_OPTRESET_DECLARED


584 
	#_OPTRESET_DECLARED


	)

585 
›åe£t
;

588 
__END_DECLS


	@/usr/include/_ctype.h

46 #i‚de‡
__CTYPE_H_


47 
	#__CTYPE_H_


	)

49 
	~<sys/cdefs.h
>

50 
	~<sys/_ty≥s.h
>

52 
	#_CTYPE_A
 0x00000100L

	)

53 
	#_CTYPE_C
 0x00000200L

	)

54 
	#_CTYPE_D
 0x00000400L

	)

55 
	#_CTYPE_G
 0x00000800L

	)

56 
	#_CTYPE_L
 0x00001000L

	)

57 
	#_CTYPE_P
 0x00002000L

	)

58 
	#_CTYPE_S
 0x00004000L

	)

59 
	#_CTYPE_U
 0x00008000L

	)

60 
	#_CTYPE_X
 0x00010000L

	)

61 
	#_CTYPE_B
 0x00020000L

	)

62 
	#_CTYPE_R
 0x00040000L

	)

63 
	#_CTYPE_I
 0x00080000L

	)

64 
	#_CTYPE_T
 0x00100000L

	)

65 
	#_CTYPE_Q
 0x00200000L

	)

66 
	#_CTYPE_SW0
 0x20000000L

	)

67 
	#_CTYPE_SW1
 0x40000000L

	)

68 
	#_CTYPE_SW2
 0x80000000L

	)

69 
	#_CTYPE_SW3
 0xc0000000L

	)

70 
	#_CTYPE_SWM
 0xe0000000L

	)

71 
	#_CTYPE_SWS
 30

	)

74 
__BEGIN_DECLS


75 
	$___ru√ty≥
(
__˘_ru√_t
Ë
__puª
;

76 
__˘_ru√_t
 
	$___tﬁowî
(
__˘_ru√_t
Ë
__puª
;

77 
__˘_ru√_t
 
	$___touµî
(
__˘_ru√_t
Ë
__puª
;

78 
__END_DECLS


84 #ifde‡
_EXTERNALIZE_CTYPE_INLINES_


85 
	#_USE_CTYPE_INLINE_


	)

86 

	)

87 
	#__ölöe


	)

90 
__mb_sb_limô
;

95 #i‡!
	`deföed
(
_DONT_USE_CTYPE_INLINE_
) && \

96 (
	`deföed
(
_USE_CTYPE_INLINE_
Ë|| deföed(
__GNUC__
Ë|| 
	$deföed
(
__˝lu•lus
))

98 
	~<ru√ty≥.h
>

100 
__ölöe
 

101 
	$__maskru√
(
__˘_ru√_t
 
_c
, 
_f
)

103  ((
_c
 < 0 || _¯>
_CACHED_RUNES
Ë? 
	`___ru√ty≥
(_c) :

104 
_CuºítRu√LoˇÀ
->
__ru√ty≥
[
_c
]Ë& 
_f
;

105 
	}
}

107 
__ölöe
 

108 
	$__sbmaskru√
(
__˘_ru√_t
 
_c
, 
_f
)

110  (
_c
 < 0 || _¯>
__mb_sb_limô
) ? 0 :

111 
_CuºítRu√LoˇÀ
->
__ru√ty≥
[
_c
] & 
_f
;

112 
	}
}

114 
__ölöe
 

115 
	$__i°y≥
(
__˘_ru√_t
 
_c
, 
_f
)

117  (!!
	`__maskru√
(
_c
, 
_f
));

118 
	}
}

120 
__ölöe
 

121 
	$__sbi°y≥
(
__˘_ru√_t
 
_c
, 
_f
)

123  (!!
	`__sbmaskru√
(
_c
, 
_f
));

124 
	}
}

126 
__ölöe
 

127 
	$__is˘y≥
(
__˘_ru√_t
 
_c
, 
_f
)

129  (
_c
 < 0 || _c >= 128) ? 0 :

130 !!(
_DeÁu…Ru√LoˇÀ
.
__ru√ty≥
[
_c
] & 
_f
);

131 
	}
}

133 
__ölöe
 
__˘_ru√_t


134 
	$__touµî
(
__˘_ru√_t
 
_c
)

136  (
_c
 < 0 || _¯>
_CACHED_RUNES
Ë? 
	`___touµî
(_c) :

137 
_CuºítRu√LoˇÀ
->
__m≠uµî
[
_c
];

138 
	}
}

140 
__ölöe
 
__˘_ru√_t


141 
	$__sbtouµî
(
__˘_ru√_t
 
_c
)

143  (
_c
 < 0 || _¯>
__mb_sb_limô
) ? _c :

144 
_CuºítRu√LoˇÀ
->
__m≠uµî
[
_c
];

145 
	}
}

147 
__ölöe
 
__˘_ru√_t


148 
	$__tﬁowî
(
__˘_ru√_t
 
_c
)

150  (
_c
 < 0 || _¯>
_CACHED_RUNES
Ë? 
	`___tﬁowî
(_c) :

151 
_CuºítRu√LoˇÀ
->
__m≠lowî
[
_c
];

152 
	}
}

154 
__ölöe
 
__˘_ru√_t


155 
	$__sbtﬁowî
(
__˘_ru√_t
 
_c
)

157  (
_c
 < 0 || _¯>
__mb_sb_limô
) ? _c :

158 
_CuºítRu√LoˇÀ
->
__m≠lowî
[
_c
];

159 
	}
}

161 
__ölöe
 

162 
	$__wcwidth
(
__˘_ru√_t
 
_c
)

164 
_x
;

166 i‡(
_c
 == 0)

168 
_x
 = ()
	`__maskru√
(
_c
, 
_CTYPE_SWM
|
_CTYPE_R
);

169 i‡((
_x
 & 
_CTYPE_SWM
) != 0)

170  ((
_x
 & 
_CTYPE_SWM
Ë>> 
_CTYPE_SWS
);

171  ((
_x
 & 
_CTYPE_R
) != 0 ? 1 : -1);

172 
	}
}

176 
__BEGIN_DECLS


177 
__maskru√
(
__˘_ru√_t
, );

178 
__sbmaskru√
(
__˘_ru√_t
, );

179 
__i°y≥
(
__˘_ru√_t
, );

180 
__sbi°y≥
(
__˘_ru√_t
, );

181 
__is˘y≥
(
__˘_ru√_t
, );

182 
__˘_ru√_t
 
__touµî
(__ct_rune_t);

183 
__˘_ru√_t
 
__sbtouµî
(__ct_rune_t);

184 
__˘_ru√_t
 
__tﬁowî
(__ct_rune_t);

185 
__˘_ru√_t
 
__sbtﬁowî
(__ct_rune_t);

186 
__wcwidth
(
__˘_ru√_t
);

187 
	g__END_DECLS


	@/usr/include/arpa/inet.h

62 #i‚de‡
_ARPA_INET_H_


63 
	#_ARPA_INET_H_


	)

67 
	~<sys/cdefs.h
>

68 
	~<sys/_ty≥s.h
>

71 
	~<machöe/ídün.h
>

73 
	#INET_ADDRSTRLEN
 16

	)

74 
	#INET6_ADDRSTRLEN
 46

	)

76 #i‚de‡
_UINT16_T_DECLARED


77 
__uöt16_t
 
	tuöt16_t
;

78 
	#_UINT16_T_DECLARED


	)

81 #i‚de‡
_UINT32_T_DECLARED


82 
__uöt32_t
 
	tuöt32_t
;

83 
	#_UINT32_T_DECLARED


	)

86 #i‚de‡
_IN_ADDR_T_DECLARED


87 
uöt32_t
 
	tö_addr_t
;

88 
	#_IN_ADDR_T_DECLARED


	)

91 #i‚de‡
_IN_PORT_T_DECLARED


92 
uöt16_t
 
	tö_p‹t_t
;

93 
	#_IN_PORT_T_DECLARED


	)

96 #i‡
__BSD_VISIBLE


97 #i‚de‡
_SIZE_T_DECLARED


98 
__size_t
 
	tsize_t
;

99 
	#_SIZE_T_DECLARED


	)

107 #i‚de‡
_SOCKLEN_T_DECLARED


108 
__sockÀn_t
 
	tsockÀn_t
;

109 
	#_SOCKLEN_T_DECLARED


	)

112 #i‚de‡
_STRUCT_IN_ADDR_DECLARED


113 
	sö_addr
 {

114 
ö_addr_t
 
	ms_addr
;

116 
	#_STRUCT_IN_ADDR_DECLARED


	)

120 #i‡
__BSD_VISIBLE


121 
	#öë_addr
 
__öë_addr


	)

122 
	#öë_©⁄
 
__öë_©⁄


	)

123 
	#öë_ aof
 
__öë_ aof


	)

124 
	#öë_makóddr
 
__öë_makóddr


	)

125 
	#öë_√è
 
__öë_√è


	)

126 
	#öë_√tof
 
__öë_√tof


	)

127 
	#öë_√tw‹k
 
__öë_√tw‹k


	)

128 
	#öë_√t_¡›
 
__öë_√t_¡›


	)

129 
	#öë_√t_±⁄
 
__öë_√t_±⁄


	)

130 
	#öë_cidr_¡›
 
__öë_cidr_¡›


	)

131 
	#öë_cidr_±⁄
 
__öë_cidr_±⁄


	)

132 
	#öë_¡ﬂ
 
__öë_¡ﬂ


	)

133 
	#öë_¡ﬂ_r
 
__öë_¡ﬂ_r


	)

134 
	#öë_±⁄
 
__öë_±⁄


	)

135 
	#öë_¡›
 
__öë_¡›


	)

136 
	#öë_nßp_addr
 
__öë_nßp_addr


	)

137 
	#öë_nßp_¡ﬂ
 
__öë_nßp_¡ﬂ


	)

140 
	g__BEGIN_DECLS


141 #i‚de‡
_BYTEORDER_PROTOTYPED


142 
	#_BYTEORDER_PROTOTYPED


	)

143 
uöt32_t
 
ht⁄l
(uint32_t);

144 
uöt16_t
 
ht⁄s
(uint16_t);

145 
uöt32_t
 
¡ohl
(uint32_t);

146 
uöt16_t
 
¡ohs
(uint16_t);

149 
ö_addr_t
 
öë_addr
(const *);

150  *
öë_¡ﬂ
(
ö_addr
);

151 c⁄° *
öë_¡›
(, c⁄° * 
__ª°ri˘
, * __restrict,

152 
sockÀn_t
);

153 
öë_±⁄
(, c⁄° * 
__ª°ri˘
, * __restrict);

155 #i‡
__BSD_VISIBLE


156 
öë_©⁄
(c⁄° *, 
ö_addr
 *);

157 
ö_addr_t
 
öë_ aof
(
ö_addr
);

158 
ö_addr
 
öë_makóddr
(
ö_addr_t
, in_addr_t);

159 * 
öë_√è
(
ö_addr_t
, *, 
size_t
);

160 
ö_addr_t
 
öë_√tof
(
ö_addr
);

161 
ö_addr_t
 
öë_√tw‹k
(const *);

162 *
öë_√t_¡›
(, c⁄° *, , *, 
size_t
);

163 
öë_√t_±⁄
(, c⁄° *, *, 
size_t
);

164 *
öë_¡ﬂ_r
(
ö_addr
, *
buf
, 
sockÀn_t
 
size
);

165 *
öë_cidr_¡›
(, c⁄° *, , *, 
size_t
);

166 
öë_cidr_±⁄
(, const *, *, *);

167 
öë_nßp_addr
(const *, *, );

168 *
öë_nßp_¡ﬂ
(, const *, *);

170 
	g__END_DECLS


172 #i‚de‡
_BYTEORDER_FUNC_DEFINED


173 
	#_BYTEORDER_FUNC_DEFINED


	)

174 
	#ht⁄l
(
x
Ë
	`__ht⁄l
(x)

	)

175 
	#ht⁄s
(
x
Ë
	`__ht⁄s
(x)

	)

176 
	#¡ohl
(
x
Ë
	`__¡ohl
(x)

	)

177 
	#¡ohs
(
x
Ë
	`__¡ohs
(x)

	)

	@/usr/include/machine/_limits.h

33 #i‚def 
_MACHINE__LIMITS_H_


34 
	#_MACHINE__LIMITS_H_


	)

47 
	#__CHAR_BIT
 8

	)

49 
	#__SCHAR_MAX
 0x7‡

	)

50 
	#__SCHAR_MIN
 (-0x7‡- 1Ë

	)

52 
	#__UCHAR_MAX
 0xffU

	)

54 
	#__USHRT_MAX
 0xffffU

	)

55 
	#__SHRT_MAX
 0x7ff‡

	)

56 
	#__SHRT_MIN
 (-0x7ff‡- 1Ë

	)

58 
	#__UINT_MAX
 0xffffffffU

	)

59 
	#__INT_MAX
 0x7ffffff‡

	)

60 
	#__INT_MIN
 (-0x7ffffff‡- 1Ë

	)

62 
	#__ULONG_MAX
 0xffffffffffffffffUL

	)

63 
	#__LONG_MAX
 0x7fffffffffffffffL

	)

64 
	#__LONG_MIN
 (-0x7fffffffffffffffL - 1Ë

	)

67 
	#__ULLONG_MAX
 0xffffffffffffffffULL

	)

68 
	#__LLONG_MAX
 0x7fffffffffffffffLL

	)

69 
	#__LLONG_MIN
 (-0x7fffffffffffffffLL - 1Ë

	)

71 
	#__SSIZE_MAX
 
__LONG_MAX


	)

73 
	#__SIZE_T_MAX
 
__ULONG_MAX


	)

75 
	#__OFF_MAX
 
__LONG_MAX


	)

76 
	#__OFF_MIN
 
__LONG_MIN


	)

79 
	#__UQUAD_MAX
 
__ULONG_MAX


	)

80 
	#__QUAD_MAX
 
__LONG_MAX


	)

81 
	#__QUAD_MIN
 
__LONG_MIN


	)

83 
	#__LONG_BIT
 64

	)

84 
	#__WORD_BIT
 32

	)

90 
	#__MINSIGSTKSZ
 (512 * 4)

	)

	@/usr/include/machine/endian.h

33 #i‚de‡
_MACHINE_ENDIAN_H_


34 
	#_MACHINE_ENDIAN_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_ty≥s.h
>

39 #ifde‡
__˝lu•lus


46 
	#_QUAD_HIGHWORD
 1

	)

47 
	#_QUAD_LOWWORD
 0

	)

53 
	#_LITTLE_ENDIAN
 1234

	)

54 
	#_BIG_ENDIAN
 4321

	)

55 
	#_PDP_ENDIAN
 3412

	)

57 
	#_BYTE_ORDER
 
_LITTLE_ENDIAN


	)

63 #i‡
__BSD_VISIBLE


64 
	#LITTLE_ENDIAN
 
_LITTLE_ENDIAN


	)

65 
	#BIG_ENDIAN
 
_BIG_ENDIAN


	)

66 
	#PDP_ENDIAN
 
_PDP_ENDIAN


	)

67 
	#BYTE_ORDER
 
_BYTE_ORDER


	)

70 #i‡
deföed
(
__GNUCLIKE_ASM
Ë&& deföed(
__GNUCLIKE_BUILTIN_CONSTANT_P
)

72 
	#__byã_sw≠_öt_v¨
(
x
) \

73 
	`__exãnsi⁄__
 ({ 
__uöt32_t
 
__X
 = (
x
); \

74 
	`__asm
 ("bsw≠ %0" : "+r" (
__X
)); \

75 
__X
; })

	)

77 #ifde‡
__OPTIMIZE__


79 
	#__byã_sw≠_öt_c⁄°
(
x
) \

80 ((((
x
) & 0xff000000) >> 24) | \

81 (((
x
) & 0x00ff0000) >> 8) | \

82 (((
x
) & 0x0000ff00) << 8) | \

83 (((
x
Ë& 0x000000ffË<< 24))

	)

84 
	#__byã_sw≠_öt
(
x
Ë(
	`__buûtö_c⁄°™t_p
(x) ? \

85 
	`__byã_sw≠_öt_c⁄°
(
x
Ë: 
	`__byã_sw≠_öt_v¨
(x))

	)

89 
	#__byã_sw≠_öt
(
x
Ë
	`__byã_sw≠_öt_v¨
(x)

	)

93 
	#__byã_sw≠_l⁄g_v¨
(
x
) \

94 
	`__exãnsi⁄__
 ({ 
__uöt64_t
 
__X
 = (
x
); \

95 
	`__asm
 ("bsw≠ %0" : "+r" (
__X
)); \

96 
__X
; })

	)

98 #ifde‡
__OPTIMIZE__


100 
	#__byã_sw≠_l⁄g_c⁄°
(
x
) \

101 (((
x
 >> 56) | \

102 ((
x
 >> 40) & 0xff00) | \

103 ((
x
 >> 24) & 0xff0000) | \

104 ((
x
 >> 8) & 0xff000000) | \

105 ((
x
 << 8) & (0xfful << 32)) | \

106 ((
x
 << 24) & (0xfful << 40)) | \

107 ((
x
 << 40) & (0xfful << 48)) | \

108 ((
x
 << 56))))

	)

110 
	#__byã_sw≠_l⁄g
(
x
Ë(
	`__buûtö_c⁄°™t_p
(x) ? \

111 
	`__byã_sw≠_l⁄g_c⁄°
(
x
Ë: 
	`__byã_sw≠_l⁄g_v¨
(x))

	)

115 
	#__byã_sw≠_l⁄g
(
x
Ë
	`__byã_sw≠_l⁄g_v¨
(x)

	)

119 
__ölöe
 
__uöt64_t


120 
__bsw≠64
(
__uöt64_t
 
_x
)

123  (
__byã_sw≠_l⁄g
(
_x
));

126 
__ölöe
 
__uöt32_t


127 
__bsw≠32
(
__uöt32_t
 
_x
)

130  (
__byã_sw≠_öt
(
_x
));

133 
__ölöe
 
__uöt16_t


134 
__bsw≠16
(
__uöt16_t
 
_x
)

136  (
_x
 << 8 | _x >> 8);

139 
	#__ht⁄l
(
x
Ë
	`__bsw≠32
(x)

	)

140 
	#__ht⁄s
(
x
Ë
	`__bsw≠16
(x)

	)

141 
	#__¡ohl
(
x
Ë
	`__bsw≠32
(x)

	)

142 
	#__¡ohs
(
x
Ë
	`__bsw≠16
(x)

	)

151 
	#_BYTEORDER_FUNC_DEFINED


	)

155 #ifde‡
__˝lu•lus


	@/usr/include/machine/param.h

51 #i‚de‡
_ALIGNBYTES


52 
	#_ALIGNBYTES
 ((Ë- 1)

	)

54 #i‚de‡
_ALIGN


55 
	#_ALIGN
(
p
Ë(((
u_l⁄g
)’Ë+ 
_ALIGNBYTES
Ë&~ _ALIGNBYTES)

	)

58 #i‚de‡
_NO_NAMESPACE_POLLUTION


60 
	#__HAVE_ACPI


	)

61 
	#__PCI_REROUTE_INTERRUPT


	)

63 #i‚de‡
_MACHINE_PARAM_H_


64 
	#_MACHINE_PARAM_H_


	)

66 #i‚de‡
MACHINE


67 
	#MACHINE
 "amd64"

	)

69 #i‚de‡
MACHINE_ARCH


70 
	#MACHINE_ARCH
 "amd64"

	)

72 #i‚de‡
MACHINE_ARCH32


73 
	#MACHINE_ARCH32
 "i386"

	)

76 #i‡
deföed
(
SMP
Ë|| deföed(
KLD_MODULE
)

77 
	#MAXCPU
 32

	)

79 
	#MAXCPU
 1

	)

82 
	#ALIGNBYTES
 
_ALIGNBYTES


	)

83 
	#ALIGN
(
p
Ë
	`_ALIGN
’)

	)

90 
	#ALIGNED_POINTER
(
p
, 
t
Ë1

	)

96 
	#CACHE_LINE_SHIFT
 7

	)

97 
	#CACHE_LINE_SIZE
 (1 << 
CACHE_LINE_SHIFT
)

	)

100 
	#NPTEPG
 (
PAGE_SIZE
/( (
±_íåy_t
)))

	)

101 
	#NPTEPGSHIFT
 9

	)

102 
	#PAGE_SHIFT
 12

	)

103 
	#PAGE_SIZE
 (1<<
PAGE_SHIFT
Ë

	)

104 
	#PAGE_MASK
 (
PAGE_SIZE
-1)

	)

106 
	#NPDEPG
 (
PAGE_SIZE
/( (
pd_íåy_t
)))

	)

107 
	#NPDEPGSHIFT
 9

	)

108 
	#PDRSHIFT
 21

	)

109 
	#NBPDR
 (1<<
PDRSHIFT
Ë

	)

110 
	#PDRMASK
 (
NBPDR
-1)

	)

112 
	#NPDPEPG
 (
PAGE_SIZE
/( (
pdp_íåy_t
)))

	)

113 
	#NPDPEPGSHIFT
 9

	)

114 
	#PDPSHIFT
 30

	)

115 
	#NBPDP
 (1<<
PDPSHIFT
Ë

	)

116 
	#PDPMASK
 (
NBPDP
-1)

	)

118 
	#NPML4EPG
 (
PAGE_SIZE
/( (
pml4_íåy_t
)))

	)

119 
	#NPML4EPGSHIFT
 9

	)

120 
	#PML4SHIFT
 39

	)

121 
	#NBPML4
 (1ul<<
PML4SHIFT
)

	)

122 
	#PML4MASK
 (
NBPML4
-1)

	)

124 
	#MAXPAGESIZES
 3

	)

126 
	#IOPAGES
 2

	)

128 #i‚def 
KSTACK_PAGES


129 
	#KSTACK_PAGES
 4

	)

131 
	#KSTACK_GUARD_PAGES
 1

	)

137 #i‚de‡
VM_SWZONE_SIZE_MAX


138 
	#VM_SWZONE_SIZE_MAX
 (32 * 1024 * 1024)

	)

144 
	#round_∑ge
(
x
Ë(((()(x)Ë+ 
PAGE_MASK
Ë& ~(PAGE_MASK))

	)

145 
	#åunc_∑ge
(
x
Ë(()(xË& ~(
PAGE_MASK
))

	)

146 
	#åunc_2m∑ge
(
x
Ë(()(xË& ~
PDRMASK
)

	)

147 
	#round_2m∑ge
(
x
Ë(((()(x)Ë+ 
PDRMASK
Ë& ~PDRMASK)

	)

148 
	#åunc_1g∑ge
(
x
Ë(()(xË& ~
PDPMASK
)

	)

150 
	#©›
(
x
Ë(()(xË>> 
PAGE_SHIFT
)

	)

151 
	#±ﬂ
(
x
Ë(()(xË<< 
PAGE_SHIFT
)

	)

153 
	#amd64_bt›
(
x
Ë(()(xË>> 
PAGE_SHIFT
)

	)

154 
	#amd64_±ob
(
x
Ë(()(xË<< 
PAGE_SHIFT
)

	)

156 
	#pgtok
(
x
Ë(()(xË* (
PAGE_SIZE
 / 1024))

	)

	@/usr/include/malloc.h

2 #i‡
__STDC__


5 
	~<°dlib.h
>

	@/usr/include/netinet6/in6.h

64 #i‚de‡
__KAME_NETINET_IN_H_INCLUDED_


68 #i‚de‡
_NETINET6_IN6_H_


69 
	#_NETINET6_IN6_H_


	)

76 
	#__KAME__


	)

77 
	#__KAME_VERSION
 "FªeBSD"

	)

84 #i‡
__BSD_VISIBLE


85 
	#IPV6PORT_RESERVED
 1024

	)

86 
	#IPV6PORT_ANONMIN
 49152

	)

87 
	#IPV6PORT_ANONMAX
 65535

	)

88 
	#IPV6PORT_RESERVEDMIN
 600

	)

89 
	#IPV6PORT_RESERVEDMAX
 (
IPV6PORT_RESERVED
-1)

	)

95 
	sö6_addr
 {

97 
uöt8_t
 
	m__u6_addr8
[16];

98 
uöt16_t
 
	m__u6_addr16
[8];

99 
uöt32_t
 
	m__u6_addr32
[4];

100 } 
	m__u6_addr
;

103 
	#s6_addr
 
__u6_addr
.
__u6_addr8


	)

104 #ifde‡
_KERNEL


105 
	#s6_addr8
 
__u6_addr
.
__u6_addr8


	)

106 
	#s6_addr16
 
__u6_addr
.
__u6_addr16


	)

107 
	#s6_addr32
 
__u6_addr
.
__u6_addr32


	)

110 
	#INET6_ADDRSTRLEN
 46

	)

119 #i‡
__BSD_VISIBLE


120 
	#SIN6_LEN


	)

123 
	ssockaddr_ö6
 {

124 
uöt8_t
 
	msö6_Àn
;

125 
ß_Ámûy_t
 
	msö6_Ámûy
;

126 
ö_p‹t_t
 
	msö6_p‹t
;

127 
uöt32_t
 
	msö6_Êowöfo
;

128 
ö6_addr
 
	msö6_addr
;

129 
uöt32_t
 
	msö6_sc›e_id
;

135 #ifde‡
_KERNEL


136 
	#IN6MASK0
 {{{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }}}

	)

137 
	#IN6MASK32
 {{{ 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, \

138 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }}}

	)

139 
	#IN6MASK64
 {{{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \

140 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }}}

	)

141 
	#IN6MASK96
 {{{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \

142 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }}}

	)

143 
	#IN6MASK128
 {{{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \

144 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf‡}}}

	)

147 #ifde‡
_KERNEL


148 c⁄° 
sockaddr_ö6
 
ß6_™y
;

150 c⁄° 
ö6_addr
 
ö6mask0
;

151 c⁄° 
ö6_addr
 
ö6mask32
;

152 c⁄° 
ö6_addr
 
ö6mask64
;

153 c⁄° 
ö6_addr
 
ö6mask96
;

154 c⁄° 
ö6_addr
 
ö6mask128
;

160 #ifde‡
_KERNEL


161 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


162 
	#IPV6_ADDR_INT32_ONE
 1

	)

163 
	#IPV6_ADDR_INT32_TWO
 2

	)

164 
	#IPV6_ADDR_INT32_MNL
 0xff010000

	)

165 
	#IPV6_ADDR_INT32_MLL
 0xff020000

	)

166 
	#IPV6_ADDR_INT32_SMP
 0x0000ffff

	)

167 
	#IPV6_ADDR_INT16_ULL
 0x„80

	)

168 
	#IPV6_ADDR_INT16_USL
 0x„c0

	)

169 
	#IPV6_ADDR_INT16_MLL
 0xff02

	)

170 #ñi‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


171 
	#IPV6_ADDR_INT32_ONE
 0x01000000

	)

172 
	#IPV6_ADDR_INT32_TWO
 0x02000000

	)

173 
	#IPV6_ADDR_INT32_MNL
 0x000001ff

	)

174 
	#IPV6_ADDR_INT32_MLL
 0x000002ff

	)

175 
	#IPV6_ADDR_INT32_SMP
 0xffff0000

	)

176 
	#IPV6_ADDR_INT16_ULL
 0x80„

	)

177 
	#IPV6_ADDR_INT16_USL
 0xc0„

	)

178 
	#IPV6_ADDR_INT16_MLL
 0x02ff

	)

185 #i‡
__BSD_VISIBLE


186 
	#IN6ADDR_ANY_INIT
 \

188 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }}}

	)

189 
	#IN6ADDR_LOOPBACK_INIT
 \

191 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}

	)

192 
	#IN6ADDR_NODELOCAL_ALLNODES_INIT
 \

194 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}

	)

195 
	#IN6ADDR_INTFACELOCAL_ALLNODES_INIT
 \

197 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}

	)

198 
	#IN6ADDR_LINKLOCAL_ALLNODES_INIT
 \

200 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}

	)

201 
	#IN6ADDR_LINKLOCAL_ALLROUTERS_INIT
 \

203 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02 }}}

	)

204 
	#IN6ADDR_LINKLOCAL_ALLV2ROUTERS_INIT
 \

206 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16 }}}

	)

209 c⁄° 
ö6_addr
 
ö6addr_™y
;

210 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

211 #i‡
__BSD_VISIBLE


212 c⁄° 
ö6_addr
 
ö6addr_nodñoˇl_Æ odes
;

213 c⁄° 
ö6_addr
 
ö6addr_lökloˇl_Æ odes
;

214 c⁄° 
ö6_addr
 
ö6addr_lökloˇl_ÆÃouãrs
;

215 c⁄° 
ö6_addr
 
ö6addr_lökloˇl_Ælv2rouãrs
;

224 #ifde‡
_KERNEL


225 
	#IN6_ARE_ADDR_EQUAL
(
a
, 
b
) \

226 (
	`bcmp
(&(
a
)->
s6_addr
[0], &(
b
)->s6_addr[0], (
ö6_addr
)Ë=0)

	)

228 #i‡
__BSD_VISIBLE


229 
	#IN6_ARE_ADDR_EQUAL
(
a
, 
b
) \

230 (
	`memcmp
(&(
a
)->
s6_addr
[0], &(
b
)->s6_addr[0], (
ö6_addr
)Ë=0)

	)

237 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

238 ((*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[0]) == 0) && \

239 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[4]) == 0) && \

240 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[8]) == 0) && \

241 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[12]Ë=0))

	)

246 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

247 ((*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[0]) == 0) && \

248 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[4]) == 0) && \

249 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[8]) == 0) && \

250 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[12]Ë=
	`¡ohl
(1)))

	)

255 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

256 ((*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[0]) == 0) && \

257 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[4]) == 0) && \

258 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[8]) == 0) && \

259 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[12]) != 0) && \

260 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[12]Ë!
	`¡ohl
(1)))

	)

265 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

266 ((*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[0]) == 0) && \

267 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[4]) == 0) && \

268 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[8]Ë=
	`¡ohl
(0x0000ffff)))

	)

274 #ifde‡
_KERNEL


275 
	#IPV6_ADDR_SCOPE_NODELOCAL
 0x01

	)

276 
	#IPV6_ADDR_SCOPE_INTFACELOCAL
 0x01

	)

277 
	#IPV6_ADDR_SCOPE_LINKLOCAL
 0x02

	)

278 
	#IPV6_ADDR_SCOPE_SITELOCAL
 0x05

	)

279 
	#IPV6_ADDR_SCOPE_ORGLOCAL
 0x08

	)

280 
	#IPV6_ADDR_SCOPE_GLOBAL
 0x0e

	)

282 
	#__IPV6_ADDR_SCOPE_NODELOCAL
 0x01

	)

283 
	#__IPV6_ADDR_SCOPE_INTFACELOCAL
 0x01

	)

284 
	#__IPV6_ADDR_SCOPE_LINKLOCAL
 0x02

	)

285 
	#__IPV6_ADDR_SCOPE_SITELOCAL
 0x05

	)

286 
	#__IPV6_ADDR_SCOPE_ORGLOCAL
 0x08

	)

287 
	#__IPV6_ADDR_SCOPE_GLOBAL
 0x0e

	)

294 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

295 (((
a
)->
s6_addr
[0] =0x„Ë&& ((◊)->s6_addr[1] & 0xc0Ë=0x80))

	)

296 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

297 (((
a
)->
s6_addr
[0] =0x„Ë&& ((◊)->s6_addr[1] & 0xc0Ë=0xc0))

	)

302 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(◊)->
s6_addr
[0] =0xff)

	)

304 #ifde‡
_KERNEL


305 
	#IPV6_ADDR_MC_SCOPE
(
a
Ë(◊)->
s6_addr
[1] & 0x0f)

	)

307 
	#__IPV6_ADDR_MC_SCOPE
(
a
Ë(◊)->
s6_addr
[1] & 0x0f)

	)

313 #ifde‡
_KERNEL


314 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

315 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

316 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_NODELOCAL
))

	)

317 
	#IN6_IS_ADDR_MC_INTFACELOCAL
(
a
) \

318 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

319 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_INTFACELOCAL
))

	)

320 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

321 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

322 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_LINKLOCAL
))

	)

323 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

324 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

325 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_SITELOCAL
))

	)

326 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

327 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

328 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_ORGLOCAL
))

	)

329 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

330 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

331 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_GLOBAL
))

	)

333 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

334 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

335 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_NODELOCAL
))

	)

336 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

337 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

338 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_LINKLOCAL
))

	)

339 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

340 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

341 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_SITELOCAL
))

	)

342 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

343 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

344 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_ORGLOCAL
))

	)

345 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

346 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

347 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_GLOBAL
))

	)

350 #ifde‡
_KERNEL


354 
	#IN6_IS_SCOPE_LINKLOCAL
(
a
) \

355 ((
	`IN6_IS_ADDR_LINKLOCAL
(
a
)) || \

356 (
	`IN6_IS_ADDR_MC_LINKLOCAL
(
a
)))

	)

357 
	#IN6_IS_SCOPE_EMBED
(
a
) \

358 ((
	`IN6_IS_ADDR_LINKLOCAL
(
a
)) || \

359 (
	`IN6_IS_ADDR_MC_LINKLOCAL
(
a
)) || \

360 (
	`IN6_IS_ADDR_MC_INTFACELOCAL
(
a
)))

	)

362 
	#IFA6_IS_DEPRECATED
(
a
) \

363 ((
a
)->
ü6_li„time
.
ü6t_∂time
 !
ND6_INFINITE_LIFETIME
 && \

364 (
u_öt32_t
)((
time_£c⁄d
 - (
a
)->
ü6_upd©ëime
)) > \

365 (
a
)->
ü6_li„time
.
ü6t_∂time
)

	)

366 
	#IFA6_IS_INVALID
(
a
) \

367 ((
a
)->
ü6_li„time
.
ü6t_v…ime
 !
ND6_INFINITE_LIFETIME
 && \

368 (
u_öt32_t
)((
time_£c⁄d
 - (
a
)->
ü6_upd©ëime
)) > \

369 (
a
)->
ü6_li„time
.
ü6t_v…ime
)

	)

375 #i‡
__BSD_VISIBLE


376 
	srouã_ö6
 {

377 
πíåy
 *
	mro_π
;

378 
Œíåy
 *
	mro_Œe
;

379 
sockaddr_ö6
 
	mro_d°
;

389 
	#IPV6_OPTIONS
 1

	)

390 
	#IPV6_RECVOPTS
 5

	)

391 
	#IPV6_RECVRETOPTS
 6

	)

392 
	#IPV6_RECVDSTADDR
 7

	)

393 
	#IPV6_RETOPTS
 8

	)

395 
	#IPV6_SOCKOPT_RESERVED1
 3

	)

396 
	#IPV6_UNICAST_HOPS
 4

	)

397 
	#IPV6_MULTICAST_IF
 9

	)

398 
	#IPV6_MULTICAST_HOPS
 10

	)

399 
	#IPV6_MULTICAST_LOOP
 11

	)

400 
	#IPV6_JOIN_GROUP
 12

	)

401 
	#IPV6_LEAVE_GROUP
 13

	)

402 
	#IPV6_PORTRANGE
 14

	)

403 
	#ICMP6_FILTER
 18

	)

405 #ifde‡
_KERNEL


406 
	#IPV6_2292PKTINFO
 19

	)

407 
	#IPV6_2292HOPLIMIT
 20

	)

408 
	#IPV6_2292NEXTHOP
 21

	)

409 
	#IPV6_2292HOPOPTS
 22

	)

410 
	#IPV6_2292DSTOPTS
 23

	)

411 
	#IPV6_2292RTHDR
 24

	)

412 
	#IPV6_2292PKTOPTIONS
 25

	)

415 
	#IPV6_CHECKSUM
 26

	)

416 
	#IPV6_V6ONLY
 27

	)

417 #i‚de‡
_KERNEL


418 
	#IPV6_BINDV6ONLY
 
IPV6_V6ONLY


	)

422 
	#IPV6_IPSEC_POLICY
 28

	)

425 
	#IPV6_FAITH
 29

	)

428 
	#IPV6_FW_ADD
 30

	)

429 
	#IPV6_FW_DEL
 31

	)

430 
	#IPV6_FW_FLUSH
 32

	)

431 
	#IPV6_FW_ZERO
 33

	)

432 
	#IPV6_FW_GET
 34

	)

436 
	#IPV6_RTHDRDSTOPTS
 35

	)

438 
	#IPV6_RECVPKTINFO
 36

	)

439 
	#IPV6_RECVHOPLIMIT
 37

	)

440 
	#IPV6_RECVRTHDR
 38

	)

441 
	#IPV6_RECVHOPOPTS
 39

	)

442 
	#IPV6_RECVDSTOPTS
 40

	)

443 #ifde‡
_KERNEL


444 
	#IPV6_RECVRTHDRDSTOPTS
 41

	)

447 
	#IPV6_USE_MIN_MTU
 42

	)

448 
	#IPV6_RECVPATHMTU
 43

	)

450 
	#IPV6_PATHMTU
 44

	)

453 
	#IPV6_REACHCONF
 45

	)

458 
	#IPV6_PKTINFO
 46

	)

459 
	#IPV6_HOPLIMIT
 47

	)

460 
	#IPV6_NEXTHOP
 48

	)

461 
	#IPV6_HOPOPTS
 49

	)

462 
	#IPV6_DSTOPTS
 50

	)

463 
	#IPV6_RTHDR
 51

	)

465 
	#IPV6_PKTOPTIONS
 52

	)

469 
	#IPV6_RECVTCLASS
 57

	)

471 
	#IPV6_AUTOFLOWLABEL
 59

	)

473 
	#IPV6_TCLASS
 61

	)

474 
	#IPV6_DONTFRAG
 62

	)

476 
	#IPV6_PREFER_TEMPADDR
 63

	)

480 
	#IPV6_BINDANY
 64

	)

486 
	#IPV6_MSFILTER
 74

	)

492 
	#IPV6_RTHDR_LOOSE
 0

	)

493 
	#IPV6_RTHDR_STRICT
 1

	)

494 
	#IPV6_RTHDR_TYPE_0
 0

	)

499 
	#IPV6_DEFAULT_MULTICAST_HOPS
 1

	)

500 
	#IPV6_DEFAULT_MULTICAST_LOOP
 1

	)

507 
	#IPV6_MIN_MEMBERSHIPS
 31

	)

508 
	#IPV6_MAX_MEMBERSHIPS
 4095

	)

514 
	#IPV6_MAX_GROUP_SRC_FILTER
 512

	)

515 
	#IPV6_MAX_SOCK_SRC_FILTER
 128

	)

520 
	sùv6_mªq
 {

521 
ö6_addr
 
	mùv6mr_mu…üddr
;

522 
	mùv6mr_öãrÁ˚
;

528 
	sö6_pktöfo
 {

529 
ö6_addr
 
	mùi6_addr
;

530 
	mùi6_ifödex
;

536 
	sù6_mtuöfo
 {

537 
sockaddr_ö6
 
	mù6m_addr
;

538 
uöt32_t
 
	mù6m_mtu
;

545 
	#IPV6_PORTRANGE_DEFAULT
 0

	)

546 
	#IPV6_PORTRANGE_HIGH
 1

	)

547 
	#IPV6_PORTRANGE_LOW
 2

	)

549 #i‡
__BSD_VISIBLE


556 
	#IPV6PROTO_MAXID
 (
IPPROTO_PIM
 + 1Ë

	)

561 
	#IPV6CTL_FORWARDING
 1

	)

562 
	#IPV6CTL_SENDREDIRECTS
 2

	)

563 
	#IPV6CTL_DEFHLIM
 3

	)

564 #ifde‡
nŸyë


565 
	#IPV6CTL_DEFMTU
 4

	)

567 
	#IPV6CTL_FORWSRCRT
 5

	)

568 
	#IPV6CTL_STATS
 6

	)

569 
	#IPV6CTL_MRTSTATS
 7

	)

570 
	#IPV6CTL_MRTPROTO
 8

	)

571 
	#IPV6CTL_MAXFRAGPACKETS
 9

	)

572 
	#IPV6CTL_SOURCECHECK
 10

	)

573 
	#IPV6CTL_SOURCECHECK_LOGINT
 11

	)

574 
	#IPV6CTL_ACCEPT_RTADV
 12

	)

575 
	#IPV6CTL_KEEPFAITH
 13

	)

576 
	#IPV6CTL_LOG_INTERVAL
 14

	)

577 
	#IPV6CTL_HDRNESTLIMIT
 15

	)

578 
	#IPV6CTL_DAD_COUNT
 16

	)

579 
	#IPV6CTL_AUTO_FLOWLABEL
 17

	)

580 
	#IPV6CTL_DEFMCASTHLIM
 18

	)

581 
	#IPV6CTL_GIF_HLIM
 19

	)

582 
	#IPV6CTL_KAME_VERSION
 20

	)

583 
	#IPV6CTL_USE_DEPRECATED
 21

	)

584 
	#IPV6CTL_RR_PRUNE
 22

	)

586 
	#IPV6CTL_MAPPED_ADDR
 23

	)

588 
	#IPV6CTL_V6ONLY
 24

	)

589 
	#IPV6CTL_RTEXPIRE
 25

	)

590 
	#IPV6CTL_RTMINEXPIRE
 26

	)

591 
	#IPV6CTL_RTMAXCACHE
 27

	)

593 
	#IPV6CTL_USETEMPADDR
 32

	)

594 
	#IPV6CTL_TEMPPLTIME
 33

	)

595 
	#IPV6CTL_TEMPVLTIME
 34

	)

596 
	#IPV6CTL_AUTO_LINKLOCAL
 35

	)

597 
	#IPV6CTL_RIP6STATS
 36

	)

598 
	#IPV6CTL_PREFER_TEMPADDR
 37

	)

599 
	#IPV6CTL_ADDRCTLPOLICY
 38

	)

600 
	#IPV6CTL_USE_DEFAULTZONE
 39

	)

602 
	#IPV6CTL_MAXFRAGS
 41

	)

604 
	#IPV6CTL_IFQ
 42

	)

605 
	#IPV6CTL_ISATAPRTR
 43

	)

607 
	#IPV6CTL_MCAST_PMTU
 44

	)

611 
	#IPV6CTL_STEALTH
 45

	)

613 
	#ICMPV6CTL_ND6_ONLINKNSRFC4861
 47

	)

614 
	#IPV6CTL_MAXID
 48

	)

620 
	#M_AUTHIPHDR
 
M_PROTO2


	)

621 
	#M_DECRYPTED
 
M_PROTO3


	)

622 
	#M_LOOP
 
M_PROTO4


	)

623 
	#M_AUTHIPDGM
 
M_PROTO5


	)

624 
	#M_RTALERT_MLD
 
M_PROTO6


	)

626 #ifde‡
_KERNEL


627 
	gcmsghdr
;

629 
ö6_cksum
 
__P
((
mbuf
 *, 
u_öt8_t
, 
u_öt32_t
, u_int32_t));

630 
ö6_loˇœddr
 
__P
((
ö6_addr
 *));

631 
ö6_addrsc›e
 
__P
((
ö6_addr
 *));

632 
ö6_iÁddr
 *
ö6_iÁwôhiÂ
 
__P
((
i‚ë
 *, 
ö6_addr
 *));

633 
ö6_if_up
 
__P
((
i‚ë
 *));

634 
	gsockaddr
;

635 
u_ch¨
 
ù6_¥Ÿox
[];

637 
ö6_sö6_2_sö
 
__P
((
sockaddr_ö
 *
sö
,

638 
sockaddr_ö6
 *
sö6
));

639 
ö6_sö_2_v4m≠sö6
 
__P
((
sockaddr_ö
 *
sö
,

640 
sockaddr_ö6
 *
sö6
));

641 
ö6_sö6_2_sö_ö_sock
 
__P
((
sockaddr
 *
«m
));

642 
ö6_sö_2_v4m≠sö6_ö_sock
 
__P
((
sockaddr
 **
«m
));

643 
addr£l_pﬁicy_öô
 
__P
(());

645 
	#ßtosö6
(
ß
Ë((
sockaddr_ö6
 *)(ß))

	)

646 
	#sö6toß
(
sö6
Ë((
sockaddr
 *)(sö6))

	)

647 
	#iÁtoü6
(
iÁ
Ë((
ö6_iÁddr
 *)(iÁ))

	)

649 (*
Áôh¥efix_p
)(
ö6_addr
 *);

652 #i‚de‡
_SIZE_T_DECLARED


653 
__size_t
 
	tsize_t
;

654 
	#_SIZE_T_DECLARED


	)

657 #i‚de‡
_SOCKLEN_T_DECLARED


658 
__sockÀn_t
 
	tsockÀn_t
;

659 
	#_SOCKLEN_T_DECLARED


	)

662 #i‡
__BSD_VISIBLE


664 
__BEGIN_DECLS


665 
cmsghdr
;

667 
öë6_›ti⁄_•a˚
 
	`__P
(());

668 
öë6_›ti⁄_öô
 
	`__P
((*, 
cmsghdr
 **, ));

669 
öë6_›ti⁄_≠≥nd
 
	`__P
((
cmsghdr
 *, c⁄° 
uöt8_t
 *,

671 
uöt8_t
 *
öë6_›ti⁄_Æloc
 
	`__P
((
cmsghdr
 *, , , ));

672 
öë6_›ti⁄_√xt
 
	`__P
((c⁄° 
cmsghdr
 *, 
uöt8_t
 **));

673 
öë6_›ti⁄_föd
 
	`__P
((c⁄° 
cmsghdr
 *, 
uöt8_t
 **, ));

675 
size_t
 
öë6_πhdr_•a˚
 
	`__P
((, ));

676 
cmsghdr
 *
öë6_πhdr_öô
 
	`__P
((*, ));

677 
öë6_πhdr_add
 
	`__P
((
cmsghdr
 *, c⁄° 
ö6_addr
 *,

679 
öë6_πhdr_œ°h›
 
	`__P
((
cmsghdr
 *, ));

681 
öë6_πhdr_ªvî£
 
	`__P
((c⁄° 
cmsghdr
 *, cmsghdr *));

683 
öë6_πhdr_£gmíts
 
	`__P
((c⁄° 
cmsghdr
 *));

684 
ö6_addr
 *
öë6_πhdr_gëaddr
 
	`__P
((
cmsghdr
 *, ));

685 
öë6_πhdr_gëÊags
 
	`__P
((c⁄° 
cmsghdr
 *, ));

687 
öë6_›t_öô
 
	`__P
((*, 
sockÀn_t
));

688 
öë6_›t_≠≥nd
 
	`__P
((*, 
sockÀn_t
, , 
uöt8_t
, socklen_t,

689 
uöt8_t
, **));

690 
öë6_›t_föish
 
	`__P
((*, 
sockÀn_t
, ));

691 
öë6_›t_£t_vÆ
 
	`__P
((*, , *, 
sockÀn_t
));

693 
öë6_›t_√xt
 
	`__P
((*, 
sockÀn_t
, , 
uöt8_t
 *, socklen_t *,

695 
öë6_›t_föd
 
	`__P
((*, 
sockÀn_t
, , 
uöt8_t
, socklen_t *,

697 
öë6_›t_gë_vÆ
 
	`__P
((*, , *, 
sockÀn_t
));

698 
sockÀn_t
 
öë6_πh_•a˚
 
	`__P
((, ));

699 *
öë6_πh_öô
 
	`__P
((*, 
sockÀn_t
, , ));

700 
öë6_πh_add
 
	`__P
((*, c⁄° 
ö6_addr
 *));

701 
öë6_πh_ªvî£
 
	`__P
((const *, *));

702 
öë6_πh_£gmíts
 
	`__P
((const *));

703 
ö6_addr
 *
öë6_πh_gëaddr
 
	`__P
((const *, ));

704 
__END_DECLS


	@/usr/include/openssl/des_old.h

91 #i‚de‡
HEADER_DES_H


92 
	#HEADER_DES_H


	)

94 
	~<›ís¶/e_os2.h
>

96 #ifde‡
OPENSSL_NO_DES


97 #îr‹ 
DES
 
is
 
dißbÀd
.

100 #i‚de‡
HEADER_NEW_DES_H


101 #îr‹ 
You
 
mu°
 
ö˛ude
 
des
.
h
, 
nŸ
 
des_ﬁd
.h 
dúe˘ly
.

104 #ifde‡
_KERBEROS_DES_H


105 #îr‹ <
›ís¶
/
des_ﬁd
.
h
> 
ª∂a˚s
 <
kîbîos
/
des
.h>.

108 
	~<›ís¶/symhacks.h
>

110 #ifde‡
OPENSSL_BUILD_SHLIBCRYPTO


111 #unde‡
OPENSSL_EXTERN


112 
	#OPENSSL_EXTERN
 
OPENSSL_EXPORT


	)

115 #ifde‡ 
__˝lu•lus


119 #ifde‡
_


120 #unde‡
_


123 
	t_os¶_ﬁd_des_cblock
[8];

124 
	s_os¶_ﬁd_des_ks_°ru˘


127 
_os¶_ﬁd_des_cblock
 
_
;

130 
DES_LONG
 
∑d
[2];

131 } 
ks
;

132 } 
	t_os¶_ﬁd_des_key_scheduÀ
[16];

134 #i‚de‡
OPENSSL_DES_LIBDES_COMPATIBILITY


135 
	#des_cblock
 
DES_cblock


	)

136 
	#c⁄°_des_cblock
 
c⁄°_DES_cblock


	)

137 
	#des_key_scheduÀ
 
DES_key_scheduÀ


	)

138 
	#des_ecb3_í¸y±
(
i
,
o
,
k1
,
k2
,
k3
,
e
)\

139 
	`DES_ecb3_í¸y±
((
i
),(
o
),&(
k1
),&(
k2
),&(
k3
),(
e
))

	)

140 
	#des_ede3_cbc_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
k3
,
iv
,
e
)\

141 
	`DES_ede3_cbc_í¸y±
((
i
),(
o
),(
l
),&(
k1
),&(
k2
),&(
k3
),(
iv
),(
e
))

	)

142 
	#des_ede3_cbcm_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
k3
,
iv1
,
iv2
,
e
)\

143 
	`DES_ede3_cbcm_í¸y±
((
i
),(
o
),(
l
),&(
k1
),&(
k2
),&(
k3
),(
iv1
),(
iv2
),(
e
))

	)

144 
	#des_ede3_cfb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
k3
,
iv
,
n
,
e
)\

145 
	`DES_ede3_cfb64_í¸y±
((
i
),(
o
),(
l
),&(
k1
),&(
k2
),&(
k3
),(
iv
),(
n
),(
e
))

	)

146 
	#des_ede3_ofb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
k3
,
iv
,
n
)\

147 
	`DES_ede3_ofb64_í¸y±
((
i
),(
o
),(
l
),&(
k1
),&(
k2
),&(
k3
),(
iv
),(
n
))

	)

148 
	#des_›ti⁄s
()\

149 
	`DES_›ti⁄s
()

	)

150 
	#des_cbc_cksum
(
i
,
o
,
l
,
k
,
iv
)\

151 
	`DES_cbc_cksum
((
i
),(
o
),(
l
),&(
k
),(
iv
))

	)

152 
	#des_cbc_í¸y±
(
i
,
o
,
l
,
k
,
iv
,
e
)\

153 
	`DES_cbc_í¸y±
((
i
),(
o
),(
l
),&(
k
),(
iv
),(
e
))

	)

154 
	#des_ncbc_í¸y±
(
i
,
o
,
l
,
k
,
iv
,
e
)\

155 
	`DES_ncbc_í¸y±
((
i
),(
o
),(
l
),&(
k
),(
iv
),(
e
))

	)

156 
	#des_xcbc_í¸y±
(
i
,
o
,
l
,
k
,
iv
,
öw
,
outw
,
e
)\

157 
	`DES_xcbc_í¸y±
((
i
),(
o
),(
l
),&(
k
),(
iv
),(
öw
),(
outw
),(
e
))

	)

158 
	#des_cfb_í¸y±
(
i
,
o
,
n
,
l
,
k
,
iv
,
e
)\

159 
	`DES_cfb_í¸y±
((
i
),(
o
),(
n
),(
l
),&(
k
),(
iv
),(
e
))

	)

160 
	#des_ecb_í¸y±
(
i
,
o
,
k
,
e
)\

161 
	`DES_ecb_í¸y±
((
i
),(
o
),&(
k
),(
e
))

	)

162 
	#des_í¸y±1
(
d
,
k
,
e
)\

163 
	`DES_í¸y±1
((
d
),&(
k
),(
e
))

	)

164 
	#des_í¸y±2
(
d
,
k
,
e
)\

165 
	`DES_í¸y±2
((
d
),&(
k
),(
e
))

	)

166 
	#des_í¸y±3
(
d
,
k1
,
k2
,
k3
)\

167 
	`DES_í¸y±3
((
d
),&(
k1
),&(
k2
),&(
k3
))

	)

168 
	#des_de¸y±3
(
d
,
k1
,
k2
,
k3
)\

169 
	`DES_de¸y±3
((
d
),&(
k1
),&(
k2
),&(
k3
))

	)

170 
	#des_xwhôe_ö2out
(
k
,
i
,
o
)\

171 
	`DES_xwhôe_ö2out
((
k
),(
i
),(
o
))

	)

172 
	#des_íc_ªad
(
f
,
b
,
l
,
k
,
iv
)\

173 
	`DES_íc_ªad
((
f
),(
b
),(
l
),&(
k
),(
iv
))

	)

174 
	#des_íc_wrôe
(
f
,
b
,
l
,
k
,
iv
)\

175 
	`DES_íc_wrôe
((
f
),(
b
),(
l
),&(
k
),(
iv
))

	)

176 
	#des_f¸y±
(
b
,
s
,
r
)\

177 
	`DES_f¸y±
((
b
),(
s
),(
r
))

	)

179 
	#des_¸y±
(
b
,
s
)\

180 
	`DES_¸y±
((
b
),(
s
))

	)

181 #i‡!
deföed
(
PERL5
Ë&& !deföed(
__FªeBSD__
Ë&& !deföed(
NeXT
Ë&& !deföed(
__O≥nBSD__
)

182 
	#¸y±
(
b
,
s
)\

183 
	`DES_¸y±
((
b
),(
s
))

	)

186 
	#des_ofb_í¸y±
(
i
,
o
,
n
,
l
,
k
,
iv
)\

187 
	`DES_ofb_í¸y±
((
i
),(
o
),(
n
),(
l
),&(
k
),(
iv
))

	)

188 
	#des_pcbc_í¸y±
(
i
,
o
,
l
,
k
,
iv
,
e
)\

189 
	`DES_pcbc_í¸y±
((
i
),(
o
),(
l
),&(
k
),(
iv
),(
e
))

	)

190 
	#des_quad_cksum
(
i
,
o
,
l
,
c
,
s
)\

191 
	`DES_quad_cksum
((
i
),(
o
),(
l
),(
c
),(
s
))

	)

192 
	#des_øndom_£ed
(
k
)\

193 
	`_os¶_096_des_øndom_£ed
((
k
))

	)

194 
	#des_øndom_key
(
r
)\

195 
	`DES_øndom_key
((
r
))

	)

196 
	#des_ªad_∑ssw‹d
(
k
,
p
,
v
) \

197 
	`DES_ªad_∑ssw‹d
((
k
),(
p
),(
v
))

	)

198 
	#des_ªad_2∑ssw‹ds
(
k1
,
k2
,
p
,
v
) \

199 
	`DES_ªad_2∑ssw‹ds
((
k1
),(
k2
),(
p
),(
v
))

	)

200 
	#des_£t_odd_∑rôy
(
k
)\

201 
	`DES_£t_odd_∑rôy
((
k
))

	)

202 
	#des_check_key_∑rôy
(
k
)\

203 
	`DES_check_key_∑rôy
((
k
))

	)

204 
	#des_is_wók_key
(
k
)\

205 
	`DES_is_wók_key
((
k
))

	)

206 
	#des_£t_key
(
k
,
ks
)\

207 
	`DES_£t_key
((
k
),&(
ks
))

	)

208 
	#des_key_sched
(
k
,
ks
)\

209 
	`DES_key_sched
((
k
),&(
ks
))

	)

210 
	#des_£t_key_checked
(
k
,
ks
)\

211 
	`DES_£t_key_checked
((
k
),&(
ks
))

	)

212 
	#des_£t_key_unchecked
(
k
,
ks
)\

213 
	`DES_£t_key_unchecked
((
k
),&(
ks
))

	)

214 
	#des_°rög_to_key
(
s
,
k
)\

215 
	`DES_°rög_to_key
((
s
),(
k
))

	)

216 
	#des_°rög_to_2keys
(
s
,
k1
,
k2
)\

217 
	`DES_°rög_to_2keys
((
s
),(
k1
),(
k2
))

	)

218 
	#des_cfb64_í¸y±
(
i
,
o
,
l
,
ks
,
iv
,
n
,
e
)\

219 
	`DES_cfb64_í¸y±
((
i
),(
o
),(
l
),&(
ks
),(
iv
),(
n
),(
e
))

	)

220 
	#des_ofb64_í¸y±
(
i
,
o
,
l
,
ks
,
iv
,
n
)\

221 
	`DES_ofb64_í¸y±
((
i
),(
o
),(
l
),&(
ks
),(
iv
),(
n
))

	)

224 
	#des_ecb2_í¸y±
(
i
,
o
,
k1
,
k2
,
e
) \

225 
	`des_ecb3_í¸y±
((
i
),(
o
),(
k1
),(
k2
),(k1),(
e
))

	)

227 
	#des_ede2_cbc_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
e
) \

228 
	`des_ede3_cbc_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
e
))

	)

230 
	#des_ede2_cfb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
n
,
e
) \

231 
	`des_ede3_cfb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
n
),(
e
))

	)

233 
	#des_ede2_ofb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
n
) \

234 
	`des_ede3_ofb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
n
))

	)

236 
	#des_check_key
 
DES_check_key


	)

237 
	#des_rw_mode
 
DES_rw_mode


	)

241 
	#des_cblock
 
_os¶_ﬁd_des_cblock


	)

242 
	#des_key_scheduÀ
 
_os¶_ﬁd_des_key_scheduÀ


	)

243 
	#des_ecb3_í¸y±
(
i
,
o
,
k1
,
k2
,
k3
,
e
)\

244 
	`_os¶_ﬁd_des_ecb3_í¸y±
((
i
),(
o
),(
k1
),(
k2
),(
k3
),(
e
))

	)

245 
	#des_ede3_cbc_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
k3
,
iv
,
e
)\

246 
	`_os¶_ﬁd_des_ede3_cbc_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(
k3
),(
iv
),(
e
))

	)

247 
	#des_ede3_cfb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
k3
,
iv
,
n
,
e
)\

248 
	`_os¶_ﬁd_des_ede3_cfb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(
k3
),(
iv
),(
n
),(
e
))

	)

249 
	#des_ede3_ofb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
k3
,
iv
,
n
)\

250 
	`_os¶_ﬁd_des_ede3_ofb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(
k3
),(
iv
),(
n
))

	)

251 
	#des_›ti⁄s
()\

252 
	`_os¶_ﬁd_des_›ti⁄s
()

	)

253 
	#des_cbc_cksum
(
i
,
o
,
l
,
k
,
iv
)\

254 
	`_os¶_ﬁd_des_cbc_cksum
((
i
),(
o
),(
l
),(
k
),(
iv
))

	)

255 
	#des_cbc_í¸y±
(
i
,
o
,
l
,
k
,
iv
,
e
)\

256 
	`_os¶_ﬁd_des_cbc_í¸y±
((
i
),(
o
),(
l
),(
k
),(
iv
),(
e
))

	)

257 
	#des_ncbc_í¸y±
(
i
,
o
,
l
,
k
,
iv
,
e
)\

258 
	`_os¶_ﬁd_des_ncbc_í¸y±
((
i
),(
o
),(
l
),(
k
),(
iv
),(
e
))

	)

259 
	#des_xcbc_í¸y±
(
i
,
o
,
l
,
k
,
iv
,
öw
,
outw
,
e
)\

260 
	`_os¶_ﬁd_des_xcbc_í¸y±
((
i
),(
o
),(
l
),(
k
),(
iv
),(
öw
),(
outw
),(
e
))

	)

261 
	#des_cfb_í¸y±
(
i
,
o
,
n
,
l
,
k
,
iv
,
e
)\

262 
	`_os¶_ﬁd_des_cfb_í¸y±
((
i
),(
o
),(
n
),(
l
),(
k
),(
iv
),(
e
))

	)

263 
	#des_ecb_í¸y±
(
i
,
o
,
k
,
e
)\

264 
	`_os¶_ﬁd_des_ecb_í¸y±
((
i
),(
o
),(
k
),(
e
))

	)

265 
	#des_í¸y±
(
d
,
k
,
e
)\

266 
	`_os¶_ﬁd_des_í¸y±
((
d
),(
k
),(
e
))

	)

267 
	#des_í¸y±2
(
d
,
k
,
e
)\

268 
	`_os¶_ﬁd_des_í¸y±2
((
d
),(
k
),(
e
))

	)

269 
	#des_í¸y±3
(
d
,
k1
,
k2
,
k3
)\

270 
	`_os¶_ﬁd_des_í¸y±3
((
d
),(
k1
),(
k2
),(
k3
))

	)

271 
	#des_de¸y±3
(
d
,
k1
,
k2
,
k3
)\

272 
	`_os¶_ﬁd_des_de¸y±3
((
d
),(
k1
),(
k2
),(
k3
))

	)

273 
	#des_xwhôe_ö2out
(
k
,
i
,
o
)\

274 
	`_os¶_ﬁd_des_xwhôe_ö2out
((
k
),(
i
),(
o
))

	)

275 
	#des_íc_ªad
(
f
,
b
,
l
,
k
,
iv
)\

276 
	`_os¶_ﬁd_des_íc_ªad
((
f
),(
b
),(
l
),(
k
),(
iv
))

	)

277 
	#des_íc_wrôe
(
f
,
b
,
l
,
k
,
iv
)\

278 
	`_os¶_ﬁd_des_íc_wrôe
((
f
),(
b
),(
l
),(
k
),(
iv
))

	)

279 
	#des_f¸y±
(
b
,
s
,
r
)\

280 
	`_os¶_ﬁd_des_f¸y±
((
b
),(
s
),(
r
))

	)

281 
	#des_¸y±
(
b
,
s
)\

282 
	`_os¶_ﬁd_des_¸y±
((
b
),(
s
))

	)

284 
	#¸y±
(
b
,
s
)\

285 
	`_os¶_ﬁd_¸y±
((
b
),(
s
))

	)

287 
	#des_ofb_í¸y±
(
i
,
o
,
n
,
l
,
k
,
iv
)\

288 
	`_os¶_ﬁd_des_ofb_í¸y±
((
i
),(
o
),(
n
),(
l
),(
k
),(
iv
))

	)

289 
	#des_pcbc_í¸y±
(
i
,
o
,
l
,
k
,
iv
,
e
)\

290 
	`_os¶_ﬁd_des_pcbc_í¸y±
((
i
),(
o
),(
l
),(
k
),(
iv
),(
e
))

	)

291 
	#des_quad_cksum
(
i
,
o
,
l
,
c
,
s
)\

292 
	`_os¶_ﬁd_des_quad_cksum
((
i
),(
o
),(
l
),(
c
),(
s
))

	)

293 
	#des_øndom_£ed
(
k
)\

294 
	`_os¶_ﬁd_des_øndom_£ed
((
k
))

	)

295 
	#des_øndom_key
(
r
)\

296 
	`_os¶_ﬁd_des_øndom_key
((
r
))

	)

297 
	#des_ªad_∑ssw‹d
(
k
,
p
,
v
) \

298 
	`_os¶_ﬁd_des_ªad_∑ssw‹d
((
k
),(
p
),(
v
))

	)

299 
	#des_ªad_2∑ssw‹ds
(
k1
,
k2
,
p
,
v
) \

300 
	`_os¶_ﬁd_des_ªad_2∑ssw‹ds
((
k1
),(
k2
),(
p
),(
v
))

	)

301 
	#des_£t_odd_∑rôy
(
k
)\

302 
	`_os¶_ﬁd_des_£t_odd_∑rôy
((
k
))

	)

303 
	#des_is_wók_key
(
k
)\

304 
	`_os¶_ﬁd_des_is_wók_key
((
k
))

	)

305 
	#des_£t_key
(
k
,
ks
)\

306 
	`_os¶_ﬁd_des_£t_key
((
k
),(
ks
))

	)

307 
	#des_key_sched
(
k
,
ks
)\

308 
	`_os¶_ﬁd_des_key_sched
((
k
),(
ks
))

	)

309 
	#des_°rög_to_key
(
s
,
k
)\

310 
	`_os¶_ﬁd_des_°rög_to_key
((
s
),(
k
))

	)

311 
	#des_°rög_to_2keys
(
s
,
k1
,
k2
)\

312 
	`_os¶_ﬁd_des_°rög_to_2keys
((
s
),(
k1
),(
k2
))

	)

313 
	#des_cfb64_í¸y±
(
i
,
o
,
l
,
ks
,
iv
,
n
,
e
)\

314 
	`_os¶_ﬁd_des_cfb64_í¸y±
((
i
),(
o
),(
l
),(
ks
),(
iv
),(
n
),(
e
))

	)

315 
	#des_ofb64_í¸y±
(
i
,
o
,
l
,
ks
,
iv
,
n
)\

316 
	`_os¶_ﬁd_des_ofb64_í¸y±
((
i
),(
o
),(
l
),(
ks
),(
iv
),(
n
))

	)

319 
	#des_ecb2_í¸y±
(
i
,
o
,
k1
,
k2
,
e
) \

320 
	`des_ecb3_í¸y±
((
i
),(
o
),(
k1
),(
k2
),(k1),(
e
))

	)

322 
	#des_ede2_cbc_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
e
) \

323 
	`des_ede3_cbc_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
e
))

	)

325 
	#des_ede2_cfb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
n
,
e
) \

326 
	`des_ede3_cfb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
n
),(
e
))

	)

328 
	#des_ede2_ofb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
n
) \

329 
	`des_ede3_ofb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
n
))

	)

331 
	#des_check_key
 
DES_check_key


	)

332 
	#des_rw_mode
 
DES_rw_mode


	)

335 c⁄° *
_os¶_ﬁd_des_›ti⁄s
();

336 
_os¶_ﬁd_des_ecb3_í¸y±
(
_os¶_ﬁd_des_cblock
 *
öput
,_os¶_ﬁd_des_cblock *
ouçut
,

337 
_os¶_ﬁd_des_key_scheduÀ
 
ks1
,_os¶_ﬁd_des_key_scheduÀ 
ks2
,

338 
_os¶_ﬁd_des_key_scheduÀ
 
ks3
, 
íc
);

339 
DES_LONG
 
_os¶_ﬁd_des_cbc_cksum
(
_os¶_ﬁd_des_cblock
 *
öput
,_os¶_ﬁd_des_cblock *
ouçut
,

340 
Àngth
,
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
,
_os¶_ﬁd_des_cblock
 *
ivec
);

341 
_os¶_ﬁd_des_cbc_í¸y±
(
_os¶_ﬁd_des_cblock
 *
öput
,_os¶_ﬁd_des_cblock *
ouçut
,
Àngth
,

342 
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
,
_os¶_ﬁd_des_cblock
 *
ivec
,
íc
);

343 
_os¶_ﬁd_des_ncbc_í¸y±
(
_os¶_ﬁd_des_cblock
 *
öput
,_os¶_ﬁd_des_cblock *
ouçut
,
Àngth
,

344 
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
,
_os¶_ﬁd_des_cblock
 *
ivec
,
íc
);

345 
_os¶_ﬁd_des_xcbc_í¸y±
(
_os¶_ﬁd_des_cblock
 *
öput
,_os¶_ﬁd_des_cblock *
ouçut
,
Àngth
,

346 
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
,
_os¶_ﬁd_des_cblock
 *
ivec
,

347 
_os¶_ﬁd_des_cblock
 *
öw
,_os¶_ﬁd_des_cblock *
outw
,
íc
);

348 
_os¶_ﬁd_des_cfb_í¸y±
(*
ö
,*
out
,
numbôs
,

349 
Àngth
,
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
,
_os¶_ﬁd_des_cblock
 *
ivec
,
íc
);

350 
_os¶_ﬁd_des_ecb_í¸y±
(
_os¶_ﬁd_des_cblock
 *
öput
,_os¶_ﬁd_des_cblock *
ouçut
,

351 
_os¶_ﬁd_des_key_scheduÀ
 
ks
,
íc
);

352 
_os¶_ﬁd_des_í¸y±
(
DES_LONG
 *
d©a
,
_os¶_ﬁd_des_key_scheduÀ
 
ks
, 
íc
);

353 
_os¶_ﬁd_des_í¸y±2
(
DES_LONG
 *
d©a
,
_os¶_ﬁd_des_key_scheduÀ
 
ks
, 
íc
);

354 
_os¶_ﬁd_des_í¸y±3
(
DES_LONG
 *
d©a
, 
_os¶_ﬁd_des_key_scheduÀ
 
ks1
,

355 
_os¶_ﬁd_des_key_scheduÀ
 
ks2
, _os¶_ﬁd_des_key_scheduÀ 
ks3
);

356 
_os¶_ﬁd_des_de¸y±3
(
DES_LONG
 *
d©a
, 
_os¶_ﬁd_des_key_scheduÀ
 
ks1
,

357 
_os¶_ﬁd_des_key_scheduÀ
 
ks2
, _os¶_ﬁd_des_key_scheduÀ 
ks3
);

358 
_os¶_ﬁd_des_ede3_cbc_í¸y±
(
_os¶_ﬁd_des_cblock
 *
öput
, _os¶_ﬁd_des_cblock *
ouçut
,

359 
Àngth
, 
_os¶_ﬁd_des_key_scheduÀ
 
ks1
, _os¶_ﬁd_des_key_scheduÀ 
ks2
,

360 
_os¶_ﬁd_des_key_scheduÀ
 
ks3
, 
_os¶_ﬁd_des_cblock
 *
ivec
, 
íc
);

361 
_os¶_ﬁd_des_ede3_cfb64_í¸y±
(*
ö
, *
out
,

362 
Àngth
, 
_os¶_ﬁd_des_key_scheduÀ
 
ks1
, _os¶_ﬁd_des_key_scheduÀ 
ks2
,

363 
_os¶_ﬁd_des_key_scheduÀ
 
ks3
, 
_os¶_ﬁd_des_cblock
 *
ivec
, *
num
, 
íc
);

364 
_os¶_ﬁd_des_ede3_ofb64_í¸y±
(*
ö
, *
out
,

365 
Àngth
, 
_os¶_ﬁd_des_key_scheduÀ
 
ks1
, _os¶_ﬁd_des_key_scheduÀ 
ks2
,

366 
_os¶_ﬁd_des_key_scheduÀ
 
ks3
, 
_os¶_ﬁd_des_cblock
 *
ivec
, *
num
);

368 
_os¶_ﬁd_des_xwhôe_ö2out
(
_os¶_ﬁd_des_cblock
 (*
des_key
), _os¶_ﬁd_des_cblock (*
ö_whôe
),

369 
_os¶_ﬁd_des_cblock
 (*
out_whôe
));

372 
_os¶_ﬁd_des_íc_ªad
(
fd
,*
buf
,
Àn
,
_os¶_ﬁd_des_key_scheduÀ
 
sched
,

373 
_os¶_ﬁd_des_cblock
 *
iv
);

374 
_os¶_ﬁd_des_íc_wrôe
(
fd
,*
buf
,
Àn
,
_os¶_ﬁd_des_key_scheduÀ
 
sched
,

375 
_os¶_ﬁd_des_cblock
 *
iv
);

376 *
_os¶_ﬁd_des_f¸y±
(c⁄° *
buf
,c⁄° *
ß…
, *
ªt
);

377 *
_os¶_ﬁd_des_¸y±
(c⁄° *
buf
,c⁄° *
ß…
);

378 #i‡!
deföed
(
PERL5
Ë&& !deföed(
NeXT
)

379 *
_os¶_ﬁd_¸y±
(c⁄° *
buf
,c⁄° *
ß…
);

381 
_os¶_ﬁd_des_ofb_í¸y±
(*
ö
,*
out
,

382 
numbôs
,
Àngth
,
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
,
_os¶_ﬁd_des_cblock
 *
ivec
);

383 
_os¶_ﬁd_des_pcbc_í¸y±
(
_os¶_ﬁd_des_cblock
 *
öput
,_os¶_ﬁd_des_cblock *
ouçut
,
Àngth
,

384 
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
,
_os¶_ﬁd_des_cblock
 *
ivec
,
íc
);

385 
DES_LONG
 
_os¶_ﬁd_des_quad_cksum
(
_os¶_ﬁd_des_cblock
 *
öput
,_os¶_ﬁd_des_cblock *
ouçut
,

386 
Àngth
,
out_cou¡
,
_os¶_ﬁd_des_cblock
 *
£ed
);

387 
_os¶_ﬁd_des_øndom_£ed
(
_os¶_ﬁd_des_cblock
 
key
);

388 
_os¶_ﬁd_des_øndom_key
(
_os¶_ﬁd_des_cblock
 
ªt
);

389 
_os¶_ﬁd_des_ªad_∑ssw‹d
(
_os¶_ﬁd_des_cblock
 *
key
,c⁄° *
¥om±
,
vîify
);

390 
_os¶_ﬁd_des_ªad_2∑ssw‹ds
(
_os¶_ﬁd_des_cblock
 *
key1
,_os¶_ﬁd_des_cblock *
key2
,

391 c⁄° *
¥om±
,
vîify
);

392 
_os¶_ﬁd_des_£t_odd_∑rôy
(
_os¶_ﬁd_des_cblock
 *
key
);

393 
_os¶_ﬁd_des_is_wók_key
(
_os¶_ﬁd_des_cblock
 *
key
);

394 
_os¶_ﬁd_des_£t_key
(
_os¶_ﬁd_des_cblock
 *
key
,
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
);

395 
_os¶_ﬁd_des_key_sched
(
_os¶_ﬁd_des_cblock
 *
key
,
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
);

396 
_os¶_ﬁd_des_°rög_to_key
(*
°r
,
_os¶_ﬁd_des_cblock
 *
key
);

397 
_os¶_ﬁd_des_°rög_to_2keys
(*
°r
,
_os¶_ﬁd_des_cblock
 *
key1
,_os¶_ﬁd_des_cblock *
key2
);

398 
_os¶_ﬁd_des_cfb64_í¸y±
(*
ö
, *
out
, 
Àngth
,

399 
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
, 
_os¶_ﬁd_des_cblock
 *
ivec
, *
num
, 
íc
);

400 
_os¶_ﬁd_des_ofb64_í¸y±
(*
ö
, *
out
, 
Àngth
,

401 
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
, 
_os¶_ﬁd_des_cblock
 *
ivec
, *
num
);

403 
_os¶_096_des_øndom_£ed
(
des_cblock
 *
key
);

408 
	#_KERBEROS_DES_H


	)

410 
	#KRBDES_ENCRYPT
 
DES_ENCRYPT


	)

411 
	#KRBDES_DECRYPT
 
DES_DECRYPT


	)

413 #ifde‡
KERBEROS


414 
	#ENCRYPT
 
DES_ENCRYPT


	)

415 
	#DECRYPT
 
DES_DECRYPT


	)

418 #i‚de‡
NCOMPAT


419 
	#C_Block
 
des_cblock


	)

420 
	#Key_scheduÀ
 
des_key_scheduÀ


	)

421 
	#KEY_SZ
 
DES_KEY_SZ


	)

422 
	#°rög_to_key
 
des_°rög_to_key


	)

423 
	#ªad_pw_°rög
 
des_ªad_pw_°rög


	)

424 
	#øndom_key
 
des_øndom_key


	)

425 
	#pcbc_í¸y±
 
des_pcbc_í¸y±


	)

426 
	#£t_key
 
des_£t_key


	)

427 
	#key_sched
 
des_key_sched


	)

428 
	#ecb_í¸y±
 
des_ecb_í¸y±


	)

429 
	#cbc_í¸y±
 
des_cbc_í¸y±


	)

430 
	#ncbc_í¸y±
 
des_ncbc_í¸y±


	)

431 
	#xcbc_í¸y±
 
des_xcbc_í¸y±


	)

432 
	#cbc_cksum
 
des_cbc_cksum


	)

433 
	#quad_cksum
 
des_quad_cksum


	)

434 
	#check_∑rôy
 
des_check_key_∑rôy


	)

437 
	#des_fixup_key_∑rôy
 
DES_fixup_key_∑rôy


	)

439 #ifde‡ 
__˝lu•lus


444 
	~<›ís¶/ui_com∑t.h
>

	@/usr/include/openssl/dtls1.h

60 #i‚de‡
HEADER_DTLS1_H


61 
	#HEADER_DTLS1_H


	)

63 
	~<›ís¶/buf„r.h
>

64 
	~<›ís¶/pqueue.h
>

65 #ifde‡
OPENSSL_SYS_VMS


66 
	~<ªsour˚.h
>

67 
	~<sys/timeb.h
>

69 #ifde‡
OPENSSL_SYS_WIN32


71 
	~<wösock.h
>

72 #ñi‡
deföed
(
OPENSSL_SYS_NETWARE
Ë&& !deföed(
_WINSOCK2API_
)

73 
	~<sys/timevÆ.h
>

75 
	~<sys/time.h
>

78 #ifde‡ 
__˝lu•lus


82 
	#DTLS1_VERSION
 0xFEFF

	)

83 
	#DTLS1_BAD_VER
 0x0100

	)

87 
	#DTLS1_AD_MISSING_HANDSHAKE_MESSAGE
 110

	)

91 
	#DTLS1_COOKIE_LENGTH
 256

	)

93 
	#DTLS1_RT_HEADER_LENGTH
 13

	)

95 
	#DTLS1_HM_HEADER_LENGTH
 12

	)

97 
	#DTLS1_HM_BAD_FRAGMENT
 -2

	)

98 
	#DTLS1_HM_FRAGMENT_RETRY
 -3

	)

100 
	#DTLS1_CCS_HEADER_LENGTH
 1

	)

102 #ifde‡
DTLS1_AD_MISSING_HANDSHAKE_MESSAGE


103 
	#DTLS1_AL_HEADER_LENGTH
 7

	)

105 
	#DTLS1_AL_HEADER_LENGTH
 2

	)

109 
	sdés1_bôm≠_°


111 
PQ_64BIT
 
m≠
;

112 
Àngth
;

113 
PQ_64BIT
 
max_£q_num
;

114 } 
	tDTLS1_BITMAP
;

116 
	sdés1_ªå™smô_°©e


118 
EVP_CIPHER_CTX
 *
íc_wrôe_˘x
;

119 c⁄° 
EVP_MD
 *
wrôe_hash
;

120 #i‚de‡
OPENSSL_NO_COMP


121 
COMP_CTX
 *
com¥ess
;

123 *
com¥ess
;

125 
SSL_SESSION
 *
£ssi⁄
;

126 
ïoch
;

129 
	shm_hódî_°


131 
ty≥
;

132 
msg_Àn
;

133 
£q
;

134 
‰ag_off
;

135 
‰ag_Àn
;

136 
is_ccs
;

137 
dés1_ªå™smô_°©e
 
ßved_ªå™smô_°©e
;

140 
	sccs_hódî_°


142 
ty≥
;

143 
£q
;

146 
	sdés1_timeout_°


149 
ªad_timeouts
;

152 
wrôe_timeouts
;

155 
num_Æîts
;

158 
	sªc‹d_pqueue_°


160 
ïoch
;

161 
pqueue
 
q
;

162 } 
	tªc‹d_pqueue
;

164 
	shm_‰agmít_°


166 
hm_hódî_°
 
msg_hódî
;

167 *
‰agmít
;

168 *
ªas£mbly
;

169 } 
	thm_‰agmít
;

171 
	sdés1_°©e_°


173 
£nd_cookõ
;

174 
cookõ
[
DTLS1_COOKIE_LENGTH
];

175 
rcvd_cookõ
[
DTLS1_COOKIE_LENGTH
];

176 
cookõ_Àn
;

183 
r_ïoch
;

184 
w_ïoch
;

187 
DTLS1_BITMAP
 
bôm≠
;

190 
DTLS1_BITMAP
 
√xt_bôm≠
;

193 
h™dshake_wrôe_£q
;

194 
√xt_h™dshake_wrôe_£q
;

196 
h™dshake_ªad_£q
;

199 
œ°_wrôe_£quí˚
[8];

202 
ªc‹d_pqueue
 
u≈ro˚s£d_rcds
;

203 
ªc‹d_pqueue
 
¥o˚s£d_rcds
;

206 
pqueue
 
buf„ªd_mesßges
;

209 
pqueue
 
£¡_mesßges
;

216 
ªc‹d_pqueue
 
buf„ªd_≠p_d©a
;

219 
li°í
;

221 
mtu
;

223 
hm_hódî_°
 
w_msg_hdr
;

224 
hm_hódî_°
 
r_msg_hdr
;

226 
dés1_timeout_°
 
timeout
;

229 
timevÆ
 
√xt_timeout
;

232 
timeout_duøti⁄
;

236 
Æît_‰agmít
[
DTLS1_AL_HEADER_LENGTH
];

237 
Æît_‰agmít_Àn
;

238 
h™dshake_‰agmít
[
DTLS1_HM_HEADER_LENGTH
];

239 
h™dshake_‰agmít_Àn
;

241 
ªå™smôtög
;

242 
ch™ge_cùhî_•ec_ok
;

244 } 
	tDTLS1_STATE
;

246 
	sdés1_ªc‹d_d©a_°


248 *
∑ckë
;

249 
∑ckë_Àngth
;

250 
SSL3_BUFFER
 
rbuf
;

251 
SSL3_RECORD
 
ºec
;

252 } 
	tDTLS1_RECORD_DATA
;

256 
	#DTLS1_TMO_READ_COUNT
 2

	)

257 
	#DTLS1_TMO_WRITE_COUNT
 2

	)

259 
	#DTLS1_TMO_ALERT_COUNT
 12

	)

261 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ebcdic.h

3 #i‚de‡
HEADER_EBCDIC_H


4 
	#HEADER_EBCDIC_H


	)

6 
	~<sys/ty≥s.h
>

9 
	#os_tﬂscii
 
_›ís¶_os_tﬂscii


	)

10 
	#os_t€bcdic
 
_›ís¶_os_t€bcdic


	)

11 
	#ebcdic2ascii
 
_›ís¶_ebcdic2ascii


	)

12 
	#ascii2ebcdic
 
_›ís¶_ascii2ebcdic


	)

14 c⁄° 
os_tﬂscii
[256];

15 c⁄° 
os_t€bcdic
[256];

16 *
ebcdic2ascii
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

17 *
ascii2ebcdic
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

	@/usr/include/openssl/kssl.h

63 #i‚def 
KSSL_H


64 
	#KSSL_H


	)

66 
	~<›ís¶/›ís¶c⁄f.h
>

68 #i‚de‡
OPENSSL_NO_KRB5


70 
	~<°dio.h
>

71 
	~<˘y≥.h
>

72 
	~<krb5.h
>

74 #ifde‡ 
__˝lu•lus


82 #ifde‡
KRB5_HEIMDAL


83 
	tkrb5_o˘ë
;

84 
	#FAR


	)

87 #i‚de‡
FAR


88 
	#FAR


	)

99 #i‚def 
KRB5SVC


100 
	#KRB5SVC
 "ho°"

	)

103 #i‚def 
KRB5KEYTAB


104 
	#KRB5KEYTAB
 "/ëc/krb5.keyèb"

	)

107 #i‚de‡
KRB5SENDAUTH


108 
	#KRB5SENDAUTH
 1

	)

111 #i‚de‡
KRB5CHECKAUTH


112 
	#KRB5CHECKAUTH
 1

	)

115 #i‚de‡
KSSL_CLOCKSKEW


116 
	#KSSL_CLOCKSKEW
 300;

	)

119 
	#KSSL_ERR_MAX
 255

	)

120 
	sks¶_îr_°
 {

121 
	gªas⁄
;

122 
	gãxt
[
KSSL_ERR_MAX
+1];

123 } 
	tKSSL_ERR
;

130 
	sks¶_˘x_°


133 *
	g£rvi˚_«me
;

134 *
	g£rvi˚_ho°
;

135 *
	g˛õ¡_¥öc
;

136 *
	gkeyèb_fûe
;

137 *
	g¸ed_ˇche
;

138 
krb5_í˘y≥
 
	gí˘y≥
;

139 
	gÀngth
;

140 
krb5_o˘ë
 
FAR
 *
	gkey
;

141 } 
	tKSSL_CTX
;

143 
	#KSSL_CLIENT
 1

	)

144 
	#KSSL_SERVER
 2

	)

145 
	#KSSL_SERVICE
 3

	)

146 
	#KSSL_KEYTAB
 4

	)

148 
	#KSSL_CTX_OK
 0

	)

149 
	#KSSL_CTX_ERR
 1

	)

150 
	#KSSL_NOMEM
 2

	)

153 
krb5_îr‹_code
 
ks¶_˘x_£t°rög
(
KSSL_CTX
 *
ks¶_˘x
, 
which
, *
ãxt
);

154 
KSSL_CTX
 *
ks¶_˘x_√w
();

155 
KSSL_CTX
 *
ks¶_˘x_‰ì
(KSSL_CTX *
ks¶_˘x
);

156 
ks¶_˘x_show
(
KSSL_CTX
 *
ks¶_˘x
);

157 
krb5_îr‹_code
 
ks¶_˘x_£çröc
(
KSSL_CTX
 *
ks¶_˘x
, 
which
,

158 
krb5_d©a
 *
ªÆm
, krb5_d©®*
ítôy
, 
√¡ôõs
);

159 
krb5_îr‹_code
 
ks¶_cgë_tkt
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_d©a
 **
íc_tkç
,

160 
krb5_d©a
 *
authíp
, 
KSSL_ERR
 *
ks¶_îr
);

161 
krb5_îr‹_code
 
ks¶_sgë_tkt
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_d©a
 *
öd©a
,

162 
krb5_tickë_times
 *
âimes
, 
KSSL_ERR
 *
ks¶_îr
);

163 
krb5_îr‹_code
 
ks¶_˘x_£tkey
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_keyblock
 *
£ssi⁄
);

164 
ks¶_îr_£t
(
KSSL_ERR
 *
ks¶_îr
, 
ªas⁄
, *
ãxt
);

165 
ks¶_krb5_‰ì_d©a_c⁄ã¡s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_d©a
 *
d©a
);

166 
krb5_îr‹_code
 
ks¶_buûd_¥öcùÆ_2
(
krb5_c⁄ãxt
 
c⁄ãxt
,

167 
krb5_¥öcùÆ
 *
¥öc
, 
æí
, c⁄° *
ªÆm
,

168 
¶í
, c⁄° *
svc
, 
hÀn
, c⁄° *
ho°
);

169 
krb5_îr‹_code
 
ks¶_vÆid©e_times
(
krb5_time°amp
 
©ime
,

170 
krb5_tickë_times
 *
âimes
);

171 
krb5_îr‹_code
 
ks¶_check_authít
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_d©a
 *
authíç
,

172 
krb5_time°amp
 *
©imï
, 
KSSL_ERR
 *
ks¶_îr
);

173 *
ks¶_skù_c⁄found
(
krb5_í˘y≥
 
í˘y≥
, *
authn
);

175 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/pem2.h

60 #ifde‡
__˝lu•lus


64 #i‚de‡
HEADER_PEM_H


65 
ERR_lﬂd_PEM_°rögs
();

68 #ifde‡
__˝lu•lus


	@/usr/include/openssl/ssl2.h

59 #i‚de‡
HEADER_SSL2_H


60 
	#HEADER_SSL2_H


	)

62 #ifde‡ 
__˝lu•lus


67 
	#SSL2_VERSION
 0x0002

	)

68 
	#SSL2_VERSION_MAJOR
 0x00

	)

69 
	#SSL2_VERSION_MINOR
 0x02

	)

74 
	#SSL2_MT_ERROR
 0

	)

75 
	#SSL2_MT_CLIENT_HELLO
 1

	)

76 
	#SSL2_MT_CLIENT_MASTER_KEY
 2

	)

77 
	#SSL2_MT_CLIENT_FINISHED
 3

	)

78 
	#SSL2_MT_SERVER_HELLO
 4

	)

79 
	#SSL2_MT_SERVER_VERIFY
 5

	)

80 
	#SSL2_MT_SERVER_FINISHED
 6

	)

81 
	#SSL2_MT_REQUEST_CERTIFICATE
 7

	)

82 
	#SSL2_MT_CLIENT_CERTIFICATE
 8

	)

85 
	#SSL2_PE_UNDEFINED_ERROR
 0x0000

	)

86 
	#SSL2_PE_NO_CIPHER
 0x0001

	)

87 
	#SSL2_PE_NO_CERTIFICATE
 0x0002

	)

88 
	#SSL2_PE_BAD_CERTIFICATE
 0x0004

	)

89 
	#SSL2_PE_UNSUPPORTED_CERTIFICATE_TYPE
 0x0006

	)

92 
	#SSL2_CK_NULL_WITH_MD5
 0x02000000

	)

93 
	#SSL2_CK_RC4_128_WITH_MD5
 0x02010080

	)

94 
	#SSL2_CK_RC4_128_EXPORT40_WITH_MD5
 0x02020080

	)

95 
	#SSL2_CK_RC2_128_CBC_WITH_MD5
 0x02030080

	)

96 
	#SSL2_CK_RC2_128_CBC_EXPORT40_WITH_MD5
 0x02040080

	)

97 
	#SSL2_CK_IDEA_128_CBC_WITH_MD5
 0x02050080

	)

98 
	#SSL2_CK_DES_64_CBC_WITH_MD5
 0x02060040

	)

99 
	#SSL2_CK_DES_64_CBC_WITH_SHA
 0x02060140

	)

100 
	#SSL2_CK_DES_192_EDE3_CBC_WITH_MD5
 0x020700c0

	)

101 
	#SSL2_CK_DES_192_EDE3_CBC_WITH_SHA
 0x020701c0

	)

102 
	#SSL2_CK_RC4_64_WITH_MD5
 0x02080080

	)

104 
	#SSL2_CK_DES_64_CFB64_WITH_MD5_1
 0x02ff0800

	)

105 
	#SSL2_CK_NULL
 0x02ff0810

	)

107 
	#SSL2_TXT_DES_64_CFB64_WITH_MD5_1
 "DES-CFB-M1"

	)

108 
	#SSL2_TXT_NULL_WITH_MD5
 "NULL-MD5"

	)

109 
	#SSL2_TXT_RC4_128_WITH_MD5
 "RC4-MD5"

	)

110 
	#SSL2_TXT_RC4_128_EXPORT40_WITH_MD5
 "EXP-RC4-MD5"

	)

111 
	#SSL2_TXT_RC2_128_CBC_WITH_MD5
 "RC2-CBC-MD5"

	)

112 
	#SSL2_TXT_RC2_128_CBC_EXPORT40_WITH_MD5
 "EXP-RC2-CBC-MD5"

	)

113 
	#SSL2_TXT_IDEA_128_CBC_WITH_MD5
 "IDEA-CBC-MD5"

	)

114 
	#SSL2_TXT_DES_64_CBC_WITH_MD5
 "DES-CBC-MD5"

	)

115 
	#SSL2_TXT_DES_64_CBC_WITH_SHA
 "DES-CBC-SHA"

	)

116 
	#SSL2_TXT_DES_192_EDE3_CBC_WITH_MD5
 "DES-CBC3-MD5"

	)

117 
	#SSL2_TXT_DES_192_EDE3_CBC_WITH_SHA
 "DES-CBC3-SHA"

	)

118 
	#SSL2_TXT_RC4_64_WITH_MD5
 "RC4-64-MD5"

	)

120 
	#SSL2_TXT_NULL
 "NULL"

	)

123 
	#SSL2_CF_5_BYTE_ENC
 0x01

	)

124 
	#SSL2_CF_8_BYTE_ENC
 0x02

	)

127 
	#SSL2_CT_X509_CERTIFICATE
 0x01

	)

130 
	#SSL2_AT_MD5_WITH_RSA_ENCRYPTION
 0x01

	)

132 
	#SSL2_MAX_SSL_SESSION_ID_LENGTH
 32

	)

135 
	#SSL2_MAX_MASTER_KEY_LENGTH_IN_BITS
 256

	)

136 #ifde‡
OPENSSL_SYS_MPE


137 
	#SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER
 29998u

	)

139 
	#SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER
 32767u

	)

141 
	#SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER
 16383

	)

143 
	#SSL2_CHALLENGE_LENGTH
 16

	)

145 
	#SSL2_MIN_CHALLENGE_LENGTH
 16

	)

146 
	#SSL2_MAX_CHALLENGE_LENGTH
 32

	)

147 
	#SSL2_CONNECTION_ID_LENGTH
 16

	)

148 
	#SSL2_MAX_CONNECTION_ID_LENGTH
 16

	)

149 
	#SSL2_SSL_SESSION_ID_LENGTH
 16

	)

150 
	#SSL2_MAX_CERT_CHALLENGE_LENGTH
 32

	)

151 
	#SSL2_MIN_CERT_CHALLENGE_LENGTH
 16

	)

152 
	#SSL2_MAX_KEY_MATERIAL_LENGTH
 24

	)

154 #i‚de‡
HEADER_SSL_LOCL_H


155 
	#CERT
 

	)

158 
	ss¶2_°©e_°


160 
thªe_byã_hódî
;

161 
˛ór_ãxt
;

162 
esˇ≥
;

163 
s¶2_rﬁlback
;

167 
wnum
;

168 
w≥nd_tŸ
;

169 c⁄° *
w≥nd_buf
;

171 
w≥nd_off
;

172 
w≥nd_Àn
;

173 
w≥nd_ªt
;

176 
rbuf_À·
;

177 
rbuf_offs
;

178 *
rbuf
;

179 *
wbuf
;

181 *
wrôe_±r
;

184 
∑ddög
;

185 
æígth
;

186 
ø˘_d©a_Àngth
;

187 
wÀngth
;

188 
wa˘_d©a_Àngth
;

189 *
ø˘_d©a
;

190 *
wa˘_d©a
;

191 *
mac_d©a
;

193 *
ªad_key
;

194 *
wrôe_key
;

197 
chÆÀnge_Àngth
;

198 
chÆÀnge
[
SSL2_MAX_CHALLENGE_LENGTH
];

199 
c⁄n_id_Àngth
;

200 
c⁄n_id
[
SSL2_MAX_CONNECTION_ID_LENGTH
];

201 
key_m©îül_Àngth
;

202 
key_m©îül
[
SSL2_MAX_KEY_MATERIAL_LENGTH
*2];

204 
ªad_£quí˚
;

205 
wrôe_£quí˚
;

208 
c⁄n_id_Àngth
;

209 
˚π_ty≥
;

210 
˚π_Àngth
;

211 
c¶
;

212 
˛ór
;

213 
íc
;

214 
c˛
[
SSL2_MAX_CERT_CHALLENGE_LENGTH
];

215 
cùhî_•ec_Àngth
;

216 
£ssi⁄_id_Àngth
;

217 
˛í
;

218 
æí
;

219 } 
tmp
;

220 } 
	tSSL2_STATE
;

224 
	#SSL2_ST_SEND_CLIENT_HELLO_A
 (0x10|
SSL_ST_CONNECT
)

	)

225 
	#SSL2_ST_SEND_CLIENT_HELLO_B
 (0x11|
SSL_ST_CONNECT
)

	)

226 
	#SSL2_ST_GET_SERVER_HELLO_A
 (0x20|
SSL_ST_CONNECT
)

	)

227 
	#SSL2_ST_GET_SERVER_HELLO_B
 (0x21|
SSL_ST_CONNECT
)

	)

228 
	#SSL2_ST_SEND_CLIENT_MASTER_KEY_A
 (0x30|
SSL_ST_CONNECT
)

	)

229 
	#SSL2_ST_SEND_CLIENT_MASTER_KEY_B
 (0x31|
SSL_ST_CONNECT
)

	)

230 
	#SSL2_ST_SEND_CLIENT_FINISHED_A
 (0x40|
SSL_ST_CONNECT
)

	)

231 
	#SSL2_ST_SEND_CLIENT_FINISHED_B
 (0x41|
SSL_ST_CONNECT
)

	)

232 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_A
 (0x50|
SSL_ST_CONNECT
)

	)

233 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_B
 (0x51|
SSL_ST_CONNECT
)

	)

234 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_C
 (0x52|
SSL_ST_CONNECT
)

	)

235 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_D
 (0x53|
SSL_ST_CONNECT
)

	)

236 
	#SSL2_ST_GET_SERVER_VERIFY_A
 (0x60|
SSL_ST_CONNECT
)

	)

237 
	#SSL2_ST_GET_SERVER_VERIFY_B
 (0x61|
SSL_ST_CONNECT
)

	)

238 
	#SSL2_ST_GET_SERVER_FINISHED_A
 (0x70|
SSL_ST_CONNECT
)

	)

239 
	#SSL2_ST_GET_SERVER_FINISHED_B
 (0x71|
SSL_ST_CONNECT
)

	)

240 
	#SSL2_ST_CLIENT_START_ENCRYPTION
 (0x80|
SSL_ST_CONNECT
)

	)

241 
	#SSL2_ST_X509_GET_CLIENT_CERTIFICATE
 (0x90|
SSL_ST_CONNECT
)

	)

243 
	#SSL2_ST_GET_CLIENT_HELLO_A
 (0x10|
SSL_ST_ACCEPT
)

	)

244 
	#SSL2_ST_GET_CLIENT_HELLO_B
 (0x11|
SSL_ST_ACCEPT
)

	)

245 
	#SSL2_ST_GET_CLIENT_HELLO_C
 (0x12|
SSL_ST_ACCEPT
)

	)

246 
	#SSL2_ST_SEND_SERVER_HELLO_A
 (0x20|
SSL_ST_ACCEPT
)

	)

247 
	#SSL2_ST_SEND_SERVER_HELLO_B
 (0x21|
SSL_ST_ACCEPT
)

	)

248 
	#SSL2_ST_GET_CLIENT_MASTER_KEY_A
 (0x30|
SSL_ST_ACCEPT
)

	)

249 
	#SSL2_ST_GET_CLIENT_MASTER_KEY_B
 (0x31|
SSL_ST_ACCEPT
)

	)

250 
	#SSL2_ST_SEND_SERVER_VERIFY_A
 (0x40|
SSL_ST_ACCEPT
)

	)

251 
	#SSL2_ST_SEND_SERVER_VERIFY_B
 (0x41|
SSL_ST_ACCEPT
)

	)

252 
	#SSL2_ST_SEND_SERVER_VERIFY_C
 (0x42|
SSL_ST_ACCEPT
)

	)

253 
	#SSL2_ST_GET_CLIENT_FINISHED_A
 (0x50|
SSL_ST_ACCEPT
)

	)

254 
	#SSL2_ST_GET_CLIENT_FINISHED_B
 (0x51|
SSL_ST_ACCEPT
)

	)

255 
	#SSL2_ST_SEND_SERVER_FINISHED_A
 (0x60|
SSL_ST_ACCEPT
)

	)

256 
	#SSL2_ST_SEND_SERVER_FINISHED_B
 (0x61|
SSL_ST_ACCEPT
)

	)

257 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_A
 (0x70|
SSL_ST_ACCEPT
)

	)

258 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_B
 (0x71|
SSL_ST_ACCEPT
)

	)

259 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_C
 (0x72|
SSL_ST_ACCEPT
)

	)

260 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_D
 (0x73|
SSL_ST_ACCEPT
)

	)

261 
	#SSL2_ST_SERVER_START_ENCRYPTION
 (0x80|
SSL_ST_ACCEPT
)

	)

262 
	#SSL2_ST_X509_GET_SERVER_CERTIFICATE
 (0x90|
SSL_ST_ACCEPT
)

	)

264 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl23.h

59 #i‚de‡
HEADER_SSL23_H


60 
	#HEADER_SSL23_H


	)

62 #ifde‡ 
__˝lu•lus


68 
	#SSL23_ST_CW_CLNT_HELLO_A
 (0x210|
SSL_ST_CONNECT
)

	)

69 
	#SSL23_ST_CW_CLNT_HELLO_B
 (0x211|
SSL_ST_CONNECT
)

	)

71 
	#SSL23_ST_CR_SRVR_HELLO_A
 (0x220|
SSL_ST_CONNECT
)

	)

72 
	#SSL23_ST_CR_SRVR_HELLO_B
 (0x221|
SSL_ST_CONNECT
)

	)

76 
	#SSL23_ST_SR_CLNT_HELLO_A
 (0x210|
SSL_ST_ACCEPT
)

	)

77 
	#SSL23_ST_SR_CLNT_HELLO_B
 (0x211|
SSL_ST_ACCEPT
)

	)

79 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl3.h

117 #i‚de‡
HEADER_SSL3_H


118 
	#HEADER_SSL3_H


	)

120 #i‚de‡
OPENSSL_NO_COMP


121 
	~<›ís¶/comp.h
>

123 
	~<›ís¶/buf„r.h
>

124 
	~<›ís¶/evp.h
>

125 
	~<›ís¶/s¶.h
>

126 
	~<›ís¶/pq_com∑t.h
>

128 #ifde‡ 
__˝lu•lus


133 
	#SSL3_CK_SCSV
 0x030000FF

	)

135 
	#SSL3_CK_RSA_NULL_MD5
 0x03000001

	)

136 
	#SSL3_CK_RSA_NULL_SHA
 0x03000002

	)

137 
	#SSL3_CK_RSA_RC4_40_MD5
 0x03000003

	)

138 
	#SSL3_CK_RSA_RC4_128_MD5
 0x03000004

	)

139 
	#SSL3_CK_RSA_RC4_128_SHA
 0x03000005

	)

140 
	#SSL3_CK_RSA_RC2_40_MD5
 0x03000006

	)

141 
	#SSL3_CK_RSA_IDEA_128_SHA
 0x03000007

	)

142 
	#SSL3_CK_RSA_DES_40_CBC_SHA
 0x03000008

	)

143 
	#SSL3_CK_RSA_DES_64_CBC_SHA
 0x03000009

	)

144 
	#SSL3_CK_RSA_DES_192_CBC3_SHA
 0x0300000A

	)

146 
	#SSL3_CK_DH_DSS_DES_40_CBC_SHA
 0x0300000B

	)

147 
	#SSL3_CK_DH_DSS_DES_64_CBC_SHA
 0x0300000C

	)

148 
	#SSL3_CK_DH_DSS_DES_192_CBC3_SHA
 0x0300000D

	)

149 
	#SSL3_CK_DH_RSA_DES_40_CBC_SHA
 0x0300000E

	)

150 
	#SSL3_CK_DH_RSA_DES_64_CBC_SHA
 0x0300000F

	)

151 
	#SSL3_CK_DH_RSA_DES_192_CBC3_SHA
 0x03000010

	)

153 
	#SSL3_CK_EDH_DSS_DES_40_CBC_SHA
 0x03000011

	)

154 
	#SSL3_CK_EDH_DSS_DES_64_CBC_SHA
 0x03000012

	)

155 
	#SSL3_CK_EDH_DSS_DES_192_CBC3_SHA
 0x03000013

	)

156 
	#SSL3_CK_EDH_RSA_DES_40_CBC_SHA
 0x03000014

	)

157 
	#SSL3_CK_EDH_RSA_DES_64_CBC_SHA
 0x03000015

	)

158 
	#SSL3_CK_EDH_RSA_DES_192_CBC3_SHA
 0x03000016

	)

160 
	#SSL3_CK_ADH_RC4_40_MD5
 0x03000017

	)

161 
	#SSL3_CK_ADH_RC4_128_MD5
 0x03000018

	)

162 
	#SSL3_CK_ADH_DES_40_CBC_SHA
 0x03000019

	)

163 
	#SSL3_CK_ADH_DES_64_CBC_SHA
 0x0300001A

	)

164 
	#SSL3_CK_ADH_DES_192_CBC_SHA
 0x0300001B

	)

166 
	#SSL3_CK_FZA_DMS_NULL_SHA
 0x0300001C

	)

167 
	#SSL3_CK_FZA_DMS_FZA_SHA
 0x0300001D

	)

171 
	#SSL3_CK_FZA_DMS_RC4_SHA
 0x0300001E

	)

176 
	#SSL3_CK_KRB5_DES_64_CBC_SHA
 0x0300001E

	)

177 
	#SSL3_CK_KRB5_DES_192_CBC3_SHA
 0x0300001F

	)

178 
	#SSL3_CK_KRB5_RC4_128_SHA
 0x03000020

	)

179 
	#SSL3_CK_KRB5_IDEA_128_CBC_SHA
 0x03000021

	)

180 
	#SSL3_CK_KRB5_DES_64_CBC_MD5
 0x03000022

	)

181 
	#SSL3_CK_KRB5_DES_192_CBC3_MD5
 0x03000023

	)

182 
	#SSL3_CK_KRB5_RC4_128_MD5
 0x03000024

	)

183 
	#SSL3_CK_KRB5_IDEA_128_CBC_MD5
 0x03000025

	)

185 
	#SSL3_CK_KRB5_DES_40_CBC_SHA
 0x03000026

	)

186 
	#SSL3_CK_KRB5_RC2_40_CBC_SHA
 0x03000027

	)

187 
	#SSL3_CK_KRB5_RC4_40_SHA
 0x03000028

	)

188 
	#SSL3_CK_KRB5_DES_40_CBC_MD5
 0x03000029

	)

189 
	#SSL3_CK_KRB5_RC2_40_CBC_MD5
 0x0300002A

	)

190 
	#SSL3_CK_KRB5_RC4_40_MD5
 0x0300002B

	)

192 
	#SSL3_TXT_RSA_NULL_MD5
 "NULL-MD5"

	)

193 
	#SSL3_TXT_RSA_NULL_SHA
 "NULL-SHA"

	)

194 
	#SSL3_TXT_RSA_RC4_40_MD5
 "EXP-RC4-MD5"

	)

195 
	#SSL3_TXT_RSA_RC4_128_MD5
 "RC4-MD5"

	)

196 
	#SSL3_TXT_RSA_RC4_128_SHA
 "RC4-SHA"

	)

197 
	#SSL3_TXT_RSA_RC2_40_MD5
 "EXP-RC2-CBC-MD5"

	)

198 
	#SSL3_TXT_RSA_IDEA_128_SHA
 "IDEA-CBC-SHA"

	)

199 
	#SSL3_TXT_RSA_DES_40_CBC_SHA
 "EXP-DES-CBC-SHA"

	)

200 
	#SSL3_TXT_RSA_DES_64_CBC_SHA
 "DES-CBC-SHA"

	)

201 
	#SSL3_TXT_RSA_DES_192_CBC3_SHA
 "DES-CBC3-SHA"

	)

203 
	#SSL3_TXT_DH_DSS_DES_40_CBC_SHA
 "EXP-DH-DSS-DES-CBC-SHA"

	)

204 
	#SSL3_TXT_DH_DSS_DES_64_CBC_SHA
 "DH-DSS-DES-CBC-SHA"

	)

205 
	#SSL3_TXT_DH_DSS_DES_192_CBC3_SHA
 "DH-DSS-DES-CBC3-SHA"

	)

206 
	#SSL3_TXT_DH_RSA_DES_40_CBC_SHA
 "EXP-DH-RSA-DES-CBC-SHA"

	)

207 
	#SSL3_TXT_DH_RSA_DES_64_CBC_SHA
 "DH-RSA-DES-CBC-SHA"

	)

208 
	#SSL3_TXT_DH_RSA_DES_192_CBC3_SHA
 "DH-RSA-DES-CBC3-SHA"

	)

210 
	#SSL3_TXT_EDH_DSS_DES_40_CBC_SHA
 "EXP-EDH-DSS-DES-CBC-SHA"

	)

211 
	#SSL3_TXT_EDH_DSS_DES_64_CBC_SHA
 "EDH-DSS-DES-CBC-SHA"

	)

212 
	#SSL3_TXT_EDH_DSS_DES_192_CBC3_SHA
 "EDH-DSS-DES-CBC3-SHA"

	)

213 
	#SSL3_TXT_EDH_RSA_DES_40_CBC_SHA
 "EXP-EDH-RSA-DES-CBC-SHA"

	)

214 
	#SSL3_TXT_EDH_RSA_DES_64_CBC_SHA
 "EDH-RSA-DES-CBC-SHA"

	)

215 
	#SSL3_TXT_EDH_RSA_DES_192_CBC3_SHA
 "EDH-RSA-DES-CBC3-SHA"

	)

217 
	#SSL3_TXT_ADH_RC4_40_MD5
 "EXP-ADH-RC4-MD5"

	)

218 
	#SSL3_TXT_ADH_RC4_128_MD5
 "ADH-RC4-MD5"

	)

219 
	#SSL3_TXT_ADH_DES_40_CBC_SHA
 "EXP-ADH-DES-CBC-SHA"

	)

220 
	#SSL3_TXT_ADH_DES_64_CBC_SHA
 "ADH-DES-CBC-SHA"

	)

221 
	#SSL3_TXT_ADH_DES_192_CBC_SHA
 "ADH-DES-CBC3-SHA"

	)

223 
	#SSL3_TXT_FZA_DMS_NULL_SHA
 "FZA-NULL-SHA"

	)

224 
	#SSL3_TXT_FZA_DMS_FZA_SHA
 "FZA-FZA-CBC-SHA"

	)

225 
	#SSL3_TXT_FZA_DMS_RC4_SHA
 "FZA-RC4-SHA"

	)

227 
	#SSL3_TXT_KRB5_DES_64_CBC_SHA
 "KRB5-DES-CBC-SHA"

	)

228 
	#SSL3_TXT_KRB5_DES_192_CBC3_SHA
 "KRB5-DES-CBC3-SHA"

	)

229 
	#SSL3_TXT_KRB5_RC4_128_SHA
 "KRB5-RC4-SHA"

	)

230 
	#SSL3_TXT_KRB5_IDEA_128_CBC_SHA
 "KRB5-IDEA-CBC-SHA"

	)

231 
	#SSL3_TXT_KRB5_DES_64_CBC_MD5
 "KRB5-DES-CBC-MD5"

	)

232 
	#SSL3_TXT_KRB5_DES_192_CBC3_MD5
 "KRB5-DES-CBC3-MD5"

	)

233 
	#SSL3_TXT_KRB5_RC4_128_MD5
 "KRB5-RC4-MD5"

	)

234 
	#SSL3_TXT_KRB5_IDEA_128_CBC_MD5
 "KRB5-IDEA-CBC-MD5"

	)

236 
	#SSL3_TXT_KRB5_DES_40_CBC_SHA
 "EXP-KRB5-DES-CBC-SHA"

	)

237 
	#SSL3_TXT_KRB5_RC2_40_CBC_SHA
 "EXP-KRB5-RC2-CBC-SHA"

	)

238 
	#SSL3_TXT_KRB5_RC4_40_SHA
 "EXP-KRB5-RC4-SHA"

	)

239 
	#SSL3_TXT_KRB5_DES_40_CBC_MD5
 "EXP-KRB5-DES-CBC-MD5"

	)

240 
	#SSL3_TXT_KRB5_RC2_40_CBC_MD5
 "EXP-KRB5-RC2-CBC-MD5"

	)

241 
	#SSL3_TXT_KRB5_RC4_40_MD5
 "EXP-KRB5-RC4-MD5"

	)

243 
	#SSL3_SSL_SESSION_ID_LENGTH
 32

	)

244 
	#SSL3_MAX_SSL_SESSION_ID_LENGTH
 32

	)

246 
	#SSL3_MASTER_SECRET_SIZE
 48

	)

247 
	#SSL3_RANDOM_SIZE
 32

	)

248 
	#SSL3_SESSION_ID_SIZE
 32

	)

249 
	#SSL3_RT_HEADER_LENGTH
 5

	)

252 #i‡
deföed
(
OPENSSL_SYS_WIN16
) || \

253 (
deföed
(
OPENSSL_SYS_MSDOS
Ë&& !deföed(
OPENSSL_SYS_WIN32
))

254 
	#SSL3_RT_MAX_EXTRA
 (14000)

	)

256 
	#SSL3_RT_MAX_EXTRA
 (16384)

	)

259 
	#SSL3_RT_MAX_PLAIN_LENGTH
 16384

	)

260 #ifde‡
OPENSSL_NO_COMP


261 
	#SSL3_RT_MAX_COMPRESSED_LENGTH
 
SSL3_RT_MAX_PLAIN_LENGTH


	)

263 
	#SSL3_RT_MAX_COMPRESSED_LENGTH
 (1024+
SSL3_RT_MAX_PLAIN_LENGTH
)

	)

265 
	#SSL3_RT_MAX_ENCRYPTED_LENGTH
 (1024+
SSL3_RT_MAX_COMPRESSED_LENGTH
)

	)

266 
	#SSL3_RT_MAX_PACKET_SIZE
 (
SSL3_RT_MAX_ENCRYPTED_LENGTH
+
SSL3_RT_HEADER_LENGTH
)

	)

267 
	#SSL3_RT_MAX_DATA_SIZE
 (1024*1024)

	)

269 
	#SSL3_MD_CLIENT_FINISHED_CONST
 "\x43\x4C\x4E\x54"

	)

270 
	#SSL3_MD_SERVER_FINISHED_CONST
 "\x53\x52\x56\x52"

	)

272 
	#SSL3_VERSION
 0x0300

	)

273 
	#SSL3_VERSION_MAJOR
 0x03

	)

274 
	#SSL3_VERSION_MINOR
 0x00

	)

276 
	#SSL3_RT_CHANGE_CIPHER_SPEC
 20

	)

277 
	#SSL3_RT_ALERT
 21

	)

278 
	#SSL3_RT_HANDSHAKE
 22

	)

279 
	#SSL3_RT_APPLICATION_DATA
 23

	)

281 
	#SSL3_AL_WARNING
 1

	)

282 
	#SSL3_AL_FATAL
 2

	)

284 
	#SSL3_AD_CLOSE_NOTIFY
 0

	)

285 
	#SSL3_AD_UNEXPECTED_MESSAGE
 10

	)

286 
	#SSL3_AD_BAD_RECORD_MAC
 20

	)

287 
	#SSL3_AD_DECOMPRESSION_FAILURE
 30

	)

288 
	#SSL3_AD_HANDSHAKE_FAILURE
 40

	)

289 
	#SSL3_AD_NO_CERTIFICATE
 41

	)

290 
	#SSL3_AD_BAD_CERTIFICATE
 42

	)

291 
	#SSL3_AD_UNSUPPORTED_CERTIFICATE
 43

	)

292 
	#SSL3_AD_CERTIFICATE_REVOKED
 44

	)

293 
	#SSL3_AD_CERTIFICATE_EXPIRED
 45

	)

294 
	#SSL3_AD_CERTIFICATE_UNKNOWN
 46

	)

295 
	#SSL3_AD_ILLEGAL_PARAMETER
 47

	)

297 
	ss¶3_ªc‹d_°


299  
ty≥
;

300  
Àngth
;

301  
off
;

302  *
d©a
;

303  *
öput
;

304  *
comp
;

305  
ïoch
;

306  
PQ_64BIT
 
£q_num
;

307 } 
	tSSL3_RECORD
;

309 
	ss¶3_buf„r_°


311 *
buf
;

313 
size_t
 
Àn
;

314 
off£t
;

315 
À·
;

316 } 
	tSSL3_BUFFER
;

318 
	#SSL3_CT_RSA_SIGN
 1

	)

319 
	#SSL3_CT_DSS_SIGN
 2

	)

320 
	#SSL3_CT_RSA_FIXED_DH
 3

	)

321 
	#SSL3_CT_DSS_FIXED_DH
 4

	)

322 
	#SSL3_CT_RSA_EPHEMERAL_DH
 5

	)

323 
	#SSL3_CT_DSS_EPHEMERAL_DH
 6

	)

324 
	#SSL3_CT_FORTEZZA_DMS
 20

	)

329 
	#SSL3_CT_NUMBER
 7

	)

332 
	#SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS
 0x0001

	)

333 
	#SSL3_FLAGS_DELAY_CLIENT_FINISHED
 0x0002

	)

334 
	#SSL3_FLAGS_POP_BUFFER
 0x0004

	)

335 
	#TLS1_FLAGS_TLS_PADDING_BUG
 0x0008

	)

346 
	#SSL3_FLAGS_SGC_RESTART_DONE
 0x0040

	)

348 
	ss¶3_°©e_°


350 
Êags
;

351 
dñay_buf_p›_ªt
;

353 
ªad_£quí˚
[8];

354 
ªad_mac_£¸ë
[
EVP_MAX_MD_SIZE
];

355 
wrôe_£quí˚
[8];

356 
wrôe_mac_£¸ë
[
EVP_MAX_MD_SIZE
];

358 
£rvî_øndom
[
SSL3_RANDOM_SIZE
];

359 
˛õ¡_øndom
[
SSL3_RANDOM_SIZE
];

362 
√ed_em±y_‰agmíts
;

363 
em±y_‰agmít_d⁄e
;

365 
SSL3_BUFFER
 
rbuf
;

366 
SSL3_BUFFER
 
wbuf
;

368 
SSL3_RECORD
 
ºec
;

369 
SSL3_RECORD
 
wªc
;

373 
Æît_‰agmít
[2];

374 
Æît_‰agmít_Àn
;

375 
h™dshake_‰agmít
[4];

376 
h™dshake_‰agmít_Àn
;

379 
wnum
;

380 
w≥nd_tŸ
;

381 
w≥nd_ty≥
;

382 
w≥nd_ªt
;

383 c⁄° *
w≥nd_buf
;

386 
EVP_MD_CTX
 
föish_dg°1
;

387 
EVP_MD_CTX
 
föish_dg°2
;

391 
ch™ge_cùhî_•ec
;

393 
w¨n_Æît
;

394 
Áèl_Æît
;

397 
Æît_di•©ch
;

398 
£nd_Æît
[2];

402 
ª√gŸüã
;

403 
tŸÆ_ª√gŸüti⁄s
;

404 
num_ª√gŸüti⁄s
;

406 
ö_ªad_≠p_d©a
;

410 
˚π_vîify_md
[
EVP_MAX_MD_SIZE
*2];

413 
föish_md
[
EVP_MAX_MD_SIZE
*2];

414 
föish_md_Àn
;

415 
≥î_föish_md
[
EVP_MAX_MD_SIZE
*2];

416 
≥î_föish_md_Àn
;

418 
mesßge_size
;

419 
mesßge_ty≥
;

422 
SSL_CIPHER
 *
√w_cùhî
;

423 #i‚de‡
OPENSSL_NO_DH


424 
DH
 *
dh
;

427 #i‚de‡
OPENSSL_NO_ECDH


428 
EC_KEY
 *
ecdh
;

432 
√xt_°©e
;

434 
ªu£_mesßge
;

437 
˚π_ªq
;

438 
˘y≥_num
;

439 
˘y≥
[
SSL3_CT_NUMBER
];

440 
STACK_OF
(
X509_NAME
Ë*
ˇ_«mes
;

442 
u£_rß_tmp
;

444 
key_block_Àngth
;

445 *
key_block
;

447 c⁄° 
EVP_CIPHER
 *
√w_sym_íc
;

448 c⁄° 
EVP_MD
 *
√w_hash
;

449 #i‚de‡
OPENSSL_NO_COMP


450 c⁄° 
SSL_COMP
 *
√w_com¥essi⁄
;

452 *
√w_com¥essi⁄
;

454 
˚π_ªque°
;

455 } 
tmp
;

458 
¥evious_˛õ¡_föished
[
EVP_MAX_MD_SIZE
];

459 
¥evious_˛õ¡_föished_Àn
;

460 
¥evious_£rvî_föished
[
EVP_MAX_MD_SIZE
];

461 
¥evious_£rvî_föished_Àn
;

462 
£nd_c⁄√˘i⁄_bödög
;

463 } 
	tSSL3_STATE
;

469 
	#SSL3_ST_CW_FLUSH
 (0x100|
SSL_ST_CONNECT
)

	)

471 
	#SSL3_ST_CW_CLNT_HELLO_A
 (0x110|
SSL_ST_CONNECT
)

	)

472 
	#SSL3_ST_CW_CLNT_HELLO_B
 (0x111|
SSL_ST_CONNECT
)

	)

474 
	#SSL3_ST_CR_SRVR_HELLO_A
 (0x120|
SSL_ST_CONNECT
)

	)

475 
	#SSL3_ST_CR_SRVR_HELLO_B
 (0x121|
SSL_ST_CONNECT
)

	)

476 
	#DTLS1_ST_CR_HELLO_VERIFY_REQUEST_A
 (0x126|
SSL_ST_CONNECT
)

	)

477 
	#DTLS1_ST_CR_HELLO_VERIFY_REQUEST_B
 (0x127|
SSL_ST_CONNECT
)

	)

478 
	#SSL3_ST_CR_CERT_A
 (0x130|
SSL_ST_CONNECT
)

	)

479 
	#SSL3_ST_CR_CERT_B
 (0x131|
SSL_ST_CONNECT
)

	)

480 
	#SSL3_ST_CR_KEY_EXCH_A
 (0x140|
SSL_ST_CONNECT
)

	)

481 
	#SSL3_ST_CR_KEY_EXCH_B
 (0x141|
SSL_ST_CONNECT
)

	)

482 
	#SSL3_ST_CR_CERT_REQ_A
 (0x150|
SSL_ST_CONNECT
)

	)

483 
	#SSL3_ST_CR_CERT_REQ_B
 (0x151|
SSL_ST_CONNECT
)

	)

484 
	#SSL3_ST_CR_SRVR_DONE_A
 (0x160|
SSL_ST_CONNECT
)

	)

485 
	#SSL3_ST_CR_SRVR_DONE_B
 (0x161|
SSL_ST_CONNECT
)

	)

487 
	#SSL3_ST_CW_CERT_A
 (0x170|
SSL_ST_CONNECT
)

	)

488 
	#SSL3_ST_CW_CERT_B
 (0x171|
SSL_ST_CONNECT
)

	)

489 
	#SSL3_ST_CW_CERT_C
 (0x172|
SSL_ST_CONNECT
)

	)

490 
	#SSL3_ST_CW_CERT_D
 (0x173|
SSL_ST_CONNECT
)

	)

491 
	#SSL3_ST_CW_KEY_EXCH_A
 (0x180|
SSL_ST_CONNECT
)

	)

492 
	#SSL3_ST_CW_KEY_EXCH_B
 (0x181|
SSL_ST_CONNECT
)

	)

493 
	#SSL3_ST_CW_CERT_VRFY_A
 (0x190|
SSL_ST_CONNECT
)

	)

494 
	#SSL3_ST_CW_CERT_VRFY_B
 (0x191|
SSL_ST_CONNECT
)

	)

495 
	#SSL3_ST_CW_CHANGE_A
 (0x1A0|
SSL_ST_CONNECT
)

	)

496 
	#SSL3_ST_CW_CHANGE_B
 (0x1A1|
SSL_ST_CONNECT
)

	)

497 
	#SSL3_ST_CW_FINISHED_A
 (0x1B0|
SSL_ST_CONNECT
)

	)

498 
	#SSL3_ST_CW_FINISHED_B
 (0x1B1|
SSL_ST_CONNECT
)

	)

500 
	#SSL3_ST_CR_CHANGE_A
 (0x1C0|
SSL_ST_CONNECT
)

	)

501 
	#SSL3_ST_CR_CHANGE_B
 (0x1C1|
SSL_ST_CONNECT
)

	)

502 
	#SSL3_ST_CR_FINISHED_A
 (0x1D0|
SSL_ST_CONNECT
)

	)

503 
	#SSL3_ST_CR_FINISHED_B
 (0x1D1|
SSL_ST_CONNECT
)

	)

504 
	#SSL3_ST_CR_SESSION_TICKET_A
 (0x1E0|
SSL_ST_CONNECT
)

	)

505 
	#SSL3_ST_CR_SESSION_TICKET_B
 (0x1E1|
SSL_ST_CONNECT
)

	)

506 
	#SSL3_ST_CR_CERT_STATUS_A
 (0x1F0|
SSL_ST_CONNECT
)

	)

507 
	#SSL3_ST_CR_CERT_STATUS_B
 (0x1F1|
SSL_ST_CONNECT
)

	)

511 
	#SSL3_ST_SW_FLUSH
 (0x100|
SSL_ST_ACCEPT
)

	)

514 
	#SSL3_ST_SR_CLNT_HELLO_A
 (0x110|
SSL_ST_ACCEPT
)

	)

515 
	#SSL3_ST_SR_CLNT_HELLO_B
 (0x111|
SSL_ST_ACCEPT
)

	)

516 
	#SSL3_ST_SR_CLNT_HELLO_C
 (0x112|
SSL_ST_ACCEPT
)

	)

518 
	#DTLS1_ST_SW_HELLO_VERIFY_REQUEST_A
 (0x113|
SSL_ST_ACCEPT
)

	)

519 
	#DTLS1_ST_SW_HELLO_VERIFY_REQUEST_B
 (0x114|
SSL_ST_ACCEPT
)

	)

520 
	#SSL3_ST_SW_HELLO_REQ_A
 (0x120|
SSL_ST_ACCEPT
)

	)

521 
	#SSL3_ST_SW_HELLO_REQ_B
 (0x121|
SSL_ST_ACCEPT
)

	)

522 
	#SSL3_ST_SW_HELLO_REQ_C
 (0x122|
SSL_ST_ACCEPT
)

	)

523 
	#SSL3_ST_SW_SRVR_HELLO_A
 (0x130|
SSL_ST_ACCEPT
)

	)

524 
	#SSL3_ST_SW_SRVR_HELLO_B
 (0x131|
SSL_ST_ACCEPT
)

	)

525 
	#SSL3_ST_SW_CERT_A
 (0x140|
SSL_ST_ACCEPT
)

	)

526 
	#SSL3_ST_SW_CERT_B
 (0x141|
SSL_ST_ACCEPT
)

	)

527 
	#SSL3_ST_SW_KEY_EXCH_A
 (0x150|
SSL_ST_ACCEPT
)

	)

528 
	#SSL3_ST_SW_KEY_EXCH_B
 (0x151|
SSL_ST_ACCEPT
)

	)

529 
	#SSL3_ST_SW_CERT_REQ_A
 (0x160|
SSL_ST_ACCEPT
)

	)

530 
	#SSL3_ST_SW_CERT_REQ_B
 (0x161|
SSL_ST_ACCEPT
)

	)

531 
	#SSL3_ST_SW_SRVR_DONE_A
 (0x170|
SSL_ST_ACCEPT
)

	)

532 
	#SSL3_ST_SW_SRVR_DONE_B
 (0x171|
SSL_ST_ACCEPT
)

	)

534 
	#SSL3_ST_SR_CERT_A
 (0x180|
SSL_ST_ACCEPT
)

	)

535 
	#SSL3_ST_SR_CERT_B
 (0x181|
SSL_ST_ACCEPT
)

	)

536 
	#SSL3_ST_SR_KEY_EXCH_A
 (0x190|
SSL_ST_ACCEPT
)

	)

537 
	#SSL3_ST_SR_KEY_EXCH_B
 (0x191|
SSL_ST_ACCEPT
)

	)

538 
	#SSL3_ST_SR_CERT_VRFY_A
 (0x1A0|
SSL_ST_ACCEPT
)

	)

539 
	#SSL3_ST_SR_CERT_VRFY_B
 (0x1A1|
SSL_ST_ACCEPT
)

	)

540 
	#SSL3_ST_SR_CHANGE_A
 (0x1B0|
SSL_ST_ACCEPT
)

	)

541 
	#SSL3_ST_SR_CHANGE_B
 (0x1B1|
SSL_ST_ACCEPT
)

	)

542 
	#SSL3_ST_SR_FINISHED_A
 (0x1C0|
SSL_ST_ACCEPT
)

	)

543 
	#SSL3_ST_SR_FINISHED_B
 (0x1C1|
SSL_ST_ACCEPT
)

	)

545 
	#SSL3_ST_SW_CHANGE_A
 (0x1D0|
SSL_ST_ACCEPT
)

	)

546 
	#SSL3_ST_SW_CHANGE_B
 (0x1D1|
SSL_ST_ACCEPT
)

	)

547 
	#SSL3_ST_SW_FINISHED_A
 (0x1E0|
SSL_ST_ACCEPT
)

	)

548 
	#SSL3_ST_SW_FINISHED_B
 (0x1E1|
SSL_ST_ACCEPT
)

	)

549 
	#SSL3_ST_SW_SESSION_TICKET_A
 (0x1F0|
SSL_ST_ACCEPT
)

	)

550 
	#SSL3_ST_SW_SESSION_TICKET_B
 (0x1F1|
SSL_ST_ACCEPT
)

	)

551 
	#SSL3_ST_SW_CERT_STATUS_A
 (0x200|
SSL_ST_ACCEPT
)

	)

552 
	#SSL3_ST_SW_CERT_STATUS_B
 (0x201|
SSL_ST_ACCEPT
)

	)

554 
	#SSL3_MT_HELLO_REQUEST
 0

	)

555 
	#SSL3_MT_CLIENT_HELLO
 1

	)

556 
	#SSL3_MT_SERVER_HELLO
 2

	)

557 
	#SSL3_MT_NEWSESSION_TICKET
 4

	)

558 
	#SSL3_MT_CERTIFICATE
 11

	)

559 
	#SSL3_MT_SERVER_KEY_EXCHANGE
 12

	)

560 
	#SSL3_MT_CERTIFICATE_REQUEST
 13

	)

561 
	#SSL3_MT_SERVER_DONE
 14

	)

562 
	#SSL3_MT_CERTIFICATE_VERIFY
 15

	)

563 
	#SSL3_MT_CLIENT_KEY_EXCHANGE
 16

	)

564 
	#SSL3_MT_FINISHED
 20

	)

565 
	#SSL3_MT_CERTIFICATE_STATUS
 22

	)

566 
	#DTLS1_MT_HELLO_VERIFY_REQUEST
 3

	)

569 
	#SSL3_MT_CCS
 1

	)

572 
	#SSL3_CC_READ
 0x01

	)

573 
	#SSL3_CC_WRITE
 0x02

	)

574 
	#SSL3_CC_CLIENT
 0x10

	)

575 
	#SSL3_CC_SERVER
 0x20

	)

576 
	#SSL3_CHANGE_CIPHER_CLIENT_WRITE
 (
SSL3_CC_CLIENT
|
SSL3_CC_WRITE
)

	)

577 
	#SSL3_CHANGE_CIPHER_SERVER_READ
 (
SSL3_CC_SERVER
|
SSL3_CC_READ
)

	)

578 
	#SSL3_CHANGE_CIPHER_CLIENT_READ
 (
SSL3_CC_CLIENT
|
SSL3_CC_READ
)

	)

579 
	#SSL3_CHANGE_CIPHER_SERVER_WRITE
 (
SSL3_CC_SERVER
|
SSL3_CC_WRITE
)

	)

581 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/store.h

59 #i‚de‡
HEADER_STORE_H


60 
	#HEADER_STORE_H


	)

62 
	~<›ís¶/os¶_typ.h
>

63 #i‚de‡
OPENSSL_NO_DEPRECATED


64 
	~<›ís¶/evp.h
>

65 
	~<›ís¶/bn.h
>

66 
	~<›ís¶/x509.h
>

69 #ifde‡ 
__˝lu•lus


83 
STORE
 *
STORE_√w_mëhod
(c⁄° 
STORE_METHOD
 *
mëhod
);

84 
STORE
 *
STORE_√w_ígöe
(
ENGINE
 *
ígöe
);

85 
STORE_‰ì
(
STORE
 *
ui
);

91 
STORE_˘æ
(
STORE
 *
°‹e
, 
cmd
, 
i
, *
p
, (*
f
)());

95 
	#STORE_CTRL_SET_DIRECTORY
 0x0001

	)

97 
	#STORE_CTRL_SET_FILE
 0x0002

	)

100 
	#STORE_CTRL_SET_CONF_FILE
 0x0003

	)

103 
	#STORE_CTRL_SET_CONF_SECTION
 0x0004

	)

107 
	#STORE_£t_≠p_d©a
(
s
,
¨g
Ë
	`STORE_£t_ex_d©a
(s,0,¨g)

	)

108 
	#STORE_gë_≠p_d©a
(
s
Ë
	`STORE_gë_ex_d©a
(s,0)

	)

109 
STORE_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

110 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

111 
STORE_£t_ex_d©a
(
STORE
 *
r
,
idx
,*
¨g
);

112 *
STORE_gë_ex_d©a
(
STORE
 *
r
, 
idx
);

115 c⁄° 
STORE_METHOD
 *
STORE_gë_mëhod
(
STORE
 *
°‹e
);

116 c⁄° 
STORE_METHOD
 *
STORE_£t_mëhod
(
STORE
 *
°‹e
, c⁄° STORE_METHOD *
mëh
);

122 c⁄° 
STORE_METHOD
 *
STORE_Mem‹y
();

126 c⁄° 
STORE_METHOD
 *
STORE_Dúe˘‹y
();

130 c⁄° 
STORE_METHOD
 *
STORE_Fûe
();

135 
	eSTORE_obje˘_ty≥s


137 
STORE_OBJECT_TYPE_X509_CERTIFICATE
= 0x01,

138 
STORE_OBJECT_TYPE_X509_CRL
= 0x02,

139 
STORE_OBJECT_TYPE_PRIVATE_KEY
= 0x03,

140 
STORE_OBJECT_TYPE_PUBLIC_KEY
= 0x04,

141 
STORE_OBJECT_TYPE_NUMBER
= 0x05,

142 
STORE_OBJECT_TYPE_ARBITRARY
= 0x06,

143 
STORE_OBJECT_TYPE_NUM
= 0x06

145 } 
	tSTORE_OBJECT_TYPES
;

147 c⁄° * c⁄° 
STORE_obje˘_ty≥_°rög
[
STORE_OBJECT_TYPE_NUM
+1];

152 
	eSTORE_∑øms


154 
	gSTORE_PARAM_EVP_TYPE
= 0x01,

155 
	gSTORE_PARAM_BITS
= 0x02,

156 
	gSTORE_PARAM_KEY_PARAMETERS
= 0x03,

157 
	gSTORE_PARAM_KEY_NO_PARAMETERS
= 0x04,

158 
	gSTORE_PARAM_AUTH_PASSPHRASE
= 0x05,

159 
	gSTORE_PARAM_AUTH_KRB5_TICKET
= 0x06,

160 
	gSTORE_PARAM_TYPE_NUM
= 0x06

162 } 
	tSTORE_PARAM_TYPES
;

164 c⁄° 
STORE_∑øm_sizes
[
STORE_PARAM_TYPE_NUM
+1];

169 
	eSTORE_©åibs


171 
	gSTORE_ATTR_END
= 0x00,

172 
	gSTORE_ATTR_FRIENDLYNAME
= 0x01,

173 
	gSTORE_ATTR_KEYID
= 0x02,

174 
	gSTORE_ATTR_ISSUERKEYID
= 0x03,

175 
	gSTORE_ATTR_SUBJECTKEYID
= 0x04,

176 
	gSTORE_ATTR_ISSUERSERIALHASH
= 0x05,

177 
	gSTORE_ATTR_ISSUER
= 0x06,

178 
	gSTORE_ATTR_SERIAL
= 0x07,

179 
	gSTORE_ATTR_SUBJECT
= 0x08,

180 
	gSTORE_ATTR_CERTHASH
= 0x09,

181 
	gSTORE_ATTR_EMAIL
= 0x0a,

182 
	gSTORE_ATTR_FILENAME
= 0x0b,

183 
	gSTORE_ATTR_TYPE_NUM
= 0x0b,

185 
	gSTORE_ATTR_OR
= 0xff

189 } 
	tSTORE_ATTR_TYPES
;

191 c⁄° 
STORE_©å_sizes
[
STORE_ATTR_TYPE_NUM
+1];

193 
	eSTORE_˚πifiˇã_°©us


195 
	gSTORE_X509_VALID
= 0x00,

196 
	gSTORE_X509_EXPIRED
= 0x01,

197 
	gSTORE_X509_SUSPENDED
= 0x02,

198 
	gSTORE_X509_REVOKED
= 0x03

199 } 
	tSTORE_CERTIFICATE_STATUS
;

206 
	sSTORE_OBJECT_°


208 
STORE_OBJECT_TYPES
 
	gty≥
;

213 
STORE_CERTIFICATE_STATUS
 
	g°©us
;

214 
X509
 *
	g˚πifiˇã
;

215 } 
	gx509
;

216 
X509_CRL
 *
	g¸l
;

217 
EVP_PKEY
 *
	gkey
;

218 
BIGNUM
 *
	gnumbî
;

219 
BUF_MEM
 *
	g¨bôøry
;

220 } 
	gd©a
;

221 } 
	tSTORE_OBJECT
;

222 
DECLARE_STACK_OF
(
STORE_OBJECT
)

223 
STORE_OBJECT
 *
STORE_OBJECT_√w
();

224 
STORE_OBJECT_‰ì
(
STORE_OBJECT
 *
d©a
);

230 
X509
 *
STORE_gë_˚πifiˇã
(
STORE
 *
e
, 
OPENSSL_ITEM
 
©åibuãs
[],

231 
OPENSSL_ITEM
 
∑ømëîs
[]);

232 
STORE_°‹e_˚πifiˇã
(
STORE
 *
e
, 
X509
 *
d©a
, 
OPENSSL_ITEM
 
©åibuãs
[],

233 
OPENSSL_ITEM
 
∑ømëîs
[]);

234 
STORE_modify_˚πifiˇã
(
STORE
 *
e
, 
OPENSSL_ITEM
 
£¨ch_©åibuãs
[],

235 
OPENSSL_ITEM
 
add_©åibuãs
[], OPENSSL_ITEM 
modify_©åibuãs
[],

236 
OPENSSL_ITEM
 
dñëe_©åibuãs
[], OPENSSL_ITEM 
∑ømëîs
[]);

237 
STORE_ªvoke_˚πifiˇã
(
STORE
 *
e
, 
OPENSSL_ITEM
 
©åibuãs
[],

238 
OPENSSL_ITEM
 
∑ømëîs
[]);

239 
STORE_dñëe_˚πifiˇã
(
STORE
 *
e
, 
OPENSSL_ITEM
 
©åibuãs
[],

240 
OPENSSL_ITEM
 
∑ømëîs
[]);

241 *
STORE_li°_˚πifiˇã_°¨t
(
STORE
 *
e
, 
OPENSSL_ITEM
 
©åibuãs
[],

242 
OPENSSL_ITEM
 
∑ømëîs
[]);

243 
X509
 *
STORE_li°_˚πifiˇã_√xt
(
STORE
 *
e
, *
h™dÀ
);

244 
STORE_li°_˚πifiˇã_íd
(
STORE
 *
e
, *
h™dÀ
);

245 
STORE_li°_˚πifiˇã_ídp
(
STORE
 *
e
, *
h™dÀ
);

246 
EVP_PKEY
 *
STORE_gíî©e_key
(
STORE
 *
e
, 
OPENSSL_ITEM
 
©åibuãs
[],

247 
OPENSSL_ITEM
 
∑ømëîs
[]);

248 
EVP_PKEY
 *
STORE_gë_¥iv©e_key
(
STORE
 *
e
, 
OPENSSL_ITEM
 
©åibuãs
[],

249 
OPENSSL_ITEM
 
∑ømëîs
[]);

250 
STORE_°‹e_¥iv©e_key
(
STORE
 *
e
, 
EVP_PKEY
 *
d©a
,

251 
OPENSSL_ITEM
 
©åibuãs
[], OPENSSL_ITEM 
∑ømëîs
[]);

252 
STORE_modify_¥iv©e_key
(
STORE
 *
e
, 
OPENSSL_ITEM
 
£¨ch_©åibuãs
[],

253 
OPENSSL_ITEM
 
add_°åibuãs
[], OPENSSL_ITEM 
modify_©åibuãs
[],

254 
OPENSSL_ITEM
 
dñëe_©åibuãs
[], OPENSSL_ITEM 
∑ømëîs
[]);

255 
STORE_ªvoke_¥iv©e_key
(
STORE
 *
e
, 
OPENSSL_ITEM
 
©åibuãs
[],

256 
OPENSSL_ITEM
 
∑ømëîs
[]);

257 
STORE_dñëe_¥iv©e_key
(
STORE
 *
e
, 
OPENSSL_ITEM
 
©åibuãs
[],

258 
OPENSSL_ITEM
 
∑ømëîs
[]);

259 *
STORE_li°_¥iv©e_key_°¨t
(
STORE
 *
e
, 
OPENSSL_ITEM
 
©åibuãs
[],

260 
OPENSSL_ITEM
 
∑ømëîs
[]);

261 
EVP_PKEY
 *
STORE_li°_¥iv©e_key_√xt
(
STORE
 *
e
, *
h™dÀ
);

262 
STORE_li°_¥iv©e_key_íd
(
STORE
 *
e
, *
h™dÀ
);

263 
STORE_li°_¥iv©e_key_ídp
(
STORE
 *
e
, *
h™dÀ
);

264 
EVP_PKEY
 *
STORE_gë_public_key
(
STORE
 *
e
, 
OPENSSL_ITEM
 
©åibuãs
[],

265 
OPENSSL_ITEM
 
∑ømëîs
[]);

266 
STORE_°‹e_public_key
(
STORE
 *
e
, 
EVP_PKEY
 *
d©a
, 
OPENSSL_ITEM
 
©åibuãs
[],

267 
OPENSSL_ITEM
 
∑ømëîs
[]);

268 
STORE_modify_public_key
(
STORE
 *
e
, 
OPENSSL_ITEM
 
£¨ch_©åibuãs
[],

269 
OPENSSL_ITEM
 
add_°åibuãs
[], OPENSSL_ITEM 
modify_©åibuãs
[],

270 
OPENSSL_ITEM
 
dñëe_©åibuãs
[], OPENSSL_ITEM 
∑ømëîs
[]);

271 
STORE_ªvoke_public_key
(
STORE
 *
e
, 
OPENSSL_ITEM
 
©åibuãs
[],

272 
OPENSSL_ITEM
 
∑ømëîs
[]);

273 
STORE_dñëe_public_key
(
STORE
 *
e
, 
OPENSSL_ITEM
 
©åibuãs
[],

274 
OPENSSL_ITEM
 
∑ømëîs
[]);

275 *
STORE_li°_public_key_°¨t
(
STORE
 *
e
, 
OPENSSL_ITEM
 
©åibuãs
[],

276 
OPENSSL_ITEM
 
∑ømëîs
[]);

277 
EVP_PKEY
 *
STORE_li°_public_key_√xt
(
STORE
 *
e
, *
h™dÀ
);

278 
STORE_li°_public_key_íd
(
STORE
 *
e
, *
h™dÀ
);

279 
STORE_li°_public_key_ídp
(
STORE
 *
e
, *
h™dÀ
);

280 
X509_CRL
 *
STORE_gíî©e_¸l
(
STORE
 *
e
, 
OPENSSL_ITEM
 
©åibuãs
[],

281 
OPENSSL_ITEM
 
∑ømëîs
[]);

282 
X509_CRL
 *
STORE_gë_¸l
(
STORE
 *
e
, 
OPENSSL_ITEM
 
©åibuãs
[],

283 
OPENSSL_ITEM
 
∑ømëîs
[]);

284 
STORE_°‹e_¸l
(
STORE
 *
e
, 
X509_CRL
 *
d©a
, 
OPENSSL_ITEM
 
©åibuãs
[],

285 
OPENSSL_ITEM
 
∑ømëîs
[]);

286 
STORE_modify_¸l
(
STORE
 *
e
, 
OPENSSL_ITEM
 
£¨ch_©åibuãs
[],

287 
OPENSSL_ITEM
 
add_°åibuãs
[], OPENSSL_ITEM 
modify_©åibuãs
[],

288 
OPENSSL_ITEM
 
dñëe_©åibuãs
[], OPENSSL_ITEM 
∑ømëîs
[]);

289 
STORE_dñëe_¸l
(
STORE
 *
e
, 
OPENSSL_ITEM
 
©åibuãs
[],

290 
OPENSSL_ITEM
 
∑ømëîs
[]);

291 *
STORE_li°_¸l_°¨t
(
STORE
 *
e
, 
OPENSSL_ITEM
 
©åibuãs
[],

292 
OPENSSL_ITEM
 
∑ømëîs
[]);

293 
X509_CRL
 *
STORE_li°_¸l_√xt
(
STORE
 *
e
, *
h™dÀ
);

294 
STORE_li°_¸l_íd
(
STORE
 *
e
, *
h™dÀ
);

295 
STORE_li°_¸l_ídp
(
STORE
 *
e
, *
h™dÀ
);

296 
STORE_°‹e_numbî
(
STORE
 *
e
, 
BIGNUM
 *
d©a
, 
OPENSSL_ITEM
 
©åibuãs
[],

297 
OPENSSL_ITEM
 
∑ømëîs
[]);

298 
STORE_modify_numbî
(
STORE
 *
e
, 
OPENSSL_ITEM
 
£¨ch_©åibuãs
[],

299 
OPENSSL_ITEM
 
add_°åibuãs
[], OPENSSL_ITEM 
modify_©åibuãs
[],

300 
OPENSSL_ITEM
 
dñëe_©åibuãs
[], OPENSSL_ITEM 
∑ømëîs
[]);

301 
BIGNUM
 *
STORE_gë_numbî
(
STORE
 *
e
, 
OPENSSL_ITEM
 
©åibuãs
[],

302 
OPENSSL_ITEM
 
∑ømëîs
[]);

303 
STORE_dñëe_numbî
(
STORE
 *
e
, 
OPENSSL_ITEM
 
©åibuãs
[],

304 
OPENSSL_ITEM
 
∑ømëîs
[]);

305 
STORE_°‹e_¨bôøry
(
STORE
 *
e
, 
BUF_MEM
 *
d©a
, 
OPENSSL_ITEM
 
©åibuãs
[],

306 
OPENSSL_ITEM
 
∑ømëîs
[]);

307 
STORE_modify_¨bôøry
(
STORE
 *
e
, 
OPENSSL_ITEM
 
£¨ch_©åibuãs
[],

308 
OPENSSL_ITEM
 
add_°åibuãs
[], OPENSSL_ITEM 
modify_©åibuãs
[],

309 
OPENSSL_ITEM
 
dñëe_©åibuãs
[], OPENSSL_ITEM 
∑ømëîs
[]);

310 
BUF_MEM
 *
STORE_gë_¨bôøry
(
STORE
 *
e
, 
OPENSSL_ITEM
 
©åibuãs
[],

311 
OPENSSL_ITEM
 
∑ømëîs
[]);

312 
STORE_dñëe_¨bôøry
(
STORE
 *
e
, 
OPENSSL_ITEM
 
©åibuãs
[],

313 
OPENSSL_ITEM
 
∑ømëîs
[]);

317 
STORE_METHOD
 *
STORE_¸óã_mëhod
(*
«me
);

318 
STORE_de°roy_mëhod
(
STORE_METHOD
 *
°‹e_mëhod
);

321 (*
	gSTORE_INITIALISE_FUNC_PTR
)(
	tSTORE
 *);

322 (*
	gSTORE_CLEANUP_FUNC_PTR
)(
	tSTORE
 *);

323 
	gSTORE_OBJECT
 *(*
	tSTORE_GENERATE_OBJECT_FUNC_PTR
)(
	tSTORE
 *, 
	tSTORE_OBJECT_TYPES
 
	tty≥
, 
	tOPENSSL_ITEM
 
	t©åibuãs
[], OPENSSL_ITEM 
	t∑ømëîs
[]);

324 
	gSTORE_OBJECT
 *(*
	tSTORE_GET_OBJECT_FUNC_PTR
)(
	tSTORE
 *, 
	tSTORE_OBJECT_TYPES
 
	tty≥
, 
	tOPENSSL_ITEM
 
	t©åibuãs
[], OPENSSL_ITEM 
	t∑ømëîs
[]);

325 *(*
	tSTORE_START_OBJECT_FUNC_PTR
)(
	tSTORE
 *, 
	tSTORE_OBJECT_TYPES
 
	tty≥
, 
	tOPENSSL_ITEM
 
	t©åibuãs
[], OPENSSL_ITEM 
	t∑ømëîs
[]);

326 
	gSTORE_OBJECT
 *(*
	tSTORE_NEXT_OBJECT_FUNC_PTR
)(
	tSTORE
 *, *
	th™dÀ
);

327 (*
	gSTORE_END_OBJECT_FUNC_PTR
)(
	tSTORE
 *, *
	th™dÀ
);

328 (*
	gSTORE_HANDLE_OBJECT_FUNC_PTR
)(
	tSTORE
 *, 
	tSTORE_OBJECT_TYPES
 
	tty≥
, 
	tOPENSSL_ITEM
 
	t©åibuãs
[], OPENSSL_ITEM 
	t∑ømëîs
[]);

329 (*
	gSTORE_STORE_OBJECT_FUNC_PTR
)(
	tSTORE
 *, 
	tSTORE_OBJECT_TYPES
 
	tty≥
, 
	tSTORE_OBJECT
 *
	td©a
, 
	tOPENSSL_ITEM
 
	t©åibuãs
[], OPENSSL_ITEM 
	t∑ømëîs
[]);

330 (*
	gSTORE_MODIFY_OBJECT_FUNC_PTR
)(
	tSTORE
 *, 
	tSTORE_OBJECT_TYPES
 
	tty≥
, 
	tOPENSSL_ITEM
 
	t£¨ch_©åibuãs
[], OPENSSL_ITEM 
	tadd_©åibuãs
[], OPENSSL_ITEM 
	tmodify_©åibuãs
[], OPENSSL_ITEM 
	tdñëe_©åibuãs
[], OPENSSL_ITEM 
	t∑ømëîs
[]);

331 (*
	gSTORE_GENERIC_FUNC_PTR
)(
	tSTORE
 *, 
	tOPENSSL_ITEM
 
	t©åibuãs
[], OPENSSL_ITEM 
	t∑ømëîs
[]);

332 (*
	gSTORE_CTRL_FUNC_PTR
)(
	tSTORE
 *, 
	tcmd
, 
	tl
, *
	tp
, (*
	tf
)());

334 
STORE_mëhod_£t_öôüli£_fun˘i⁄
(
STORE_METHOD
 *
sm
, 
STORE_INITIALISE_FUNC_PTR
 
öô_f
);

335 
STORE_mëhod_£t_˛ónup_fun˘i⁄
(
STORE_METHOD
 *
sm
, 
STORE_CLEANUP_FUNC_PTR
 
˛ón_f
);

336 
STORE_mëhod_£t_gíî©e_fun˘i⁄
(
STORE_METHOD
 *
sm
, 
STORE_GENERATE_OBJECT_FUNC_PTR
 
gíî©e_f
);

337 
STORE_mëhod_£t_gë_fun˘i⁄
(
STORE_METHOD
 *
sm
, 
STORE_GET_OBJECT_FUNC_PTR
 
gë_f
);

338 
STORE_mëhod_£t_°‹e_fun˘i⁄
(
STORE_METHOD
 *
sm
, 
STORE_STORE_OBJECT_FUNC_PTR
 
°‹e_f
);

339 
STORE_mëhod_£t_modify_fun˘i⁄
(
STORE_METHOD
 *
sm
, 
STORE_MODIFY_OBJECT_FUNC_PTR
 
°‹e_f
);

340 
STORE_mëhod_£t_ªvoke_fun˘i⁄
(
STORE_METHOD
 *
sm
, 
STORE_HANDLE_OBJECT_FUNC_PTR
 
ªvoke_f
);

341 
STORE_mëhod_£t_dñëe_fun˘i⁄
(
STORE_METHOD
 *
sm
, 
STORE_HANDLE_OBJECT_FUNC_PTR
 
dñëe_f
);

342 
STORE_mëhod_£t_li°_°¨t_fun˘i⁄
(
STORE_METHOD
 *
sm
, 
STORE_START_OBJECT_FUNC_PTR
 
li°_°¨t_f
);

343 
STORE_mëhod_£t_li°_√xt_fun˘i⁄
(
STORE_METHOD
 *
sm
, 
STORE_NEXT_OBJECT_FUNC_PTR
 
li°_√xt_f
);

344 
STORE_mëhod_£t_li°_íd_fun˘i⁄
(
STORE_METHOD
 *
sm
, 
STORE_END_OBJECT_FUNC_PTR
 
li°_íd_f
);

345 
STORE_mëhod_£t_upd©e_°‹e_fun˘i⁄
(
STORE_METHOD
 *
sm
, 
STORE_GENERIC_FUNC_PTR
);

346 
STORE_mëhod_£t_lock_°‹e_fun˘i⁄
(
STORE_METHOD
 *
sm
, 
STORE_GENERIC_FUNC_PTR
);

347 
STORE_mëhod_£t_u∆ock_°‹e_fun˘i⁄
(
STORE_METHOD
 *
sm
, 
STORE_GENERIC_FUNC_PTR
);

348 
STORE_mëhod_£t_˘æ_fun˘i⁄
(
STORE_METHOD
 *
sm
, 
STORE_CTRL_FUNC_PTR
 
˘æ_f
);

350 
STORE_INITIALISE_FUNC_PTR
 
STORE_mëhod_gë_öôüli£_fun˘i⁄
(
STORE_METHOD
 *
sm
);

351 
STORE_CLEANUP_FUNC_PTR
 
STORE_mëhod_gë_˛ónup_fun˘i⁄
(
STORE_METHOD
 *
sm
);

352 
STORE_GENERATE_OBJECT_FUNC_PTR
 
STORE_mëhod_gë_gíî©e_fun˘i⁄
(
STORE_METHOD
 *
sm
);

353 
STORE_GET_OBJECT_FUNC_PTR
 
STORE_mëhod_gë_gë_fun˘i⁄
(
STORE_METHOD
 *
sm
);

354 
STORE_STORE_OBJECT_FUNC_PTR
 
STORE_mëhod_gë_°‹e_fun˘i⁄
(
STORE_METHOD
 *
sm
);

355 
STORE_MODIFY_OBJECT_FUNC_PTR
 
STORE_mëhod_gë_modify_fun˘i⁄
(
STORE_METHOD
 *
sm
);

356 
STORE_HANDLE_OBJECT_FUNC_PTR
 
STORE_mëhod_gë_ªvoke_fun˘i⁄
(
STORE_METHOD
 *
sm
);

357 
STORE_HANDLE_OBJECT_FUNC_PTR
 
STORE_mëhod_gë_dñëe_fun˘i⁄
(
STORE_METHOD
 *
sm
);

358 
STORE_START_OBJECT_FUNC_PTR
 
STORE_mëhod_gë_li°_°¨t_fun˘i⁄
(
STORE_METHOD
 *
sm
);

359 
STORE_NEXT_OBJECT_FUNC_PTR
 
STORE_mëhod_gë_li°_√xt_fun˘i⁄
(
STORE_METHOD
 *
sm
);

360 
STORE_END_OBJECT_FUNC_PTR
 
STORE_mëhod_gë_li°_íd_fun˘i⁄
(
STORE_METHOD
 *
sm
);

361 
STORE_GENERIC_FUNC_PTR
 
STORE_mëhod_gë_upd©e_°‹e_fun˘i⁄
(
STORE_METHOD
 *
sm
);

362 
STORE_GENERIC_FUNC_PTR
 
STORE_mëhod_gë_lock_°‹e_fun˘i⁄
(
STORE_METHOD
 *
sm
);

363 
STORE_GENERIC_FUNC_PTR
 
STORE_mëhod_gë_u∆ock_°‹e_fun˘i⁄
(
STORE_METHOD
 *
sm
);

364 
STORE_CTRL_FUNC_PTR
 
STORE_mëhod_gë_˘æ_fun˘i⁄
(
STORE_METHOD
 *
sm
);

371 
STORE_©å_öfo_°
 
	tSTORE_ATTR_INFO
;

377 *
STORE_∑r£_©ås_°¨t
(
OPENSSL_ITEM
 *
©åibuãs
);

378 
STORE_ATTR_INFO
 *
STORE_∑r£_©ås_√xt
(*
h™dÀ
);

379 
STORE_∑r£_©ås_íd
(*
h™dÀ
);

380 
STORE_∑r£_©ås_ídp
(*
h™dÀ
);

383 
STORE_ATTR_INFO
 *
STORE_ATTR_INFO_√w
();

384 
STORE_ATTR_INFO_‰ì
(
STORE_ATTR_INFO
 *
©ås
);

387 *
STORE_ATTR_INFO_gë0_c°r
(
STORE_ATTR_INFO
 *
©ås
, 
STORE_ATTR_TYPES
 
code
);

388 *
STORE_ATTR_INFO_gë0_sha1°r
(
STORE_ATTR_INFO
 *
©ås
,

389 
STORE_ATTR_TYPES
 
code
);

390 
X509_NAME
 *
STORE_ATTR_INFO_gë0_dn
(
STORE_ATTR_INFO
 *
©ås
, 
STORE_ATTR_TYPES
 
code
);

391 
BIGNUM
 *
STORE_ATTR_INFO_gë0_numbî
(
STORE_ATTR_INFO
 *
©ås
, 
STORE_ATTR_TYPES
 
code
);

392 
STORE_ATTR_INFO_£t_c°r
(
STORE_ATTR_INFO
 *
©ås
, 
STORE_ATTR_TYPES
 
code
,

393 *
c°r
, 
size_t
 
c°r_size
);

394 
STORE_ATTR_INFO_£t_sha1°r
(
STORE_ATTR_INFO
 *
©ås
, 
STORE_ATTR_TYPES
 
code
,

395 *
sha1°r
, 
size_t
 
sha1°r_size
);

396 
STORE_ATTR_INFO_£t_dn
(
STORE_ATTR_INFO
 *
©ås
, 
STORE_ATTR_TYPES
 
code
,

397 
X509_NAME
 *
dn
);

398 
STORE_ATTR_INFO_£t_numbî
(
STORE_ATTR_INFO
 *
©ås
, 
STORE_ATTR_TYPES
 
code
,

399 
BIGNUM
 *
numbî
);

400 
STORE_ATTR_INFO_modify_c°r
(
STORE_ATTR_INFO
 *
©ås
, 
STORE_ATTR_TYPES
 
code
,

401 *
c°r
, 
size_t
 
c°r_size
);

402 
STORE_ATTR_INFO_modify_sha1°r
(
STORE_ATTR_INFO
 *
©ås
, 
STORE_ATTR_TYPES
 
code
,

403 *
sha1°r
, 
size_t
 
sha1°r_size
);

404 
STORE_ATTR_INFO_modify_dn
(
STORE_ATTR_INFO
 *
©ås
, 
STORE_ATTR_TYPES
 
code
,

405 
X509_NAME
 *
dn
);

406 
STORE_ATTR_INFO_modify_numbî
(
STORE_ATTR_INFO
 *
©ås
, 
STORE_ATTR_TYPES
 
code
,

407 
BIGNUM
 *
numbî
);

411 
STORE_ATTR_INFO_com∑ª
(
STORE_ATTR_INFO
 *
a
, STORE_ATTR_INFO *
b
);

414 
STORE_ATTR_INFO_ö_ønge
(
STORE_ATTR_INFO
 *
a
, STORE_ATTR_INFO *
b
);

416 
STORE_ATTR_INFO_ö
(
STORE_ATTR_INFO
 *
a
, STORE_ATTR_INFO *
b
);

418 
STORE_ATTR_INFO_ö_ex
(
STORE_ATTR_INFO
 *
a
, STORE_ATTR_INFO *
b
);

425 
ERR_lﬂd_STORE_°rögs
();

430 
	#STORE_F_MEM_DELETE
 134

	)

431 
	#STORE_F_MEM_GENERATE
 135

	)

432 
	#STORE_F_MEM_LIST_END
 168

	)

433 
	#STORE_F_MEM_LIST_NEXT
 136

	)

434 
	#STORE_F_MEM_LIST_START
 137

	)

435 
	#STORE_F_MEM_MODIFY
 169

	)

436 
	#STORE_F_MEM_STORE
 138

	)

437 
	#STORE_F_STORE_ATTR_INFO_GET0_CSTR
 139

	)

438 
	#STORE_F_STORE_ATTR_INFO_GET0_DN
 140

	)

439 
	#STORE_F_STORE_ATTR_INFO_GET0_NUMBER
 141

	)

440 
	#STORE_F_STORE_ATTR_INFO_GET0_SHA1STR
 142

	)

441 
	#STORE_F_STORE_ATTR_INFO_MODIFY_CSTR
 143

	)

442 
	#STORE_F_STORE_ATTR_INFO_MODIFY_DN
 144

	)

443 
	#STORE_F_STORE_ATTR_INFO_MODIFY_NUMBER
 145

	)

444 
	#STORE_F_STORE_ATTR_INFO_MODIFY_SHA1STR
 146

	)

445 
	#STORE_F_STORE_ATTR_INFO_SET_CSTR
 147

	)

446 
	#STORE_F_STORE_ATTR_INFO_SET_DN
 148

	)

447 
	#STORE_F_STORE_ATTR_INFO_SET_NUMBER
 149

	)

448 
	#STORE_F_STORE_ATTR_INFO_SET_SHA1STR
 150

	)

449 
	#STORE_F_STORE_CERTIFICATE
 170

	)

450 
	#STORE_F_STORE_CTRL
 161

	)

451 
	#STORE_F_STORE_DELETE_ARBITRARY
 158

	)

452 
	#STORE_F_STORE_DELETE_CERTIFICATE
 102

	)

453 
	#STORE_F_STORE_DELETE_CRL
 103

	)

454 
	#STORE_F_STORE_DELETE_NUMBER
 104

	)

455 
	#STORE_F_STORE_DELETE_PRIVATE_KEY
 105

	)

456 
	#STORE_F_STORE_DELETE_PUBLIC_KEY
 106

	)

457 
	#STORE_F_STORE_GENERATE_CRL
 107

	)

458 
	#STORE_F_STORE_GENERATE_KEY
 108

	)

459 
	#STORE_F_STORE_GET_ARBITRARY
 159

	)

460 
	#STORE_F_STORE_GET_CERTIFICATE
 109

	)

461 
	#STORE_F_STORE_GET_CRL
 110

	)

462 
	#STORE_F_STORE_GET_NUMBER
 111

	)

463 
	#STORE_F_STORE_GET_PRIVATE_KEY
 112

	)

464 
	#STORE_F_STORE_GET_PUBLIC_KEY
 113

	)

465 
	#STORE_F_STORE_LIST_CERTIFICATE_END
 114

	)

466 
	#STORE_F_STORE_LIST_CERTIFICATE_ENDP
 153

	)

467 
	#STORE_F_STORE_LIST_CERTIFICATE_NEXT
 115

	)

468 
	#STORE_F_STORE_LIST_CERTIFICATE_START
 116

	)

469 
	#STORE_F_STORE_LIST_CRL_END
 117

	)

470 
	#STORE_F_STORE_LIST_CRL_ENDP
 154

	)

471 
	#STORE_F_STORE_LIST_CRL_NEXT
 118

	)

472 
	#STORE_F_STORE_LIST_CRL_START
 119

	)

473 
	#STORE_F_STORE_LIST_PRIVATE_KEY_END
 120

	)

474 
	#STORE_F_STORE_LIST_PRIVATE_KEY_ENDP
 155

	)

475 
	#STORE_F_STORE_LIST_PRIVATE_KEY_NEXT
 121

	)

476 
	#STORE_F_STORE_LIST_PRIVATE_KEY_START
 122

	)

477 
	#STORE_F_STORE_LIST_PUBLIC_KEY_END
 123

	)

478 
	#STORE_F_STORE_LIST_PUBLIC_KEY_ENDP
 156

	)

479 
	#STORE_F_STORE_LIST_PUBLIC_KEY_NEXT
 124

	)

480 
	#STORE_F_STORE_LIST_PUBLIC_KEY_START
 125

	)

481 
	#STORE_F_STORE_MODIFY_ARBITRARY
 162

	)

482 
	#STORE_F_STORE_MODIFY_CERTIFICATE
 163

	)

483 
	#STORE_F_STORE_MODIFY_CRL
 164

	)

484 
	#STORE_F_STORE_MODIFY_NUMBER
 165

	)

485 
	#STORE_F_STORE_MODIFY_PRIVATE_KEY
 166

	)

486 
	#STORE_F_STORE_MODIFY_PUBLIC_KEY
 167

	)

487 
	#STORE_F_STORE_NEW_ENGINE
 133

	)

488 
	#STORE_F_STORE_NEW_METHOD
 132

	)

489 
	#STORE_F_STORE_PARSE_ATTRS_END
 151

	)

490 
	#STORE_F_STORE_PARSE_ATTRS_ENDP
 172

	)

491 
	#STORE_F_STORE_PARSE_ATTRS_NEXT
 152

	)

492 
	#STORE_F_STORE_PARSE_ATTRS_START
 171

	)

493 
	#STORE_F_STORE_REVOKE_CERTIFICATE
 129

	)

494 
	#STORE_F_STORE_REVOKE_PRIVATE_KEY
 130

	)

495 
	#STORE_F_STORE_REVOKE_PUBLIC_KEY
 131

	)

496 
	#STORE_F_STORE_STORE_ARBITRARY
 157

	)

497 
	#STORE_F_STORE_STORE_CERTIFICATE
 100

	)

498 
	#STORE_F_STORE_STORE_CRL
 101

	)

499 
	#STORE_F_STORE_STORE_NUMBER
 126

	)

500 
	#STORE_F_STORE_STORE_PRIVATE_KEY
 127

	)

501 
	#STORE_F_STORE_STORE_PUBLIC_KEY
 128

	)

504 
	#STORE_R_ALREADY_HAS_A_VALUE
 127

	)

505 
	#STORE_R_FAILED_DELETING_ARBITRARY
 132

	)

506 
	#STORE_R_FAILED_DELETING_CERTIFICATE
 100

	)

507 
	#STORE_R_FAILED_DELETING_KEY
 101

	)

508 
	#STORE_R_FAILED_DELETING_NUMBER
 102

	)

509 
	#STORE_R_FAILED_GENERATING_CRL
 103

	)

510 
	#STORE_R_FAILED_GENERATING_KEY
 104

	)

511 
	#STORE_R_FAILED_GETTING_ARBITRARY
 133

	)

512 
	#STORE_R_FAILED_GETTING_CERTIFICATE
 105

	)

513 
	#STORE_R_FAILED_GETTING_KEY
 106

	)

514 
	#STORE_R_FAILED_GETTING_NUMBER
 107

	)

515 
	#STORE_R_FAILED_LISTING_CERTIFICATES
 108

	)

516 
	#STORE_R_FAILED_LISTING_KEYS
 109

	)

517 
	#STORE_R_FAILED_MODIFYING_ARBITRARY
 138

	)

518 
	#STORE_R_FAILED_MODIFYING_CERTIFICATE
 139

	)

519 
	#STORE_R_FAILED_MODIFYING_CRL
 140

	)

520 
	#STORE_R_FAILED_MODIFYING_NUMBER
 141

	)

521 
	#STORE_R_FAILED_MODIFYING_PRIVATE_KEY
 142

	)

522 
	#STORE_R_FAILED_MODIFYING_PUBLIC_KEY
 143

	)

523 
	#STORE_R_FAILED_REVOKING_CERTIFICATE
 110

	)

524 
	#STORE_R_FAILED_REVOKING_KEY
 111

	)

525 
	#STORE_R_FAILED_STORING_ARBITRARY
 134

	)

526 
	#STORE_R_FAILED_STORING_CERTIFICATE
 112

	)

527 
	#STORE_R_FAILED_STORING_KEY
 113

	)

528 
	#STORE_R_FAILED_STORING_NUMBER
 114

	)

529 
	#STORE_R_NOT_IMPLEMENTED
 128

	)

530 
	#STORE_R_NO_CONTROL_FUNCTION
 144

	)

531 
	#STORE_R_NO_DELETE_ARBITRARY_FUNCTION
 135

	)

532 
	#STORE_R_NO_DELETE_NUMBER_FUNCTION
 115

	)

533 
	#STORE_R_NO_DELETE_OBJECT_FUNCTION
 116

	)

534 
	#STORE_R_NO_GENERATE_CRL_FUNCTION
 117

	)

535 
	#STORE_R_NO_GENERATE_OBJECT_FUNCTION
 118

	)

536 
	#STORE_R_NO_GET_OBJECT_ARBITRARY_FUNCTION
 136

	)

537 
	#STORE_R_NO_GET_OBJECT_FUNCTION
 119

	)

538 
	#STORE_R_NO_GET_OBJECT_NUMBER_FUNCTION
 120

	)

539 
	#STORE_R_NO_LIST_OBJECT_ENDP_FUNCTION
 131

	)

540 
	#STORE_R_NO_LIST_OBJECT_END_FUNCTION
 121

	)

541 
	#STORE_R_NO_LIST_OBJECT_NEXT_FUNCTION
 122

	)

542 
	#STORE_R_NO_LIST_OBJECT_START_FUNCTION
 123

	)

543 
	#STORE_R_NO_MODIFY_OBJECT_FUNCTION
 145

	)

544 
	#STORE_R_NO_REVOKE_OBJECT_FUNCTION
 124

	)

545 
	#STORE_R_NO_STORE
 129

	)

546 
	#STORE_R_NO_STORE_OBJECT_ARBITRARY_FUNCTION
 137

	)

547 
	#STORE_R_NO_STORE_OBJECT_FUNCTION
 125

	)

548 
	#STORE_R_NO_STORE_OBJECT_NUMBER_FUNCTION
 126

	)

549 
	#STORE_R_NO_VALUE
 130

	)

551 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/symhacks.h

55 #i‚de‡
HEADER_SYMHACKS_H


56 
	#HEADER_SYMHACKS_H


	)

58 
	~<›ís¶/e_os2.h
>

68 #ifde‡
OPENSSL_SYS_VMS


71 #unde‡
öt_CRYPTO_£t_do_dy∆ock_ˇŒback


72 
	#öt_CRYPTO_£t_do_dy∆ock_ˇŒback
 
öt_CRYPTO_£t_do_dy∆ock_cb


	)

75 #unde‡
CRYPTO_gë_ex_d©a_im∂emíèti⁄


76 
	#CRYPTO_gë_ex_d©a_im∂emíèti⁄
 
CRYPTO_gë_ex_d©a_im∂


	)

77 #unde‡
CRYPTO_£t_ex_d©a_im∂emíèti⁄


78 
	#CRYPTO_£t_ex_d©a_im∂emíèti⁄
 
CRYPTO_£t_ex_d©a_im∂


	)

81 #unde‡
ASN1_STRING_£t_deÁu…_mask_asc


82 
	#ASN1_STRING_£t_deÁu…_mask_asc
 
ASN1_STRING_£t_def_mask_asc


	)

86 #unde‡
i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO


87 
	#i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO
 
i2d_ASN1_SET_OF_PKCS7_SIGINF


	)

88 #unde‡
d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO


89 
	#d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO
 
d2i_ASN1_SET_OF_PKCS7_SIGINF


	)

94 #unde‡
i2d_ASN1_SET_OF_PKCS7_RECIP_INFO


95 
	#i2d_ASN1_SET_OF_PKCS7_RECIP_INFO
 
i2d_ASN1_SET_OF_PKCS7_RECINF


	)

96 #unde‡
d2i_ASN1_SET_OF_PKCS7_RECIP_INFO


97 
	#d2i_ASN1_SET_OF_PKCS7_RECIP_INFO
 
d2i_ASN1_SET_OF_PKCS7_RECINF


	)

102 #unde‡
i2d_ASN1_SET_OF_ACCESS_DESCRIPTION


103 
	#i2d_ASN1_SET_OF_ACCESS_DESCRIPTION
 
i2d_ASN1_SET_OF_ACC_DESC


	)

104 #unde‡
d2i_ASN1_SET_OF_ACCESS_DESCRIPTION


105 
	#d2i_ASN1_SET_OF_ACCESS_DESCRIPTION
 
d2i_ASN1_SET_OF_ACC_DESC


	)

109 #unde‡
PEM_ªad_NETSCAPE_CERT_SEQUENCE


110 
	#PEM_ªad_NETSCAPE_CERT_SEQUENCE
 
PEM_ªad_NS_CERT_SEQ


	)

111 #unde‡
PEM_wrôe_NETSCAPE_CERT_SEQUENCE


112 
	#PEM_wrôe_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_NS_CERT_SEQ


	)

113 #unde‡
PEM_ªad_bio_NETSCAPE_CERT_SEQUENCE


114 
	#PEM_ªad_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_ªad_bio_NS_CERT_SEQ


	)

115 #unde‡
PEM_wrôe_bio_NETSCAPE_CERT_SEQUENCE


116 
	#PEM_wrôe_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_bio_NS_CERT_SEQ


	)

117 #unde‡
PEM_wrôe_cb_bio_NETSCAPE_CERT_SEQUENCE


118 
	#PEM_wrôe_cb_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_cb_bio_NS_CERT_SEQ


	)

121 #unde‡
PEM_ªad_PKCS8_PRIV_KEY_INFO


122 
	#PEM_ªad_PKCS8_PRIV_KEY_INFO
 
PEM_ªad_P8_PRIV_KEY_INFO


	)

123 #unde‡
PEM_wrôe_PKCS8_PRIV_KEY_INFO


124 
	#PEM_wrôe_PKCS8_PRIV_KEY_INFO
 
PEM_wrôe_P8_PRIV_KEY_INFO


	)

125 #unde‡
PEM_ªad_bio_PKCS8_PRIV_KEY_INFO


126 
	#PEM_ªad_bio_PKCS8_PRIV_KEY_INFO
 
PEM_ªad_bio_P8_PRIV_KEY_INFO


	)

127 #unde‡
PEM_wrôe_bio_PKCS8_PRIV_KEY_INFO


128 
	#PEM_wrôe_bio_PKCS8_PRIV_KEY_INFO
 
PEM_wrôe_bio_P8_PRIV_KEY_INFO


	)

129 #unde‡
PEM_wrôe_cb_bio_PKCS8_PRIV_KEY_INFO


130 
	#PEM_wrôe_cb_bio_PKCS8_PRIV_KEY_INFO
 
PEM_wπ_cb_bio_P8_PRIV_KEY_INFO


	)

133 #unde‡
PEM_wrôe_bio_PKCS8Priv©eKey_nid


134 
	#PEM_wrôe_bio_PKCS8Priv©eKey_nid
 
PEM_wrôe_bio_PKCS8PrivKey_nid


	)

137 #unde‡
X509_REVOKED_gë_ext_by_¸ôiˇl


138 
	#X509_REVOKED_gë_ext_by_¸ôiˇl
 
X509_REVOKED_gë_ext_by_¸ôic


	)

139 #unde‡
X509_pﬁicy_åì_gë0_u£r_pﬁicõs


140 
	#X509_pﬁicy_åì_gë0_u£r_pﬁicõs
 
X509_pcy_åì_gë0_u§_pﬁicõs


	)

141 #unde‡
X509_pﬁicy_node_gë0_quÆifõrs


142 
	#X509_pﬁicy_node_gë0_quÆifõrs
 
X509_pcy_node_gë0_quÆifõrs


	)

143 #unde‡
X509_STORE_CTX_gë_ex∂icô_pﬁicy


144 
	#X509_STORE_CTX_gë_ex∂icô_pﬁicy
 
X509_STORE_CTX_gë_ex∂_pﬁicy


	)

145 #unde‡
X509_STORE_CTX_gë0_cuºít_issuî


146 
	#X509_STORE_CTX_gë0_cuºít_issuî
 
X509_STORE_CTX_gë0_cur_issuî


	)

149 #unde‡
CRYPTO_£t_dy∆ock_de°roy_ˇŒback


150 
	#CRYPTO_£t_dy∆ock_de°roy_ˇŒback
 
CRYPTO_£t_dy∆ock_de°roy_cb


	)

151 #unde‡
CRYPTO_£t_dy∆ock_¸óã_ˇŒback


152 
	#CRYPTO_£t_dy∆ock_¸óã_ˇŒback
 
CRYPTO_£t_dy∆ock_¸óã_cb


	)

153 #unde‡
CRYPTO_£t_dy∆ock_lock_ˇŒback


154 
	#CRYPTO_£t_dy∆ock_lock_ˇŒback
 
CRYPTO_£t_dy∆ock_lock_cb


	)

155 #unde‡
CRYPTO_gë_dy∆ock_lock_ˇŒback


156 
	#CRYPTO_gë_dy∆ock_lock_ˇŒback
 
CRYPTO_gë_dy∆ock_lock_cb


	)

157 #unde‡
CRYPTO_gë_dy∆ock_de°roy_ˇŒback


158 
	#CRYPTO_gë_dy∆ock_de°roy_ˇŒback
 
CRYPTO_gë_dy∆ock_de°roy_cb


	)

159 #unde‡
CRYPTO_gë_dy∆ock_¸óã_ˇŒback


160 
	#CRYPTO_gë_dy∆ock_¸óã_ˇŒback
 
CRYPTO_gë_dy∆ock_¸óã_cb


	)

161 #unde‡
CRYPTO_£t_locked_mem_ex_fun˘i⁄s


162 
	#CRYPTO_£t_locked_mem_ex_fun˘i⁄s
 
CRYPTO_£t_locked_mem_ex_funcs


	)

163 #unde‡
CRYPTO_gë_locked_mem_ex_fun˘i⁄s


164 
	#CRYPTO_gë_locked_mem_ex_fun˘i⁄s
 
CRYPTO_gë_locked_mem_ex_funcs


	)

167 #unde‡
SSL_CTX_£t_deÁu…_vîify_∑ths


168 
	#SSL_CTX_£t_deÁu…_vîify_∑ths
 
SSL_CTX_£t_def_vîify_∑ths


	)

169 #unde‡
SSL_gë_ex_d©a_X509_STORE_CTX_idx


170 
	#SSL_gë_ex_d©a_X509_STORE_CTX_idx
 
SSL_gë_ex_d_X509_STORE_CTX_idx


	)

171 #unde‡
SSL_add_fûe_˚π_subje˘s_to_°ack


172 
	#SSL_add_fûe_˚π_subje˘s_to_°ack
 
SSL_add_fûe_˚π_subjs_to_°k


	)

173 #unde‡
SSL_add_dú_˚π_subje˘s_to_°ack


174 
	#SSL_add_dú_˚π_subje˘s_to_°ack
 
SSL_add_dú_˚π_subjs_to_°k


	)

175 #unde‡
SSL_CTX_u£_˚πifiˇã_chaö_fûe


176 
	#SSL_CTX_u£_˚πifiˇã_chaö_fûe
 
SSL_CTX_u£_˚π_chaö_fûe


	)

177 #unde‡
SSL_CTX_£t_˚π_vîify_ˇŒback


178 
	#SSL_CTX_£t_˚π_vîify_ˇŒback
 
SSL_CTX_£t_˚π_vîify_cb


	)

179 #unde‡
SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a


180 
	#SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
 
SSL_CTX_£t_def_∑sswd_cb_ud


	)

181 #unde‡
SSL_COMP_gë_com¥essi⁄_mëhods


182 
	#SSL_COMP_gë_com¥essi⁄_mëhods
 
SSL_COMP_gë_com¥ess_mëhods


	)

184 #unde‡
s¶_add_˛õ¡hñlo_ª√gŸüã_ext


185 
	#s¶_add_˛õ¡hñlo_ª√gŸüã_ext
 
s¶_add_˛õ¡hñlo_ª√g_ext


	)

186 #unde‡
s¶_add_£rvîhñlo_ª√gŸüã_ext


187 
	#s¶_add_£rvîhñlo_ª√gŸüã_ext
 
s¶_add_£rvîhñlo_ª√g_ext


	)

188 #unde‡
s¶_∑r£_˛õ¡hñlo_ª√gŸüã_ext


189 
	#s¶_∑r£_˛õ¡hñlo_ª√gŸüã_ext
 
s¶_∑r£_˛õ¡hñlo_ª√g_ext


	)

190 #unde‡
s¶_∑r£_£rvîhñlo_ª√gŸüã_ext


191 
	#s¶_∑r£_£rvîhñlo_ª√gŸüã_ext
 
s¶_∑r£_£rvîhñlo_ª√g_ext


	)

194 #unde‡
ENGINE_gë_deÁu…_BN_mod_exp_¸t


195 
	#ENGINE_gë_deÁu…_BN_mod_exp_¸t
 
ENGINE_gë_def_BN_mod_exp_¸t


	)

196 #unde‡
ENGINE_£t_deÁu…_BN_mod_exp_¸t


197 
	#ENGINE_£t_deÁu…_BN_mod_exp_¸t
 
ENGINE_£t_def_BN_mod_exp_¸t


	)

198 #unde‡
ENGINE_£t_lﬂd_¥ivkey_fun˘i⁄


199 
	#ENGINE_£t_lﬂd_¥ivkey_fun˘i⁄
 
ENGINE_£t_lﬂd_¥ivkey_‚


	)

200 #unde‡
ENGINE_gë_lﬂd_¥ivkey_fun˘i⁄


201 
	#ENGINE_gë_lﬂd_¥ivkey_fun˘i⁄
 
ENGINE_gë_lﬂd_¥ivkey_‚


	)

202 #unde‡
ENGINE_£t_lﬂd_s¶_˛õ¡_˚π_fun˘i⁄


203 
	#ENGINE_£t_lﬂd_s¶_˛õ¡_˚π_fun˘i⁄
 \

204 
ENGINE_£t_ld_s¶_˛¡_˚π_‚


	)

205 #unde‡
ENGINE_gë_s¶_˛õ¡_˚π_fun˘i⁄


206 
	#ENGINE_gë_s¶_˛õ¡_˚π_fun˘i⁄
 
ENGINE_gë_s¶_˛õ¡_˚π_‚


	)

209 #unde‡
OCSP_REQUEST_gë_ext_by_¸ôiˇl


210 
	#OCSP_REQUEST_gë_ext_by_¸ôiˇl
 
OCSP_REQUEST_gë_ext_by_¸ô


	)

211 #unde‡
OCSP_BASICRESP_gë_ext_by_¸ôiˇl


212 
	#OCSP_BASICRESP_gë_ext_by_¸ôiˇl
 
OCSP_BASICRESP_gë_ext_by_¸ô


	)

213 #unde‡
OCSP_SINGLERESP_gë_ext_by_¸ôiˇl


214 
	#OCSP_SINGLERESP_gë_ext_by_¸ôiˇl
 
OCSP_SINGLERESP_gë_ext_by_¸ô


	)

217 #unde‡
_os¶_ﬁd_des_ede3_cfb64_í¸y±


218 
	#_os¶_ﬁd_des_ede3_cfb64_í¸y±
 
_os¶_odes_ede3_cfb64_í¸y±


	)

219 #unde‡
_os¶_ﬁd_des_ede3_ofb64_í¸y±


220 
	#_os¶_ﬁd_des_ede3_ofb64_í¸y±
 
_os¶_odes_ede3_ofb64_í¸y±


	)

223 #unde‡
OPENSSL_add_Æl_Æg‹ôhms_noc⁄f


224 
	#OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
 
OPENSSL_add_Æl_Ægo_noc⁄f


	)

225 #unde‡
OPENSSL_add_Æl_Æg‹ôhms_c⁄f


226 
	#OPENSSL_add_Æl_Æg‹ôhms_c⁄f
 
OPENSSL_add_Æl_Ægo_c⁄f


	)

229 #unde‡
EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m


230 
	#EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m
 
EC_GROUP_£t_poöt_c⁄v_f‹m


	)

231 #unde‡
EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m


232 
	#EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m
 
EC_GROUP_gë_poöt_c⁄v_f‹m


	)

233 #unde‡
EC_GROUP_˛ór_‰ì_Æl_exåa_d©a


234 
	#EC_GROUP_˛ór_‰ì_Æl_exåa_d©a
 
EC_GROUP_˛r_‰ì_Æl_xåa_d©a


	)

235 #unde‡
EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp


236 
	#EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp
 \

237 
EC_POINT_£t_J¥oj_co‹ds_GFp


	)

238 #unde‡
EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp


239 
	#EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp
 \

240 
EC_POINT_gë_J¥oj_co‹ds_GFp


	)

241 #unde‡
EC_POINT_£t_afföe_co‹dö©es_GFp


242 
	#EC_POINT_£t_afföe_co‹dö©es_GFp
 
EC_POINT_£t_afföe_co‹ds_GFp


	)

243 #unde‡
EC_POINT_gë_afföe_co‹dö©es_GFp


244 
	#EC_POINT_gë_afföe_co‹dö©es_GFp
 
EC_POINT_gë_afföe_co‹ds_GFp


	)

245 #unde‡
EC_POINT_£t_com¥es£d_co‹dö©es_GFp


246 
	#EC_POINT_£t_com¥es£d_co‹dö©es_GFp
 
EC_POINT_£t_com¥_co‹ds_GFp


	)

247 #unde‡
EC_POINT_£t_afföe_co‹dö©es_GF2m


248 
	#EC_POINT_£t_afföe_co‹dö©es_GF2m
 
EC_POINT_£t_afföe_co‹ds_GF2m


	)

249 #unde‡
EC_POINT_gë_afföe_co‹dö©es_GF2m


250 
	#EC_POINT_gë_afföe_co‹dö©es_GF2m
 
EC_POINT_gë_afföe_co‹ds_GF2m


	)

251 #unde‡
EC_POINT_£t_com¥es£d_co‹dö©es_GF2m


252 
	#EC_POINT_£t_com¥es£d_co‹dö©es_GF2m
 \

253 
EC_POINT_£t_com¥_co‹ds_GF2m


	)

254 #unde‡
ec_GF2m_sim∂e_group_˛ór_föish


255 
	#ec_GF2m_sim∂e_group_˛ór_föish
 
ec_GF2m_sim∂e_gΩ_˛r_föish


	)

256 #unde‡
ec_GF2m_sim∂e_group_check_dis¸imö™t


257 
	#ec_GF2m_sim∂e_group_check_dis¸imö™t
 
ec_GF2m_sim∂e_gΩ_chk_dis¸im


	)

258 #unde‡
ec_GF2m_sim∂e_poöt_˛ór_föish


259 
	#ec_GF2m_sim∂e_poöt_˛ór_föish
 
ec_GF2m_sim∂e_±_˛r_föish


	)

260 #unde‡
ec_GF2m_sim∂e_poöt_£t_to_öföôy


261 
	#ec_GF2m_sim∂e_poöt_£t_to_öföôy
 
ec_GF2m_sim∂e_±_£t_to_öf


	)

262 #unde‡
ec_GF2m_sim∂e_poöts_make_afföe


263 
	#ec_GF2m_sim∂e_poöts_make_afföe
 
ec_GF2m_sim∂e_±s_make_afföe


	)

264 #unde‡
ec_GF2m_sim∂e_poöt_£t_afföe_co‹dö©es


265 
	#ec_GF2m_sim∂e_poöt_£t_afföe_co‹dö©es
 \

266 
ec_GF2m_smp_±_£t_af_co‹ds


	)

267 #unde‡
ec_GF2m_sim∂e_poöt_gë_afföe_co‹dö©es


268 
	#ec_GF2m_sim∂e_poöt_gë_afföe_co‹dö©es
 \

269 
ec_GF2m_smp_±_gë_af_co‹ds


	)

270 #unde‡
ec_GF2m_sim∂e_£t_com¥es£d_co‹dö©es


271 
	#ec_GF2m_sim∂e_£t_com¥es£d_co‹dö©es
 \

272 
ec_GF2m_smp_£t_com¥_co‹ds


	)

273 #unde‡
ec_GFp_sim∂e_group_£t_curve_GFp


274 
	#ec_GFp_sim∂e_group_£t_curve_GFp
 
ec_GFp_sim∂e_gΩ_£t_curve_GFp


	)

275 #unde‡
ec_GFp_sim∂e_group_gë_curve_GFp


276 
	#ec_GFp_sim∂e_group_gë_curve_GFp
 
ec_GFp_sim∂e_gΩ_gë_curve_GFp


	)

277 #unde‡
ec_GFp_sim∂e_group_˛ór_föish


278 
	#ec_GFp_sim∂e_group_˛ór_föish
 
ec_GFp_sim∂e_gΩ_˛ór_föish


	)

279 #unde‡
ec_GFp_sim∂e_group_£t_gíî©‹


280 
	#ec_GFp_sim∂e_group_£t_gíî©‹
 
ec_GFp_sim∂e_gΩ_£t_gíî©‹


	)

281 #unde‡
ec_GFp_sim∂e_group_gë0_gíî©‹


282 
	#ec_GFp_sim∂e_group_gë0_gíî©‹
 
ec_GFp_sim∂e_gΩ_gt0_gíî©‹


	)

283 #unde‡
ec_GFp_sim∂e_group_gë_coÁ˘‹


284 
	#ec_GFp_sim∂e_group_gë_coÁ˘‹
 
ec_GFp_sim∂e_gΩ_gë_coÁ˘‹


	)

285 #unde‡
ec_GFp_sim∂e_poöt_˛ór_föish


286 
	#ec_GFp_sim∂e_poöt_˛ór_föish
 
ec_GFp_sim∂e_±_˛ór_föish


	)

287 #unde‡
ec_GFp_sim∂e_poöt_£t_to_öföôy


288 
	#ec_GFp_sim∂e_poöt_£t_to_öföôy
 
ec_GFp_sim∂e_±_£t_to_öf


	)

289 #unde‡
ec_GFp_sim∂e_poöts_make_afföe


290 
	#ec_GFp_sim∂e_poöts_make_afföe
 
ec_GFp_sim∂e_±s_make_afföe


	)

291 #unde‡
ec_GFp_sim∂e_£t_J¥oje˘ive_co‹dö©es_GFp


292 
	#ec_GFp_sim∂e_£t_J¥oje˘ive_co‹dö©es_GFp
 \

293 
ec_GFp_smp_£t_J¥oj_co‹ds_GFp


	)

294 #unde‡
ec_GFp_sim∂e_gë_J¥oje˘ive_co‹dö©es_GFp


295 
	#ec_GFp_sim∂e_gë_J¥oje˘ive_co‹dö©es_GFp
 \

296 
ec_GFp_smp_gë_J¥oj_co‹ds_GFp


	)

297 #unde‡
ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es_GFp


298 
	#ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es_GFp
 \

299 
ec_GFp_smp_±_£t_af_co‹ds_GFp


	)

300 #unde‡
ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es_GFp


301 
	#ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es_GFp
 \

302 
ec_GFp_smp_±_gë_af_co‹ds_GFp


	)

303 #unde‡
ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es_GFp


304 
	#ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es_GFp
 \

305 
ec_GFp_smp_£t_com¥_co‹ds_GFp


	)

306 #unde‡
ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es


307 
	#ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es
 \

308 
ec_GFp_smp_±_£t_af_co‹ds


	)

309 #unde‡
ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es


310 
	#ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es
 \

311 
ec_GFp_smp_±_gë_af_co‹ds


	)

312 #unde‡
ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es


313 
	#ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es
 \

314 
ec_GFp_smp_£t_com¥_co‹ds


	)

315 #unde‡
ec_GFp_sim∂e_group_check_dis¸imö™t


316 
	#ec_GFp_sim∂e_group_check_dis¸imö™t
 
ec_GFp_sim∂e_gΩ_chk_dis¸im


	)

319 #unde‡
STORE_mëhod_£t_öôüli£_fun˘i⁄


320 
	#STORE_mëhod_£t_öôüli£_fun˘i⁄
 
STORE_mëh_£t_öôüli£_‚


	)

321 #unde‡
STORE_mëhod_£t_˛ónup_fun˘i⁄


322 
	#STORE_mëhod_£t_˛ónup_fun˘i⁄
 
STORE_mëh_£t_˛ónup_‚


	)

323 #unde‡
STORE_mëhod_£t_gíî©e_fun˘i⁄


324 
	#STORE_mëhod_£t_gíî©e_fun˘i⁄
 
STORE_mëh_£t_gíî©e_‚


	)

325 #unde‡
STORE_mëhod_£t_modify_fun˘i⁄


326 
	#STORE_mëhod_£t_modify_fun˘i⁄
 
STORE_mëh_£t_modify_‚


	)

327 #unde‡
STORE_mëhod_£t_ªvoke_fun˘i⁄


328 
	#STORE_mëhod_£t_ªvoke_fun˘i⁄
 
STORE_mëh_£t_ªvoke_‚


	)

329 #unde‡
STORE_mëhod_£t_dñëe_fun˘i⁄


330 
	#STORE_mëhod_£t_dñëe_fun˘i⁄
 
STORE_mëh_£t_dñëe_‚


	)

331 #unde‡
STORE_mëhod_£t_li°_°¨t_fun˘i⁄


332 
	#STORE_mëhod_£t_li°_°¨t_fun˘i⁄
 
STORE_mëh_£t_li°_°¨t_‚


	)

333 #unde‡
STORE_mëhod_£t_li°_√xt_fun˘i⁄


334 
	#STORE_mëhod_£t_li°_√xt_fun˘i⁄
 
STORE_mëh_£t_li°_√xt_‚


	)

335 #unde‡
STORE_mëhod_£t_li°_íd_fun˘i⁄


336 
	#STORE_mëhod_£t_li°_íd_fun˘i⁄
 
STORE_mëh_£t_li°_íd_‚


	)

337 #unde‡
STORE_mëhod_£t_upd©e_°‹e_fun˘i⁄


338 
	#STORE_mëhod_£t_upd©e_°‹e_fun˘i⁄
 
STORE_mëh_£t_upd©e_°‹e_‚


	)

339 #unde‡
STORE_mëhod_£t_lock_°‹e_fun˘i⁄


340 
	#STORE_mëhod_£t_lock_°‹e_fun˘i⁄
 
STORE_mëh_£t_lock_°‹e_‚


	)

341 #unde‡
STORE_mëhod_£t_u∆ock_°‹e_fun˘i⁄


342 
	#STORE_mëhod_£t_u∆ock_°‹e_fun˘i⁄
 
STORE_mëh_£t_u∆ock_°‹e_‚


	)

343 #unde‡
STORE_mëhod_gë_öôüli£_fun˘i⁄


344 
	#STORE_mëhod_gë_öôüli£_fun˘i⁄
 
STORE_mëh_gë_öôüli£_‚


	)

345 #unde‡
STORE_mëhod_gë_˛ónup_fun˘i⁄


346 
	#STORE_mëhod_gë_˛ónup_fun˘i⁄
 
STORE_mëh_gë_˛ónup_‚


	)

347 #unde‡
STORE_mëhod_gë_gíî©e_fun˘i⁄


348 
	#STORE_mëhod_gë_gíî©e_fun˘i⁄
 
STORE_mëh_gë_gíî©e_‚


	)

349 #unde‡
STORE_mëhod_gë_modify_fun˘i⁄


350 
	#STORE_mëhod_gë_modify_fun˘i⁄
 
STORE_mëh_gë_modify_‚


	)

351 #unde‡
STORE_mëhod_gë_ªvoke_fun˘i⁄


352 
	#STORE_mëhod_gë_ªvoke_fun˘i⁄
 
STORE_mëh_gë_ªvoke_‚


	)

353 #unde‡
STORE_mëhod_gë_dñëe_fun˘i⁄


354 
	#STORE_mëhod_gë_dñëe_fun˘i⁄
 
STORE_mëh_gë_dñëe_‚


	)

355 #unde‡
STORE_mëhod_gë_li°_°¨t_fun˘i⁄


356 
	#STORE_mëhod_gë_li°_°¨t_fun˘i⁄
 
STORE_mëh_gë_li°_°¨t_‚


	)

357 #unde‡
STORE_mëhod_gë_li°_√xt_fun˘i⁄


358 
	#STORE_mëhod_gë_li°_√xt_fun˘i⁄
 
STORE_mëh_gë_li°_√xt_‚


	)

359 #unde‡
STORE_mëhod_gë_li°_íd_fun˘i⁄


360 
	#STORE_mëhod_gë_li°_íd_fun˘i⁄
 
STORE_mëh_gë_li°_íd_‚


	)

361 #unde‡
STORE_mëhod_gë_upd©e_°‹e_fun˘i⁄


362 
	#STORE_mëhod_gë_upd©e_°‹e_fun˘i⁄
 
STORE_mëh_gë_upd©e_°‹e_‚


	)

363 #unde‡
STORE_mëhod_gë_lock_°‹e_fun˘i⁄


364 
	#STORE_mëhod_gë_lock_°‹e_fun˘i⁄
 
STORE_mëh_gë_lock_°‹e_‚


	)

365 #unde‡
STORE_mëhod_gë_u∆ock_°‹e_fun˘i⁄


366 
	#STORE_mëhod_gë_u∆ock_°‹e_fun˘i⁄
 
STORE_mëh_gë_u∆ock_°‹e_‚


	)

369 #unde‡
CMS_Recùõ¡Info_kåi_gë0_Ægs


370 
	#CMS_Recùõ¡Info_kåi_gë0_Ægs
 
CMS_RecùInfo_kåi_gë0_Ægs


	)

371 #unde‡
CMS_Recùõ¡Info_kåi_gë0_sig√r_id


372 
	#CMS_Recùõ¡Info_kåi_gë0_sig√r_id
 
CMS_RecùInfo_kåi_gë0_sigr_id


	)

373 #unde‡
CMS_OthîRevoˇti⁄InfoF‹m©_ô


374 
	#CMS_OthîRevoˇti⁄InfoF‹m©_ô
 
CMS_OthîRevocInfoF‹m©_ô


	)

375 #unde‡
CMS_KeyAgªeRecùõ¡Idítifõr_ô


376 
	#CMS_KeyAgªeRecùõ¡Idítifõr_ô
 
CMS_KeyAgªeRecùIdítifõr_ô


	)

377 #unde‡
CMS_Origö©‹IdítifõrOrKey_ô


378 
	#CMS_Origö©‹IdítifõrOrKey_ô
 
CMS_Origö©‹IdOrKey_ô


	)

379 #unde‡
cms_Sig√rIdítifõr_gë0_sig√r_id


380 
	#cms_Sig√rIdítifõr_gë0_sig√r_id
 
cms_Sig√rId_gë0_sig√r_id


	)

383 #unde‡
dés1_ªå™smô_buf„ªd_mesßges


384 
	#dés1_ªå™smô_buf„ªd_mesßges
 
dés1_ªå™smô_buf„ªd_msgs


	)

390 #i‡
deföed
(
OPENSSL_SYS_WIN16
Ë|| deföed(
OPENSSL_SYS_VMS
Ë|| deföed(
OPENSSL_SYS_OS2
)

391 #unde‡
ERR_lﬂd_CRYPTO_°rögs


392 
	#ERR_lﬂd_CRYPTO_°rögs
 
ERR_lﬂd_CRYPTOlib_°rögs


	)

393 #unde‡
OCSP_¸lID_√w


394 
	#OCSP_¸lID_√w
 
OCSP_¸lID2_√w


	)

396 #unde‡
d2i_ECPARAMETERS


397 
	#d2i_ECPARAMETERS
 
d2i_UC_ECPARAMETERS


	)

398 #unde‡
i2d_ECPARAMETERS


399 
	#i2d_ECPARAMETERS
 
i2d_UC_ECPARAMETERS


	)

400 #unde‡
d2i_ECPKPARAMETERS


401 
	#d2i_ECPKPARAMETERS
 
d2i_UC_ECPKPARAMETERS


	)

402 #unde‡
i2d_ECPKPARAMETERS


403 
	#i2d_ECPKPARAMETERS
 
i2d_UC_ECPKPARAMETERS


	)

411 #unde‡
X509v3_˛ónup_exãnsi⁄s


412 
	#X509v3_˛ónup_exãnsi⁄s
 
oX509v3_˛ónup_exãnsi⁄s


	)

413 #unde‡
X509v3_add_exãnsi⁄


414 
	#X509v3_add_exãnsi⁄
 
oX509v3_add_exãnsi⁄


	)

415 #unde‡
X509v3_add_√tsˇ≥_exãnsi⁄s


416 
	#X509v3_add_√tsˇ≥_exãnsi⁄s
 
oX509v3_add_√tsˇ≥_exãnsi⁄s


	)

417 #unde‡
X509v3_add_°™d¨d_exãnsi⁄s


418 
	#X509v3_add_°™d¨d_exãnsi⁄s
 
oX509v3_add_°™d¨d_exãnsi⁄s


	)

426 #unde‡
cms_D©a_¸óã


427 
	#cms_D©a_¸óã
 
¥iv_cms_D©a_¸óã


	)

	@/usr/include/openssl/tls1.h

72 #i‚de‡
HEADER_TLS1_H


73 
	#HEADER_TLS1_H


	)

75 
	~<›ís¶/buf„r.h
>

77 #ifde‡ 
__˝lu•lus


81 
	#TLS1_ALLOW_EXPERIMENTAL_CIPHERSUITES
 0

	)

83 
	#TLS1_VERSION
 0x0301

	)

84 
	#TLS1_VERSION_MAJOR
 0x03

	)

85 
	#TLS1_VERSION_MINOR
 0x01

	)

87 
	#TLS1_AD_DECRYPTION_FAILED
 21

	)

88 
	#TLS1_AD_RECORD_OVERFLOW
 22

	)

89 
	#TLS1_AD_UNKNOWN_CA
 48

	)

90 
	#TLS1_AD_ACCESS_DENIED
 49

	)

91 
	#TLS1_AD_DECODE_ERROR
 50

	)

92 
	#TLS1_AD_DECRYPT_ERROR
 51

	)

93 
	#TLS1_AD_EXPORT_RESTRICTION
 60

	)

94 
	#TLS1_AD_PROTOCOL_VERSION
 70

	)

95 
	#TLS1_AD_INSUFFICIENT_SECURITY
 71

	)

96 
	#TLS1_AD_INTERNAL_ERROR
 80

	)

97 
	#TLS1_AD_USER_CANCELLED
 90

	)

98 
	#TLS1_AD_NO_RENEGOTIATION
 100

	)

100 
	#TLS1_AD_UNSUPPORTED_EXTENSION
 110

	)

101 
	#TLS1_AD_CERTIFICATE_UNOBTAINABLE
 111

	)

102 
	#TLS1_AD_UNRECOGNIZED_NAME
 112

	)

103 
	#TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE
 113

	)

104 
	#TLS1_AD_BAD_CERTIFICATE_HASH_VALUE
 114

	)

105 
	#TLS1_AD_UNKNOWN_PSK_IDENTITY
 115

	)

108 
	#TLSEXT_TYPE_£rvî_«me
 0

	)

109 
	#TLSEXT_TYPE_max_‰agmít_Àngth
 1

	)

110 
	#TLSEXT_TYPE_˛õ¡_˚πifiˇã_uæ
 2

	)

111 
	#TLSEXT_TYPE_åu°ed_ˇ_keys
 3

	)

112 
	#TLSEXT_TYPE_åunˇãd_hmac
 4

	)

113 
	#TLSEXT_TYPE_°©us_ªque°
 5

	)

114 
	#TLSEXT_TYPE_ñlùtic_curves
 10

	)

115 
	#TLSEXT_TYPE_ec_poöt_f‹m©s
 11

	)

116 
	#TLSEXT_TYPE_£ssi⁄_tickë
 35

	)

119 
	#TLSEXT_TYPE_ª√gŸüã
 0xff01

	)

122 
	#TLSEXT_NAMETYPE_ho°_«me
 0

	)

124 
	#TLSEXT_STATUSTYPE_oc•
 1

	)

126 #i‚de‡
OPENSSL_NO_TLSEXT


128 
	#TLSEXT_MAXLEN_ho°_«me
 255

	)

130 c⁄° *
SSL_gë_£rvî«me
(c⁄° 
SSL
 *
s
, c⁄° 
ty≥
) ;

131 
SSL_gë_£rvî«me_ty≥
(c⁄° 
SSL
 *
s
) ;

133 
	#SSL_£t_é£xt_ho°_«me
(
s
,
«me
) \

134 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_TLSEXT_HOSTNAME
,
TLSEXT_NAMETYPE_ho°_«me
,(*)
«me
)

	)

136 
	#SSL_£t_é£xt_debug_ˇŒback
(
s¶
, 
cb
) \

137 
	`SSL_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_DEBUG_CB
,((*)())
cb
)

	)

139 
	#SSL_£t_é£xt_debug_¨g
(
s¶
, 
¨g
) \

140 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_DEBUG_ARG
,0, (*)
¨g
)

	)

142 
	#SSL_£t_é£xt_°©us_ty≥
(
s¶
, 
ty≥
) \

143 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
,
ty≥
, 
NULL
)

	)

145 
	#SSL_gë_é£xt_°©us_exts
(
s¶
, 
¨g
) \

146 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS
,0, (*)
¨g
)

	)

148 
	#SSL_£t_é£xt_°©us_exts
(
s¶
, 
¨g
) \

149 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS
,0, (*)
¨g
)

	)

151 
	#SSL_gë_é£xt_°©us_ids
(
s¶
, 
¨g
) \

152 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS
,0, (*)
¨g
)

	)

154 
	#SSL_£t_é£xt_°©us_ids
(
s¶
, 
¨g
) \

155 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS
,0, (*)
¨g
)

	)

157 
	#SSL_gë_é£xt_°©us_oc•_ª•
(
s¶
, 
¨g
) \

158 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP
,0, (*)
¨g
)

	)

160 
	#SSL_£t_é£xt_°©us_oc•_ª•
(
s¶
, 
¨g
, 
¨gÀn
) \

161 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP
,
¨gÀn
, (*)
¨g
)

	)

163 
	#SSL_CTX_£t_é£xt_£rvî«me_ˇŒback
(
˘x
, 
cb
) \

164 
	`SSL_CTX_ˇŒback_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
,((*)())
cb
)

	)

166 
	#SSL_TLSEXT_ERR_OK
 0

	)

167 
	#SSL_TLSEXT_ERR_ALERT_WARNING
 1

	)

168 
	#SSL_TLSEXT_ERR_ALERT_FATAL
 2

	)

169 
	#SSL_TLSEXT_ERR_NOACK
 3

	)

171 
	#SSL_CTX_£t_é£xt_£rvî«me_¨g
(
˘x
, 
¨g
) \

172 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
,0, (*)
¨g
)

	)

174 
	#SSL_CTX_gë_é£xt_tickë_keys
(
˘x
, 
keys
, 
keyÀn
) \

175 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_GET_TLSEXT_TICKET_KEYS
,(
keyÀn
),(
keys
))

	)

176 
	#SSL_CTX_£t_é£xt_tickë_keys
(
˘x
, 
keys
, 
keyÀn
) \

177 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_SET_TLSEXT_TICKET_KEYS
,(
keyÀn
),(
keys
))

	)

179 
	#SSL_CTX_£t_é£xt_°©us_cb
(
s¶
, 
cb
) \

180 
	`SSL_CTX_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
,((*)())
cb
)

	)

182 
	#SSL_CTX_£t_é£xt_°©us_¨g
(
s¶
, 
¨g
) \

183 
	`SSL_CTX_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG
,0, (*)
¨g
)

	)

185 
	#SSL_CTX_£t_é£xt_tickë_key_cb
(
s¶
, 
cb
) \

186 
	`SSL_CTX_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB
,((*)())
cb
)

	)

194 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_MD5
 0x03000060

	)

195 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5
 0x03000061

	)

196 
	#TLS1_CK_RSA_EXPORT1024_WITH_DES_CBC_SHA
 0x03000062

	)

197 
	#TLS1_CK_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA
 0x03000063

	)

198 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_SHA
 0x03000064

	)

199 
	#TLS1_CK_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA
 0x03000065

	)

200 
	#TLS1_CK_DHE_DSS_WITH_RC4_128_SHA
 0x03000066

	)

204 
	#TLS1_CK_RSA_WITH_AES_128_SHA
 0x0300002F

	)

205 
	#TLS1_CK_DH_DSS_WITH_AES_128_SHA
 0x03000030

	)

206 
	#TLS1_CK_DH_RSA_WITH_AES_128_SHA
 0x03000031

	)

207 
	#TLS1_CK_DHE_DSS_WITH_AES_128_SHA
 0x03000032

	)

208 
	#TLS1_CK_DHE_RSA_WITH_AES_128_SHA
 0x03000033

	)

209 
	#TLS1_CK_ADH_WITH_AES_128_SHA
 0x03000034

	)

211 
	#TLS1_CK_RSA_WITH_AES_256_SHA
 0x03000035

	)

212 
	#TLS1_CK_DH_DSS_WITH_AES_256_SHA
 0x03000036

	)

213 
	#TLS1_CK_DH_RSA_WITH_AES_256_SHA
 0x03000037

	)

214 
	#TLS1_CK_DHE_DSS_WITH_AES_256_SHA
 0x03000038

	)

215 
	#TLS1_CK_DHE_RSA_WITH_AES_256_SHA
 0x03000039

	)

216 
	#TLS1_CK_ADH_WITH_AES_256_SHA
 0x0300003A

	)

219 
	#TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000041

	)

220 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA
 0x03000042

	)

221 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000043

	)

222 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
 0x03000044

	)

223 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000045

	)

224 
	#TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA
 0x03000046

	)

226 
	#TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000084

	)

227 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA
 0x03000085

	)

228 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000086

	)

229 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
 0x03000087

	)

230 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000088

	)

231 
	#TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA
 0x03000089

	)

234 
	#TLS1_CK_RSA_WITH_SEED_SHA
 0x03000096

	)

235 
	#TLS1_CK_DH_DSS_WITH_SEED_SHA
 0x03000097

	)

236 
	#TLS1_CK_DH_RSA_WITH_SEED_SHA
 0x03000098

	)

237 
	#TLS1_CK_DHE_DSS_WITH_SEED_SHA
 0x03000099

	)

238 
	#TLS1_CK_DHE_RSA_WITH_SEED_SHA
 0x0300009A

	)

239 
	#TLS1_CK_ADH_WITH_SEED_SHA
 0x0300009B

	)

242 
	#TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA
 0x0300C001

	)

243 
	#TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA
 0x0300C002

	)

244 
	#TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA
 0x0300C003

	)

245 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA
 0x0300C004

	)

246 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA
 0x0300C005

	)

248 
	#TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA
 0x0300C006

	)

249 
	#TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA
 0x0300C007

	)

250 
	#TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA
 0x0300C008

	)

251 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 0x0300C009

	)

252 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 0x0300C00A

	)

254 
	#TLS1_CK_ECDH_RSA_WITH_NULL_SHA
 0x0300C00B

	)

255 
	#TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA
 0x0300C00C

	)

256 
	#TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA
 0x0300C00D

	)

257 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA
 0x0300C00E

	)

258 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA
 0x0300C00F

	)

260 
	#TLS1_CK_ECDHE_RSA_WITH_NULL_SHA
 0x0300C010

	)

261 
	#TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA
 0x0300C011

	)

262 
	#TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA
 0x0300C012

	)

263 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA
 0x0300C013

	)

264 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA
 0x0300C014

	)

266 
	#TLS1_CK_ECDH_™⁄_WITH_NULL_SHA
 0x0300C015

	)

267 
	#TLS1_CK_ECDH_™⁄_WITH_RC4_128_SHA
 0x0300C016

	)

268 
	#TLS1_CK_ECDH_™⁄_WITH_DES_192_CBC3_SHA
 0x0300C017

	)

269 
	#TLS1_CK_ECDH_™⁄_WITH_AES_128_CBC_SHA
 0x0300C018

	)

270 
	#TLS1_CK_ECDH_™⁄_WITH_AES_256_CBC_SHA
 0x0300C019

	)

279 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_MD5
 "EXP1024-RC4-MD5"

	)

280 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5
 "EXP1024-RC2-CBC-MD5"

	)

281 
	#TLS1_TXT_RSA_EXPORT1024_WITH_DES_CBC_SHA
 "EXP1024-DES-CBC-SHA"

	)

282 
	#TLS1_TXT_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA
 "EXP1024-DHE-DSS-DES-CBC-SHA"

	)

283 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_SHA
 "EXP1024-RC4-SHA"

	)

284 
	#TLS1_TXT_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA
 "EXP1024-DHE-DSS-RC4-SHA"

	)

285 
	#TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA
 "DHE-DSS-RC4-SHA"

	)

288 
	#TLS1_TXT_RSA_WITH_AES_128_SHA
 "AES128-SHA"

	)

289 
	#TLS1_TXT_DH_DSS_WITH_AES_128_SHA
 "DH-DSS-AES128-SHA"

	)

290 
	#TLS1_TXT_DH_RSA_WITH_AES_128_SHA
 "DH-RSA-AES128-SHA"

	)

291 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_SHA
 "DHE-DSS-AES128-SHA"

	)

292 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_SHA
 "DHE-RSA-AES128-SHA"

	)

293 
	#TLS1_TXT_ADH_WITH_AES_128_SHA
 "ADH-AES128-SHA"

	)

295 
	#TLS1_TXT_RSA_WITH_AES_256_SHA
 "AES256-SHA"

	)

296 
	#TLS1_TXT_DH_DSS_WITH_AES_256_SHA
 "DH-DSS-AES256-SHA"

	)

297 
	#TLS1_TXT_DH_RSA_WITH_AES_256_SHA
 "DH-RSA-AES256-SHA"

	)

298 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_SHA
 "DHE-DSS-AES256-SHA"

	)

299 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_SHA
 "DHE-RSA-AES256-SHA"

	)

300 
	#TLS1_TXT_ADH_WITH_AES_256_SHA
 "ADH-AES256-SHA"

	)

303 
	#TLS1_TXT_ECDH_ECDSA_WITH_NULL_SHA
 "ECDH-ECDSA-NULL-SHA"

	)

304 
	#TLS1_TXT_ECDH_ECDSA_WITH_RC4_128_SHA
 "ECDH-ECDSA-RC4-SHA"

	)

305 
	#TLS1_TXT_ECDH_ECDSA_WITH_DES_192_CBC3_SHA
 "ECDH-ECDSA-DES-CBC3-SHA"

	)

306 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_CBC_SHA
 "ECDH-ECDSA-AES128-SHA"

	)

307 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_CBC_SHA
 "ECDH-ECDSA-AES256-SHA"

	)

309 
	#TLS1_TXT_ECDHE_ECDSA_WITH_NULL_SHA
 "ECDHE-ECDSA-NULL-SHA"

	)

310 
	#TLS1_TXT_ECDHE_ECDSA_WITH_RC4_128_SHA
 "ECDHE-ECDSA-RC4-SHA"

	)

311 
	#TLS1_TXT_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA
 "ECDHE-ECDSA-DES-CBC3-SHA"

	)

312 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 "ECDHE-ECDSA-AES128-SHA"

	)

313 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 "ECDHE-ECDSA-AES256-SHA"

	)

315 
	#TLS1_TXT_ECDH_RSA_WITH_NULL_SHA
 "ECDH-RSA-NULL-SHA"

	)

316 
	#TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA
 "ECDH-RSA-RC4-SHA"

	)

317 
	#TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA
 "ECDH-RSA-DES-CBC3-SHA"

	)

318 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA
 "ECDH-RSA-AES128-SHA"

	)

319 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA
 "ECDH-RSA-AES256-SHA"

	)

321 
	#TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA
 "ECDHE-RSA-NULL-SHA"

	)

322 
	#TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA
 "ECDHE-RSA-RC4-SHA"

	)

323 
	#TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA
 "ECDHE-RSA-DES-CBC3-SHA"

	)

324 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA
 "ECDHE-RSA-AES128-SHA"

	)

325 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA
 "ECDHE-RSA-AES256-SHA"

	)

327 
	#TLS1_TXT_ECDH_™⁄_WITH_NULL_SHA
 "AECDH-NULL-SHA"

	)

328 
	#TLS1_TXT_ECDH_™⁄_WITH_RC4_128_SHA
 "AECDH-RC4-SHA"

	)

329 
	#TLS1_TXT_ECDH_™⁄_WITH_DES_192_CBC3_SHA
 "AECDH-DES-CBC3-SHA"

	)

330 
	#TLS1_TXT_ECDH_™⁄_WITH_AES_128_CBC_SHA
 "AECDH-AES128-SHA"

	)

331 
	#TLS1_TXT_ECDH_™⁄_WITH_AES_256_CBC_SHA
 "AECDH-AES256-SHA"

	)

334 
	#TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA
 "CAMELLIA128-SHA"

	)

335 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA
 "DH-DSS-CAMELLIA128-SHA"

	)

336 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA
 "DH-RSA-CAMELLIA128-SHA"

	)

337 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
 "DHE-DSS-CAMELLIA128-SHA"

	)

338 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
 "DHE-RSA-CAMELLIA128-SHA"

	)

339 
	#TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA
 "ADH-CAMELLIA128-SHA"

	)

341 
	#TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA
 "CAMELLIA256-SHA"

	)

342 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA
 "DH-DSS-CAMELLIA256-SHA"

	)

343 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA
 "DH-RSA-CAMELLIA256-SHA"

	)

344 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
 "DHE-DSS-CAMELLIA256-SHA"

	)

345 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
 "DHE-RSA-CAMELLIA256-SHA"

	)

346 
	#TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA
 "ADH-CAMELLIA256-SHA"

	)

349 
	#TLS1_TXT_RSA_WITH_SEED_SHA
 "SEED-SHA"

	)

350 
	#TLS1_TXT_DH_DSS_WITH_SEED_SHA
 "DH-DSS-SEED-SHA"

	)

351 
	#TLS1_TXT_DH_RSA_WITH_SEED_SHA
 "DH-RSA-SEED-SHA"

	)

352 
	#TLS1_TXT_DHE_DSS_WITH_SEED_SHA
 "DHE-DSS-SEED-SHA"

	)

353 
	#TLS1_TXT_DHE_RSA_WITH_SEED_SHA
 "DHE-RSA-SEED-SHA"

	)

354 
	#TLS1_TXT_ADH_WITH_SEED_SHA
 "ADH-SEED-SHA"

	)

356 
	#TLS_CT_RSA_SIGN
 1

	)

357 
	#TLS_CT_DSS_SIGN
 2

	)

358 
	#TLS_CT_RSA_FIXED_DH
 3

	)

359 
	#TLS_CT_DSS_FIXED_DH
 4

	)

360 
	#TLS_CT_ECDSA_SIGN
 64

	)

361 
	#TLS_CT_RSA_FIXED_ECDH
 65

	)

362 
	#TLS_CT_ECDSA_FIXED_ECDH
 66

	)

363 
	#TLS_CT_NUMBER
 7

	)

365 
	#TLS1_FINISH_MAC_LENGTH
 12

	)

367 
	#TLS_MD_MAX_CONST_SIZE
 20

	)

368 
	#TLS_MD_CLIENT_FINISH_CONST
 "˛õ¡ föished"

	)

369 
	#TLS_MD_CLIENT_FINISH_CONST_SIZE
 15

	)

370 
	#TLS_MD_SERVER_FINISH_CONST
 "£rvî föished"

	)

371 
	#TLS_MD_SERVER_FINISH_CONST_SIZE
 15

	)

372 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "£rvî wrôêkey"

	)

373 
	#TLS_MD_SERVER_WRITE_KEY_CONST_SIZE
 16

	)

374 
	#TLS_MD_KEY_EXPANSION_CONST
 "keyÉx∑nsi⁄"

	)

375 
	#TLS_MD_KEY_EXPANSION_CONST_SIZE
 13

	)

376 
	#TLS_MD_CLIENT_WRITE_KEY_CONST
 "˛õ¡ wrôêkey"

	)

377 
	#TLS_MD_CLIENT_WRITE_KEY_CONST_SIZE
 16

	)

378 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "£rvî wrôêkey"

	)

379 
	#TLS_MD_SERVER_WRITE_KEY_CONST_SIZE
 16

	)

380 
	#TLS_MD_IV_BLOCK_CONST
 "IV block"

	)

381 
	#TLS_MD_IV_BLOCK_CONST_SIZE
 8

	)

382 
	#TLS_MD_MASTER_SECRET_CONST
 "ma°î se¸ë"

	)

383 
	#TLS_MD_MASTER_SECRET_CONST_SIZE
 13

	)

385 #ifde‡
CHARSET_EBCDIC


386 #unde‡
TLS_MD_CLIENT_FINISH_CONST


387 
	#TLS_MD_CLIENT_FINISH_CONST
 "\x63\x6c\x69\x65\x6e\x74\x20\x66\x69\x6e\x69\x73\x68\x65\x64"

	)

388 #unde‡
TLS_MD_SERVER_FINISH_CONST


389 
	#TLS_MD_SERVER_FINISH_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x66\x69\x6e\x69\x73\x68\x65\x64"

	)

390 #unde‡
TLS_MD_SERVER_WRITE_KEY_CONST


391 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

392 #unde‡
TLS_MD_KEY_EXPANSION_CONST


393 
	#TLS_MD_KEY_EXPANSION_CONST
 "\x6b\x65\x79\x20\x65\x78\x70\x61\x6e\x73\x69\x6f\x6e"

	)

394 #unde‡
TLS_MD_CLIENT_WRITE_KEY_CONST


395 
	#TLS_MD_CLIENT_WRITE_KEY_CONST
 "\x63\x6c\x69\x65\x6e\x74\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

396 #unde‡
TLS_MD_SERVER_WRITE_KEY_CONST


397 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

398 #unde‡
TLS_MD_IV_BLOCK_CONST


399 
	#TLS_MD_IV_BLOCK_CONST
 "\x49\x56\x20\x62\x6c\x6f\x63\x6b"

	)

400 #unde‡
TLS_MD_MASTER_SECRET_CONST


401 
	#TLS_MD_MASTER_SECRET_CONST
 "\x6d\x61\x73\x74\x65\x72\x20\x73\x65\x63\x72\x65\x74"

	)

404 #ifde‡ 
__˝lu•lus


	@/usr/include/stdarg.h

31 #i‚de‡
_MACHINE_STDARG_H_


32 
	#_MACHINE_STDARG_H_


	)

34 
	~<sys/cdefs.h
>

35 
	~<sys/_ty≥s.h
>

37 #i‚de‡
_VA_LIST_DECLARED


38 
	#_VA_LIST_DECLARED


	)

39 
__va_li°
 
	tva_li°
;

42 #ifde‡
__GNUCLIKE_BUILTIN_STDARG


44 
	#va_°¨t
(
≠
, 
œ°
) \

45 
	`__buûtö_va_°¨t
((
≠
), (
œ°
))

	)

47 
	#va_¨g
(
≠
, 
ty≥
) \

48 
	`__buûtö_va_¨g
((
≠
), 
ty≥
)

	)

50 
	#__va_c›y
(
de°
, 
§c
) \

51 
	`__buûtö_va_c›y
((
de°
), (
§c
))

	)

53 #i‡
__ISO_C_VISIBLE
 >= 1999

54 
	#va_c›y
(
de°
, 
§c
) \

55 
	`__va_c›y
(
de°
, 
§c
)

	)

58 
	#va_íd
(
≠
) \

59 
	`__buûtö_va_íd
(
≠
)

	)

61 #ñi‡
deföed
(
löt
)

63 
	#__va_size
(
ty≥
) \

64 ((((
ty≥
Ë+ (Ë- 1Ë/ ()Ë* ())

	)

65 
	#va_°¨t
(
≠
, 
œ°
) \

66 ((
≠
Ë(
va_li°
)&(
œ°
Ë+ 
	`__va_size
÷a°))

	)

67 
	#va_¨g
(
≠
, 
ty≥
) \

68 (*(
ty≥
 *)((
≠
Ë+
	`__va_size
—y≥), (≠Ë- __va_size—y≥)))

	)

69 
	#va_íd
(
≠
)

	)

72 #îr‹ 
this
 
fûe
 
√eds
 
to
 
be
 
p‹ãd
Åÿ
your
 
compûî


	@/usr/include/stddef.h

38 #i‚de‡
_STDDEF_H_


39 
	#_STDDEF_H_


	)

41 
	~<sys/cdefs.h
>

42 
	~<sys/_nuŒ.h
>

43 
	~<sys/_ty≥s.h
>

45 
__±rdiff_t
 
	t±rdiff_t
;

47 #i‡
__BSD_VISIBLE


48 #i‚de‡
_RUNE_T_DECLARED


49 
__ru√_t
 
	tru√_t
;

50 
	#_RUNE_T_DECLARED


	)

54 #i‚de‡
_SIZE_T_DECLARED


55 
__size_t
 
	tsize_t
;

56 
	#_SIZE_T_DECLARED


	)

59 #i‚def 
__˝lu•lus


60 #i‚de‡
_WCHAR_T_DECLARED


61 
__wch¨_t
 
	twch¨_t
;

62 
	#_WCHAR_T_DECLARED


	)

66 
	#off£tof
(
ty≥
, 
membî
Ë
	`__off£tof
—y≥, membî)

	)

	@/usr/include/sys/_iovec.h

33 #i‚de‡
_SYS__IOVEC_H_


34 
	#_SYS__IOVEC_H_


	)

36 
	~<sys/_ty≥s.h
>

38 #i‚de‡
_SIZE_T_DECLARED


39 
__size_t
 
	tsize_t
;

40 
	#_SIZE_T_DECLARED


	)

43 
	siovec
 {

44 *
	miov_ba£
;

45 
size_t
 
	miov_Àn
;

	@/usr/include/sys/_lock.h

31 #i‚de‡
_SYS__LOCK_H_


32 
	#_SYS__LOCK_H_


	)

34 
	slock_obje˘
 {

35 c⁄° *
	mlo_«me
;

36 
u_öt
 
	mlo_Êags
;

37 
u_öt
 
	mlo_d©a
;

38 
wô√ss
 *
	mlo_wô√ss
;

	@/usr/include/sys/_mutex.h

31 #i‚de‡
_SYS__MUTEX_H_


32 
	#_SYS__MUTEX_H_


	)

37 
	smtx
 {

38 
lock_obje˘
 
	mlock_obje˘
;

39 vﬁ©ûê
uöçå_t
 
	mmtx_lock
;

	@/usr/include/sys/_null.h

29 #i‚de‡
NULL


31 #i‡!
deföed
(
__˝lu•lus
)

32 
	#NULL
 ((*)0)

	)

34 #i‡
deföed
(
__GNUG__
Ë&& deföed(
__GNUC__
) && __GNUC__ >= 4

35 
	#NULL
 
__nuŒ


	)

37 #i‡
deföed
(
__LP64__
)

38 
	#NULL
 (0L)

	)

40 
	#NULL
 0

	)

	@/usr/include/sys/_pthreadtypes.h

36 #i‚de‡
_SYS__PTHREADTYPES_H_


37 
	#_SYS__PTHREADTYPES_H_


	)

44 
	g±hªad
;

45 
	g±hªad_©å
;

46 
	g±hªad_c⁄d
;

47 
	g±hªad_c⁄d_©å
;

48 
	g±hªad_muãx
;

49 
	g±hªad_muãx_©å
;

50 
	g±hªad_⁄˚
;

51 
	g±hªad_rwlock
;

52 
	g±hªad_rwlock©å
;

53 
	g±hªad_b¨rõr
;

54 
	g±hªad_b¨rõr_©å
;

55 
	g±hªad_•ölock
;

64 #i‚de‡
_PTHREAD_T_DECLARED


65 
±hªad
 *
	t±hªad_t
;

66 
	#_PTHREAD_T_DECLARED


	)

68 
±hªad_©å
 *
	t±hªad_©å_t
;

69 
±hªad_muãx
 *
	t±hªad_muãx_t
;

70 
±hªad_muãx_©å
 *
	t±hªad_muãx©å_t
;

71 
±hªad_c⁄d
 *
	t±hªad_c⁄d_t
;

72 
±hªad_c⁄d_©å
 *
	t±hªad_c⁄d©å_t
;

73 
	t±hªad_key_t
;

74 
±hªad_⁄˚
 
	t±hªad_⁄˚_t
;

75 
±hªad_rwlock
 *
	t±hªad_rwlock_t
;

76 
±hªad_rwlock©å
 *
	t±hªad_rwlock©å_t
;

77 
±hªad_b¨rõr
 *
	t±hªad_b¨rõr_t
;

78 
±hªad_b¨rõøâr
 *
	t±hªad_b¨rõøâr_t
;

79 
±hªad_•ölock
 *
	t±hªad_•ölock_t
;

87 *
	t±hªad_addr_t
;

88 *(*
	t±hªad_°¨åoutöe_t
)(*);

93 
	s±hªad_⁄˚
 {

94 
	m°©e
;

95 
±hªad_muãx_t
 
	mmuãx
;

	@/usr/include/sys/_sigset.h

38 #i‚de‡
_SYS__SIGSET_H_


39 
	#_SYS__SIGSET_H_


	)

44 
	#_SIG_WORDS
 4

	)

45 
	#_SIG_MAXSIG
 128

	)

46 
	#_SIG_IDX
(
sig
Ë((sigË- 1)

	)

47 
	#_SIG_WORD
(
sig
Ë(
	`_SIG_IDX
(sigË>> 5)

	)

48 
	#_SIG_BIT
(
sig
Ë(1 << (
	`_SIG_IDX
(sigË& 31))

	)

49 
	#_SIG_VALID
(
sig
Ë((sigË<
_SIG_MAXSIG
 && (sigË> 0)

	)

51 
	s__sig£t
 {

52 
__uöt32_t
 
	m__bôs
[
_SIG_WORDS
];

53 } 
	t__sig£t_t
;

55 #i‡
deföed
(
_KERNEL
Ë&& deföed(
COMPAT_43
)

56 
	tosig£t_t
;

	@/usr/include/sys/_timespec.h

49 #i‚de‡
_SYS__TIMESPEC_H_


50 
	#_SYS__TIMESPEC_H_


	)

52 
	s__time•ec
 {

53 
__time_t
 
	mtv_£c
;

54 
	mtv_n£c
;

	@/usr/include/sys/_timeval.h

29 #i‚de‡
_SYS__TIMEVAL_H_


30 
	#_SYS__TIMEVAL_H_


	)

32 
	~<sys/_ty≥s.h
>

34 #i‚de‡
_SUSECONDS_T_DECLARED


35 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

36 
	#_SUSECONDS_T_DECLARED


	)

39 #i‚de‡
_TIME_T_DECLARED


40 
__time_t
 
	ttime_t
;

41 
	#_TIME_T_DECLARED


	)

47 
	stimevÆ
 {

48 
time_t
 
	mtv_£c
;

49 
su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/sys/_types.h

29 #i‚de‡
_SYS__TYPES_H_


30 
	#_SYS__TYPES_H_


	)

32 
	~<sys/cdefs.h
>

33 
	~<machöe/_ty≥s.h
>

38 
__uöt32_t
 
	t__blksize_t
;

39 
__öt64_t
 
	t__blk˙t_t
;

40 
__öt32_t
 
	t__˛ockid_t
;

41 
__uöt32_t
 
	t__fÊags_t
;

42 
__uöt64_t
 
	t__fsblk˙t_t
;

43 
__uöt64_t
 
	t__fsfû˙t_t
;

44 
__uöt32_t
 
	t__gid_t
;

45 
__öt64_t
 
	t__id_t
;

46 
__uöt32_t
 
	t__öo_t
;

47 
	t__key_t
;

48 
__öt32_t
 
	t__lwpid_t
;

49 
__uöt16_t
 
	t__mode_t
;

50 
	t__accmode_t
;

51 
	t__∆_ôem
;

52 
__uöt16_t
 
	t__∆ök_t
;

53 
__öt64_t
 
	t__off_t
;

54 
__öt32_t
 
	t__pid_t
;

55 
__öt64_t
 
	t__æim_t
;

58 
__uöt8_t
 
	t__ß_Ámûy_t
;

59 
__uöt32_t
 
	t__sockÀn_t
;

60 
	t__su£c⁄ds_t
;

61 
__timî
 *
	t__timî_t
;

62 
__mq
 *
	t__mqd_t
;

63 
__uöt32_t
 
	t__uid_t
;

64 
	t__u£c⁄ds_t
;

65 
	t__˝uwhich_t
;

66 
	t__˝uÀvñ_t
;

67 
	t__˝u£tid_t
;

87 
	t__˘_ru√_t
;

88 
__˘_ru√_t
 
	t__ru√_t
;

89 
__˘_ru√_t
 
	t__wch¨_t
;

90 
__˘_ru√_t
 
	t__wöt_t
;

92 
__uöt32_t
 
	t__dev_t
;

94 
__uöt32_t
 
	t__fix±_t
;

101 
	m__mb°©e8
[128];

102 
__öt64_t
 
	m_mb°©eL
;

103 } 
	t__mb°©e_t
;

	@/usr/include/sys/cdefs.h

36 #i‚def 
_SYS_CDEFS_H_


37 
	#_SYS_CDEFS_H_


	)

39 #i‡
deföed
(
__˝lu•lus
)

40 
	#__BEGIN_DECLS
 "C" {

	)

41 
	#__END_DECLS
 }

	)

43 
	#__BEGIN_DECLS


	)

44 
	#__END_DECLS


	)

53 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__INTEL_COMPILER
)

55 #i‡
__GNUC__
 >3 || 
deföed
(
__INTEL_COMPILER
)

56 
	#__GNUCLIKE_ASM
 3

	)

57 
	#__GNUCLIKE_MATH_BUILTIN_CONSTANTS


	)

59 
	#__GNUCLIKE_ASM
 2

	)

61 
	#__GNUCLIKE___TYPEOF
 1

	)

62 
	#__GNUCLIKE___OFFSETOF
 1

	)

63 
	#__GNUCLIKE___SECTION
 1

	)

65 
	#__GNUCLIKE_ATTRIBUTE_MODE_DI
 1

	)

67 #i‚de‡
__INTEL_COMPILER


68 
	#__GNUCLIKE_CTOR_SECTION_HANDLING
 1

	)

71 
	#__GNUCLIKE_BUILTIN_CONSTANT_P
 1

	)

72 #i‡
deföed
(
__INTEL_COMPILER
Ë&& deföed(
__˝lu•lus
) \

73 && 
__INTEL_COMPILER
 < 800

74 #unde‡
__GNUCLIKE_BUILTIN_CONSTANT_P


77 #i‡(
__GNUC_MINOR__
 > 95 || 
__GNUC__
 >3Ë&& !
deföed
(
__INTEL_COMPILER
)

78 
	#__GNUCLIKE_BUILTIN_VARARGS
 1

	)

79 
	#__GNUCLIKE_BUILTIN_STDARG
 1

	)

80 
	#__GNUCLIKE_BUILTIN_VAALIST
 1

	)

83 #i‡
deföed
(
__GNUC__
)

84 
	#__GNUC_VA_LIST_COMPATIBILITY
 1

	)

87 #i‚de‡
__INTEL_COMPILER


88 
	#__GNUCLIKE_BUILTIN_NEXT_ARG
 1

	)

89 
	#__GNUCLIKE_MATH_BUILTIN_RELOPS


	)

92 
	#__GNUCLIKE_BUILTIN_MEMCPY
 1

	)

95 
	#__CC_SUPPORTS_INLINE
 1

	)

96 
	#__CC_SUPPORTS___INLINE
 1

	)

97 
	#__CC_SUPPORTS___INLINE__
 1

	)

99 
	#__CC_SUPPORTS___FUNC__
 1

	)

100 
	#__CC_SUPPORTS_WARNING
 1

	)

102 
	#__CC_SUPPORTS_VARADIC_XXX
 1

	)

104 
	#__CC_SUPPORTS_DYNAMIC_ARRAY_INIT
 1

	)

111 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__INTEL_COMPILER
)

112 
	#__GNUC_PREREQ__
(
ma
, 
mi
) \

113 (
__GNUC__
 > (
ma
Ë|| __GNUC__ =(maË&& 
__GNUC_MINOR__
 >(
mi
))

	)

115 
	#__GNUC_PREREQ__
(
ma
, 
mi
Ë0

	)

130 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

131 
	#__P
(
¥Ÿos
Ë¥Ÿo†

	)

132 
	#__CONCAT1
(
x
,
y
Ëx ## 
	)
y

133 
	#__CONCAT
(
x
,
y
Ë
	`__CONCAT1
(x,y)

	)

134 
	#__STRING
(
x
Ë#x

	)

135 
	#__XSTRING
(
x
Ë
	`__STRING
(xË

	)

137 
	#__c⁄°
 c⁄°

	)

138 
	#__sig√d
 sig√d

	)

139 
	#__vﬁ©ûe
 vﬁ©ûe

	)

140 #i‡
deföed
(
__˝lu•lus
)

141 
	#__ölöe
 
ölöe


	)

143 #i‡!(
deföed
(
__CC_SUPPORTS___INLINE
))

144 
	#__ölöe


	)

149 
	#__P
(
¥Ÿos
Ë(Ë

	)

150 
	#__CONCAT
(
x
,
y
Ëx 
	)
y

151 
	#__STRING
(
x
Ë"x"

	)

153 #i‡!
deföed
(
__CC_SUPPORTS___INLINE
)

154 
	#__c⁄°


	)

155 
	#__ölöe


	)

156 
	#__sig√d


	)

157 
	#__vﬁ©ûe


	)

166 #i‚def 
NO_ANSI_KEYWORDS


167 c⁄°

	)

168 
	#ölöe


	)

169 sig√d

	)

170 vﬁ©ûe

	)

184 #ifde‡
löt


185 
	#__dód2


	)

186 
	#__puª2


	)

187 
	#__unu£d


	)

188 
	#__∑cked


	)

189 
	#__Æig√d
(
x
)

	)

190 
	#__£˘i⁄
(
x
)

	)

192 #i‡!
__GNUC_PREREQ__
(2, 5Ë&& !
deföed
(
__INTEL_COMPILER
)

193 
	#__dód2


	)

194 
	#__puª2


	)

195 
	#__unu£d


	)

197 #i‡
__GNUC__
 =2 && 
__GNUC_MINOR__
 >5 && __GNUC_MINOR__ < 7 && !
deföed
(
__INTEL_COMPILER
)

198 
	#__dód2
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

199 
	#__puª2
 
	`__©åibuã__
((
__c⁄°__
))

	)

200 
	#__unu£d


	)

203 #i‡
__GNUC_PREREQ__
(2, 7)

204 
	#__dód2
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

205 
	#__puª2
 
	`__©åibuã__
((
__c⁄°__
))

	)

206 
	#__unu£d
 
	`__©åibuã__
((
__unu£d__
))

	)

207 
	#__u£d
 
	`__©åibuã__
((
__u£d__
))

	)

208 
	#__∑cked
 
	`__©åibuã__
((
__∑cked__
))

	)

209 
	#__Æig√d
(
x
Ë
	`__©åibuã__
((
	`__Æig√d__
(x)))

	)

210 
	#__£˘i⁄
(
x
Ë
	`__©åibuã__
((
	`__£˘i⁄__
(x)))

	)

212 #i‡
deföed
(
__INTEL_COMPILER
)

213 
	#__dód2
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

214 
	#__puª2
 
	`__©åibuã__
((
__c⁄°__
))

	)

215 
	#__unu£d
 
	`__©åibuã__
((
__unu£d__
))

	)

216 
	#__u£d
 
	`__©åibuã__
((
__u£d__
))

	)

217 
	#__∑cked
 
	`__©åibuã__
((
__∑cked__
))

	)

218 
	#__Æig√d
(
x
Ë
	`__©åibuã__
((
	`__Æig√d__
(x)))

	)

219 
	#__£˘i⁄
(
x
Ë
	`__©åibuã__
((
	`__£˘i⁄__
(x)))

	)

223 #i‡
__GNUC_PREREQ__
(2, 96)

224 
	#__mÆloc_like
 
	`__©åibuã__
((
__mÆloc__
))

	)

225 
	#__puª
 
	`__©åibuã__
((
__puª__
))

	)

227 
	#__mÆloc_like


	)

228 
	#__puª


	)

231 #i‡
__GNUC_PREREQ__
(3, 1Ë|| (
deföed
(
__INTEL_COMPILER
) && __INTEL_COMPILER >= 800)

232 
	#__Æways_ölöe
 
	`__©åibuã__
((
__Æways_ölöe__
))

	)

234 
	#__Æways_ölöe


	)

237 #i‡
__GNUC_PREREQ__
(4, 2)

238 
	#__gnu89_ölöe
 
	`__©åibuã__
((
__gnu_ölöe__
)Ë
__ölöe


	)

240 
	#__gnu89_ölöe


	)

243 #i‡
__GNUC_PREREQ__
(3, 1)

244 
	#__noölöe
 
	`__©åibuã__
 ((
__noölöe__
))

	)

246 
	#__noölöe


	)

249 #i‡
__GNUC_PREREQ__
(3, 3)

250 
	#__n⁄nuŒ
(
x
Ë
	`__©åibuã__
((
	`__n⁄nuŒ__
(x)))

	)

252 
	#__n⁄nuŒ
(
x
)

	)

256 #i‡!
__GNUC_PREREQ__
(2, 7Ë&& !
deföed
(
__INTEL_COMPILER
)

257 
	#__func__
 
NULL


	)

260 #i‡(
deföed
(
__INTEL_COMPILER
Ë|| (deföed(
__GNUC__
Ë&& __GNUC__ >2)Ë&& !deföed(
__STRICT_ANSI__
Ë|| 
__STDC_VERSION__
 >= 199901

261 
	#__LONG_LONG_SUPPORTED


	)

270 #i‡!(
__GNUC__
 =2 && 
__GNUC_MINOR__
 == 95)

271 #i‡!
deföed
(
__STDC_VERSION__
Ë|| __STDC_VERSION__ < 199901 || deföed(
löt
)

272 
	#__ª°ri˘


	)

274 
	#__ª°ri˘
 
ª°ri˘


	)

306 #i‡
__GNUC_PREREQ__
(2, 96)

307 
	#__¥edi˘_åue
(
exp
Ë
	`__buûtö_ex≥˘
(”xp), 1)

	)

308 
	#__¥edi˘_Ál£
(
exp
Ë
	`__buûtö_ex≥˘
(”xp), 0)

	)

310 
	#__¥edi˘_åue
(
exp
Ë”xp)

	)

311 
	#__¥edi˘_Ál£
(
exp
Ë”xp)

	)

314 #i‡
__GNUC_PREREQ__
(4, 2)

315 
	#__hiddí
 
	`__©åibuã__
((
	`__visibûôy__
("hiddí")))

	)

316 
	#__exp‹ãd
 
	`__©åibuã__
((
	`__visibûôy__
("deÁu…")))

	)

318 
	#__hiddí


	)

319 
	#__exp‹ãd


	)

326 #i‡
__GNUC_PREREQ__
(4, 1)

327 
	#__off£tof
(
ty≥
, 
fõld
Ë
	`__buûtö_off£tof
—y≥, fõld)

	)

329 #i‚de‡
__˝lu•lus


330 
	#__off£tof
(
ty≥
, 
fõld
Ë((
size_t
)(&(—y≥ *)0)->fõld))

	)

332 
	#__off£tof
(
ty≥
, 
fõld
) \

333 (
	`__off£tof__
 (
ªöãΩªt_ˇ°
 <
size_t
> \

334 (&
ªöãΩªt_ˇ°
 <const volatile &> \

335 (
°©ic_ˇ°
<
ty≥
 *> (0)->
fõld
))))

	)

338 
	#__øngeof
(
ty≥
, 
°¨t
, 
íd
) \

339 (
	`__off£tof
(
ty≥
, 
íd
Ë- __off£tof—y≥, 
°¨t
))

	)

347 #i‡!
__GNUC_PREREQ__
(2, 7Ë&& !
deföed
(
__INTEL_COMPILER
)

348 
	#__¥ötÊike
(
fmèrg
, 
fú°v¨¨g
)

	)

349 
	#__sˇnÊike
(
fmèrg
, 
fú°v¨¨g
)

	)

350 
	#__f‹m©_¨g
(
fmèrg
)

	)

352 
	#__¥ötÊike
(
fmèrg
, 
fú°v¨¨g
) \

353 
	`__©åibuã__
((
	`__f‹m©__
 (
__¥ötf__
, 
fmèrg
, 
fú°v¨¨g
)))

	)

354 
	#__sˇnÊike
(
fmèrg
, 
fú°v¨¨g
) \

355 
	`__©åibuã__
((
	`__f‹m©__
 (
__sˇnf__
, 
fmèrg
, 
fú°v¨¨g
)))

	)

356 
	#__f‹m©_¨g
(
fmèrg
Ë
	`__©åibuã__
((
	`__f‹m©_¨g__
 (fmèrg)))

	)

360 #i‡
__FªeBSD_cc_vîsi⁄
 >300001 && 
deföed
(
__GNUC__
Ë&& !deföed(
__INTEL_COMPILER
)

361 
	#__¥ötf0like
(
fmèrg
, 
fú°v¨¨g
) \

362 
	`__©åibuã__
((
	`__f‹m©__
 (
__¥ötf0__
, 
fmèrg
, 
fú°v¨¨g
)))

	)

364 
	#__¥ötf0like
(
fmèrg
, 
fú°v¨¨g
)

	)

367 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__INTEL_COMPILER
)

368 #i‚de‡
__INTEL_COMPILER


369 
	#__°r⁄g_ª„ªn˚
(
sym
,
Æüssym
) \

370 
	`__ty≥of
 (
sym
Ë
Æüssym
 
	`__©åibuã__
 ((
	`__Æüs__
 (#sym)))

	)

372 #ifde‡
__STDC__


373 
	#__wók_ª„ªn˚
(
sym
,
Æüs
) \

374 
	`__asm__
(".weak " #alias); \

375 
	`__asm__
(".equ " #Æü†", " #sym)

	)

376 
	#__w¨n_ª„ªn˚s
(
sym
,
msg
) \

377 
	`__asm__
(".section .gnu.warning." #sym); \

378 
	`__asm__
(".asciz \"" 
msg
 "\""); \

379 
	`__asm__
(".¥evious")

	)

380 
	#__sym_com∑t
(
sym
,
im∂
,
vîid
) \

381 
	`__asm__
(".symvî " #im∂ ", " #sym "@" #vîid)

	)

382 
	#__sym_deÁu…
(
sym
,
im∂
,
vîid
) \

383 
	`__asm__
(".symvî " #im∂ ", " #sym "@@" #vîid)

	)

385 
	#__wók_ª„ªn˚
(
sym
,
Æüs
) \

386 
	`__asm__
(".weakálias"); \

387 
	`__asm__
(".equálüs, sym")

	)

388 
	#__w¨n_ª„ªn˚s
(
sym
,
msg
) \

389 
	`__asm__
(".section .gnu.warning.sym"); \

390 
	`__asm__
(".asciz \"msg\""); \

391 
	`__asm__
(".¥evious")

	)

392 
	#__sym_com∑t
(
sym
,
im∂
,
vîid
) \

393 
	`__asm__
(".symvî im∂, sym@vîid")

	)

394 
	#__sym_deÁu…
(
im∂
,
sym
,
vîid
) \

395 
	`__asm__
(".symvî im∂, sym@@vîid")

	)

399 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__INTEL_COMPILER
)

400 
	#__IDSTRING
(
«me
,
°rög
Ë
	`__asm__
(".idít\t\"" såög "\"")

	)

408 
	#__IDSTRING
(
«me
,
°rög
Ëc⁄° «me[] 
__unu£d
 = 
	)
string

417 #i‚def 
__FBSDID


418 #i‡!
deföed
(
löt
Ë&& !deföed(
STRIP_FBSDID
)

419 
	#__FBSDID
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__rcsid_
,
__LINE__
),s)

	)

421 
	#__FBSDID
(
s
Ë
__hack


	)

425 #i‚def 
__RCSID


426 #i‚def 
NO__RCSID


427 
	#__RCSID
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__rcsid_
,
__LINE__
),s)

	)

429 
	#__RCSID
(
s
Ë
__hack


	)

433 #i‚def 
__RCSID_SOURCE


434 #i‚def 
NO__RCSID_SOURCE


435 
	#__RCSID_SOURCE
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__rcsid_sour˚_
,
__LINE__
),s)

	)

437 
	#__RCSID_SOURCE
(
s
Ë
__hack


	)

441 #i‚def 
__SCCSID


442 #i‚def 
NO__SCCSID


443 
	#__SCCSID
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__sccsid_
,
__LINE__
),s)

	)

445 
	#__SCCSID
(
s
Ë
__hack


	)

449 #i‚def 
__COPYRIGHT


450 #i‚def 
NO__COPYRIGHT


451 
	#__COPYRIGHT
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__c›yright_
,
__LINE__
),s)

	)

453 
	#__COPYRIGHT
(
s
Ë
__hack


	)

457 #i‚def 
__DECONST


458 
	#__DECONST
(
ty≥
, 
v¨
Ë(—y≥)(
uöçå_t
)(c⁄° *)(v¨))

	)

461 #i‚def 
__DEVOLATILE


462 
	#__DEVOLATILE
(
ty≥
, 
v¨
Ë(—y≥)(
uöçå_t
)(vﬁ©ûê*)(v¨))

	)

465 #i‚def 
__DEQUALIFY


466 
	#__DEQUALIFY
(
ty≥
, 
v¨
Ë(—y≥)(
uöçå_t
)(c⁄° vﬁ©ûê*)(v¨))

	)

493 #i‡
deföed
(
_POSIX_C_SOURCE
) && _POSIX_C_SOURCE == 1

494 #unde‡
_POSIX_C_SOURCE


495 
	#_POSIX_C_SOURCE
 199009

	)

499 #i‡
deföed
(
_POSIX_C_SOURCE
) && _POSIX_C_SOURCE == 2

500 #unde‡
_POSIX_C_SOURCE


501 
	#_POSIX_C_SOURCE
 199209

	)

505 #ifde‡
_XOPEN_SOURCE


506 #i‡
_XOPEN_SOURCE
 - 0 >= 700

507 
	#__XSI_VISIBLE
 700

	)

508 #unde‡
_POSIX_C_SOURCE


509 
	#_POSIX_C_SOURCE
 200809

	)

510 #ñi‡
_XOPEN_SOURCE
 - 0 >= 600

511 
	#__XSI_VISIBLE
 600

	)

512 #unde‡
_POSIX_C_SOURCE


513 
	#_POSIX_C_SOURCE
 200112

	)

514 #ñi‡
_XOPEN_SOURCE
 - 0 >= 500

515 
	#__XSI_VISIBLE
 500

	)

516 #unde‡
_POSIX_C_SOURCE


517 
	#_POSIX_C_SOURCE
 199506

	)

525 #i‡
deföed
(
_POSIX_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
)

526 
	#_POSIX_C_SOURCE
 198808

	)

528 #ifde‡
_POSIX_C_SOURCE


529 #i‡
_POSIX_C_SOURCE
 >= 200809

530 
	#__POSIX_VISIBLE
 200809

	)

531 
	#__ISO_C_VISIBLE
 1999

	)

532 #ñi‡
_POSIX_C_SOURCE
 >= 200112

533 
	#__POSIX_VISIBLE
 200112

	)

534 
	#__ISO_C_VISIBLE
 1999

	)

535 #ñi‡
_POSIX_C_SOURCE
 >= 199506

536 
	#__POSIX_VISIBLE
 199506

	)

537 
	#__ISO_C_VISIBLE
 1990

	)

538 #ñi‡
_POSIX_C_SOURCE
 >= 199309

539 
	#__POSIX_VISIBLE
 199309

	)

540 
	#__ISO_C_VISIBLE
 1990

	)

541 #ñi‡
_POSIX_C_SOURCE
 >= 199209

542 
	#__POSIX_VISIBLE
 199209

	)

543 
	#__ISO_C_VISIBLE
 1990

	)

544 #ñi‡
_POSIX_C_SOURCE
 >= 199009

545 
	#__POSIX_VISIBLE
 199009

	)

546 
	#__ISO_C_VISIBLE
 1990

	)

548 
	#__POSIX_VISIBLE
 198808

	)

549 
	#__ISO_C_VISIBLE
 0

	)

564 #i‡
deföed
(
_ANSI_SOURCE
)

565 
	#__POSIX_VISIBLE
 0

	)

566 
	#__XSI_VISIBLE
 0

	)

567 
	#__BSD_VISIBLE
 0

	)

568 
	#__ISO_C_VISIBLE
 1990

	)

569 #ñi‡
deföed
(
_C99_SOURCE
)

570 
	#__POSIX_VISIBLE
 0

	)

571 
	#__XSI_VISIBLE
 0

	)

572 
	#__BSD_VISIBLE
 0

	)

573 
	#__ISO_C_VISIBLE
 1999

	)

575 
	#__POSIX_VISIBLE
 200809

	)

576 
	#__XSI_VISIBLE
 700

	)

577 
	#__BSD_VISIBLE
 1

	)

578 
	#__ISO_C_VISIBLE
 1999

	)

	@/usr/include/sys/fcntl.h

38 #i‚de‡
_SYS_FCNTL_H_


39 
	#_SYS_FCNTL_H_


	)

47 
	~<sys/cdefs.h
>

48 
	~<sys/_ty≥s.h
>

50 #i‚de‡
_MODE_T_DECLARED


51 
__mode_t
 
	tmode_t
;

52 
	#_MODE_T_DECLARED


	)

55 #i‚de‡
_OFF_T_DECLARED


56 
__off_t
 
	toff_t
;

57 
	#_OFF_T_DECLARED


	)

60 #i‚de‡
_PID_T_DECLARED


61 
__pid_t
 
	tpid_t
;

62 
	#_PID_T_DECLARED


	)

73 
	#O_RDONLY
 0x0000

	)

74 
	#O_WRONLY
 0x0001

	)

75 
	#O_RDWR
 0x0002

	)

76 
	#O_ACCMODE
 0x0003

	)

86 #i‡
__BSD_VISIBLE


87 
	#FREAD
 0x0001

	)

88 
	#FWRITE
 0x0002

	)

90 
	#O_NONBLOCK
 0x0004

	)

91 
	#O_APPEND
 0x0008

	)

92 #i‡
__BSD_VISIBLE


93 
	#O_SHLOCK
 0x0010

	)

94 
	#O_EXLOCK
 0x0020

	)

95 
	#O_ASYNC
 0x0040

	)

96 
	#O_FSYNC
 0x0080

	)

98 
	#O_SYNC
 0x0080

	)

99 #i‡
__BSD_VISIBLE


100 
	#O_NOFOLLOW
 0x0100

	)

102 
	#O_CREAT
 0x0200

	)

103 
	#O_TRUNC
 0x0400

	)

104 
	#O_EXCL
 0x0800

	)

105 #ifde‡
_KERNEL


106 
	#FHASLOCK
 0x4000

	)

110 
	#O_NOCTTY
 0x8000

	)

112 #i‡
__BSD_VISIBLE


114 
	#O_DIRECT
 0x00010000

	)

118 #i‡
__BSD_VISIBLE


119 
	#O_DIRECTORY
 0x00020000

	)

120 
	#O_EXEC
 0x00040000

	)

122 #ifdef 
_KERNEL


123 
	#FEXEC
 
O_EXEC


	)

126 #i‡
__POSIX_VISIBLE
 >= 200809

128 
	#O_TTY_INIT
 0x00080000

	)

130 
	#O_CLOEXEC
 0x00100000

	)

137 #ifde‡
_KERNEL


139 
	#FFLAGS
(
oÊags
Ë((oÊagsË+ 1)

	)

140 
	#OFLAGS
(
fÊags
Ë((fÊagsË- 1)

	)

143 
	#FMASK
 (
FREAD
|
FWRITE
|
FAPPEND
|
FASYNC
|
FFSYNC
|
FNONBLOCK
|
O_DIRECT
|
FEXEC
)

	)

145 
	#FCNTLFLAGS
 (
FAPPEND
|
FASYNC
|
FFSYNC
|
FNONBLOCK
|
FRDAHEAD
|
O_DIRECT
)

	)

147 #i‡
deföed
(
COMPAT_FREEBSD7
Ë|| deföed(
COMPAT_FREEBSD6
) || \

148 
deföed
(
COMPAT_FREEBSD5
Ë|| 
	$deföed
(
COMPAT_FREEBSD4
)

154 
	#FPOSIXSHM
 
O_NOFOLLOW


	)

155 #unde‡
FCNTLFLAGS


156 
	#FCNTLFLAGS
 (
FAPPEND
|
FASYNC
|
FFSYNC
|
FNONBLOCK
|
FPOSIXSHM
|
FRDAHEAD
| \

157 
O_DIRECT
)

	)

166 #i‡
__BSD_VISIBLE


167 
	#FAPPEND
 
O_APPEND


	)

168 
	#FASYNC
 
O_ASYNC


	)

169 
	#FFSYNC
 
O_FSYNC


	)

170 
	#FNONBLOCK
 
O_NONBLOCK


	)

171 
	#FNDELAY
 
O_NONBLOCK


	)

172 
	#O_NDELAY
 
O_NONBLOCK


	)

181 #i‡
__BSD_VISIBLE


183 
	#FRDAHEAD
 
O_CREAT


	)

187 #i‡
__BSD_VISIBLE


193 
	#AT_FDCWD
 -100

	)

198 
	#AT_EACCESS
 0x100

	)

199 
	#AT_SYMLINK_NOFOLLOW
 0x200

	)

200 
	#AT_SYMLINK_FOLLOW
 0x400

	)

201 
	#AT_REMOVEDIR
 0x800

	)

209 
	#F_DUPFD
 0

	)

210 
	#F_GETFD
 1

	)

211 
	#F_SETFD
 2

	)

212 
	#F_GETFL
 3

	)

213 
	#F_SETFL
 4

	)

214 #i‡
__BSD_VISIBLE
 || 
__XSI_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200112

215 
	#F_GETOWN
 5

	)

216 
	#F_SETOWN
 6

	)

218 
	#F_OGETLK
 7

	)

219 
	#F_OSETLK
 8

	)

220 
	#F_OSETLKW
 9

	)

221 
	#F_DUP2FD
 10

	)

222 
	#F_GETLK
 11

	)

223 
	#F_SETLK
 12

	)

224 
	#F_SETLKW
 13

	)

225 
	#F_SETLK_REMOTE
 14

	)

226 
	#F_READAHEAD
 15

	)

227 
	#F_RDAHEAD
 16

	)

228 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200809

229 
	#F_DUPFD_CLOEXEC
 17

	)

231 #i‡
__BSD_VISIBLE


232 
	#F_DUP2FD_CLOEXEC
 18

	)

236 
	#FD_CLOEXEC
 1

	)

239 
	#F_RDLCK
 1

	)

240 
	#F_UNLCK
 2

	)

241 
	#F_WRLCK
 3

	)

242 
	#F_UNLCKSYS
 4

	)

243 
	#F_CANCEL
 5

	)

244 #ifde‡
_KERNEL


245 
	#F_WAIT
 0x010

	)

246 
	#F_FLOCK
 0x020

	)

247 
	#F_POSIX
 0x040

	)

248 
	#F_REMOTE
 0x080

	)

249 
	#F_NOINTR
 0x100

	)

256 
	sÊock
 {

257 
off_t
 
l_°¨t
;

258 
off_t
 
l_Àn
;

259 
pid_t
 
l_pid
;

260 
l_ty≥
;

261 
l_whí˚
;

262 
l_sysid
;

269 
	soÊock
 {

270 
off_t
 
l_°¨t
;

271 
off_t
 
l_Àn
;

272 
pid_t
 
l_pid
;

273 
l_ty≥
;

274 
l_whí˚
;

278 #i‡
__BSD_VISIBLE


280 
	#LOCK_SH
 0x01

	)

281 
	#LOCK_EX
 0x02

	)

282 
	#LOCK_NB
 0x04

	)

283 
	#LOCK_UN
 0x08

	)

286 #i‡
__POSIX_VISIBLE
 >= 200112

290 
	#POSIX_FADV_NORMAL
 0

	)

291 
	#POSIX_FADV_RANDOM
 1

	)

292 
	#POSIX_FADV_SEQUENTIAL
 2

	)

293 
	#POSIX_FADV_WILLNEED
 3

	)

294 
	#POSIX_FADV_DONTNEED
 4

	)

295 
	#POSIX_FADV_NOREUSE
 5

	)

298 #i‚de‡
_KERNEL


299 
__BEGIN_DECLS


300 
	`›í
(const *, , ...);

301 
	`¸ót
(c⁄° *, 
mode_t
);

302 
	`f˙é
(, , ...);

303 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200809

304 
	`›í©
(, const *, , ...);

306 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200112

307 
	`posix_Ádvi£
(, 
off_t
, off_t, );

308 
	`posix_ÁŒoˇã
(, 
off_t
, off_t);

310 #i‡
__BSD_VISIBLE


311 
	`Êock
(, );

313 
__END_DECLS


	@/usr/include/sys/filio.h

38 #i‚def 
_SYS_FILIO_H_


39 
	#_SYS_FILIO_H_


	)

41 
	~<sys/ioccom.h
>

44 
	#FIOCLEX
 
	`_IO
('f', 1Ë

	)

45 
	#FIONCLEX
 
	`_IO
('f', 2Ë

	)

46 
	#FIONREAD
 
	`_IOR
('f', 127, Ë

	)

47 
	#FIONBIO
 
	`_IOW
('f', 126, Ë

	)

48 
	#FIOASYNC
 
	`_IOW
('f', 125, Ë

	)

49 
	#FIOSETOWN
 
	`_IOW
('f', 124, Ë

	)

50 
	#FIOGETOWN
 
	`_IOR
('f', 123, Ë

	)

51 
	#FIODTYPE
 
	`_IOR
('f', 122, Ë

	)

52 
	#FIOGETLBA
 
	`_IOR
('f', 121, Ë

	)

53 
	sfiodg«me_¨g
 {

54 
	mÀn
;

55 *
	mbuf
;

57 
	#FIODGNAME
 
	`_IOW
('f', 120, 
fiodg«me_¨g
Ë

	)

58 
	#FIONWRITE
 
	`_IOR
('f', 119, Ë

	)

59 
	#FIONSPACE
 
	`_IOR
('f', 118, Ë

	)

61 
	#FIOSEEKDATA
 
	`_IOWR
('f', 97, 
off_t
Ë

	)

62 
	#FIOSEEKHOLE
 
	`_IOWR
('f', 98, 
off_t
Ë

	)

	@/usr/include/sys/ioctl.h

38 #i‚def 
_SYS_IOCTL_H_


39 
	#_SYS_IOCTL_H_


	)

41 #ifde‡
_KERNEL


45 
	~<sys/ioccom.h
>

47 
	~<sys/fûio.h
>

48 
	~<sys/sockio.h
>

49 
	~<sys/âycom.h
>

	@/usr/include/sys/param.h

38 #i‚de‡
_SYS_PARAM_H_


39 
	#_SYS_PARAM_H_


	)

41 
	~<sys/_nuŒ.h
>

43 
	#BSD
 199506

	)

44 
	#BSD4_3
 1

	)

45 
	#BSD4_4
 1

	)

60 #unde‡
__FªeBSD_vîsi⁄


61 
	#__FªeBSD_vîsi⁄
 804000

	)

76 #unde‡
__FªeBSD_kî√l__


77 
	#__FªeBSD_kî√l__


	)

79 #ifde‡
_KERNEL


80 
	#P_OSREL_SIGWAIT
 700000

	)

81 
	#P_OSREL_SIGSEGV
 700004

	)

82 
	#P_OSREL_MAP_ANON
 800104

	)

85 #i‚de‡
LOCORE


86 
	~<sys/ty≥s.h
>

96 
	~<sys/sy¶imôs.h
>

98 
	#MAXCOMLEN
 19

	)

99 
	#MAXINTERP
 32

	)

100 
	#MAXLOGNAME
 17

	)

101 
	#MAXUPRC
 
CHILD_MAX


	)

102 
	#NCARGS
 
ARG_MAX


	)

103 
	#NGROUPS
 (
NGROUPS_MAX
+1Ë

	)

104 
	#NOFILE
 
OPEN_MAX


	)

105 
	#NOGROUP
 65535

	)

106 
	#MAXHOSTNAMELEN
 256

	)

107 
	#SPECNAMELEN
 63

	)

110 #ifde‡
_KERNEL


111 
	~<sys/cdefs.h
>

112 
	~<sys/î∫o.h
>

113 #i‚de‡
LOCORE


114 
	~<sys/time.h
>

115 
	~<sys/¥i‹ôy.h
>

118 #i‚de‡
FALSE


119 
	#FALSE
 0

	)

121 #i‚de‡
TRUE


122 
	#TRUE
 1

	)

126 #i‚de‡
_KERNEL


128 
	~<sys/sig«l.h
>

132 
	~<machöe/∑øm.h
>

133 #i‚de‡
_KERNEL


134 
	~<sys/limôs.h
>

137 #i‚de‡
_NO_NAMESPACE_POLLUTION


139 #i‚de‡
DEV_BSHIFT


140 
	#DEV_BSHIFT
 9

	)

142 
	#DEV_BSIZE
 (1<<
DEV_BSHIFT
)

	)

144 #i‚de‡
BLKDEV_IOSIZE


145 
	#BLKDEV_IOSIZE
 
PAGE_SIZE


	)

147 #i‚de‡
DFLTPHYS


148 
	#DFLTPHYS
 (64 * 1024Ë

	)

150 #i‚de‡
MAXPHYS


151 
	#MAXPHYS
 (128 * 1024Ë

	)

153 #i‚de‡
MAXDUMPPGS


154 
	#MAXDUMPPGS
 (
DFLTPHYS
/
PAGE_SIZE
)

	)

161 #i‚def 
MSIZE


162 
	#MSIZE
 256

	)

165 #i‚def 
MCLSHIFT


166 
	#MCLSHIFT
 11

	)

169 
	#MCLBYTES
 (1 << 
MCLSHIFT
Ë

	)

171 
	#MJUMPAGESIZE
 
PAGE_SIZE


	)

172 
	#MJUM9BYTES
 (9 * 1024Ë

	)

173 
	#MJUM16BYTES
 (16 * 1024Ë

	)

180 #i‚de‡
˘ob


181 
	#˘ob
(
x
Ë((x)<<
PAGE_SHIFT
)

	)

185 #i‚de‡
btoc


186 
	#btoc
(
x
Ë(((
vm_off£t_t
)(x)+
PAGE_MASK
)>>
PAGE_SHIFT
)

	)

195 #i‚de‡
btodb


196 
	#btodb
(
byãs
) \

197 ( (
byãs
) > () \

198 ? (
daddr_t
)(()(
byãs
Ë>> 
DEV_BSHIFT
) \

199 : (
daddr_t
)(()(
byãs
Ë>> 
DEV_BSHIFT
))

	)

202 #i‚de‡
dbtob


203 
	#dbtob
(
db
) \

204 ((
off_t
)(
db
Ë<< 
DEV_BSHIFT
)

	)

209 
	#PRIMASK
 0x0ff

	)

210 
	#PCATCH
 0x100

	)

211 
	#PDROP
 0x200

	)

212 
	#PBDRY
 0x400

	)

214 
	#NZERO
 0

	)

216 
	#NBBY
 8

	)

217 
	#NBPW
 (Ë

	)

219 
	#CMASK
 022

	)

221 
	#NODEV
 (
dev_t
)(-1Ë

	)

246 
	#MAXBSIZE
 65536

	)

247 
	#BKVASIZE
 16384

	)

248 
	#BKVAMASK
 (
BKVASIZE
-1)

	)

259 
	#MAXPATHLEN
 
PATH_MAX


	)

260 
	#MAXSYMLINKS
 32

	)

263 
	#£tbô
(
a
,
i
Ë(((*)◊))[(i)/
NBBY
] |1<<((i)%NBBY))

	)

264 
	#˛rbô
(
a
,
i
Ë(((*)◊))[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

265 
	#is£t
(
a
,
i
) \

266 (((c⁄° *)(
a
))[(
i
)/
NBBY
] & (1<<((i)%NBBY)))

	)

267 
	#is˛r
(
a
,
i
) \

268 ((((c⁄° *)(
a
))[(
i
)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

271 #i‚de‡
howm™y


272 
	#howm™y
(
x
, 
y
Ë(((x)+((y)-1))/(y))

	)

274 
	#nôems
(
x
Ë(((x)Ë/ ((x)[0]))

	)

275 
	#rounddown
(
x
, 
y
Ë(((x)/(y))*(y))

	)

276 
	#roundup
(
x
, 
y
Ë((((x)+((y)-1))/(y))*(y)Ë

	)

277 
	#roundup2
(
x
, 
y
Ë(((x)+((y)-1))&(~((y)-1))Ë

	)

278 
	#powîof2
(
x
Ë((((x)-1)&(x))==0)

	)

281 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

282 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

284 #ifde‡
_KERNEL


288 #i‚de‡
LOCORE


289 #i‚de‡
_BYTEORDER_PROTOTYPED


290 
	#_BYTEORDER_PROTOTYPED


	)

291 
__BEGIN_DECLS


292 
__uöt32_t
 
ht⁄l
(__uint32_t);

293 
__uöt16_t
 
ht⁄s
(__uint16_t);

294 
__uöt32_t
 
¡ohl
(__uint32_t);

295 
__uöt16_t
 
¡ohs
(__uint16_t);

296 
	g__END_DECLS


300 #i‚de‡
löt


301 #i‚de‡
_BYTEORDER_FUNC_DEFINED


302 
	#_BYTEORDER_FUNC_DEFINED


	)

303 
	#ht⁄l
(
x
Ë
	`__ht⁄l
(x)

	)

304 
	#ht⁄s
(
x
Ë
	`__ht⁄s
(x)

	)

305 
	#¡ohl
(
x
Ë
	`__¡ohl
(x)

	)

306 
	#¡ohs
(
x
Ë
	`__¡ohs
(x)

	)

322 
	#FSHIFT
 11

	)

323 
	#FSCALE
 (1<<
FSHIFT
)

	)

325 
	#dbtoc
(
db
) \

326 ((
db
 + (
	`˘odb
(1Ë- 1)Ë>> (
PAGE_SHIFT
 - 
DEV_BSHIFT
))

	)

328 
	#˘odb
(
db
) \

329 ((
db
Ë<< (
PAGE_SHIFT
 - 
DEV_BSHIFT
))

	)

335 
	#membî2°ru˘
(
s
, 
m
, 
x
) \

336 ((
s
 *)(*)((*)(
x
Ë- 
	`off£tof
(s, 
m
)))

	)

	@/usr/include/sys/queue.h

33 #i‚de‡
_SYS_QUEUE_H_


34 
	#_SYS_QUEUE_H_


	)

36 
	~<sys/cdefs.h
>

105 #ifde‡
QUEUE_MACRO_DEBUG


107 
	sqm_åa˚
 {

108 * 
	mœ°fûe
;

109 
	mœ°löe
;

110 * 
	m¥evfûe
;

111 
	m¥evlöe
;

114 
	#TRACEBUF
 
qm_åa˚
 
åa˚
;

	)

115 
	#TRASHIT
(
x
Ëdÿ{(xË(*)-1;} 0)

	)

116 
	#QMD_SAVELINK
(
«me
, 
lök
Ë**«mê(*)&÷ök)

	)

118 
	#QMD_TRACE_HEAD
(
hód
) do { \

119 (
hód
)->
åa˚
.
¥evlöe
 = (hód)->åa˚.
œ°löe
; \

120 (
hód
)->
åa˚
.
¥evfûe
 = (hód)->åa˚.
œ°fûe
; \

121 (
hód
)->
åa˚
.
œ°löe
 = 
__LINE__
; \

122 (
hód
)->
åa˚
.
œ°fûe
 = 
__FILE__
; \

123 } 0)

	)

125 
	#QMD_TRACE_ELEM
(
ñem
) do { \

126 (
ñem
)->
åa˚
.
¥evlöe
 = (ñem)->åa˚.
œ°löe
; \

127 (
ñem
)->
åa˚
.
¥evfûe
 = (ñem)->åa˚.
œ°fûe
; \

128 (
ñem
)->
åa˚
.
œ°löe
 = 
__LINE__
; \

129 (
ñem
)->
åa˚
.
œ°fûe
 = 
__FILE__
; \

130 } 0)

	)

133 
	#QMD_TRACE_ELEM
(
ñem
)

	)

134 
	#QMD_TRACE_HEAD
(
hód
)

	)

135 
	#QMD_SAVELINK
(
«me
, 
lök
)

	)

136 
	#TRACEBUF


	)

137 
	#TRASHIT
(
x
)

	)

143 
	#SLIST_HEAD
(
«me
, 
ty≥
) \

144 
	s«me
 { \

145 
ty≥
 *
¶h_fú°
; \

146 }

	)

148 
	#SLIST_HEAD_INITIALIZER
(
hód
) \

149 { 
NULL
 }

	)

151 
	#SLIST_ENTRY
(
ty≥
) \

153 
ty≥
 *
¶e_√xt
; \

154 }

	)

159 
	#SLIST_EMPTY
(
hód
Ë((hód)->
¶h_fú°
 =
NULL
)

	)

161 
	#SLIST_FIRST
(
hód
Ë((hód)->
¶h_fú°
)

	)

163 
	#SLIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

164 (
v¨
Ë
	`SLIST_FIRST
((
hód
)); \

165 (
v¨
); \

166 (
v¨
Ë
	`SLIST_NEXT
((v¨), 
fõld
))

	)

168 
	#SLIST_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

169 (
v¨
Ë
	`SLIST_FIRST
((
hód
)); \

170 (
v¨
Ë&& ((
tv¨
Ë
	`SLIST_NEXT
((v¨), 
fõld
), 1); \

171 (
v¨
Ë(
tv¨
))

	)

173 
	#SLIST_FOREACH_PREVPTR
(
v¨
, 
v¨p
, 
hód
, 
fõld
) \

174 (
v¨p
Ë&
	`SLIST_FIRST
((
hód
)); \

175 ((
v¨
Ë*(
v¨p
)Ë!
NULL
; \

176 (
v¨p
Ë&
	`SLIST_NEXT
((
v¨
), 
fõld
))

	)

178 
	#SLIST_INIT
(
hód
) do { \

179 
	`SLIST_FIRST
((
hód
)Ë
NULL
; \

180 } 0)

	)

182 
	#SLIST_INSERT_AFTER
(
¶i°ñm
, 
ñm
, 
fõld
) do { \

183 
	`SLIST_NEXT
((
ñm
), 
fõld
ËSLIST_NEXT((
¶i°ñm
), field); \

184 
	`SLIST_NEXT
((
¶i°ñm
), 
fõld
Ë(
ñm
); \

185 } 0)

	)

187 
	#SLIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

188 
	`SLIST_NEXT
((
ñm
), 
fõld
Ë
	`SLIST_FIRST
((
hód
)); \

189 
	`SLIST_FIRST
((
hód
)Ë(
ñm
); \

190 } 0)

	)

192 
	#SLIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
¶e_√xt
)

	)

194 
	#SLIST_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

195 
	`QMD_SAVELINK
(
ﬁd√xt
, (
ñm
)->
fõld
.
¶e_√xt
); \

196 i‡(
	`SLIST_FIRST
((
hód
)Ë=(
ñm
)) { \

197 
	`SLIST_REMOVE_HEAD
((
hód
), 
fõld
); \

200 
ty≥
 *
cuªlm
 = 
	`SLIST_FIRST
((
hód
)); \

201 
	`SLIST_NEXT
(
cuªlm
, 
fõld
Ë!(
ñm
)) \

202 
cuªlm
 = 
	`SLIST_NEXT
(cuªlm, 
fõld
); \

203 
	`SLIST_REMOVE_AFTER
(
cuªlm
, 
fõld
); \

205 
	`TRASHIT
(*
ﬁd√xt
); \

206 } 0)

	)

208 
	#SLIST_REMOVE_AFTER
(
ñm
, 
fõld
) do { \

209 
	`SLIST_NEXT
(
ñm
, 
fõld
) = \

210 
	`SLIST_NEXT
(SLIST_NEXT(
ñm
, 
fõld
), field); \

211 } 0)

	)

213 
	#SLIST_REMOVE_HEAD
(
hód
, 
fõld
) do { \

214 
	`SLIST_FIRST
((
hód
)Ë
	`SLIST_NEXT
(SLIST_FIRST((hód)), 
fõld
); \

215 } 0)

	)

217 
	#SLIST_SWAP
(
hód1
, 
hód2
, 
ty≥
) do { \

218 
ty≥
 *
sw≠_fú°
 = 
	`SLIST_FIRST
(
hód1
); \

219 
	`SLIST_FIRST
(
hód1
ËSLIST_FIRST(
hód2
); \

220 
	`SLIST_FIRST
(
hód2
Ë
sw≠_fú°
; \

221 } 0)

	)

226 
	#STAILQ_HEAD
(
«me
, 
ty≥
) \

227 
	s«me
 { \

228 
ty≥
 *
°qh_fú°
; \

229 
ty≥
 **
°qh_œ°
; \

230 }

	)

232 
	#STAILQ_HEAD_INITIALIZER
(
hód
) \

233 { 
NULL
, &(
hód
).
°qh_fú°
 }

	)

235 
	#STAILQ_ENTRY
(
ty≥
) \

237 
ty≥
 *
°qe_√xt
; \

238 }

	)

243 
	#STAILQ_CONCAT
(
hód1
, 
hód2
) do { \

244 i‡(!
	`STAILQ_EMPTY
((
hód2
))) { \

245 *(
hód1
)->
°qh_œ°
 = (
hód2
)->
°qh_fú°
; \

246 (
hód1
)->
°qh_œ°
 = (
hód2
)->stqh_last; \

247 
	`STAILQ_INIT
((
hód2
)); \

249 } 0)

	)

251 
	#STAILQ_EMPTY
(
hód
Ë((hód)->
°qh_fú°
 =
NULL
)

	)

253 
	#STAILQ_FIRST
(
hód
Ë((hód)->
°qh_fú°
)

	)

255 
	#STAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

256 (
v¨
Ë
	`STAILQ_FIRST
((
hód
)); \

257 (
v¨
); \

258 (
v¨
Ë
	`STAILQ_NEXT
((v¨), 
fõld
))

	)

261 
	#STAILQ_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

262 (
v¨
Ë
	`STAILQ_FIRST
((
hód
)); \

263 (
v¨
Ë&& ((
tv¨
Ë
	`STAILQ_NEXT
((v¨), 
fõld
), 1); \

264 (
v¨
Ë(
tv¨
))

	)

266 
	#STAILQ_INIT
(
hód
) do { \

267 
	`STAILQ_FIRST
((
hód
)Ë
NULL
; \

268 (
hód
)->
°qh_œ°
 = &
	`STAILQ_FIRST
((head)); \

269 } 0)

	)

271 
	#STAILQ_INSERT_AFTER
(
hód
, 
tqñm
, 
ñm
, 
fõld
) do { \

272 i‡((
	`STAILQ_NEXT
((
ñm
), 
fõld
ËSTAILQ_NEXT((
tqñm
), fõld)Ë=
NULL
)\

273 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

274 
	`STAILQ_NEXT
((
tqñm
), 
fõld
Ë(
ñm
); \

275 } 0)

	)

277 
	#STAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

278 i‡((
	`STAILQ_NEXT
((
ñm
), 
fõld
Ë
	`STAILQ_FIRST
((
hód
))Ë=
NULL
) \

279 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

280 
	`STAILQ_FIRST
((
hód
)Ë(
ñm
); \

281 } 0)

	)

283 
	#STAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

284 
	`STAILQ_NEXT
((
ñm
), 
fõld
Ë
NULL
; \

285 *(
hód
)->
°qh_œ°
 = (
ñm
); \

286 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

287 } 0)

	)

289 
	#STAILQ_LAST
(
hód
, 
ty≥
, 
fõld
) \

290 (
	`STAILQ_EMPTY
((
hód
)) ? \

291 
NULL
 : \

292 ((
ty≥
 *)(*) \

293 ((*)((
hód
)->
°qh_œ°
Ë- 
	`__off£tof
(
ty≥
, 
fõld
))))

	)

295 
	#STAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
°qe_√xt
)

	)

297 
	#STAILQ_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

298 
	`QMD_SAVELINK
(
ﬁd√xt
, (
ñm
)->
fõld
.
°qe_√xt
); \

299 i‡(
	`STAILQ_FIRST
((
hód
)Ë=(
ñm
)) { \

300 
	`STAILQ_REMOVE_HEAD
((
hód
), 
fõld
); \

303 
ty≥
 *
cuªlm
 = 
	`STAILQ_FIRST
((
hód
)); \

304 
	`STAILQ_NEXT
(
cuªlm
, 
fõld
Ë!(
ñm
)) \

305 
cuªlm
 = 
	`STAILQ_NEXT
(cuªlm, 
fõld
); \

306 
	`STAILQ_REMOVE_AFTER
(
hód
, 
cuªlm
, 
fõld
); \

308 
	`TRASHIT
(*
ﬁd√xt
); \

309 } 0)

	)

311 
	#STAILQ_REMOVE_AFTER
(
hód
, 
ñm
, 
fõld
) do { \

312 i‡((
	`STAILQ_NEXT
(
ñm
, 
fõld
) = \

313 
	`STAILQ_NEXT
(STAILQ_NEXT(
ñm
, 
fõld
), fõld)Ë=
NULL
) \

314 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

315 } 0)

	)

317 
	#STAILQ_REMOVE_HEAD
(
hód
, 
fõld
) do { \

318 i‡((
	`STAILQ_FIRST
((
hód
)) = \

319 
	`STAILQ_NEXT
(
	`STAILQ_FIRST
((
hód
)), 
fõld
)Ë=
NULL
) \

320 (
hód
)->
°qh_œ°
 = &
	`STAILQ_FIRST
((head)); \

321 } 0)

	)

323 
	#STAILQ_SWAP
(
hód1
, 
hód2
, 
ty≥
) do { \

324 
ty≥
 *
sw≠_fú°
 = 
	`STAILQ_FIRST
(
hód1
); \

325 
ty≥
 **
sw≠_œ°
 = (
hód1
)->
°qh_œ°
; \

326 
	`STAILQ_FIRST
(
hód1
ËSTAILQ_FIRST(
hód2
); \

327 (
hód1
)->
°qh_œ°
 = (
hód2
)->stqh_last; \

328 
	`STAILQ_FIRST
(
hód2
Ë
sw≠_fú°
; \

329 (
hód2
)->
°qh_œ°
 = 
sw≠_œ°
; \

330 i‡(
	`STAILQ_EMPTY
(
hód1
)) \

331 (
hód1
)->
°qh_œ°
 = &
	`STAILQ_FIRST
(head1); \

332 i‡(
	`STAILQ_EMPTY
(
hód2
)) \

333 (
hód2
)->
°qh_œ°
 = &
	`STAILQ_FIRST
(head2); \

334 } 0)

	)

340 
	#LIST_HEAD
(
«me
, 
ty≥
) \

341 
	s«me
 { \

342 
ty≥
 *
lh_fú°
; \

343 }

	)

345 
	#LIST_HEAD_INITIALIZER
(
hód
) \

346 { 
NULL
 }

	)

348 
	#LIST_ENTRY
(
ty≥
) \

350 
ty≥
 *
À_√xt
; \

351 
ty≥
 **
À_¥ev
; \

352 }

	)

358 #i‡(
deföed
(
_KERNEL
Ë&& deföed(
INVARIANTS
))

359 
	#QMD_LIST_CHECK_HEAD
(
hód
, 
fõld
) do { \

360 i‡(
	`LIST_FIRST
((
hód
)Ë!
NULL
 && \

361 
	`LIST_FIRST
((
hód
))->
fõld
.
À_¥ev
 != \

362 &
	`LIST_FIRST
((
hód
))) \

363 
	`∑nic
("BadÜi° hód %∞fú°->¥ev !hód", (
hód
)); \

364 } 0)

	)

366 
	#QMD_LIST_CHECK_NEXT
(
ñm
, 
fõld
) do { \

367 i‡(
	`LIST_NEXT
((
ñm
), 
fõld
Ë!
NULL
 && \

368 
	`LIST_NEXT
((
ñm
), 
fõld
)->fõld.
À_¥ev
 != \

369 &((
ñm
)->
fõld
.
À_√xt
)) \

370 
	`∑nic
("BadÜökÉlm %∞√xt->¥ev !ñm", (
ñm
)); \

371 } 0)

	)

373 
	#QMD_LIST_CHECK_PREV
(
ñm
, 
fõld
) do { \

374 i‡(*(
ñm
)->
fõld
.
À_¥ev
 != (elm)) \

375 
	`∑nic
("BadÜökÉlm %∞¥ev->√xà!ñm", (
ñm
)); \

376 } 0)

	)

378 
	#QMD_LIST_CHECK_HEAD
(
hód
, 
fõld
)

	)

379 
	#QMD_LIST_CHECK_NEXT
(
ñm
, 
fõld
)

	)

380 
	#QMD_LIST_CHECK_PREV
(
ñm
, 
fõld
)

	)

383 
	#LIST_EMPTY
(
hód
Ë((hód)->
lh_fú°
 =
NULL
)

	)

385 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

387 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

388 (
v¨
Ë
	`LIST_FIRST
((
hód
)); \

389 (
v¨
); \

390 (
v¨
Ë
	`LIST_NEXT
((v¨), 
fõld
))

	)

392 
	#LIST_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

393 (
v¨
Ë
	`LIST_FIRST
((
hód
)); \

394 (
v¨
Ë&& ((
tv¨
Ë
	`LIST_NEXT
((v¨), 
fõld
), 1); \

395 (
v¨
Ë(
tv¨
))

	)

397 
	#LIST_INIT
(
hód
) do { \

398 
	`LIST_FIRST
((
hód
)Ë
NULL
; \

399 } 0)

	)

401 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

402 
	`QMD_LIST_CHECK_NEXT
(
li°ñm
, 
fõld
); \

403 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
ËLIST_NEXT((
li°ñm
), fõld)Ë!
NULL
)\

404 
	`LIST_NEXT
((
li°ñm
), 
fõld
)->fõld.
À_¥ev
 = \

405 &
	`LIST_NEXT
((
ñm
), 
fõld
); \

406 
	`LIST_NEXT
((
li°ñm
), 
fõld
Ë(
ñm
); \

407 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
li°ñm
), field); \

408 } 0)

	)

410 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

411 
	`QMD_LIST_CHECK_PREV
(
li°ñm
, 
fõld
); \

412 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

413 
	`LIST_NEXT
((
ñm
), 
fõld
Ë(
li°ñm
); \

414 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

415 (
li°ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field); \

416 } 0)

	)

418 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

419 
	`QMD_LIST_CHECK_HEAD
((
hód
), 
fõld
); \

420 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
Ë
	`LIST_FIRST
((
hód
))Ë!
NULL
) \

421 
	`LIST_FIRST
((
hód
))->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field);\

422 
	`LIST_FIRST
((
hód
)Ë(
ñm
); \

423 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód
)); \

424 } 0)

	)

426 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

428 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

429 
	`QMD_SAVELINK
(
ﬁd√xt
, (
ñm
)->
fõld
.
À_√xt
); \

430 
	`QMD_SAVELINK
(
ﬁd¥ev
, (
ñm
)->
fõld
.
À_¥ev
); \

431 
	`QMD_LIST_CHECK_NEXT
(
ñm
, 
fõld
); \

432 
	`QMD_LIST_CHECK_PREV
(
ñm
, 
fõld
); \

433 i‡(
	`LIST_NEXT
((
ñm
), 
fõld
Ë!
NULL
) \

434 
	`LIST_NEXT
((
ñm
), 
fõld
)->fõld.
À_¥ev
 = \

435 (
ñm
)->
fõld
.
À_¥ev
; \

436 *(
ñm
)->
fõld
.
À_¥ev
 = 
	`LIST_NEXT
((elm), field); \

437 
	`TRASHIT
(*
ﬁd√xt
); \

438 
	`TRASHIT
(*
ﬁd¥ev
); \

439 } 0)

	)

441 
	#LIST_SWAP
(
hód1
, 
hód2
, 
ty≥
, 
fõld
) do { \

442 
ty≥
 *
sw≠_tmp
 = 
	`LIST_FIRST
((
hód1
)); \

443 
	`LIST_FIRST
((
hód1
)ËLIST_FIRST((
hód2
)); \

444 
	`LIST_FIRST
((
hód2
)Ë
sw≠_tmp
; \

445 i‡((
sw≠_tmp
 = 
	`LIST_FIRST
((
hód1
))Ë!
NULL
) \

446 
sw≠_tmp
->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód1
)); \

447 i‡((
sw≠_tmp
 = 
	`LIST_FIRST
((
hód2
))Ë!
NULL
) \

448 
sw≠_tmp
->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód2
)); \

449 } 0)

	)

454 
	#TAILQ_HEAD
(
«me
, 
ty≥
) \

455 
	s«me
 { \

456 
ty≥
 *
tqh_fú°
; \

457 
ty≥
 **
tqh_œ°
; \

458 
TRACEBUF
 \

459 }

	)

461 
	#TAILQ_HEAD_INITIALIZER
(
hód
) \

462 { 
NULL
, &(
hód
).
tqh_fú°
 }

	)

464 
	#TAILQ_ENTRY
(
ty≥
) \

466 
ty≥
 *
tqe_√xt
; \

467 
ty≥
 **
tqe_¥ev
; \

468 
TRACEBUF
 \

469 }

	)

474 #i‡(
deföed
(
_KERNEL
Ë&& deföed(
INVARIANTS
))

475 
	#QMD_TAILQ_CHECK_HEAD
(
hód
, 
fõld
) do { \

476 i‡(!
	`TAILQ_EMPTY
(
hód
) && \

477 
	`TAILQ_FIRST
((
hód
))->
fõld
.
tqe_¥ev
 != \

478 &
	`TAILQ_FIRST
((
hód
))) \

479 
	`∑nic
("BadÅaûq hód %∞fú°->¥ev !hód", (
hód
)); \

480 } 0)

	)

482 
	#QMD_TAILQ_CHECK_TAIL
(
hód
, 
fõld
) do { \

483 i‡(*(
hód
)->
tqh_œ°
 !
NULL
) \

484 
	`∑nic
("BadÅaûq NEXT(%p->tqh_œ°Ë!NULL", (
hód
)); \

485 } 0)

	)

487 
	#QMD_TAILQ_CHECK_NEXT
(
ñm
, 
fõld
) do { \

488 i‡(
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë!
NULL
 && \

489 
	`TAILQ_NEXT
((
ñm
), 
fõld
)->fõld.
tqe_¥ev
 != \

490 &((
ñm
)->
fõld
.
tqe_√xt
)) \

491 
	`∑nic
("BadÜökÉlm %∞√xt->¥ev !ñm", (
ñm
)); \

492 } 0)

	)

494 
	#QMD_TAILQ_CHECK_PREV
(
ñm
, 
fõld
) do { \

495 i‡(*(
ñm
)->
fõld
.
tqe_¥ev
 != (elm)) \

496 
	`∑nic
("BadÜökÉlm %∞¥ev->√xà!ñm", (
ñm
)); \

497 } 0)

	)

499 
	#QMD_TAILQ_CHECK_HEAD
(
hód
, 
fõld
)

	)

500 
	#QMD_TAILQ_CHECK_TAIL
(
hód
, 
hód«me
)

	)

501 
	#QMD_TAILQ_CHECK_NEXT
(
ñm
, 
fõld
)

	)

502 
	#QMD_TAILQ_CHECK_PREV
(
ñm
, 
fõld
)

	)

505 
	#TAILQ_CONCAT
(
hód1
, 
hód2
, 
fõld
) do { \

506 i‡(!
	`TAILQ_EMPTY
(
hód2
)) { \

507 *(
hód1
)->
tqh_œ°
 = (
hód2
)->
tqh_fú°
; \

508 (
hód2
)->
tqh_fú°
->
fõld
.
tqe_¥ev
 = (
hód1
)->
tqh_œ°
; \

509 (
hód1
)->
tqh_œ°
 = (
hód2
)->tqh_last; \

510 
	`TAILQ_INIT
((
hód2
)); \

511 
	`QMD_TRACE_HEAD
(
hód1
); \

512 
	`QMD_TRACE_HEAD
(
hód2
); \

514 } 0)

	)

516 
	#TAILQ_EMPTY
(
hód
Ë((hód)->
tqh_fú°
 =
NULL
)

	)

518 
	#TAILQ_FIRST
(
hód
Ë((hód)->
tqh_fú°
)

	)

520 
	#TAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

521 (
v¨
Ë
	`TAILQ_FIRST
((
hód
)); \

522 (
v¨
); \

523 (
v¨
Ë
	`TAILQ_NEXT
((v¨), 
fõld
))

	)

525 
	#TAILQ_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

526 (
v¨
Ë
	`TAILQ_FIRST
((
hód
)); \

527 (
v¨
Ë&& ((
tv¨
Ë
	`TAILQ_NEXT
((v¨), 
fõld
), 1); \

528 (
v¨
Ë(
tv¨
))

	)

530 
	#TAILQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
hód«me
, 
fõld
) \

531 (
v¨
Ë
	`TAILQ_LAST
((
hód
), 
hód«me
); \

532 (
v¨
); \

533 (
v¨
Ë
	`TAILQ_PREV
((v¨), 
hód«me
, 
fõld
))

	)

535 
	#TAILQ_FOREACH_REVERSE_SAFE
(
v¨
, 
hód
, 
hód«me
, 
fõld
, 
tv¨
) \

536 (
v¨
Ë
	`TAILQ_LAST
((
hód
), 
hód«me
); \

537 (
v¨
Ë&& ((
tv¨
Ë
	`TAILQ_PREV
((v¨), 
hód«me
, 
fõld
), 1); \

538 (
v¨
Ë(
tv¨
))

	)

540 
	#TAILQ_INIT
(
hód
) do { \

541 
	`TAILQ_FIRST
((
hód
)Ë
NULL
; \

542 (
hód
)->
tqh_œ°
 = &
	`TAILQ_FIRST
((head)); \

543 
	`QMD_TRACE_HEAD
(
hód
); \

544 } 0)

	)

546 
	#TAILQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

547 
	`QMD_TAILQ_CHECK_NEXT
(
li°ñm
, 
fõld
); \

548 i‡((
	`TAILQ_NEXT
((
ñm
), 
fõld
ËTAILQ_NEXT((
li°ñm
), fõld)Ë!
NULL
)\

549 
	`TAILQ_NEXT
((
ñm
), 
fõld
)->fõld.
tqe_¥ev
 = \

550 &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

552 (
hód
)->
tqh_œ°
 = &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

553 
	`QMD_TRACE_HEAD
(
hód
); \

555 
	`TAILQ_NEXT
((
li°ñm
), 
fõld
Ë(
ñm
); \

556 (
ñm
)->
fõld
.
tqe_¥ev
 = &
	`TAILQ_NEXT
((
li°ñm
), field); \

557 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

558 
	`QMD_TRACE_ELEM
(&
li°ñm
->
fõld
); \

559 } 0)

	)

561 
	#TAILQ_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

562 
	`QMD_TAILQ_CHECK_PREV
(
li°ñm
, 
fõld
); \

563 (
ñm
)->
fõld
.
tqe_¥ev
 = (
li°ñm
)->field.tqe_prev; \

564 
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë(
li°ñm
); \

565 *(
li°ñm
)->
fõld
.
tqe_¥ev
 = (
ñm
); \

566 (
li°ñm
)->
fõld
.
tqe_¥ev
 = &
	`TAILQ_NEXT
((
ñm
), field); \

567 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

568 
	`QMD_TRACE_ELEM
(&
li°ñm
->
fõld
); \

569 } 0)

	)

571 
	#TAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

572 
	`QMD_TAILQ_CHECK_HEAD
(
hód
, 
fõld
); \

573 i‡((
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë
	`TAILQ_FIRST
((
hód
))Ë!
NULL
) \

574 
	`TAILQ_FIRST
((
hód
))->
fõld
.
tqe_¥ev
 = \

575 &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

577 (
hód
)->
tqh_œ°
 = &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

578 
	`TAILQ_FIRST
((
hód
)Ë(
ñm
); \

579 (
ñm
)->
fõld
.
tqe_¥ev
 = &
	`TAILQ_FIRST
((
hód
)); \

580 
	`QMD_TRACE_HEAD
(
hód
); \

581 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

582 } 0)

	)

584 
	#TAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

585 
	`QMD_TAILQ_CHECK_TAIL
(
hód
, 
fõld
); \

586 
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë
NULL
; \

587 (
ñm
)->
fõld
.
tqe_¥ev
 = (
hód
)->
tqh_œ°
; \

588 *(
hód
)->
tqh_œ°
 = (
ñm
); \

589 (
hód
)->
tqh_œ°
 = &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

590 
	`QMD_TRACE_HEAD
(
hód
); \

591 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

592 } 0)

	)

594 
	#TAILQ_LAST
(
hód
, 
hód«me
) \

595 (*(((
hód«me
 *)((
hód
)->
tqh_œ°
))->tqh_œ°))

	)

597 
	#TAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
tqe_√xt
)

	)

599 
	#TAILQ_PREV
(
ñm
, 
hód«me
, 
fõld
) \

600 (*(((
hód«me
 *)((
ñm
)->
fõld
.
tqe_¥ev
))->
tqh_œ°
))

	)

602 
	#TAILQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

603 
	`QMD_SAVELINK
(
ﬁd√xt
, (
ñm
)->
fõld
.
tqe_√xt
); \

604 
	`QMD_SAVELINK
(
ﬁd¥ev
, (
ñm
)->
fõld
.
tqe_¥ev
); \

605 
	`QMD_TAILQ_CHECK_NEXT
(
ñm
, 
fõld
); \

606 
	`QMD_TAILQ_CHECK_PREV
(
ñm
, 
fõld
); \

607 i‡((
	`TAILQ_NEXT
((
ñm
), 
fõld
)Ë!
NULL
) \

608 
	`TAILQ_NEXT
((
ñm
), 
fõld
)->fõld.
tqe_¥ev
 = \

609 (
ñm
)->
fõld
.
tqe_¥ev
; \

611 (
hód
)->
tqh_œ°
 = (
ñm
)->
fõld
.
tqe_¥ev
; \

612 
	`QMD_TRACE_HEAD
(
hód
); \

614 *(
ñm
)->
fõld
.
tqe_¥ev
 = 
	`TAILQ_NEXT
((elm), field); \

615 
	`TRASHIT
(*
ﬁd√xt
); \

616 
	`TRASHIT
(*
ﬁd¥ev
); \

617 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

618 } 0)

	)

620 
	#TAILQ_SWAP
(
hód1
, 
hód2
, 
ty≥
, 
fõld
) do { \

621 
ty≥
 *
sw≠_fú°
 = (
hód1
)->
tqh_fú°
; \

622 
ty≥
 **
sw≠_œ°
 = (
hód1
)->
tqh_œ°
; \

623 (
hód1
)->
tqh_fú°
 = (
hód2
)->tqh_first; \

624 (
hód1
)->
tqh_œ°
 = (
hód2
)->tqh_last; \

625 (
hód2
)->
tqh_fú°
 = 
sw≠_fú°
; \

626 (
hód2
)->
tqh_œ°
 = 
sw≠_œ°
; \

627 i‡((
sw≠_fú°
 = (
hód1
)->
tqh_fú°
Ë!
NULL
) \

628 
sw≠_fú°
->
fõld
.
tqe_¥ev
 = &(
hód1
)->
tqh_fú°
; \

630 (
hód1
)->
tqh_œ°
 = &(hód1)->
tqh_fú°
; \

631 i‡((
sw≠_fú°
 = (
hód2
)->
tqh_fú°
Ë!
NULL
) \

632 
sw≠_fú°
->
fõld
.
tqe_¥ev
 = &(
hód2
)->
tqh_fú°
; \

634 (
hód2
)->
tqh_œ°
 = &(hód2)->
tqh_fú°
; \

635 } 0)

	)

	@/usr/include/sys/refcount.h

32 #i‚de‡
__SYS_REFCOUNT_H__


33 
	#__SYS_REFCOUNT_H__


	)

35 
	~<machöe/©omic.h
>

37 #ifde‡
_KERNEL


38 
	~<sys/sy°m.h
>

40 
	#KASSERT
(
exp
, 
msg
Ë

	)

43 
__ölöe
 

44 
	$ªfcou¡_öô
(vﬁ©ûê
u_öt
 *
cou¡
, u_öà
vÆue
)

47 *
cou¡
 = 
vÆue
;

48 
	}
}

50 
__ölöe
 

51 
	$ªfcou¡_acquúe
(vﬁ©ûê
u_öt
 *
cou¡
)

54 
	`©omic_add_acq_öt
(
cou¡
, 1);

55 
	}
}

57 
__ölöe
 

58 
	$ªfcou¡_ªÀa£
(vﬁ©ûê
u_öt
 *
cou¡
)

60 
u_öt
 
ﬁd
;

63 
ﬁd
 = 
	`©omic_„tchadd_öt
(
cou¡
, -1);

64 
	`KASSERT
(
ﬁd
 > 0, ("√g©ivêªfcou¡ %p", 
cou¡
));

65  (
ﬁd
 == 1);

66 
	}
}

	@/usr/include/sys/signal.h

38 #i‚de‡
_SYS_SIGNAL_H_


39 
	#_SYS_SIGNAL_H_


	)

41 
	~<sys/cdefs.h
>

42 
	~<sys/_ty≥s.h
>

43 
	~<sys/_sig£t.h
>

45 
	~<machöe/_limôs.h
>

46 
	~<machöe/sig«l.h
>

51 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


52 
	#SIGHUP
 1

	)

54 
	#SIGINT
 2

	)

55 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


56 
	#SIGQUIT
 3

	)

58 
	#SIGILL
 4

	)

59 #i‡
__XSI_VISIBLE


60 
	#SIGTRAP
 5

	)

62 
	#SIGABRT
 6

	)

63 #i‡
__BSD_VISIBLE


64 
	#SIGIOT
 
SIGABRT


	)

65 
	#SIGEMT
 7

	)

67 
	#SIGFPE
 8

	)

68 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


69 
	#SIGKILL
 9

	)

71 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


72 
	#SIGBUS
 10

	)

74 
	#SIGSEGV
 11

	)

75 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


76 
	#SIGSYS
 12

	)

78 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


79 
	#SIGPIPE
 13

	)

80 
	#SIGALRM
 14

	)

82 
	#SIGTERM
 15

	)

83 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


84 
	#SIGURG
 16

	)

86 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


87 
	#SIGSTOP
 17

	)

88 
	#SIGTSTP
 18

	)

89 
	#SIGCONT
 19

	)

90 
	#SIGCHLD
 20

	)

91 
	#SIGTTIN
 21

	)

92 
	#SIGTTOU
 22

	)

94 #i‡
__BSD_VISIBLE


95 
	#SIGIO
 23

	)

97 #i‡
__XSI_VISIBLE


98 
	#SIGXCPU
 24

	)

99 
	#SIGXFSZ
 25

	)

100 
	#SIGVTALRM
 26

	)

101 
	#SIGPROF
 27

	)

103 #i‡
__BSD_VISIBLE


104 
	#SIGWINCH
 28

	)

105 
	#SIGINFO
 29

	)

107 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


108 
	#SIGUSR1
 30

	)

109 
	#SIGUSR2
 31

	)

111 #i‡
__BSD_VISIBLE


112 
	#SIGTHR
 32

	)

113 
	#SIGLWP
 
SIGTHR


	)

116 
	#SIGRTMIN
 65

	)

117 
	#SIGRTMAX
 126

	)

119 
	#SIG_DFL
 ((
__sigh™dÀr_t
 *)0)

	)

120 
	#SIG_IGN
 ((
__sigh™dÀr_t
 *)1)

	)

121 
	#SIG_ERR
 ((
__sigh™dÀr_t
 *)-1)

	)

123 
	#SIG_HOLD
 ((
__sigh™dÀr_t
 *)3)

	)

141 
	t__sigh™dÀr_t
();

143 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


144 #i‚de‡
_SIGSET_T_DECLARED


145 
	#_SIGSET_T_DECLARED


	)

146 
__sig£t_t
 
	tsig£t_t
;

150 #i‡
__POSIX_VISIBLE
 >199309 || 
__XSI_VISIBLE
 >= 500

151 
	usigvÆ
 {

153 
	msivÆ_öt
;

154 *
	msivÆ_±r
;

156 
	msigvÆ_öt
;

157 *
	msigvÆ_±r
;

161 #i‡
__POSIX_VISIBLE
 >= 199309

162 
	ssigevít
 {

163 
	msigev_nŸify
;

164 
	msigev_signo
;

165 
sigvÆ
 
	msigev_vÆue
;

167 
__lwpid_t
 
	m_thªadid
;

169 (*
	m_fun˘i⁄
)(
	msigvÆ
);

170 *
	m_©åibuã
;

171 } 
	m_sigev_thªad
;

172 
	m__•¨e__
[8];

173 } 
	m_sigev_un
;

176 #i‡
__BSD_VISIBLE


177 
	#sigev_nŸify_kqueue
 
sigev_signo


	)

178 
	#sigev_nŸify_thªad_id
 
_sigev_un
.
_thªadid


	)

180 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

181 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

183 
	#SIGEV_NONE
 0

	)

184 
	#SIGEV_SIGNAL
 1

	)

185 
	#SIGEV_THREAD
 2

	)

186 #i‡
__BSD_VISIBLE


187 
	#SIGEV_KEVENT
 3

	)

188 
	#SIGEV_THREAD_ID
 4

	)

192 #i‡
__POSIX_VISIBLE
 >199309 || 
__XSI_VISIBLE


193 
	s__sigöfo
 {

194 
	msi_signo
;

195 
	msi_î∫o
;

202 
	msi_code
;

203 
__pid_t
 
	msi_pid
;

204 
__uid_t
 
	msi_uid
;

205 
	msi_°©us
;

206 *
	msi_addr
;

207 
sigvÆ
 
	msi_vÆue
;

210 
	m_å≠no
;

211 } 
	m_Áu…
;

213 
	m_timîid
;

214 
	m_ovîrun
;

215 } 
	m_timî
;

217 
	m_mqd
;

218 } 
	m_mesgq
;

220 
	m_b™d
;

221 } 
	m_pﬁl
;

223 
	m__•¨e1__
;

224 
	m__•¨e2__
[7];

225 } 
	m__•¨e__
;

226 } 
	m_ªas⁄
;

227 } 
	tsigöfo_t
;

229 
	#si_å≠no
 
_ªas⁄
.
_Áu…
.
_å≠no


	)

230 
	#si_timîid
 
_ªas⁄
.
_timî
.
_timîid


	)

231 
	#si_ovîrun
 
_ªas⁄
.
_timî
.
_ovîrun


	)

232 
	#si_mqd
 
_ªas⁄
.
_mesgq
.
_mqd


	)

233 
	#si_b™d
 
_ªas⁄
.
_pﬁl
.
_b™d


	)

237 
	#ILL_ILLOPC
 1

	)

238 
	#ILL_ILLOPN
 2

	)

239 
	#ILL_ILLADR
 3

	)

240 
	#ILL_ILLTRP
 4

	)

241 
	#ILL_PRVOPC
 5

	)

242 
	#ILL_PRVREG
 6

	)

243 
	#ILL_COPROC
 7

	)

244 
	#ILL_BADSTK
 8

	)

247 
	#BUS_ADRALN
 1

	)

248 
	#BUS_ADRERR
 2

	)

249 
	#BUS_OBJERR
 3

	)

252 
	#SEGV_MAPERR
 1

	)

253 
	#SEGV_ACCERR
 2

	)

257 
	#FPE_INTOVF
 1

	)

258 
	#FPE_INTDIV
 2

	)

259 
	#FPE_FLTDIV
 3

	)

260 
	#FPE_FLTOVF
 4

	)

261 
	#FPE_FLTUND
 5

	)

262 
	#FPE_FLTRES
 6

	)

263 
	#FPE_FLTINV
 7

	)

264 
	#FPE_FLTSUB
 8

	)

267 
	#TRAP_BRKPT
 1

	)

268 
	#TRAP_TRACE
 2

	)

269 
	#TRAP_DTRACE
 3

	)

272 
	#CLD_EXITED
 1

	)

273 
	#CLD_KILLED
 2

	)

275 
	#CLD_DUMPED
 3

	)

277 
	#CLD_TRAPPED
 4

	)

278 
	#CLD_STOPPED
 5

	)

279 
	#CLD_CONTINUED
 6

	)

282 
	#POLL_IN
 1

	)

283 
	#POLL_OUT
 2

	)

284 
	#POLL_MSG
 3

	)

285 
	#POLL_ERR
 4

	)

286 
	#POLL_PRI
 5

	)

287 
	#POLL_HUP
 6

	)

291 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


292 
	g__sigöfo
;

297 
	ssiga˘i⁄
 {

299 (*
	m__ß_h™dÀr
)();

300 (*
	m__ß_siga˘i⁄
)(, 
	m__sigöfo
 *, *);

301 } 
	m__siga˘i⁄_u
;

302 
	mß_Êags
;

303 
sig£t_t
 
	mß_mask
;

306 
	#ß_h™dÀr
 
__siga˘i⁄_u
.
__ß_h™dÀr


	)

309 #i‡
__XSI_VISIBLE


311 
	#ß_siga˘i⁄
 
__siga˘i⁄_u
.
__ß_siga˘i⁄


	)

314 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


315 
	#SA_NOCLDSTOP
 0x0008

	)

318 #i‡
__XSI_VISIBLE


319 
	#SA_ONSTACK
 0x0001

	)

320 
	#SA_RESTART
 0x0002

	)

321 
	#SA_RESETHAND
 0x0004

	)

322 
	#SA_NODEFER
 0x0010

	)

323 
	#SA_NOCLDWAIT
 0x0020

	)

324 
	#SA_SIGINFO
 0x0040

	)

327 #i‡
__BSD_VISIBLE


328 
	#NSIG
 32

	)

331 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


332 
	#SI_NOINFO
 0

	)

333 
	#SI_USER
 0x10001

	)

334 
	#SI_QUEUE
 0x10002

	)

335 
	#SI_TIMER
 0x10003

	)

337 
	#SI_ASYNCIO
 0x10004

	)

339 
	#SI_MESGQ
 0x10005

	)

341 
	#SI_KERNEL
 0x10006

	)

343 #i‡
__BSD_VISIBLE


344 
	#SI_UNDEFINED
 0

	)

347 #i‡
__BSD_VISIBLE


348 
__sigh™dÀr_t
 *
	tsig_t
;

349 
	t__sigöfoh™dÀr_t
(, 
	t__sigöfo
 *, *);

352 #i‡
__XSI_VISIBLE


356 #i‡
__BSD_VISIBLE


357 
	ssigÆt°ack
 {

361 *
	mss_•
;

362 
__size_t
 
	mss_size
;

363 
	mss_Êags
;

364 } 
	t°ack_t
;

366 
	#SS_ONSTACK
 0x0001

	)

367 
	#SS_DISABLE
 0x0004

	)

368 
	#MINSIGSTKSZ
 
__MINSIGSTKSZ


	)

369 
	#SIGSTKSZ
 (
MINSIGSTKSZ
 + 32768Ë

	)

372 #i‡
__BSD_VISIBLE


377 
	ssigvec
 {

378 
__sigh™dÀr_t
 *
	msv_h™dÀr
;

379 
	msv_mask
;

380 
	msv_Êags
;

383 
	#SV_ONSTACK
 
SA_ONSTACK


	)

384 
	#SV_INTERRUPT
 
SA_RESTART


	)

385 
	#SV_RESETHAND
 
SA_RESETHAND


	)

386 
	#SV_NODEFER
 
SA_NODEFER


	)

387 
	#SV_NOCLDSTOP
 
SA_NOCLDSTOP


	)

388 
	#SV_SIGINFO
 
SA_SIGINFO


	)

389 
	#sv_⁄°ack
 
sv_Êags


	)

393 #i‡
deföed
(
_KERNEL
Ë&& deföed(
COMPAT_43
) && \

394 !
	$deföed
(
__i386__
)

395 
	sosigc⁄ãxt
 {

396 
_nŸ_u£d
;

400 #i‡
__XSI_VISIBLE


404 
	ssig°ack
 {

406 *
ss_•
;

407 
ss_⁄°ack
;

411 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 > 0 && __POSIX_VISIBLE <= 200112

416 
	#sigmask
(
m
Ë(1 << ((m)-1))

	)

419 #i‡
__BSD_VISIBLE


420 
	#BADSIG
 
SIG_ERR


	)

423 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


427 
	#SIG_BLOCK
 1

	)

428 
	#SIG_UNBLOCK
 2

	)

429 
	#SIG_SETMASK
 3

	)

436 
__BEGIN_DECLS


437 
__sigh™dÀr_t
 *
	`sig«l
(, __sighandler_t *);

438 
__END_DECLS


	@/usr/include/sys/timespec.h

38 #i‚de‡
_SYS_TIMESPEC_H_


39 
	#_SYS_TIMESPEC_H_


	)

41 #i‚de‡
_TIME_T_DECLARED


42 
__time_t
 
	ttime_t
;

43 
	#_TIME_T_DECLARED


	)

46 
	stime•ec
 {

47 
time_t
 
	mtv_£c
;

48 
	mtv_n£c
;

51 #i‡
__BSD_VISIBLE


52 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) \

54 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

55 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

56 } 0)

	)

57 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) \

59 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

60 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

61 } 0)

	)

69 
	sôimî•ec
 {

70 
time•ec
 
	mô_öãrvÆ
;

71 
time•ec
 
	mô_vÆue
;

	@/usr/include/sys/unistd.h

33 #i‚de‡
_SYS_UNISTD_H_


34 
	#_SYS_UNISTD_H_


	)

36 
	~<sys/cdefs.h
>

52 
	#_POSIX_ADVISORY_INFO
 200112L

	)

53 
	#_POSIX_ASYNCHRONOUS_IO
 0

	)

54 
	#_POSIX_CHOWN_RESTRICTED
 1

	)

55 
	#_POSIX_CLOCK_SELECTION
 (-1)

	)

56 
	#_POSIX_CPUTIME
 (-1)

	)

57 
	#_POSIX_FSYNC
 200112L

	)

58 
	#_POSIX_IPV6
 0

	)

59 
	#_POSIX_JOB_CONTROL
 1

	)

60 
	#_POSIX_MAPPED_FILES
 200112L

	)

61 
	#_POSIX_MEMLOCK
 (-1)

	)

62 
	#_POSIX_MEMLOCK_RANGE
 200112L

	)

63 
	#_POSIX_MEMORY_PROTECTION
 200112L

	)

64 
	#_POSIX_MESSAGE_PASSING
 200112L

	)

65 
	#_POSIX_MONOTONIC_CLOCK
 200112L

	)

66 
	#_POSIX_NO_TRUNC
 1

	)

67 
	#_POSIX_PRIORITIZED_IO
 (-1)

	)

68 
	#_POSIX_PRIORITY_SCHEDULING
 200112L

	)

69 
	#_POSIX_RAW_SOCKETS
 200112L

	)

70 
	#_POSIX_REALTIME_SIGNALS
 200112L

	)

71 
	#_POSIX_SEMAPHORES
 -1

	)

72 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200112L

	)

73 
	#_POSIX_SPORADIC_SERVER
 (-1)

	)

74 
	#_POSIX_SYNCHRONIZED_IO
 (-1)

	)

75 
	#_POSIX_TIMEOUTS
 200112L

	)

76 
	#_POSIX_TIMERS
 200112L

	)

77 
	#_POSIX_TYPED_MEMORY_OBJECTS
 (-1)

	)

78 
	#_POSIX_VDISABLE
 0xff

	)

80 #i‡
__XSI_VISIBLE


81 
	#_XOPEN_SHM
 1

	)

82 
	#_XOPEN_STREAMS
 (-1)

	)

92 #ifdef 
_NOT_AVAILABLE


93 
	#_POSIX_SAVED_IDS
 1

	)

97 
	#_POSIX_VERSION
 200112L

	)

100 
	#F_OK
 0

	)

101 
	#X_OK
 0x01

	)

102 
	#W_OK
 0x02

	)

103 
	#R_OK
 0x04

	)

106 #i‚de‡
SEEK_SET


107 
	#SEEK_SET
 0

	)

108 
	#SEEK_CUR
 1

	)

109 
	#SEEK_END
 2

	)

111 #i‡
__BSD_VISIBLE


112 
	#SEEK_DATA
 3

	)

113 
	#SEEK_HOLE
 4

	)

116 #i‚de‡
_POSIX_SOURCE


118 
	#L_SET
 
SEEK_SET


	)

119 
	#L_INCR
 
SEEK_CUR


	)

120 
	#L_XTND
 
SEEK_END


	)

124 
	#_PC_LINK_MAX
 1

	)

125 
	#_PC_MAX_CANON
 2

	)

126 
	#_PC_MAX_INPUT
 3

	)

127 
	#_PC_NAME_MAX
 4

	)

128 
	#_PC_PATH_MAX
 5

	)

129 
	#_PC_PIPE_BUF
 6

	)

130 
	#_PC_CHOWN_RESTRICTED
 7

	)

131 
	#_PC_NO_TRUNC
 8

	)

132 
	#_PC_VDISABLE
 9

	)

134 #i‡
__POSIX_VISIBLE
 >= 199309

135 
	#_PC_ASYNC_IO
 53

	)

136 
	#_PC_PRIO_IO
 54

	)

137 
	#_PC_SYNC_IO
 55

	)

140 #i‡
__POSIX_VISIBLE
 >= 200112

141 
	#_PC_ALLOC_SIZE_MIN
 10

	)

142 
	#_PC_FILESIZEBITS
 12

	)

143 
	#_PC_REC_INCR_XFER_SIZE
 14

	)

144 
	#_PC_REC_MAX_XFER_SIZE
 15

	)

145 
	#_PC_REC_MIN_XFER_SIZE
 16

	)

146 
	#_PC_REC_XFER_ALIGN
 17

	)

147 
	#_PC_SYMLINK_MAX
 18

	)

150 #i‡
__BSD_VISIBLE


151 
	#_PC_ACL_EXTENDED
 59

	)

152 
	#_PC_ACL_PATH_MAX
 60

	)

153 
	#_PC_CAP_PRESENT
 61

	)

154 
	#_PC_INF_PRESENT
 62

	)

155 
	#_PC_MAC_PRESENT
 63

	)

156 
	#_PC_ACL_NFS4
 64

	)

160 
	#_PC_MIN_HOLE_SIZE
 21

	)

162 #i‡
__BSD_VISIBLE


168 
	#RFNAMEG
 (1<<0Ë

	)

169 
	#RFENVG
 (1<<1Ë

	)

170 
	#RFFDG
 (1<<2Ë

	)

171 
	#RFNOTEG
 (1<<3Ë

	)

172 
	#RFPROC
 (1<<4Ë

	)

173 
	#RFMEM
 (1<<5Ë

	)

174 
	#RFNOWAIT
 (1<<6Ë

	)

175 
	#RFCNAMEG
 (1<<10Ë

	)

176 
	#RFCENVG
 (1<<11Ë

	)

177 
	#RFCFDG
 (1<<12Ë

	)

178 
	#RFTHREAD
 (1<<13Ë

	)

179 
	#RFSIGSHARE
 (1<<14Ë

	)

180 
	#RFLINUXTHPN
 (1<<16Ë

	)

181 
	#RFSTOPPED
 (1<<17Ë

	)

182 
	#RFHIGHPID
 (1<<18Ë

	)

183 
	#RFTSIGZMB
 (1<<19Ë

	)

184 
	#RFTSIGSHIFT
 20

	)

185 
	#RFTSIGMASK
 0xFF

	)

186 
	#RFTSIGNUM
(
Êags
Ë(((ÊagsË>> 
RFTSIGSHIFT
Ë& 
RFTSIGMASK
)

	)

187 
	#RFTSIGFLAGS
(
signum
Ë((signumË<< 
RFTSIGSHIFT
)

	)

188 
	#RFPPWAIT
 (1<<31Ë

	)

189 
	#RFKERNELONLY
 (
RFSTOPPED
 | 
RFHIGHPID
 | 
RFPPWAIT
)

	)

190 
	#RFFLAGS
 (
RFFDG
 | 
RFPROC
 | 
RFMEM
 | 
RFNOWAIT
 | 
RFCFDG
 | \

191 
RFTHREAD
 | 
RFSIGSHARE
 | 
RFLINUXTHPN
 | 
RFSTOPPED
 | 
RFHIGHPID
 | 
RFTSIGZMB
 | \

192 
RFPPWAIT
)

	)

	@/usr/include/krb5.h

36 #i‚de‡
__KRB5_H__


37 
	#__KRB5_H__


	)

39 
	~<time.h
>

40 
	~<krb5-ty≥s.h
>

42 
	~<a¢1_îr.h
>

43 
	~<krb5_îr.h
>

44 
	~<heim_îr.h
>

45 
	~<k524_îr.h
>

47 
	~<krb5_a¢1.h
>

50 #i‚de‡
KRB5KDC_ERR_KEY_EXP


51 
	#KRB5KDC_ERR_KEY_EXP
 
KRB5KDC_ERR_KEY_EXPIRED


	)

56 #i‚de‡
TRUE


57 
	#TRUE
 1

	)

58 
	#FALSE
 0

	)

61 
	tkrb5_boﬁón
;

63 
öt32_t
 
	tkrb5_îr‹_code
;

65 
	tkrb5_kvno
;

67 
uöt32_t
 
	tkrb5_Êags
;

69 *
	tkrb5_poöãr
;

70 c⁄° *
	tkrb5_c⁄°_poöãr
;

72 
	gkrb5_¸y±o_d©a
;

73 
krb5_¸y±o_d©a
 *
	tkrb5_¸y±o
;

75 
	gkrb5_gë_¸eds_›t_d©a
;

76 
krb5_gë_¸eds_›t_d©a
 *
	tkrb5_gë_¸eds_›t
;

78 
	gkrb5_dige°_d©a
;

79 
krb5_dige°_d©a
 *
	tkrb5_dige°
;

80 
	gkrb5_¡lm_d©a
;

81 
krb5_¡lm_d©a
 *
	tkrb5_¡lm
;

83 
	gkrb5_∑c_d©a
;

84 
krb5_∑c_d©a
 *
	tkrb5_∑c
;

86 
krb5_rd_ªq_ö_˘x_d©a
 *
	tkrb5_rd_ªq_ö_˘x
;

87 
krb5_rd_ªq_out_˘x_d©a
 *
	tkrb5_rd_ªq_out_˘x
;

89 
CKSUMTYPE
 
	tkrb5_cksumty≥
;

91 
Checksum
 
	tkrb5_checksum
;

93 
ENCTYPE
 
	tkrb5_í˘y≥
;

95 
heim_o˘ë_°rög
 
	tkrb5_d©a
;

98 
	gC⁄ã¡Info
;

99 
	gkrb5_pk_idítôy
;

100 
	gkrb5_pk_˚π
;

103 
	skrb5_íc_d©a
 {

104 
krb5_í˘y≥
 
	mí˘y≥
;

105 
krb5_kvno
 
	mkvno
;

106 
krb5_d©a
 
	mcùhîãxt
;

107 } 
	tkrb5_íc_d©a
;

111 
	mENCTYPE_NULL
 = 
ETYPE_NULL
,

112 
	mENCTYPE_DES_CBC_CRC
 = 
ETYPE_DES_CBC_CRC
,

113 
	mENCTYPE_DES_CBC_MD4
 = 
ETYPE_DES_CBC_MD4
,

114 
	mENCTYPE_DES_CBC_MD5
 = 
ETYPE_DES_CBC_MD5
,

115 
	mENCTYPE_DES3_CBC_MD5
 = 
ETYPE_DES3_CBC_MD5
,

116 
	mENCTYPE_OLD_DES3_CBC_SHA1
 = 
ETYPE_OLD_DES3_CBC_SHA1
,

117 
	mENCTYPE_SIGN_DSA_GENERATE
 = 
ETYPE_SIGN_DSA_GENERATE
,

118 
	mENCTYPE_ENCRYPT_RSA_PRIV
 = 
ETYPE_ENCRYPT_RSA_PRIV
,

119 
	mENCTYPE_ENCRYPT_RSA_PUB
 = 
ETYPE_ENCRYPT_RSA_PUB
,

120 
	mENCTYPE_DES3_CBC_SHA1
 = 
ETYPE_DES3_CBC_SHA1
,

121 
	mENCTYPE_AES128_CTS_HMAC_SHA1_96
 = 
ETYPE_AES128_CTS_HMAC_SHA1_96
,

122 
	mENCTYPE_AES256_CTS_HMAC_SHA1_96
 = 
ETYPE_AES256_CTS_HMAC_SHA1_96
,

123 
	mENCTYPE_ARCFOUR_HMAC
 = 
ETYPE_ARCFOUR_HMAC_MD5
,

124 
	mENCTYPE_ARCFOUR_HMAC_MD5
 = 
ETYPE_ARCFOUR_HMAC_MD5
,

125 
	mENCTYPE_ARCFOUR_HMAC_MD5_56
 = 
ETYPE_ARCFOUR_HMAC_MD5_56
,

126 
	mENCTYPE_ENCTYPE_PK_CROSS
 = 
ETYPE_ENCTYPE_PK_CROSS
,

127 
	mENCTYPE_DES_CBC_NONE
 = 
ETYPE_DES_CBC_NONE
,

128 
	mENCTYPE_DES3_CBC_NONE
 = 
ETYPE_DES3_CBC_NONE
,

129 
	mENCTYPE_DES_CFB64_NONE
 = 
ETYPE_DES_CFB64_NONE
,

130 
	mENCTYPE_DES_PCBC_NONE
 = 
ETYPE_DES_PCBC_NONE


133 
PADATA_TYPE
 
	tkrb5_¥óuthty≥
;

135 
	ekrb5_key_ußge
 {

136 
	mKRB5_KU_PA_ENC_TIMESTAMP
 = 1,

139 
	mKRB5_KU_TICKET
 = 2,

143 
	mKRB5_KU_AS_REP_ENC_PART
 = 3,

146 
	mKRB5_KU_TGS_REQ_AUTH_DAT_SESSION
 = 4,

149 
	mKRB5_KU_TGS_REQ_AUTH_DAT_SUBKEY
 = 5,

152 
	mKRB5_KU_TGS_REQ_AUTH_CKSUM
 = 6,

155 
	mKRB5_KU_TGS_REQ_AUTH
 = 7,

159 
	mKRB5_KU_TGS_REP_ENC_PART_SESSION
 = 8,

162 
	mKRB5_KU_TGS_REP_ENC_PART_SUB_KEY
 = 9,

165 
	mKRB5_KU_AP_REQ_AUTH_CKSUM
 = 10,

168 
	mKRB5_KU_AP_REQ_AUTH
 = 11,

172 
	mKRB5_KU_AP_REQ_ENC_PART
 = 12,

175 
	mKRB5_KU_KRB_PRIV
 = 13,

178 
	mKRB5_KU_KRB_CRED
 = 14,

181 
	mKRB5_KU_KRB_SAFE_CKSUM
 = 15,

184 
	mKRB5_KU_OTHER_ENCRYPTED
 = 16,

187 
	mKRB5_KU_OTHER_CKSUM
 = 17,

190 
	mKRB5_KU_KRB_ERROR
 = 18,

192 
	mKRB5_KU_AD_KDC_ISSUED
 = 19,

194 
	mKRB5_KU_MANDATORY_TICKET_EXTENSION
 = 20,

196 
	mKRB5_KU_AUTH_DATA_TICKET_EXTENSION
 = 21,

198 
	mKRB5_KU_USAGE_SEAL
 = 22,

200 
	mKRB5_KU_USAGE_SIGN
 = 23,

202 
	mKRB5_KU_USAGE_SEQ
 = 24,

204 
	mKRB5_KU_USAGE_ACCEPTOR_SEAL
 = 22,

206 
	mKRB5_KU_USAGE_ACCEPTOR_SIGN
 = 23,

208 
	mKRB5_KU_USAGE_INITIATOR_SEAL
 = 24,

210 
	mKRB5_KU_USAGE_INITIATOR_SIGN
 = 25,

212 
	mKRB5_KU_PA_SERVER_REFERRAL_DATA
 = 22,

214 
	mKRB5_KU_SAM_CHECKSUM
 = 25,

216 
	mKRB5_KU_SAM_ENC_TRACK_ID
 = 26,

218 
	mKRB5_KU_PA_SERVER_REFERRAL
 = 26,

220 
	mKRB5_KU_SAM_ENC_NONCE_SAD
 = 27,

222 
	mKRB5_KU_DIGEST_ENCRYPT
 = -18,

224 
	mKRB5_KU_DIGEST_OPAQUE
 = -19,

226 
	mKRB5_KU_KRB5SIGNEDPATH
 = -21,

228 
	mKRB5_KU_CANONICALIZED_NAMES
 = -23

230 } 
	tkrb5_key_ußge
;

232 
krb5_key_ußge
 
	tkrb5_keyußge
;

234 
	ekrb5_ß…ty≥
 {

235 
	mKRB5_PW_SALT
 = 
KRB5_PADATA_PW_SALT
,

236 
	mKRB5_AFS3_SALT
 = 
KRB5_PADATA_AFS3_SALT


237 }
	tkrb5_ß…ty≥
;

239 
	skrb5_ß…
 {

240 
krb5_ß…ty≥
 
	mß…ty≥
;

241 
krb5_d©a
 
	mß…vÆue
;

242 } 
	tkrb5_ß…
;

244 
ETYPE_INFO
 
	tkrb5_¥óuthöfo
;

247 
krb5_¥óuthty≥
 
	mty≥
;

248 
krb5_¥óuthöfo
 
	möfo
;

249 } 
	tkrb5_¥óuthd©a_íåy
;

251 
	skrb5_¥óuthd©a
 {

252 
	mÀn
;

253 
krb5_¥óuthd©a_íåy
 *
	mvÆ
;

254 }
	tkrb5_¥óuthd©a
;

256 
	ekrb5_addªss_ty≥
 {

257 
	mKRB5_ADDRESS_INET
 = 2,

258 
	mKRB5_ADDRESS_NETBIOS
 = 20,

259 
	mKRB5_ADDRESS_INET6
 = 24,

260 
	mKRB5_ADDRESS_ADDRPORT
 = 256,

261 
	mKRB5_ADDRESS_IPPORT
 = 257

262 } 
	tkrb5_addªss_ty≥
;

265 
	mAP_OPTS_USE_SESSION_KEY
 = 1,

266 
	mAP_OPTS_MUTUAL_REQUIRED
 = 2,

267 
	mAP_OPTS_USE_SUBKEY
 = 4

270 
Ho°Addªss
 
	tkrb5_addªss
;

272 
Ho°Addªs£s
 
	tkrb5_addªs£s
;

274 
	ekrb5_keyty≥
 {

275 
	mKEYTYPE_NULL
 = 0,

276 
	mKEYTYPE_DES
 = 1,

277 
	mKEYTYPE_DES3
 = 7,

278 
	mKEYTYPE_AES128
 = 17,

279 
	mKEYTYPE_AES256
 = 18,

280 
	mKEYTYPE_ARCFOUR
 = 23,

281 
	mKEYTYPE_ARCFOUR_56
 = 24

282 } 
	tkrb5_keyty≥
;

284 
En¸y±i⁄Key
 
	tkrb5_keyblock
;

286 
AP_REQ
 
	tkrb5_≠_ªq
;

288 
	gkrb5_cc_›s
;

290 
	#KRB5_DEFAULT_CCFILE_ROOT
 "/tmp/krb5cc_"

	)

292 
	#KRB5_DEFAULT_CCROOT
 "FILE:" 
KRB5_DEFAULT_CCFILE_ROOT


	)

294 
	#KRB5_ACCEPT_NULL_ADDRESSES
(
C
) \

295 
	`krb5_c⁄fig_gë_boﬁ_deÁu…
((
C
), 
NULL
, 
TRUE
, \

297 
NULL
)

	)

299 *
	tkrb5_cc_curs‹
;

301 
	skrb5_cˇche_d©a
 {

302 c⁄° 
krb5_cc_›s
 *
	m›s
;

303 
krb5_d©a
 
	md©a
;

304 }
	tkrb5_cˇche_d©a
;

306 
krb5_cˇche_d©a
 *
	tkrb5_cˇche
;

308 
krb5_c⁄ãxt_d©a
 *
	tkrb5_c⁄ãxt
;

310 
Rólm
 
	tkrb5_ªÆm
;

311 c⁄° *
	tkrb5_c⁄°_ªÆm
;

313 
	#krb5_ªÆm_Àngth
(
r
Ë
	`°æí
‘)

	)

314 
	#krb5_ªÆm_d©a
(
r
Ë‘)

	)

316 
PröcùÆ
 
	tkrb5_¥öcùÆ_d©a
;

317 
PröcùÆ
 *
	tkrb5_¥öcùÆ
;

318 c⁄° 
	tPröcùÆ
 *
	tkrb5_c⁄°_¥öcùÆ
;

320 
time_t
 
	tkrb5_dñèt
;

321 
time_t
 
	tkrb5_time°amp
;

323 
	skrb5_times
 {

324 
krb5_time°amp
 
	mauthtime
;

325 
krb5_time°amp
 
	m°¨âime
;

326 
krb5_time°amp
 
	mídtime
;

327 
krb5_time°amp
 
	mª√w_tûl
;

328 } 
	tkrb5_times
;

331 
TickëFœgs
 
	mb
;

332 
krb5_Êags
 
	mi
;

333 } 
	tkrb5_tickë_Êags
;

336 
	#KDC_OPT_FORWARDABLE
 (1 << 1)

	)

337 
	#KDC_OPT_FORWARDED
 (1 << 2)

	)

338 
	#KDC_OPT_PROXIABLE
 (1 << 3)

	)

339 
	#KDC_OPT_PROXY
 (1 << 4)

	)

340 
	#KDC_OPT_ALLOW_POSTDATE
 (1 << 5)

	)

341 
	#KDC_OPT_POSTDATED
 (1 << 6)

	)

342 
	#KDC_OPT_RENEWABLE
 (1 << 8)

	)

343 
	#KDC_OPT_REQUEST_ANONYMOUS
 (1 << 14)

	)

344 
	#KDC_OPT_DISABLE_TRANSITED_CHECK
 (1 << 26)

	)

345 
	#KDC_OPT_RENEWABLE_OK
 (1 << 27)

	)

346 
	#KDC_OPT_ENC_TKT_IN_SKEY
 (1 << 28)

	)

347 
	#KDC_OPT_RENEW
 (1 << 30)

	)

348 
	#KDC_OPT_VALIDATE
 (1 << 31)

	)

351 
KDCO±i⁄s
 
	mb
;

352 
krb5_Êags
 
	mi
;

353 } 
	tkrb5_kdc_Êags
;

357 
	#KRB5_VERIFY_AP_REQ_IGNORE_INVALID
 (1 << 0)

	)

359 
	#KRB5_GC_CACHED
 (1U << 0)

	)

360 
	#KRB5_GC_USER_USER
 (1U << 1)

	)

361 
	#KRB5_GC_EXPIRED_OK
 (1U << 2)

	)

362 
	#KRB5_GC_NO_STORE
 (1U << 3)

	)

363 
	#KRB5_GC_FORWARDABLE
 (1U << 4)

	)

364 
	#KRB5_GC_NO_TRANSIT_CHECK
 (1U << 5)

	)

365 
	#KRB5_GC_CONSTRAINED_DELEGATION
 (1U << 6)

	)

368 
	#KRB5_TC_DONT_MATCH_REALM
 (1U << 31)

	)

369 
	#KRB5_TC_MATCH_KEYTYPE
 (1U << 30)

	)

370 
	#KRB5_TC_MATCH_KTYPE
 
KRB5_TC_MATCH_KEYTYPE


	)

371 
	#KRB5_TC_MATCH_SRV_NAMEONLY
 (1 << 29)

	)

372 
	#KRB5_TC_MATCH_FLAGS_EXACT
 (1 << 28)

	)

373 
	#KRB5_TC_MATCH_FLAGS
 (1 << 27)

	)

374 
	#KRB5_TC_MATCH_TIMES_EXACT
 (1 << 26)

	)

375 
	#KRB5_TC_MATCH_TIMES
 (1 << 25)

	)

376 
	#KRB5_TC_MATCH_AUTHDATA
 (1 << 24)

	)

377 
	#KRB5_TC_MATCH_2ND_TKT
 (1 << 23)

	)

378 
	#KRB5_TC_MATCH_IS_SKEY
 (1 << 22)

	)

380 
Auth‹iz©i⁄D©a
 
	tkrb5_authd©a
;

382 
KRB_ERROR
 
	tkrb5_îr‹
;

384 
	skrb5_¸eds
 {

385 
krb5_¥öcùÆ
 
	m˛õ¡
;

386 
krb5_¥öcùÆ
 
	m£rvî
;

387 
krb5_keyblock
 
	m£ssi⁄
;

388 
krb5_times
 
	mtimes
;

389 
krb5_d©a
 
	mtickë
;

390 
krb5_d©a
 
	m£c⁄d_tickë
;

391 
krb5_authd©a
 
	mauthd©a
;

392 
krb5_addªs£s
 
	maddªs£s
;

393 
krb5_tickë_Êags
 
	mÊags
;

394 } 
	tkrb5_¸eds
;

396 
krb5_cc_ˇche_curs‹_d©a
 *
	tkrb5_cc_ˇche_curs‹
;

398 
	skrb5_cc_›s
 {

399 c⁄° *
	m¥efix
;

400 c⁄° * (*
	mgë_«me
)(
	mkrb5_c⁄ãxt
, 
	mkrb5_cˇche
);

401 
krb5_îr‹_code
 (*
ªsﬁve
)(
	mkrb5_c⁄ãxt
, 
	mkrb5_cˇche
 *, const *);

402 
krb5_îr‹_code
 (*
gí_√w
)(
	mkrb5_c⁄ãxt
, 
	mkrb5_cˇche
 *);

403 
krb5_îr‹_code
 (*
öô
)(
	mkrb5_c⁄ãxt
, 
	mkrb5_cˇche
, 
	mkrb5_¥öcùÆ
);

404 
krb5_îr‹_code
 (*
de°roy
)(
	mkrb5_c⁄ãxt
, 
	mkrb5_cˇche
);

405 
krb5_îr‹_code
 (*
˛o£
)(
	mkrb5_c⁄ãxt
, 
	mkrb5_cˇche
);

406 
krb5_îr‹_code
 (*
°‹e
)(
	mkrb5_c⁄ãxt
, 
	mkrb5_cˇche
, 
	mkrb5_¸eds
*);

407 
krb5_îr‹_code
 (*
ªåõve
)(
	mkrb5_c⁄ãxt
, 
	mkrb5_cˇche
,

408 
	mkrb5_Êags
, c⁄° 
	mkrb5_¸eds
*, krb5_creds *);

409 
krb5_îr‹_code
 (*
gë_¥öc
)(
	mkrb5_c⁄ãxt
, 
	mkrb5_cˇche
, 
	mkrb5_¥öcùÆ
*);

410 
krb5_îr‹_code
 (*
gë_fú°
)(
	mkrb5_c⁄ãxt
, 
	mkrb5_cˇche
, 
	mkrb5_cc_curs‹
 *);

411 
krb5_îr‹_code
 (*
gë_√xt
)(
	mkrb5_c⁄ãxt
, 
	mkrb5_cˇche
,

412 
	mkrb5_cc_curs‹
*, 
	mkrb5_¸eds
*);

413 
krb5_îr‹_code
 (*
íd_gë
)(
	mkrb5_c⁄ãxt
, 
	mkrb5_cˇche
, 
	mkrb5_cc_curs‹
*);

414 
krb5_îr‹_code
 (*
ªmove_¸ed
)(
	mkrb5_c⁄ãxt
, 
	mkrb5_cˇche
,

415 
	mkrb5_Êags
, 
	mkrb5_¸eds
*);

416 
krb5_îr‹_code
 (*
£t_Êags
)(
	mkrb5_c⁄ãxt
, 
	mkrb5_cˇche
, 
	mkrb5_Êags
);

417 (*
	mgë_vîsi⁄
)(
	mkrb5_c⁄ãxt
, 
	mkrb5_cˇche
);

418 
krb5_îr‹_code
 (*
gë_ˇche_fú°
)(
	mkrb5_c⁄ãxt
, 
	mkrb5_cc_curs‹
 *);

419 
krb5_îr‹_code
 (*
gë_ˇche_√xt
)(
	mkrb5_c⁄ãxt
, 
	mkrb5_cc_curs‹
, 
	mkrb5_cˇche
 *);

420 
krb5_îr‹_code
 (*
íd_ˇche_gë
)(
	mkrb5_c⁄ãxt
, 
	mkrb5_cc_curs‹
);

421 
krb5_îr‹_code
 (*
move
)(
	mkrb5_c⁄ãxt
, 
	mkrb5_cˇche
, krb5_ccache);

422 
krb5_îr‹_code
 (*
deÁu…_«me
)(
	mkrb5_c⁄ãxt
, **);

423 } 
	tkrb5_cc_›s
;

425 
	gkrb5_log_Ácûôy
;

427 
	skrb5_c⁄fig_bödög
 {

428 íum { 
	mkrb5_c⁄fig_°rög
, 
	mkrb5_c⁄fig_li°
 } 
	mty≥
;

429 *
	m«me
;

430 
krb5_c⁄fig_bödög
 *
	m√xt
;

432 *
	m°rög
;

433 
krb5_c⁄fig_bödög
 *
	mli°
;

434 *
	mgíîic
;

435 } 
	mu
;

438 
krb5_c⁄fig_bödög
 
	tkrb5_c⁄fig_bödög
;

440 
krb5_c⁄fig_bödög
 
	tkrb5_c⁄fig_£˘i⁄
;

442 
	skrb5_tickë
 {

443 
EncTickëP¨t
 
	mtickë
;

444 
krb5_¥öcùÆ
 
	m˛õ¡
;

445 
krb5_¥öcùÆ
 
	m£rvî
;

446 } 
	tkrb5_tickë
;

448 
Authítiˇt‹
 
	tkrb5_authítiˇt‹_d©a
;

450 
krb5_authítiˇt‹_d©a
 *
	tkrb5_authítiˇt‹
;

452 
	gkrb5_rˇche_d©a
;

453 
krb5_rˇche_d©a
 *
	tkrb5_rˇche
;

454 
Authítiˇt‹
 
	tkrb5_d⁄Ÿ_ª∂ay
;

456 
	#KRB5_STORAGE_HOST_BYTEORDER
 0x01

	)

457 
	#KRB5_STORAGE_PRINCIPAL_WRONG_NUM_COMPONENTS
 0x02

	)

458 
	#KRB5_STORAGE_PRINCIPAL_NO_NAME_TYPE
 0x04

	)

459 
	#KRB5_STORAGE_KEYBLOCK_KEYTYPE_TWICE
 0x08

	)

460 
	#KRB5_STORAGE_BYTEORDER_MASK
 0x60

	)

461 
	#KRB5_STORAGE_BYTEORDER_BE
 0x00

	)

462 
	#KRB5_STORAGE_BYTEORDER_LE
 0x20

	)

463 
	#KRB5_STORAGE_BYTEORDER_HOST
 0x40

	)

464 
	#KRB5_STORAGE_CREDS_FLAGS_WRONG_BITORDER
 0x80

	)

466 
	gkrb5_°‹age_d©a
;

467 
krb5_°‹age_d©a
 
	tkrb5_°‹age
;

469 
	skrb5_keyèb_íåy
 {

470 
krb5_¥öcùÆ
 
	m¥öcùÆ
;

471 
krb5_kvno
 
	mvno
;

472 
krb5_keyblock
 
	mkeyblock
;

473 
uöt32_t
 
	mtime°amp
;

474 } 
	tkrb5_keyèb_íåy
;

476 
	skrb5_kt_curs‹
 {

477 
	mfd
;

478 
krb5_°‹age
 *
	m•
;

479 *
	md©a
;

480 } 
	tkrb5_kt_curs‹
;

482 
	gkrb5_keyèb_d©a
;

484 
krb5_keyèb_d©a
 *
	tkrb5_keyèb
;

486 
	#KRB5_KT_PREFIX_MAX_LEN
 30

	)

488 
	skrb5_keyèb_d©a
 {

489 c⁄° *
	m¥efix
;

490 
krb5_îr‹_code
 (*
ªsﬁve
)(
	mkrb5_c⁄ãxt
, c⁄° *, 
	mkrb5_keyèb
);

491 
krb5_îr‹_code
 (*
gë_«me
)(
	mkrb5_c⁄ãxt
, 
	mkrb5_keyèb
, *, 
	msize_t
);

492 
krb5_îr‹_code
 (*
˛o£
)(
	mkrb5_c⁄ãxt
, 
	mkrb5_keyèb
);

493 
krb5_îr‹_code
 (*
gë
)(
	mkrb5_c⁄ãxt
, 
	mkrb5_keyèb
, 
	mkrb5_c⁄°_¥öcùÆ
,

494 
	mkrb5_kvno
, 
	mkrb5_í˘y≥
, 
	mkrb5_keyèb_íåy
*);

495 
krb5_îr‹_code
 (*
°¨t_£q_gë
)(
	mkrb5_c⁄ãxt
, 
	mkrb5_keyèb
, 
	mkrb5_kt_curs‹
*);

496 
krb5_îr‹_code
 (*
√xt_íåy
)(
	mkrb5_c⁄ãxt
, 
	mkrb5_keyèb
,

497 
	mkrb5_keyèb_íåy
*, 
	mkrb5_kt_curs‹
*);

498 
krb5_îr‹_code
 (*
íd_£q_gë
)(
	mkrb5_c⁄ãxt
, 
	mkrb5_keyèb
, 
	mkrb5_kt_curs‹
*);

499 
krb5_îr‹_code
 (*
add
)(
	mkrb5_c⁄ãxt
, 
	mkrb5_keyèb
, 
	mkrb5_keyèb_íåy
*);

500 
krb5_îr‹_code
 (*
ªmove
)(
	mkrb5_c⁄ãxt
, 
	mkrb5_keyèb
, 
	mkrb5_keyèb_íåy
*);

501 *
	md©a
;

502 
öt32_t
 
	mvîsi⁄
;

505 
krb5_keyèb_d©a
 
	tkrb5_kt_›s
;

507 
	skrb5_keyèb_key_¥oc_¨gs
 {

508 
krb5_keyèb
 
	mkeyèb
;

509 
krb5_¥öcùÆ
 
	m¥öcùÆ
;

512 
krb5_keyèb_key_¥oc_¨gs
 
	tkrb5_keyèb_key_¥oc_¨gs
;

514 
	skrb5_ª∂ay_d©a
 {

515 
krb5_time°amp
 
	mtime°amp
;

516 
öt32_t
 
	mu£c
;

517 
uöt32_t
 
	m£q
;

518 } 
	tkrb5_ª∂ay_d©a
;

522 
	mKRB5_AUTH_CONTEXT_DO_TIME
 = 1,

523 
	mKRB5_AUTH_CONTEXT_RET_TIME
 = 2,

524 
	mKRB5_AUTH_CONTEXT_DO_SEQUENCE
 = 4,

525 
	mKRB5_AUTH_CONTEXT_RET_SEQUENCE
 = 8,

526 
	mKRB5_AUTH_CONTEXT_PERMIT_ALL
 = 16,

527 
	mKRB5_AUTH_CONTEXT_USE_SUBKEY
 = 32,

528 
	mKRB5_AUTH_CONTEXT_CLEAR_FORWARDED_CRED
 = 64

533 
	mKRB5_AUTH_CONTEXT_GENERATE_LOCAL_ADDR
 = 1,

534 
	mKRB5_AUTH_CONTEXT_GENERATE_LOCAL_FULL_ADDR
 = 3,

535 
	mKRB5_AUTH_CONTEXT_GENERATE_REMOTE_ADDR
 = 4,

536 
	mKRB5_AUTH_CONTEXT_GENERATE_REMOTE_FULL_ADDR
 = 12

539 
	skrb5_auth_c⁄ãxt_d©a
 {

540 
	mÊags
;

542 
krb5_addªss
 *
	mloˇl_addªss
;

543 
krb5_addªss
 *
	mªmŸe_addªss
;

544 
öt16_t
 
	mloˇl_p‹t
;

545 
öt16_t
 
	mªmŸe_p‹t
;

546 
krb5_keyblock
 *
	mkeyblock
;

547 
krb5_keyblock
 *
	mloˇl_subkey
;

548 
krb5_keyblock
 *
	mªmŸe_subkey
;

550 
uöt32_t
 
	mloˇl_£qnumbî
;

551 
uöt32_t
 
	mªmŸe_£qnumbî
;

553 
krb5_authítiˇt‹
 
	mauthítiˇt‹
;

555 
krb5_poöãr
 
	mi_ve˘‹
;

557 
krb5_rˇche
 
	mrˇche
;

559 
krb5_keyty≥
 
	mkeyty≥
;

560 
krb5_cksumty≥
 
	mcksumty≥
;

562 }
	tkrb5_auth_c⁄ãxt_d©a
, *
	tkrb5_auth_c⁄ãxt
;

565 
KDC_REP
 
	mkdc_ªp
;

566 
EncKDCRïP¨t
 
	míc_∑π
;

567 
KRB_ERROR
 
	mîr‹
;

568 } 
	tkrb5_kdc_ªp
;

570 c⁄° *
heimdÆ_vîsi⁄
, *
heimdÆ_l⁄g_vîsi⁄
;

572 (*
	tkrb5_log_log_func_t
)(const *, const *, *);

573 (*
	tkrb5_log_˛o£_func_t
)(*);

575 
	skrb5_log_Ácûôy
 {

576 *
¥ogøm
;

577 
Àn
;

578 
Ácûôy
 *
vÆ
;

579 } 
	tkrb5_log_Ácûôy
;

581 
EncAPRïP¨t
 
	tkrb5_≠_ªp_íc_∑π
;

583 
	#KRB5_RECVAUTH_IGNORE_VERSION
 1

	)

585 
	#KRB5_SENDAUTH_VERSION
 "KRB5_SENDAUTH_V1.0"

	)

587 
	#KRB5_TGS_NAME_SIZE
 (6)

	)

588 
	#KRB5_TGS_NAME
 ("krbtgt")

	)

590 
	#KRB5_DIGEST_NAME
 ("dige°")

	)

594 c⁄° *
krb5_c⁄fig_fûe
;

595 c⁄° *
krb5_defkey«me
;

598 
KRB5_PROMPT_TYPE_PASSWORD
 = 0x1,

599 
KRB5_PROMPT_TYPE_NEW_PASSWORD
 = 0x2,

600 
KRB5_PROMPT_TYPE_NEW_PASSWORD_AGAIN
 = 0x3,

601 
KRB5_PROMPT_TYPE_PREAUTH
 = 0x4,

602 
KRB5_PROMPT_TYPE_INFO
 = 0x5

603 } 
	tkrb5_¥om±_ty≥
;

605 
	s_krb5_¥om±
 {

606 c⁄° *
¥om±
;

607 
hiddí
;

608 
krb5_d©a
 *
ª∂y
;

609 
krb5_¥om±_ty≥
 
ty≥
;

610 } 
	tkrb5_¥om±
;

612 (*
	tkrb5_¥om±î_f˘
)(
	tkrb5_c⁄ãxt
 ,

617 
	tkrb5_¥om±
 []);

618 
	$krb5_îr‹_code
 (*
	tkrb5_key_¥oc
)(
	tkrb5_c⁄ãxt
 ,

619 
	tkrb5_í˘y≥
 ,

620 
	tkrb5_ß…
 ,

621 
	tkrb5_c⁄°_poöãr
 ,

622 
	tkrb5_keyblock
 ** );

623 
	$krb5_îr‹_code
 (*
	tkrb5_de¸y±_¥oc
)(
	tkrb5_c⁄ãxt
 ,

624 
	tkrb5_keyblock
 * ,

625 
	tkrb5_key_ußge
 ,

626 
	tkrb5_c⁄°_poöãr
 ,

627 
	tkrb5_kdc_ªp
 * );

628 
	$krb5_îr‹_code
 (*
	tkrb5_s2k_¥oc
)(
	tkrb5_c⁄ãxt
 ,

629 
	tkrb5_í˘y≥
 ,

630 
	tkrb5_c⁄°_poöãr
 ,

631 
	tkrb5_ß…
 ,

632 
	tkrb5_d©a
 * ,

633 
	tkrb5_keyblock
 ** );

635 
_krb5_gë_öô_¸eds_›t_¥iv©e
;

637 
	s_krb5_gë_öô_¸eds_›t
 {

638 
krb5_Êags
 
Êags
;

639 
krb5_dñèt
 
tkt_li„
;

640 
krb5_dñèt
 
ª√w_li„
;

641 
f‹w¨dabÀ
;

642 
¥oxübÀ
;

643 
™⁄ymous
;

644 
krb5_í˘y≥
 *
ëy≥_li°
;

645 
ëy≥_li°_Àngth
;

646 
krb5_addªs£s
 *
addªss_li°
;

649 
krb5_¥óuthty≥
 *
¥óuth_li°
;

650 
¥óuth_li°_Àngth
;

651 
krb5_d©a
 *
ß…
;

652 
_krb5_gë_öô_¸eds_›t_¥iv©e
 *
›t_¥iv©e
;

653 } 
	tkrb5_gë_öô_¸eds_›t
;

655 
	#KRB5_GET_INIT_CREDS_OPT_TKT_LIFE
 0x0001

	)

656 
	#KRB5_GET_INIT_CREDS_OPT_RENEW_LIFE
 0x0002

	)

657 
	#KRB5_GET_INIT_CREDS_OPT_FORWARDABLE
 0x0004

	)

658 
	#KRB5_GET_INIT_CREDS_OPT_PROXIABLE
 0x0008

	)

659 
	#KRB5_GET_INIT_CREDS_OPT_ETYPE_LIST
 0x0010

	)

660 
	#KRB5_GET_INIT_CREDS_OPT_ADDRESS_LIST
 0x0020

	)

661 
	#KRB5_GET_INIT_CREDS_OPT_PREAUTH_LIST
 0x0040

	)

662 
	#KRB5_GET_INIT_CREDS_OPT_SALT
 0x0080

	)

663 
	#KRB5_GET_INIT_CREDS_OPT_ANONYMOUS
 0x0100

	)

664 
	#KRB5_GET_INIT_CREDS_OPT_DISABLE_TRANSITED_CHECK
 0x0200

	)

666 
	s_krb5_vîify_öô_¸eds_›t
 {

667 
krb5_Êags
 
Êags
;

668 
≠_ªq_noÁû
;

669 } 
	tkrb5_vîify_öô_¸eds_›t
;

671 
	#KRB5_VERIFY_INIT_CREDS_OPT_AP_REQ_NOFAIL
 0x0001

	)

673 
	skrb5_vîify_›t
 {

674 
Êags
;

675 
krb5_cˇche
 
cˇche
;

676 
krb5_keyèb
 
keyèb
;

677 
krb5_boﬁón
 
£cuª
;

678 c⁄° *
£rvi˚
;

679 } 
	tkrb5_vîify_›t
;

681 
	#KRB5_VERIFY_LREALMS
 1

	)

682 
	#KRB5_VERIFY_NO_ADDRESSES
 2

	)

684 c⁄° 
krb5_cc_›s
 
krb5_acc_›s
;

685 c⁄° 
krb5_cc_›s
 
krb5_fcc_›s
;

686 c⁄° 
krb5_cc_›s
 
krb5_mcc_›s
;

687 c⁄° 
krb5_cc_›s
 
krb5_kcm_›s
;

689 c⁄° 
krb5_kt_›s
 
krb5_fkt_›s
;

690 c⁄° 
krb5_kt_›s
 
krb5_wrfkt_›s
;

691 c⁄° 
krb5_kt_›s
 
krb5_javakt_›s
;

692 c⁄° 
krb5_kt_›s
 
krb5_mkt_›s
;

693 c⁄° 
krb5_kt_›s
 
krb5_akf_›s
;

694 c⁄° 
krb5_kt_›s
 
krb4_fkt_›s
;

695 c⁄° 
krb5_kt_›s
 
krb5_§vèb_fkt_›s
;

696 c⁄° 
krb5_kt_›s
 
krb5_™y_›s
;

698 
	#KRB5_KPASSWD_VERS_CHANGEPW
 1

	)

699 
	#KRB5_KPASSWD_VERS_SETPW
 0xff80

	)

701 
	#KRB5_KPASSWD_SUCCESS
 0

	)

702 
	#KRB5_KPASSWD_MALFORMED
 1

	)

703 
	#KRB5_KPASSWD_HARDERROR
 2

	)

704 
	#KRB5_KPASSWD_AUTHERROR
 3

	)

705 
	#KRB5_KPASSWD_SOFTERROR
 4

	)

706 
	#KRB5_KPASSWD_ACCESSDENIED
 5

	)

707 
	#KRB5_KPASSWD_BAD_VERSION
 6

	)

708 
	#KRB5_KPASSWD_INITIAL_FLAG_NEEDED
 7

	)

710 
	#KPASSWD_PORT
 464

	)

713 
krb5_krbh°_d©a
;

714 
krb5_krbh°_d©a
 *
	tkrb5_krbh°_h™dÀ
;

716 
	#KRB5_KRBHST_KDC
 1

	)

717 
	#KRB5_KRBHST_ADMIN
 2

	)

718 
	#KRB5_KRBHST_CHANGEPW
 3

	)

719 
	#KRB5_KRBHST_KRB524
 4

	)

720 
	#KRB5_KRBHST_KCA
 5

	)

722 
	skrb5_krbh°_öfo
 {

723 íum { 
KRB5_KRBHST_UDP
,

724 
KRB5_KRBHST_TCP
,

725 
KRB5_KRBHST_HTTP
 } 
¥Ÿo
;

726 
p‹t
;

727 
def_p‹t
;

728 
addröfo
 *
ai
;

729 
krb5_krbh°_öfo
 *
√xt
;

730 
ho°«me
[1];

731 } 
	tkrb5_krbh°_öfo
;

735 
KRB5_KRBHST_FLAGS_MASTER
 = 1,

736 
KRB5_KRBHST_FLAGS_LARGE_MSG
 = 2

739 
	$krb5_îr‹_code
 (*
	tkrb5_£nd_to_kdc_func
)(
	tkrb5_c⁄ãxt
,

741 
	tkrb5_krbh°_öfo
 *,

742 c⁄° 
	tkrb5_d©a
 *,

743 
	tkrb5_d©a
 *);

747 
KRB5_PRINCIPAL_PARSE_NO_REALM
 = 1,

748 
KRB5_PRINCIPAL_PARSE_MUST_REALM
 = 2,

749 
KRB5_PRINCIPAL_PARSE_ENTERPRISE
 = 4

754 
KRB5_PRINCIPAL_UNPARSE_SHORT
 = 1,

755 
KRB5_PRINCIPAL_UNPARSE_NO_REALM
 = 2,

756 
KRB5_PRINCIPAL_UNPARSE_DISPLAY
 = 4

759 
krb5_£ndto_˘x_d©a
 *
	tkrb5_£ndto_˘x
;

761 
	#KRB5_SENDTO_DONE
 0

	)

762 
	#KRB5_SENDTO_RESTART
 1

	)

763 
	#KRB5_SENDTO_CONTINUE
 2

	)

765 
	$krb5_îr‹_code
 (*
	tkrb5_£ndto_˘x_func
)(
	tkrb5_c⁄ãxt
, 
	tkrb5_£ndto_˘x
, *, c⁄° 
	tkrb5_d©a
 *, *);

767 
krb5_∂ugö
;

768 
	ekrb5_∂ugö_ty≥
 {

769 
PLUGIN_TYPE_DATA
 = 1,

770 
PLUGIN_TYPE_FUNC


773 
¸edítüls
;

774 
gë¨gs
;

775 
sockaddr
;

777 
	~<krb5-¥Ÿos.h
>

	@/usr/include/machine/_types.h

39 #i‚de‡
_MACHINE__TYPES_H_


40 
	#_MACHINE__TYPES_H_


	)

42 #i‚de‡
_SYS_CDEFS_H_


43 #îr‹ 
this
 
fûe
 
√eds
 
sys
/
cdefs
.
h
 
as
 
a
 
¥îequisôe


46 
	#__NO_STRICT_ALIGNMENT


	)

51 
__sig√d
 
	t__öt8_t
;

52 
	t__uöt8_t
;

53 
	t__öt16_t
;

54 
	t__uöt16_t
;

55 
	t__öt32_t
;

56 
	t__uöt32_t
;

57 
	t__öt64_t
;

58 
	t__uöt64_t
;

63 
__öt32_t
 
	t__˛ock_t
;

64 
	t__˝umask_t
;

65 
__öt64_t
 
	t__¸ôiˇl_t
;

66 
	t__doubÀ_t
;

67 
	t__Êﬂt_t
;

68 
__öt64_t
 
	t__ötÂå_t
;

69 
__öt64_t
 
	t__ötmax_t
;

70 
__öt64_t
 
	t__öçå_t
;

71 
__öt32_t
 
	t__öt_Á°8_t
;

72 
__öt32_t
 
	t__öt_Á°16_t
;

73 
__öt32_t
 
	t__öt_Á°32_t
;

74 
__öt64_t
 
	t__öt_Á°64_t
;

75 
__öt8_t
 
	t__öt_Àa°8_t
;

76 
__öt16_t
 
	t__öt_Àa°16_t
;

77 
__öt32_t
 
	t__öt_Àa°32_t
;

78 
__öt64_t
 
	t__öt_Àa°64_t
;

79 
__öt64_t
 
	t__±rdiff_t
;

80 
__öt64_t
 
	t__ªgi°î_t
;

81 
__öt64_t
 
	t__£gsz_t
;

82 
__uöt64_t
 
	t__size_t
;

83 
__öt64_t
 
	t__ssize_t
;

84 
__öt64_t
 
	t__time_t
;

85 
__uöt64_t
 
	t__uötÂå_t
;

86 
__uöt64_t
 
	t__uötmax_t
;

87 
__uöt64_t
 
	t__uöçå_t
;

88 
__uöt32_t
 
	t__uöt_Á°8_t
;

89 
__uöt32_t
 
	t__uöt_Á°16_t
;

90 
__uöt32_t
 
	t__uöt_Á°32_t
;

91 
__uöt64_t
 
	t__uöt_Á°64_t
;

92 
__uöt8_t
 
	t__uöt_Àa°8_t
;

93 
__uöt16_t
 
	t__uöt_Àa°16_t
;

94 
__uöt32_t
 
	t__uöt_Àa°32_t
;

95 
__uöt64_t
 
	t__uöt_Àa°64_t
;

96 
__uöt64_t
 
	t__u_ªgi°î_t
;

97 
__uöt64_t
 
	t__vm_off£t_t
;

98 
__öt64_t
 
	t__vm_ooff£t_t
;

99 
__uöt64_t
 
	t__vm_∑ddr_t
;

100 
__uöt64_t
 
	t__vm_pödex_t
;

101 
__uöt64_t
 
	t__vm_size_t
;

106 #ifde‡
__GNUCLIKE_BUILTIN_VARARGS


107 
__buûtö_va_li°
 
	t__va_li°
;

108 #ñi‡
deföed
(
löt
)

109 * 
	t__va_li°
;

111 #i‡
deföed
(
__GNUC_VA_LIST_COMPATIBILITY
Ë&& !deföed(
__GNUC_VA_LIST
) \

112 && !
	$deföed
(
__NO_GNUC_VA_LIST
)

113 
	#__GNUC_VA_LIST


	)

114 
__va_li°
 
	t__gnuc_va_li°
;

	@/usr/include/machine/atomic.h

28 #i‚de‡
_MACHINE_ATOMIC_H_


29 
	#_MACHINE_ATOMIC_H_


	)

31 #i‚de‡
_SYS_CDEFS_H_


32 #îr‹ 
this
 
fûe
 
√eds
 
sys
/
cdefs
.
h
 
as
 
a
 
¥îequisôe


35 
	#mb
(Ë
__asm
 
	`__vﬁ©ûe
("m„n˚;" : : : "mem‹y")

	)

36 
	#wmb
(Ë
__asm
 
	`__vﬁ©ûe
("s„n˚;" : : : "mem‹y")

	)

37 
	#rmb
(Ë
__asm
 
	`__vﬁ©ûe
("l„n˚;" : : : "mem‹y")

	)

74 #i‡
deföed
(
KLD_MODULE
Ë|| !deföed(
__GNUCLIKE_ASM
)

75 
	#ATOMIC_ASM
(
NAME
, 
TYPE
, 
OP
, 
CONS
, 
V
) \

76 
©omic_
##
NAME
##
_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
, u_##TYPE 
v
); \

77 
©omic_
##
NAME
##
_b¨r_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
, u_##TYPE 
v
)

	)

79 
©omic_cmp£t_öt
(vﬁ©ûê
u_öt
 *
d°
, u_öà
exp
, u_öà
§c
);

80 
©omic_cmp£t_l⁄g
(vﬁ©ûê
u_l⁄g
 *
d°
, u_l⁄g 
exp
, u_l⁄g 
§c
);

81 
u_öt
 
©omic_„tchadd_öt
(vﬁ©ûêu_öà*
p
, u_öà
v
);

82 
u_l⁄g
 
©omic_„tchadd_l⁄g
(vﬁ©ûêu_l⁄g *
p
, u_l⁄g 
v
);

84 
	#ATOMIC_STORE_LOAD
(
TYPE
, 
LOP
, 
SOP
) \

85 
u_
##
TYPE
 
©omic_lﬂd_acq_
##
	`TYPE
(vﬁ©ûêu_##TYPE *
p
); \

86 
©omic_°‹e_ªl_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
, u_##TYPE 
v
)

	)

94 #i‡
deföed
(
SMP
Ë|| !deföed(
_KERNEL
)

95 
	#MPLOCKED
 "lock ; "

	)

97 
	#MPLOCKED


	)

105 
	#ATOMIC_ASM
(
NAME
, 
TYPE
, 
OP
, 
CONS
, 
V
) \

106 
__ölöe
 \

107 
©omic_
##
NAME
##
_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
, u_##TYPE 
v
)\

109 
__asm
 
	`__vﬁ©ûe
(
MPLOCKED
 
OP
 \

110 : "=m" (*
p
) \

111 : 
	`CONS
 (
V
), "m" (*
p
) \

115 
__ölöe
 \

116 
©omic_
##
NAME
##
_b¨r_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
, u_##TYPE 
v
)\

118 
__asm
 
	`__vﬁ©ûe
(
MPLOCKED
 
OP
 \

119 : "=m" (*
p
) \

120 : 
	`CONS
 (
V
), "m" (*
p
) \

123 
__hack


	)

133 
__ölöe
 

134 
	$©omic_cmp£t_öt
(vﬁ©ûê
u_öt
 *
d°
, u_öà
exp
, u_öà
§c
)

136 
u_ch¨
 
ªs
;

138 
__asm
 
	`__vﬁ©ûe
(

139 " " 
MPLOCKED
 " "

144 : "˜" (
ªs
),

145 "=m" (*
d°
)

146 : "r" (
§c
),

147 "a" (
exp
),

148 "m" (*
d°
)

151  (
ªs
);

152 
	}
}

154 
__ölöe
 

155 
	$©omic_cmp£t_l⁄g
(vﬁ©ûê
u_l⁄g
 *
d°
, u_l⁄g 
exp
, u_l⁄g 
§c
)

157 
u_ch¨
 
ªs
;

159 
__asm
 
	`__vﬁ©ûe
(

160 " " 
MPLOCKED
 " "

165 : "˜" (
ªs
),

166 "=m" (*
d°
)

167 : "r" (
§c
),

168 "a" (
exp
),

169 "m" (*
d°
)

172  (
ªs
);

173 
	}
}

179 
__ölöe
 
u_öt


180 
	$©omic_„tchadd_öt
(vﬁ©ûê
u_öt
 *
p
, u_öà
v
)

183 
__asm
 
	`__vﬁ©ûe
(

184 " " 
MPLOCKED
 " "

187 : "+r" (
v
),

188 "=m" (*
p
)

189 : "m" (*
p
)

191  (
v
);

192 
	}
}

198 
__ölöe
 
u_l⁄g


199 
	$©omic_„tchadd_l⁄g
(vﬁ©ûê
u_l⁄g
 *
p
, u_l⁄g 
v
)

202 
__asm
 
	`__vﬁ©ûe
(

203 " " 
MPLOCKED
 " "

206 : "+r" (
v
),

207 "=m" (*
p
)

208 : "m" (*
p
)

210  (
v
);

211 
	}
}

213 #i‡
deföed
(
_KERNEL
Ë&& !deföed(
SMP
)

222 
	#ATOMIC_STORE_LOAD
(
TYPE
, 
LOP
, 
SOP
) \

223 
__ölöe
 
u_
##
TYPE
 \

224 
©omic_lﬂd_acq_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
) \

226 
u_
##
TYPE
 
tmp
; \

228 
tmp
 = *
p
; \

229 
__asm
 
	`__vﬁ©ûe
 ("" : : : "memory"); \

230  (
tmp
); \

233 
__ölöe
 \

234 
©omic_°‹e_ªl_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
, u_##TYPE 
v
)\

236 
__asm
 
	`__vﬁ©ûe
 ("" : : : "memory"); \

237 *
p
 = 
v
; \

239 
__hack


	)

243 
	#ATOMIC_STORE_LOAD
(
TYPE
, 
LOP
, 
SOP
) \

244 
__ölöe
 
u_
##
TYPE
 \

245 
©omic_lﬂd_acq_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
) \

247 
u_
##
TYPE
 
ªs
; \

249 
__asm
 
	`__vﬁ©ûe
(
MPLOCKED
 
LOP
 \

250 : "˜" (
ªs
), \

251 "=m" (*
p
) \

252 : "m" (*
p
) \

255  (
ªs
); \

261 
__ölöe
 \

262 
©omic_°‹e_ªl_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
, u_##TYPE 
v
)\

264 
__asm
 
	`__vﬁ©ûe
(
SOP
 \

265 : "=m" (*
p
), \

266 "+r" (
v
) \

267 : "m" (*
p
) \

270 
__hack


	)

276 
ATOMIC_ASM
(
£t
, , "‹b %b1,%0", "iq", 
v
);

277 
ATOMIC_ASM
(
˛ór
, , "™db %b1,%0", "iq", ~
v
);

278 
ATOMIC_ASM
(
add
, , "addb %b1,%0", "iq", 
v
);

279 
ATOMIC_ASM
(
subåa˘
, , "subb %b1,%0", "iq", 
v
);

281 
ATOMIC_ASM
(
£t
, , "‹w %w1,%0", "ú", 
v
);

282 
ATOMIC_ASM
(
˛ór
, , "™dw %w1,%0", "ú", ~
v
);

283 
ATOMIC_ASM
(
add
, , "addw %w1,%0", "ú", 
v
);

284 
ATOMIC_ASM
(
subåa˘
, , "subw %w1,%0", "ú", 
v
);

286 
ATOMIC_ASM
(
£t
, , "‹»%1,%0", "ú", 
v
);

287 
ATOMIC_ASM
(
˛ór
, , "™d»%1,%0", "ú", ~
v
);

288 
ATOMIC_ASM
(
add
, , "add»%1,%0", "ú", 
v
);

289 
ATOMIC_ASM
(
subåa˘
, , "sub»%1,%0", "ú", 
v
);

291 
ATOMIC_ASM
(
£t
, , "‹q %1,%0", "ú", 
v
);

292 
ATOMIC_ASM
(
˛ór
, , "™dq %1,%0", "ú", ~
v
);

293 
ATOMIC_ASM
(
add
, , "addq %1,%0", "ú", 
v
);

294 
ATOMIC_ASM
(
subåa˘
, , "subq %1,%0", "ú", 
v
);

296 
ATOMIC_STORE_LOAD
(, "cmpxchgb %b0,%1", "xchgb %b1,%0");

297 
ATOMIC_STORE_LOAD
(,"cmpxchgw %w0,%1", "xchgw %w1,%0");

298 
ATOMIC_STORE_LOAD
(, "cmpxchgl %0,%1", "xchgl %1,%0");

299 
ATOMIC_STORE_LOAD
(, "cmpxchgq %0,%1", "xchgq %1,%0");

301 #unde‡
ATOMIC_ASM


302 #unde‡
ATOMIC_STORE_LOAD


304 #i‚de‡
WANT_FUNCTIONS


307 #ifde‡
__GNUCLIKE_ASM


309 
__ölöe
 
u_öt


310 
	$©omic_ªad™d˛ór_öt
(vﬁ©ûê
u_öt
 *
addr
)

312 
u_öt
 
ªs
;

314 
ªs
 = 0;

315 
__asm
 
	`__vﬁ©ûe
(

318 : "+r" (
ªs
),

319 "=m" (*
addr
)

320 : "m" (*
addr
));

322  (
ªs
);

323 
	}
}

325 
__ölöe
 
u_l⁄g


326 
	$©omic_ªad™d˛ór_l⁄g
(vﬁ©ûê
u_l⁄g
 *
addr
)

328 
u_l⁄g
 
ªs
;

330 
ªs
 = 0;

331 
__asm
 
	`__vﬁ©ûe
(

334 : "+r" (
ªs
),

335 "=m" (*
addr
)

336 : "m" (*
addr
));

338  (
ªs
);

339 
	}
}

343 
u_öt
 
©omic_ªad™d˛ór_öt
(vﬁ©ûêu_öà*
addr
);

344 
u_l⁄g
 
©omic_ªad™d˛ór_l⁄g
(vﬁ©ûêu_l⁄g *
addr
);

348 
	#©omic_£t_acq_ch¨
 
©omic_£t_b¨r_ch¨


	)

349 
	#©omic_£t_ªl_ch¨
 
©omic_£t_b¨r_ch¨


	)

350 
	#©omic_˛ór_acq_ch¨
 
©omic_˛ór_b¨r_ch¨


	)

351 
	#©omic_˛ór_ªl_ch¨
 
©omic_˛ór_b¨r_ch¨


	)

352 
	#©omic_add_acq_ch¨
 
©omic_add_b¨r_ch¨


	)

353 
	#©omic_add_ªl_ch¨
 
©omic_add_b¨r_ch¨


	)

354 
	#©omic_subåa˘_acq_ch¨
 
©omic_subåa˘_b¨r_ch¨


	)

355 
	#©omic_subåa˘_ªl_ch¨
 
©omic_subåa˘_b¨r_ch¨


	)

357 
	#©omic_£t_acq_sh‹t
 
©omic_£t_b¨r_sh‹t


	)

358 
	#©omic_£t_ªl_sh‹t
 
©omic_£t_b¨r_sh‹t


	)

359 
	#©omic_˛ór_acq_sh‹t
 
©omic_˛ór_b¨r_sh‹t


	)

360 
	#©omic_˛ór_ªl_sh‹t
 
©omic_˛ór_b¨r_sh‹t


	)

361 
	#©omic_add_acq_sh‹t
 
©omic_add_b¨r_sh‹t


	)

362 
	#©omic_add_ªl_sh‹t
 
©omic_add_b¨r_sh‹t


	)

363 
	#©omic_subåa˘_acq_sh‹t
 
©omic_subåa˘_b¨r_sh‹t


	)

364 
	#©omic_subåa˘_ªl_sh‹t
 
©omic_subåa˘_b¨r_sh‹t


	)

366 
	#©omic_£t_acq_öt
 
©omic_£t_b¨r_öt


	)

367 
	#©omic_£t_ªl_öt
 
©omic_£t_b¨r_öt


	)

368 
	#©omic_˛ór_acq_öt
 
©omic_˛ór_b¨r_öt


	)

369 
	#©omic_˛ór_ªl_öt
 
©omic_˛ór_b¨r_öt


	)

370 
	#©omic_add_acq_öt
 
©omic_add_b¨r_öt


	)

371 
	#©omic_add_ªl_öt
 
©omic_add_b¨r_öt


	)

372 
	#©omic_subåa˘_acq_öt
 
©omic_subåa˘_b¨r_öt


	)

373 
	#©omic_subåa˘_ªl_öt
 
©omic_subåa˘_b¨r_öt


	)

374 
	#©omic_cmp£t_acq_öt
 
©omic_cmp£t_öt


	)

375 
	#©omic_cmp£t_ªl_öt
 
©omic_cmp£t_öt


	)

377 
	#©omic_£t_acq_l⁄g
 
©omic_£t_b¨r_l⁄g


	)

378 
	#©omic_£t_ªl_l⁄g
 
©omic_£t_b¨r_l⁄g


	)

379 
	#©omic_˛ór_acq_l⁄g
 
©omic_˛ór_b¨r_l⁄g


	)

380 
	#©omic_˛ór_ªl_l⁄g
 
©omic_˛ór_b¨r_l⁄g


	)

381 
	#©omic_add_acq_l⁄g
 
©omic_add_b¨r_l⁄g


	)

382 
	#©omic_add_ªl_l⁄g
 
©omic_add_b¨r_l⁄g


	)

383 
	#©omic_subåa˘_acq_l⁄g
 
©omic_subåa˘_b¨r_l⁄g


	)

384 
	#©omic_subåa˘_ªl_l⁄g
 
©omic_subåa˘_b¨r_l⁄g


	)

385 
	#©omic_cmp£t_acq_l⁄g
 
©omic_cmp£t_l⁄g


	)

386 
	#©omic_cmp£t_ªl_l⁄g
 
©omic_cmp£t_l⁄g


	)

389 
	#©omic_£t_8
 
©omic_£t_ch¨


	)

390 
	#©omic_£t_acq_8
 
©omic_£t_acq_ch¨


	)

391 
	#©omic_£t_ªl_8
 
©omic_£t_ªl_ch¨


	)

392 
	#©omic_˛ór_8
 
©omic_˛ór_ch¨


	)

393 
	#©omic_˛ór_acq_8
 
©omic_˛ór_acq_ch¨


	)

394 
	#©omic_˛ór_ªl_8
 
©omic_˛ór_ªl_ch¨


	)

395 
	#©omic_add_8
 
©omic_add_ch¨


	)

396 
	#©omic_add_acq_8
 
©omic_add_acq_ch¨


	)

397 
	#©omic_add_ªl_8
 
©omic_add_ªl_ch¨


	)

398 
	#©omic_subåa˘_8
 
©omic_subåa˘_ch¨


	)

399 
	#©omic_subåa˘_acq_8
 
©omic_subåa˘_acq_ch¨


	)

400 
	#©omic_subåa˘_ªl_8
 
©omic_subåa˘_ªl_ch¨


	)

401 
	#©omic_lﬂd_acq_8
 
©omic_lﬂd_acq_ch¨


	)

402 
	#©omic_°‹e_ªl_8
 
©omic_°‹e_ªl_ch¨


	)

405 
	#©omic_£t_16
 
©omic_£t_sh‹t


	)

406 
	#©omic_£t_acq_16
 
©omic_£t_acq_sh‹t


	)

407 
	#©omic_£t_ªl_16
 
©omic_£t_ªl_sh‹t


	)

408 
	#©omic_˛ór_16
 
©omic_˛ór_sh‹t


	)

409 
	#©omic_˛ór_acq_16
 
©omic_˛ór_acq_sh‹t


	)

410 
	#©omic_˛ór_ªl_16
 
©omic_˛ór_ªl_sh‹t


	)

411 
	#©omic_add_16
 
©omic_add_sh‹t


	)

412 
	#©omic_add_acq_16
 
©omic_add_acq_sh‹t


	)

413 
	#©omic_add_ªl_16
 
©omic_add_ªl_sh‹t


	)

414 
	#©omic_subåa˘_16
 
©omic_subåa˘_sh‹t


	)

415 
	#©omic_subåa˘_acq_16
 
©omic_subåa˘_acq_sh‹t


	)

416 
	#©omic_subåa˘_ªl_16
 
©omic_subåa˘_ªl_sh‹t


	)

417 
	#©omic_lﬂd_acq_16
 
©omic_lﬂd_acq_sh‹t


	)

418 
	#©omic_°‹e_ªl_16
 
©omic_°‹e_ªl_sh‹t


	)

421 
	#©omic_£t_32
 
©omic_£t_öt


	)

422 
	#©omic_£t_acq_32
 
©omic_£t_acq_öt


	)

423 
	#©omic_£t_ªl_32
 
©omic_£t_ªl_öt


	)

424 
	#©omic_˛ór_32
 
©omic_˛ór_öt


	)

425 
	#©omic_˛ór_acq_32
 
©omic_˛ór_acq_öt


	)

426 
	#©omic_˛ór_ªl_32
 
©omic_˛ór_ªl_öt


	)

427 
	#©omic_add_32
 
©omic_add_öt


	)

428 
	#©omic_add_acq_32
 
©omic_add_acq_öt


	)

429 
	#©omic_add_ªl_32
 
©omic_add_ªl_öt


	)

430 
	#©omic_subåa˘_32
 
©omic_subåa˘_öt


	)

431 
	#©omic_subåa˘_acq_32
 
©omic_subåa˘_acq_öt


	)

432 
	#©omic_subåa˘_ªl_32
 
©omic_subåa˘_ªl_öt


	)

433 
	#©omic_lﬂd_acq_32
 
©omic_lﬂd_acq_öt


	)

434 
	#©omic_°‹e_ªl_32
 
©omic_°‹e_ªl_öt


	)

435 
	#©omic_cmp£t_32
 
©omic_cmp£t_öt


	)

436 
	#©omic_cmp£t_acq_32
 
©omic_cmp£t_acq_öt


	)

437 
	#©omic_cmp£t_ªl_32
 
©omic_cmp£t_ªl_öt


	)

438 
	#©omic_ªad™d˛ór_32
 
©omic_ªad™d˛ór_öt


	)

439 
	#©omic_„tchadd_32
 
©omic_„tchadd_öt


	)

442 
	#©omic_£t_64
 
©omic_£t_l⁄g


	)

443 
	#©omic_£t_acq_64
 
©omic_£t_acq_l⁄g


	)

444 
	#©omic_£t_ªl_64
 
©omic_£t_ªl_l⁄g


	)

445 
	#©omic_˛ór_64
 
©omic_˛ór_l⁄g


	)

446 
	#©omic_˛ór_acq_64
 
©omic_˛ór_acq_l⁄g


	)

447 
	#©omic_˛ór_ªl_64
 
©omic_˛ór_ªl_l⁄g


	)

448 
	#©omic_add_64
 
©omic_add_l⁄g


	)

449 
	#©omic_add_acq_64
 
©omic_add_acq_l⁄g


	)

450 
	#©omic_add_ªl_64
 
©omic_add_ªl_l⁄g


	)

451 
	#©omic_subåa˘_64
 
©omic_subåa˘_l⁄g


	)

452 
	#©omic_subåa˘_acq_64
 
©omic_subåa˘_acq_l⁄g


	)

453 
	#©omic_subåa˘_ªl_64
 
©omic_subåa˘_ªl_l⁄g


	)

454 
	#©omic_lﬂd_acq_64
 
©omic_lﬂd_acq_l⁄g


	)

455 
	#©omic_°‹e_ªl_64
 
©omic_°‹e_ªl_l⁄g


	)

456 
	#©omic_cmp£t_64
 
©omic_cmp£t_l⁄g


	)

457 
	#©omic_cmp£t_acq_64
 
©omic_cmp£t_acq_l⁄g


	)

458 
	#©omic_cmp£t_ªl_64
 
©omic_cmp£t_ªl_l⁄g


	)

459 
	#©omic_ªad™d˛ór_64
 
©omic_ªad™d˛ór_l⁄g


	)

462 
	#©omic_£t_±r
 
©omic_£t_l⁄g


	)

463 
	#©omic_£t_acq_±r
 
©omic_£t_acq_l⁄g


	)

464 
	#©omic_£t_ªl_±r
 
©omic_£t_ªl_l⁄g


	)

465 
	#©omic_˛ór_±r
 
©omic_˛ór_l⁄g


	)

466 
	#©omic_˛ór_acq_±r
 
©omic_˛ór_acq_l⁄g


	)

467 
	#©omic_˛ór_ªl_±r
 
©omic_˛ór_ªl_l⁄g


	)

468 
	#©omic_add_±r
 
©omic_add_l⁄g


	)

469 
	#©omic_add_acq_±r
 
©omic_add_acq_l⁄g


	)

470 
	#©omic_add_ªl_±r
 
©omic_add_ªl_l⁄g


	)

471 
	#©omic_subåa˘_±r
 
©omic_subåa˘_l⁄g


	)

472 
	#©omic_subåa˘_acq_±r
 
©omic_subåa˘_acq_l⁄g


	)

473 
	#©omic_subåa˘_ªl_±r
 
©omic_subåa˘_ªl_l⁄g


	)

474 
	#©omic_lﬂd_acq_±r
 
©omic_lﬂd_acq_l⁄g


	)

475 
	#©omic_°‹e_ªl_±r
 
©omic_°‹e_ªl_l⁄g


	)

476 
	#©omic_cmp£t_±r
 
©omic_cmp£t_l⁄g


	)

477 
	#©omic_cmp£t_acq_±r
 
©omic_cmp£t_acq_l⁄g


	)

478 
	#©omic_cmp£t_ªl_±r
 
©omic_cmp£t_ªl_l⁄g


	)

479 
	#©omic_ªad™d˛ór_±r
 
©omic_ªad™d˛ór_l⁄g


	)

	@/usr/include/machine/signal.h

34 #i‚de‡
_MACHINE_SIGNAL_H_


35 
	#_MACHINE_SIGNAL_H_


	)

37 
	~<sys/cdefs.h
>

38 
	~<sys/_sig£t.h
>

44 
	tsig_©omic_t
;

46 #i‡
__BSD_VISIBLE


47 
	~<machöe/å≠.h
>

63 
	ssigc⁄ãxt
 {

64 
__sig£t
 
	msc_mask
;

65 
	msc_⁄°ack
;

66 
	msc_rdi
;

67 
	msc_rsi
;

68 
	msc_rdx
;

69 
	msc_rcx
;

70 
	msc_r8
;

71 
	msc_r9
;

72 
	msc_øx
;

73 
	msc_rbx
;

74 
	msc_rbp
;

75 
	msc_r10
;

76 
	msc_r11
;

77 
	msc_r12
;

78 
	msc_r13
;

79 
	msc_r14
;

80 
	msc_r15
;

81 
	msc_å≠no
;

82 
	msc_fs
;

83 
	msc_gs
;

84 
	msc_addr
;

85 
	msc_Êags
;

86 
	msc_es
;

87 
	msc_ds
;

88 
	msc_îr
;

89 
	msc_rù
;

90 
	msc_cs
;

91 
	msc_rÊags
;

92 
	msc_r•
;

93 
	msc_ss
;

94 
	msc_Àn
;

99 
	msc_Âf‹m©
;

100 
	msc_ow√dÂ
;

101 
	msc_Â°©e
[64] 
__Æig√d
(16);

103 
	msc_fsba£
;

104 
	msc_gsba£
;

106 
	msc_xÂu°©e
;

107 
	msc_xÂu°©e_Àn
;

109 
	msc_•¨e
[4];

	@/usr/include/openssl/pq_compat.h

60 #i‚de‡
HEADER_PQ_COMPAT_H


61 
	#HEADER_PQ_COMPAT_H


	)

63 
	~<›ís¶/›ís¶c⁄f.h
>

64 
	~<›ís¶/bn.h
>

78 #i‡(
deföed
(
THIRTY_TWO_BIT
Ë&& !deföed(
BN_LLONG
)Ë|| deföed(
SIXTEEN_BIT
Ë|| deföed(
EIGHT_BIT
)

80 
	#PQ_64BIT_IS_INTEGER
 0

	)

81 
	#PQ_64BIT_IS_BIGNUM
 1

	)

83 
	#PQ_64BIT
 
BIGNUM


	)

84 
	#PQ_64BIT_CTX
 
BN_CTX


	)

86 
	#pq_64bô_öô
(
x
Ë
	`BN_öô
(x)

	)

87 
	#pq_64bô_‰ì
(
x
Ë
	`BN_‰ì
(x)

	)

89 
	#pq_64bô_˘x_√w
(
˘x
Ë
	`BN_CTX_√w
()

	)

90 
	#pq_64bô_˘x_‰ì
(
x
Ë
	`BN_CTX_‰ì
(x)

	)

92 
	#pq_64bô_assign
(
x
, 
y
Ë
	`BN_c›y
(x, y)

	)

93 
	#pq_64bô_assign_w‹d
(
x
, 
y
Ë
	`BN_£t_w‹d
(x, y)

	)

94 
	#pq_64bô_gt
(
x
, 
y
Ë
	`BN_ucmp
(x, yË>1 ? 1 : 0

	)

95 
	#pq_64bô_eq
(
x
, 
y
Ë
	`BN_ucmp
(x, yË=0 ? 1 : 0

	)

96 
	#pq_64bô_add_w‹d
(
x
, 
w
Ë
	`BN_add_w‹d
(x, w)

	)

97 
	#pq_64bô_sub
(
r
, 
x
, 
y
Ë
	`BN_sub
‘, x, y)

	)

98 
	#pq_64bô_sub_w‹d
(
x
, 
w
Ë
	`BN_sub_w‹d
(x, w)

	)

99 
	#pq_64bô_mod
(
r
, 
x
, 
n
, 
˘x
Ë
	`BN_mod
‘, x,Ç, ctx)

	)

101 
	#pq_64bô_bö2num
(
bn
, 
byãs
, 
Àn
Ë
	`BN_bö2bn
(byãs,Üí, bn)

	)

102 
	#pq_64bô_num2bö
(
bn
, 
byãs
Ë
	`BN_bn2bö
(bn, byãs)

	)

103 
	#pq_64bô_gë_w‹d
(
x
Ë
	`BN_gë_w‹d
(x)

	)

104 
	#pq_64bô_is_bô_£t
(
x
, 
off£t
Ë
	`BN_is_bô_£t
(x, off£t)

	)

105 
	#pq_64bô_lshi·
(
r
, 
x
, 
shi·
Ë
	`BN_lshi·
‘, x, shi·)

	)

106 
	#pq_64bô_£t_bô
(
x
, 
num
Ë
	`BN_£t_bô
(x,Çum)

	)

107 
	#pq_64bô_gë_Àngth
(
x
Ë
	`BN_num_bôs
((x))

	)

111 
	#PQ_64BIT_IS_INTEGER
 1

	)

112 
	#PQ_64BIT_IS_BIGNUM
 0

	)

114 #i‡
deföed
(
SIXTY_FOUR_BIT
)

115 
	#PQ_64BIT
 
BN_ULONG


	)

116 
	#PQ_64BIT_PRINT
 "%Œd"

	)

117 #ñi‡
deföed
(
SIXTY_FOUR_BIT_LONG
)

118 
	#PQ_64BIT
 
BN_ULONG


	)

119 
	#PQ_64BIT_PRINT
 "%ld"

	)

120 #ñi‡
deföed
(
THIRTY_TWO_BIT
)

121 
	#PQ_64BIT
 
BN_ULLONG


	)

122 
	#PQ_64BIT_PRINT
 "%Œd"

	)

125 
	#PQ_64BIT_CTX
 

	)

127 
	#pq_64bô_öô
(
x
)

	)

128 
	#pq_64bô_‰ì
(
x
)

	)

129 
	#pq_64bô_˘x_√w
(
˘x
Ë(˘x)

	)

130 
	#pq_64bô_˘x_‰ì
(
x
)

	)

132 
	#pq_64bô_assign
(
x
, 
y
Ë(*(xË*(y))

	)

133 
	#pq_64bô_assign_w‹d
(
x
, 
y
Ë(*(xËy)

	)

134 
	#pq_64bô_gt
(
x
, 
y
Ë(*(xË> *(y))

	)

135 
	#pq_64bô_eq
(
x
, 
y
Ë(*(xË=*(y))

	)

136 
	#pq_64bô_add_w‹d
(
x
, 
w
Ë(*(xË(*(xË+ (w)))

	)

137 
	#pq_64bô_sub
(
r
, 
x
, 
y
Ë(*‘Ë(*(xË- *(y)))

	)

138 
	#pq_64bô_sub_w‹d
(
x
, 
w
Ë(*(xË(*(xË- (w)))

	)

139 
	#pq_64bô_mod
(
r
, 
x
, 
n
, 
˘x
)

	)

141 
	#pq_64bô_bö2num
(
num
, 
byãs
, 
Àn
Ë
	`byãs_to_l⁄g_l⁄g
(byãs,Çum)

	)

142 
	#pq_64bô_num2bö
(
num
, 
byãs
Ë
	`l⁄g_l⁄g_to_byãs
“um, byãs)

	)

143 
	#pq_64bô_gë_w‹d
(
x
Ë*(x)

	)

144 
	#pq_64bô_lshi·
(
r
, 
x
, 
shi·
Ë(*‘Ë(*(xË<< (shi·)))

	)

145 
	#pq_64bô_£t_bô
(
x
, 
num
) do { \

146 
PQ_64BIT
 
mask
 = 1; \

147 
mask
 = mask << (
num
); \

148 *(
x
Ë|
mask
; \

149 } 0)

	)

	@/usr/include/openssl/pqueue.h

60 #i‚de‡
HEADER_PQUEUE_H


61 
	#HEADER_PQUEUE_H


	)

63 
	~<°dio.h
>

64 
	~<°dlib.h
>

65 
	~<°rög.h
>

67 
	~<›ís¶/pq_com∑t.h
>

69 
_pqueue
 *
	tpqueue
;

71 
	s_pôem


73 
PQ_64BIT
 
	m¥i‹ôy
;

74 *
	md©a
;

75 
_pôem
 *
	m√xt
;

76 } 
	tpôem
;

78 
_pôem
 *
	tpôî©‹
;

80 
pôem
 *
pôem_√w
(
PQ_64BIT
 
¥i‹ôy
, *
d©a
);

81 
pôem_‰ì
(
pôem
 *
ôem
);

83 
pqueue
 
pqueue_√w
();

84 
pqueue_‰ì
(
pqueue
 
pq
);

86 
pôem
 *
pqueue_ö£π
(
pqueue
 
pq
,Öôem *
ôem
);

87 
pôem
 *
pqueue_≥ek
(
pqueue
 
pq
);

88 
pôem
 *
pqueue_p›
(
pqueue
 
pq
);

89 
pôem
 *
pqueue_föd
(
pqueue
 
pq
, 
PQ_64BIT
 
¥i‹ôy
);

90 
pôem
 *
pqueue_ôî©‹
(
pqueue
 
pq
);

91 
pôem
 *
pqueue_√xt
(
pôî©‹
 *
ôî
);

93 
pqueue_¥öt
(
pqueue
 
pq
);

94 
pqueue_size
(
pqueue
 
pq
);

	@/usr/include/openssl/ui_compat.h

59 #i‚de‡
HEADER_UI_COMPAT_H


60 
	#HEADER_UI_COMPAT_H


	)

62 
	~<›ís¶/›ís¶c⁄f.h
>

63 
	~<›ís¶/ui.h
>

65 #ifde‡ 
__˝lu•lus


72 
	#des_ªad_pw_°rög
(
b
,
l
,
p
,
v
) \

73 
	`_os¶_ﬁd_des_ªad_pw_°rög
((
b
),(
l
),(
p
),(
v
))

	)

74 
	#des_ªad_pw
(
b
,
bf
,
s
,
p
,
v
) \

75 
	`_os¶_ﬁd_des_ªad_pw
((
b
),(
bf
),(
s
),(
p
),(
v
))

	)

77 
_os¶_ﬁd_des_ªad_pw_°rög
(*
buf
,
Àngth
,c⁄° *
¥om±
,
vîify
);

78 
_os¶_ﬁd_des_ªad_pw
(*
buf
,*
buff
,
size
,c⁄° *
¥om±
,
vîify
);

80 #ifde‡ 
__˝lu•lus


	@/usr/include/runetype.h

40 #i‚def 
_RUNETYPE_H_


41 
	#_RUNETYPE_H_


	)

43 
	~<sys/cdefs.h
>

44 
	~<sys/_ty≥s.h
>

46 
	#_CACHED_RUNES
 (1 <<8 )

	)

47 
	#_CRMASK
 (~(
_CACHED_RUNES
 - 1))

	)

53 
__ru√_t
 
	m__mö
;

54 
__ru√_t
 
	m__max
;

55 
__ru√_t
 
	m__m≠
;

56 *
	m__ty≥s
;

57 } 
	t_Ru√E¡ry
;

60 
	m__ƒ™ges
;

61 
_Ru√E¡ry
 *
	m__ønges
;

62 } 
	t_Ru√R™ge
;

65 
	m__magic
[8];

66 
	m__ícodög
[32];

68 
__ru√_t
 (*
__sgëru√
)(c⁄° *, 
	m__size_t
, const **);

69 (*
	m__•uåu√
)(
	m__ru√_t
, *, 
	m__size_t
, **);

70 
__ru√_t
 
	m__övÆid_ru√
;

72 
	m__ru√ty≥
[
_CACHED_RUNES
];

73 
__ru√_t
 
	m__m≠lowî
[
_CACHED_RUNES
];

74 
__ru√_t
 
	m__m≠uµî
[
_CACHED_RUNES
];

81 
_Ru√R™ge
 
	m__ru√ty≥_ext
;

82 
_Ru√R™ge
 
	m__m≠lowî_ext
;

83 
_Ru√R™ge
 
	m__m≠uµî_ext
;

85 *
	m__v¨übÀ
;

86 
	m__v¨übÀ_Àn
;

87 } 
	t_Ru√LoˇÀ
;

89 
	#_RUNE_MAGIC_1
 "Ru√Magi"

	)

91 
_Ru√LoˇÀ
 
_DeÁu…Ru√LoˇÀ
;

92 
_Ru√LoˇÀ
 *
_CuºítRu√LoˇÀ
;

	@/usr/include/sys/errno.h

38 #i‚de‡
_SYS_ERRNO_H_


39 
	#_SYS_ERRNO_H_


	)

41 #i‚de‡
_KERNEL


42 
	~<sys/cdefs.h
>

43 
__BEGIN_DECLS


44 * 
__îr‹
();

45 
	g__END_DECLS


46 
	#î∫o
 (* 
	`__îr‹
())

	)

49 
	#EPERM
 1

	)

50 
	#ENOENT
 2

	)

51 
	#ESRCH
 3

	)

52 
	#EINTR
 4

	)

53 
	#EIO
 5

	)

54 
	#ENXIO
 6

	)

55 
	#E2BIG
 7

	)

56 
	#ENOEXEC
 8

	)

57 
	#EBADF
 9

	)

58 
	#ECHILD
 10

	)

59 
	#EDEADLK
 11

	)

61 
	#ENOMEM
 12

	)

62 
	#EACCES
 13

	)

63 
	#EFAULT
 14

	)

64 #i‚de‡
_POSIX_SOURCE


65 
	#ENOTBLK
 15

	)

67 
	#EBUSY
 16

	)

68 
	#EEXIST
 17

	)

69 
	#EXDEV
 18

	)

70 
	#ENODEV
 19

	)

71 
	#ENOTDIR
 20

	)

72 
	#EISDIR
 21

	)

73 
	#EINVAL
 22

	)

74 
	#ENFILE
 23

	)

75 
	#EMFILE
 24

	)

76 
	#ENOTTY
 25

	)

77 #i‚de‡
_POSIX_SOURCE


78 
	#ETXTBSY
 26

	)

80 
	#EFBIG
 27

	)

81 
	#ENOSPC
 28

	)

82 
	#ESPIPE
 29

	)

83 
	#EROFS
 30

	)

84 
	#EMLINK
 31

	)

85 
	#EPIPE
 32

	)

88 
	#EDOM
 33

	)

89 
	#ERANGE
 34

	)

92 
	#EAGAIN
 35

	)

93 #i‚de‡
_POSIX_SOURCE


94 
	#EWOULDBLOCK
 
EAGAIN


	)

95 
	#EINPROGRESS
 36

	)

96 
	#EALREADY
 37

	)

99 
	#ENOTSOCK
 38

	)

100 
	#EDESTADDRREQ
 39

	)

101 
	#EMSGSIZE
 40

	)

102 
	#EPROTOTYPE
 41

	)

103 
	#ENOPROTOOPT
 42

	)

104 
	#EPROTONOSUPPORT
 43

	)

105 
	#ESOCKTNOSUPPORT
 44

	)

106 
	#EOPNOTSUPP
 45

	)

107 
	#ENOTSUP
 
EOPNOTSUPP


	)

108 
	#EPFNOSUPPORT
 46

	)

109 
	#EAFNOSUPPORT
 47

	)

110 
	#EADDRINUSE
 48

	)

111 
	#EADDRNOTAVAIL
 49

	)

114 
	#ENETDOWN
 50

	)

115 
	#ENETUNREACH
 51

	)

116 
	#ENETRESET
 52

	)

117 
	#ECONNABORTED
 53

	)

118 
	#ECONNRESET
 54

	)

119 
	#ENOBUFS
 55

	)

120 
	#EISCONN
 56

	)

121 
	#ENOTCONN
 57

	)

122 
	#ESHUTDOWN
 58

	)

123 
	#ETOOMANYREFS
 59

	)

124 
	#ETIMEDOUT
 60

	)

125 
	#ECONNREFUSED
 61

	)

127 
	#ELOOP
 62

	)

129 
	#ENAMETOOLONG
 63

	)

132 #i‚de‡
_POSIX_SOURCE


133 
	#EHOSTDOWN
 64

	)

134 
	#EHOSTUNREACH
 65

	)

136 
	#ENOTEMPTY
 66

	)

139 #i‚de‡
_POSIX_SOURCE


140 
	#EPROCLIM
 67

	)

141 
	#EUSERS
 68

	)

142 
	#EDQUOT
 69

	)

145 
	#ESTALE
 70

	)

146 
	#EREMOTE
 71

	)

147 
	#EBADRPC
 72

	)

148 
	#ERPCMISMATCH
 73

	)

149 
	#EPROGUNAVAIL
 74

	)

150 
	#EPROGMISMATCH
 75

	)

151 
	#EPROCUNAVAIL
 76

	)

154 
	#ENOLCK
 77

	)

155 
	#ENOSYS
 78

	)

157 #i‚de‡
_POSIX_SOURCE


158 
	#EFTYPE
 79

	)

159 
	#EAUTH
 80

	)

160 
	#ENEEDAUTH
 81

	)

161 
	#EIDRM
 82

	)

162 
	#ENOMSG
 83

	)

163 
	#EOVERFLOW
 84

	)

164 
	#ECANCELED
 85

	)

165 
	#EILSEQ
 86

	)

166 
	#ENOATTR
 87

	)

168 
	#EDOOFUS
 88

	)

171 
	#EBADMSG
 89

	)

172 
	#EMULTIHOP
 90

	)

173 
	#ENOLINK
 91

	)

174 
	#EPROTO
 92

	)

176 #i‚de‡
_POSIX_SOURCE


177 
	#ENOTCAPABLE
 93

	)

180 #i‚de‡
_POSIX_SOURCE


181 
	#ELAST
 93

	)

184 #ifde‡
_KERNEL


186 
	#ERESTART
 (-1Ë

	)

187 
	#EJUSTRETURN
 (-2Ë

	)

188 
	#ENOIOCTL
 (-3Ë

	)

189 
	#EDIRIOCTL
 (-4Ë

	)

	@/usr/include/sys/ioccom.h

33 #i‚def 
_SYS_IOCCOM_H_


34 
	#_SYS_IOCCOM_H_


	)

41 
	#IOCPARM_SHIFT
 13

	)

42 
	#IOCPARM_MASK
 ((1 << 
IOCPARM_SHIFT
Ë- 1Ë

	)

43 
	#IOCPARM_LEN
(
x
Ë(((xË>> 16Ë& 
IOCPARM_MASK
)

	)

44 
	#IOCBASECMD
(
x
Ë((xË& ~(
IOCPARM_MASK
 << 16))

	)

45 
	#IOCGROUP
(
x
Ë(((xË>> 8Ë& 0xff)

	)

47 
	#IOCPARM_MAX
 (1 << 
IOCPARM_SHIFT
Ë

	)

48 
	#IOC_VOID
 0x20000000

	)

49 
	#IOC_OUT
 0x40000000

	)

50 
	#IOC_IN
 0x80000000

	)

51 
	#IOC_INOUT
 (
IOC_IN
|
IOC_OUT
)

	)

52 
	#IOC_DIRMASK
 (
IOC_VOID
|
IOC_OUT
|
IOC_IN
)

	)

54 
	#_IOC
(
öout
,
group
,
num
,
Àn
) (() \

55 ((
öout
Ë| (((
Àn
Ë& 
IOCPARM_MASK
Ë<< 16Ë| ((
group
Ë<< 8Ë| (
num
)))

	)

56 
	#_IO
(
g
,
n
Ë
	`_IOC
(
IOC_VOID
, (g), (n), 0)

	)

57 
	#_IOWINT
(
g
,
n
Ë
	`_IOC
(
IOC_VOID
, (g), (n), ())

	)

58 
	#_IOR
(
g
,
n
,
t
Ë
	`_IOC
(
IOC_OUT
, (g), (n), —))

	)

59 
	#_IOW
(
g
,
n
,
t
Ë
	`_IOC
(
IOC_IN
, (g), (n), —))

	)

61 
	#_IOWR
(
g
,
n
,
t
Ë
	`_IOC
(
IOC_INOUT
, (g), (n), —))

	)

63 #ifde‡
_KERNEL


65 #i‡
deföed
(
COMPAT_FREEBSD6
Ë|| deföed(
COMPAT_FREEBSD5
) || \

66 
deföed
(
COMPAT_FREEBSD4
Ë|| 
	$deföed
(
COMPAT_43
)

67 
	#IOCPARM_IVAL
(
x
Ë(()(
öçå_t
)(*)*(
ˇddr_t
 *)(*)(x))

	)

72 
	~<sys/cdefs.h
>

74 
__BEGIN_DECLS


75 
	`io˘l
(, , ...);

76 
__END_DECLS


	@/usr/include/sys/limits.h

32 #i‚de‡
_SYS_LIMITS_H_


33 
	#_SYS_LIMITS_H_


	)

35 
	~<sys/cdefs.h
>

36 
	~<machöe/_limôs.h
>

38 
	#CHAR_BIT
 
__CHAR_BIT


	)

40 
	#SCHAR_MAX
 
__SCHAR_MAX


	)

41 
	#SCHAR_MIN
 
__SCHAR_MIN


	)

43 
	#UCHAR_MAX
 
__UCHAR_MAX


	)

45 #ifde‡
__CHAR_UNSIGNED__


46 
	#CHAR_MAX
 
UCHAR_MAX


	)

47 
	#CHAR_MIN
 0

	)

49 
	#CHAR_MAX
 
SCHAR_MAX


	)

50 
	#CHAR_MIN
 
SCHAR_MIN


	)

53 
	#USHRT_MAX
 
__USHRT_MAX


	)

54 
	#SHRT_MAX
 
__SHRT_MAX


	)

55 
	#SHRT_MIN
 
__SHRT_MIN


	)

57 
	#UINT_MAX
 
__UINT_MAX


	)

58 
	#INT_MAX
 
__INT_MAX


	)

59 
	#INT_MIN
 
__INT_MIN


	)

61 
	#ULONG_MAX
 
__ULONG_MAX


	)

62 
	#LONG_MAX
 
__LONG_MAX


	)

63 
	#LONG_MIN
 
__LONG_MIN


	)

65 #ifde‡
__LONG_LONG_SUPPORTED


66 
	#ULLONG_MAX
 
__ULLONG_MAX


	)

67 
	#LLONG_MAX
 
__LLONG_MAX


	)

68 
	#LLONG_MIN
 
__LLONG_MIN


	)

71 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


72 
	#SSIZE_MAX
 
__SSIZE_MAX


	)

75 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


76 
	#SIZE_T_MAX
 
__SIZE_T_MAX


	)

78 
	#OFF_MAX
 
__OFF_MAX


	)

79 
	#OFF_MIN
 
__OFF_MIN


	)

82 #i‡
__BSD_VISIBLE


83 
	#GID_MAX
 
UINT_MAX


	)

84 
	#UID_MAX
 
UINT_MAX


	)

86 
	#UQUAD_MAX
 (
__UQUAD_MAX
Ë

	)

87 
	#QUAD_MAX
 (
__QUAD_MAX
Ë

	)

88 
	#QUAD_MIN
 (
__QUAD_MIN
Ë

	)

91 #i‡
__XSI_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200809

92 
	#LONG_BIT
 
__LONG_BIT


	)

93 
	#WORD_BIT
 
__WORD_BIT


	)

96 #i‡
__POSIX_VISIBLE


97 
	#MQ_PRIO_MAX
 64

	)

	@/usr/include/sys/priority.h

34 #i‚de‡
_SYS_PRIORITY_H_


35 
	#_SYS_PRIORITY_H_


	)

45 
	#PRI_ITHD
 1

	)

46 
	#PRI_REALTIME
 2

	)

47 
	#PRI_TIMESHARE
 3

	)

48 
	#PRI_IDLE
 4

	)

54 
	#PRI_FIFO_BIT
 8

	)

55 
	#PRI_FIFO
 (
PRI_FIFO_BIT
 | 
PRI_REALTIME
)

	)

57 
	#PRI_BASE
(
P
Ë((PË& ~
PRI_FIFO_BIT
)

	)

58 
	#PRI_IS_REALTIME
(
P
Ë(
	`PRI_BASE
(PË=
PRI_REALTIME
)

	)

59 
	#PRI_NEED_RR
(
P
Ë((PË!
PRI_FIFO
)

	)

80 
	#PRI_MIN
 (0Ë

	)

81 
	#PRI_MAX
 (255Ë

	)

83 
	#PRI_MIN_ITHD
 (
PRI_MIN
)

	)

84 
	#PRI_MAX_ITHD
 (
PRI_MIN_KERN
 - 1)

	)

86 
	#PI_REALTIME
 (
PRI_MIN_ITHD
 + 0)

	)

87 
	#PI_AV
 (
PRI_MIN_ITHD
 + 4)

	)

88 
	#PI_NET
 (
PRI_MIN_ITHD
 + 16)

	)

89 
	#PI_DISK
 (
PRI_MIN_ITHD
 + 20)

	)

90 
	#PI_TTY
 (
PRI_MIN_ITHD
 + 24)

	)

91 
	#PI_DULL
 (
PRI_MIN_ITHD
 + 32)

	)

92 
	#PI_SOFT
 (
PRI_MIN_ITHD
 + 36)

	)

93 
	#PI_SWI
(
x
Ë(
PI_SOFT
 + (xË* 
RQ_PPQ
)

	)

95 
	#PRI_MIN_KERN
 (64)

	)

96 
	#PRI_MAX_KERN
 (
PRI_MIN_REALTIME
 - 1)

	)

98 
	#PSWP
 (
PRI_MIN_KERN
 + 0)

	)

99 
	#PVM
 (
PRI_MIN_KERN
 + 4)

	)

100 
	#PINOD
 (
PRI_MIN_KERN
 + 8)

	)

101 
	#PRIBIO
 (
PRI_MIN_KERN
 + 12)

	)

102 
	#PVFS
 (
PRI_MIN_KERN
 + 16)

	)

103 
	#PZERO
 (
PRI_MIN_KERN
 + 20)

	)

104 
	#PSOCK
 (
PRI_MIN_KERN
 + 24)

	)

105 
	#PWAIT
 (
PRI_MIN_KERN
 + 28)

	)

106 
	#PLOCK
 (
PRI_MIN_KERN
 + 36)

	)

107 
	#PPAUSE
 (
PRI_MIN_KERN
 + 40)

	)

109 
	#PRI_MIN_REALTIME
 (128)

	)

110 
	#PRI_MAX_REALTIME
 (
PRI_MIN_TIMESHARE
 - 1)

	)

112 
	#PRI_MIN_TIMESHARE
 (160)

	)

113 
	#PRI_MAX_TIMESHARE
 (
PRI_MIN_IDLE
 - 1)

	)

115 
	#PUSER
 (
PRI_MIN_TIMESHARE
)

	)

117 
	#PRI_MIN_IDLE
 (224)

	)

118 
	#PRI_MAX_IDLE
 (
PRI_MAX
)

	)

120 #ifde‡
_KERNEL


122 
	#PRI_USER
 -2

	)

123 
	#PRI_UNCHANGED
 -1

	)

126 
	s¥i‹ôy
 {

127 
u_ch¨
 
	m¥i_˛ass
;

128 
u_ch¨
 
	m¥i_Àvñ
;

129 
u_ch¨
 
	m¥i_«tive
;

130 
u_ch¨
 
	m¥i_u£r
;

	@/usr/include/sys/sockio.h

33 #i‚de‡
_SYS_SOCKIO_H_


34 
	#_SYS_SOCKIO_H_


	)

36 
	~<sys/ioccom.h
>

39 
	#SIOCSHIWAT
 
	`_IOW
('s', 0, Ë

	)

40 
	#SIOCGHIWAT
 
	`_IOR
('s', 1, Ë

	)

41 
	#SIOCSLOWAT
 
	`_IOW
('s', 2, Ë

	)

42 
	#SIOCGLOWAT
 
	`_IOR
('s', 3, Ë

	)

43 
	#SIOCATMARK
 
	`_IOR
('s', 7, Ë

	)

44 
	#SIOCSPGRP
 
	`_IOW
('s', 8, Ë

	)

45 
	#SIOCGPGRP
 
	`_IOR
('s', 9, Ë

	)

47 
	#SIOCADDRT
 
	`_IOW
('r', 10, 
‹ã¡ry
Ë

	)

48 
	#SIOCDELRT
 
	`_IOW
('r', 11, 
‹ã¡ry
Ë

	)

49 
	#SIOCGETVIFCNT
 
	`_IOWR
('r', 15, 
sioc_vif_ªq
)

	)

50 
	#SIOCGETSGCNT
 
	`_IOWR
('r', 16, 
sioc_sg_ªq
Ë

	)

52 
	#SIOCSIFADDR
 
	`_IOW
('i', 12, 
i‰eq
Ë

	)

53 
	#OSIOCGIFADDR
 
	`_IOWR
('i', 13, 
i‰eq
Ë

	)

54 
	#SIOCGIFADDR
 
	`_IOWR
('i', 33, 
i‰eq
Ë

	)

55 
	#SIOCSIFDSTADDR
 
	`_IOW
('i', 14, 
i‰eq
Ë

	)

56 
	#OSIOCGIFDSTADDR
 
	`_IOWR
('i', 15, 
i‰eq
Ë

	)

57 
	#SIOCGIFDSTADDR
 
	`_IOWR
('i', 34, 
i‰eq
Ë

	)

58 
	#SIOCSIFFLAGS
 
	`_IOW
('i', 16, 
i‰eq
Ë

	)

59 
	#SIOCGIFFLAGS
 
	`_IOWR
('i', 17, 
i‰eq
Ë

	)

60 
	#OSIOCGIFBRDADDR
 
	`_IOWR
('i', 18, 
i‰eq
Ë

	)

61 
	#SIOCGIFBRDADDR
 
	`_IOWR
('i', 35, 
i‰eq
Ë

	)

62 
	#SIOCSIFBRDADDR
 
	`_IOW
('i', 19, 
i‰eq
Ë

	)

63 
	#OSIOCGIFCONF
 
	`_IOWR
('i', 20, 
ifc⁄f
Ë

	)

64 
	#SIOCGIFCONF
 
	`_IOWR
('i', 36, 
ifc⁄f
Ë

	)

65 
	#OSIOCGIFNETMASK
 
	`_IOWR
('i', 21, 
i‰eq
Ë

	)

66 
	#SIOCGIFNETMASK
 
	`_IOWR
('i', 37, 
i‰eq
Ë

	)

67 
	#SIOCSIFNETMASK
 
	`_IOW
('i', 22, 
i‰eq
Ë

	)

68 
	#SIOCGIFMETRIC
 
	`_IOWR
('i', 23, 
i‰eq
Ë

	)

69 
	#SIOCSIFMETRIC
 
	`_IOW
('i', 24, 
i‰eq
Ë

	)

70 
	#SIOCDIFADDR
 
	`_IOW
('i', 25, 
i‰eq
Ë

	)

71 
	#SIOCAIFADDR
 
	`_IOW
('i', 26, 
iÁlü§eq
)

	)

73 
	#SIOCALIFADDR
 
	`_IOW
('i', 27, 
if_œddºeq
Ë

	)

74 
	#SIOCGLIFADDR
 
	`_IOWR
('i', 28, 
if_œddºeq
Ë

	)

75 
	#SIOCDLIFADDR
 
	`_IOW
('i', 29, 
if_œddºeq
Ë

	)

76 
	#SIOCSIFCAP
 
	`_IOW
('i', 30, 
i‰eq
Ë

	)

77 
	#SIOCGIFCAP
 
	`_IOWR
('i', 31, 
i‰eq
Ë

	)

78 
	#SIOCGIFINDEX
 
	`_IOWR
('i', 32, 
i‰eq
Ë

	)

79 
	#SIOCGIFMAC
 
	`_IOWR
('i', 38, 
i‰eq
Ë

	)

80 
	#SIOCSIFMAC
 
	`_IOW
('i', 39, 
i‰eq
Ë

	)

81 
	#SIOCSIFNAME
 
	`_IOW
('i', 40, 
i‰eq
Ë

	)

82 
	#SIOCSIFDESCR
 
	`_IOW
('i', 41, 
i‰eq
Ë

	)

83 
	#SIOCGIFDESCR
 
	`_IOWR
('i', 42, 
i‰eq
Ë

	)

85 
	#SIOCADDMULTI
 
	`_IOW
('i', 49, 
i‰eq
Ë

	)

86 
	#SIOCDELMULTI
 
	`_IOW
('i', 50, 
i‰eq
Ë

	)

87 
	#SIOCGIFMTU
 
	`_IOWR
('i', 51, 
i‰eq
Ë

	)

88 
	#SIOCSIFMTU
 
	`_IOW
('i', 52, 
i‰eq
Ë

	)

89 
	#SIOCGIFPHYS
 
	`_IOWR
('i', 53, 
i‰eq
Ë

	)

90 
	#SIOCSIFPHYS
 
	`_IOW
('i', 54, 
i‰eq
Ë

	)

91 
	#SIOCSIFMEDIA
 
	`_IOWR
('i', 55, 
i‰eq
Ë

	)

92 
	#SIOCGIFMEDIA
 
	`_IOWR
('i', 56, 
ifmedüªq
Ë

	)

94 
	#SIOCSIFGENERIC
 
	`_IOW
('i', 57, 
i‰eq
Ë

	)

95 
	#SIOCGIFGENERIC
 
	`_IOWR
('i', 58, 
i‰eq
Ë

	)

97 
	#SIOCGIFSTATUS
 
	`_IOWR
('i', 59, 
if°©
Ë

	)

98 
	#SIOCSIFLLADDR
 
	`_IOW
('i', 60, 
i‰eq
Ë

	)

100 
	#SIOCSIFPHYADDR
 
	`_IOW
('i', 70, 
iÁlü§eq
Ë

	)

101 
	#SIOCGIFPSRCADDR
 
	`_IOWR
('i', 71, 
i‰eq
Ë

	)

102 
	#SIOCGIFPDSTADDR
 
	`_IOWR
('i', 72, 
i‰eq
Ë

	)

103 
	#SIOCDIFPHYADDR
 
	`_IOW
('i', 73, 
i‰eq
Ë

	)

104 
	#SIOCSLIFPHYADDR
 
	`_IOW
('i', 74, 
if_œddºeq
Ë

	)

105 
	#SIOCGLIFPHYADDR
 
	`_IOWR
('i', 75, 
if_œddºeq
Ë

	)

107 
	#SIOCGPRIVATE_0
 
	`_IOWR
('i', 80, 
i‰eq
Ë

	)

108 
	#SIOCGPRIVATE_1
 
	`_IOWR
('i', 81, 
i‰eq
Ë

	)

110 
	#SIOCSIFVNET
 
	`_IOWR
('i', 90, 
i‰eq
Ë

	)

111 
	#SIOCSIFRVNET
 
	`_IOWR
('i', 91, 
i‰eq
Ë

	)

113 
	#SIOCGIFFIB
 
	`_IOWR
('i', 92, 
i‰eq
Ë

	)

114 
	#SIOCSIFFIB
 
	`_IOW
('i', 93, 
i‰eq
Ë

	)

116 
	#SIOCSDRVSPEC
 
	`_IOW
('i', 123, 
ifdrv
Ë

	)

118 
	#SIOCGDRVSPEC
 
	`_IOWR
('i', 123, 
ifdrv
Ë

	)

121 
	#SIOCIFCREATE
 
	`_IOWR
('i', 122, 
i‰eq
Ë

	)

122 
	#SIOCIFCREATE2
 
	`_IOWR
('i', 124, 
i‰eq
Ë

	)

123 
	#SIOCIFDESTROY
 
	`_IOW
('i', 121, 
i‰eq
Ë

	)

124 
	#SIOCIFGCLONERS
 
	`_IOWR
('i', 120, 
if_˛⁄îeq
Ë

	)

126 
	#SIOCAIFGROUP
 
	`_IOW
('i', 135, 
ifgrou¥eq
Ë

	)

127 
	#SIOCGIFGROUP
 
	`_IOWR
('i', 136, 
ifgrou¥eq
Ë

	)

128 
	#SIOCDIFGROUP
 
	`_IOW
('i', 137, 
ifgrou¥eq
Ë

	)

129 
	#SIOCGIFGMEMB
 
	`_IOWR
('i', 138, 
ifgrou¥eq
Ë

	)

	@/usr/include/sys/syslimits.h

33 #i‚de‡
_SYS_SYSLIMITS_H_


34 
	#_SYS_SYSLIMITS_H_


	)

36 #i‡!
deföed
(
_KERNEL
Ë&& !deföed(
_LIMITS_H_
Ë&& !deföed(
_SYS_PARAM_H_
)

37 #i‚de‡
_SYS_CDEFS_H_


38 #îr‹ 
this
 
fûe
 
√eds
 
sys
/
cdefs
.
h
 
as
 
a
 
¥îequisôe


40 #ifde‡
__CC_SUPPORTS_WARNING


49 
	#ARG_MAX
 262144

	)

50 #i‚de‡
CHILD_MAX


51 
	#CHILD_MAX
 40

	)

53 
	#LINK_MAX
 32767

	)

54 
	#MAX_CANON
 255

	)

55 
	#MAX_INPUT
 255

	)

56 
	#NAME_MAX
 255

	)

57 #i‚de‡
NGROUPS_MAX


58 
	#NGROUPS_MAX
 1023

	)

60 #i‚de‡
OPEN_MAX


61 
	#OPEN_MAX
 64

	)

63 
	#PATH_MAX
 1024

	)

64 
	#PIPE_BUF
 512

	)

65 
	#IOV_MAX
 1024

	)

	@/usr/include/sys/systm.h

38 #i‚de‡
_SYS_SYSTM_H_


39 
	#_SYS_SYSTM_H_


	)

41 
	~<machöe/©omic.h
>

42 
	~<machöe/˝ufunc.h
>

43 
	~<sys/ˇŒout.h
>

44 
	~<sys/cdefs.h
>

45 
	~<sys/queue.h
>

46 
	~<sys/°döt.h
>

48 
cﬁd
;

49 
ªboŸög
;

50 c⁄° *
∑nic°r
;

51 
vîsi⁄
[];

52 
compûî_vîsi⁄
[];

53 
c›yright
[];

54 
k°ack_∑ges
;

56 
nsw≠
;

58 
u_l⁄g
 
∑gesizes
[];

59 
physmem
;

60 
ªÆmem
;

62 *
roŸdev«mes
[2];

64 
boŸhowto
;

65 
boŸvîbo£
;

67 
maxu£rs
;

68 
ngroups_max
;

69 
vm_gue°
;

76 
	eVM_GUEST
 { 
	mVM_GUEST_NO
 = 0, 
	mVM_GUEST_VM
, 
	mVM_GUEST_XEN
 };

78 #ifdef 
INVARIANTS


79 
	#KASSERT
(
exp
,
msg
) do { \

80 i‡(
	`__¥edi˘_Ál£
(!(
exp
))) \

81 
∑nic
 
msg
; \

82 } 0)

	)

83 
	#VNASSERT
(
exp
, 
vp
, 
msg
) do { \

84 i‡(
	`__¥edi˘_Ál£
(!(
exp
))) { \

85 
	`vn_¥ötf
(
vp
, "VNASSERT failed\n"); \

86 
∑nic
 
msg
; \

88 } 0)

	)

90 
	#KASSERT
(
exp
,
msg
) do { \

91 } 0)

	)

93 
	#VNASSERT
(
exp
, 
vp
, 
msg
) do { \

94 } 0)

	)

97 #i‚de‡
CTASSERT


98 
	#CTASSERT
(
x
Ë
	`_CTASSERT
(x, 
__LINE__
)

	)

99 
	#_CTASSERT
(
x
, 
y
Ë
	`__CTASSERT
(x, y)

	)

100 
	#__CTASSERT
(
x
, 
y
Ë
	t__as£π
 ## 
	ty
[(xË? 1 : -1]

	)

110 
	tASSERT_ATOMIC_LOAD_PTR
(
	tv¨
, 
	tmsg
) \

111 
	tKASSERT
((
	tv¨
) == (*) && \

112 ((
	tuöçå_t
)&(
	tv¨
Ë& ((*Ë- 1)Ë=0, 
	tmsg
)

	)

120 
	tSCHEDULER_STOPPED
(Ë
	t__¥edi˘_Ál£
(
	tcuπhªad
->
	ttd_°›sched
)

	)

128 
	to§ñd©e
;

129 
ívmode
;

130 
hötmode
;

131 
dy«mic_kív
;

132 
mtx
 
kív_lock
;

133 *
kîn_ívp
;

134 
°©ic_ív
[];

135 
°©ic_höts
[];

137 **
kívp
;

143 
	göpcb
;

144 
	glock_obje˘
;

145 
	gmÆloc_ty≥
;

146 
	gmtx
;

147 
	g¥oc
;

148 
	gsockë
;

149 
	gthªad
;

150 
	gây
;

151 
	gu¸ed
;

152 
	guio
;

153 
	g_jmp_buf
;

155 
£tjmp
(
_jmp_buf
 *);

156 
	$l⁄gjmp
(
_jmp_buf
 *, Ë
__dód2
;

157 
	`dump°©us
(
vm_off£t_t
 
addr
, 
off_t
 
cou¡
);

158 
	`nuŒ›
();

159 
	`e›nŸsuµ
();

160 
	`uªadc
(, 
uio
 *);

161 
	`hashde°roy
(*, 
mÆloc_ty≥
 *, 
u_l⁄g
);

162 *
	`hashöô
(
cou¡
, 
mÆloc_ty≥
 *
ty≥
, 
u_l⁄g
 *
hashmask
);

163 *
	`hashöô_Êags
(
cou¡
, 
mÆloc_ty≥
 *
ty≥
,

164 
u_l⁄g
 *
hashmask
, 
Êags
);

165 
	#HASH_NOWAIT
 0x00000001

	)

166 
	#HASH_WAITOK
 0x00000002

	)

168 *
	`phashöô
(
cou¡
, 
mÆloc_ty≥
 *
ty≥
, 
u_l⁄g
 *
√¡rõs
);

169 
	`g_waôidÀ
();

171 #ifde‡
RESTARTABLE_PANICS


172 
	$∑nic
(c⁄° *, ...Ë
	`__¥ötÊike
(1, 2);

174 
	$∑nic
(c⁄° *, ...Ë
__dód2
 
	`__¥ötÊike
(1, 2);

177 
	`˝u_boŸ
();

178 
	`˝u_Êush_dˇche
(*, 
size_t
);

179 
	`˝u_roŸc⁄f
();

180 
	`¸ôiˇl_íãr
();

181 
	`¸ôiˇl_exô
();

182 
	`öô_∑øm1
();

183 
	`öô_∑øm2
(
phy•ages
);

184 
	`öô_∑øm3
(
kmem∑ges
);

185 
	`èbÀfuŒ
(const *);

186 
	`kv¥ötf
(const *, (*)(, *), *, ,

187 
__va_li°
Ë
	`__¥ötÊike
(1, 0);

188 
	$log
(, c⁄° *, ...Ë
	`__¥ötÊike
(2, 3);

189 
	`log_c⁄sﬁe
(
uio
 *);

190 
	$¥ötf
(c⁄° *, ...Ë
	`__¥ötÊike
(1, 2);

191 
	$¢¥ötf
(*, 
size_t
, c⁄° *, ...Ë
	`__¥ötÊike
(3, 4);

192 
	$•rötf
(*
buf
, c⁄° *, ...Ë
	`__¥ötÊike
(2, 3);

193 
	$u¥ötf
(c⁄° *, ...Ë
	`__¥ötÊike
(1, 2);

194 
	$v¥ötf
(c⁄° *, 
__va_li°
Ë
	`__¥ötÊike
(1, 0);

195 
	$v¢¥ötf
(*, 
size_t
, c⁄° *, 
__va_li°
Ë
	`__¥ötÊike
(3, 0);

196 
	$v¢Ωrötf
(*, 
size_t
, , c⁄° *, 
__va_li°
Ë
	`__¥ötÊike
(4, 0);

197 
	$v•rötf
(*
buf
, c⁄° *, 
__va_li°
Ë
	`__¥ötÊike
(2, 0);

198 
	$ây¥ötf
(
ây
 *, c⁄° *, ...Ë
	`__¥ötÊike
(2, 3);

199 
	$ssˇnf
(c⁄° *, c⁄° *, ...Ë
	$__n⁄nuŒ
(1Ë
	`__n⁄nuŒ
(2);

200 
	$vssˇnf
(c⁄° *, c⁄° *, 
__va_li°
Ë
	$__n⁄nuŒ
(1Ë
	`__n⁄nuŒ
(2);

201 
	$°πﬁ
(c⁄° *, **, Ë
	`__n⁄nuŒ
(1);

202 
u_l⁄g
 
	$°πoul
(c⁄° *, **, Ë
	`__n⁄nuŒ
(1);

203 
quad_t
 
	$°πoq
(c⁄° *, **, Ë
	`__n⁄nuŒ
(1);

204 
u_quad_t
 
	$°πouq
(c⁄° *, **, Ë
	`__n⁄nuŒ
(1);

205 
	$çrötf
(
¥oc
 *
p
, 
¥i
, c⁄° *, ...Ë
	`__¥ötÊike
(3, 4);

206 
	`hexdump
(c⁄° *
±r
, 
Àngth
, c⁄° *
hdr
, 
Êags
);

207 
	#HD_COLUMN_MASK
 0xff

	)

208 
	#HD_DELIM_MASK
 0xff00

	)

209 
	#HD_OMIT_COUNT
 (1 << 16)

	)

210 
	#HD_OMIT_HEX
 (1 << 17)

	)

211 
	#HD_OMIT_CHARS
 (1 << 18)

	)

213 
	#ovbc›y
(
f
, 
t
, 
l
Ë
	`bc›y
((f), (t), (l))

	)

214 
	$bc›y
(c⁄° *
‰om
, *
to
, 
size_t
 
Àn
Ë
	$__n⁄nuŒ
(1Ë
	`__n⁄nuŒ
(2);

215 
	$bzîo
(*
buf
, 
size_t
 
Àn
Ë
	`__n⁄nuŒ
(1);

217 *
	$mem˝y
(*
to
, c⁄° *
‰om
, 
size_t
 
Àn
Ë
	$__n⁄nuŒ
(1Ë
	`__n⁄nuŒ
(2);

218 *
	$memmove
(*
de°
, c⁄° *
§c
, 
size_t
 
n
Ë
	$__n⁄nuŒ
(1Ë
	`__n⁄nuŒ
(2);

220 
	$c›y°r
(c⁄° * 
__ª°ri˘
 
kÁddr
, * __ª°ri˘ 
kdaddr
,

221 
size_t
 
Àn
, size_à* 
__ª°ri˘
 
Ànc›õd
)

222 
	$__n⁄nuŒ
(1Ë
	`__n⁄nuŒ
(2);

223 
	$c›yö°r
(c⁄° * 
__ª°ri˘
 
udaddr
, * __ª°ri˘ 
kaddr
,

224 
size_t
 
Àn
, size_à* 
__ª°ri˘
 
Ànc›õd
)

225 
	$__n⁄nuŒ
(1Ë
	`__n⁄nuŒ
(2);

226 
	$c›yö
(c⁄° * 
__ª°ri˘
 
udaddr
, * __ª°ri˘ 
kaddr
,

227 
size_t
 
Àn
Ë
	$__n⁄nuŒ
(1Ë
	`__n⁄nuŒ
(2);

228 
	$c›yö_noÁu…
(c⁄° * 
__ª°ri˘
 
udaddr
, * __ª°ri˘ 
kaddr
,

229 
size_t
 
Àn
Ë
	$__n⁄nuŒ
(1Ë
	`__n⁄nuŒ
(2);

230 
	$c›yout
(c⁄° * 
__ª°ri˘
 
kaddr
, * __ª°ri˘ 
udaddr
,

231 
size_t
 
Àn
Ë
	$__n⁄nuŒ
(1Ë
	`__n⁄nuŒ
(2);

232 
	$c›yout_noÁu…
(c⁄° * 
__ª°ri˘
 
kaddr
, * __ª°ri˘ 
udaddr
,

233 
size_t
 
Àn
Ë
	$__n⁄nuŒ
(1Ë
	`__n⁄nuŒ
(2);

235 
	`fubyã
(c⁄° *
ba£
);

236 
	`fuw‹d
(c⁄° *
ba£
);

237 
	`fuw‹d16
(*
ba£
);

238 
öt32_t
 
	`fuw‹d32
(c⁄° *
ba£
);

239 
öt64_t
 
	`fuw‹d64
(c⁄° *
ba£
);

240 
	`subyã
(*
ba£
, 
byã
);

241 
	`suw‹d
(*
ba£
, 
w‹d
);

242 
	`suw‹d16
(*
ba£
, 
w‹d
);

243 
	`suw‹d32
(*
ba£
, 
öt32_t
 
w‹d
);

244 
	`suw‹d64
(*
ba£
, 
öt64_t
 
w‹d
);

245 
uöt32_t
 
	`ˇsuw‹d32
(vﬁ©ûêuöt32_à*
ba£
, uöt32_à
ﬁdvÆ
, uöt32_à
√wvÆ
);

246 
u_l⁄g
 
	`ˇsuw‹d
(vﬁ©ûêu_l⁄g *
p
, u_l⁄g 
ﬁdvÆ
, u_l⁄g 
√wvÆ
);

248 
	`ªÆôexpúe
(*);

250 
	`sysbìp
(
hîtz
, 
≥riod
);

252 
	`h¨d˛ock
(
u£rmode
, 
uötÂå_t
 
pc
);

253 
	`h¨d˛ock_˝u
(
u£rmode
);

254 
	`so·˛ock
(*);

255 
	`°©˛ock
(
u£rmode
);

256 
	`¥of˛ock
(
u£rmode
, 
uötÂå_t
 
pc
);

258 
	`°¨çrof˛ock
(
¥oc
 *);

259 
	`°›¥of˛ock
(
¥oc
 *);

260 
	`˝u_°¨çrof˛ock
();

261 
	`˝u_°›¥of˛ock
();

263 
	`¸_ˇn£e
(
u¸ed
 *
u1
, u¸ed *
u2
);

264 
	`¸_ˇn£esockë
(
u¸ed
 *
¸ed
, 
sockë
 *
so
);

265 
	`¸_ˇn£eöpcb
(
u¸ed
 *
¸ed
, 
öpcb
 *
öp
);

267 *
	`gëív
(c⁄° *
«me
);

268 
	`‰ìív
(*
ív
);

269 
	`gëív_öt
(c⁄° *
«me
, *
d©a
);

270 
	`gëív_uöt
(c⁄° *
«me
, *
d©a
);

271 
	`gëív_l⁄g
(c⁄° *
«me
, *
d©a
);

272 
	`gëív_ul⁄g
(c⁄° *
«me
, *
d©a
);

273 
	`gëív_°rög
(c⁄° *
«me
, *
d©a
, 
size
);

274 
	`gëív_quad
(c⁄° *
«me
, 
quad_t
 *
d©a
);

275 
	`£ãnv
(c⁄° *
«me
, c⁄° *
vÆue
);

276 
	`un£ãnv
(c⁄° *
«me
);

277 
	`ã°ív
(c⁄° *
«me
);

279 
	$uöt64_t
 (
	t˝u_tick_f
)();

280 
	`£t_˝utickî
(
˝u_tick_f
 *
func
, 
uöt64_t
 
‰eq
, 
v¨
);

281 
˝u_tick_f
 *
˝u_ticks
;

282 
uöt64_t
 
	`˝u_tickøã
();

283 
uöt64_t
 
	`˝utick2u£c
(uöt64_à
tick
);

285 #ifde‡
APM_FIXUP_CALLTODO


286 
timevÆ
;

287 
	`adju°_timeout_ˇŒtodo
(
timevÆ
 *
time_ch™ge
);

290 
	~<sys/libkîn.h
>

293 
	`c⁄söô
();

294 
	`˝u_öô˛ocks
();

295 
	`u§öfoöô
();

298 
	`shutdown_ni˚
();

301 
	ttimeout_t
(*);

302 
	#CALLOUT_HANDLE_INITIALIZER
(
h™dÀ
) \

303 { 
NULL
 
	}

	)
}

305 
ˇŒout_h™dÀ_öô
(
ˇŒout_h™dÀ
 *);

306 
ˇŒout_h™dÀ
 
timeout
(
timeout_t
 *, *, );

307 
u¡imeout
(
timeout_t
 *, *, 
ˇŒout_h™dÀ
);

308 
ˇddr_t
 
kîn_timeout_ˇŒwhìl_Æloc
(ˇddr_à
v
);

309 
kîn_timeout_ˇŒwhìl_öô
();

312 
__ölöe
 
	$•l0
(Ë{ ; 
	}
}

313 
__ölöe
 
öåmask_t
 
	$•lbio
(Ë{  0; 
	}
}

314 
__ölöe
 
öåmask_t
 
	$•lˇm
(Ë{  0; 
	}
}

315 
__ölöe
 
öåmask_t
 
	$•l˛ock
(Ë{  0; 
	}
}

316 
__ölöe
 
öåmask_t
 
	$•lhigh
(Ë{  0; 
	}
}

317 
__ölöe
 
öåmask_t
 
	$•limp
(Ë{  0; 
	}
}

318 
__ölöe
 
öåmask_t
 
	$• ë
(Ë{  0; 
	}
}

319 
__ölöe
 
öåmask_t
 
	$•lso·ˇm
(Ë{  0; 
	}
}

320 
__ölöe
 
öåmask_t
 
	$•lso·˛ock
(Ë{  0; 
	}
}

321 
__ölöe
 
öåmask_t
 
	$•lso·ây
(Ë{  0; 
	}
}

322 
__ölöe
 
öåmask_t
 
	$•lso·vm
(Ë{  0; 
	}
}

323 
__ölöe
 
öåmask_t
 
	$•lso·tq
(Ë{  0; 
	}
}

324 
__ölöe
 
öåmask_t
 
	$•l°©˛ock
(Ë{  0; 
	}
}

325 
__ölöe
 
öåmask_t
 
	$•…ty
(Ë{  0; 
	}
}

326 
__ölöe
 
öåmask_t
 
	$•lvm
(Ë{  0; 
	}
}

327 
__ölöe
 
	$•lx
(
öåmask_t
 
ùl
 
__unu£d
Ë{ ; 
	}
}

333 
	$_¶ìp
(*
ch™
, 
lock_obje˘
 *
lock
, 
¥i
, c⁄° *
wmesg
,

334 
timo
Ë
	`__n⁄nuŒ
(1);

335 
	#m¶ìp
(
ch™
, 
mtx
, 
¥i
, 
wmesg
, 
timo
) \

336 
	`_¶ìp
((
ch™
), &(
mtx
)->
lock_obje˘
, (
¥i
), (
wmesg
), (
timo
))

	)

337 
	$m¶ìp_•ö
(*
ch™
, 
mtx
 *mtx, c⁄° *
wmesg
, 
timo
)

338 
	`__n⁄nuŒ
(1);

339 
	`∑u£
(c⁄° *
wmesg
, 
timo
);

340 
	#t¶ìp
(
ch™
, 
¥i
, 
wmesg
, 
timo
) \

341 
	`_¶ìp
((
ch™
), 
NULL
, (
¥i
), (
wmesg
), (
timo
))

	)

342 
	$wakeup
(*
ch™
Ë
	`__n⁄nuŒ
(1);

343 
	$wakeup_⁄e
(*
ch™
Ë
	`__n⁄nuŒ
(1);

349 
cdev
;

350 
dev_t
 
	`dev2udev
(
cdev
 *
x
);

351 c⁄° *
	`devt⁄ame
(
cdev
 *cdev);

353 
	`pﬁl_no_pﬁl
(
evíts
);

356 
	`DELAY
(
u£c
);

359 
roŸ_hﬁd_tokí
;

361 
roŸ_hﬁd_tokí
 *
	`roŸ_mou¡_hﬁd
(c⁄° *
idítifõr
);

362 
	`roŸ_mou¡_ªl
(
roŸ_hﬁd_tokí
 *
h
);

363 
	`roŸ_mou¡_waô
();

364 
	`roŸ_mou¡ed
();

370 
uƒhdr
;

371 
uƒhdr
 *
	`√w_uƒhdr
(
low
, 
high
, 
mtx
 *
muãx
);

372 
	`dñëe_uƒhdr
(
uƒhdr
 *
uh
);

373 
	`˛ón_uƒhdr
(
uƒhdr
 *
uh
);

374 
	`˛ón_uƒhdæ
(
uƒhdr
 *
uh
);

375 
	`Æloc_uƒ
(
uƒhdr
 *
uh
);

376 
	`Æloc_uƒ_•ecific
(
uƒhdr
 *
uh
, 
u_öt
 
ôem
);

377 
	`Æloc_uƒl
(
uƒhdr
 *
uh
);

378 
	`‰ì_uƒ
(
uƒhdr
 *
uh
, 
u_öt
 
ôem
);

384 
__ölöe
 
uöt32_t


385 
	$bôcou¡32
(
uöt32_t
 
x
)

388 
x
 = (x & 0x55555555) + ((x & 0xaaaaaaaa) >> 1);

389 
x
 = (x & 0x33333333) + ((x & 0xcccccccc) >> 2);

390 
x
 = (x + (x >> 4)) & 0x0f0f0f0f;

391 
x
 = (x + (x >> 8));

392 
x
 = (x + (x >> 16)) & 0x000000ff;

393  (
x
);

394 
	}
}

396 
__ölöe
 
uöt16_t


397 
	$bôcou¡16
(
uöt32_t
 
x
)

400 
x
 = (x & 0x5555) + ((x & 0xaaaa) >> 1);

401 
x
 = (x & 0x3333) + ((x & 0xcccc) >> 2);

402 
x
 = (x + (x >> 4)) & 0x0f0f;

403 
x
 = (x + (x >> 8)) & 0x00ff;

404  (
x
);

405 
	}
}

	@/usr/include/sys/timeb.h

38 #i‚de‡
_SYS_TIMEB_H_


39 
	#_SYS_TIMEB_H_


	)

42 
	stimeb
 {

43 
time_t
 
	mtime
;

44 
	mmûlôm
;

45 
	mtimez⁄e
;

46 
	md°Êag
;

49 #i‚de‡
_KERNEL


50 
	~<sys/cdefs.h
>

52 
__BEGIN_DECLS


53 
·ime
(
timeb
 *);

54 
	g__END_DECLS


	@/usr/include/sys/ttycom.h

38 #i‚def 
_SYS_TTYCOM_H_


39 
	#_SYS_TTYCOM_H_


	)

41 
	~<sys/ioccom.h
>

52 
	swösize
 {

53 
	mws_row
;

54 
	mws_cﬁ
;

55 
	mws_xpixñ
;

56 
	mws_ypixñ
;

64 
	#TIOCEXCL
 
	`_IO
('t', 13Ë

	)

65 
	#TIOCNXCL
 
	`_IO
('t', 14Ë

	)

66 
	#TIOCGPTN
 
	`_IOR
('t', 15, Ë

	)

67 
	#TIOCFLUSH
 
	`_IOW
('t', 16, Ë

	)

69 
	#TIOCGETA
 
	`_IOR
('t', 19, 
ãrmios
Ë

	)

70 
	#TIOCSETA
 
	`_IOW
('t', 20, 
ãrmios
Ë

	)

71 
	#TIOCSETAW
 
	`_IOW
('t', 21, 
ãrmios
Ë

	)

72 
	#TIOCSETAF
 
	`_IOW
('t', 22, 
ãrmios
Ë

	)

74 
	#TIOCGETD
 
	`_IOR
('t', 26, Ë

	)

75 
	#TIOCSETD
 
	`_IOW
('t', 27, Ë

	)

76 
	#TIOCPTMASTER
 
	`_IO
('t', 28Ë

	)

79 
	#TIOCGDRAINWAIT
 
	`_IOR
('t', 86, Ë

	)

80 
	#TIOCSDRAINWAIT
 
	`_IOW
('t', 87, Ë

	)

82 
	#TIOCTIMESTAMP
 
	`_IOR
('t', 89, 
timevÆ
Ë

	)

85 
	#TIOCMGDTRWAIT
 
	`_IOR
('t', 90, Ë

	)

86 
	#TIOCMSDTRWAIT
 
	`_IOW
('t', 91, Ë

	)

88 
	#TIOCDRAIN
 
	`_IO
('t', 94Ë

	)

89 
	#TIOCSIG
 
	`_IOWINT
('t', 95Ë

	)

90 
	#TIOCEXT
 
	`_IOW
('t', 96, Ë

	)

92 
	#TIOCSCTTY
 
	`_IO
('t', 97Ë

	)

93 
	#TIOCCONS
 
	`_IOW
('t', 98, Ë

	)

94 
	#TIOCGSID
 
	`_IOR
('t', 99, Ë

	)

96 
	#TIOCSTAT
 
	`_IO
('t', 101Ë

	)

97 
	#TIOCUCNTL
 
	`_IOW
('t', 102, Ë

	)

98 
	#UIOCCMD
(
n
Ë
	`_IO
('u',ÇË

	)

99 
	#TIOCSWINSZ
 
	`_IOW
('t', 103, 
wösize
Ë

	)

100 
	#TIOCGWINSZ
 
	`_IOR
('t', 104, 
wösize
Ë

	)

101 
	#TIOCMGET
 
	`_IOR
('t', 106, Ë

	)

102 
	#TIOCM_LE
 0001

	)

103 
	#TIOCM_DTR
 0002

	)

104 
	#TIOCM_RTS
 0004

	)

105 
	#TIOCM_ST
 0010

	)

106 
	#TIOCM_SR
 0020

	)

107 
	#TIOCM_CTS
 0040

	)

108 
	#TIOCM_DCD
 0100

	)

109 
	#TIOCM_RI
 0200

	)

110 
	#TIOCM_DSR
 0400

	)

111 
	#TIOCM_CD
 
TIOCM_DCD


	)

112 
	#TIOCM_CAR
 
TIOCM_DCD


	)

113 
	#TIOCM_RNG
 
TIOCM_RI


	)

114 
	#TIOCMBIC
 
	`_IOW
('t', 107, Ë

	)

115 
	#TIOCMBIS
 
	`_IOW
('t', 108, Ë

	)

116 
	#TIOCMSET
 
	`_IOW
('t', 109, Ë

	)

117 
	#TIOCSTART
 
	`_IO
('t', 110Ë

	)

118 
	#TIOCSTOP
 
	`_IO
('t', 111Ë

	)

119 
	#TIOCPKT
 
	`_IOW
('t', 112, Ë

	)

120 
	#TIOCPKT_DATA
 0x00

	)

121 
	#TIOCPKT_FLUSHREAD
 0x01

	)

122 
	#TIOCPKT_FLUSHWRITE
 0x02

	)

123 
	#TIOCPKT_STOP
 0x04

	)

124 
	#TIOCPKT_START
 0x08

	)

125 
	#TIOCPKT_NOSTOP
 0x10

	)

126 
	#TIOCPKT_DOSTOP
 0x20

	)

127 
	#TIOCPKT_IOCTL
 0x40

	)

128 
	#TIOCNOTTY
 
	`_IO
('t', 113Ë

	)

129 
	#TIOCSTI
 
	`_IOW
('t', 114, Ë

	)

130 
	#TIOCOUTQ
 
	`_IOR
('t', 115, Ë

	)

132 
	#TIOCSPGRP
 
	`_IOW
('t', 118, Ë

	)

133 
	#TIOCGPGRP
 
	`_IOR
('t', 119, Ë

	)

134 
	#TIOCCDTR
 
	`_IO
('t', 120Ë

	)

135 
	#TIOCSDTR
 
	`_IO
('t', 121Ë

	)

136 
	#TIOCCBRK
 
	`_IO
('t', 122Ë

	)

137 
	#TIOCSBRK
 
	`_IO
('t', 123Ë

	)

140 
	#TTYDISC
 0

	)

141 
	#SLIPDISC
 4

	)

142 
	#PPPDISC
 5

	)

143 
	#NETGRAPHDISC
 6

	)

144 
	#H4DISC
 7

	)

	@/usr/include/asn1_err.h

4 #i‚de‡
__a¢1_îr_h__


5 
	#__a¢1_îr_h__


	)

7 
	gë_li°
;

9 
öôülize_a¢1_îr‹_èbÀ_r
(
ë_li°
 **);

11 
öôülize_a¢1_îr‹_èbÀ
();

12 
	#öô_a¢1_îr_tbl
 
öôülize_a¢1_îr‹_èbÀ


	)

14 
	ea¢1_îr‹_numbî
{

15 
	mASN1_BAD_TIMEFORMAT
 = 1859794432,

16 
	mASN1_MISSING_FIELD
 = 1859794433,

17 
	mASN1_MISPLACED_FIELD
 = 1859794434,

18 
	mASN1_TYPE_MISMATCH
 = 1859794435,

19 
	mASN1_OVERFLOW
 = 1859794436,

20 
	mASN1_OVERRUN
 = 1859794437,

21 
	mASN1_BAD_ID
 = 1859794438,

22 
	mASN1_BAD_LENGTH
 = 1859794439,

23 
	mASN1_BAD_FORMAT
 = 1859794440,

24 
	mASN1_PARSE_ERROR
 = 1859794441,

25 
	mASN1_EXTRA_DATA
 = 1859794442,

26 
	mASN1_BAD_CHARACTER
 = 1859794443,

27 
	mASN1_MIN_CONSTRAINT
 = 1859794444,

28 
	mASN1_MAX_CONSTRAINT
 = 1859794445,

29 
	mASN1_EXACT_CONSTRAINT
 = 1859794446

30 } 
	ta¢1_îr‹_numbî
;

32 
	#ERROR_TABLE_BASE_a¢1
 1859794432

	)

	@/usr/include/heim_err.h

4 #i‚de‡
__heim_îr_h__


5 
	#__heim_îr_h__


	)

7 
	gë_li°
;

9 
öôülize_heim_îr‹_èbÀ_r
(
ë_li°
 **);

11 
öôülize_heim_îr‹_èbÀ
();

12 
	#öô_heim_îr_tbl
 
öôülize_heim_îr‹_èbÀ


	)

14 
	eheim_îr‹_numbî
{

15 
	mHEIM_ERR_LOG_PARSE
 = -1980176640,

16 
	mHEIM_ERR_V4_PRINC_NO_CONV
 = -1980176639,

17 
	mHEIM_ERR_SALTTYPE_NOSUPP
 = -1980176638,

18 
	mHEIM_ERR_NOHOST
 = -1980176637,

19 
	mHEIM_ERR_OPNOTSUPP
 = -1980176636,

20 
	mHEIM_ERR_EOF
 = -1980176635,

21 
	mHEIM_ERR_BAD_MKEY
 = -1980176634,

22 
	mHEIM_ERR_SERVICE_NOMATCH
 = -1980176633,

23 
	mHEIM_PKINIT_NO_CERTIFICATE
 = -1980176576,

24 
	mHEIM_PKINIT_NO_PRIVATE_KEY
 = -1980176575,

25 
	mHEIM_PKINIT_NO_VALID_CA
 = -1980176574,

26 
	mHEIM_PKINIT_CERTIFICATE_INVALID
 = -1980176573,

27 
	mHEIM_PKINIT_PRIVATE_KEY_INVALID
 = -1980176572,

28 
	mHEIM_EAI_UNKNOWN
 = -1980176512,

29 
	mHEIM_EAI_ADDRFAMILY
 = -1980176511,

30 
	mHEIM_EAI_AGAIN
 = -1980176510,

31 
	mHEIM_EAI_BADFLAGS
 = -1980176509,

32 
	mHEIM_EAI_FAIL
 = -1980176508,

33 
	mHEIM_EAI_FAMILY
 = -1980176507,

34 
	mHEIM_EAI_MEMORY
 = -1980176506,

35 
	mHEIM_EAI_NODATA
 = -1980176505,

36 
	mHEIM_EAI_NONAME
 = -1980176504,

37 
	mHEIM_EAI_SERVICE
 = -1980176503,

38 
	mHEIM_EAI_SOCKTYPE
 = -1980176502,

39 
	mHEIM_EAI_SYSTEM
 = -1980176501

40 } 
	theim_îr‹_numbî
;

42 
	#ERROR_TABLE_BASE_heim
 -1980176640

	)

	@/usr/include/k524_err.h

4 #i‚de‡
__k524_îr_h__


5 
	#__k524_îr_h__


	)

7 
	gë_li°
;

9 
öôülize_k524_îr‹_èbÀ_r
(
ë_li°
 **);

11 
öôülize_k524_îr‹_èbÀ
();

12 
	#öô_k524_îr_tbl
 
öôülize_k524_îr‹_èbÀ


	)

14 
	ek524_îr‹_numbî
{

15 
	mKRB524_BADKEY
 = -1750206208,

16 
	mKRB524_BADADDR
 = -1750206207,

17 
	mKRB524_BADPRINC
 = -1750206206,

18 
	mKRB524_BADREALM
 = -1750206205,

19 
	mKRB524_V4ERR
 = -1750206204,

20 
	mKRB524_ENCFULL
 = -1750206203,

21 
	mKRB524_DECEMPTY
 = -1750206202,

22 
	mKRB524_NOTRESP
 = -1750206201

23 } 
	tk524_îr‹_numbî
;

25 
	#ERROR_TABLE_BASE_k524
 -1750206208

	)

	@/usr/include/krb5-protos.h

2 #i‚de‡
__krb5_¥Ÿos_h__


3 
	#__krb5_¥Ÿos_h__


	)

5 
	~<°d¨g.h
>

7 #i‡!
deföed
(
__GNUC__
Ë&& !deföed(
__©åibuã__
)

8 
	#__©åibuã__
(
x
)

	)

11 #ifde‡
__˝lu•lus


15 #i‚de‡
KRB5_LIB_FUNCTION


16 #i‡
deföed
(
_WIN32
)

17 
	#KRB5_LIB_FUNCTION
 
_°dˇŒ


	)

19 
	#KRB5_LIB_FUNCTION


	)

23 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


24 
krb524_c⁄vît_¸eds_kdc
 (

25 
krb5_c⁄ãxt
 ,

26 
krb5_¸eds
 * ,

27 
¸edítüls
 * );

29 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


30 
krb524_c⁄vît_¸eds_kdc_cˇche
 (

31 
krb5_c⁄ãxt
 ,

32 
krb5_cˇche
 ,

33 
krb5_¸eds
 * ,

34 
¸edítüls
 * );

36 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


37 
krb5_425_c⁄v_¥öcùÆ
 (

38 
krb5_c⁄ãxt
 ,

42 
krb5_¥öcùÆ
 * );

44 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


45 
krb5_425_c⁄v_¥öcùÆ_ext
 (

46 
krb5_c⁄ãxt
 ,

50 
krb5_boﬁón
 (* )(
krb5_c⁄ãxt
, 
krb5_¥öcùÆ
),

51 
krb5_boﬁón
 ,

52 
krb5_¥öcùÆ
 * );

54 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


55 
krb5_425_c⁄v_¥öcùÆ_ext2
 (

56 
krb5_c⁄ãxt
 ,

60 
krb5_boﬁón
 (* )(
krb5_c⁄ãxt
, *, 
krb5_¥öcùÆ
),

62 
krb5_boﬁón
 ,

63 
krb5_¥öcùÆ
 * );

65 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


66 
krb5_524_c⁄v_¥öcùÆ
 (

67 
krb5_c⁄ãxt
 ,

68 c⁄° 
krb5_¥öcùÆ
 ,

73 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


74 
krb5_ab‹t
 (

75 
krb5_c⁄ãxt
 ,

76 
krb5_îr‹_code
 ,

79 
__©åibuã__
 ((
n‹ëu∫
, 
f‹m©
 (
¥ötf
, 3, 4)));

81 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


82 
krb5_ab‹tx
 (

83 
krb5_c⁄ãxt
 ,

86 
__©åibuã__
 ((
n‹ëu∫
, 
f‹m©
 (
¥ötf
, 2, 3)));

88 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


89 
krb5_a˛_m©ch_fûe
 (

90 
krb5_c⁄ãxt
 ,

95 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


96 
krb5_a˛_m©ch_°rög
 (

97 
krb5_c⁄ãxt
 ,

102 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


103 
krb5_add_ë_li°
 (

104 
krb5_c⁄ãxt
 ,

105 (* )(
ë_li°
 **));

107 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


108 
krb5_add_exåa_addªs£s
 (

109 
krb5_c⁄ãxt
 ,

110 
krb5_addªs£s
 * );

112 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


113 
krb5_add_ign‹e_addªs£s
 (

114 
krb5_c⁄ãxt
 ,

115 
krb5_addªs£s
 * );

117 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


118 
krb5_addlog_de°
 (

119 
krb5_c⁄ãxt
 ,

120 
krb5_log_Ácûôy
 * ,

123 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


124 
krb5_addlog_func
 (

125 
krb5_c⁄ãxt
 ,

126 
krb5_log_Ácûôy
 * ,

129 
krb5_log_log_func_t
 ,

130 
krb5_log_˛o£_func_t
 ,

133 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


134 
krb5_addr2sockaddr
 (

135 
krb5_c⁄ãxt
 ,

136 c⁄° 
krb5_addªss
 * ,

137 
sockaddr
 * ,

138 
krb5_sockÀn_t
 * ,

141 
krb5_boﬁón
 
KRB5_LIB_FUNCTION


142 
krb5_addªss_com∑ª
 (

143 
krb5_c⁄ãxt
 ,

144 c⁄° 
krb5_addªss
 * ,

145 c⁄° 
krb5_addªss
 * );

147 
KRB5_LIB_FUNCTION


148 
krb5_addªss_‹dî
 (

149 
krb5_c⁄ãxt
 ,

150 c⁄° 
krb5_addªss
 * ,

151 c⁄° 
krb5_addªss
 * );

153 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


154 
krb5_addªss_¥efixÀn_bound¨y
 (

155 
krb5_c⁄ãxt
 ,

156 c⁄° 
krb5_addªss
 * ,

158 
krb5_addªss
 * ,

159 
krb5_addªss
 * );

161 
krb5_boﬁón
 
KRB5_LIB_FUNCTION


162 
krb5_addªss_£¨ch
 (

163 
krb5_c⁄ãxt
 ,

164 c⁄° 
krb5_addªss
 * ,

165 c⁄° 
krb5_addªs£s
 * );

167 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


168 
krb5_™ame_to_loˇ ame
 (

169 
krb5_c⁄ãxt
 ,

170 
krb5_c⁄°_¥öcùÆ
 ,

171 
size_t
 ,

174 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


175 
krb5_™yaddr
 (

176 
krb5_c⁄ãxt
 ,

178 
sockaddr
 * ,

179 
krb5_sockÀn_t
 * ,

182 
KRB5_LIB_FUNCTION


183 
krb5_≠pdeÁu…_boﬁón
 (

184 
krb5_c⁄ãxt
 ,

186 
krb5_c⁄°_ªÆm
 ,

188 
krb5_boﬁón
 ,

189 
krb5_boﬁón
 * );

191 
KRB5_LIB_FUNCTION


192 
krb5_≠pdeÁu…_°rög
 (

193 
krb5_c⁄ãxt
 ,

195 
krb5_c⁄°_ªÆm
 ,

200 
KRB5_LIB_FUNCTION


201 
krb5_≠pdeÁu…_time
 (

202 
krb5_c⁄ãxt
 ,

204 
krb5_c⁄°_ªÆm
 ,

206 
time_t
 ,

207 
time_t
 * );

209 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


210 
krb5_≠≥nd_addªs£s
 (

211 
krb5_c⁄ãxt
 ,

212 
krb5_addªs£s
 * ,

213 c⁄° 
krb5_addªs£s
 * );

215 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


216 
krb5_auth_c⁄_addÊags
 (

217 
krb5_c⁄ãxt
 ,

218 
krb5_auth_c⁄ãxt
 ,

219 
öt32_t
 ,

220 
öt32_t
 * );

222 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


223 
krb5_auth_c⁄_‰ì
 (

224 
krb5_c⁄ãxt
 ,

225 
krb5_auth_c⁄ãxt
 );

227 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


228 
krb5_auth_c⁄_gíaddrs
 (

229 
krb5_c⁄ãxt
 ,

230 
krb5_auth_c⁄ãxt
 ,

234 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


235 
krb5_auth_c⁄_gíî©ñoˇlsubkey
 (

236 
krb5_c⁄ãxt
 ,

237 
krb5_auth_c⁄ãxt
 ,

238 
krb5_keyblock
 * );

240 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


241 
krb5_auth_c⁄_gëaddrs
 (

242 
krb5_c⁄ãxt
 ,

243 
krb5_auth_c⁄ãxt
 ,

244 
krb5_addªss
 ** ,

245 
krb5_addªss
 ** );

247 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


248 
krb5_auth_c⁄_gëauthítiˇt‹
 (

249 
krb5_c⁄ãxt
 ,

250 
krb5_auth_c⁄ãxt
 ,

251 
krb5_authítiˇt‹
 * );

253 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


254 
krb5_auth_c⁄_gëcksumty≥
 (

255 
krb5_c⁄ãxt
 ,

256 
krb5_auth_c⁄ãxt
 ,

257 
krb5_cksumty≥
 * );

259 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


260 
krb5_auth_c⁄_gëÊags
 (

261 
krb5_c⁄ãxt
 ,

262 
krb5_auth_c⁄ãxt
 ,

263 
öt32_t
 * );

265 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


266 
krb5_auth_c⁄_gëkey
 (

267 
krb5_c⁄ãxt
 ,

268 
krb5_auth_c⁄ãxt
 ,

269 
krb5_keyblock
 ** );

271 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


272 
krb5_auth_c⁄_gëkeyty≥
 (

273 
krb5_c⁄ãxt
 ,

274 
krb5_auth_c⁄ãxt
 ,

275 
krb5_keyty≥
 * );

277 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


278 
krb5_auth_c⁄_gëloˇl£qnumbî
 (

279 
krb5_c⁄ãxt
 ,

280 
krb5_auth_c⁄ãxt
 ,

281 
öt32_t
 * );

283 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


284 
krb5_auth_c⁄_gëloˇlsubkey
 (

285 
krb5_c⁄ãxt
 ,

286 
krb5_auth_c⁄ãxt
 ,

287 
krb5_keyblock
 ** );

289 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


290 
krb5_auth_c⁄_gërˇche
 (

291 
krb5_c⁄ãxt
 ,

292 
krb5_auth_c⁄ãxt
 ,

293 
krb5_rˇche
 * );

295 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


296 
krb5_auth_c⁄_gëªmŸesubkey
 (

297 
krb5_c⁄ãxt
 ,

298 
krb5_auth_c⁄ãxt
 ,

299 
krb5_keyblock
 ** );

301 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


302 
krb5_auth_c⁄_öô
 (

303 
krb5_c⁄ãxt
 ,

304 
krb5_auth_c⁄ãxt
 * );

306 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


307 
krb5_auth_c⁄_ªmoveÊags
 (

308 
krb5_c⁄ãxt
 ,

309 
krb5_auth_c⁄ãxt
 ,

310 
öt32_t
 ,

311 
öt32_t
 * );

313 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


314 
krb5_auth_c⁄_£èddrs
 (

315 
krb5_c⁄ãxt
 ,

316 
krb5_auth_c⁄ãxt
 ,

317 
krb5_addªss
 * ,

318 
krb5_addªss
 * );

320 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


321 
krb5_auth_c⁄_£èddrs_‰om_fd
 (

322 
krb5_c⁄ãxt
 ,

323 
krb5_auth_c⁄ãxt
 ,

326 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


327 
krb5_auth_c⁄_£tcksumty≥
 (

328 
krb5_c⁄ãxt
 ,

329 
krb5_auth_c⁄ãxt
 ,

330 
krb5_cksumty≥
 );

332 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


333 
krb5_auth_c⁄_£tÊags
 (

334 
krb5_c⁄ãxt
 ,

335 
krb5_auth_c⁄ãxt
 ,

336 
öt32_t
 );

338 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


339 
krb5_auth_c⁄_£tkey
 (

340 
krb5_c⁄ãxt
 ,

341 
krb5_auth_c⁄ãxt
 ,

342 
krb5_keyblock
 * );

344 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


345 
krb5_auth_c⁄_£tkeyty≥
 (

346 
krb5_c⁄ãxt
 ,

347 
krb5_auth_c⁄ãxt
 ,

348 
krb5_keyty≥
 );

350 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


351 
krb5_auth_c⁄_£éoˇl£qnumbî
 (

352 
krb5_c⁄ãxt
 ,

353 
krb5_auth_c⁄ãxt
 ,

354 
öt32_t
 );

356 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


357 
krb5_auth_c⁄_£éoˇlsubkey
 (

358 
krb5_c⁄ãxt
 ,

359 
krb5_auth_c⁄ãxt
 ,

360 
krb5_keyblock
 * );

362 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


363 
krb5_auth_c⁄_£åˇche
 (

364 
krb5_c⁄ãxt
 ,

365 
krb5_auth_c⁄ãxt
 ,

366 
krb5_rˇche
 );

368 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


369 
krb5_auth_c⁄_£åemŸe£qnumbî
 (

370 
krb5_c⁄ãxt
 ,

371 
krb5_auth_c⁄ãxt
 ,

372 
öt32_t
 );

374 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


375 
krb5_auth_c⁄_£åemŸesubkey
 (

376 
krb5_c⁄ãxt
 ,

377 
krb5_auth_c⁄ãxt
 ,

378 
krb5_keyblock
 * );

380 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


381 
krb5_auth_c⁄_£tu£rkey
 (

382 
krb5_c⁄ãxt
 ,

383 
krb5_auth_c⁄ãxt
 ,

384 
krb5_keyblock
 * );

386 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


387 
krb5_auth_gëªmŸe£qnumbî
 (

388 
krb5_c⁄ãxt
 ,

389 
krb5_auth_c⁄ãxt
 ,

390 
öt32_t
 * );

392 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


393 
krb5_buûd_≠_ªq
 (

394 
krb5_c⁄ãxt
 ,

395 
krb5_í˘y≥
 ,

396 
krb5_¸eds
 * ,

397 
krb5_Êags
 ,

398 
krb5_d©a
 ,

399 
krb5_d©a
 * );

401 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


402 
krb5_buûd_authítiˇt‹
 (

403 
krb5_c⁄ãxt
 ,

404 
krb5_auth_c⁄ãxt
 ,

405 
krb5_í˘y≥
 ,

406 
krb5_¸eds
 * ,

407 
Checksum
 * ,

408 
Authítiˇt‹
 ** ,

409 
krb5_d©a
 * ,

410 
krb5_key_ußge
 );

412 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


413 
krb5_buûd_¥öcùÆ
 (

414 
krb5_c⁄ãxt
 ,

415 
krb5_¥öcùÆ
 * ,

417 
krb5_c⁄°_ªÆm
 ,

420 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


421 
krb5_buûd_¥öcùÆ_ext
 (

422 
krb5_c⁄ãxt
 ,

423 
krb5_¥öcùÆ
 * ,

425 
krb5_c⁄°_ªÆm
 ,

428 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


429 
krb5_buûd_¥öcùÆ_va
 (

430 
krb5_c⁄ãxt
 ,

431 
krb5_¥öcùÆ
 * ,

433 
krb5_c⁄°_ªÆm
 ,

434 
va_li°
 );

436 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


437 
krb5_buûd_¥öcùÆ_va_ext
 (

438 
krb5_c⁄ãxt
 ,

439 
krb5_¥öcùÆ
 * ,

441 
krb5_c⁄°_ªÆm
 ,

442 
va_li°
 );

444 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


445 
krb5_c_block_size
 (

446 
krb5_c⁄ãxt
 ,

447 
krb5_í˘y≥
 ,

448 
size_t
 * );

450 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


451 
krb5_c_checksum_Àngth
 (

452 
krb5_c⁄ãxt
 ,

453 
krb5_cksumty≥
 ,

454 
size_t
 * );

456 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


457 
krb5_c_de¸y±
 (

458 
krb5_c⁄ãxt
 ,

459 c⁄° 
krb5_keyblock
 ,

460 
krb5_keyußge
 ,

461 c⁄° 
krb5_d©a
 * ,

462 
krb5_íc_d©a
 * ,

463 
krb5_d©a
 * );

465 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


466 
krb5_c_í¸y±
 (

467 
krb5_c⁄ãxt
 ,

468 c⁄° 
krb5_keyblock
 * ,

469 
krb5_keyußge
 ,

470 c⁄° 
krb5_d©a
 * ,

471 c⁄° 
krb5_d©a
 * ,

472 
krb5_íc_d©a
 * );

474 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


475 
krb5_c_í¸y±_Àngth
 (

476 
krb5_c⁄ãxt
 ,

477 
krb5_í˘y≥
 ,

478 
size_t
 ,

479 
size_t
 * );

481 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


482 
krb5_c_í˘y≥_com∑ª
 (

483 
krb5_c⁄ãxt
 ,

484 
krb5_í˘y≥
 ,

485 
krb5_í˘y≥
 ,

486 
krb5_boﬁón
 * );

488 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


489 
krb5_c_gë_checksum
 (

490 
krb5_c⁄ãxt
 ,

491 c⁄° 
krb5_checksum
 * ,

492 
krb5_cksumty≥
 * ,

493 
krb5_d©a
 ** );

495 
krb5_boﬁón
 
KRB5_LIB_FUNCTION


496 
krb5_c_is_cﬁl_¥oof_cksum
 (
krb5_cksumty≥
 );

498 
krb5_boﬁón
 
KRB5_LIB_FUNCTION


499 
krb5_c_is_keyed_cksum
 (
krb5_cksumty≥
 );

501 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


502 
krb5_c_keyÀngths
 (

503 
krb5_c⁄ãxt
 ,

504 
krb5_í˘y≥
 ,

505 
size_t
 * ,

506 
size_t
 * );

508 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


509 
krb5_c_make_checksum
 (

510 
krb5_c⁄ãxt
 ,

511 
krb5_cksumty≥
 ,

512 c⁄° 
krb5_keyblock
 * ,

513 
krb5_keyußge
 ,

514 c⁄° 
krb5_d©a
 * ,

515 
krb5_checksum
 * );

517 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


518 
krb5_c_make_øndom_key
 (

519 
krb5_c⁄ãxt
 ,

520 
krb5_í˘y≥
 ,

521 
krb5_keyblock
 * );

523 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


524 
krb5_c_¥f
 (

525 
krb5_c⁄ãxt
 ,

526 c⁄° 
krb5_keyblock
 * ,

527 c⁄° 
krb5_d©a
 * ,

528 
krb5_d©a
 * );

530 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


531 
krb5_c_¥f_Àngth
 (

532 
krb5_c⁄ãxt
 ,

533 
krb5_í˘y≥
 ,

534 
size_t
 * );

536 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


537 
krb5_c_£t_checksum
 (

538 
krb5_c⁄ãxt
 ,

539 
krb5_checksum
 * ,

540 
krb5_cksumty≥
 ,

541 c⁄° 
krb5_d©a
 * );

543 
krb5_boﬁón
 
KRB5_LIB_FUNCTION


544 
krb5_c_vÆid_cksumty≥
 (
krb5_cksumty≥
 );

546 
krb5_boﬁón
 
KRB5_LIB_FUNCTION


547 
krb5_c_vÆid_í˘y≥
 (
krb5_í˘y≥
 );

549 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


550 
krb5_c_vîify_checksum
 (

551 
krb5_c⁄ãxt
 ,

552 c⁄° 
krb5_keyblock
 * ,

553 
krb5_keyußge
 ,

554 c⁄° 
krb5_d©a
 * ,

555 c⁄° 
krb5_checksum
 * ,

556 
krb5_boﬁón
 * );

558 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


559 
krb5_cc_ˇche_íd_£q_gë
 (

560 
krb5_c⁄ãxt
 ,

561 
krb5_cc_ˇche_curs‹
 );

563 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


564 
krb5_cc_ˇche_gë_fú°
 (

565 
krb5_c⁄ãxt
 ,

567 
krb5_cc_ˇche_curs‹
 * );

569 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


570 
krb5_cc_ˇche_m©ch
 (

571 
krb5_c⁄ãxt
 ,

572 
krb5_¥öcùÆ
 ,

574 
krb5_cˇche
 * );

576 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


577 
krb5_cc_ˇche_√xt
 (

578 
krb5_c⁄ãxt
 ,

579 
krb5_cc_ˇche_curs‹
 ,

580 
krb5_cˇche
 * );

582 
KRB5_LIB_FUNCTION


583 
krb5_cc_˛ór_m¸ed
 (
krb5_¸eds
 * );

585 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


586 
krb5_cc_˛o£
 (

587 
krb5_c⁄ãxt
 ,

588 
krb5_cˇche
 );

590 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


591 
krb5_cc_c›y_ˇche
 (

592 
krb5_c⁄ãxt
 ,

593 c⁄° 
krb5_cˇche
 ,

594 
krb5_cˇche
 );

596 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


597 
krb5_cc_c›y_ˇche_m©ch
 (

598 
krb5_c⁄ãxt
 ,

599 c⁄° 
krb5_cˇche
 ,

600 
krb5_cˇche
 ,

601 
krb5_Êags
 ,

602 c⁄° 
krb5_¸eds
 * ,

605 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


606 
krb5_cc_deÁu…
 (

607 
krb5_c⁄ãxt
 ,

608 
krb5_cˇche
 * );

610 c⁄° * 
KRB5_LIB_FUNCTION


611 
krb5_cc_deÁu…_«me
 (
krb5_c⁄ãxt
 );

613 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


614 
krb5_cc_de°roy
 (

615 
krb5_c⁄ãxt
 ,

616 
krb5_cˇche
 );

618 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


619 
krb5_cc_íd_£q_gë
 (

620 
krb5_c⁄ãxt
 ,

621 c⁄° 
krb5_cˇche
 ,

622 
krb5_cc_curs‹
 * );

624 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


625 
krb5_cc_gí_√w
 (

626 
krb5_c⁄ãxt
 ,

627 c⁄° 
krb5_cc_›s
 * ,

628 
krb5_cˇche
 * );

630 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


631 
krb5_cc_gë_fuŒ_«me
 (

632 
krb5_c⁄ãxt
 ,

633 
krb5_cˇche
 ,

636 c⁄° * 
KRB5_LIB_FUNCTION


637 
krb5_cc_gë_«me
 (

638 
krb5_c⁄ãxt
 ,

639 
krb5_cˇche
 );

641 c⁄° 
krb5_cc_›s
 *

642 
krb5_cc_gë_›s
 (

643 
krb5_c⁄ãxt
 ,

644 
krb5_cˇche
 );

646 c⁄° 
krb5_cc_›s
 *

647 
krb5_cc_gë_¥efix_›s
 (

648 
krb5_c⁄ãxt
 ,

651 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


652 
krb5_cc_gë_¥öcùÆ
 (

653 
krb5_c⁄ãxt
 ,

654 
krb5_cˇche
 ,

655 
krb5_¥öcùÆ
 * );

657 c⁄° * 
KRB5_LIB_FUNCTION


658 
krb5_cc_gë_ty≥
 (

659 
krb5_c⁄ãxt
 ,

660 
krb5_cˇche
 );

662 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


663 
krb5_cc_gë_vîsi⁄
 (

664 
krb5_c⁄ãxt
 ,

665 c⁄° 
krb5_cˇche
 );

667 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


668 
krb5_cc_öôülize
 (

669 
krb5_c⁄ãxt
 ,

670 
krb5_cˇche
 ,

671 
krb5_¥öcùÆ
 );

673 
krb5_îr‹_code


674 
krb5_cc_move
 (

675 
krb5_c⁄ãxt
 ,

676 
krb5_cˇche
 ,

677 
krb5_cˇche
 );

679 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


680 
krb5_cc_√w_unique
 (

681 
krb5_c⁄ãxt
 ,

684 
krb5_cˇche
 * );

686 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


687 
krb5_cc_√xt_¸ed
 (

688 
krb5_c⁄ãxt
 ,

689 c⁄° 
krb5_cˇche
 ,

690 
krb5_cc_curs‹
 * ,

691 
krb5_¸eds
 * );

693 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


694 
krb5_cc_√xt_¸ed_m©ch
 (

695 
krb5_c⁄ãxt
 ,

696 c⁄° 
krb5_cˇche
 ,

697 
krb5_cc_curs‹
 * ,

698 
krb5_¸eds
 * ,

699 
krb5_Êags
 ,

700 c⁄° 
krb5_¸eds
 * );

702 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


703 
krb5_cc_ªgi°î
 (

704 
krb5_c⁄ãxt
 ,

705 c⁄° 
krb5_cc_›s
 * ,

706 
krb5_boﬁón
 );

708 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


709 
krb5_cc_ªmove_¸ed
 (

710 
krb5_c⁄ãxt
 ,

711 
krb5_cˇche
 ,

712 
krb5_Êags
 ,

713 
krb5_¸eds
 * );

715 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


716 
krb5_cc_ªsﬁve
 (

717 
krb5_c⁄ãxt
 ,

719 
krb5_cˇche
 * );

721 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


722 
krb5_cc_ªåõve_¸ed
 (

723 
krb5_c⁄ãxt
 ,

724 
krb5_cˇche
 ,

725 
krb5_Êags
 ,

726 c⁄° 
krb5_¸eds
 * ,

727 
krb5_¸eds
 * );

729 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


730 
krb5_cc_£t_deÁu…_«me
 (

731 
krb5_c⁄ãxt
 ,

734 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


735 
krb5_cc_£t_Êags
 (

736 
krb5_c⁄ãxt
 ,

737 
krb5_cˇche
 ,

738 
krb5_Êags
 );

740 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


741 
krb5_cc_°¨t_£q_gë
 (

742 
krb5_c⁄ãxt
 ,

743 c⁄° 
krb5_cˇche
 ,

744 
krb5_cc_curs‹
 * );

746 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


747 
krb5_cc_°‹e_¸ed
 (

748 
krb5_c⁄ãxt
 ,

749 
krb5_cˇche
 ,

750 
krb5_¸eds
 * );

752 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


753 
krb5_ch™ge_∑ssw‹d
 (

754 
krb5_c⁄ãxt
 ,

755 
krb5_¸eds
 * ,

758 
krb5_d©a
 * ,

759 
krb5_d©a
 * );

761 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


762 
krb5_check_å™sôed
 (

763 
krb5_c⁄ãxt
 ,

764 
krb5_c⁄°_ªÆm
 ,

765 
krb5_c⁄°_ªÆm
 ,

766 
krb5_ªÆm
 * ,

770 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


771 
krb5_check_å™sôed_ªÆms
 (

772 
krb5_c⁄ãxt
 ,

777 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


778 
krb5_checksum_dißbÀ
 (

779 
krb5_c⁄ãxt
 ,

780 
krb5_cksumty≥
 );

782 
KRB5_LIB_FUNCTION


783 
krb5_checksum_‰ì
 (

784 
krb5_c⁄ãxt
 ,

785 
krb5_checksum
 * );

787 
krb5_boﬁón
 
KRB5_LIB_FUNCTION


788 
krb5_checksum_is_cﬁlisi⁄_¥oof
 (

789 
krb5_c⁄ãxt
 ,

790 
krb5_cksumty≥
 );

792 
krb5_boﬁón
 
KRB5_LIB_FUNCTION


793 
krb5_checksum_is_keyed
 (

794 
krb5_c⁄ãxt
 ,

795 
krb5_cksumty≥
 );

797 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


798 
krb5_checksumsize
 (

799 
krb5_c⁄ãxt
 ,

800 
krb5_cksumty≥
 ,

801 
size_t
 * );

803 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


804 
krb5_cksumty≥_vÆid
 (

805 
krb5_c⁄ãxt
 ,

806 
krb5_cksumty≥
 );

808 
KRB5_LIB_FUNCTION


809 
krb5_˛ór_îr‹_°rög
 (
krb5_c⁄ãxt
 );

811 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


812 
krb5_˛o£log
 (

813 
krb5_c⁄ãxt
 ,

814 
krb5_log_Ácûôy
 * );

816 
krb5_boﬁón
 
KRB5_LIB_FUNCTION


817 
krb5_com∑ª_¸eds
 (

818 
krb5_c⁄ãxt
 ,

819 
krb5_Êags
 ,

820 c⁄° 
krb5_¸eds
 * ,

821 c⁄° 
krb5_¸eds
 * );

823 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


824 
krb5_c⁄fig_fûe_‰ì
 (

825 
krb5_c⁄ãxt
 ,

826 
krb5_c⁄fig_£˘i⁄
 * );

828 
KRB5_LIB_FUNCTION


829 
krb5_c⁄fig_‰ì_°rögs
 (** );

832 
krb5_c⁄fig_gë
 (

833 
krb5_c⁄ãxt
 ,

834 c⁄° 
krb5_c⁄fig_£˘i⁄
 * ,

838 
krb5_boﬁón
 
KRB5_LIB_FUNCTION


839 
krb5_c⁄fig_gë_boﬁ
 (

840 
krb5_c⁄ãxt
 ,

841 c⁄° 
krb5_c⁄fig_£˘i⁄
 * ,

844 
krb5_boﬁón
 
KRB5_LIB_FUNCTION


845 
krb5_c⁄fig_gë_boﬁ_deÁu…
 (

846 
krb5_c⁄ãxt
 ,

847 c⁄° 
krb5_c⁄fig_£˘i⁄
 * ,

848 
krb5_boﬁón
 ,

851 
KRB5_LIB_FUNCTION


852 
krb5_c⁄fig_gë_öt
 (

853 
krb5_c⁄ãxt
 ,

854 c⁄° 
krb5_c⁄fig_£˘i⁄
 * ,

857 
KRB5_LIB_FUNCTION


858 
krb5_c⁄fig_gë_öt_deÁu…
 (

859 
krb5_c⁄ãxt
 ,

860 c⁄° 
krb5_c⁄fig_£˘i⁄
 * ,

864 c⁄° 
krb5_c⁄fig_bödög
 *

865 
krb5_c⁄fig_gë_li°
 (

866 
krb5_c⁄ãxt
 ,

867 c⁄° 
krb5_c⁄fig_£˘i⁄
 * ,

871 
krb5_c⁄fig_gë_√xt
 (

872 
krb5_c⁄ãxt
 ,

873 c⁄° 
krb5_c⁄fig_£˘i⁄
 * ,

874 c⁄° 
krb5_c⁄fig_bödög
 ** ,

878 c⁄° * 
KRB5_LIB_FUNCTION


879 
krb5_c⁄fig_gë_°rög
 (

880 
krb5_c⁄ãxt
 ,

881 c⁄° 
krb5_c⁄fig_£˘i⁄
 * ,

884 c⁄° * 
KRB5_LIB_FUNCTION


885 
krb5_c⁄fig_gë_°rög_deÁu…
 (

886 
krb5_c⁄ãxt
 ,

887 c⁄° 
krb5_c⁄fig_£˘i⁄
 * ,

892 
krb5_c⁄fig_gë_°rögs
 (

893 
krb5_c⁄ãxt
 ,

894 c⁄° 
krb5_c⁄fig_£˘i⁄
 * ,

897 
KRB5_LIB_FUNCTION


898 
krb5_c⁄fig_gë_time
 (

899 
krb5_c⁄ãxt
 ,

900 c⁄° 
krb5_c⁄fig_£˘i⁄
 * ,

903 
KRB5_LIB_FUNCTION


904 
krb5_c⁄fig_gë_time_deÁu…
 (

905 
krb5_c⁄ãxt
 ,

906 c⁄° 
krb5_c⁄fig_£˘i⁄
 * ,

910 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


911 
krb5_c⁄fig_∑r£_fûe
 (

912 
krb5_c⁄ãxt
 ,

914 
krb5_c⁄fig_£˘i⁄
 ** );

916 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


917 
krb5_c⁄fig_∑r£_fûe_mu…i
 (

918 
krb5_c⁄ãxt
 ,

920 
krb5_c⁄fig_£˘i⁄
 ** );

922 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


923 
krb5_c⁄fig_∑r£_°rög_mu…i
 (

924 
krb5_c⁄ãxt
 ,

926 
krb5_c⁄fig_£˘i⁄
 ** );

929 
krb5_c⁄fig_vgë
 (

930 
krb5_c⁄ãxt
 ,

931 c⁄° 
krb5_c⁄fig_£˘i⁄
 * ,

933 
va_li°
 );

935 
krb5_boﬁón
 
KRB5_LIB_FUNCTION


936 
krb5_c⁄fig_vgë_boﬁ
 (

937 
krb5_c⁄ãxt
 ,

938 c⁄° 
krb5_c⁄fig_£˘i⁄
 * ,

939 
va_li°
 );

941 
krb5_boﬁón
 
KRB5_LIB_FUNCTION


942 
krb5_c⁄fig_vgë_boﬁ_deÁu…
 (

943 
krb5_c⁄ãxt
 ,

944 c⁄° 
krb5_c⁄fig_£˘i⁄
 * ,

945 
krb5_boﬁón
 ,

946 
va_li°
 );

948 
KRB5_LIB_FUNCTION


949 
krb5_c⁄fig_vgë_öt
 (

950 
krb5_c⁄ãxt
 ,

951 c⁄° 
krb5_c⁄fig_£˘i⁄
 * ,

952 
va_li°
 );

954 
KRB5_LIB_FUNCTION


955 
krb5_c⁄fig_vgë_öt_deÁu…
 (

956 
krb5_c⁄ãxt
 ,

957 c⁄° 
krb5_c⁄fig_£˘i⁄
 * ,

959 
va_li°
 );

961 c⁄° 
krb5_c⁄fig_bödög
 *

962 
krb5_c⁄fig_vgë_li°
 (

963 
krb5_c⁄ãxt
 ,

964 c⁄° 
krb5_c⁄fig_£˘i⁄
 * ,

965 
va_li°
 );

968 
krb5_c⁄fig_vgë_√xt
 (

969 
krb5_c⁄ãxt
 ,

970 c⁄° 
krb5_c⁄fig_£˘i⁄
 * ,

971 c⁄° 
krb5_c⁄fig_bödög
 ** ,

973 
va_li°
 );

975 c⁄° * 
KRB5_LIB_FUNCTION


976 
krb5_c⁄fig_vgë_°rög
 (

977 
krb5_c⁄ãxt
 ,

978 c⁄° 
krb5_c⁄fig_£˘i⁄
 * ,

979 
va_li°
 );

981 c⁄° * 
KRB5_LIB_FUNCTION


982 
krb5_c⁄fig_vgë_°rög_deÁu…
 (

983 
krb5_c⁄ãxt
 ,

984 c⁄° 
krb5_c⁄fig_£˘i⁄
 * ,

986 
va_li°
 );

988 ** 
KRB5_LIB_FUNCTION


989 
krb5_c⁄fig_vgë_°rögs
 (

990 
krb5_c⁄ãxt
 ,

991 c⁄° 
krb5_c⁄fig_£˘i⁄
 * ,

992 
va_li°
 );

994 
KRB5_LIB_FUNCTION


995 
krb5_c⁄fig_vgë_time
 (

996 
krb5_c⁄ãxt
 ,

997 c⁄° 
krb5_c⁄fig_£˘i⁄
 * ,

998 
va_li°
 );

1000 
KRB5_LIB_FUNCTION


1001 
krb5_c⁄fig_vgë_time_deÁu…
 (

1002 
krb5_c⁄ãxt
 ,

1003 c⁄° 
krb5_c⁄fig_£˘i⁄
 * ,

1005 
va_li°
 );

1007 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1008 
krb5_c›y_addªss
 (

1009 
krb5_c⁄ãxt
 ,

1010 c⁄° 
krb5_addªss
 * ,

1011 
krb5_addªss
 * );

1013 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1014 
krb5_c›y_addªs£s
 (

1015 
krb5_c⁄ãxt
 ,

1016 c⁄° 
krb5_addªs£s
 * ,

1017 
krb5_addªs£s
 * );

1019 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1020 
krb5_c›y_checksum
 (

1021 
krb5_c⁄ãxt
 ,

1022 c⁄° 
krb5_checksum
 * ,

1023 
krb5_checksum
 ** );

1025 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1026 
krb5_c›y_¸eds
 (

1027 
krb5_c⁄ãxt
 ,

1028 c⁄° 
krb5_¸eds
 * ,

1029 
krb5_¸eds
 ** );

1031 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1032 
krb5_c›y_¸eds_c⁄ã¡s
 (

1033 
krb5_c⁄ãxt
 ,

1034 c⁄° 
krb5_¸eds
 * ,

1035 
krb5_¸eds
 * );

1037 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1038 
krb5_c›y_d©a
 (

1039 
krb5_c⁄ãxt
 ,

1040 c⁄° 
krb5_d©a
 * ,

1041 
krb5_d©a
 ** );

1043 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1044 
krb5_c›y_ho°_ªÆm
 (

1045 
krb5_c⁄ãxt
 ,

1046 c⁄° 
krb5_ªÆm
 * ,

1047 
krb5_ªÆm
 ** );

1049 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1050 
krb5_c›y_keyblock
 (

1051 
krb5_c⁄ãxt
 ,

1052 c⁄° 
krb5_keyblock
 * ,

1053 
krb5_keyblock
 ** );

1055 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1056 
krb5_c›y_keyblock_c⁄ã¡s
 (

1057 
krb5_c⁄ãxt
 ,

1058 c⁄° 
krb5_keyblock
 * ,

1059 
krb5_keyblock
 * );

1061 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1062 
krb5_c›y_¥öcùÆ
 (

1063 
krb5_c⁄ãxt
 ,

1064 
krb5_c⁄°_¥öcùÆ
 ,

1065 
krb5_¥öcùÆ
 * );

1067 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1068 
krb5_c›y_tickë
 (

1069 
krb5_c⁄ãxt
 ,

1070 c⁄° 
krb5_tickë
 * ,

1071 
krb5_tickë
 ** );

1073 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1074 
krb5_¸óã_checksum
 (

1075 
krb5_c⁄ãxt
 ,

1076 
krb5_¸y±o
 ,

1077 
krb5_key_ußge
 ,

1080 
size_t
 ,

1081 
Checksum
 * );

1083 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1084 
krb5_¸y±o_de°roy
 (

1085 
krb5_c⁄ãxt
 ,

1086 
krb5_¸y±o
 );

1088 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1089 
krb5_¸y±o_gë_checksum_ty≥
 (

1090 
krb5_c⁄ãxt
 ,

1091 
krb5_¸y±o
 ,

1092 
krb5_cksumty≥
 * );

1094 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1095 
krb5_¸y±o_gëblocksize
 (

1096 
krb5_c⁄ãxt
 ,

1097 
krb5_¸y±o
 ,

1098 
size_t
 * );

1100 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1101 
krb5_¸y±o_gëc⁄foundîsize
 (

1102 
krb5_c⁄ãxt
 ,

1103 
krb5_¸y±o
 ,

1104 
size_t
 * );

1106 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1107 
krb5_¸y±o_gëí˘y≥
 (

1108 
krb5_c⁄ãxt
 ,

1109 
krb5_¸y±o
 ,

1110 
krb5_í˘y≥
 * );

1112 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1113 
krb5_¸y±o_gë∑dsize
 (

1114 
krb5_c⁄ãxt
 ,

1115 
krb5_¸y±o
 ,

1116 
size_t
 * );

1118 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1119 
krb5_¸y±o_öô
 (

1120 
krb5_c⁄ãxt
 ,

1121 c⁄° 
krb5_keyblock
 * ,

1122 
krb5_í˘y≥
 ,

1123 
krb5_¸y±o
 * );

1125 
size_t


1126 
krb5_¸y±o_ovîhód
 (

1127 
krb5_c⁄ãxt
 ,

1128 
krb5_¸y±o
 );

1130 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1131 
krb5_¸y±o_¥f
 (

1132 
krb5_c⁄ãxt
 ,

1133 c⁄° 
krb5_¸y±o
 ,

1134 c⁄° 
krb5_d©a
 * ,

1135 
krb5_d©a
 * );

1137 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1138 
krb5_¸y±o_¥f_Àngth
 (

1139 
krb5_c⁄ãxt
 ,

1140 
krb5_í˘y≥
 ,

1141 
size_t
 * );

1143 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1144 
krb5_d©a_Æloc
 (

1145 
krb5_d©a
 * ,

1148 
KRB5_LIB_FUNCTION


1149 
krb5_d©a_cmp
 (

1150 c⁄° 
krb5_d©a
 * ,

1151 c⁄° 
krb5_d©a
 * );

1153 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1154 
krb5_d©a_c›y
 (

1155 
krb5_d©a
 * ,

1157 
size_t
 );

1159 
KRB5_LIB_FUNCTION


1160 
krb5_d©a_‰ì
 (
krb5_d©a
 * );

1162 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1163 
krb5_d©a_ªÆloc
 (

1164 
krb5_d©a
 * ,

1167 
KRB5_LIB_FUNCTION


1168 
krb5_d©a_zîo
 (
krb5_d©a
 * );

1170 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1171 
krb5_decode_Authítiˇt‹
 (

1172 
krb5_c⁄ãxt
 ,

1174 
size_t
 ,

1175 
Authítiˇt‹
 * ,

1176 
size_t
 * );

1178 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1179 
krb5_decode_ETYPE_INFO
 (

1180 
krb5_c⁄ãxt
 ,

1182 
size_t
 ,

1183 
ETYPE_INFO
 * ,

1184 
size_t
 * );

1186 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1187 
krb5_decode_ETYPE_INFO2
 (

1188 
krb5_c⁄ãxt
 ,

1190 
size_t
 ,

1191 
ETYPE_INFO2
 * ,

1192 
size_t
 * );

1194 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1195 
krb5_decode_EncAPRïP¨t
 (

1196 
krb5_c⁄ãxt
 ,

1198 
size_t
 ,

1199 
EncAPRïP¨t
 * ,

1200 
size_t
 * );

1202 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1203 
krb5_decode_EncASRïP¨t
 (

1204 
krb5_c⁄ãxt
 ,

1206 
size_t
 ,

1207 
EncASRïP¨t
 * ,

1208 
size_t
 * );

1210 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1211 
krb5_decode_EncKrbCªdP¨t
 (

1212 
krb5_c⁄ãxt
 ,

1214 
size_t
 ,

1215 
EncKrbCªdP¨t
 * ,

1216 
size_t
 * );

1218 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1219 
krb5_decode_EncTGSRïP¨t
 (

1220 
krb5_c⁄ãxt
 ,

1222 
size_t
 ,

1223 
EncTGSRïP¨t
 * ,

1224 
size_t
 * );

1226 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1227 
krb5_decode_EncTickëP¨t
 (

1228 
krb5_c⁄ãxt
 ,

1230 
size_t
 ,

1231 
EncTickëP¨t
 * ,

1232 
size_t
 * );

1234 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1235 
krb5_decode_≠_ªq
 (

1236 
krb5_c⁄ãxt
 ,

1237 c⁄° 
krb5_d©a
 * ,

1238 
krb5_≠_ªq
 * );

1240 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1241 
krb5_de¸y±
 (

1242 
krb5_c⁄ãxt
 ,

1243 
krb5_¸y±o
 ,

1246 
size_t
 ,

1247 
krb5_d©a
 * );

1249 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1250 
krb5_de¸y±_En¸y±edD©a
 (

1251 
krb5_c⁄ãxt
 ,

1252 
krb5_¸y±o
 ,

1254 c⁄° 
En¸y±edD©a
 * ,

1255 
krb5_d©a
 * );

1257 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1258 
krb5_de¸y±_ivec
 (

1259 
krb5_c⁄ãxt
 ,

1260 
krb5_¸y±o
 ,

1263 
size_t
 ,

1264 
krb5_d©a
 * ,

1267 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1268 
krb5_de¸y±_tickë
 (

1269 
krb5_c⁄ãxt
 ,

1270 
Tickë
 * ,

1271 
krb5_keyblock
 * ,

1272 
EncTickëP¨t
 * ,

1273 
krb5_Êags
 );

1275 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1276 
krb5_dîive_key
 (

1277 
krb5_c⁄ãxt
 ,

1278 c⁄° 
krb5_keyblock
 * ,

1279 
krb5_í˘y≥
 ,

1281 
size_t
 ,

1282 
krb5_keyblock
 ** );

1284 
krb5_îr‹_code


1285 
krb5_dige°_Æloc
 (

1286 
krb5_c⁄ãxt
 ,

1287 
krb5_dige°
 * );

1290 
krb5_dige°_‰ì
 (
krb5_dige°
 );

1292 
krb5_îr‹_code


1293 
krb5_dige°_gë_˛õ¡_bödög
 (

1294 
krb5_c⁄ãxt
 ,

1295 
krb5_dige°
 ,

1300 
krb5_dige°_gë_idítifõr
 (

1301 
krb5_c⁄ãxt
 ,

1302 
krb5_dige°
 );

1305 
krb5_dige°_gë_›aque
 (

1306 
krb5_c⁄ãxt
 ,

1307 
krb5_dige°
 );

1310 
krb5_dige°_gë_r•
 (

1311 
krb5_c⁄ãxt
 ,

1312 
krb5_dige°
 );

1315 
krb5_dige°_gë_£rvî_n⁄˚
 (

1316 
krb5_c⁄ãxt
 ,

1317 
krb5_dige°
 );

1319 
krb5_îr‹_code


1320 
krb5_dige°_gë_£ssi⁄_key
 (

1321 
krb5_c⁄ãxt
 ,

1322 
krb5_dige°
 ,

1323 
krb5_d©a
 * );

1325 
krb5_îr‹_code


1326 
krb5_dige°_gë_tickës
 (

1327 
krb5_c⁄ãxt
 ,

1328 
krb5_dige°
 ,

1329 
Tickë
 ** );

1331 
krb5_îr‹_code


1332 
krb5_dige°_öô_ªque°
 (

1333 
krb5_c⁄ãxt
 ,

1334 
krb5_dige°
 ,

1335 
krb5_ªÆm
 ,

1336 
krb5_cˇche
 );

1338 
krb5_îr‹_code


1339 
krb5_dige°_¥obe
 (

1340 
krb5_c⁄ãxt
 ,

1341 
krb5_ªÆm
 ,

1342 
krb5_cˇche
 ,

1345 
krb5_boﬁón


1346 
krb5_dige°_ªp_gë_°©us
 (

1347 
krb5_c⁄ãxt
 ,

1348 
krb5_dige°
 );

1350 
krb5_îr‹_code


1351 
krb5_dige°_ªque°
 (

1352 
krb5_c⁄ãxt
 ,

1353 
krb5_dige°
 ,

1354 
krb5_ªÆm
 ,

1355 
krb5_cˇche
 );

1357 
krb5_îr‹_code


1358 
krb5_dige°_£t_authítiˇti⁄_u£r
 (

1359 
krb5_c⁄ãxt
 ,

1360 
krb5_dige°
 ,

1361 
krb5_¥öcùÆ
 );

1363 
krb5_îr‹_code


1364 
krb5_dige°_£t_authid
 (

1365 
krb5_c⁄ãxt
 ,

1366 
krb5_dige°
 ,

1369 
krb5_îr‹_code


1370 
krb5_dige°_£t_˛õ¡_n⁄˚
 (

1371 
krb5_c⁄ãxt
 ,

1372 
krb5_dige°
 ,

1375 
krb5_îr‹_code


1376 
krb5_dige°_£t_dige°
 (

1377 
krb5_c⁄ãxt
 ,

1378 
krb5_dige°
 ,

1381 
krb5_îr‹_code


1382 
krb5_dige°_£t_ho°«me
 (

1383 
krb5_c⁄ãxt
 ,

1384 
krb5_dige°
 ,

1387 
krb5_îr‹_code


1388 
krb5_dige°_£t_idítifõr
 (

1389 
krb5_c⁄ãxt
 ,

1390 
krb5_dige°
 ,

1393 
krb5_îr‹_code


1394 
krb5_dige°_£t_mëhod
 (

1395 
krb5_c⁄ãxt
 ,

1396 
krb5_dige°
 ,

1399 
krb5_îr‹_code


1400 
krb5_dige°_£t_n⁄˚Cou¡
 (

1401 
krb5_c⁄ãxt
 ,

1402 
krb5_dige°
 ,

1405 
krb5_îr‹_code


1406 
krb5_dige°_£t_›aque
 (

1407 
krb5_c⁄ãxt
 ,

1408 
krb5_dige°
 ,

1411 
krb5_îr‹_code


1412 
krb5_dige°_£t_q›
 (

1413 
krb5_c⁄ãxt
 ,

1414 
krb5_dige°
 ,

1417 
krb5_îr‹_code


1418 
krb5_dige°_£t_ªÆm
 (

1419 
krb5_c⁄ãxt
 ,

1420 
krb5_dige°
 ,

1424 
krb5_dige°_£t_ª•⁄£D©a
 (

1425 
krb5_c⁄ãxt
 ,

1426 
krb5_dige°
 ,

1429 
krb5_îr‹_code


1430 
krb5_dige°_£t_£rvî_cb
 (

1431 
krb5_c⁄ãxt
 ,

1432 
krb5_dige°
 ,

1436 
krb5_îr‹_code


1437 
krb5_dige°_£t_£rvî_n⁄˚
 (

1438 
krb5_c⁄ãxt
 ,

1439 
krb5_dige°
 ,

1442 
krb5_îr‹_code


1443 
krb5_dige°_£t_ty≥
 (

1444 
krb5_c⁄ãxt
 ,

1445 
krb5_dige°
 ,

1448 
krb5_îr‹_code


1449 
krb5_dige°_£t_uri
 (

1450 
krb5_c⁄ãxt
 ,

1451 
krb5_dige°
 ,

1454 
krb5_îr‹_code


1455 
krb5_dige°_£t_u£∫ame
 (

1456 
krb5_c⁄ãxt
 ,

1457 
krb5_dige°
 ,

1460 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1461 
krb5_domaö_x500_decode
 (

1462 
krb5_c⁄ãxt
 ,

1463 
krb5_d©a
 ,

1469 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1470 
krb5_domaö_x500_ícode
 (

1473 
krb5_d©a
 * );

1475 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1476 
krb5_ói_to_heim_î∫o
 (

1480 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1481 
krb5_ícode_Authítiˇt‹
 (

1482 
krb5_c⁄ãxt
 ,

1484 
size_t
 ,

1485 
Authítiˇt‹
 * ,

1486 
size_t
 * );

1488 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1489 
krb5_ícode_ETYPE_INFO
 (

1490 
krb5_c⁄ãxt
 ,

1492 
size_t
 ,

1493 
ETYPE_INFO
 * ,

1494 
size_t
 * );

1496 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1497 
krb5_ícode_ETYPE_INFO2
 (

1498 
krb5_c⁄ãxt
 ,

1500 
size_t
 ,

1501 
ETYPE_INFO2
 * ,

1502 
size_t
 * );

1504 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1505 
krb5_ícode_EncAPRïP¨t
 (

1506 
krb5_c⁄ãxt
 ,

1508 
size_t
 ,

1509 
EncAPRïP¨t
 * ,

1510 
size_t
 * );

1512 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1513 
krb5_ícode_EncASRïP¨t
 (

1514 
krb5_c⁄ãxt
 ,

1516 
size_t
 ,

1517 
EncASRïP¨t
 * ,

1518 
size_t
 * );

1520 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1521 
krb5_ícode_EncKrbCªdP¨t
 (

1522 
krb5_c⁄ãxt
 ,

1524 
size_t
 ,

1525 
EncKrbCªdP¨t
 * ,

1526 
size_t
 * );

1528 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1529 
krb5_ícode_EncTGSRïP¨t
 (

1530 
krb5_c⁄ãxt
 ,

1532 
size_t
 ,

1533 
EncTGSRïP¨t
 * ,

1534 
size_t
 * );

1536 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1537 
krb5_ícode_EncTickëP¨t
 (

1538 
krb5_c⁄ãxt
 ,

1540 
size_t
 ,

1541 
EncTickëP¨t
 * ,

1542 
size_t
 * );

1544 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1545 
krb5_í¸y±
 (

1546 
krb5_c⁄ãxt
 ,

1547 
krb5_¸y±o
 ,

1550 
size_t
 ,

1551 
krb5_d©a
 * );

1553 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1554 
krb5_í¸y±_En¸y±edD©a
 (

1555 
krb5_c⁄ãxt
 ,

1556 
krb5_¸y±o
 ,

1559 
size_t
 ,

1561 
En¸y±edD©a
 * );

1563 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1564 
krb5_í¸y±_ivec
 (

1565 
krb5_c⁄ãxt
 ,

1566 
krb5_¸y±o
 ,

1569 
size_t
 ,

1570 
krb5_d©a
 * ,

1573 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1574 
krb5_í˘y≥_dißbÀ
 (

1575 
krb5_c⁄ãxt
 ,

1576 
krb5_í˘y≥
 );

1578 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1579 
krb5_í˘y≥_keybôs
 (

1580 
krb5_c⁄ãxt
 ,

1581 
krb5_í˘y≥
 ,

1582 
size_t
 * );

1584 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1585 
krb5_í˘y≥_keysize
 (

1586 
krb5_c⁄ãxt
 ,

1587 
krb5_í˘y≥
 ,

1588 
size_t
 * );

1590 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1591 
krb5_í˘y≥_to_keyty≥
 (

1592 
krb5_c⁄ãxt
 ,

1593 
krb5_í˘y≥
 ,

1594 
krb5_keyty≥
 * );

1596 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1597 
krb5_í˘y≥_to_°rög
 (

1598 
krb5_c⁄ãxt
 ,

1599 
krb5_í˘y≥
 ,

1602 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1603 
krb5_í˘y≥_vÆid
 (

1604 
krb5_c⁄ãxt
 ,

1605 
krb5_í˘y≥
 );

1607 
krb5_boﬁón
 
KRB5_LIB_FUNCTION


1608 
krb5_í˘y≥s_com∑tibÀ_keys
 (

1609 
krb5_c⁄ãxt
 ,

1610 
krb5_í˘y≥
 ,

1611 
krb5_í˘y≥
 );

1613 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1614 
krb5_îr
 (

1615 
krb5_c⁄ãxt
 ,

1617 
krb5_îr‹_code
 ,

1620 
__©åibuã__
 ((
n‹ëu∫
, 
f‹m©
 (
¥ötf
, 4, 5)));

1622 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1623 
__©åibuã__
((
dïªˇãd
)Ë
krb5_‰ì_¸eds_c⁄ã¡s
 (
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
c
);

1625 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1626 
krb5_îr‹_‰om_rd_îr‹
 (

1627 
krb5_c⁄ãxt
 ,

1628 c⁄° 
krb5_îr‹
 * ,

1629 c⁄° 
krb5_¸eds
 * );

1631 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1632 
krb5_îrx
 (

1633 
krb5_c⁄ãxt
 ,

1637 
__©åibuã__
 ((
n‹ëu∫
, 
f‹m©
 (
¥ötf
, 3, 4)));

1639 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1640 
krb5_ex∑nd_ho°«me
 (

1641 
krb5_c⁄ãxt
 ,

1645 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1646 
krb5_ex∑nd_ho°«me_ªÆms
 (

1647 
krb5_c⁄ãxt
 ,

1652 
PA_DATA
 *

1653 
krb5_föd_∑d©a
 (

1654 
PA_DATA
 * ,

1659 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1660 
krb5_f‹m©_time
 (

1661 
krb5_c⁄ãxt
 ,

1662 
time_t
 ,

1664 
size_t
 ,

1665 
krb5_boﬁón
 );

1667 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1668 
krb5_‰ì_addªss
 (

1669 
krb5_c⁄ãxt
 ,

1670 
krb5_addªss
 * );

1672 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1673 
krb5_‰ì_addªs£s
 (

1674 
krb5_c⁄ãxt
 ,

1675 
krb5_addªs£s
 * );

1677 
KRB5_LIB_FUNCTION


1678 
krb5_‰ì_≠_ªp_íc_∑π
 (

1679 
krb5_c⁄ãxt
 ,

1680 
krb5_≠_ªp_íc_∑π
 * );

1682 
KRB5_LIB_FUNCTION


1683 
krb5_‰ì_authítiˇt‹
 (

1684 
krb5_c⁄ãxt
 ,

1685 
krb5_authítiˇt‹
 * );

1687 
KRB5_LIB_FUNCTION


1688 
krb5_‰ì_checksum
 (

1689 
krb5_c⁄ãxt
 ,

1690 
krb5_checksum
 * );

1692 
KRB5_LIB_FUNCTION


1693 
krb5_‰ì_checksum_c⁄ã¡s
 (

1694 
krb5_c⁄ãxt
 ,

1695 
krb5_checksum
 * );

1697 
KRB5_LIB_FUNCTION


1698 
krb5_‰ì_c⁄fig_fûes
 (** );

1700 
KRB5_LIB_FUNCTION


1701 
krb5_‰ì_c⁄ãxt
 (
krb5_c⁄ãxt
 );

1703 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1704 
krb5_‰ì_¸ed_c⁄ã¡s
 (

1705 
krb5_c⁄ãxt
 ,

1706 
krb5_¸eds
 * );

1708 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1709 
krb5_‰ì_¸eds
 (

1710 
krb5_c⁄ãxt
 ,

1711 
krb5_¸eds
 * );

1713 
KRB5_LIB_FUNCTION


1714 
krb5_‰ì_d©a
 (

1715 
krb5_c⁄ãxt
 ,

1716 
krb5_d©a
 * );

1718 
KRB5_LIB_FUNCTION


1719 
krb5_‰ì_d©a_c⁄ã¡s
 (

1720 
krb5_c⁄ãxt
 ,

1721 
krb5_d©a
 * );

1723 
KRB5_LIB_FUNCTION


1724 
krb5_‰ì_îr‹
 (

1725 
krb5_c⁄ãxt
 ,

1726 
krb5_îr‹
 * );

1728 
KRB5_LIB_FUNCTION


1729 
krb5_‰ì_îr‹_c⁄ã¡s
 (

1730 
krb5_c⁄ãxt
 ,

1731 
krb5_îr‹
 * );

1733 
KRB5_LIB_FUNCTION


1734 
krb5_‰ì_îr‹_°rög
 (

1735 
krb5_c⁄ãxt
 ,

1738 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1739 
krb5_‰ì_ho°_ªÆm
 (

1740 
krb5_c⁄ãxt
 ,

1741 
krb5_ªÆm
 * );

1743 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1744 
krb5_‰ì_kdc_ªp
 (

1745 
krb5_c⁄ãxt
 ,

1746 
krb5_kdc_ªp
 * );

1748 
KRB5_LIB_FUNCTION


1749 
krb5_‰ì_keyblock
 (

1750 
krb5_c⁄ãxt
 ,

1751 
krb5_keyblock
 * );

1753 
KRB5_LIB_FUNCTION


1754 
krb5_‰ì_keyblock_c⁄ã¡s
 (

1755 
krb5_c⁄ãxt
 ,

1756 
krb5_keyblock
 * );

1758 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1759 
krb5_‰ì_krbh°
 (

1760 
krb5_c⁄ãxt
 ,

1763 
KRB5_LIB_FUNCTION


1764 
krb5_‰ì_¥öcùÆ
 (

1765 
krb5_c⁄ãxt
 ,

1766 
krb5_¥öcùÆ
 );

1768 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1769 
krb5_‰ì_ß…
 (

1770 
krb5_c⁄ãxt
 ,

1771 
krb5_ß…
 );

1773 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1774 
krb5_‰ì_tickë
 (

1775 
krb5_c⁄ãxt
 ,

1776 
krb5_tickë
 * );

1778 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1779 
krb5_fwd_tgt_¸eds
 (

1780 
krb5_c⁄ãxt
 ,

1781 
krb5_auth_c⁄ãxt
 ,

1783 
krb5_¥öcùÆ
 ,

1784 
krb5_¥öcùÆ
 ,

1785 
krb5_cˇche
 ,

1787 
krb5_d©a
 * );

1789 
KRB5_LIB_FUNCTION


1790 
krb5_gíî©e_øndom_block
 (

1792 
size_t
 );

1794 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1795 
krb5_gíî©e_øndom_keyblock
 (

1796 
krb5_c⁄ãxt
 ,

1797 
krb5_í˘y≥
 ,

1798 
krb5_keyblock
 * );

1800 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1801 
krb5_gíî©e_£q_numbî
 (

1802 
krb5_c⁄ãxt
 ,

1803 c⁄° 
krb5_keyblock
 * ,

1804 
uöt32_t
 * );

1806 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1807 
krb5_gíî©e_subkey
 (

1808 
krb5_c⁄ãxt
 ,

1809 c⁄° 
krb5_keyblock
 * ,

1810 
krb5_keyblock
 ** );

1812 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1813 
krb5_gíî©e_subkey_exãnded
 (

1814 
krb5_c⁄ãxt
 ,

1815 c⁄° 
krb5_keyblock
 * ,

1816 
krb5_í˘y≥
 ,

1817 
krb5_keyblock
 ** );

1819 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1820 
krb5_gë_Æl_˛õ¡_addrs
 (

1821 
krb5_c⁄ãxt
 ,

1822 
krb5_addªs£s
 * );

1824 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1825 
krb5_gë_Æl_£rvî_addrs
 (

1826 
krb5_c⁄ãxt
 ,

1827 
krb5_addªs£s
 * );

1829 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1830 
krb5_gë_¸ed_‰om_kdc
 (

1831 
krb5_c⁄ãxt
 ,

1832 
krb5_cˇche
 ,

1833 
krb5_¸eds
 * ,

1834 
krb5_¸eds
 ** ,

1835 
krb5_¸eds
 *** );

1837 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1838 
krb5_gë_¸ed_‰om_kdc_›t
 (

1839 
krb5_c⁄ãxt
 ,

1840 
krb5_cˇche
 ,

1841 
krb5_¸eds
 * ,

1842 
krb5_¸eds
 ** ,

1843 
krb5_¸eds
 *** ,

1844 
krb5_Êags
 );

1846 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1847 
krb5_gë_¸edítüls
 (

1848 
krb5_c⁄ãxt
 ,

1849 
krb5_Êags
 ,

1850 
krb5_cˇche
 ,

1851 
krb5_¸eds
 * ,

1852 
krb5_¸eds
 ** );

1854 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1855 
krb5_gë_¸edítüls_wôh_Êags
 (

1856 
krb5_c⁄ãxt
 ,

1857 
krb5_Êags
 ,

1858 
krb5_kdc_Êags
 ,

1859 
krb5_cˇche
 ,

1860 
krb5_¸eds
 * ,

1861 
krb5_¸eds
 ** );

1863 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1864 
krb5_gë_¸eds
 (

1865 
krb5_c⁄ãxt
 ,

1866 
krb5_gë_¸eds_›t
 ,

1867 
krb5_cˇche
 ,

1868 
krb5_c⁄°_¥öcùÆ
 ,

1869 
krb5_¸eds
 ** );

1871 
KRB5_LIB_FUNCTION


1872 
krb5_gë_¸eds_›t_add_›ti⁄s
 (

1873 
krb5_c⁄ãxt
 ,

1874 
krb5_gë_¸eds_›t
 ,

1875 
krb5_Êags
 );

1877 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1878 
krb5_gë_¸eds_›t_Æloc
 (

1879 
krb5_c⁄ãxt
 ,

1880 
krb5_gë_¸eds_›t
 * );

1882 
KRB5_LIB_FUNCTION


1883 
krb5_gë_¸eds_›t_‰ì
 (

1884 
krb5_c⁄ãxt
 ,

1885 
krb5_gë_¸eds_›t
 );

1887 
KRB5_LIB_FUNCTION


1888 
krb5_gë_¸eds_›t_£t_í˘y≥
 (

1889 
krb5_c⁄ãxt
 ,

1890 
krb5_gë_¸eds_›t
 ,

1891 
krb5_í˘y≥
 );

1893 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1894 
krb5_gë_¸eds_›t_£t_im≥rs⁄©e
 (

1895 
krb5_c⁄ãxt
 ,

1896 
krb5_gë_¸eds_›t
 ,

1897 
krb5_c⁄°_¥öcùÆ
 );

1899 
KRB5_LIB_FUNCTION


1900 
krb5_gë_¸eds_›t_£t_›ti⁄s
 (

1901 
krb5_c⁄ãxt
 ,

1902 
krb5_gë_¸eds_›t
 ,

1903 
krb5_Êags
 );

1905 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1906 
krb5_gë_¸eds_›t_£t_tickë
 (

1907 
krb5_c⁄ãxt
 ,

1908 
krb5_gë_¸eds_›t
 ,

1909 c⁄° 
Tickë
 * );

1911 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1912 
krb5_gë_deÁu…_c⁄fig_fûes
 (*** );

1914 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1915 
krb5_gë_deÁu…_ö_tkt_ëy≥s
 (

1916 
krb5_c⁄ãxt
 ,

1917 
krb5_í˘y≥
 ** );

1919 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1920 
krb5_gë_deÁu…_¥öcùÆ
 (

1921 
krb5_c⁄ãxt
 ,

1922 
krb5_¥öcùÆ
 * );

1924 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1925 
krb5_gë_deÁu…_ªÆm
 (

1926 
krb5_c⁄ãxt
 ,

1927 
krb5_ªÆm
 * );

1929 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1930 
krb5_gë_deÁu…_ªÆms
 (

1931 
krb5_c⁄ãxt
 ,

1932 
krb5_ªÆm
 ** );

1934 
krb5_boﬁón
 
KRB5_LIB_FUNCTION


1935 
krb5_gë_dns_ˇn⁄iˇlize_ho°«me
 (
krb5_c⁄ãxt
 );

1937 c⁄° * 
KRB5_LIB_FUNCTION


1938 
krb5_gë_îr_ãxt
 (

1939 
krb5_c⁄ãxt
 ,

1940 
krb5_îr‹_code
 );

1942 * 
KRB5_LIB_FUNCTION


1943 
krb5_gë_îr‹_mesßge
 (

1944 
krb5_c⁄ãxt
 ,

1945 
krb5_îr‹_code
 );

1947 * 
KRB5_LIB_FUNCTION


1948 
krb5_gë_îr‹_°rög
 (
krb5_c⁄ãxt
 );

1950 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1951 
krb5_gë_exåa_addªs£s
 (

1952 
krb5_c⁄ãxt
 ,

1953 
krb5_addªs£s
 * );

1955 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1956 
krb5_gë_fˇche_vîsi⁄
 (

1957 
krb5_c⁄ãxt
 ,

1960 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1961 
krb5_gë_f‹w¨ded_¸eds
 (

1962 
krb5_c⁄ãxt
 ,

1963 
krb5_auth_c⁄ãxt
 ,

1964 
krb5_cˇche
 ,

1965 
krb5_Êags
 ,

1967 
krb5_¸eds
 * ,

1968 
krb5_d©a
 * );

1970 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1971 
krb5_gë_ho°_ªÆm
 (

1972 
krb5_c⁄ãxt
 ,

1974 
krb5_ªÆm
 ** );

1976 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1977 
krb5_gë_ign‹e_addªs£s
 (

1978 
krb5_c⁄ãxt
 ,

1979 
krb5_addªs£s
 * );

1981 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1982 
krb5_gë_ö_¸ed
 (

1983 
krb5_c⁄ãxt
 ,

1984 
krb5_Êags
 ,

1985 c⁄° 
krb5_addªs£s
 * ,

1986 c⁄° 
krb5_í˘y≥
 * ,

1987 c⁄° 
krb5_¥óuthty≥
 * ,

1988 c⁄° 
krb5_¥óuthd©a
 * ,

1989 
krb5_key_¥oc
 ,

1990 
krb5_c⁄°_poöãr
 ,

1991 
krb5_de¸y±_¥oc
 ,

1992 
krb5_c⁄°_poöãr
 ,

1993 
krb5_¸eds
 * ,

1994 
krb5_kdc_ªp
 * );

1996 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


1997 
krb5_gë_ö_tkt
 (

1998 
krb5_c⁄ãxt
 ,

1999 
krb5_Êags
 ,

2000 c⁄° 
krb5_addªs£s
 * ,

2001 c⁄° 
krb5_í˘y≥
 * ,

2002 c⁄° 
krb5_¥óuthty≥
 * ,

2003 
krb5_key_¥oc
 ,

2004 
krb5_c⁄°_poöãr
 ,

2005 
krb5_de¸y±_¥oc
 ,

2006 
krb5_c⁄°_poöãr
 ,

2007 
krb5_¸eds
 * ,

2008 
krb5_cˇche
 ,

2009 
krb5_kdc_ªp
 * );

2011 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2012 
krb5_gë_ö_tkt_wôh_keyèb
 (

2013 
krb5_c⁄ãxt
 ,

2014 
krb5_Êags
 ,

2015 
krb5_addªs£s
 * ,

2016 c⁄° 
krb5_í˘y≥
 * ,

2017 c⁄° 
krb5_¥óuthty≥
 * ,

2018 
krb5_keyèb
 ,

2019 
krb5_cˇche
 ,

2020 
krb5_¸eds
 * ,

2021 
krb5_kdc_ªp
 * );

2023 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2024 
krb5_gë_ö_tkt_wôh_∑ssw‹d
 (

2025 
krb5_c⁄ãxt
 ,

2026 
krb5_Êags
 ,

2027 
krb5_addªs£s
 * ,

2028 c⁄° 
krb5_í˘y≥
 * ,

2029 c⁄° 
krb5_¥óuthty≥
 * ,

2031 
krb5_cˇche
 ,

2032 
krb5_¸eds
 * ,

2033 
krb5_kdc_ªp
 * );

2035 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2036 
krb5_gë_ö_tkt_wôh_skey
 (

2037 
krb5_c⁄ãxt
 ,

2038 
krb5_Êags
 ,

2039 
krb5_addªs£s
 * ,

2040 c⁄° 
krb5_í˘y≥
 * ,

2041 c⁄° 
krb5_¥óuthty≥
 * ,

2042 c⁄° 
krb5_keyblock
 * ,

2043 
krb5_cˇche
 ,

2044 
krb5_¸eds
 * ,

2045 
krb5_kdc_ªp
 * );

2047 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2048 
krb5_gë_öô_¸eds
 (

2049 
krb5_c⁄ãxt
 ,

2050 
krb5_¸eds
 * ,

2051 
krb5_¥öcùÆ
 ,

2052 
krb5_¥om±î_f˘
 ,

2054 
krb5_dñèt
 ,

2056 
krb5_gë_öô_¸eds_›t
 * );

2058 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2059 
krb5_gë_öô_¸eds_keyblock
 (

2060 
krb5_c⁄ãxt
 ,

2061 
krb5_¸eds
 * ,

2062 
krb5_¥öcùÆ
 ,

2063 
krb5_keyblock
 * ,

2064 
krb5_dñèt
 ,

2066 
krb5_gë_öô_¸eds_›t
 * );

2068 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2069 
krb5_gë_öô_¸eds_keyèb
 (

2070 
krb5_c⁄ãxt
 ,

2071 
krb5_¸eds
 * ,

2072 
krb5_¥öcùÆ
 ,

2073 
krb5_keyèb
 ,

2074 
krb5_dñèt
 ,

2076 
krb5_gë_öô_¸eds_›t
 * );

2078 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2079 
krb5_gë_öô_¸eds_›t_Æloc
 (

2080 
krb5_c⁄ãxt
 ,

2081 
krb5_gë_öô_¸eds_›t
 ** );

2083 
KRB5_LIB_FUNCTION


2084 
krb5_gë_öô_¸eds_›t_‰ì
 (

2085 
krb5_c⁄ãxt
 ,

2086 
krb5_gë_öô_¸eds_›t
 * );

2088 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2089 
krb5_gë_öô_¸eds_›t_gë_îr‹
 (

2090 
krb5_c⁄ãxt
 ,

2091 
krb5_gë_öô_¸eds_›t
 * ,

2092 
KRB_ERROR
 ** );

2094 
KRB5_LIB_FUNCTION


2095 
krb5_gë_öô_¸eds_›t_öô
 (
krb5_gë_öô_¸eds_›t
 * );

2097 
KRB5_LIB_FUNCTION


2098 
krb5_gë_öô_¸eds_›t_£t_addªss_li°
 (

2099 
krb5_gë_öô_¸eds_›t
 * ,

2100 
krb5_addªs£s
 * );

2102 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2103 
krb5_gë_öô_¸eds_›t_£t_addªs¶ess
 (

2104 
krb5_c⁄ãxt
 ,

2105 
krb5_gë_öô_¸eds_›t
 * ,

2106 
krb5_boﬁón
 );

2108 
KRB5_LIB_FUNCTION


2109 
krb5_gë_öô_¸eds_›t_£t_™⁄ymous
 (

2110 
krb5_gë_öô_¸eds_›t
 * ,

2113 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2114 
krb5_gë_öô_¸eds_›t_£t_ˇn⁄iˇlize
 (

2115 
krb5_c⁄ãxt
 ,

2116 
krb5_gë_öô_¸eds_›t
 * ,

2117 
krb5_boﬁón
 );

2119 
KRB5_LIB_FUNCTION


2120 
krb5_gë_öô_¸eds_›t_£t_deÁu…_Êags
 (

2121 
krb5_c⁄ãxt
 ,

2123 
krb5_c⁄°_ªÆm
 ,

2124 
krb5_gë_öô_¸eds_›t
 * );

2126 
KRB5_LIB_FUNCTION


2127 
krb5_gë_öô_¸eds_›t_£t_ëy≥_li°
 (

2128 
krb5_gë_öô_¸eds_›t
 * ,

2129 
krb5_í˘y≥
 * ,

2132 
KRB5_LIB_FUNCTION


2133 
krb5_gë_öô_¸eds_›t_£t_f‹w¨dabÀ
 (

2134 
krb5_gë_öô_¸eds_›t
 * ,

2137 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2138 
krb5_gë_öô_¸eds_›t_£t_∑_∑ssw‹d
 (

2139 
krb5_c⁄ãxt
 ,

2140 
krb5_gë_öô_¸eds_›t
 * ,

2142 
krb5_s2k_¥oc
 );

2144 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2145 
krb5_gë_öô_¸eds_›t_£t_∑c_ªque°
 (

2146 
krb5_c⁄ãxt
 ,

2147 
krb5_gë_öô_¸eds_›t
 * ,

2148 
krb5_boﬁón
 );

2150 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2151 
krb5_gë_öô_¸eds_›t_£t_pköô
 (

2152 
krb5_c⁄ãxt
 ,

2153 
krb5_gë_öô_¸eds_›t
 * ,

2154 
krb5_¥öcùÆ
 ,

2160 
krb5_¥om±î_f˘
 ,

2164 
KRB5_LIB_FUNCTION


2165 
krb5_gë_öô_¸eds_›t_£t_¥óuth_li°
 (

2166 
krb5_gë_öô_¸eds_›t
 * ,

2167 
krb5_¥óuthty≥
 * ,

2170 
KRB5_LIB_FUNCTION


2171 
krb5_gë_öô_¸eds_›t_£t_¥oxübÀ
 (

2172 
krb5_gë_öô_¸eds_›t
 * ,

2175 
KRB5_LIB_FUNCTION


2176 
krb5_gë_öô_¸eds_›t_£t_ª√w_li„
 (

2177 
krb5_gë_öô_¸eds_›t
 * ,

2178 
krb5_dñèt
 );

2180 
KRB5_LIB_FUNCTION


2181 
krb5_gë_öô_¸eds_›t_£t_ß…
 (

2182 
krb5_gë_öô_¸eds_›t
 * ,

2183 
krb5_d©a
 * );

2185 
KRB5_LIB_FUNCTION


2186 
krb5_gë_öô_¸eds_›t_£t_tkt_li„
 (

2187 
krb5_gë_öô_¸eds_›t
 * ,

2188 
krb5_dñèt
 );

2190 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2191 
krb5_gë_öô_¸eds_›t_£t_wö2k
 (

2192 
krb5_c⁄ãxt
 ,

2193 
krb5_gë_öô_¸eds_›t
 * ,

2194 
krb5_boﬁón
 );

2196 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2197 
krb5_gë_öô_¸eds_∑ssw‹d
 (

2198 
krb5_c⁄ãxt
 ,

2199 
krb5_¸eds
 * ,

2200 
krb5_¥öcùÆ
 ,

2202 
krb5_¥om±î_f˘
 ,

2204 
krb5_dñèt
 ,

2206 
krb5_gë_öô_¸eds_›t
 * );

2208 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2209 
krb5_gë_kdc_¸ed
 (

2210 
krb5_c⁄ãxt
 ,

2211 
krb5_cˇche
 ,

2212 
krb5_kdc_Êags
 ,

2213 
krb5_addªs£s
 * ,

2214 
Tickë
 * ,

2215 
krb5_¸eds
 * ,

2216 
krb5_¸eds
 **
out_¸eds
 );

2218 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2219 
krb5_gë_kdc_£c_off£t
 (

2220 
krb5_c⁄ãxt
 ,

2221 
öt32_t
 * ,

2222 
öt32_t
 * );

2224 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2225 
krb5_gë_krb524h°
 (

2226 
krb5_c⁄ãxt
 ,

2227 c⁄° 
krb5_ªÆm
 * ,

2230 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2231 
krb5_gë_krb_admö_h°
 (

2232 
krb5_c⁄ãxt
 ,

2233 c⁄° 
krb5_ªÆm
 * ,

2236 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2237 
krb5_gë_krb_ch™gïw_h°
 (

2238 
krb5_c⁄ãxt
 ,

2239 c⁄° 
krb5_ªÆm
 * ,

2242 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2243 
krb5_gë_krbh°
 (

2244 
krb5_c⁄ãxt
 ,

2245 c⁄° 
krb5_ªÆm
 * ,

2248 
time_t
 
KRB5_LIB_FUNCTION


2249 
krb5_gë_max_time_skew
 (
krb5_c⁄ãxt
 );

2251 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2252 
krb5_gë_pw_ß…
 (

2253 
krb5_c⁄ãxt
 ,

2254 
krb5_c⁄°_¥öcùÆ
 ,

2255 
krb5_ß…
 * );

2257 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2258 
krb5_gë_ª√wed_¸eds
 (

2259 
krb5_c⁄ãxt
 ,

2260 
krb5_¸eds
 * ,

2261 
krb5_c⁄°_¥öcùÆ
 ,

2262 
krb5_cˇche
 ,

2265 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2266 
krb5_gë_£rvî_rˇche
 (

2267 
krb5_c⁄ãxt
 ,

2268 c⁄° 
krb5_d©a
 * ,

2269 
krb5_rˇche
 * );

2271 
krb5_boﬁón
 
KRB5_LIB_FUNCTION


2272 
krb5_gë_u£_admö_kdc
 (
krb5_c⁄ãxt
 );

2274 
krb5_log_Ácûôy
 * 
KRB5_LIB_FUNCTION


2275 
krb5_gë_w¨n_de°
 (
krb5_c⁄ãxt
 );

2277 
size_t


2278 
krb5_gë_wøµed_Àngth
 (

2279 
krb5_c⁄ãxt
 ,

2280 
krb5_¸y±o
 ,

2281 
size_t
 );

2283 
KRB5_LIB_FUNCTION


2284 
krb5_gëp‹tby«me
 (

2285 
krb5_c⁄ãxt
 ,

2290 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2291 
krb5_h_addr2addr
 (

2292 
krb5_c⁄ãxt
 ,

2295 
krb5_addªss
 * );

2297 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2298 
krb5_h_addr2sockaddr
 (

2299 
krb5_c⁄ãxt
 ,

2302 
sockaddr
 * ,

2303 
krb5_sockÀn_t
 * ,

2306 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2307 
krb5_h_î∫o_to_heim_î∫o
 ();

2309 
krb5_boﬁón
 
KRB5_LIB_FUNCTION


2310 
krb5_have_îr‹_°rög
 (
krb5_c⁄ãxt
 );

2312 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2313 
krb5_hmac
 (

2314 
krb5_c⁄ãxt
 ,

2315 
krb5_cksumty≥
 ,

2317 
size_t
 ,

2319 
krb5_keyblock
 * ,

2320 
Checksum
 * );

2322 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2323 
krb5_öô_c⁄ãxt
 (
krb5_c⁄ãxt
 * );

2325 
KRB5_LIB_FUNCTION


2326 
krb5_öô_ës
 (
krb5_c⁄ãxt
 );

2328 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2329 
krb5_öô_ëy≥
 (

2330 
krb5_c⁄ãxt
 ,

2332 
krb5_í˘y≥
 ** ,

2333 c⁄° 
krb5_í˘y≥
 * );

2335 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2336 
krb5_öôlog
 (

2337 
krb5_c⁄ãxt
 ,

2339 
krb5_log_Ácûôy
 ** );

2341 
krb5_boﬁón
 
KRB5_LIB_FUNCTION


2342 
krb5_is_thªad_ß„
 ();

2344 c⁄° 
krb5_í˘y≥
 * 
KRB5_LIB_FUNCTION


2345 
krb5_kîbîos_í˘y≥s
 (
krb5_c⁄ãxt
 );

2347 
krb5_í˘y≥


2348 
krb5_keyblock_gë_í˘y≥
 (c⁄° 
krb5_keyblock
 * );

2350 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2351 
krb5_keyblock_öô
 (

2352 
krb5_c⁄ãxt
 ,

2353 
krb5_í˘y≥
 ,

2355 
size_t
 ,

2356 
krb5_keyblock
 * );

2358 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2359 
krb5_keyblock_key_¥oc
 (

2360 
krb5_c⁄ãxt
 ,

2361 
krb5_keyty≥
 ,

2362 
krb5_d©a
 * ,

2363 
krb5_c⁄°_poöãr
 ,

2364 
krb5_keyblock
 ** );

2366 
KRB5_LIB_FUNCTION


2367 
krb5_keyblock_zîo
 (
krb5_keyblock
 * );

2369 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2370 
krb5_keyèb_key_¥oc
 (

2371 
krb5_c⁄ãxt
 ,

2372 
krb5_í˘y≥
 ,

2373 
krb5_ß…
 ,

2374 
krb5_c⁄°_poöãr
 ,

2375 
krb5_keyblock
 ** );

2377 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2378 
krb5_keyty≥_to_í˘y≥s
 (

2379 
krb5_c⁄ãxt
 ,

2380 
krb5_keyty≥
 ,

2382 
krb5_í˘y≥
 ** );

2384 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2385 
krb5_keyty≥_to_í˘y≥s_deÁu…
 (

2386 
krb5_c⁄ãxt
 ,

2387 
krb5_keyty≥
 ,

2389 
krb5_í˘y≥
 ** );

2391 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2392 
krb5_keyty≥_to_°rög
 (

2393 
krb5_c⁄ãxt
 ,

2394 
krb5_keyty≥
 ,

2397 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2398 
krb5_krbh°_f‹m©_°rög
 (

2399 
krb5_c⁄ãxt
 ,

2400 c⁄° 
krb5_krbh°_öfo
 * ,

2402 
size_t
 );

2404 
KRB5_LIB_FUNCTION


2405 
krb5_krbh°_‰ì
 (

2406 
krb5_c⁄ãxt
 ,

2407 
krb5_krbh°_h™dÀ
 );

2409 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2410 
krb5_krbh°_gë_addröfo
 (

2411 
krb5_c⁄ãxt
 ,

2412 
krb5_krbh°_öfo
 * ,

2413 
addröfo
 ** );

2415 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2416 
krb5_krbh°_öô
 (

2417 
krb5_c⁄ãxt
 ,

2420 
krb5_krbh°_h™dÀ
 * );

2422 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2423 
krb5_krbh°_öô_Êags
 (

2424 
krb5_c⁄ãxt
 ,

2428 
krb5_krbh°_h™dÀ
 * );

2430 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2431 
krb5_krbh°_√xt
 (

2432 
krb5_c⁄ãxt
 ,

2433 
krb5_krbh°_h™dÀ
 ,

2434 
krb5_krbh°_öfo
 ** );

2436 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2437 
krb5_krbh°_√xt_as_°rög
 (

2438 
krb5_c⁄ãxt
 ,

2439 
krb5_krbh°_h™dÀ
 ,

2441 
size_t
 );

2443 
KRB5_LIB_FUNCTION


2444 
krb5_krbh°_ª£t
 (

2445 
krb5_c⁄ãxt
 ,

2446 
krb5_krbh°_h™dÀ
 );

2448 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2449 
krb5_kt_add_íåy
 (

2450 
krb5_c⁄ãxt
 ,

2451 
krb5_keyèb
 ,

2452 
krb5_keyèb_íåy
 * );

2454 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2455 
krb5_kt_˛o£
 (

2456 
krb5_c⁄ãxt
 ,

2457 
krb5_keyèb
 );

2459 
krb5_boﬁón
 
KRB5_LIB_FUNCTION


2460 
krb5_kt_com∑ª
 (

2461 
krb5_c⁄ãxt
 ,

2462 
krb5_keyèb_íåy
 * ,

2463 
krb5_c⁄°_¥öcùÆ
 ,

2464 
krb5_kvno
 ,

2465 
krb5_í˘y≥
 );

2467 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2468 
krb5_kt_c›y_íåy_c⁄ã¡s
 (

2469 
krb5_c⁄ãxt
 ,

2470 c⁄° 
krb5_keyèb_íåy
 * ,

2471 
krb5_keyèb_íåy
 * );

2473 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2474 
krb5_kt_deÁu…
 (

2475 
krb5_c⁄ãxt
 ,

2476 
krb5_keyèb
 * );

2478 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2479 
krb5_kt_deÁu…_modify_«me
 (

2480 
krb5_c⁄ãxt
 ,

2482 
size_t
 );

2484 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2485 
krb5_kt_deÁu…_«me
 (

2486 
krb5_c⁄ãxt
 ,

2488 
size_t
 );

2490 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2491 
krb5_kt_íd_£q_gë
 (

2492 
krb5_c⁄ãxt
 ,

2493 
krb5_keyèb
 ,

2494 
krb5_kt_curs‹
 * );

2496 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2497 
krb5_kt_‰ì_íåy
 (

2498 
krb5_c⁄ãxt
 ,

2499 
krb5_keyèb_íåy
 * );

2501 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2502 
krb5_kt_gë_íåy
 (

2503 
krb5_c⁄ãxt
 ,

2504 
krb5_keyèb
 ,

2505 
krb5_c⁄°_¥öcùÆ
 ,

2506 
krb5_kvno
 ,

2507 
krb5_í˘y≥
 ,

2508 
krb5_keyèb_íåy
 * );

2510 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2511 
krb5_kt_gë_fuŒ_«me
 (

2512 
krb5_c⁄ãxt
 ,

2513 
krb5_keyèb
 ,

2516 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2517 
krb5_kt_gë_«me
 (

2518 
krb5_c⁄ãxt
 ,

2519 
krb5_keyèb
 ,

2521 
size_t
 );

2523 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2524 
krb5_kt_gë_ty≥
 (

2525 
krb5_c⁄ãxt
 ,

2526 
krb5_keyèb
 ,

2528 
size_t
 );

2530 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2531 
krb5_kt_√xt_íåy
 (

2532 
krb5_c⁄ãxt
 ,

2533 
krb5_keyèb
 ,

2534 
krb5_keyèb_íåy
 * ,

2535 
krb5_kt_curs‹
 * );

2537 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2538 
krb5_kt_ªad_£rvi˚_key
 (

2539 
krb5_c⁄ãxt
 ,

2540 
krb5_poöãr
 ,

2541 
krb5_¥öcùÆ
 ,

2542 
krb5_kvno
 ,

2543 
krb5_í˘y≥
 ,

2544 
krb5_keyblock
 ** );

2546 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2547 
krb5_kt_ªgi°î
 (

2548 
krb5_c⁄ãxt
 ,

2549 c⁄° 
krb5_kt_›s
 * );

2551 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2552 
krb5_kt_ªmove_íåy
 (

2553 
krb5_c⁄ãxt
 ,

2554 
krb5_keyèb
 ,

2555 
krb5_keyèb_íåy
 * );

2557 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2558 
krb5_kt_ªsﬁve
 (

2559 
krb5_c⁄ãxt
 ,

2561 
krb5_keyèb
 * );

2563 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2564 
krb5_kt_°¨t_£q_gë
 (

2565 
krb5_c⁄ãxt
 ,

2566 
krb5_keyèb
 ,

2567 
krb5_kt_curs‹
 * );

2569 
krb5_boﬁón
 
KRB5_LIB_FUNCTION


2570 
krb5_ku£rok
 (

2571 
krb5_c⁄ãxt
 ,

2572 
krb5_¥öcùÆ
 ,

2575 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2576 
krb5_log
 (

2577 
krb5_c⁄ãxt
 ,

2578 
krb5_log_Ácûôy
 * ,

2582 
__©åibuã__
((
f‹m©
 (
¥ötf
, 4, 5)));

2584 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2585 
krb5_log_msg
 (

2586 
krb5_c⁄ãxt
 ,

2587 
krb5_log_Ácûôy
 * ,

2592 
__©åibuã__
((
f‹m©
 (
¥ötf
, 5, 6)));

2594 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2595 
krb5_make_addΩ‹t
 (

2596 
krb5_c⁄ãxt
 ,

2597 
krb5_addªss
 ** ,

2598 c⁄° 
krb5_addªss
 * ,

2599 
öt16_t
 );

2601 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2602 
krb5_make_¥öcùÆ
 (

2603 
krb5_c⁄ãxt
 ,

2604 
krb5_¥öcùÆ
 * ,

2605 
krb5_c⁄°_ªÆm
 ,

2608 
size_t
 
KRB5_LIB_FUNCTION


2609 
krb5_max_sockaddr_size
 ();

2611 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2612 
krb5_mk_îr‹
 (

2613 
krb5_c⁄ãxt
 ,

2614 
krb5_îr‹_code
 ,

2616 c⁄° 
krb5_d©a
 * ,

2617 c⁄° 
krb5_¥öcùÆ
 ,

2618 c⁄° 
krb5_¥öcùÆ
 ,

2619 
time_t
 * ,

2621 
krb5_d©a
 * );

2623 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2624 
krb5_mk_¥iv
 (

2625 
krb5_c⁄ãxt
 ,

2626 
krb5_auth_c⁄ãxt
 ,

2627 c⁄° 
krb5_d©a
 * ,

2628 
krb5_d©a
 * ,

2629 
krb5_ª∂ay_d©a
 * );

2631 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2632 
krb5_mk_ªp
 (

2633 
krb5_c⁄ãxt
 ,

2634 
krb5_auth_c⁄ãxt
 ,

2635 
krb5_d©a
 * );

2637 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2638 
krb5_mk_ªq
 (

2639 
krb5_c⁄ãxt
 ,

2640 
krb5_auth_c⁄ãxt
 * ,

2641 c⁄° 
krb5_Êags
 ,

2644 
krb5_d©a
 * ,

2645 
krb5_cˇche
 ,

2646 
krb5_d©a
 * );

2648 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2649 
krb5_mk_ªq_exa˘
 (

2650 
krb5_c⁄ãxt
 ,

2651 
krb5_auth_c⁄ãxt
 * ,

2652 c⁄° 
krb5_Êags
 ,

2653 c⁄° 
krb5_¥öcùÆ
 ,

2654 
krb5_d©a
 * ,

2655 
krb5_cˇche
 ,

2656 
krb5_d©a
 * );

2658 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2659 
krb5_mk_ªq_exãnded
 (

2660 
krb5_c⁄ãxt
 ,

2661 
krb5_auth_c⁄ãxt
 * ,

2662 c⁄° 
krb5_Êags
 ,

2663 
krb5_d©a
 * ,

2664 
krb5_¸eds
 * ,

2665 
krb5_d©a
 * );

2667 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2668 
krb5_mk_ß„
 (

2669 
krb5_c⁄ãxt
 ,

2670 
krb5_auth_c⁄ãxt
 ,

2671 c⁄° 
krb5_d©a
 * ,

2672 
krb5_d©a
 * ,

2673 
krb5_ª∂ay_d©a
 * );

2675 
krb5_ssize_t
 
KRB5_LIB_FUNCTION


2676 
krb5_√t_ªad
 (

2677 
krb5_c⁄ãxt
 ,

2680 
size_t
 );

2682 
krb5_ssize_t
 
KRB5_LIB_FUNCTION


2683 
krb5_√t_wrôe
 (

2684 
krb5_c⁄ãxt
 ,

2687 
size_t
 );

2689 
krb5_ssize_t
 
KRB5_LIB_FUNCTION


2690 
krb5_√t_wrôe_block
 (

2691 
krb5_c⁄ãxt
 ,

2694 
size_t
 ,

2695 
time_t
 );

2697 
krb5_îr‹_code


2698 
krb5_¡lm_Æloc
 (

2699 
krb5_c⁄ãxt
 ,

2700 
krb5_¡lm
 * );

2702 
krb5_îr‹_code


2703 
krb5_¡lm_‰ì
 (

2704 
krb5_c⁄ãxt
 ,

2705 
krb5_¡lm
 );

2707 
krb5_îr‹_code


2708 
krb5_¡lm_öô_gë_chÆœnge
 (

2709 
krb5_c⁄ãxt
 ,

2710 
krb5_¡lm
 ,

2711 
krb5_d©a
 * );

2713 
krb5_îr‹_code


2714 
krb5_¡lm_öô_gë_Êags
 (

2715 
krb5_c⁄ãxt
 ,

2716 
krb5_¡lm
 ,

2717 
uöt32_t
 * );

2719 
krb5_îr‹_code


2720 
krb5_¡lm_öô_gë_›aque
 (

2721 
krb5_c⁄ãxt
 ,

2722 
krb5_¡lm
 ,

2723 
krb5_d©a
 * );

2725 
krb5_îr‹_code


2726 
krb5_¡lm_öô_gë_èrgëöfo
 (

2727 
krb5_c⁄ãxt
 ,

2728 
krb5_¡lm
 ,

2729 
krb5_d©a
 * );

2731 
krb5_îr‹_code


2732 
krb5_¡lm_öô_gë_èrgë«me
 (

2733 
krb5_c⁄ãxt
 ,

2734 
krb5_¡lm
 ,

2737 
krb5_îr‹_code


2738 
krb5_¡lm_öô_ªque°
 (

2739 
krb5_c⁄ãxt
 ,

2740 
krb5_¡lm
 ,

2741 
krb5_ªÆm
 ,

2742 
krb5_cˇche
 ,

2743 
uöt32_t
 ,

2747 
krb5_îr‹_code


2748 
krb5_¡lm_ªp_gë_£ssi⁄key
 (

2749 
krb5_c⁄ãxt
 ,

2750 
krb5_¡lm
 ,

2751 
krb5_d©a
 * );

2753 
krb5_boﬁón


2754 
krb5_¡lm_ªp_gë_°©us
 (

2755 
krb5_c⁄ãxt
 ,

2756 
krb5_¡lm
 );

2758 
krb5_îr‹_code


2759 
krb5_¡lm_ªq_£t_Êags
 (

2760 
krb5_c⁄ãxt
 ,

2761 
krb5_¡lm
 ,

2762 
uöt32_t
 );

2764 
krb5_îr‹_code


2765 
krb5_¡lm_ªq_£t_lm
 (

2766 
krb5_c⁄ãxt
 ,

2767 
krb5_¡lm
 ,

2769 
size_t
 );

2771 
krb5_îr‹_code


2772 
krb5_¡lm_ªq_£t_¡lm
 (

2773 
krb5_c⁄ãxt
 ,

2774 
krb5_¡lm
 ,

2776 
size_t
 );

2778 
krb5_îr‹_code


2779 
krb5_¡lm_ªq_£t_›aque
 (

2780 
krb5_c⁄ãxt
 ,

2781 
krb5_¡lm
 ,

2782 
krb5_d©a
 * );

2784 
krb5_îr‹_code


2785 
krb5_¡lm_ªq_£t_£ssi⁄
 (

2786 
krb5_c⁄ãxt
 ,

2787 
krb5_¡lm
 ,

2789 
size_t
 );

2791 
krb5_îr‹_code


2792 
krb5_¡lm_ªq_£t_èrgë«me
 (

2793 
krb5_c⁄ãxt
 ,

2794 
krb5_¡lm
 ,

2797 
krb5_îr‹_code


2798 
krb5_¡lm_ªq_£t_u£∫ame
 (

2799 
krb5_c⁄ãxt
 ,

2800 
krb5_¡lm
 ,

2803 
krb5_îr‹_code


2804 
krb5_¡lm_ªque°
 (

2805 
krb5_c⁄ãxt
 ,

2806 
krb5_¡lm
 ,

2807 
krb5_ªÆm
 ,

2808 
krb5_cˇche
 );

2810 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2811 
krb5_›ílog
 (

2812 
krb5_c⁄ãxt
 ,

2814 
krb5_log_Ácûôy
 ** );

2816 
krb5_îr‹_code


2817 
krb5_∑c_add_buf„r
 (

2818 
krb5_c⁄ãxt
 ,

2819 
krb5_∑c
 ,

2820 
uöt32_t
 ,

2821 c⁄° 
krb5_d©a
 * );

2824 
krb5_∑c_‰ì
 (

2825 
krb5_c⁄ãxt
 ,

2826 
krb5_∑c
 );

2828 
krb5_îr‹_code


2829 
krb5_∑c_gë_buf„r
 (

2830 
krb5_c⁄ãxt
 ,

2831 
krb5_∑c
 ,

2832 
uöt32_t
 ,

2833 
krb5_d©a
 * );

2835 
krb5_îr‹_code


2836 
krb5_∑c_gë_ty≥s
 (

2837 
krb5_c⁄ãxt
 ,

2838 
krb5_∑c
 ,

2839 
size_t
 * ,

2840 
uöt32_t
 ** );

2842 
krb5_îr‹_code


2843 
krb5_∑c_öô
 (

2844 
krb5_c⁄ãxt
 ,

2845 
krb5_∑c
 * );

2847 
krb5_îr‹_code


2848 
krb5_∑c_∑r£
 (

2849 
krb5_c⁄ãxt
 ,

2851 
size_t
 ,

2852 
krb5_∑c
 * );

2854 
krb5_îr‹_code


2855 
krb5_∑c_vîify
 (

2856 
krb5_c⁄ãxt
 ,

2857 c⁄° 
krb5_∑c
 ,

2858 
time_t
 ,

2859 
krb5_c⁄°_¥öcùÆ
 ,

2860 c⁄° 
krb5_keyblock
 * ,

2861 c⁄° 
krb5_keyblock
 * );

2863 
KRB5_LIB_FUNCTION


2864 
krb5_∑d©a_add
 (

2865 
krb5_c⁄ãxt
 ,

2866 
METHOD_DATA
 * ,

2869 
size_t
 );

2871 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2872 
krb5_∑r£_addªss
 (

2873 
krb5_c⁄ãxt
 ,

2875 
krb5_addªs£s
 * );

2877 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2878 
krb5_∑r£_«me
 (

2879 
krb5_c⁄ãxt
 ,

2881 
krb5_¥öcùÆ
 * );

2883 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2884 
krb5_∑r£_«me_Êags
 (

2885 
krb5_c⁄ãxt
 ,

2888 
krb5_¥öcùÆ
 * );

2890 
krb5_îr‹_code


2891 
krb5_∑r£_«mëy≥
 (

2892 
krb5_c⁄ãxt
 ,

2894 
öt32_t
 * );

2896 c⁄° * 
KRB5_LIB_FUNCTION


2897 
krb5_∑sswd_ªsu…_to_°rög
 (

2898 
krb5_c⁄ãxt
 ,

2901 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2902 
krb5_∑ssw‹d_key_¥oc
 (

2903 
krb5_c⁄ãxt
 ,

2904 
krb5_í˘y≥
 ,

2905 
krb5_ß…
 ,

2906 
krb5_c⁄°_poöãr
 ,

2907 
krb5_keyblock
 ** );

2909 
krb5_îr‹_code


2910 
krb5_∂ugö_ªgi°î
 (

2911 
krb5_c⁄ãxt
 ,

2912 
krb5_∂ugö_ty≥
 ,

2916 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2917 
krb5_¥ïíd_c⁄fig_fûes
 (

2922 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2923 
krb5_¥ïíd_c⁄fig_fûes_deÁu…
 (

2927 
krb5_ªÆm
 * 
KRB5_LIB_FUNCTION


2928 
krb5_¥öc_ªÆm
 (

2929 
krb5_c⁄ãxt
 ,

2930 
krb5_¥öcùÆ
 );

2932 
KRB5_LIB_FUNCTION


2933 
krb5_¥öc_£t_ªÆm
 (

2934 
krb5_c⁄ãxt
 ,

2935 
krb5_¥öcùÆ
 ,

2936 
krb5_ªÆm
 * );

2938 
krb5_boﬁón
 
KRB5_LIB_FUNCTION


2939 
krb5_¥öcùÆ_com∑ª
 (

2940 
krb5_c⁄ãxt
 ,

2941 
krb5_c⁄°_¥öcùÆ
 ,

2942 
krb5_c⁄°_¥öcùÆ
 );

2944 
krb5_boﬁón
 
KRB5_LIB_FUNCTION


2945 
krb5_¥öcùÆ_com∑ª_™y_ªÆm
 (

2946 
krb5_c⁄ãxt
 ,

2947 
krb5_c⁄°_¥öcùÆ
 ,

2948 
krb5_c⁄°_¥öcùÆ
 );

2950 c⁄° * 
KRB5_LIB_FUNCTION


2951 
krb5_¥öcùÆ_gë_comp_°rög
 (

2952 
krb5_c⁄ãxt
 ,

2953 
krb5_c⁄°_¥öcùÆ
 ,

2956 c⁄° * 
KRB5_LIB_FUNCTION


2957 
krb5_¥öcùÆ_gë_ªÆm
 (

2958 
krb5_c⁄ãxt
 ,

2959 
krb5_c⁄°_¥öcùÆ
 );

2961 
KRB5_LIB_FUNCTION


2962 
krb5_¥öcùÆ_gë_ty≥
 (

2963 
krb5_c⁄ãxt
 ,

2964 
krb5_c⁄°_¥öcùÆ
 );

2966 
krb5_boﬁón
 
KRB5_LIB_FUNCTION


2967 
krb5_¥öcùÆ_m©ch
 (

2968 
krb5_c⁄ãxt
 ,

2969 
krb5_c⁄°_¥öcùÆ
 ,

2970 
krb5_c⁄°_¥öcùÆ
 );

2972 
KRB5_LIB_FUNCTION


2973 
krb5_¥öcùÆ_£t_ty≥
 (

2974 
krb5_c⁄ãxt
 ,

2975 
krb5_¥öcùÆ
 ,

2978 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


2979 
krb5_¥öt_addªss
 (

2980 c⁄° 
krb5_addªss
 * ,

2982 
size_t
 ,

2983 
size_t
 * );

2985 
KRB5_LIB_FUNCTION


2986 
krb5_¥ogøm_£tup
 (

2987 
krb5_c⁄ãxt
 * ,

2990 
gë¨gs
 * ,

2992 (* )(, 
gë¨gs
*, ));

2994 
KRB5_LIB_FUNCTION


2995 
krb5_¥om±î_posix
 (

2996 
krb5_c⁄ãxt
 ,

3001 
krb5_¥om±
 
¥om±s
[]);

3003 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3004 
krb5_øndom_to_key
 (

3005 
krb5_c⁄ãxt
 ,

3006 
krb5_í˘y≥
 ,

3008 
size_t
 ,

3009 
krb5_keyblock
 * );

3011 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3012 
krb5_rc_˛o£
 (

3013 
krb5_c⁄ãxt
 ,

3014 
krb5_rˇche
 );

3016 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3017 
krb5_rc_deÁu…
 (

3018 
krb5_c⁄ãxt
 ,

3019 
krb5_rˇche
 * );

3021 c⁄° * 
KRB5_LIB_FUNCTION


3022 
krb5_rc_deÁu…_«me
 (
krb5_c⁄ãxt
 );

3024 c⁄° * 
KRB5_LIB_FUNCTION


3025 
krb5_rc_deÁu…_ty≥
 (
krb5_c⁄ãxt
 );

3027 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3028 
krb5_rc_de°roy
 (

3029 
krb5_c⁄ãxt
 ,

3030 
krb5_rˇche
 );

3032 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3033 
krb5_rc_expunge
 (

3034 
krb5_c⁄ãxt
 ,

3035 
krb5_rˇche
 );

3037 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3038 
krb5_rc_gë_li„•™
 (

3039 
krb5_c⁄ãxt
 ,

3040 
krb5_rˇche
 ,

3041 
krb5_dñèt
 * );

3043 c⁄° * 
KRB5_LIB_FUNCTION


3044 
krb5_rc_gë_«me
 (

3045 
krb5_c⁄ãxt
 ,

3046 
krb5_rˇche
 );

3048 c⁄° * 
KRB5_LIB_FUNCTION


3049 
krb5_rc_gë_ty≥
 (

3050 
krb5_c⁄ãxt
 ,

3051 
krb5_rˇche
 );

3053 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3054 
krb5_rc_öôülize
 (

3055 
krb5_c⁄ãxt
 ,

3056 
krb5_rˇche
 ,

3057 
krb5_dñèt
 );

3059 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3060 
krb5_rc_ªcovî
 (

3061 
krb5_c⁄ãxt
 ,

3062 
krb5_rˇche
 );

3064 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3065 
krb5_rc_ªsﬁve
 (

3066 
krb5_c⁄ãxt
 ,

3067 
krb5_rˇche
 ,

3070 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3071 
krb5_rc_ªsﬁve_fuŒ
 (

3072 
krb5_c⁄ãxt
 ,

3073 
krb5_rˇche
 * ,

3076 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3077 
krb5_rc_ªsﬁve_ty≥
 (

3078 
krb5_c⁄ãxt
 ,

3079 
krb5_rˇche
 * ,

3082 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3083 
krb5_rc_°‹e
 (

3084 
krb5_c⁄ãxt
 ,

3085 
krb5_rˇche
 ,

3086 
krb5_d⁄Ÿ_ª∂ay
 * );

3088 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3089 
krb5_rd_¸ed
 (

3090 
krb5_c⁄ãxt
 ,

3091 
krb5_auth_c⁄ãxt
 ,

3092 
krb5_d©a
 * ,

3093 
krb5_¸eds
 *** ,

3094 
krb5_ª∂ay_d©a
 * );

3096 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3097 
krb5_rd_¸ed2
 (

3098 
krb5_c⁄ãxt
 ,

3099 
krb5_auth_c⁄ãxt
 ,

3100 
krb5_cˇche
 ,

3101 
krb5_d©a
 * );

3103 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3104 
krb5_rd_îr‹
 (

3105 
krb5_c⁄ãxt
 ,

3106 c⁄° 
krb5_d©a
 * ,

3107 
KRB_ERROR
 * );

3109 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3110 
krb5_rd_¥iv
 (

3111 
krb5_c⁄ãxt
 ,

3112 
krb5_auth_c⁄ãxt
 ,

3113 c⁄° 
krb5_d©a
 * ,

3114 
krb5_d©a
 * ,

3115 
krb5_ª∂ay_d©a
 * );

3117 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3118 
krb5_rd_ªp
 (

3119 
krb5_c⁄ãxt
 ,

3120 
krb5_auth_c⁄ãxt
 ,

3121 c⁄° 
krb5_d©a
 * ,

3122 
krb5_≠_ªp_íc_∑π
 ** );

3124 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3125 
krb5_rd_ªq
 (

3126 
krb5_c⁄ãxt
 ,

3127 
krb5_auth_c⁄ãxt
 * ,

3128 c⁄° 
krb5_d©a
 * ,

3129 
krb5_c⁄°_¥öcùÆ
 ,

3130 
krb5_keyèb
 ,

3131 
krb5_Êags
 * ,

3132 
krb5_tickë
 ** );

3134 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3135 
krb5_rd_ªq_˘x
 (

3136 
krb5_c⁄ãxt
 ,

3137 
krb5_auth_c⁄ãxt
 * ,

3138 c⁄° 
krb5_d©a
 * ,

3139 
krb5_c⁄°_¥öcùÆ
 ,

3140 
krb5_rd_ªq_ö_˘x
 ,

3141 
krb5_rd_ªq_out_˘x
 * );

3143 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3144 
krb5_rd_ªq_ö_˘x_Æloc
 (

3145 
krb5_c⁄ãxt
 ,

3146 
krb5_rd_ªq_ö_˘x
 * );

3148 
KRB5_LIB_FUNCTION


3149 
krb5_rd_ªq_ö_˘x_‰ì
 (

3150 
krb5_c⁄ãxt
 ,

3151 
krb5_rd_ªq_ö_˘x
 );

3153 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3154 
krb5_rd_ªq_ö_£t_keyblock
 (

3155 
krb5_c⁄ãxt
 ,

3156 
krb5_rd_ªq_ö_˘x
 ,

3157 
krb5_keyblock
 * );

3159 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3160 
krb5_rd_ªq_ö_£t_keyèb
 (

3161 
krb5_c⁄ãxt
 ,

3162 
krb5_rd_ªq_ö_˘x
 ,

3163 
krb5_keyèb
 );

3165 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3166 
krb5_rd_ªq_ö_£t_∑c_check
 (

3167 
krb5_c⁄ãxt
 ,

3168 
krb5_rd_ªq_ö_˘x
 ,

3169 
krb5_boﬁón
 );

3171 
KRB5_LIB_FUNCTION


3172 
krb5_rd_ªq_out_˘x_‰ì
 (

3173 
krb5_c⁄ãxt
 ,

3174 
krb5_rd_ªq_out_˘x
 );

3176 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3177 
krb5_rd_ªq_out_gë_≠_ªq_›ti⁄s
 (

3178 
krb5_c⁄ãxt
 ,

3179 
krb5_rd_ªq_out_˘x
 ,

3180 
krb5_Êags
 * );

3182 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3183 
krb5_rd_ªq_out_gë_keyblock
 (

3184 
krb5_c⁄ãxt
 ,

3185 
krb5_rd_ªq_out_˘x
 ,

3186 
krb5_keyblock
 ** );

3188 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3189 
krb5_rd_ªq_out_gë_tickë
 (

3190 
krb5_c⁄ãxt
 ,

3191 
krb5_rd_ªq_out_˘x
 ,

3192 
krb5_tickë
 ** );

3194 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3195 
krb5_rd_ªq_wôh_keyblock
 (

3196 
krb5_c⁄ãxt
 ,

3197 
krb5_auth_c⁄ãxt
 * ,

3198 c⁄° 
krb5_d©a
 * ,

3199 
krb5_c⁄°_¥öcùÆ
 ,

3200 
krb5_keyblock
 * ,

3201 
krb5_Êags
 * ,

3202 
krb5_tickë
 ** );

3204 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3205 
krb5_rd_ß„
 (

3206 
krb5_c⁄ãxt
 ,

3207 
krb5_auth_c⁄ãxt
 ,

3208 c⁄° 
krb5_d©a
 * ,

3209 
krb5_d©a
 * ,

3210 
krb5_ª∂ay_d©a
 * );

3212 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3213 
krb5_ªad_mesßge
 (

3214 
krb5_c⁄ãxt
 ,

3215 
krb5_poöãr
 ,

3216 
krb5_d©a
 * );

3218 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3219 
krb5_ªad_¥iv_mesßge
 (

3220 
krb5_c⁄ãxt
 ,

3221 
krb5_auth_c⁄ãxt
 ,

3222 
krb5_poöãr
 ,

3223 
krb5_d©a
 * );

3225 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3226 
krb5_ªad_ß„_mesßge
 (

3227 
krb5_c⁄ãxt
 ,

3228 
krb5_auth_c⁄ãxt
 ,

3229 
krb5_poöãr
 ,

3230 
krb5_d©a
 * );

3232 
krb5_boﬁón
 
KRB5_LIB_FUNCTION


3233 
krb5_ªÆm_com∑ª
 (

3234 
krb5_c⁄ãxt
 ,

3235 
krb5_c⁄°_¥öcùÆ
 ,

3236 
krb5_c⁄°_¥öcùÆ
 );

3238 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3239 
krb5_ªcvauth
 (

3240 
krb5_c⁄ãxt
 ,

3241 
krb5_auth_c⁄ãxt
 * ,

3242 
krb5_poöãr
 ,

3244 
krb5_¥öcùÆ
 ,

3245 
öt32_t
 ,

3246 
krb5_keyèb
 ,

3247 
krb5_tickë
 ** );

3249 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3250 
krb5_ªcvauth_m©ch_vîsi⁄
 (

3251 
krb5_c⁄ãxt
 ,

3252 
krb5_auth_c⁄ãxt
 * ,

3253 
krb5_poöãr
 ,

3254 
krb5_boﬁón
 (* )(const *, const *),

3256 
krb5_¥öcùÆ
 ,

3257 
öt32_t
 ,

3258 
krb5_keyèb
 ,

3259 
krb5_tickë
 ** );

3261 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3262 
krb5_ªt_addªss
 (

3263 
krb5_°‹age
 * ,

3264 
krb5_addªss
 * );

3266 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3267 
krb5_ªt_addrs
 (

3268 
krb5_°‹age
 * ,

3269 
krb5_addªs£s
 * );

3271 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3272 
krb5_ªt_authd©a
 (

3273 
krb5_°‹age
 * ,

3274 
krb5_authd©a
 * );

3276 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3277 
krb5_ªt_¸eds
 (

3278 
krb5_°‹age
 * ,

3279 
krb5_¸eds
 * );

3281 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3282 
krb5_ªt_¸eds_èg
 (

3283 
krb5_°‹age
 * ,

3284 
krb5_¸eds
 * );

3286 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3287 
krb5_ªt_d©a
 (

3288 
krb5_°‹age
 * ,

3289 
krb5_d©a
 * );

3291 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3292 
krb5_ªt_öt16
 (

3293 
krb5_°‹age
 * ,

3294 
öt16_t
 * );

3296 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3297 
krb5_ªt_öt32
 (

3298 
krb5_°‹age
 * ,

3299 
öt32_t
 * );

3301 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3302 
krb5_ªt_öt8
 (

3303 
krb5_°‹age
 * ,

3304 
öt8_t
 * );

3306 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3307 
krb5_ªt_keyblock
 (

3308 
krb5_°‹age
 * ,

3309 
krb5_keyblock
 * );

3311 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3312 
krb5_ªt_¥öcùÆ
 (

3313 
krb5_°‹age
 * ,

3314 
krb5_¥öcùÆ
 * );

3316 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3317 
krb5_ªt_°rög
 (

3318 
krb5_°‹age
 * ,

3321 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3322 
krb5_ªt_°rög∆
 (

3323 
krb5_°‹age
 * ,

3326 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3327 
krb5_ªt_°rögz
 (

3328 
krb5_°‹age
 * ,

3331 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3332 
krb5_ªt_times
 (

3333 
krb5_°‹age
 * ,

3334 
krb5_times
 * );

3336 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3337 
krb5_ªt_uöt16
 (

3338 
krb5_°‹age
 * ,

3339 
uöt16_t
 * );

3341 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3342 
krb5_ªt_uöt32
 (

3343 
krb5_°‹age
 * ,

3344 
uöt32_t
 * );

3346 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3347 
krb5_ªt_uöt8
 (

3348 
krb5_°‹age
 * ,

3349 
uöt8_t
 * );

3351 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3352 
krb5_ß…ty≥_to_°rög
 (

3353 
krb5_c⁄ãxt
 ,

3354 
krb5_í˘y≥
 ,

3355 
krb5_ß…ty≥
 ,

3358 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3359 
krb5_£ndauth
 (

3360 
krb5_c⁄ãxt
 ,

3361 
krb5_auth_c⁄ãxt
 * ,

3362 
krb5_poöãr
 ,

3364 
krb5_¥öcùÆ
 ,

3365 
krb5_¥öcùÆ
 ,

3366 
krb5_Êags
 ,

3367 
krb5_d©a
 * ,

3368 
krb5_¸eds
 * ,

3369 
krb5_cˇche
 ,

3370 
krb5_îr‹
 ** ,

3371 
krb5_≠_ªp_íc_∑π
 ** ,

3372 
krb5_¸eds
 ** );

3374 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3375 
krb5_£ndto
 (

3376 
krb5_c⁄ãxt
 ,

3377 c⁄° 
krb5_d©a
 * ,

3378 
krb5_krbh°_h™dÀ
 ,

3379 
krb5_d©a
 * );

3381 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3382 
krb5_£ndto_c⁄ãxt
 (

3383 
krb5_c⁄ãxt
 ,

3384 
krb5_£ndto_˘x
 ,

3385 c⁄° 
krb5_d©a
 * ,

3386 c⁄° 
krb5_ªÆm
 ,

3387 
krb5_d©a
 * );

3389 
KRB5_LIB_FUNCTION


3390 
krb5_£ndto_˘x_add_Êags
 (

3391 
krb5_£ndto_˘x
 ,

3394 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3395 
krb5_£ndto_˘x_Æloc
 (

3396 
krb5_c⁄ãxt
 ,

3397 
krb5_£ndto_˘x
 * );

3399 
KRB5_LIB_FUNCTION


3400 
krb5_£ndto_˘x_‰ì
 (

3401 
krb5_c⁄ãxt
 ,

3402 
krb5_£ndto_˘x
 );

3404 
KRB5_LIB_FUNCTION


3405 
krb5_£ndto_˘x_gë_Êags
 (
krb5_£ndto_˘x
 );

3407 
KRB5_LIB_FUNCTION


3408 
krb5_£ndto_˘x_£t_func
 (

3409 
krb5_£ndto_˘x
 ,

3410 
krb5_£ndto_˘x_func
 ,

3413 
KRB5_LIB_FUNCTION


3414 
krb5_£ndto_˘x_£t_ty≥
 (

3415 
krb5_£ndto_˘x
 ,

3418 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3419 
krb5_£ndto_kdc
 (

3420 
krb5_c⁄ãxt
 ,

3421 c⁄° 
krb5_d©a
 * ,

3422 c⁄° 
krb5_ªÆm
 * ,

3423 
krb5_d©a
 * );

3425 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3426 
krb5_£ndto_kdc_Êags
 (

3427 
krb5_c⁄ãxt
 ,

3428 c⁄° 
krb5_d©a
 * ,

3429 c⁄° 
krb5_ªÆm
 * ,

3430 
krb5_d©a
 * ,

3433 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3434 
krb5_£t_c⁄fig_fûes
 (

3435 
krb5_c⁄ãxt
 ,

3438 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3439 
krb5_£t_deÁu…_ö_tkt_ëy≥s
 (

3440 
krb5_c⁄ãxt
 ,

3441 c⁄° 
krb5_í˘y≥
 * );

3443 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3444 
krb5_£t_deÁu…_ªÆm
 (

3445 
krb5_c⁄ãxt
 ,

3448 
KRB5_LIB_FUNCTION


3449 
krb5_£t_dns_ˇn⁄iˇlize_ho°«me
 (

3450 
krb5_c⁄ãxt
 ,

3451 
krb5_boﬁón
 );

3453 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3454 
krb5_£t_îr‹_°rög
 (

3455 
krb5_c⁄ãxt
 ,

3458 
__©åibuã__
((
f‹m©
 (
¥ötf
, 2, 3)));

3460 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3461 
krb5_£t_exåa_addªs£s
 (

3462 
krb5_c⁄ãxt
 ,

3463 c⁄° 
krb5_addªs£s
 * );

3465 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3466 
krb5_£t_fˇche_vîsi⁄
 (

3467 
krb5_c⁄ãxt
 ,

3470 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3471 
krb5_£t_ign‹e_addªs£s
 (

3472 
krb5_c⁄ãxt
 ,

3473 c⁄° 
krb5_addªs£s
 * );

3475 
KRB5_LIB_FUNCTION


3476 
krb5_£t_max_time_skew
 (

3477 
krb5_c⁄ãxt
 ,

3478 
time_t
 );

3480 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3481 
krb5_£t_∑ssw‹d
 (

3482 
krb5_c⁄ãxt
 ,

3483 
krb5_¸eds
 * ,

3485 
krb5_¥öcùÆ
 ,

3487 
krb5_d©a
 * ,

3488 
krb5_d©a
 * );

3490 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3491 
krb5_£t_∑ssw‹d_usög_cˇche
 (

3492 
krb5_c⁄ãxt
 ,

3493 
krb5_cˇche
 ,

3495 
krb5_¥öcùÆ
 ,

3497 
krb5_d©a
 * ,

3498 
krb5_d©a
 * );

3500 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3501 
krb5_£t_ªÆ_time
 (

3502 
krb5_c⁄ãxt
 ,

3503 
krb5_time°amp
 ,

3504 
öt32_t
 );

3506 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3507 
krb5_£t_£nd_to_kdc_func
 (

3508 
krb5_c⁄ãxt
 ,

3509 
krb5_£nd_to_kdc_func
 ,

3512 
KRB5_LIB_FUNCTION


3513 
krb5_£t_u£_admö_kdc
 (

3514 
krb5_c⁄ãxt
 ,

3515 
krb5_boﬁón
 );

3517 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3518 
krb5_£t_w¨n_de°
 (

3519 
krb5_c⁄ãxt
 ,

3520 
krb5_log_Ácûôy
 * );

3522 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3523 
krb5_¢ame_to_¥öcùÆ
 (

3524 
krb5_c⁄ãxt
 ,

3527 
öt32_t
 ,

3528 
krb5_¥öcùÆ
 * );

3530 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3531 
krb5_sock_to_¥öcùÆ
 (

3532 
krb5_c⁄ãxt
 ,

3535 
öt32_t
 ,

3536 
krb5_¥öcùÆ
 * );

3538 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3539 
krb5_sockaddr2addªss
 (

3540 
krb5_c⁄ãxt
 ,

3541 c⁄° 
sockaddr
 * ,

3542 
krb5_addªss
 * );

3544 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3545 
krb5_sockaddr2p‹t
 (

3546 
krb5_c⁄ãxt
 ,

3547 c⁄° 
sockaddr
 * ,

3548 
öt16_t
 * );

3550 
krb5_boﬁón
 
KRB5_LIB_FUNCTION


3551 
krb5_sockaddr_unöãª°ög
 (c⁄° 
sockaddr
 * );

3553 
KRB5_LIB_FUNCTION


3554 
krb5_°d_ußge
 (

3556 
gë¨gs
 * ,

3559 
KRB5_LIB_FUNCTION


3560 
krb5_°‹age_˛ór_Êags
 (

3561 
krb5_°‹age
 * ,

3562 
krb5_Êags
 );

3564 
krb5_°‹age
 * 
KRB5_LIB_FUNCTION


3565 
krb5_°‹age_emem
 ();

3567 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3568 
krb5_°‹age_‰ì
 (
krb5_°‹age
 * );

3570 
krb5_°‹age
 * 
KRB5_LIB_FUNCTION


3571 
krb5_°‹age_‰om_d©a
 (
krb5_d©a
 * );

3573 
krb5_°‹age
 * 
KRB5_LIB_FUNCTION


3574 
krb5_°‹age_‰om_fd
 ();

3576 
krb5_°‹age
 * 
KRB5_LIB_FUNCTION


3577 
krb5_°‹age_‰om_mem
 (

3579 
size_t
 );

3581 
krb5_°‹age
 * 
KRB5_LIB_FUNCTION


3582 
krb5_°‹age_‰om_ªad⁄ly_mem
 (

3584 
size_t
 );

3586 
krb5_Êags
 
KRB5_LIB_FUNCTION


3587 
krb5_°‹age_gë_byã‹dî
 (

3588 
krb5_°‹age
 * ,

3589 
krb5_Êags
 );

3591 
krb5_boﬁón
 
KRB5_LIB_FUNCTION


3592 
krb5_°‹age_is_Êags
 (

3593 
krb5_°‹age
 * ,

3594 
krb5_Êags
 );

3596 
krb5_ssize_t
 
KRB5_LIB_FUNCTION


3597 
krb5_°‹age_ªad
 (

3598 
krb5_°‹age
 * ,

3600 
size_t
 );

3602 
off_t
 
KRB5_LIB_FUNCTION


3603 
krb5_°‹age_£ek
 (

3604 
krb5_°‹age
 * ,

3605 
off_t
 ,

3608 
KRB5_LIB_FUNCTION


3609 
krb5_°‹age_£t_byã‹dî
 (

3610 
krb5_°‹age
 * ,

3611 
krb5_Êags
 );

3613 
KRB5_LIB_FUNCTION


3614 
krb5_°‹age_£t_eof_code
 (

3615 
krb5_°‹age
 * ,

3618 
KRB5_LIB_FUNCTION


3619 
krb5_°‹age_£t_Êags
 (

3620 
krb5_°‹age
 * ,

3621 
krb5_Êags
 );

3623 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3624 
krb5_°‹age_to_d©a
 (

3625 
krb5_°‹age
 * ,

3626 
krb5_d©a
 * );

3628 
krb5_ssize_t
 
KRB5_LIB_FUNCTION


3629 
krb5_°‹age_wrôe
 (

3630 
krb5_°‹age
 * ,

3632 
size_t
 );

3634 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3635 
krb5_°‹e_addªss
 (

3636 
krb5_°‹age
 * ,

3637 
krb5_addªss
 );

3639 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3640 
krb5_°‹e_addrs
 (

3641 
krb5_°‹age
 * ,

3642 
krb5_addªs£s
 );

3644 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3645 
krb5_°‹e_authd©a
 (

3646 
krb5_°‹age
 * ,

3647 
krb5_authd©a
 );

3649 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3650 
krb5_°‹e_¸eds
 (

3651 
krb5_°‹age
 * ,

3652 
krb5_¸eds
 * );

3654 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3655 
krb5_°‹e_¸eds_èg
 (

3656 
krb5_°‹age
 * ,

3657 
krb5_¸eds
 * );

3659 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3660 
krb5_°‹e_d©a
 (

3661 
krb5_°‹age
 * ,

3662 
krb5_d©a
 );

3664 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3665 
krb5_°‹e_öt16
 (

3666 
krb5_°‹age
 * ,

3667 
öt16_t
 );

3669 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3670 
krb5_°‹e_öt32
 (

3671 
krb5_°‹age
 * ,

3672 
öt32_t
 );

3674 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3675 
krb5_°‹e_öt8
 (

3676 
krb5_°‹age
 * ,

3677 
öt8_t
 );

3679 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3680 
krb5_°‹e_keyblock
 (

3681 
krb5_°‹age
 * ,

3682 
krb5_keyblock
 );

3684 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3685 
krb5_°‹e_¥öcùÆ
 (

3686 
krb5_°‹age
 * ,

3687 
krb5_c⁄°_¥öcùÆ
 );

3689 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3690 
krb5_°‹e_°rög
 (

3691 
krb5_°‹age
 * ,

3694 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3695 
krb5_°‹e_°rög∆
 (

3696 
krb5_°‹age
 * ,

3699 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3700 
krb5_°‹e_°rögz
 (

3701 
krb5_°‹age
 * ,

3704 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3705 
krb5_°‹e_times
 (

3706 
krb5_°‹age
 * ,

3707 
krb5_times
 );

3709 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3710 
krb5_°‹e_uöt16
 (

3711 
krb5_°‹age
 * ,

3712 
uöt16_t
 );

3714 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3715 
krb5_°‹e_uöt32
 (

3716 
krb5_°‹age
 * ,

3717 
uöt32_t
 );

3719 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3720 
krb5_°‹e_uöt8
 (

3721 
krb5_°‹age
 * ,

3722 
uöt8_t
 );

3724 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3725 
krb5_°rög_to_dñèt
 (

3727 
krb5_dñèt
 * );

3729 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3730 
krb5_°rög_to_í˘y≥
 (

3731 
krb5_c⁄ãxt
 ,

3733 
krb5_í˘y≥
 * );

3735 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3736 
krb5_°rög_to_key
 (

3737 
krb5_c⁄ãxt
 ,

3738 
krb5_í˘y≥
 ,

3740 
krb5_¥öcùÆ
 ,

3741 
krb5_keyblock
 * );

3743 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3744 
krb5_°rög_to_key_d©a
 (

3745 
krb5_c⁄ãxt
 ,

3746 
krb5_í˘y≥
 ,

3747 
krb5_d©a
 ,

3748 
krb5_¥öcùÆ
 ,

3749 
krb5_keyblock
 * );

3751 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3752 
krb5_°rög_to_key_d©a_ß…
 (

3753 
krb5_c⁄ãxt
 ,

3754 
krb5_í˘y≥
 ,

3755 
krb5_d©a
 ,

3756 
krb5_ß…
 ,

3757 
krb5_keyblock
 * );

3759 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3760 
krb5_°rög_to_key_d©a_ß…_›aque
 (

3761 
krb5_c⁄ãxt
 ,

3762 
krb5_í˘y≥
 ,

3763 
krb5_d©a
 ,

3764 
krb5_ß…
 ,

3765 
krb5_d©a
 ,

3766 
krb5_keyblock
 * );

3768 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3769 
krb5_°rög_to_key_dîived
 (

3770 
krb5_c⁄ãxt
 ,

3772 
size_t
 ,

3773 
krb5_í˘y≥
 ,

3774 
krb5_keyblock
 * );

3776 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3777 
krb5_°rög_to_key_ß…
 (

3778 
krb5_c⁄ãxt
 ,

3779 
krb5_í˘y≥
 ,

3781 
krb5_ß…
 ,

3782 
krb5_keyblock
 * );

3784 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3785 
krb5_°rög_to_key_ß…_›aque
 (

3786 
krb5_c⁄ãxt
 ,

3787 
krb5_í˘y≥
 ,

3789 
krb5_ß…
 ,

3790 
krb5_d©a
 ,

3791 
krb5_keyblock
 * );

3793 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3794 
krb5_°rög_to_keyty≥
 (

3795 
krb5_c⁄ãxt
 ,

3797 
krb5_keyty≥
 * );

3799 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3800 
krb5_°rög_to_ß…ty≥
 (

3801 
krb5_c⁄ãxt
 ,

3802 
krb5_í˘y≥
 ,

3804 
krb5_ß…ty≥
 * );

3806 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3807 
krb5_tickë_gë_auth‹iz©i⁄_d©a_ty≥
 (

3808 
krb5_c⁄ãxt
 ,

3809 
krb5_tickë
 * ,

3811 
krb5_d©a
 * );

3813 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3814 
krb5_tickë_gë_˛õ¡
 (

3815 
krb5_c⁄ãxt
 ,

3816 c⁄° 
krb5_tickë
 * ,

3817 
krb5_¥öcùÆ
 * );

3819 
time_t
 
KRB5_LIB_FUNCTION


3820 
krb5_tickë_gë_ídtime
 (

3821 
krb5_c⁄ãxt
 ,

3822 c⁄° 
krb5_tickë
 * );

3824 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3825 
krb5_tickë_gë_£rvî
 (

3826 
krb5_c⁄ãxt
 ,

3827 c⁄° 
krb5_tickë
 * ,

3828 
krb5_¥öcùÆ
 * );

3830 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3831 
krb5_timeofday
 (

3832 
krb5_c⁄ãxt
 ,

3833 
krb5_time°amp
 * );

3835 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3836 
krb5_u≈¨£_«me
 (

3837 
krb5_c⁄ãxt
 ,

3838 
krb5_c⁄°_¥öcùÆ
 ,

3841 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3842 
krb5_u≈¨£_«me_fixed
 (

3843 
krb5_c⁄ãxt
 ,

3844 
krb5_c⁄°_¥öcùÆ
 ,

3846 
size_t
 );

3848 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3849 
krb5_u≈¨£_«me_fixed_Êags
 (

3850 
krb5_c⁄ãxt
 ,

3851 
krb5_c⁄°_¥öcùÆ
 ,

3854 
size_t
 );

3856 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3857 
krb5_u≈¨£_«me_fixed_sh‹t
 (

3858 
krb5_c⁄ãxt
 ,

3859 
krb5_c⁄°_¥öcùÆ
 ,

3861 
size_t
 );

3863 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3864 
krb5_u≈¨£_«me_Êags
 (

3865 
krb5_c⁄ãxt
 ,

3866 
krb5_c⁄°_¥öcùÆ
 ,

3870 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3871 
krb5_u≈¨£_«me_sh‹t
 (

3872 
krb5_c⁄ãxt
 ,

3873 
krb5_c⁄°_¥öcùÆ
 ,

3876 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3877 
krb5_us_timeofday
 (

3878 
krb5_c⁄ãxt
 ,

3879 
krb5_time°amp
 * ,

3880 
öt32_t
 * );

3882 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3883 
krb5_vab‹t
 (

3884 
krb5_c⁄ãxt
 ,

3885 
krb5_îr‹_code
 ,

3887 
va_li°
 )

3888 
__©åibuã__
 ((
n‹ëu∫
, 
f‹m©
 (
¥ötf
, 3, 0)));

3890 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3891 
krb5_vab‹tx
 (

3892 
krb5_c⁄ãxt
 ,

3894 
va_li°
 )

3895 
__©åibuã__
 ((
n‹ëu∫
, 
f‹m©
 (
¥ötf
, 2, 0)));

3897 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3898 
krb5_vîify_≠_ªq
 (

3899 
krb5_c⁄ãxt
 ,

3900 
krb5_auth_c⁄ãxt
 * ,

3901 
krb5_≠_ªq
 * ,

3902 
krb5_c⁄°_¥öcùÆ
 ,

3903 
krb5_keyblock
 * ,

3904 
krb5_Êags
 ,

3905 
krb5_Êags
 * ,

3906 
krb5_tickë
 ** );

3908 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3909 
krb5_vîify_≠_ªq2
 (

3910 
krb5_c⁄ãxt
 ,

3911 
krb5_auth_c⁄ãxt
 * ,

3912 
krb5_≠_ªq
 * ,

3913 
krb5_c⁄°_¥öcùÆ
 ,

3914 
krb5_keyblock
 * ,

3915 
krb5_Êags
 ,

3916 
krb5_Êags
 * ,

3917 
krb5_tickë
 ** ,

3918 
krb5_key_ußge
 );

3920 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3921 
krb5_vîify_authítiˇt‹_checksum
 (

3922 
krb5_c⁄ãxt
 ,

3923 
krb5_auth_c⁄ãxt
 ,

3925 
size_t
 );

3927 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3928 
krb5_vîify_checksum
 (

3929 
krb5_c⁄ãxt
 ,

3930 
krb5_¸y±o
 ,

3931 
krb5_key_ußge
 ,

3933 
size_t
 ,

3934 
Checksum
 * );

3936 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3937 
krb5_vîify_öô_¸eds
 (

3938 
krb5_c⁄ãxt
 ,

3939 
krb5_¸eds
 * ,

3940 
krb5_¥öcùÆ
 ,

3941 
krb5_keyèb
 ,

3942 
krb5_cˇche
 * ,

3943 
krb5_vîify_öô_¸eds_›t
 * );

3945 
KRB5_LIB_FUNCTION


3946 
krb5_vîify_öô_¸eds_›t_öô
 (
krb5_vîify_öô_¸eds_›t
 * );

3948 
KRB5_LIB_FUNCTION


3949 
krb5_vîify_öô_¸eds_›t_£t_≠_ªq_noÁû
 (

3950 
krb5_vîify_öô_¸eds_›t
 * ,

3953 
KRB5_LIB_FUNCTION


3954 
krb5_vîify_›t_Æloc
 (

3955 
krb5_c⁄ãxt
 ,

3956 
krb5_vîify_›t
 ** );

3958 
KRB5_LIB_FUNCTION


3959 
krb5_vîify_›t_‰ì
 (
krb5_vîify_›t
 * );

3961 
KRB5_LIB_FUNCTION


3962 
krb5_vîify_›t_öô
 (
krb5_vîify_›t
 * );

3964 
KRB5_LIB_FUNCTION


3965 
krb5_vîify_›t_£t_cˇche
 (

3966 
krb5_vîify_›t
 * ,

3967 
krb5_cˇche
 );

3969 
KRB5_LIB_FUNCTION


3970 
krb5_vîify_›t_£t_Êags
 (

3971 
krb5_vîify_›t
 * ,

3974 
KRB5_LIB_FUNCTION


3975 
krb5_vîify_›t_£t_keyèb
 (

3976 
krb5_vîify_›t
 * ,

3977 
krb5_keyèb
 );

3979 
KRB5_LIB_FUNCTION


3980 
krb5_vîify_›t_£t_£cuª
 (

3981 
krb5_vîify_›t
 * ,

3982 
krb5_boﬁón
 );

3984 
KRB5_LIB_FUNCTION


3985 
krb5_vîify_›t_£t_£rvi˚
 (

3986 
krb5_vîify_›t
 * ,

3989 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3990 
krb5_vîify_u£r
 (

3991 
krb5_c⁄ãxt
 ,

3992 
krb5_¥öcùÆ
 ,

3993 
krb5_cˇche
 ,

3995 
krb5_boﬁón
 ,

3998 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


3999 
krb5_vîify_u£r_Ãólm
 (

4000 
krb5_c⁄ãxt
 ,

4001 
krb5_¥öcùÆ
 ,

4002 
krb5_cˇche
 ,

4004 
krb5_boﬁón
 ,

4007 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


4008 
krb5_vîify_u£r_›t
 (

4009 
krb5_c⁄ãxt
 ,

4010 
krb5_¥öcùÆ
 ,

4012 
krb5_vîify_›t
 * );

4014 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


4015 
krb5_vîr
 (

4016 
krb5_c⁄ãxt
 ,

4018 
krb5_îr‹_code
 ,

4020 
va_li°
 )

4021 
__©åibuã__
 ((
n‹ëu∫
, 
f‹m©
 (
¥ötf
, 4, 0)));

4023 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


4024 
krb5_vîrx
 (

4025 
krb5_c⁄ãxt
 ,

4028 
va_li°
 )

4029 
__©åibuã__
 ((
n‹ëu∫
, 
f‹m©
 (
¥ötf
, 3, 0)));

4031 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


4032 
krb5_vlog
 (

4033 
krb5_c⁄ãxt
 ,

4034 
krb5_log_Ácûôy
 * ,

4037 
va_li°
 )

4038 
__©åibuã__
((
f‹m©
 (
¥ötf
, 4, 0)));

4040 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


4041 
krb5_vlog_msg
 (

4042 
krb5_c⁄ãxt
 ,

4043 
krb5_log_Ácûôy
 * ,

4047 
va_li°
 )

4048 
__©åibuã__
((
f‹m©
 (
¥ötf
, 5, 0)));

4050 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


4051 
krb5_v£t_îr‹_°rög
 (

4052 
krb5_c⁄ãxt
 ,

4054 
va_li°
 )

4055 
__©åibuã__
 ((
f‹m©
 (
¥ötf
, 2, 0)));

4057 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


4058 
krb5_vw¨n
 (

4059 
krb5_c⁄ãxt
 ,

4060 
krb5_îr‹_code
 ,

4062 
va_li°
 )

4063 
__©åibuã__
 ((
f‹m©
 (
¥ötf
, 3, 0)));

4065 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


4066 
krb5_vw¨nx
 (

4067 
krb5_c⁄ãxt
 ,

4069 
va_li°
 )

4070 
__©åibuã__
 ((
f‹m©
 (
¥ötf
, 2, 0)));

4072 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


4073 
krb5_w¨n
 (

4074 
krb5_c⁄ãxt
 ,

4075 
krb5_îr‹_code
 ,

4078 
__©åibuã__
 ((
f‹m©
 (
¥ötf
, 3, 4)));

4080 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


4081 
krb5_w¨nx
 (

4082 
krb5_c⁄ãxt
 ,

4085 
__©åibuã__
 ((
f‹m©
 (
¥ötf
, 2, 3)));

4087 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


4088 
krb5_wrôe_mesßge
 (

4089 
krb5_c⁄ãxt
 ,

4090 
krb5_poöãr
 ,

4091 
krb5_d©a
 * );

4093 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


4094 
krb5_wrôe_¥iv_mesßge
 (

4095 
krb5_c⁄ãxt
 ,

4096 
krb5_auth_c⁄ãxt
 ,

4097 
krb5_poöãr
 ,

4098 
krb5_d©a
 * );

4100 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


4101 
krb5_wrôe_ß„_mesßge
 (

4102 
krb5_c⁄ãxt
 ,

4103 
krb5_auth_c⁄ãxt
 ,

4104 
krb5_poöãr
 ,

4105 
krb5_d©a
 * );

4107 
krb5_îr‹_code
 
KRB5_LIB_FUNCTION


4108 
krb5_x‰ì
 (* );

4110 #ifde‡
__˝lu•lus


	@/usr/include/krb5-types.h

6 #i‚de‡
__krb5_ty≥s_h__


7 
	#__krb5_ty≥s_h__


	)

9 
	~<öây≥s.h
>

10 
	~<sys/ty≥s.h
>

11 
	~<sys/sockë.h
>

13 
sockÀn_t
 
	tkrb5_sockÀn_t
;

14 
	~<uni°d.h
>

15 
ssize_t
 
	tkrb5_ssize_t
;

	@/usr/include/krb5_asn1.h

4 #i‚de‡
__krb5_a¢1_h__


5 
	#__krb5_a¢1_h__


	)

7 
	~<°ddef.h
>

8 
	~<time.h
>

10 #i‚de‡
__a¢1_comm⁄_deföôi⁄s__


11 
	#__a¢1_comm⁄_deföôi⁄s__


	)

13 
	sheim_öãgî
 {

14 
size_t
 
	mÀngth
;

15 *
	md©a
;

16 
	m√g©ive
;

17 } 
	theim_öãgî
;

19 
	sheim_o˘ë_°rög
 {

20 
size_t
 
	mÀngth
;

21 *
	md©a
;

22 } 
	theim_o˘ë_°rög
;

24 *
	theim_gíîÆ_°rög
;

26 *
	theim_utf8_°rög
;

28 *
	theim_¥öèbÀ_°rög
;

30 *
	theim_ü5_°rög
;

32 
	sheim_bmp_°rög
 {

33 
size_t
 
	mÀngth
;

34 
uöt16_t
 *
	md©a
;

35 } 
	theim_bmp_°rög
;

37 
	sheim_univîßl_°rög
 {

38 
size_t
 
	mÀngth
;

39 
uöt32_t
 *
	md©a
;

40 } 
	theim_univîßl_°rög
;

42 *
	theim_visibÀ_°rög
;

44 
	sheim_oid
 {

45 
size_t
 
	mÀngth
;

46 *
	mcomp⁄íts
;

47 } 
	theim_oid
;

49 
	sheim_bô_°rög
 {

50 
size_t
 
	mÀngth
;

51 *
	md©a
;

52 } 
	theim_bô_°rög
;

54 
heim_o˘ë_°rög
 
	theim_™y
;

55 
heim_o˘ë_°rög
 
	theim_™y_£t
;

57 
	#ASN1_MALLOC_ENCODE
(
T
, 
B
, 
BL
, 
S
, 
L
, 
R
) \

59 (
BL
Ë
Àngth_
##
	`T
((
S
)); \

60 (
B
Ë
	`mÆloc
((
BL
)); \

61 if((
B
Ë=
NULL
) { \

62 (
R
Ë
ENOMEM
; \

64 (
R
Ë
ícode_
##
	`T
(((*)(
B
)Ë+ (
BL
) - 1, (BL), \

65 (
S
), (
L
)); \

66 if((
R
) != 0) { \

67 
	`‰ì
((
B
)); \

68 (
B
Ë
NULL
; \

71 } 0)

	)

73 
	gunôs
;

94 
	eNAME_TYPE
 {

95 
	mKRB5_NT_UNKNOWN
 = 0,

96 
	mKRB5_NT_PRINCIPAL
 = 1,

97 
	mKRB5_NT_SRV_INST
 = 2,

98 
	mKRB5_NT_SRV_HST
 = 3,

99 
	mKRB5_NT_SRV_XHST
 = 4,

100 
	mKRB5_NT_UID
 = 5,

101 
	mKRB5_NT_X500_PRINCIPAL
 = 6,

102 
	mKRB5_NT_SMTP_NAME
 = 7,

103 
	mKRB5_NT_ENTERPRISE_PRINCIPAL
 = 10,

104 
	mKRB5_NT_ENT_PRINCIPAL_AND_ID
 = -130,

105 
	mKRB5_NT_MS_PRINCIPAL
 = -128,

106 
	mKRB5_NT_MS_PRINCIPAL_AND_ID
 = -129

107 } 
	tNAME_TYPE
;

109 
ícode_NAME_TYPE
(*, 
size_t
, c⁄° 
NAME_TYPE
 *, size_t *);

110 
decode_NAME_TYPE
(c⁄° *, 
size_t
, 
NAME_TYPE
 *, size_t *);

111 
‰ì_NAME_TYPE
 (
NAME_TYPE
 *);

112 
size_t
 
Àngth_NAME_TYPE
(c⁄° 
NAME_TYPE
 *);

113 
c›y_NAME_TYPE
 (c⁄° 
NAME_TYPE
 *, NAME_TYPE *);

131 
	eMESSAGE_TYPE
 {

132 
	mkrb_as_ªq
 = 10,

133 
	mkrb_as_ªp
 = 11,

134 
	mkrb_tgs_ªq
 = 12,

135 
	mkrb_tgs_ªp
 = 13,

136 
	mkrb_≠_ªq
 = 14,

137 
	mkrb_≠_ªp
 = 15,

138 
	mkrb_ß„
 = 20,

139 
	mkrb_¥iv
 = 21,

140 
	mkrb_¸ed
 = 22,

141 
	mkrb_îr‹
 = 30

142 } 
	tMESSAGE_TYPE
;

144 
ícode_MESSAGE_TYPE
(*, 
size_t
, c⁄° 
MESSAGE_TYPE
 *, size_t *);

145 
decode_MESSAGE_TYPE
(c⁄° *, 
size_t
, 
MESSAGE_TYPE
 *, size_t *);

146 
‰ì_MESSAGE_TYPE
 (
MESSAGE_TYPE
 *);

147 
size_t
 
Àngth_MESSAGE_TYPE
(c⁄° 
MESSAGE_TYPE
 *);

148 
c›y_MESSAGE_TYPE
 (c⁄° 
MESSAGE_TYPE
 *, MESSAGE_TYPE *);

193 
	ePADATA_TYPE
 {

194 
	mKRB5_PADATA_NONE
 = 0,

195 
	mKRB5_PADATA_TGS_REQ
 = 1,

196 
	mKRB5_PADATA_AP_REQ
 = 1,

197 
	mKRB5_PADATA_ENC_TIMESTAMP
 = 2,

198 
	mKRB5_PADATA_PW_SALT
 = 3,

199 
	mKRB5_PADATA_ENC_UNIX_TIME
 = 5,

200 
	mKRB5_PADATA_SANDIA_SECUREID
 = 6,

201 
	mKRB5_PADATA_SESAME
 = 7,

202 
	mKRB5_PADATA_OSF_DCE
 = 8,

203 
	mKRB5_PADATA_CYBERSAFE_SECUREID
 = 9,

204 
	mKRB5_PADATA_AFS3_SALT
 = 10,

205 
	mKRB5_PADATA_ETYPE_INFO
 = 11,

206 
	mKRB5_PADATA_SAM_CHALLENGE
 = 12,

207 
	mKRB5_PADATA_SAM_RESPONSE
 = 13,

208 
	mKRB5_PADATA_PK_AS_REQ_19
 = 14,

209 
	mKRB5_PADATA_PK_AS_REP_19
 = 15,

210 
	mKRB5_PADATA_PK_AS_REQ_WIN
 = 15,

211 
	mKRB5_PADATA_PK_AS_REQ
 = 16,

212 
	mKRB5_PADATA_PK_AS_REP
 = 17,

213 
	mKRB5_PADATA_PA_PK_OCSP_RESPONSE
 = 18,

214 
	mKRB5_PADATA_ETYPE_INFO2
 = 19,

215 
	mKRB5_PADATA_USE_SPECIFIED_KVNO
 = 20,

216 
	mKRB5_PADATA_SVR_REFERRAL_INFO
 = 20,

217 
	mKRB5_PADATA_SAM_REDIRECT
 = 21,

218 
	mKRB5_PADATA_GET_FROM_TYPED_DATA
 = 22,

219 
	mKRB5_PADATA_SAM_ETYPE_INFO
 = 23,

220 
	mKRB5_PADATA_SERVER_REFERRAL
 = 25,

221 
	mKRB5_PADATA_TD_KRB_PRINCIPAL
 = 102,

222 
	mKRB5_PADATA_PK_TD_TRUSTED_CERTIFIERS
 = 104,

223 
	mKRB5_PADATA_PK_TD_CERTIFICATE_INDEX
 = 105,

224 
	mKRB5_PADATA_TD_APP_DEFINED_ERROR
 = 106,

225 
	mKRB5_PADATA_TD_REQ_NONCE
 = 107,

226 
	mKRB5_PADATA_TD_REQ_SEQ
 = 108,

227 
	mKRB5_PADATA_PA_PAC_REQUEST
 = 128,

228 
	mKRB5_PADATA_S4U2SELF
 = 129,

229 
	mKRB5_PADATA_PK_AS_09_BINDING
 = 132,

230 
	mKRB5_PADATA_CLIENT_CANONICALIZED
 = 133

231 } 
	tPADATA_TYPE
;

233 
ícode_PADATA_TYPE
(*, 
size_t
, c⁄° 
PADATA_TYPE
 *, size_t *);

234 
decode_PADATA_TYPE
(c⁄° *, 
size_t
, 
PADATA_TYPE
 *, size_t *);

235 
‰ì_PADATA_TYPE
 (
PADATA_TYPE
 *);

236 
size_t
 
Àngth_PADATA_TYPE
(c⁄° 
PADATA_TYPE
 *);

237 
c›y_PADATA_TYPE
 (c⁄° 
PADATA_TYPE
 *, PADATA_TYPE *);

260 
	eAUTHDATA_TYPE
 {

261 
	mKRB5_AUTHDATA_IF_RELEVANT
 = 1,

262 
	mKRB5_AUTHDATA_INTENDED_FOR_SERVER
 = 2,

263 
	mKRB5_AUTHDATA_INTENDED_FOR_APPLICATION_CLASS
 = 3,

264 
	mKRB5_AUTHDATA_KDC_ISSUED
 = 4,

265 
	mKRB5_AUTHDATA_AND_OR
 = 5,

266 
	mKRB5_AUTHDATA_MANDATORY_TICKET_EXTENSIONS
 = 6,

267 
	mKRB5_AUTHDATA_IN_TICKET_EXTENSIONS
 = 7,

268 
	mKRB5_AUTHDATA_MANDATORY_FOR_KDC
 = 8,

269 
	mKRB5_AUTHDATA_INITIAL_VERIFIED_CAS
 = 9,

270 
	mKRB5_AUTHDATA_OSF_DCE
 = 64,

271 
	mKRB5_AUTHDATA_SESAME
 = 65,

272 
	mKRB5_AUTHDATA_OSF_DCE_PKI_CERTID
 = 66,

273 
	mKRB5_AUTHDATA_WIN2K_PAC
 = 128,

274 
	mKRB5_AUTHDATA_GSS_API_ETYPE_NEGOTIATION
 = 129,

275 
	mKRB5_AUTHDATA_SIGNTICKET
 = -17

276 } 
	tAUTHDATA_TYPE
;

278 
ícode_AUTHDATA_TYPE
(*, 
size_t
, c⁄° 
AUTHDATA_TYPE
 *, size_t *);

279 
decode_AUTHDATA_TYPE
(c⁄° *, 
size_t
, 
AUTHDATA_TYPE
 *, size_t *);

280 
‰ì_AUTHDATA_TYPE
 (
AUTHDATA_TYPE
 *);

281 
size_t
 
Àngth_AUTHDATA_TYPE
(c⁄° 
AUTHDATA_TYPE
 *);

282 
c›y_AUTHDATA_TYPE
 (c⁄° 
AUTHDATA_TYPE
 *, AUTHDATA_TYPE *);

308 
	eCKSUMTYPE
 {

309 
	mCKSUMTYPE_NONE
 = 0,

310 
	mCKSUMTYPE_CRC32
 = 1,

311 
	mCKSUMTYPE_RSA_MD4
 = 2,

312 
	mCKSUMTYPE_RSA_MD4_DES
 = 3,

313 
	mCKSUMTYPE_DES_MAC
 = 4,

314 
	mCKSUMTYPE_DES_MAC_K
 = 5,

315 
	mCKSUMTYPE_RSA_MD4_DES_K
 = 6,

316 
	mCKSUMTYPE_RSA_MD5
 = 7,

317 
	mCKSUMTYPE_RSA_MD5_DES
 = 8,

318 
	mCKSUMTYPE_RSA_MD5_DES3
 = 9,

319 
	mCKSUMTYPE_SHA1_OTHER
 = 10,

320 
	mCKSUMTYPE_HMAC_SHA1_DES3
 = 12,

321 
	mCKSUMTYPE_SHA1
 = 14,

322 
	mCKSUMTYPE_HMAC_SHA1_96_AES_128
 = 15,

323 
	mCKSUMTYPE_HMAC_SHA1_96_AES_256
 = 16,

324 
	mCKSUMTYPE_GSSAPI
 = 32771,

325 
	mCKSUMTYPE_HMAC_MD5
 = -138,

326 
	mCKSUMTYPE_HMAC_MD5_ENC
 = -1138

327 } 
	tCKSUMTYPE
;

329 
ícode_CKSUMTYPE
(*, 
size_t
, c⁄° 
CKSUMTYPE
 *, size_t *);

330 
decode_CKSUMTYPE
(c⁄° *, 
size_t
, 
CKSUMTYPE
 *, size_t *);

331 
‰ì_CKSUMTYPE
 (
CKSUMTYPE
 *);

332 
size_t
 
Àngth_CKSUMTYPE
(c⁄° 
CKSUMTYPE
 *);

333 
c›y_CKSUMTYPE
 (c⁄° 
CKSUMTYPE
 *, CKSUMTYPE *);

365 
	eENCTYPE
 {

366 
	mETYPE_NULL
 = 0,

367 
	mETYPE_DES_CBC_CRC
 = 1,

368 
	mETYPE_DES_CBC_MD4
 = 2,

369 
	mETYPE_DES_CBC_MD5
 = 3,

370 
	mETYPE_DES3_CBC_MD5
 = 5,

371 
	mETYPE_OLD_DES3_CBC_SHA1
 = 7,

372 
	mETYPE_SIGN_DSA_GENERATE
 = 8,

373 
	mETYPE_ENCRYPT_RSA_PRIV
 = 9,

374 
	mETYPE_ENCRYPT_RSA_PUB
 = 10,

375 
	mETYPE_DES3_CBC_SHA1
 = 16,

376 
	mETYPE_AES128_CTS_HMAC_SHA1_96
 = 17,

377 
	mETYPE_AES256_CTS_HMAC_SHA1_96
 = 18,

378 
	mETYPE_ARCFOUR_HMAC_MD5
 = 23,

379 
	mETYPE_ARCFOUR_HMAC_MD5_56
 = 24,

380 
	mETYPE_ENCTYPE_PK_CROSS
 = 48,

381 
	mETYPE_ARCFOUR_MD4
 = -128,

382 
	mETYPE_ARCFOUR_HMAC_OLD
 = -133,

383 
	mETYPE_ARCFOUR_HMAC_OLD_EXP
 = -135,

384 
	mETYPE_DES_CBC_NONE
 = -4096,

385 
	mETYPE_DES3_CBC_NONE
 = -4097,

386 
	mETYPE_DES_CFB64_NONE
 = -4098,

387 
	mETYPE_DES_PCBC_NONE
 = -4099,

388 
	mETYPE_DIGEST_MD5_NONE
 = -4100,

389 
	mETYPE_CRAM_MD5_NONE
 = -4101

390 } 
	tENCTYPE
;

392 
ícode_ENCTYPE
(*, 
size_t
, c⁄° 
ENCTYPE
 *, size_t *);

393 
decode_ENCTYPE
(c⁄° *, 
size_t
, 
ENCTYPE
 *, size_t *);

394 
‰ì_ENCTYPE
 (
ENCTYPE
 *);

395 
size_t
 
Àngth_ENCTYPE
(c⁄° 
ENCTYPE
 *);

396 
c›y_ENCTYPE
 (c⁄° 
ENCTYPE
 *, ENCTYPE *);

403 
	tkrb5uöt32
;

405 
ícode_krb5uöt32
(*, 
size_t
, c⁄° 
krb5uöt32
 *, size_t *);

406 
decode_krb5uöt32
(c⁄° *, 
size_t
, 
krb5uöt32
 *, size_t *);

407 
‰ì_krb5uöt32
 (
krb5uöt32
 *);

408 
size_t
 
Àngth_krb5uöt32
(c⁄° 
krb5uöt32
 *);

409 
c›y_krb5uöt32
 (c⁄° 
krb5uöt32
 *, krb5uint32 *);

416 
	tkrb5öt32
;

418 
ícode_krb5öt32
(*, 
size_t
, c⁄° 
krb5öt32
 *, size_t *);

419 
decode_krb5öt32
(c⁄° *, 
size_t
, 
krb5öt32
 *, size_t *);

420 
‰ì_krb5öt32
 (
krb5öt32
 *);

421 
size_t
 
Àngth_krb5öt32
(c⁄° 
krb5öt32
 *);

422 
c›y_krb5öt32
 (c⁄° 
krb5öt32
 *, krb5int32 *);

429 
heim_gíîÆ_°rög
 
	tKîbîosSåög
;

431 
ícode_KîbîosSåög
(*, 
size_t
, c⁄° 
KîbîosSåög
 *, size_t *);

432 
decode_KîbîosSåög
(c⁄° *, 
size_t
, 
KîbîosSåög
 *, size_t *);

433 
‰ì_KîbîosSåög
 (
KîbîosSåög
 *);

434 
size_t
 
Àngth_KîbîosSåög
(c⁄° 
KîbîosSåög
 *);

435 
c›y_KîbîosSåög
 (c⁄° 
KîbîosSåög
 *, KerberosString *);

442 
heim_gíîÆ_°rög
 
	tRólm
;

444 
ícode_Rólm
(*, 
size_t
, c⁄° 
Rólm
 *, size_t *);

445 
decode_Rólm
(c⁄° *, 
size_t
, 
Rólm
 *, size_t *);

446 
‰ì_Rólm
 (
Rólm
 *);

447 
size_t
 
Àngth_Rólm
(c⁄° 
Rólm
 *);

448 
c›y_Rólm
 (c⁄° 
Rólm
 *, Realm *);

458 
	sPröcùÆName
 {

459 
NAME_TYPE
 
	m«me_ty≥
;

461 
	mÀn
;

462 
heim_gíîÆ_°rög
 *
	mvÆ
;

463 } 
	m«me_°rög
;

464 } 
	tPröcùÆName
;

466 
ícode_PröcùÆName
(*, 
size_t
, c⁄° 
PröcùÆName
 *, size_t *);

467 
decode_PröcùÆName
(c⁄° *, 
size_t
, 
PröcùÆName
 *, size_t *);

468 
‰ì_PröcùÆName
 (
PröcùÆName
 *);

469 
size_t
 
Àngth_PröcùÆName
(c⁄° 
PröcùÆName
 *);

470 
c›y_PröcùÆName
 (c⁄° 
PröcùÆName
 *, PrincipalName *);

480 
	sPröcùÆ
 {

481 
PröcùÆName
 
	m«me
;

482 
Rólm
 
	mªÆm
;

483 } 
	tPröcùÆ
;

485 
ícode_PröcùÆ
(*, 
size_t
, c⁄° 
PröcùÆ
 *, size_t *);

486 
decode_PröcùÆ
(c⁄° *, 
size_t
, 
PröcùÆ
 *, size_t *);

487 
‰ì_PröcùÆ
 (
PröcùÆ
 *);

488 
size_t
 
Àngth_PröcùÆ
(c⁄° 
PröcùÆ
 *);

489 
c›y_PröcùÆ
 (c⁄° 
PröcùÆ
 *, Principal *);

499 
	sHo°Addªss
 {

500 
krb5öt32
 
	maddr_ty≥
;

501 
heim_o˘ë_°rög
 
	maddªss
;

502 } 
	tHo°Addªss
;

504 
ícode_Ho°Addªss
(*, 
size_t
, c⁄° 
Ho°Addªss
 *, size_t *);

505 
decode_Ho°Addªss
(c⁄° *, 
size_t
, 
Ho°Addªss
 *, size_t *);

506 
‰ì_Ho°Addªss
 (
Ho°Addªss
 *);

507 
size_t
 
Àngth_Ho°Addªss
(c⁄° 
Ho°Addªss
 *);

508 
c›y_Ho°Addªss
 (c⁄° 
Ho°Addªss
 *, HostAddress *);

515 
	sHo°Addªs£s
 {

516 
	mÀn
;

517 
Ho°Addªss
 *
	mvÆ
;

518 } 
	tHo°Addªs£s
;

520 
ícode_Ho°Addªs£s
(*, 
size_t
, c⁄° 
Ho°Addªs£s
 *, size_t *);

521 
decode_Ho°Addªs£s
(c⁄° *, 
size_t
, 
Ho°Addªs£s
 *, size_t *);

522 
‰ì_Ho°Addªs£s
 (
Ho°Addªs£s
 *);

523 
size_t
 
Àngth_Ho°Addªs£s
(c⁄° 
Ho°Addªs£s
 *);

524 
c›y_Ho°Addªs£s
 (c⁄° 
Ho°Addªs£s
 *, HostAddresses *);

531 
time_t
 
	tKîbîosTime
;

533 
ícode_KîbîosTime
(*, 
size_t
, c⁄° 
KîbîosTime
 *, size_t *);

534 
decode_KîbîosTime
(c⁄° *, 
size_t
, 
KîbîosTime
 *, size_t *);

535 
‰ì_KîbîosTime
 (
KîbîosTime
 *);

536 
size_t
 
Àngth_KîbîosTime
(c⁄° 
KîbîosTime
 *);

537 
c›y_KîbîosTime
 (c⁄° 
KîbîosTime
 *, KerberosTime *);

547 
	sAuth‹iz©i⁄D©aEÀmít
 {

548 
krb5öt32
 
	mad_ty≥
;

549 
heim_o˘ë_°rög
 
	mad_d©a
;

550 } 
	tAuth‹iz©i⁄D©aEÀmít
;

552 
ícode_Auth‹iz©i⁄D©aEÀmít
(*, 
size_t
, c⁄° 
Auth‹iz©i⁄D©aEÀmít
 *, size_t *);

553 
decode_Auth‹iz©i⁄D©aEÀmít
(c⁄° *, 
size_t
, 
Auth‹iz©i⁄D©aEÀmít
 *, size_t *);

554 
‰ì_Auth‹iz©i⁄D©aEÀmít
 (
Auth‹iz©i⁄D©aEÀmít
 *);

555 
size_t
 
Àngth_Auth‹iz©i⁄D©aEÀmít
(c⁄° 
Auth‹iz©i⁄D©aEÀmít
 *);

556 
c›y_Auth‹iz©i⁄D©aEÀmít
 (c⁄° 
Auth‹iz©i⁄D©aEÀmít
 *, AuthorizationDataElement *);

563 
	sAuth‹iz©i⁄D©a
 {

564 
	mÀn
;

565 
Auth‹iz©i⁄D©aEÀmít
 *
	mvÆ
;

566 } 
	tAuth‹iz©i⁄D©a
;

568 
ícode_Auth‹iz©i⁄D©a
(*, 
size_t
, c⁄° 
Auth‹iz©i⁄D©a
 *, size_t *);

569 
decode_Auth‹iz©i⁄D©a
(c⁄° *, 
size_t
, 
Auth‹iz©i⁄D©a
 *, size_t *);

570 
‰ì_Auth‹iz©i⁄D©a
 (
Auth‹iz©i⁄D©a
 *);

571 
size_t
 
Àngth_Auth‹iz©i⁄D©a
(c⁄° 
Auth‹iz©i⁄D©a
 *);

572 
c›y_Auth‹iz©i⁄D©a
 (c⁄° 
Auth‹iz©i⁄D©a
 *, AuthorizationData *);

573 
add_Auth‹iz©i⁄D©a
 (
Auth‹iz©i⁄D©a
 *, c⁄° 
Auth‹iz©i⁄D©aEÀmít
 *);

574 
ªmove_Auth‹iz©i⁄D©a
 (
Auth‹iz©i⁄D©a
 *, );

585 
	sAPO±i⁄s
 {

586 
	mª£rved
:1;

587 
	mu£_£ssi⁄_key
:1;

588 
	mmutuÆ_ªquúed
:1;

589 } 
	tAPO±i⁄s
;

592 
ícode_APO±i⁄s
(*, 
size_t
, c⁄° 
APO±i⁄s
 *, size_t *);

593 
decode_APO±i⁄s
(c⁄° *, 
size_t
, 
APO±i⁄s
 *, size_t *);

594 
‰ì_APO±i⁄s
 (
APO±i⁄s
 *);

595 
size_t
 
Àngth_APO±i⁄s
(c⁄° 
APO±i⁄s
 *);

596 
c›y_APO±i⁄s
 (c⁄° 
APO±i⁄s
 *, APOptions *);

597 
APO±i⁄s2öt
(
APO±i⁄s
);

598 
APO±i⁄s
 
öt2APO±i⁄s
();

599 #ifde‡
__PARSE_UNITS_H__


600 c⁄° 
unôs
 * 
a¢1_APO±i⁄s_unôs
();

624 
	sTickëFœgs
 {

625 
	mª£rved
:1;

626 
	mf‹w¨dabÀ
:1;

627 
	mf‹w¨ded
:1;

628 
	m¥oxübÀ
:1;

629 
	m¥oxy
:1;

630 
	mmay_po°d©e
:1;

631 
	mpo°d©ed
:1;

632 
	mövÆid
:1;

633 
	mª√wabÀ
:1;

634 
	möôül
:1;

635 
	m¥e_authít
:1;

636 
	mhw_authít
:1;

637 
	må™sôed_pﬁicy_checked
:1;

638 
	mok_as_dñeg©e
:1;

639 
	m™⁄ymous
:1;

640 } 
	tTickëFœgs
;

643 
ícode_TickëFœgs
(*, 
size_t
, c⁄° 
TickëFœgs
 *, size_t *);

644 
decode_TickëFœgs
(c⁄° *, 
size_t
, 
TickëFœgs
 *, size_t *);

645 
‰ì_TickëFœgs
 (
TickëFœgs
 *);

646 
size_t
 
Àngth_TickëFœgs
(c⁄° 
TickëFœgs
 *);

647 
c›y_TickëFœgs
 (c⁄° 
TickëFœgs
 *, TicketFlags *);

648 
TickëFœgs2öt
(
TickëFœgs
);

649 
TickëFœgs
 
öt2TickëFœgs
();

650 #ifde‡
__PARSE_UNITS_H__


651 c⁄° 
unôs
 * 
a¢1_TickëFœgs_unôs
();

680 
	sKDCO±i⁄s
 {

681 
	mª£rved
:1;

682 
	mf‹w¨dabÀ
:1;

683 
	mf‹w¨ded
:1;

684 
	m¥oxübÀ
:1;

685 
	m¥oxy
:1;

686 
	mÆlow_po°d©e
:1;

687 
	mpo°d©ed
:1;

688 
	munu£d7
:1;

689 
	mª√wabÀ
:1;

690 
	munu£d9
:1;

691 
	munu£d10
:1;

692 
	munu£d11
:1;

693 
	mªque°_™⁄ymous
:1;

694 
	mˇn⁄iˇlize
:1;

695 
	mc⁄°øöed_dñeg©i⁄
:1;

696 
	mdißbÀ_å™sôed_check
:1;

697 
	mª√wabÀ_ok
:1;

698 
	míc_tkt_ö_skey
:1;

699 
	mª√w
:1;

700 
	mvÆid©e
:1;

701 } 
	tKDCO±i⁄s
;

704 
ícode_KDCO±i⁄s
(*, 
size_t
, c⁄° 
KDCO±i⁄s
 *, size_t *);

705 
decode_KDCO±i⁄s
(c⁄° *, 
size_t
, 
KDCO±i⁄s
 *, size_t *);

706 
‰ì_KDCO±i⁄s
 (
KDCO±i⁄s
 *);

707 
size_t
 
Àngth_KDCO±i⁄s
(c⁄° 
KDCO±i⁄s
 *);

708 
c›y_KDCO±i⁄s
 (c⁄° 
KDCO±i⁄s
 *, KDCOptions *);

709 
KDCO±i⁄s2öt
(
KDCO±i⁄s
);

710 
KDCO±i⁄s
 
öt2KDCO±i⁄s
();

711 #ifde‡
__PARSE_UNITS_H__


712 c⁄° 
unôs
 * 
a¢1_KDCO±i⁄s_unôs
();

729 
	eLR_TYPE
 {

730 
	mLR_NONE
 = 0,

731 
	mLR_INITIAL_TGT
 = 1,

732 
	mLR_INITIAL
 = 2,

733 
	mLR_ISSUE_USE_TGT
 = 3,

734 
	mLR_RENEWAL
 = 4,

735 
	mLR_REQUEST
 = 5,

736 
	mLR_PW_EXPTIME
 = 6,

737 
	mLR_ACCT_EXPTIME
 = 7

738 } 
	tLR_TYPE
;

740 
ícode_LR_TYPE
(*, 
size_t
, c⁄° 
LR_TYPE
 *, size_t *);

741 
decode_LR_TYPE
(c⁄° *, 
size_t
, 
LR_TYPE
 *, size_t *);

742 
‰ì_LR_TYPE
 (
LR_TYPE
 *);

743 
size_t
 
Àngth_LR_TYPE
(c⁄° 
LR_TYPE
 *);

744 
c›y_LR_TYPE
 (c⁄° 
LR_TYPE
 *, LR_TYPE *);

754 
	sLa°Req
 {

755 
	mÀn
;

757 
LR_TYPE
 
	mÃ_ty≥
;

758 
KîbîosTime
 
	mÃ_vÆue
;

759 } *
	mvÆ
;

760 } 
	tLa°Req
;

762 
ícode_La°Req
(*, 
size_t
, c⁄° 
La°Req
 *, size_t *);

763 
decode_La°Req
(c⁄° *, 
size_t
, 
La°Req
 *, size_t *);

764 
‰ì_La°Req
 (
La°Req
 *);

765 
size_t
 
Àngth_La°Req
(c⁄° 
La°Req
 *);

766 
c›y_La°Req
 (c⁄° 
La°Req
 *, LastReq *);

777 
	sEn¸y±edD©a
 {

778 
ENCTYPE
 
	mëy≥
;

779 
krb5öt32
 *
	mkvno
;

780 
heim_o˘ë_°rög
 
	mcùhî
;

781 } 
	tEn¸y±edD©a
;

783 
ícode_En¸y±edD©a
(*, 
size_t
, c⁄° 
En¸y±edD©a
 *, size_t *);

784 
decode_En¸y±edD©a
(c⁄° *, 
size_t
, 
En¸y±edD©a
 *, size_t *);

785 
‰ì_En¸y±edD©a
 (
En¸y±edD©a
 *);

786 
size_t
 
Àngth_En¸y±edD©a
(c⁄° 
En¸y±edD©a
 *);

787 
c›y_En¸y±edD©a
 (c⁄° 
En¸y±edD©a
 *, EncryptedData *);

797 
	sEn¸y±i⁄Key
 {

798 
krb5öt32
 
	mkeyty≥
;

799 
heim_o˘ë_°rög
 
	mkeyvÆue
;

800 } 
	tEn¸y±i⁄Key
;

802 
ícode_En¸y±i⁄Key
(*, 
size_t
, c⁄° 
En¸y±i⁄Key
 *, size_t *);

803 
decode_En¸y±i⁄Key
(c⁄° *, 
size_t
, 
En¸y±i⁄Key
 *, size_t *);

804 
‰ì_En¸y±i⁄Key
 (
En¸y±i⁄Key
 *);

805 
size_t
 
Àngth_En¸y±i⁄Key
(c⁄° 
En¸y±i⁄Key
 *);

806 
c›y_En¸y±i⁄Key
 (c⁄° 
En¸y±i⁄Key
 *, EncryptionKey *);

816 
	sTønsôedEncodög
 {

817 
krb5öt32
 
	må_ty≥
;

818 
heim_o˘ë_°rög
 
	mc⁄ã¡s
;

819 } 
	tTønsôedEncodög
;

821 
ícode_TønsôedEncodög
(*, 
size_t
, c⁄° 
TønsôedEncodög
 *, size_t *);

822 
decode_TønsôedEncodög
(c⁄° *, 
size_t
, 
TønsôedEncodög
 *, size_t *);

823 
‰ì_TønsôedEncodög
 (
TønsôedEncodög
 *);

824 
size_t
 
Àngth_TønsôedEncodög
(c⁄° 
TønsôedEncodög
 *);

825 
c›y_TønsôedEncodög
 (c⁄° 
TønsôedEncodög
 *, TransitedEncoding *);

837 
	sTickë
 {

838 
krb5öt32
 
	mtkt_vno
;

839 
Rólm
 
	mªÆm
;

840 
PröcùÆName
 
	m¢ame
;

841 
En¸y±edD©a
 
	míc_∑π
;

842 } 
	tTickë
;

844 
ícode_Tickë
(*, 
size_t
, c⁄° 
Tickë
 *, size_t *);

845 
decode_Tickë
(c⁄° *, 
size_t
, 
Tickë
 *, size_t *);

846 
‰ì_Tickë
 (
Tickë
 *);

847 
size_t
 
Àngth_Tickë
(c⁄° 
Tickë
 *);

848 
c›y_Tickë
 (c⁄° 
Tickë
 *, Ticket *);

867 
	sEncTickëP¨t
 {

868 
TickëFœgs
 
	mÊags
;

869 
En¸y±i⁄Key
 
	mkey
;

870 
Rólm
 
	m¸ólm
;

871 
PröcùÆName
 
	m˙ame
;

872 
TønsôedEncodög
 
	må™sôed
;

873 
KîbîosTime
 
	mauthtime
;

874 
KîbîosTime
 *
	m°¨âime
;

875 
KîbîosTime
 
	mídtime
;

876 
KîbîosTime
 *
	mª√w_tûl
;

877 
Ho°Addªs£s
 *
	mˇddr
;

878 
Auth‹iz©i⁄D©a
 *
	mauth‹iz©i⁄_d©a
;

879 } 
	tEncTickëP¨t
;

881 
ícode_EncTickëP¨t
(*, 
size_t
, c⁄° 
EncTickëP¨t
 *, size_t *);

882 
decode_EncTickëP¨t
(c⁄° *, 
size_t
, 
EncTickëP¨t
 *, size_t *);

883 
‰ì_EncTickëP¨t
 (
EncTickëP¨t
 *);

884 
size_t
 
Àngth_EncTickëP¨t
(c⁄° 
EncTickëP¨t
 *);

885 
c›y_EncTickëP¨t
 (c⁄° 
EncTickëP¨t
 *, EncTicketPart *);

895 
	sChecksum
 {

896 
CKSUMTYPE
 
	mcksumty≥
;

897 
heim_o˘ë_°rög
 
	mchecksum
;

898 } 
	tChecksum
;

900 
ícode_Checksum
(*, 
size_t
, c⁄° 
Checksum
 *, size_t *);

901 
decode_Checksum
(c⁄° *, 
size_t
, 
Checksum
 *, size_t *);

902 
‰ì_Checksum
 (
Checksum
 *);

903 
size_t
 
Àngth_Checksum
(c⁄° 
Checksum
 *);

904 
c›y_Checksum
 (c⁄° 
Checksum
 *, Checksum *);

921 
	sAuthítiˇt‹
 {

922 
krb5öt32
 
	mauthítiˇt‹_vno
;

923 
Rólm
 
	m¸ólm
;

924 
PröcùÆName
 
	m˙ame
;

925 
Checksum
 *
	mcksum
;

926 
krb5öt32
 
	mcu£c
;

927 
KîbîosTime
 
	m˘ime
;

928 
En¸y±i⁄Key
 *
	msubkey
;

929 
krb5uöt32
 *
	m£q_numbî
;

930 
Auth‹iz©i⁄D©a
 *
	mauth‹iz©i⁄_d©a
;

931 } 
	tAuthítiˇt‹
;

933 
ícode_Authítiˇt‹
(*, 
size_t
, c⁄° 
Authítiˇt‹
 *, size_t *);

934 
decode_Authítiˇt‹
(c⁄° *, 
size_t
, 
Authítiˇt‹
 *, size_t *);

935 
‰ì_Authítiˇt‹
 (
Authítiˇt‹
 *);

936 
size_t
 
Àngth_Authítiˇt‹
(c⁄° 
Authítiˇt‹
 *);

937 
c›y_Authítiˇt‹
 (c⁄° 
Authítiˇt‹
 *, Authenticator *);

947 
	sPA_DATA
 {

948 
PADATA_TYPE
 
	m∑d©a_ty≥
;

949 
heim_o˘ë_°rög
 
	m∑d©a_vÆue
;

950 } 
	tPA_DATA
;

952 
ícode_PA_DATA
(*, 
size_t
, c⁄° 
PA_DATA
 *, size_t *);

953 
decode_PA_DATA
(c⁄° *, 
size_t
, 
PA_DATA
 *, size_t *);

954 
‰ì_PA_DATA
 (
PA_DATA
 *);

955 
size_t
 
Àngth_PA_DATA
(c⁄° 
PA_DATA
 *);

956 
c›y_PA_DATA
 (c⁄° 
PA_DATA
 *, PA_DATA *);

967 
	sETYPE_INFO_ENTRY
 {

968 
ENCTYPE
 
	mëy≥
;

969 
heim_o˘ë_°rög
 *
	mß…
;

970 
krb5öt32
 *
	mß…ty≥
;

971 } 
	tETYPE_INFO_ENTRY
;

973 
ícode_ETYPE_INFO_ENTRY
(*, 
size_t
, c⁄° 
ETYPE_INFO_ENTRY
 *, size_t *);

974 
decode_ETYPE_INFO_ENTRY
(c⁄° *, 
size_t
, 
ETYPE_INFO_ENTRY
 *, size_t *);

975 
‰ì_ETYPE_INFO_ENTRY
 (
ETYPE_INFO_ENTRY
 *);

976 
size_t
 
Àngth_ETYPE_INFO_ENTRY
(c⁄° 
ETYPE_INFO_ENTRY
 *);

977 
c›y_ETYPE_INFO_ENTRY
 (c⁄° 
ETYPE_INFO_ENTRY
 *, ETYPE_INFO_ENTRY *);

984 
	sETYPE_INFO
 {

985 
	mÀn
;

986 
ETYPE_INFO_ENTRY
 *
	mvÆ
;

987 } 
	tETYPE_INFO
;

989 
ícode_ETYPE_INFO
(*, 
size_t
, c⁄° 
ETYPE_INFO
 *, size_t *);

990 
decode_ETYPE_INFO
(c⁄° *, 
size_t
, 
ETYPE_INFO
 *, size_t *);

991 
‰ì_ETYPE_INFO
 (
ETYPE_INFO
 *);

992 
size_t
 
Àngth_ETYPE_INFO
(c⁄° 
ETYPE_INFO
 *);

993 
c›y_ETYPE_INFO
 (c⁄° 
ETYPE_INFO
 *, ETYPE_INFO *);

994 
add_ETYPE_INFO
 (
ETYPE_INFO
 *, c⁄° 
ETYPE_INFO_ENTRY
 *);

995 
ªmove_ETYPE_INFO
 (
ETYPE_INFO
 *, );

1006 
	sETYPE_INFO2_ENTRY
 {

1007 
ENCTYPE
 
	mëy≥
;

1008 
KîbîosSåög
 *
	mß…
;

1009 
heim_o˘ë_°rög
 *
	ms2k∑øms
;

1010 } 
	tETYPE_INFO2_ENTRY
;

1012 
ícode_ETYPE_INFO2_ENTRY
(*, 
size_t
, c⁄° 
ETYPE_INFO2_ENTRY
 *, size_t *);

1013 
decode_ETYPE_INFO2_ENTRY
(c⁄° *, 
size_t
, 
ETYPE_INFO2_ENTRY
 *, size_t *);

1014 
‰ì_ETYPE_INFO2_ENTRY
 (
ETYPE_INFO2_ENTRY
 *);

1015 
size_t
 
Àngth_ETYPE_INFO2_ENTRY
(c⁄° 
ETYPE_INFO2_ENTRY
 *);

1016 
c›y_ETYPE_INFO2_ENTRY
 (c⁄° 
ETYPE_INFO2_ENTRY
 *, ETYPE_INFO2_ENTRY *);

1023 
	sETYPE_INFO2
 {

1024 
	mÀn
;

1025 
ETYPE_INFO2_ENTRY
 *
	mvÆ
;

1026 } 
	tETYPE_INFO2
;

1028 
ícode_ETYPE_INFO2
(*, 
size_t
, c⁄° 
ETYPE_INFO2
 *, size_t *);

1029 
decode_ETYPE_INFO2
(c⁄° *, 
size_t
, 
ETYPE_INFO2
 *, size_t *);

1030 
‰ì_ETYPE_INFO2
 (
ETYPE_INFO2
 *);

1031 
size_t
 
Àngth_ETYPE_INFO2
(c⁄° 
ETYPE_INFO2
 *);

1032 
c›y_ETYPE_INFO2
 (c⁄° 
ETYPE_INFO2
 *, ETYPE_INFO2 *);

1033 
add_ETYPE_INFO2
 (
ETYPE_INFO2
 *, c⁄° 
ETYPE_INFO2_ENTRY
 *);

1034 
ªmove_ETYPE_INFO2
 (
ETYPE_INFO2
 *, );

1041 
	sMETHOD_DATA
 {

1042 
	mÀn
;

1043 
PA_DATA
 *
	mvÆ
;

1044 } 
	tMETHOD_DATA
;

1046 
ícode_METHOD_DATA
(*, 
size_t
, c⁄° 
METHOD_DATA
 *, size_t *);

1047 
decode_METHOD_DATA
(c⁄° *, 
size_t
, 
METHOD_DATA
 *, size_t *);

1048 
‰ì_METHOD_DATA
 (
METHOD_DATA
 *);

1049 
size_t
 
Àngth_METHOD_DATA
(c⁄° 
METHOD_DATA
 *);

1050 
c›y_METHOD_DATA
 (c⁄° 
METHOD_DATA
 *, METHOD_DATA *);

1051 
add_METHOD_DATA
 (
METHOD_DATA
 *, c⁄° 
PA_DATA
 *);

1052 
ªmove_METHOD_DATA
 (
METHOD_DATA
 *, );

1062 
	sTy≥dD©a
 {

1063 
krb5öt32
 
	md©a_ty≥
;

1064 
heim_o˘ë_°rög
 *
	md©a_vÆue
;

1065 } 
	tTy≥dD©a
;

1067 
ícode_Ty≥dD©a
(*, 
size_t
, c⁄° 
Ty≥dD©a
 *, size_t *);

1068 
decode_Ty≥dD©a
(c⁄° *, 
size_t
, 
Ty≥dD©a
 *, size_t *);

1069 
‰ì_Ty≥dD©a
 (
Ty≥dD©a
 *);

1070 
size_t
 
Àngth_Ty≥dD©a
(c⁄° 
Ty≥dD©a
 *);

1071 
c›y_Ty≥dD©a
 (c⁄° 
Ty≥dD©a
 *, TypedData *);

1078 
	sTYPED_DATA
 {

1079 
	mÀn
;

1080 
Ty≥dD©a
 *
	mvÆ
;

1081 } 
	tTYPED_DATA
;

1083 
ícode_TYPED_DATA
(*, 
size_t
, c⁄° 
TYPED_DATA
 *, size_t *);

1084 
decode_TYPED_DATA
(c⁄° *, 
size_t
, 
TYPED_DATA
 *, size_t *);

1085 
‰ì_TYPED_DATA
 (
TYPED_DATA
 *);

1086 
size_t
 
Àngth_TYPED_DATA
(c⁄° 
TYPED_DATA
 *);

1087 
c›y_TYPED_DATA
 (c⁄° 
TYPED_DATA
 *, TYPED_DATA *);

1107 
	sKDC_REQ_BODY
 {

1108 
KDCO±i⁄s
 
	mkdc_›ti⁄s
;

1109 
PröcùÆName
 *
	m˙ame
;

1110 
Rólm
 
	mªÆm
;

1111 
PröcùÆName
 *
	m¢ame
;

1112 
KîbîosTime
 *
	m‰om
;

1113 
KîbîosTime
 *
	mtûl
;

1114 
KîbîosTime
 *
	mπime
;

1115 
krb5öt32
 
	mn⁄˚
;

1117 
	mÀn
;

1118 
ENCTYPE
 *
	mvÆ
;

1119 } 
	mëy≥
;

1120 
Ho°Addªs£s
 *
	maddªs£s
;

1121 
En¸y±edD©a
 *
	míc_auth‹iz©i⁄_d©a
;

1123 
	mÀn
;

1124 
Tickë
 *
	mvÆ
;

1125 } *
	maddôi⁄Æ_tickës
;

1126 } 
	tKDC_REQ_BODY
;

1128 
ícode_KDC_REQ_BODY
(*, 
size_t
, c⁄° 
KDC_REQ_BODY
 *, size_t *);

1129 
decode_KDC_REQ_BODY
(c⁄° *, 
size_t
, 
KDC_REQ_BODY
 *, size_t *);

1130 
‰ì_KDC_REQ_BODY
 (
KDC_REQ_BODY
 *);

1131 
size_t
 
Àngth_KDC_REQ_BODY
(c⁄° 
KDC_REQ_BODY
 *);

1132 
c›y_KDC_REQ_BODY
 (c⁄° 
KDC_REQ_BODY
 *, KDC_REQ_BODY *);

1144 
	sKDC_REQ
 {

1145 
krb5öt32
 
	mpvno
;

1146 
MESSAGE_TYPE
 
	mmsg_ty≥
;

1147 
METHOD_DATA
 *
	m∑d©a
;

1148 
KDC_REQ_BODY
 
	mªq_body
;

1149 } 
	tKDC_REQ
;

1151 
ícode_KDC_REQ
(*, 
size_t
, c⁄° 
KDC_REQ
 *, size_t *);

1152 
decode_KDC_REQ
(c⁄° *, 
size_t
, 
KDC_REQ
 *, size_t *);

1153 
‰ì_KDC_REQ
 (
KDC_REQ
 *);

1154 
size_t
 
Àngth_KDC_REQ
(c⁄° 
KDC_REQ
 *);

1155 
c›y_KDC_REQ
 (c⁄° 
KDC_REQ
 *, KDC_REQ *);

1162 
KDC_REQ
 
	tAS_REQ
;

1164 
ícode_AS_REQ
(*, 
size_t
, c⁄° 
AS_REQ
 *, size_t *);

1165 
decode_AS_REQ
(c⁄° *, 
size_t
, 
AS_REQ
 *, size_t *);

1166 
‰ì_AS_REQ
 (
AS_REQ
 *);

1167 
size_t
 
Àngth_AS_REQ
(c⁄° 
AS_REQ
 *);

1168 
c›y_AS_REQ
 (c⁄° 
AS_REQ
 *, AS_REQ *);

1175 
KDC_REQ
 
	tTGS_REQ
;

1177 
ícode_TGS_REQ
(*, 
size_t
, c⁄° 
TGS_REQ
 *, size_t *);

1178 
decode_TGS_REQ
(c⁄° *, 
size_t
, 
TGS_REQ
 *, size_t *);

1179 
‰ì_TGS_REQ
 (
TGS_REQ
 *);

1180 
size_t
 
Àngth_TGS_REQ
(c⁄° 
TGS_REQ
 *);

1181 
c›y_TGS_REQ
 (c⁄° 
TGS_REQ
 *, TGS_REQ *);

1191 
	sPA_ENC_TS_ENC
 {

1192 
KîbîosTime
 
	m∑time°amp
;

1193 
krb5öt32
 *
	m∑u£c
;

1194 } 
	tPA_ENC_TS_ENC
;

1196 
ícode_PA_ENC_TS_ENC
(*, 
size_t
, c⁄° 
PA_ENC_TS_ENC
 *, size_t *);

1197 
decode_PA_ENC_TS_ENC
(c⁄° *, 
size_t
, 
PA_ENC_TS_ENC
 *, size_t *);

1198 
‰ì_PA_ENC_TS_ENC
 (
PA_ENC_TS_ENC
 *);

1199 
size_t
 
Àngth_PA_ENC_TS_ENC
(c⁄° 
PA_ENC_TS_ENC
 *);

1200 
c›y_PA_ENC_TS_ENC
 (c⁄° 
PA_ENC_TS_ENC
 *, PA_ENC_TS_ENC *);

1209 
	sPA_PAC_REQUEST
 {

1210 
	mö˛ude_∑c
;

1211 } 
	tPA_PAC_REQUEST
;

1213 
ícode_PA_PAC_REQUEST
(*, 
size_t
, c⁄° 
PA_PAC_REQUEST
 *, size_t *);

1214 
decode_PA_PAC_REQUEST
(c⁄° *, 
size_t
, 
PA_PAC_REQUEST
 *, size_t *);

1215 
‰ì_PA_PAC_REQUEST
 (
PA_PAC_REQUEST
 *);

1216 
size_t
 
Àngth_PA_PAC_REQUEST
(c⁄° 
PA_PAC_REQUEST
 *);

1217 
c›y_PA_PAC_REQUEST
 (c⁄° 
PA_PAC_REQUEST
 *, PA_PAC_REQUEST *);

1224 
heim_gíîÆ_°rög
 
	tPROV_SRV_LOCATION
;

1226 
ícode_PROV_SRV_LOCATION
(*, 
size_t
, c⁄° 
PROV_SRV_LOCATION
 *, size_t *);

1227 
decode_PROV_SRV_LOCATION
(c⁄° *, 
size_t
, 
PROV_SRV_LOCATION
 *, size_t *);

1228 
‰ì_PROV_SRV_LOCATION
 (
PROV_SRV_LOCATION
 *);

1229 
size_t
 
Àngth_PROV_SRV_LOCATION
(c⁄° 
PROV_SRV_LOCATION
 *);

1230 
c›y_PROV_SRV_LOCATION
 (c⁄° 
PROV_SRV_LOCATION
 *, PROV_SRV_LOCATION *);

1245 
	sKDC_REP
 {

1246 
krb5öt32
 
	mpvno
;

1247 
MESSAGE_TYPE
 
	mmsg_ty≥
;

1248 
METHOD_DATA
 *
	m∑d©a
;

1249 
Rólm
 
	m¸ólm
;

1250 
PröcùÆName
 
	m˙ame
;

1251 
Tickë
 
	mtickë
;

1252 
En¸y±edD©a
 
	míc_∑π
;

1253 } 
	tKDC_REP
;

1255 
ícode_KDC_REP
(*, 
size_t
, c⁄° 
KDC_REP
 *, size_t *);

1256 
decode_KDC_REP
(c⁄° *, 
size_t
, 
KDC_REP
 *, size_t *);

1257 
‰ì_KDC_REP
 (
KDC_REP
 *);

1258 
size_t
 
Àngth_KDC_REP
(c⁄° 
KDC_REP
 *);

1259 
c›y_KDC_REP
 (c⁄° 
KDC_REP
 *, KDC_REP *);

1266 
KDC_REP
 
	tAS_REP
;

1268 
ícode_AS_REP
(*, 
size_t
, c⁄° 
AS_REP
 *, size_t *);

1269 
decode_AS_REP
(c⁄° *, 
size_t
, 
AS_REP
 *, size_t *);

1270 
‰ì_AS_REP
 (
AS_REP
 *);

1271 
size_t
 
Àngth_AS_REP
(c⁄° 
AS_REP
 *);

1272 
c›y_AS_REP
 (c⁄° 
AS_REP
 *, AS_REP *);

1279 
KDC_REP
 
	tTGS_REP
;

1281 
ícode_TGS_REP
(*, 
size_t
, c⁄° 
TGS_REP
 *, size_t *);

1282 
decode_TGS_REP
(c⁄° *, 
size_t
, 
TGS_REP
 *, size_t *);

1283 
‰ì_TGS_REP
 (
TGS_REP
 *);

1284 
size_t
 
Àngth_TGS_REP
(c⁄° 
TGS_REP
 *);

1285 
c›y_TGS_REP
 (c⁄° 
TGS_REP
 *, TGS_REP *);

1306 
	sEncKDCRïP¨t
 {

1307 
En¸y±i⁄Key
 
	mkey
;

1308 
La°Req
 
	mœ°_ªq
;

1309 
krb5öt32
 
	mn⁄˚
;

1310 
KîbîosTime
 *
	mkey_expú©i⁄
;

1311 
TickëFœgs
 
	mÊags
;

1312 
KîbîosTime
 
	mauthtime
;

1313 
KîbîosTime
 *
	m°¨âime
;

1314 
KîbîosTime
 
	mídtime
;

1315 
KîbîosTime
 *
	mª√w_tûl
;

1316 
Rólm
 
	m§ólm
;

1317 
PröcùÆName
 
	m¢ame
;

1318 
Ho°Addªs£s
 *
	mˇddr
;

1319 
METHOD_DATA
 *
	mí¸y±ed_∑_d©a
;

1320 } 
	tEncKDCRïP¨t
;

1322 
ícode_EncKDCRïP¨t
(*, 
size_t
, c⁄° 
EncKDCRïP¨t
 *, size_t *);

1323 
decode_EncKDCRïP¨t
(c⁄° *, 
size_t
, 
EncKDCRïP¨t
 *, size_t *);

1324 
‰ì_EncKDCRïP¨t
 (
EncKDCRïP¨t
 *);

1325 
size_t
 
Àngth_EncKDCRïP¨t
(c⁄° 
EncKDCRïP¨t
 *);

1326 
c›y_EncKDCRïP¨t
 (c⁄° 
EncKDCRïP¨t
 *, EncKDCRepPart *);

1333 
EncKDCRïP¨t
 
	tEncASRïP¨t
;

1335 
ícode_EncASRïP¨t
(*, 
size_t
, c⁄° 
EncASRïP¨t
 *, size_t *);

1336 
decode_EncASRïP¨t
(c⁄° *, 
size_t
, 
EncASRïP¨t
 *, size_t *);

1337 
‰ì_EncASRïP¨t
 (
EncASRïP¨t
 *);

1338 
size_t
 
Àngth_EncASRïP¨t
(c⁄° 
EncASRïP¨t
 *);

1339 
c›y_EncASRïP¨t
 (c⁄° 
EncASRïP¨t
 *, EncASRepPart *);

1346 
EncKDCRïP¨t
 
	tEncTGSRïP¨t
;

1348 
ícode_EncTGSRïP¨t
(*, 
size_t
, c⁄° 
EncTGSRïP¨t
 *, size_t *);

1349 
decode_EncTGSRïP¨t
(c⁄° *, 
size_t
, 
EncTGSRïP¨t
 *, size_t *);

1350 
‰ì_EncTGSRïP¨t
 (
EncTGSRïP¨t
 *);

1351 
size_t
 
Àngth_EncTGSRïP¨t
(c⁄° 
EncTGSRïP¨t
 *);

1352 
c›y_EncTGSRïP¨t
 (c⁄° 
EncTGSRïP¨t
 *, EncTGSRepPart *);

1365 
	sAP_REQ
 {

1366 
krb5öt32
 
	mpvno
;

1367 
MESSAGE_TYPE
 
	mmsg_ty≥
;

1368 
APO±i⁄s
 
	m≠_›ti⁄s
;

1369 
Tickë
 
	mtickë
;

1370 
En¸y±edD©a
 
	mauthítiˇt‹
;

1371 } 
	tAP_REQ
;

1373 
ícode_AP_REQ
(*, 
size_t
, c⁄° 
AP_REQ
 *, size_t *);

1374 
decode_AP_REQ
(c⁄° *, 
size_t
, 
AP_REQ
 *, size_t *);

1375 
‰ì_AP_REQ
 (
AP_REQ
 *);

1376 
size_t
 
Àngth_AP_REQ
(c⁄° 
AP_REQ
 *);

1377 
c›y_AP_REQ
 (c⁄° 
AP_REQ
 *, AP_REQ *);

1388 
	sAP_REP
 {

1389 
krb5öt32
 
	mpvno
;

1390 
MESSAGE_TYPE
 
	mmsg_ty≥
;

1391 
En¸y±edD©a
 
	míc_∑π
;

1392 } 
	tAP_REP
;

1394 
ícode_AP_REP
(*, 
size_t
, c⁄° 
AP_REP
 *, size_t *);

1395 
decode_AP_REP
(c⁄° *, 
size_t
, 
AP_REP
 *, size_t *);

1396 
‰ì_AP_REP
 (
AP_REP
 *);

1397 
size_t
 
Àngth_AP_REP
(c⁄° 
AP_REP
 *);

1398 
c›y_AP_REP
 (c⁄° 
AP_REP
 *, AP_REP *);

1410 
	sEncAPRïP¨t
 {

1411 
KîbîosTime
 
	m˘ime
;

1412 
krb5öt32
 
	mcu£c
;

1413 
En¸y±i⁄Key
 *
	msubkey
;

1414 
krb5uöt32
 *
	m£q_numbî
;

1415 } 
	tEncAPRïP¨t
;

1417 
ícode_EncAPRïP¨t
(*, 
size_t
, c⁄° 
EncAPRïP¨t
 *, size_t *);

1418 
decode_EncAPRïP¨t
(c⁄° *, 
size_t
, 
EncAPRïP¨t
 *, size_t *);

1419 
‰ì_EncAPRïP¨t
 (
EncAPRïP¨t
 *);

1420 
size_t
 
Àngth_EncAPRïP¨t
(c⁄° 
EncAPRïP¨t
 *);

1421 
c›y_EncAPRïP¨t
 (c⁄° 
EncAPRïP¨t
 *, EncAPRepPart *);

1435 
	sKRB_SAFE_BODY
 {

1436 
heim_o˘ë_°rög
 
	mu£r_d©a
;

1437 
KîbîosTime
 *
	mtime°amp
;

1438 
krb5öt32
 *
	mu£c
;

1439 
krb5uöt32
 *
	m£q_numbî
;

1440 
Ho°Addªss
 *
	ms_addªss
;

1441 
Ho°Addªss
 *
	mr_addªss
;

1442 } 
	tKRB_SAFE_BODY
;

1444 
ícode_KRB_SAFE_BODY
(*, 
size_t
, c⁄° 
KRB_SAFE_BODY
 *, size_t *);

1445 
decode_KRB_SAFE_BODY
(c⁄° *, 
size_t
, 
KRB_SAFE_BODY
 *, size_t *);

1446 
‰ì_KRB_SAFE_BODY
 (
KRB_SAFE_BODY
 *);

1447 
size_t
 
Àngth_KRB_SAFE_BODY
(c⁄° 
KRB_SAFE_BODY
 *);

1448 
c›y_KRB_SAFE_BODY
 (c⁄° 
KRB_SAFE_BODY
 *, KRB_SAFE_BODY *);

1460 
	sKRB_SAFE
 {

1461 
krb5öt32
 
	mpvno
;

1462 
MESSAGE_TYPE
 
	mmsg_ty≥
;

1463 
KRB_SAFE_BODY
 
	mß„_body
;

1464 
Checksum
 
	mcksum
;

1465 } 
	tKRB_SAFE
;

1467 
ícode_KRB_SAFE
(*, 
size_t
, c⁄° 
KRB_SAFE
 *, size_t *);

1468 
decode_KRB_SAFE
(c⁄° *, 
size_t
, 
KRB_SAFE
 *, size_t *);

1469 
‰ì_KRB_SAFE
 (
KRB_SAFE
 *);

1470 
size_t
 
Àngth_KRB_SAFE
(c⁄° 
KRB_SAFE
 *);

1471 
c›y_KRB_SAFE
 (c⁄° 
KRB_SAFE
 *, KRB_SAFE *);

1482 
	sKRB_PRIV
 {

1483 
krb5öt32
 
	mpvno
;

1484 
MESSAGE_TYPE
 
	mmsg_ty≥
;

1485 
En¸y±edD©a
 
	míc_∑π
;

1486 } 
	tKRB_PRIV
;

1488 
ícode_KRB_PRIV
(*, 
size_t
, c⁄° 
KRB_PRIV
 *, size_t *);

1489 
decode_KRB_PRIV
(c⁄° *, 
size_t
, 
KRB_PRIV
 *, size_t *);

1490 
‰ì_KRB_PRIV
 (
KRB_PRIV
 *);

1491 
size_t
 
Àngth_KRB_PRIV
(c⁄° 
KRB_PRIV
 *);

1492 
c›y_KRB_PRIV
 (c⁄° 
KRB_PRIV
 *, KRB_PRIV *);

1506 
	sEncKrbPrivP¨t
 {

1507 
heim_o˘ë_°rög
 
	mu£r_d©a
;

1508 
KîbîosTime
 *
	mtime°amp
;

1509 
krb5öt32
 *
	mu£c
;

1510 
krb5uöt32
 *
	m£q_numbî
;

1511 
Ho°Addªss
 *
	ms_addªss
;

1512 
Ho°Addªss
 *
	mr_addªss
;

1513 } 
	tEncKrbPrivP¨t
;

1515 
ícode_EncKrbPrivP¨t
(*, 
size_t
, c⁄° 
EncKrbPrivP¨t
 *, size_t *);

1516 
decode_EncKrbPrivP¨t
(c⁄° *, 
size_t
, 
EncKrbPrivP¨t
 *, size_t *);

1517 
‰ì_EncKrbPrivP¨t
 (
EncKrbPrivP¨t
 *);

1518 
size_t
 
Àngth_EncKrbPrivP¨t
(c⁄° 
EncKrbPrivP¨t
 *);

1519 
c›y_EncKrbPrivP¨t
 (c⁄° 
EncKrbPrivP¨t
 *, EncKrbPrivPart *);

1531 
	sKRB_CRED
 {

1532 
krb5öt32
 
	mpvno
;

1533 
MESSAGE_TYPE
 
	mmsg_ty≥
;

1535 
	mÀn
;

1536 
Tickë
 *
	mvÆ
;

1537 } 
	mtickës
;

1538 
En¸y±edD©a
 
	míc_∑π
;

1539 } 
	tKRB_CRED
;

1541 
ícode_KRB_CRED
(*, 
size_t
, c⁄° 
KRB_CRED
 *, size_t *);

1542 
decode_KRB_CRED
(c⁄° *, 
size_t
, 
KRB_CRED
 *, size_t *);

1543 
‰ì_KRB_CRED
 (
KRB_CRED
 *);

1544 
size_t
 
Àngth_KRB_CRED
(c⁄° 
KRB_CRED
 *);

1545 
c›y_KRB_CRED
 (c⁄° 
KRB_CRED
 *, KRB_CRED *);

1564 
	sKrbCªdInfo
 {

1565 
En¸y±i⁄Key
 
	mkey
;

1566 
Rólm
 *
	m¥ólm
;

1567 
PröcùÆName
 *
	m≤ame
;

1568 
TickëFœgs
 *
	mÊags
;

1569 
KîbîosTime
 *
	mauthtime
;

1570 
KîbîosTime
 *
	m°¨âime
;

1571 
KîbîosTime
 *
	mídtime
;

1572 
KîbîosTime
 *
	mª√w_tûl
;

1573 
Rólm
 *
	m§ólm
;

1574 
PröcùÆName
 *
	m¢ame
;

1575 
Ho°Addªs£s
 *
	mˇddr
;

1576 } 
	tKrbCªdInfo
;

1578 
ícode_KrbCªdInfo
(*, 
size_t
, c⁄° 
KrbCªdInfo
 *, size_t *);

1579 
decode_KrbCªdInfo
(c⁄° *, 
size_t
, 
KrbCªdInfo
 *, size_t *);

1580 
‰ì_KrbCªdInfo
 (
KrbCªdInfo
 *);

1581 
size_t
 
Àngth_KrbCªdInfo
(c⁄° 
KrbCªdInfo
 *);

1582 
c›y_KrbCªdInfo
 (c⁄° 
KrbCªdInfo
 *, KrbCredInfo *);

1596 
	sEncKrbCªdP¨t
 {

1598 
	mÀn
;

1599 
KrbCªdInfo
 *
	mvÆ
;

1600 } 
	mtickë_öfo
;

1601 
krb5öt32
 *
	mn⁄˚
;

1602 
KîbîosTime
 *
	mtime°amp
;

1603 
krb5öt32
 *
	mu£c
;

1604 
Ho°Addªss
 *
	ms_addªss
;

1605 
Ho°Addªss
 *
	mr_addªss
;

1606 } 
	tEncKrbCªdP¨t
;

1608 
ícode_EncKrbCªdP¨t
(*, 
size_t
, c⁄° 
EncKrbCªdP¨t
 *, size_t *);

1609 
decode_EncKrbCªdP¨t
(c⁄° *, 
size_t
, 
EncKrbCªdP¨t
 *, size_t *);

1610 
‰ì_EncKrbCªdP¨t
 (
EncKrbCªdP¨t
 *);

1611 
size_t
 
Àngth_EncKrbCªdP¨t
(c⁄° 
EncKrbCªdP¨t
 *);

1612 
c›y_EncKrbCªdP¨t
 (c⁄° 
EncKrbCªdP¨t
 *, EncKrbCredPart *);

1633 
	sKRB_ERROR
 {

1634 
krb5öt32
 
	mpvno
;

1635 
MESSAGE_TYPE
 
	mmsg_ty≥
;

1636 
KîbîosTime
 *
	m˘ime
;

1637 
krb5öt32
 *
	mcu£c
;

1638 
KîbîosTime
 
	m°ime
;

1639 
krb5öt32
 
	msu£c
;

1640 
krb5öt32
 
	mîr‹_code
;

1641 
Rólm
 *
	m¸ólm
;

1642 
PröcùÆName
 *
	m˙ame
;

1643 
Rólm
 
	mªÆm
;

1644 
PröcùÆName
 
	m¢ame
;

1645 
heim_gíîÆ_°rög
 *
	me_ãxt
;

1646 
heim_o˘ë_°rög
 *
	me_d©a
;

1647 } 
	tKRB_ERROR
;

1649 
ícode_KRB_ERROR
(*, 
size_t
, c⁄° 
KRB_ERROR
 *, size_t *);

1650 
decode_KRB_ERROR
(c⁄° *, 
size_t
, 
KRB_ERROR
 *, size_t *);

1651 
‰ì_KRB_ERROR
 (
KRB_ERROR
 *);

1652 
size_t
 
Àngth_KRB_ERROR
(c⁄° 
KRB_ERROR
 *);

1653 
c›y_KRB_ERROR
 (c⁄° 
KRB_ERROR
 *, KRB_ERROR *);

1664 
	sCh™gePasswdD©aMS
 {

1665 
heim_o˘ë_°rög
 
	m√w∑sswd
;

1666 
PröcùÆName
 *
	mèrg«me
;

1667 
Rólm
 *
	mèrgªÆm
;

1668 } 
	tCh™gePasswdD©aMS
;

1670 
ícode_Ch™gePasswdD©aMS
(*, 
size_t
, c⁄° 
Ch™gePasswdD©aMS
 *, size_t *);

1671 
decode_Ch™gePasswdD©aMS
(c⁄° *, 
size_t
, 
Ch™gePasswdD©aMS
 *, size_t *);

1672 
‰ì_Ch™gePasswdD©aMS
 (
Ch™gePasswdD©aMS
 *);

1673 
size_t
 
Àngth_Ch™gePasswdD©aMS
(c⁄° 
Ch™gePasswdD©aMS
 *);

1674 
c›y_Ch™gePasswdD©aMS
 (c⁄° 
Ch™gePasswdD©aMS
 *, ChangePasswdDataMS *);

1681 
	sEty≥Li°
 {

1682 
	mÀn
;

1683 
krb5öt32
 *
	mvÆ
;

1684 } 
	tEty≥Li°
;

1686 
ícode_Ety≥Li°
(*, 
size_t
, c⁄° 
Ety≥Li°
 *, size_t *);

1687 
decode_Ety≥Li°
(c⁄° *, 
size_t
, 
Ety≥Li°
 *, size_t *);

1688 
‰ì_Ety≥Li°
 (
Ety≥Li°
 *);

1689 
size_t
 
Àngth_Ety≥Li°
(c⁄° 
Ety≥Li°
 *);

1690 
c›y_Ety≥Li°
 (c⁄° 
Ety≥Li°
 *, EtypeList *);

1693 íum { 
	mkrb5_pvno
 = 5 };

1695 íum { 
	mDOMAIN_X500_COMPRESS
 = 1 };

1701 
Auth‹iz©i⁄D©a
 
	tAD_IF_RELEVANT
;

1703 
ícode_AD_IF_RELEVANT
(*, 
size_t
, c⁄° 
AD_IF_RELEVANT
 *, size_t *);

1704 
decode_AD_IF_RELEVANT
(c⁄° *, 
size_t
, 
AD_IF_RELEVANT
 *, size_t *);

1705 
‰ì_AD_IF_RELEVANT
 (
AD_IF_RELEVANT
 *);

1706 
size_t
 
Àngth_AD_IF_RELEVANT
(c⁄° 
AD_IF_RELEVANT
 *);

1707 
c›y_AD_IF_RELEVANT
 (c⁄° 
AD_IF_RELEVANT
 *, AD_IF_RELEVANT *);

1719 
	sAD_KDCIssued
 {

1720 
Checksum
 
	mad_checksum
;

1721 
Rólm
 *
	mi_ªÆm
;

1722 
PröcùÆName
 *
	mi_¢ame
;

1723 
Auth‹iz©i⁄D©a
 
	mñemíts
;

1724 } 
	tAD_KDCIssued
;

1726 
ícode_AD_KDCIssued
(*, 
size_t
, c⁄° 
AD_KDCIssued
 *, size_t *);

1727 
decode_AD_KDCIssued
(c⁄° *, 
size_t
, 
AD_KDCIssued
 *, size_t *);

1728 
‰ì_AD_KDCIssued
 (
AD_KDCIssued
 *);

1729 
size_t
 
Àngth_AD_KDCIssued
(c⁄° 
AD_KDCIssued
 *);

1730 
c›y_AD_KDCIssued
 (c⁄° 
AD_KDCIssued
 *, AD_KDCIssued *);

1740 
	sAD_AND_OR
 {

1741 
heim_öãgî
 
	mc⁄dôi⁄_cou¡
;

1742 
Auth‹iz©i⁄D©a
 
	mñemíts
;

1743 } 
	tAD_AND_OR
;

1745 
ícode_AD_AND_OR
(*, 
size_t
, c⁄° 
AD_AND_OR
 *, size_t *);

1746 
decode_AD_AND_OR
(c⁄° *, 
size_t
, 
AD_AND_OR
 *, size_t *);

1747 
‰ì_AD_AND_OR
 (
AD_AND_OR
 *);

1748 
size_t
 
Àngth_AD_AND_OR
(c⁄° 
AD_AND_OR
 *);

1749 
c›y_AD_AND_OR
 (c⁄° 
AD_AND_OR
 *, AD_AND_OR *);

1756 
Auth‹iz©i⁄D©a
 
	tAD_MANDATORY_FOR_KDC
;

1758 
ícode_AD_MANDATORY_FOR_KDC
(*, 
size_t
, c⁄° 
AD_MANDATORY_FOR_KDC
 *, size_t *);

1759 
decode_AD_MANDATORY_FOR_KDC
(c⁄° *, 
size_t
, 
AD_MANDATORY_FOR_KDC
 *, size_t *);

1760 
‰ì_AD_MANDATORY_FOR_KDC
 (
AD_MANDATORY_FOR_KDC
 *);

1761 
size_t
 
Àngth_AD_MANDATORY_FOR_KDC
(c⁄° 
AD_MANDATORY_FOR_KDC
 *);

1762 
c›y_AD_MANDATORY_FOR_KDC
 (c⁄° 
AD_MANDATORY_FOR_KDC
 *, AD_MANDATORY_FOR_KDC *);

1776 
	ePA_SAM_TYPE
 {

1777 
	mPA_SAM_TYPE_ENIGMA
 = 1,

1778 
	mPA_SAM_TYPE_DIGI_PATH
 = 2,

1779 
	mPA_SAM_TYPE_SKEY_K0
 = 3,

1780 
	mPA_SAM_TYPE_SKEY
 = 4,

1781 
	mPA_SAM_TYPE_SECURID
 = 5,

1782 
	mPA_SAM_TYPE_CRYPTOCARD
 = 6

1783 } 
	tPA_SAM_TYPE
;

1785 
ícode_PA_SAM_TYPE
(*, 
size_t
, c⁄° 
PA_SAM_TYPE
 *, size_t *);

1786 
decode_PA_SAM_TYPE
(c⁄° *, 
size_t
, 
PA_SAM_TYPE
 *, size_t *);

1787 
‰ì_PA_SAM_TYPE
 (
PA_SAM_TYPE
 *);

1788 
size_t
 
Àngth_PA_SAM_TYPE
(c⁄° 
PA_SAM_TYPE
 *);

1789 
c›y_PA_SAM_TYPE
 (c⁄° 
PA_SAM_TYPE
 *, PA_SAM_TYPE *);

1796 
Ho°Addªs£s
 
	tPA_SAM_REDIRECT
;

1798 
ícode_PA_SAM_REDIRECT
(*, 
size_t
, c⁄° 
PA_SAM_REDIRECT
 *, size_t *);

1799 
decode_PA_SAM_REDIRECT
(c⁄° *, 
size_t
, 
PA_SAM_REDIRECT
 *, size_t *);

1800 
‰ì_PA_SAM_REDIRECT
 (
PA_SAM_REDIRECT
 *);

1801 
size_t
 
Àngth_PA_SAM_REDIRECT
(c⁄° 
PA_SAM_REDIRECT
 *);

1802 
c›y_PA_SAM_REDIRECT
 (c⁄° 
PA_SAM_REDIRECT
 *, PA_SAM_REDIRECT *);

1813 
	sSAMFœgs
 {

1814 
	mu£_ßd_as_key
:1;

1815 
	m£nd_í¸y±ed_ßd
:1;

1816 
	mmu°_pk_í¸y±_ßd
:1;

1817 } 
	tSAMFœgs
;

1820 
ícode_SAMFœgs
(*, 
size_t
, c⁄° 
SAMFœgs
 *, size_t *);

1821 
decode_SAMFœgs
(c⁄° *, 
size_t
, 
SAMFœgs
 *, size_t *);

1822 
‰ì_SAMFœgs
 (
SAMFœgs
 *);

1823 
size_t
 
Àngth_SAMFœgs
(c⁄° 
SAMFœgs
 *);

1824 
c›y_SAMFœgs
 (c⁄° 
SAMFœgs
 *, SAMFlags *);

1825 
SAMFœgs2öt
(
SAMFœgs
);

1826 
SAMFœgs
 
öt2SAMFœgs
();

1827 #ifde‡
__PARSE_UNITS_H__


1828 c⁄° 
unôs
 * 
a¢1_SAMFœgs_unôs
();

1848 
	sPA_SAM_CHALLENGE_2_BODY
 {

1849 
krb5öt32
 
	mßm_ty≥
;

1850 
SAMFœgs
 
	mßm_Êags
;

1851 
heim_gíîÆ_°rög
 *
	mßm_ty≥_«me
;

1852 
heim_gíîÆ_°rög
 *
	mßm_åack_id
;

1853 
heim_gíîÆ_°rög
 *
	mßm_chÆÀnge_œbñ
;

1854 
heim_gíîÆ_°rög
 *
	mßm_chÆÀnge
;

1855 
heim_gíîÆ_°rög
 *
	mßm_ª•⁄£_¥om±
;

1856 
En¸y±i⁄Key
 *
	mßm_pk_f‹_ßd
;

1857 
krb5öt32
 
	mßm_n⁄˚
;

1858 
krb5öt32
 
	mßm_ëy≥
;

1859 } 
	tPA_SAM_CHALLENGE_2_BODY
;

1861 
ícode_PA_SAM_CHALLENGE_2_BODY
(*, 
size_t
, c⁄° 
PA_SAM_CHALLENGE_2_BODY
 *, size_t *);

1862 
decode_PA_SAM_CHALLENGE_2_BODY
(c⁄° *, 
size_t
, 
PA_SAM_CHALLENGE_2_BODY
 *, size_t *);

1863 
‰ì_PA_SAM_CHALLENGE_2_BODY
 (
PA_SAM_CHALLENGE_2_BODY
 *);

1864 
size_t
 
Àngth_PA_SAM_CHALLENGE_2_BODY
(c⁄° 
PA_SAM_CHALLENGE_2_BODY
 *);

1865 
c›y_PA_SAM_CHALLENGE_2_BODY
 (c⁄° 
PA_SAM_CHALLENGE_2_BODY
 *, PA_SAM_CHALLENGE_2_BODY *);

1876 
	sPA_SAM_CHALLENGE_2
 {

1877 
PA_SAM_CHALLENGE_2_BODY
 
	mßm_body
;

1879 
	mÀn
;

1880 
Checksum
 *
	mvÆ
;

1881 } 
	mßm_cksum
;

1882 } 
	tPA_SAM_CHALLENGE_2
;

1884 
ícode_PA_SAM_CHALLENGE_2
(*, 
size_t
, c⁄° 
PA_SAM_CHALLENGE_2
 *, size_t *);

1885 
decode_PA_SAM_CHALLENGE_2
(c⁄° *, 
size_t
, 
PA_SAM_CHALLENGE_2
 *, size_t *);

1886 
‰ì_PA_SAM_CHALLENGE_2
 (
PA_SAM_CHALLENGE_2
 *);

1887 
size_t
 
Àngth_PA_SAM_CHALLENGE_2
(c⁄° 
PA_SAM_CHALLENGE_2
 *);

1888 
c›y_PA_SAM_CHALLENGE_2
 (c⁄° 
PA_SAM_CHALLENGE_2
 *, PA_SAM_CHALLENGE_2 *);

1902 
	sPA_SAM_RESPONSE_2
 {

1903 
krb5öt32
 
	mßm_ty≥
;

1904 
SAMFœgs
 
	mßm_Êags
;

1905 
heim_gíîÆ_°rög
 *
	mßm_åack_id
;

1906 
En¸y±edD©a
 
	mßm_íc_n⁄˚_‹_ßd
;

1907 
krb5öt32
 
	mßm_n⁄˚
;

1908 } 
	tPA_SAM_RESPONSE_2
;

1910 
ícode_PA_SAM_RESPONSE_2
(*, 
size_t
, c⁄° 
PA_SAM_RESPONSE_2
 *, size_t *);

1911 
decode_PA_SAM_RESPONSE_2
(c⁄° *, 
size_t
, 
PA_SAM_RESPONSE_2
 *, size_t *);

1912 
‰ì_PA_SAM_RESPONSE_2
 (
PA_SAM_RESPONSE_2
 *);

1913 
size_t
 
Àngth_PA_SAM_RESPONSE_2
(c⁄° 
PA_SAM_RESPONSE_2
 *);

1914 
c›y_PA_SAM_RESPONSE_2
 (c⁄° 
PA_SAM_RESPONSE_2
 *, PA_SAM_RESPONSE_2 *);

1925 
	sPA_ENC_SAM_RESPONSE_ENC
 {

1926 
krb5öt32
 
	mßm_n⁄˚
;

1927 
heim_gíîÆ_°rög
 *
	mßm_ßd
;

1928 } 
	tPA_ENC_SAM_RESPONSE_ENC
;

1930 
ícode_PA_ENC_SAM_RESPONSE_ENC
(*, 
size_t
, c⁄° 
PA_ENC_SAM_RESPONSE_ENC
 *, size_t *);

1931 
decode_PA_ENC_SAM_RESPONSE_ENC
(c⁄° *, 
size_t
, 
PA_ENC_SAM_RESPONSE_ENC
 *, size_t *);

1932 
‰ì_PA_ENC_SAM_RESPONSE_ENC
 (
PA_ENC_SAM_RESPONSE_ENC
 *);

1933 
size_t
 
Àngth_PA_ENC_SAM_RESPONSE_ENC
(c⁄° 
PA_ENC_SAM_RESPONSE_ENC
 *);

1934 
c›y_PA_ENC_SAM_RESPONSE_ENC
 (c⁄° 
PA_ENC_SAM_RESPONSE_ENC
 *, PA_ENC_SAM_RESPONSE_ENC *);

1946 
	sPA_S4U2Sñf
 {

1947 
PröcùÆName
 
	m«me
;

1948 
Rólm
 
	mªÆm
;

1949 
Checksum
 
	mcksum
;

1950 
heim_gíîÆ_°rög
 
	mauth
;

1951 } 
	tPA_S4U2Sñf
;

1953 
ícode_PA_S4U2Sñf
(*, 
size_t
, c⁄° 
PA_S4U2Sñf
 *, size_t *);

1954 
decode_PA_S4U2Sñf
(c⁄° *, 
size_t
, 
PA_S4U2Sñf
 *, size_t *);

1955 
‰ì_PA_S4U2Sñf
 (
PA_S4U2Sñf
 *);

1956 
size_t
 
Àngth_PA_S4U2Sñf
(c⁄° 
PA_S4U2Sñf
 *);

1957 
c›y_PA_S4U2Sñf
 (c⁄° 
PA_S4U2Sñf
 *, PA_S4U2Self *);

1964 
	sKRB5Sig√dP©hPröcùÆs
 {

1965 
	mÀn
;

1966 
PröcùÆ
 *
	mvÆ
;

1967 } 
	tKRB5Sig√dP©hPröcùÆs
;

1969 
ícode_KRB5Sig√dP©hPröcùÆs
(*, 
size_t
, c⁄° 
KRB5Sig√dP©hPröcùÆs
 *, size_t *);

1970 
decode_KRB5Sig√dP©hPröcùÆs
(c⁄° *, 
size_t
, 
KRB5Sig√dP©hPröcùÆs
 *, size_t *);

1971 
‰ì_KRB5Sig√dP©hPröcùÆs
 (
KRB5Sig√dP©hPröcùÆs
 *);

1972 
size_t
 
Àngth_KRB5Sig√dP©hPröcùÆs
(c⁄° 
KRB5Sig√dP©hPröcùÆs
 *);

1973 
c›y_KRB5Sig√dP©hPröcùÆs
 (c⁄° 
KRB5Sig√dP©hPröcùÆs
 *, KRB5SignedPathPrincipals *);

1974 
add_KRB5Sig√dP©hPröcùÆs
 (
KRB5Sig√dP©hPröcùÆs
 *, c⁄° 
PröcùÆ
 *);

1975 
ªmove_KRB5Sig√dP©hPröcùÆs
 (
KRB5Sig√dP©hPröcùÆs
 *, );

1985 
	sKRB5Sig√dP©hD©a
 {

1986 
EncTickëP¨t
 
	mí˘ickë
;

1987 
KRB5Sig√dP©hPröcùÆs
 *
	mdñeg©ed
;

1988 } 
	tKRB5Sig√dP©hD©a
;

1990 
ícode_KRB5Sig√dP©hD©a
(*, 
size_t
, c⁄° 
KRB5Sig√dP©hD©a
 *, size_t *);

1991 
decode_KRB5Sig√dP©hD©a
(c⁄° *, 
size_t
, 
KRB5Sig√dP©hD©a
 *, size_t *);

1992 
‰ì_KRB5Sig√dP©hD©a
 (
KRB5Sig√dP©hD©a
 *);

1993 
size_t
 
Àngth_KRB5Sig√dP©hD©a
(c⁄° 
KRB5Sig√dP©hD©a
 *);

1994 
c›y_KRB5Sig√dP©hD©a
 (c⁄° 
KRB5Sig√dP©hD©a
 *, KRB5SignedPathData *);

2005 
	sKRB5Sig√dP©h
 {

2006 
ENCTYPE
 
	mëy≥
;

2007 
Checksum
 
	mcksum
;

2008 
KRB5Sig√dP©hPröcùÆs
 *
	mdñeg©ed
;

2009 } 
	tKRB5Sig√dP©h
;

2011 
ícode_KRB5Sig√dP©h
(*, 
size_t
, c⁄° 
KRB5Sig√dP©h
 *, size_t *);

2012 
decode_KRB5Sig√dP©h
(c⁄° *, 
size_t
, 
KRB5Sig√dP©h
 *, size_t *);

2013 
‰ì_KRB5Sig√dP©h
 (
KRB5Sig√dP©h
 *);

2014 
size_t
 
Àngth_KRB5Sig√dP©h
(c⁄° 
KRB5Sig√dP©h
 *);

2015 
c›y_KRB5Sig√dP©h
 (c⁄° 
KRB5Sig√dP©h
 *, KRB5SignedPath *);

2025 
	sPA_Clõ¡C™⁄iˇlizedNames
 {

2026 
PröcùÆName
 
	mªque°ed_«me
;

2027 
PröcùÆName
 
	mªÆ_«me
;

2028 } 
	tPA_Clõ¡C™⁄iˇlizedNames
;

2030 
ícode_PA_Clõ¡C™⁄iˇlizedNames
(*, 
size_t
, c⁄° 
PA_Clõ¡C™⁄iˇlizedNames
 *, size_t *);

2031 
decode_PA_Clõ¡C™⁄iˇlizedNames
(c⁄° *, 
size_t
, 
PA_Clõ¡C™⁄iˇlizedNames
 *, size_t *);

2032 
‰ì_PA_Clõ¡C™⁄iˇlizedNames
 (
PA_Clõ¡C™⁄iˇlizedNames
 *);

2033 
size_t
 
Àngth_PA_Clõ¡C™⁄iˇlizedNames
(c⁄° 
PA_Clõ¡C™⁄iˇlizedNames
 *);

2034 
c›y_PA_Clõ¡C™⁄iˇlizedNames
 (c⁄° 
PA_Clõ¡C™⁄iˇlizedNames
 *, PA_ClientCanonicalizedNames *);

2044 
	sPA_Clõ¡C™⁄iˇlized
 {

2045 
PA_Clõ¡C™⁄iˇlizedNames
 
	m«mes
;

2046 
Checksum
 
	mˇn⁄_checksum
;

2047 } 
	tPA_Clõ¡C™⁄iˇlized
;

2049 
ícode_PA_Clõ¡C™⁄iˇlized
(*, 
size_t
, c⁄° 
PA_Clõ¡C™⁄iˇlized
 *, size_t *);

2050 
decode_PA_Clõ¡C™⁄iˇlized
(c⁄° *, 
size_t
, 
PA_Clõ¡C™⁄iˇlized
 *, size_t *);

2051 
‰ì_PA_Clõ¡C™⁄iˇlized
 (
PA_Clõ¡C™⁄iˇlized
 *);

2052 
size_t
 
Àngth_PA_Clõ¡C™⁄iˇlized
(c⁄° 
PA_Clõ¡C™⁄iˇlized
 *);

2053 
c›y_PA_Clõ¡C™⁄iˇlized
 (c⁄° 
PA_Clõ¡C™⁄iˇlized
 *, PA_ClientCanonicalized *);

2063 
	sAD_LogöAlüs
 {

2064 
PröcùÆName
 
	mlogö_Æüs
;

2065 
Checksum
 
	mchecksum
;

2066 } 
	tAD_LogöAlüs
;

2068 
ícode_AD_LogöAlüs
(*, 
size_t
, c⁄° 
AD_LogöAlüs
 *, size_t *);

2069 
decode_AD_LogöAlüs
(c⁄° *, 
size_t
, 
AD_LogöAlüs
 *, size_t *);

2070 
‰ì_AD_LogöAlüs
 (
AD_LogöAlüs
 *);

2071 
size_t
 
Àngth_AD_LogöAlüs
(c⁄° 
AD_LogöAlüs
 *);

2072 
c›y_AD_LogöAlüs
 (c⁄° 
AD_LogöAlüs
 *, AD_LoginAlias *);

2082 
	sPA_SvrRe„ºÆD©a
 {

2083 
PröcùÆName
 *
	mª„ºed_«me
;

2084 
Rólm
 
	mª„ºed_ªÆm
;

2085 } 
	tPA_SvrRe„ºÆD©a
;

2087 
ícode_PA_SvrRe„ºÆD©a
(*, 
size_t
, c⁄° 
PA_SvrRe„ºÆD©a
 *, size_t *);

2088 
decode_PA_SvrRe„ºÆD©a
(c⁄° *, 
size_t
, 
PA_SvrRe„ºÆD©a
 *, size_t *);

2089 
‰ì_PA_SvrRe„ºÆD©a
 (
PA_SvrRe„ºÆD©a
 *);

2090 
size_t
 
Àngth_PA_SvrRe„ºÆD©a
(c⁄° 
PA_SvrRe„ºÆD©a
 *);

2091 
c›y_PA_SvrRe„ºÆD©a
 (c⁄° 
PA_SvrRe„ºÆD©a
 *, PA_SvrReferralData *);

	@/usr/include/krb5_err.h

4 #i‚de‡
__krb5_îr_h__


5 
	#__krb5_îr_h__


	)

7 
	gë_li°
;

9 
öôülize_krb5_îr‹_èbÀ_r
(
ë_li°
 **);

11 
öôülize_krb5_îr‹_èbÀ
();

12 
	#öô_krb5_îr_tbl
 
öôülize_krb5_îr‹_èbÀ


	)

14 
	ekrb5_îr‹_numbî
{

15 
	mKRB5KDC_ERR_NONE
 = -1765328384,

16 
	mKRB5KDC_ERR_NAME_EXP
 = -1765328383,

17 
	mKRB5KDC_ERR_SERVICE_EXP
 = -1765328382,

18 
	mKRB5KDC_ERR_BAD_PVNO
 = -1765328381,

19 
	mKRB5KDC_ERR_C_OLD_MAST_KVNO
 = -1765328380,

20 
	mKRB5KDC_ERR_S_OLD_MAST_KVNO
 = -1765328379,

21 
	mKRB5KDC_ERR_C_PRINCIPAL_UNKNOWN
 = -1765328378,

22 
	mKRB5KDC_ERR_S_PRINCIPAL_UNKNOWN
 = -1765328377,

23 
	mKRB5KDC_ERR_PRINCIPAL_NOT_UNIQUE
 = -1765328376,

24 
	mKRB5KDC_ERR_NULL_KEY
 = -1765328375,

25 
	mKRB5KDC_ERR_CANNOT_POSTDATE
 = -1765328374,

26 
	mKRB5KDC_ERR_NEVER_VALID
 = -1765328373,

27 
	mKRB5KDC_ERR_POLICY
 = -1765328372,

28 
	mKRB5KDC_ERR_BADOPTION
 = -1765328371,

29 
	mKRB5KDC_ERR_ETYPE_NOSUPP
 = -1765328370,

30 
	mKRB5KDC_ERR_SUMTYPE_NOSUPP
 = -1765328369,

31 
	mKRB5KDC_ERR_PADATA_TYPE_NOSUPP
 = -1765328368,

32 
	mKRB5KDC_ERR_TRTYPE_NOSUPP
 = -1765328367,

33 
	mKRB5KDC_ERR_CLIENT_REVOKED
 = -1765328366,

34 
	mKRB5KDC_ERR_SERVICE_REVOKED
 = -1765328365,

35 
	mKRB5KDC_ERR_TGT_REVOKED
 = -1765328364,

36 
	mKRB5KDC_ERR_CLIENT_NOTYET
 = -1765328363,

37 
	mKRB5KDC_ERR_SERVICE_NOTYET
 = -1765328362,

38 
	mKRB5KDC_ERR_KEY_EXPIRED
 = -1765328361,

39 
	mKRB5KDC_ERR_PREAUTH_FAILED
 = -1765328360,

40 
	mKRB5KDC_ERR_PREAUTH_REQUIRED
 = -1765328359,

41 
	mKRB5KDC_ERR_SERVER_NOMATCH
 = -1765328358,

42 
	mKRB5KDC_ERR_KDC_ERR_MUST_USE_USER2USER
 = -1765328357,

43 
	mKRB5KDC_ERR_PATH_NOT_ACCEPTED
 = -1765328356,

44 
	mKRB5KDC_ERR_SVC_UNAVAILABLE
 = -1765328355,

45 
	mKRB5KRB_AP_ERR_BAD_INTEGRITY
 = -1765328353,

46 
	mKRB5KRB_AP_ERR_TKT_EXPIRED
 = -1765328352,

47 
	mKRB5KRB_AP_ERR_TKT_NYV
 = -1765328351,

48 
	mKRB5KRB_AP_ERR_REPEAT
 = -1765328350,

49 
	mKRB5KRB_AP_ERR_NOT_US
 = -1765328349,

50 
	mKRB5KRB_AP_ERR_BADMATCH
 = -1765328348,

51 
	mKRB5KRB_AP_ERR_SKEW
 = -1765328347,

52 
	mKRB5KRB_AP_ERR_BADADDR
 = -1765328346,

53 
	mKRB5KRB_AP_ERR_BADVERSION
 = -1765328345,

54 
	mKRB5KRB_AP_ERR_MSG_TYPE
 = -1765328344,

55 
	mKRB5KRB_AP_ERR_MODIFIED
 = -1765328343,

56 
	mKRB5KRB_AP_ERR_BADORDER
 = -1765328342,

57 
	mKRB5KRB_AP_ERR_ILL_CR_TKT
 = -1765328341,

58 
	mKRB5KRB_AP_ERR_BADKEYVER
 = -1765328340,

59 
	mKRB5KRB_AP_ERR_NOKEY
 = -1765328339,

60 
	mKRB5KRB_AP_ERR_MUT_FAIL
 = -1765328338,

61 
	mKRB5KRB_AP_ERR_BADDIRECTION
 = -1765328337,

62 
	mKRB5KRB_AP_ERR_METHOD
 = -1765328336,

63 
	mKRB5KRB_AP_ERR_BADSEQ
 = -1765328335,

64 
	mKRB5KRB_AP_ERR_INAPP_CKSUM
 = -1765328334,

65 
	mKRB5KRB_AP_PATH_NOT_ACCEPTED
 = -1765328333,

66 
	mKRB5KRB_ERR_RESPONSE_TOO_BIG
 = -1765328332,

67 
	mKRB5KRB_ERR_GENERIC
 = -1765328324,

68 
	mKRB5KRB_ERR_FIELD_TOOLONG
 = -1765328323,

69 
	mKRB5_KDC_ERR_CLIENT_NOT_TRUSTED
 = -1765328322,

70 
	mKRB5_KDC_ERR_KDC_NOT_TRUSTED
 = -1765328321,

71 
	mKRB5_KDC_ERR_INVALID_SIG
 = -1765328320,

72 
	mKRB5_KDC_ERR_DH_KEY_PARAMETERS_NOT_ACCEPTED
 = -1765328319,

73 
	mKRB5_KDC_ERR_WRONG_REALM
 = -1765328316,

74 
	mKRB5_AP_ERR_USER_TO_USER_REQUIRED
 = -1765328315,

75 
	mKRB5_KDC_ERR_CANT_VERIFY_CERTIFICATE
 = -1765328314,

76 
	mKRB5_KDC_ERR_INVALID_CERTIFICATE
 = -1765328313,

77 
	mKRB5_KDC_ERR_REVOKED_CERTIFICATE
 = -1765328312,

78 
	mKRB5_KDC_ERR_REVOCATION_STATUS_UNKNOWN
 = -1765328311,

79 
	mKRB5_KDC_ERR_REVOCATION_STATUS_UNAVAILABLE
 = -1765328310,

80 
	mKRB5_KDC_ERR_CLIENT_NAME_MISMATCH
 = -1765328309,

81 
	mKRB5_KDC_ERR_INCONSISTENT_KEY_PURPOSE
 = -1765328308,

82 
	mKRB5_KDC_ERR_DIGEST_IN_CERT_NOT_ACCEPTED
 = -1765328307,

83 
	mKRB5_KDC_ERR_PA_CHECKSUM_MUST_BE_INCLUDED
 = -1765328306,

84 
	mKRB5_KDC_ERR_DIGEST_IN_SIGNED_DATA_NOT_ACCEPTED
 = -1765328305,

85 
	mKRB5_KDC_ERR_PUBLIC_KEY_ENCRYPTION_NOT_SUPPORTED
 = -1765328304,

86 
	mKRB5_ERR_RCSID
 = -1765328256,

87 
	mKRB5_LIBOS_BADLOCKFLAG
 = -1765328255,

88 
	mKRB5_LIBOS_CANTREADPWD
 = -1765328254,

89 
	mKRB5_LIBOS_BADPWDMATCH
 = -1765328253,

90 
	mKRB5_LIBOS_PWDINTR
 = -1765328252,

91 
	mKRB5_PARSE_ILLCHAR
 = -1765328251,

92 
	mKRB5_PARSE_MALFORMED
 = -1765328250,

93 
	mKRB5_CONFIG_CANTOPEN
 = -1765328249,

94 
	mKRB5_CONFIG_BADFORMAT
 = -1765328248,

95 
	mKRB5_CONFIG_NOTENUFSPACE
 = -1765328247,

96 
	mKRB5_BADMSGTYPE
 = -1765328246,

97 
	mKRB5_CC_BADNAME
 = -1765328245,

98 
	mKRB5_CC_UNKNOWN_TYPE
 = -1765328244,

99 
	mKRB5_CC_NOTFOUND
 = -1765328243,

100 
	mKRB5_CC_END
 = -1765328242,

101 
	mKRB5_NO_TKT_SUPPLIED
 = -1765328241,

102 
	mKRB5KRB_AP_WRONG_PRINC
 = -1765328240,

103 
	mKRB5KRB_AP_ERR_TKT_INVALID
 = -1765328239,

104 
	mKRB5_PRINC_NOMATCH
 = -1765328238,

105 
	mKRB5_KDCREP_MODIFIED
 = -1765328237,

106 
	mKRB5_KDCREP_SKEW
 = -1765328236,

107 
	mKRB5_IN_TKT_REALM_MISMATCH
 = -1765328235,

108 
	mKRB5_PROG_ETYPE_NOSUPP
 = -1765328234,

109 
	mKRB5_PROG_KEYTYPE_NOSUPP
 = -1765328233,

110 
	mKRB5_WRONG_ETYPE
 = -1765328232,

111 
	mKRB5_PROG_SUMTYPE_NOSUPP
 = -1765328231,

112 
	mKRB5_REALM_UNKNOWN
 = -1765328230,

113 
	mKRB5_SERVICE_UNKNOWN
 = -1765328229,

114 
	mKRB5_KDC_UNREACH
 = -1765328228,

115 
	mKRB5_NO_LOCALNAME
 = -1765328227,

116 
	mKRB5_MUTUAL_FAILED
 = -1765328226,

117 
	mKRB5_RC_TYPE_EXISTS
 = -1765328225,

118 
	mKRB5_RC_MALLOC
 = -1765328224,

119 
	mKRB5_RC_TYPE_NOTFOUND
 = -1765328223,

120 
	mKRB5_RC_UNKNOWN
 = -1765328222,

121 
	mKRB5_RC_REPLAY
 = -1765328221,

122 
	mKRB5_RC_IO
 = -1765328220,

123 
	mKRB5_RC_NOIO
 = -1765328219,

124 
	mKRB5_RC_PARSE
 = -1765328218,

125 
	mKRB5_RC_IO_EOF
 = -1765328217,

126 
	mKRB5_RC_IO_MALLOC
 = -1765328216,

127 
	mKRB5_RC_IO_PERM
 = -1765328215,

128 
	mKRB5_RC_IO_IO
 = -1765328214,

129 
	mKRB5_RC_IO_UNKNOWN
 = -1765328213,

130 
	mKRB5_RC_IO_SPACE
 = -1765328212,

131 
	mKRB5_TRANS_CANTOPEN
 = -1765328211,

132 
	mKRB5_TRANS_BADFORMAT
 = -1765328210,

133 
	mKRB5_LNAME_CANTOPEN
 = -1765328209,

134 
	mKRB5_LNAME_NOTRANS
 = -1765328208,

135 
	mKRB5_LNAME_BADFORMAT
 = -1765328207,

136 
	mKRB5_CRYPTO_INTERNAL
 = -1765328206,

137 
	mKRB5_KT_BADNAME
 = -1765328205,

138 
	mKRB5_KT_UNKNOWN_TYPE
 = -1765328204,

139 
	mKRB5_KT_NOTFOUND
 = -1765328203,

140 
	mKRB5_KT_END
 = -1765328202,

141 
	mKRB5_KT_NOWRITE
 = -1765328201,

142 
	mKRB5_KT_IOERR
 = -1765328200,

143 
	mKRB5_NO_TKT_IN_RLM
 = -1765328199,

144 
	mKRB5DES_BAD_KEYPAR
 = -1765328198,

145 
	mKRB5DES_WEAK_KEY
 = -1765328197,

146 
	mKRB5_BAD_ENCTYPE
 = -1765328196,

147 
	mKRB5_BAD_KEYSIZE
 = -1765328195,

148 
	mKRB5_BAD_MSIZE
 = -1765328194,

149 
	mKRB5_CC_TYPE_EXISTS
 = -1765328193,

150 
	mKRB5_KT_TYPE_EXISTS
 = -1765328192,

151 
	mKRB5_CC_IO
 = -1765328191,

152 
	mKRB5_FCC_PERM
 = -1765328190,

153 
	mKRB5_FCC_NOFILE
 = -1765328189,

154 
	mKRB5_FCC_INTERNAL
 = -1765328188,

155 
	mKRB5_CC_WRITE
 = -1765328187,

156 
	mKRB5_CC_NOMEM
 = -1765328186,

157 
	mKRB5_CC_FORMAT
 = -1765328185,

158 
	mKRB5_CC_NOT_KTYPE
 = -1765328184,

159 
	mKRB5_INVALID_FLAGS
 = -1765328183,

160 
	mKRB5_NO_2ND_TKT
 = -1765328182,

161 
	mKRB5_NOCREDS_SUPPLIED
 = -1765328181,

162 
	mKRB5_SENDAUTH_BADAUTHVERS
 = -1765328180,

163 
	mKRB5_SENDAUTH_BADAPPLVERS
 = -1765328179,

164 
	mKRB5_SENDAUTH_BADRESPONSE
 = -1765328178,

165 
	mKRB5_SENDAUTH_REJECTED
 = -1765328177,

166 
	mKRB5_PREAUTH_BAD_TYPE
 = -1765328176,

167 
	mKRB5_PREAUTH_NO_KEY
 = -1765328175,

168 
	mKRB5_PREAUTH_FAILED
 = -1765328174,

169 
	mKRB5_RCACHE_BADVNO
 = -1765328173,

170 
	mKRB5_CCACHE_BADVNO
 = -1765328172,

171 
	mKRB5_KEYTAB_BADVNO
 = -1765328171,

172 
	mKRB5_PROG_ATYPE_NOSUPP
 = -1765328170,

173 
	mKRB5_RC_REQUIRED
 = -1765328169,

174 
	mKRB5_ERR_BAD_HOSTNAME
 = -1765328168,

175 
	mKRB5_ERR_HOST_REALM_UNKNOWN
 = -1765328167,

176 
	mKRB5_SNAME_UNSUPP_NAMETYPE
 = -1765328166,

177 
	mKRB5KRB_AP_ERR_V4_REPLY
 = -1765328165,

178 
	mKRB5_REALM_CANT_RESOLVE
 = -1765328164,

179 
	mKRB5_TKT_NOT_FORWARDABLE
 = -1765328163,

180 
	mKRB5_FWD_BAD_PRINCIPAL
 = -1765328162,

181 
	mKRB5_GET_IN_TKT_LOOP
 = -1765328161,

182 
	mKRB5_CONFIG_NODEFREALM
 = -1765328160,

183 
	mKRB5_SAM_UNSUPPORTED
 = -1765328159,

184 
	mKRB5_SAM_INVALID_ETYPE
 = -1765328158,

185 
	mKRB5_SAM_NO_CHECKSUM
 = -1765328157,

186 
	mKRB5_SAM_BAD_CHECKSUM
 = -1765328156,

187 
	mKRB5_OBSOLETE_FN
 = -1765328146,

188 
	mKRB5_ERR_BAD_S2K_PARAMS
 = -1765328139,

189 
	mKRB5_ERR_NO_SERVICE
 = -1765328138,

190 
	mKRB5_CC_NOSUPP
 = -1765328137,

191 
	mKRB5_DELTAT_BADFORMAT
 = -1765328136

192 } 
	tkrb5_îr‹_numbî
;

194 
	#ERROR_TABLE_BASE_krb5
 -1765328384

	)

	@/usr/include/machine/cpufunc.h

39 #i‚de‡
_MACHINE_CPUFUNC_H_


40 
	#_MACHINE_CPUFUNC_H_


	)

42 #i‚de‡
_SYS_CDEFS_H_


43 #îr‹ 
this
 
fûe
 
√eds
 
sys
/
cdefs
.
h
 
as
 
a
 
¥îequisôe


46 
	gªgi⁄_des¸ùt‹
;

48 
	#ªadb
(
va
Ë(*(vﬁ©ûê
u_öt8_t
 *Ë(va))

	)

49 
	#ªadw
(
va
Ë(*(vﬁ©ûê
u_öt16_t
 *Ë(va))

	)

50 
	#ªadl
(
va
Ë(*(vﬁ©ûê
u_öt32_t
 *Ë(va))

	)

51 
	#ªadq
(
va
Ë(*(vﬁ©ûê
u_öt64_t
 *Ë(va))

	)

53 
	#wrôeb
(
va
, 
d
Ë(*(vﬁ©ûê
u_öt8_t
 *Ë(vaË(d))

	)

54 
	#wrôew
(
va
, 
d
Ë(*(vﬁ©ûê
u_öt16_t
 *Ë(vaË(d))

	)

55 
	#wrôñ
(
va
, 
d
Ë(*(vﬁ©ûê
u_öt32_t
 *Ë(vaË(d))

	)

56 
	#wrôeq
(
va
, 
d
Ë(*(vﬁ©ûê
u_öt64_t
 *Ë(vaË(d))

	)

58 #i‡
deföed
(
__GNUCLIKE_ASM
Ë&& deföed(
__CC_SUPPORTS___INLINE
)

60 
__ölöe
 

61 
	$bªakpoöt
()

63 
__asm
 
	`__vﬁ©ûe
("int $3");

64 
	}
}

66 
__ölöe
 
u_öt


67 
	$bsÊ
(
u_öt
 
mask
)

69 
u_öt
 
ªsu…
;

71 
__asm
 
	`__vﬁ©ûe
("bsÊ %1,%0" : "Ù" (
ªsu…
Ë: "rm" (
mask
));

72  (
ªsu…
);

73 
	}
}

75 
__ölöe
 
u_l⁄g


76 
	$bsfq
(
u_l⁄g
 
mask
)

78 
u_l⁄g
 
ªsu…
;

80 
__asm
 
	`__vﬁ©ûe
("bsfq %1,%0" : "Ù" (
ªsu…
Ë: "rm" (
mask
));

81  (
ªsu…
);

82 
	}
}

84 
__ölöe
 
u_öt


85 
	$b§l
(
u_öt
 
mask
)

87 
u_öt
 
ªsu…
;

89 
__asm
 
	`__vﬁ©ûe
("b§»%1,%0" : "Ù" (
ªsu…
Ë: "rm" (
mask
));

90  (
ªsu…
);

91 
	}
}

93 
__ölöe
 
u_l⁄g


94 
	$b§q
(
u_l⁄g
 
mask
)

96 
u_l⁄g
 
ªsu…
;

98 
__asm
 
	`__vﬁ©ûe
("b§q %1,%0" : "Ù" (
ªsu…
Ë: "rm" (
mask
));

99  (
ªsu…
);

100 
	}
}

102 
__ölöe
 

103 
	$˛Êush
(
u_l⁄g
 
addr
)

106 
__asm
 
	`__vﬁ©ûe
("˛Êush %0" : : "m" (*(*)
addr
));

107 
	}
}

109 
__ölöe
 

110 
	$dißbÀ_öå
()

112 
__asm
 
	`__vﬁ©ûe
("cli" : : : "memory");

113 
	}
}

115 
__ölöe
 

116 
	$do_˝uid
(
u_öt
 
ax
, u_öà*
p
)

118 
__asm
 
	`__vﬁ©ûe
("cpuid"

119 : "˜" (
p
[0]), "=b" (p[1]), "=c" (p[2]), "=d" (p[3])

120 : "0" (
ax
));

121 
	}
}

123 
__ölöe
 

124 
	$˝uid_cou¡
(
u_öt
 
ax
, u_öà
cx
, u_öà*
p
)

126 
__asm
 
	`__vﬁ©ûe
("cpuid"

127 : "˜" (
p
[0]), "=b" (p[1]), "=c" (p[2]), "=d" (p[3])

128 : "0" (
ax
), "c" (
cx
));

129 
	}
}

131 
__ölöe
 

132 
	$íabÀ_öå
()

134 
__asm
 
	`__vﬁ©ûe
("sti");

135 
	}
}

137 #ifde‡
_KERNEL


139 
	#HAVE_INLINE_FFS


	)

140 
	#ffs
(
x
Ë
	`__buûtö_ffs
(x)

	)

142 
	#HAVE_INLINE_FFSL


	)

144 
__ölöe
 

145 
	$ff¶
(
mask
)

147  (
mask
 =0 ? mask : ()
	`bsfq
((
u_l⁄g
)mask) + 1);

148 
	}
}

150 
	#HAVE_INLINE_FLS


	)

152 
__ölöe
 

153 
	$Ês
(
mask
)

155  (
mask
 =0 ? mask : ()
	`b§l
((
u_öt
)mask) + 1);

156 
	}
}

158 
	#HAVE_INLINE_FLSL


	)

160 
__ölöe
 

161 
	$Ê¶
(
mask
)

163  (
mask
 =0 ? mask : ()
	`b§q
((
u_l⁄g
)mask) + 1);

164 
	}
}

168 
__ölöe
 

169 
	$hÆt
()

171 
__asm
 
	`__vﬁ©ûe
("hlt");

172 
	}
}

174 
__ölöe
 
u_ch¨


175 
	$öb
(
u_öt
 
p‹t
)

177 
u_ch¨
 
d©a
;

179 
__asm
 vﬁ©ûe("öb %w1, %0" : "˜" (
d©a
Ë: "Nd" (
p‹t
));

180  (
d©a
);

181 
	}
}

183 
__ölöe
 
u_öt


184 
	$öl
(
u_öt
 
p‹t
)

186 
u_öt
 
d©a
;

188 
__asm
 vﬁ©ûe("ö»%w1, %0" : "˜" (
d©a
Ë: "Nd" (
p‹t
));

189  (
d©a
);

190 
	}
}

192 
__ölöe
 

193 
	$ösb
(
u_öt
 
p‹t
, *
addr
, 
size_t
 
˙t
)

195 
__asm
 
	`__vﬁ©ûe
("cld;Ñep; insb"

196 : "+D" (
addr
), "+c" (
˙t
)

197 : "d" (
p‹t
)

199 
	}
}

201 
__ölöe
 

202 
	$ösw
(
u_öt
 
p‹t
, *
addr
, 
size_t
 
˙t
)

204 
__asm
 
	`__vﬁ©ûe
("cld;Ñep; insw"

205 : "+D" (
addr
), "+c" (
˙t
)

206 : "d" (
p‹t
)

208 
	}
}

210 
__ölöe
 

211 
	$ö¶
(
u_öt
 
p‹t
, *
addr
, 
size_t
 
˙t
)

213 
__asm
 
	`__vﬁ©ûe
("cld;Ñep; insl"

214 : "+D" (
addr
), "+c" (
˙t
)

215 : "d" (
p‹t
)

217 
	}
}

219 
__ölöe
 

220 
	$övd
()

222 
__asm
 
	`__vﬁ©ûe
("invd");

223 
	}
}

225 
__ölöe
 
u_sh‹t


226 
	$öw
(
u_öt
 
p‹t
)

228 
u_sh‹t
 
d©a
;

230 
__asm
 vﬁ©ûe("öw %w1, %0" : "˜" (
d©a
Ë: "Nd" (
p‹t
));

231  (
d©a
);

232 
	}
}

234 
__ölöe
 

235 
	$outb
(
u_öt
 
p‹t
, 
u_ch¨
 
d©a
)

237 
__asm
 vﬁ©ûe("outb %0, %w1" : : "a" (
d©a
), "Nd" (
p‹t
));

238 
	}
}

240 
__ölöe
 

241 
	$oué
(
u_öt
 
p‹t
, u_öà
d©a
)

243 
__asm
 vﬁ©ûe("oué %0, %w1" : : "a" (
d©a
), "Nd" (
p‹t
));

244 
	}
}

246 
__ölöe
 

247 
	$outsb
(
u_öt
 
p‹t
, c⁄° *
addr
, 
size_t
 
˙t
)

249 
__asm
 
	`__vﬁ©ûe
("cld;Ñep; outsb"

250 : "+S" (
addr
), "+c" (
˙t
)

251 : "d" (
p‹t
));

252 
	}
}

254 
__ölöe
 

255 
	$outsw
(
u_öt
 
p‹t
, c⁄° *
addr
, 
size_t
 
˙t
)

257 
__asm
 
	`__vﬁ©ûe
("cld;Ñep; outsw"

258 : "+S" (
addr
), "+c" (
˙t
)

259 : "d" (
p‹t
));

260 
	}
}

262 
__ölöe
 

263 
	$out¶
(
u_öt
 
p‹t
, c⁄° *
addr
, 
size_t
 
˙t
)

265 
__asm
 
	`__vﬁ©ûe
("cld;Ñep; outsl"

266 : "+S" (
addr
), "+c" (
˙t
)

267 : "d" (
p‹t
));

268 
	}
}

270 
__ölöe
 

271 
	$outw
(
u_öt
 
p‹t
, 
u_sh‹t
 
d©a
)

273 
__asm
 vﬁ©ûe("outw %0, %w1" : : "a" (
d©a
), "Nd" (
p‹t
));

274 
	}
}

276 
__ölöe
 

277 
	$l„n˚
()

280 
__asm
 
	`__vﬁ©ûe
("lfence" : : : "memory");

281 
	}
}

283 
__ölöe
 

284 
	$m„n˚
()

287 
__asm
 
	`__vﬁ©ûe
("mfence" : : : "memory");

288 
	}
}

290 
__ölöe
 

291 
	$ü32_∑u£
()

293 
__asm
 
	`__vﬁ©ûe
("pause");

294 
	}
}

296 
__ölöe
 
u_l⁄g


297 
	$ªad_rÊags
()

299 
u_l⁄g
 
rf
;

301 
__asm
 
	`__vﬁ©ûe
("pushfq;Ö›q %0" : "Ù" (
rf
));

302  (
rf
);

303 
	}
}

305 
__ölöe
 
u_öt64_t


306 
	$rdm§
(
u_öt
 
m§
)

308 
u_öt32_t
 
low
, 
high
;

310 
__asm
 
	`__vﬁ©ûe
("rdm§" : "˜" (
low
), "=d" (
high
Ë: "c" (
m§
));

311  (
low
 | ((
u_öt64_t
)
high
 << 32));

312 
	}
}

314 
__ölöe
 
u_öt64_t


315 
	$rdpmc
(
u_öt
 
pmc
)

317 
u_öt32_t
 
low
, 
high
;

319 
__asm
 
	`__vﬁ©ûe
("rdpmc" : "˜" (
low
), "=d" (
high
Ë: "c" (
pmc
));

320  (
low
 | ((
u_öt64_t
)
high
 << 32));

321 
	}
}

323 
__ölöe
 
u_öt64_t


324 
	$rdtsc
()

326 
u_öt32_t
 
low
, 
high
;

328 
__asm
 
	`__vﬁ©ûe
("rdtsc" : "˜" (
low
), "=d" (
high
));

329  (
low
 | ((
u_öt64_t
)
high
 << 32));

330 
	}
}

332 
__ölöe
 

333 
	$wbövd
()

335 
__asm
 
	`__vﬁ©ûe
("wbinvd");

336 
	}
}

338 
__ölöe
 

339 
	$wrôe_rÊags
(
u_l⁄g
 
rf
)

341 
__asm
 
	`__vﬁ©ûe
("pushq %0;Ö›fq" : : "r" (
rf
));

342 
	}
}

344 
__ölöe
 

345 
	$wrm§
(
u_öt
 
m§
, 
u_öt64_t
 
√wvÆ
)

347 
u_öt32_t
 
low
, 
high
;

349 
low
 = 
√wvÆ
;

350 
high
 = 
√wvÆ
 >> 32;

351 
__asm
 
	`__vﬁ©ûe
("wrm§" : : "a" (
low
), "d" (
high
), "c" (
m§
));

352 
	}
}

354 
__ölöe
 

355 
	$lﬂd_¸0
(
u_l⁄g
 
d©a
)

358 
__asm
 
	`__vﬁ©ûe
("movq %0,%%¸0" : : "r" (
d©a
));

359 
	}
}

361 
__ölöe
 
u_l⁄g


362 
	$r¸0
()

364 
u_l⁄g
 
d©a
;

366 
__asm
 
	`__vﬁ©ûe
("movq %%¸0,%0" : "Ù" (
d©a
));

367  (
d©a
);

368 
	}
}

370 
__ölöe
 
u_l⁄g


371 
	$r¸2
()

373 
u_l⁄g
 
d©a
;

375 
__asm
 
	`__vﬁ©ûe
("movq %%¸2,%0" : "Ù" (
d©a
));

376  (
d©a
);

377 
	}
}

379 
__ölöe
 

380 
	$lﬂd_¸3
(
u_l⁄g
 
d©a
)

383 
__asm
 
	`__vﬁ©ûe
("movq %0,%%¸3" : : "r" (
d©a
) : "memory");

384 
	}
}

386 
__ölöe
 
u_l⁄g


387 
	$r¸3
()

389 
u_l⁄g
 
d©a
;

391 
__asm
 
	`__vﬁ©ûe
("movq %%¸3,%0" : "Ù" (
d©a
));

392  (
d©a
);

393 
	}
}

395 
__ölöe
 

396 
	$lﬂd_¸4
(
u_l⁄g
 
d©a
)

398 
__asm
 
	`__vﬁ©ûe
("movq %0,%%¸4" : : "r" (
d©a
));

399 
	}
}

401 
__ölöe
 
u_l⁄g


402 
	$r¸4
()

404 
u_l⁄g
 
d©a
;

406 
__asm
 
	`__vﬁ©ûe
("movq %%¸4,%0" : "Ù" (
d©a
));

407  (
d©a
);

408 
	}
}

413 
__ölöe
 

414 
	$öv…lb
()

417 
	`lﬂd_¸3
(
	`r¸3
());

418 
	}
}

424 
__ölöe
 

425 
	$övÕg
(
u_l⁄g
 
addr
)

428 
__asm
 
	`__vﬁ©ûe
("övÕg %0" : : "m" (*(*)
addr
) : "memory");

429 
	}
}

431 
__ölöe
 
u_öt


432 
	$rfs
()

434 
u_öt
 
£l
;

435 
__asm
 
	`__vﬁ©ûe
("mov %%fs,%0" : "Ùm" (
£l
));

436  (
£l
);

437 
	}
}

439 
__ölöe
 
u_öt


440 
	$rgs
()

442 
u_öt
 
£l
;

443 
__asm
 
	`__vﬁ©ûe
("mov %%gs,%0" : "Ùm" (
£l
));

444  (
£l
);

445 
	}
}

447 
__ölöe
 
u_öt


448 
	$rss
()

450 
u_öt
 
£l
;

451 
__asm
 
	`__vﬁ©ûe
("mov %%ss,%0" : "Ùm" (
£l
));

452  (
£l
);

453 
	}
}

455 
__ölöe
 

456 
	$lﬂd_ds
(
u_öt
 
£l
)

458 
__asm
 
	`__vﬁ©ûe
("mov %0,%%ds" : : "rm" (
£l
));

459 
	}
}

461 
__ölöe
 

462 
	$lﬂd_es
(
u_öt
 
£l
)

464 
__asm
 
	`__vﬁ©ûe
("mov %0,%%es" : : "rm" (
£l
));

465 
	}
}

467 
__ölöe
 

468 
	$˝u_m⁄ô‹
(c⁄° *
addr
, 
exãnsi⁄s
, 
höts
)

470 
__asm
 
	`__vﬁ©ûe
("monitor;"

471 : :"a" (
addr
), "c" (
exãnsi⁄s
), "d"(
höts
));

472 
	}
}

474 
__ölöe
 

475 
	$˝u_mwaô
(
exãnsi⁄s
, 
höts
)

477 
__asm
 
	`__vﬁ©ûe
("mwaô;" : :"a" (
höts
), "c" (
exãnsi⁄s
));

478 
	}
}

480 #ifde‡
_KERNEL


482 #i‚def 
MSR_FSBASE


483 
	#MSR_FSBASE
 0xc0000100

	)

485 
__ölöe
 

486 
	$lﬂd_fs
(
u_öt
 
£l
)

489 
__asm
 
	`__vﬁ©ûe
("rdmsr; mov %0,%%fs; wrmsr"

490 : : "rm" (
£l
), "c" (
MSR_FSBASE
) : "eax", "edx");

491 
	}
}

493 #i‚def 
MSR_GSBASE


494 
	#MSR_GSBASE
 0xc0000101

	)

496 
__ölöe
 

497 
	$lﬂd_gs
(
u_öt
 
£l
)

504 
__asm
 
	`__vﬁ©ûe
("pushfq; cli;Ñdmsr; mov %0,%%gs; wrmsr;Öopfq"

505 : : "rm" (
£l
), "c" (
MSR_GSBASE
) : "eax", "edx");

506 
	}
}

509 
__ölöe
 

510 
	$lﬂd_fs
(
u_öt
 
£l
)

512 
__asm
 
	`__vﬁ©ûe
("mov %0,%%fs" : : "rm" (
£l
));

513 
	}
}

515 
__ölöe
 

516 
	$lﬂd_gs
(
u_öt
 
£l
)

518 
__asm
 
	`__vﬁ©ûe
("mov %0,%%gs" : : "rm" (
£l
));

519 
	}
}

522 
__ölöe
 

523 
	$lidt
(
ªgi⁄_des¸ùt‹
 *
addr
)

525 
__asm
 
	`__vﬁ©ûe
("lidà(%0)" : : "r" (
addr
));

526 
	}
}

528 
__ölöe
 

529 
	$Œdt
(
u_sh‹t
 
£l
)

531 
__asm
 
	`__vﬁ©ûe
("Œdà%0" : : "r" (
£l
));

532 
	}
}

534 
__ölöe
 

535 
	$…r
(
u_sh‹t
 
£l
)

537 
__asm
 
	`__vﬁ©ûe
("…∏%0" : : "r" (
£l
));

538 
	}
}

540 
__ölöe
 
u_öt64_t


541 
	$rdr0
()

543 
u_öt64_t
 
d©a
;

544 
__asm
 
	`__vﬁ©ûe
("movq %%dr0,%0" : "Ù" (
d©a
));

545  (
d©a
);

546 
	}
}

548 
__ölöe
 

549 
	$lﬂd_dr0
(
u_öt64_t
 
dr0
)

551 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr0" : : "r" (
dr0
));

552 
	}
}

554 
__ölöe
 
u_öt64_t


555 
	$rdr1
()

557 
u_öt64_t
 
d©a
;

558 
__asm
 
	`__vﬁ©ûe
("movq %%dr1,%0" : "Ù" (
d©a
));

559  (
d©a
);

560 
	}
}

562 
__ölöe
 

563 
	$lﬂd_dr1
(
u_öt64_t
 
dr1
)

565 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr1" : : "r" (
dr1
));

566 
	}
}

568 
__ölöe
 
u_öt64_t


569 
	$rdr2
()

571 
u_öt64_t
 
d©a
;

572 
__asm
 
	`__vﬁ©ûe
("movq %%dr2,%0" : "Ù" (
d©a
));

573  (
d©a
);

574 
	}
}

576 
__ölöe
 

577 
	$lﬂd_dr2
(
u_öt64_t
 
dr2
)

579 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr2" : : "r" (
dr2
));

580 
	}
}

582 
__ölöe
 
u_öt64_t


583 
	$rdr3
()

585 
u_öt64_t
 
d©a
;

586 
__asm
 
	`__vﬁ©ûe
("movq %%dr3,%0" : "Ù" (
d©a
));

587  (
d©a
);

588 
	}
}

590 
__ölöe
 

591 
	$lﬂd_dr3
(
u_öt64_t
 
dr3
)

593 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr3" : : "r" (
dr3
));

594 
	}
}

596 
__ölöe
 
u_öt64_t


597 
	$rdr4
()

599 
u_öt64_t
 
d©a
;

600 
__asm
 
	`__vﬁ©ûe
("movq %%dr4,%0" : "Ù" (
d©a
));

601  (
d©a
);

602 
	}
}

604 
__ölöe
 

605 
	$lﬂd_dr4
(
u_öt64_t
 
dr4
)

607 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr4" : : "r" (
dr4
));

608 
	}
}

610 
__ölöe
 
u_öt64_t


611 
	$rdr5
()

613 
u_öt64_t
 
d©a
;

614 
__asm
 
	`__vﬁ©ûe
("movq %%dr5,%0" : "Ù" (
d©a
));

615  (
d©a
);

616 
	}
}

618 
__ölöe
 

619 
	$lﬂd_dr5
(
u_öt64_t
 
dr5
)

621 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr5" : : "r" (
dr5
));

622 
	}
}

624 
__ölöe
 
u_öt64_t


625 
	$rdr6
()

627 
u_öt64_t
 
d©a
;

628 
__asm
 
	`__vﬁ©ûe
("movq %%dr6,%0" : "Ù" (
d©a
));

629  (
d©a
);

630 
	}
}

632 
__ölöe
 

633 
	$lﬂd_dr6
(
u_öt64_t
 
dr6
)

635 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr6" : : "r" (
dr6
));

636 
	}
}

638 
__ölöe
 
u_öt64_t


639 
	$rdr7
()

641 
u_öt64_t
 
d©a
;

642 
__asm
 
	`__vﬁ©ûe
("movq %%dr7,%0" : "Ù" (
d©a
));

643  (
d©a
);

644 
	}
}

646 
__ölöe
 

647 
	$lﬂd_dr7
(
u_öt64_t
 
dr7
)

649 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr7" : : "r" (
dr7
));

650 
	}
}

652 
__ölöe
 
ªgi°î_t


653 
	$öå_dißbÀ
()

655 
ªgi°î_t
 
rÊags
;

657 
rÊags
 = 
	`ªad_rÊags
();

658 
	`dißbÀ_öå
();

659  (
rÊags
);

660 
	}
}

662 
__ölöe
 

663 
	$öå_ª°‹e
(
ªgi°î_t
 
rÊags
)

665 
	`wrôe_rÊags
(
rÊags
);

666 
	}
}

670 
bªakpoöt
();

671 
u_öt
 
bsÊ
(u_öà
mask
);

672 
u_öt
 
b§l
(u_öà
mask
);

673 
dißbÀ_öå
();

674 
do_˝uid
(
u_öt
 
ax
, u_öà*
p
);

675 
íabÀ_öå
();

676 
hÆt
();

677 
ü32_∑u£
();

678 
u_ch¨
 
öb
(
u_öt
 
p‹t
);

679 
u_öt
 
öl
(u_öà
p‹t
);

680 
ösb
(
u_öt
 
p‹t
, *
addr
, 
size_t
 
˙t
);

681 
ö¶
(
u_öt
 
p‹t
, *
addr
, 
size_t
 
˙t
);

682 
ösw
(
u_öt
 
p‹t
, *
addr
, 
size_t
 
˙t
);

683 
ªgi°î_t
 
öå_dißbÀ
();

684 
öå_ª°‹e
(
ªgi°î_t
 
rf
);

685 
övd
();

686 
övÕg
(
u_öt
 
addr
);

687 
öv…lb
();

688 
u_sh‹t
 
öw
(
u_öt
 
p‹t
);

689 
lidt
(
ªgi⁄_des¸ùt‹
 *
addr
);

690 
Œdt
(
u_sh‹t
 
£l
);

691 
lﬂd_¸0
(
u_l⁄g
 
¸0
);

692 
lﬂd_¸3
(
u_l⁄g
 
¸3
);

693 
lﬂd_¸4
(
u_l⁄g
 
¸4
);

694 
lﬂd_dr0
(
u_öt64_t
 
dr0
);

695 
lﬂd_dr1
(
u_öt64_t
 
dr1
);

696 
lﬂd_dr2
(
u_öt64_t
 
dr2
);

697 
lﬂd_dr3
(
u_öt64_t
 
dr3
);

698 
lﬂd_dr4
(
u_öt64_t
 
dr4
);

699 
lﬂd_dr5
(
u_öt64_t
 
dr5
);

700 
lﬂd_dr6
(
u_öt64_t
 
dr6
);

701 
lﬂd_dr7
(
u_öt64_t
 
dr7
);

702 
lﬂd_fs
(
u_öt
 
£l
);

703 
lﬂd_gs
(
u_öt
 
£l
);

704 
…r
(
u_sh‹t
 
£l
);

705 
outb
(
u_öt
 
p‹t
, 
u_ch¨
 
d©a
);

706 
oué
(
u_öt
 
p‹t
, u_öà
d©a
);

707 
outsb
(
u_öt
 
p‹t
, c⁄° *
addr
, 
size_t
 
˙t
);

708 
out¶
(
u_öt
 
p‹t
, c⁄° *
addr
, 
size_t
 
˙t
);

709 
outsw
(
u_öt
 
p‹t
, c⁄° *
addr
, 
size_t
 
˙t
);

710 
outw
(
u_öt
 
p‹t
, 
u_sh‹t
 
d©a
);

711 
u_l⁄g
 
r¸0
();

712 
u_l⁄g
 
r¸2
();

713 
u_l⁄g
 
r¸3
();

714 
u_l⁄g
 
r¸4
();

715 
u_öt64_t
 
rdm§
(
u_öt
 
m§
);

716 
u_öt64_t
 
rdpmc
(
u_öt
 
pmc
);

717 
u_öt64_t
 
rdr0
();

718 
u_öt64_t
 
rdr1
();

719 
u_öt64_t
 
rdr2
();

720 
u_öt64_t
 
rdr3
();

721 
u_öt64_t
 
rdr4
();

722 
u_öt64_t
 
rdr5
();

723 
u_öt64_t
 
rdr6
();

724 
u_öt64_t
 
rdr7
();

725 
u_öt64_t
 
rdtsc
();

726 
u_öt
 
ªad_rÊags
();

727 
u_öt
 
rfs
();

728 
u_öt
 
rgs
();

729 
wbövd
();

730 
wrôe_rÊags
(
u_öt
 
rf
);

731 
wrm§
(
u_öt
 
m§
, 
u_öt64_t
 
√wvÆ
);

735 
ª£t_dbªgs
();

737 #ifde‡
_KERNEL


738 
rdm§_ß„
(
u_öt
 
m§
, 
uöt64_t
 *
vÆ
);

739 
wrm§_ß„
(
u_öt
 
m§
, 
uöt64_t
 
√wvÆ
);

	@/usr/include/machine/trap.h

36 #i‚de‡
_MACHINE_TRAP_H_


37 
	#_MACHINE_TRAP_H_


	)

44 
	#T_PRIVINFLT
 1

	)

45 
	#T_BPTFLT
 3

	)

46 
	#T_ARITHTRAP
 6

	)

47 
	#T_PROTFLT
 9

	)

48 
	#T_TRCTRAP
 10

	)

49 
	#T_PAGEFLT
 12

	)

50 
	#T_ALIGNFLT
 14

	)

52 
	#T_DIVIDE
 18

	)

53 
	#T_NMI
 19

	)

54 
	#T_OFLOW
 20

	)

55 
	#T_BOUND
 21

	)

56 
	#T_DNA
 22

	)

57 
	#T_DOUBLEFLT
 23

	)

58 
	#T_FPOPFLT
 24

	)

59 
	#T_TSSFLT
 25

	)

60 
	#T_SEGNPFLT
 26

	)

61 
	#T_STKFLT
 27

	)

62 
	#T_MCHK
 28

	)

63 
	#T_XMMFLT
 29

	)

64 
	#T_RESERVED
 30

	)

65 
	#T_DTRACE_RET
 32

	)

66 
	#T_DTRACE_PROBE
 33

	)

71 
	#ILL_RESAD_FAULT
 
T_RESADFLT


	)

72 
	#ILL_PRIVIN_FAULT
 
T_PRIVINFLT


	)

73 
	#ILL_RESOP_FAULT
 
T_RESOPFLT


	)

74 
	#ILL_ALIGN_FAULT
 
T_ALIGNFLT


	)

75 
	#ILL_FPOP_FAULT
 
T_FPOPFLT


	)

78 
	#FPE_INTOVF_TRAP
 0x1

	)

79 
	#FPE_INTDIV_TRAP
 0x2

	)

80 
	#FPE_FLTDIV_TRAP
 0x3

	)

81 
	#FPE_FLTOVF_TRAP
 0x4

	)

82 
	#FPE_FLTUND_TRAP
 0x5

	)

83 
	#FPE_FPU_NP_TRAP
 0x6

	)

84 
	#FPE_SUBRNG_TRAP
 0x7

	)

87 
	#BUS_PAGE_FAULT
 
T_PAGEFLT


	)

88 
	#BUS_SEGNP_FAULT
 
T_SEGNPFLT


	)

89 
	#BUS_STK_FAULT
 
T_STKFLT


	)

90 
	#BUS_SEGM_FAULT
 
T_RESERVED


	)

93 
	#T_USER
 0x100

	)

	@/usr/include/sys/callout.h

38 #i‚de‡
_SYS_CALLOUT_H_


39 
	#_SYS_CALLOUT_H_


	)

41 
	~<sys/queue.h
>

43 
	glock_obje˘
;

45 
SLIST_HEAD
(
ˇŒout_li°
, 
ˇŒout
);

46 
TAILQ_HEAD
(
ˇŒout_èûq
, 
ˇŒout
);

48 
	sˇŒout
 {

50 
SLIST_ENTRY
(
ˇŒout
Ë
	m¶e
;

51 
TAILQ_ENTRY
(
ˇŒout
Ë
	mtqe
;

52 } 
	mc_löks
;

53 
	mc_time
;

54 *
	mc_¨g
;

55 (*
	mc_func
)(*);

56 
lock_obje˘
 *
	mc_lock
;

57 
	mc_Êags
;

58 vﬁ©ûê
	mc_˝u
;

61 
	#CALLOUT_LOCAL_ALLOC
 0x0001

	)

62 
	#CALLOUT_ACTIVE
 0x0002

	)

63 
	#CALLOUT_PENDING
 0x0004

	)

64 
	#CALLOUT_MPSAFE
 0x0008

	)

65 
	#CALLOUT_RETURNUNLOCKED
 0x0010

	)

66 
	#CALLOUT_SHAREDLOCK
 0x0020

	)

67 
	#CALLOUT_DFRMIGRATION
 0x0040

	)

69 
	sˇŒout_h™dÀ
 {

70 
ˇŒout
 *
	mˇŒout
;

73 #ifde‡
_KERNEL


74 
nˇŒout
;

76 
	#ˇŒout_a˘ive
(
c
Ë((c)->
c_Êags
 & 
CALLOUT_ACTIVE
)

	)

77 
	#ˇŒout_dó˘iv©e
(
c
Ë((c)->
c_Êags
 &~
CALLOUT_ACTIVE
)

	)

78 
	#ˇŒout_døö
(
c
Ë
	`_ˇŒout_°›_ß„
(c, 1)

	)

79 
ˇŒout_öô
(
ˇŒout
 *, );

80 
_ˇŒout_öô_lock
(
ˇŒout
 *, 
lock_obje˘
 *, );

81 
	#ˇŒout_öô_mtx
(
c
, 
mtx
, 
Êags
) \

82 
	`_ˇŒout_öô_lock
((
c
), ((
mtx
Ë!
NULL
Ë? &(mtx)->
lock_obje˘
 : \

83 
NULL
, (
Êags
))

	)

84 
	#ˇŒout_öô_rw
(
c
, 
rw
, 
Êags
) \

85 
	`_ˇŒout_öô_lock
((
c
), ((
rw
Ë!
NULL
Ë? &‘w)->
lock_obje˘
 : \

86 
NULL
, (
Êags
))

	)

87 
	#ˇŒout_≥ndög
(
c
Ë((c)->
c_Êags
 & 
CALLOUT_PENDING
)

	)

88 
ˇŒout_ª£t_⁄
(
ˇŒout
 *, , (*)(*), *, );

89 
	#ˇŒout_ª£t
(
c
, 
⁄_tick
, 
‚
, 
¨g
) \

90 
	`ˇŒout_ª£t_⁄
((
c
), (
⁄_tick
), (
‚
), (
¨g
), (c)->
c_˝u
)

	)

91 
	#ˇŒout_ª£t_cur˝u
(
c
, 
⁄_tick
, 
‚
, 
¨g
) \

92 
	`ˇŒout_ª£t_⁄
((
c
), (
⁄_tick
), (
‚
), (
¨g
), 
	`PCPU_GET
(
˝uid
))

	)

93 
	`ˇŒout_scheduÀ
(
ˇŒout
 *, );

94 
	`ˇŒout_scheduÀ_⁄
(
ˇŒout
 *, , );

95 
	#ˇŒout_scheduÀ_cur˝u
(
c
, 
⁄_tick
) \

96 
	`ˇŒout_scheduÀ_⁄
((
c
), (
⁄_tick
), 
	`PCPU_GET
(
˝uid
))

	)

97 
	#ˇŒout_°›
(
c
Ë
	`_ˇŒout_°›_ß„
(c, 0)

	)

98 
	`_ˇŒout_°›_ß„
(
ˇŒout
 *, );

99 
	`ˇŒout_tick
();

	@/usr/include/sys/libkern.h

33 #i‚de‡
_SYS_LIBKERN_H_


34 
	#_SYS_LIBKERN_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/ty≥s.h
>

38 #ifde‡
_KERNEL


39 
	~<sys/sy°m.h
>

42 #i‚def 
LIBKERN_INLINE


43 
	#LIBKERN_INLINE
 
__ölöe


	)

44 
	#LIBKERN_BODY


	)

48 
u_ch¨
 c⁄° 
bcd2bö_d©a
[];

49 
u_ch¨
 c⁄° 
bö2bcd_d©a
[];

50 c⁄° 
hex2ascii_d©a
[];

52 
	#bcd2bö
(
bcd
Ë(
bcd2bö_d©a
[bcd])

	)

53 
	#bö2bcd
(
bö
Ë(
bö2bcd_d©a
[bö])

	)

54 
	#hex2ascii
(
hex
Ë(
hex2ascii_d©a
[hex])

	)

56 
__ölöe
 
	$imax
(
a
, 
b
Ë{  (®> b ?á : b); 
	}
}

57 
__ölöe
 
	$imö
(
a
, 
b
Ë{  (®< b ?á : b); 
	}
}

58 
__ölöe
 
	$lmax
(
a
, 
b
Ë{  (®> b ?á : b); 
	}
}

59 
__ölöe
 
	$lmö
(
a
, 
b
Ë{  (®< b ?á : b); 
	}
}

60 
__ölöe
 
u_öt
 
	$max
(
u_öt
 
a
, u_öà
b
Ë{  (®> b ?á : b); 
	}
}

61 
__ölöe
 
u_öt
 
	$mö
(
u_öt
 
a
, u_öà
b
Ë{  (®< b ?á : b); 
	}
}

62 
__ölöe
 
quad_t
 
	$qmax
(
quad_t
 
a
, quad_à
b
Ë{  (®> b ?á : b); 
	}
}

63 
__ölöe
 
quad_t
 
	$qmö
(
quad_t
 
a
, quad_à
b
Ë{  (®< b ?á : b); 
	}
}

64 
__ölöe
 
u_l⁄g
 
	$ulmax
(
u_l⁄g
 
a
, u_l⁄g 
b
Ë{  (®> b ?á : b); 
	}
}

65 
__ölöe
 
u_l⁄g
 
	$ulmö
(
u_l⁄g
 
a
, u_l⁄g 
b
Ë{  (®< b ?á : b); 
	}
}

66 
__ölöe
 
off_t
 
	$omax
(
off_t
 
a
, off_à
b
Ë{  (®> b ?á : b); 
	}
}

67 
__ölöe
 
off_t
 
	$omö
(
off_t
 
a
, off_à
b
Ë{  (®< b ?á : b); 
	}
}

69 
__ölöe
 
	$abs
(
a
Ë{  (®< 0 ? -®:á); 
	}
}

70 
__ölöe
 
	$œbs
(
a
Ë{  (®< 0 ? -®:á); 
	}
}

71 
__ölöe
 
quad_t
 
	$qabs
(
quad_t
 
a
Ë{  (®< 0 ? -®:á); 
	}
}

74 
	gmÆloc_ty≥
;

75 
uöt32_t
 
¨c4øndom
();

76 
¨c4ønd
(*
±r
, 
u_öt
 
Àn
, 
ª£ed
);

77 
bcmp
(c⁄° *, c⁄° *, 
size_t
);

78 *
b£¨ch
(c⁄° *, c⁄° *, 
size_t
,

79 
size_t
, (*)(const *, const *));

80 #i‚def 
HAVE_INLINE_FFS


81 
	`ffs
();

83 #i‚def 
HAVE_INLINE_FFSL


84 
	`ff¶
();

86 #i‚def 
HAVE_INLINE_FLS


87 
	`Ês
();

89 #i‚def 
HAVE_INLINE_FLSL


90 
	`Ê¶
();

92 
	`‚m©ch
(const *, const *, );

93 
	`gës
(*, 
size_t
, );

94 
	`locc
(, *, 
u_öt
);

95 
	`memcmp
(c⁄° *
b1
, c⁄° *
b2
, 
size_t
 
Àn
);

96 
	`qs‹t
(*
ba£
, 
size_t
 
nmemb
, size_à
size
,

97 (*
com∑r
)(const *, const *));

98 
	`qs‹t_r
(*
ba£
, 
size_t
 
nmemb
, size_à
size
, *
thunk
,

99 (*
com∑r
)(*, const *, const *));

100 
u_l⁄g
 
	`øndom
();

101 *
	`ödex
(const *, );

102 *
	`rödex
(const *, );

103 
	`sˇnc
(
u_öt
, c⁄° 
u_ch¨
 *, const u_char *, );

104 
	`skpc
(, , *);

105 
	`§™dom
(
u_l⁄g
);

106 
	`°rˇ£cmp
(const *, const *);

107 *
	`°rˇt
(* 
__ª°ri˘
, const * __restrict);

108 
	`°rcmp
(const *, const *);

109 *
	`°r˝y
(* 
__ª°ri˘
, const * __restrict);

110 
size_t
 
	$°rc•n
(c⁄° * 
__ª°ri˘
, c⁄° * __ª°ri˘Ë
__puª
;

111 *
	`°rdup
(c⁄° *
__ª°ri˘
, 
mÆloc_ty≥
 *);

112 
size_t
 
	`°æˇt
(*, const *, size_t);

113 
size_t
 
	`°æ˝y
(*, const *, size_t);

114 
size_t
 
	`°æí
(const *);

115 
	`°∫ˇ£cmp
(c⁄° *, c⁄° *, 
size_t
);

116 
	`°∫cmp
(c⁄° *, c⁄° *, 
size_t
);

117 *
	`°∫˝y
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

118 
size_t
 
	`°∫Àn
(const *, size_t);

119 *
	`°r£p
(**, c⁄° *
dñim
);

120 
size_t
 
	`°r•n
(const *, const *);

121 *
	`°r°r
(const *, const *);

122 
	`°rvÆid
(c⁄° *, 
size_t
);

124 
uöt32_t
 
¸c32_èb
[];

126 
__ölöe
 
uöt32_t


127 
	$¸c32_øw
(c⁄° *
buf
, 
size_t
 
size
, 
uöt32_t
 
¸c
)

129 c⁄° 
uöt8_t
 *
p
 = (c⁄° uöt8_à*)
buf
;

131 
size
--)

132 
¸c
 = 
¸c32_èb
[(¸¯^ *
p
++) & 0xFF] ^ (crc >> 8);

133  (
¸c
);

134 
	}
}

136 
__ölöe
 
uöt32_t


137 
	$¸c32
(c⁄° *
buf
, 
size_t
 
size
)

139 
uöt32_t
 
¸c
;

141 
¸c
 = 
	`¸c32_øw
(
buf
, 
size
, ~0U);

142  (
¸c
 ^ ~0U);

143 
	}
}

145 
uöt32_t


146 
ˇlcuœã_¸c32c
(
uöt32_t
 
¸c32c
, c⁄° *
buf„r
,

147 
Àngth
);

150 
LIBKERN_INLINE
 *
mem£t
(*, , 
size_t
);

151 #ifde‡
LIBKERN_BODY


152 
LIBKERN_INLINE
 *

153 
	$mem£t
(*
b
, 
c
, 
size_t
 
Àn
)

155 *
bb
;

157 i‡(
c
 == 0)

158 
	`bzîo
(
b
, 
Àn
);

160 
bb
 = (*)
b
; 
Àn
--; )

161 *
bb
++ = 
c
;

162  (
b
);

163 
	}
}

166 
__ölöe
 *

167 
	$°rchr
(c⁄° *
p
, 
ch
)

169  (
	`ödex
(
p
, 
ch
));

170 
	}
}

172 
__ölöe
 *

173 
	$°ºchr
(c⁄° *
p
, 
ch
)

175  (
	`rödex
(
p
, 
ch
));

176 
	}
}

179 
	#FNM_NOMATCH
 1

	)

182 
	#FNM_NOESCAPE
 0x01

	)

183 
	#FNM_PATHNAME
 0x02

	)

184 
	#FNM_PERIOD
 0x04

	)

185 
	#FNM_LEADING_DIR
 0x08

	)

186 
	#FNM_CASEFOLD
 0x10

	)

187 
	#FNM_IGNORECASE
 
FNM_CASEFOLD


	)

188 
	#FNM_FILE_NAME
 
FNM_PATHNAME


	)

	@/usr/include/sys/stdint.h

29 #i‚de‡
_SYS_STDINT_H_


30 
	#_SYS_STDINT_H_


	)

32 
	~<sys/cdefs.h
>

33 
	~<sys/_ty≥s.h
>

35 
	~<machöe/_°döt.h
>

37 #i‚de‡
_INT8_T_DECLARED


38 
__öt8_t
 
	töt8_t
;

39 
	#_INT8_T_DECLARED


	)

42 #i‚de‡
_INT16_T_DECLARED


43 
__öt16_t
 
	töt16_t
;

44 
	#_INT16_T_DECLARED


	)

47 #i‚de‡
_INT32_T_DECLARED


48 
__öt32_t
 
	töt32_t
;

49 
	#_INT32_T_DECLARED


	)

52 #i‚de‡
_INT64_T_DECLARED


53 
__öt64_t
 
	töt64_t
;

54 
	#_INT64_T_DECLARED


	)

57 #i‚de‡
_UINT8_T_DECLARED


58 
__uöt8_t
 
	tuöt8_t
;

59 
	#_UINT8_T_DECLARED


	)

62 #i‚de‡
_UINT16_T_DECLARED


63 
__uöt16_t
 
	tuöt16_t
;

64 
	#_UINT16_T_DECLARED


	)

67 #i‚de‡
_UINT32_T_DECLARED


68 
__uöt32_t
 
	tuöt32_t
;

69 
	#_UINT32_T_DECLARED


	)

72 #i‚de‡
_UINT64_T_DECLARED


73 
__uöt64_t
 
	tuöt64_t
;

74 
	#_UINT64_T_DECLARED


	)

77 
__öt_Àa°8_t
 
	töt_Àa°8_t
;

78 
__öt_Àa°16_t
 
	töt_Àa°16_t
;

79 
__öt_Àa°32_t
 
	töt_Àa°32_t
;

80 
__öt_Àa°64_t
 
	töt_Àa°64_t
;

82 
__uöt_Àa°8_t
 
	tuöt_Àa°8_t
;

83 
__uöt_Àa°16_t
 
	tuöt_Àa°16_t
;

84 
__uöt_Àa°32_t
 
	tuöt_Àa°32_t
;

85 
__uöt_Àa°64_t
 
	tuöt_Àa°64_t
;

87 
__öt_Á°8_t
 
	töt_Á°8_t
;

88 
__öt_Á°16_t
 
	töt_Á°16_t
;

89 
__öt_Á°32_t
 
	töt_Á°32_t
;

90 
__öt_Á°64_t
 
	töt_Á°64_t
;

92 
__uöt_Á°8_t
 
	tuöt_Á°8_t
;

93 
__uöt_Á°16_t
 
	tuöt_Á°16_t
;

94 
__uöt_Á°32_t
 
	tuöt_Á°32_t
;

95 
__uöt_Á°64_t
 
	tuöt_Á°64_t
;

97 
__ötmax_t
 
	tötmax_t
;

98 
__uötmax_t
 
	tuötmax_t
;

100 #i‚de‡
_INTPTR_T_DECLARED


101 
__öçå_t
 
	töçå_t
;

102 
__uöçå_t
 
	tuöçå_t
;

103 
	#_INTPTR_T_DECLARED


	)

	@/usr/include/inttypes.h

29 #i‚de‡
_INTTYPES_H_


30 
	#_INTTYPES_H_


	)

32 
	~<machöe/_öây≥s.h
>

33 
	~<sys/°döt.h
>

36 
ötmax_t
 
	mquŸ
;

37 
ötmax_t
 
	mªm
;

38 } 
	timaxdiv_t
;

40 
__BEGIN_DECLS


41 
ötmax_t
 
	$imaxabs
(
ötmax_t
Ë
__puª2
;

42 
imaxdiv_t
 
	$imaxdiv
(
ötmax_t
, i¡max_tË
__puª2
;

44 
ötmax_t
 
	`°πoimax
(c⁄° * 
__ª°ri˘
, ** __restrict, );

45 
uötmax_t
 
	`°πoumax
(c⁄° * 
__ª°ri˘
, ** __restrict, );

46 
ötmax_t
 
	`wc°oimax
(c⁄° 
__wch¨_t
 * 
__ª°ri˘
,

47 
__wch¨_t
 ** 
__ª°ri˘
, );

48 
uötmax_t
 
	`wc°oumax
(c⁄° 
__wch¨_t
 * 
__ª°ri˘
,

49 
__wch¨_t
 ** 
__ª°ri˘
, );

50 
__END_DECLS


	@/usr/include/machine/_stdint.h

40 #i‚de‡
_MACHINE__STDINT_H_


41 
	#_MACHINE__STDINT_H_


	)

43 #i‡!
deföed
(
__˝lu•lus
Ë|| deföed(
__STDC_CONSTANT_MACROS
)

45 
	#INT8_C
(
c
Ë(c)

	)

46 
	#INT16_C
(
c
Ë(c)

	)

47 
	#INT32_C
(
c
Ë(c)

	)

48 
	#INT64_C
(
c
Ë(¯## 
L
)

	)

50 
	#UINT8_C
(
c
Ë(c)

	)

51 
	#UINT16_C
(
c
Ë(c)

	)

52 
	#UINT32_C
(
c
Ë(¯## 
U
)

	)

53 
	#UINT64_C
(
c
Ë(¯## 
UL
)

	)

55 
	#INTMAX_C
(
c
Ë(¯## 
L
)

	)

56 
	#UINTMAX_C
(
c
Ë(¯## 
UL
)

	)

60 #i‡!
deföed
(
__˝lu•lus
Ë|| deföed(
__STDC_LIMIT_MACROS
)

67 
	#INT8_MIN
 (-0x7f-1)

	)

68 
	#INT16_MIN
 (-0x7fff-1)

	)

69 
	#INT32_MIN
 (-0x7fffffff-1)

	)

70 
	#INT64_MIN
 (-0x7fffffffffffffffL-1)

	)

73 
	#INT8_MAX
 0x7f

	)

74 
	#INT16_MAX
 0x7fff

	)

75 
	#INT32_MAX
 0x7fffffff

	)

76 
	#INT64_MAX
 0x7fffffffffffffffL

	)

79 
	#UINT8_MAX
 0xff

	)

80 
	#UINT16_MAX
 0xffff

	)

81 
	#UINT32_MAX
 0xffffffffU

	)

82 
	#UINT64_MAX
 0xffffffffffffffffUL

	)

89 
	#INT_LEAST8_MIN
 
INT8_MIN


	)

90 
	#INT_LEAST16_MIN
 
INT16_MIN


	)

91 
	#INT_LEAST32_MIN
 
INT32_MIN


	)

92 
	#INT_LEAST64_MIN
 
INT64_MIN


	)

95 
	#INT_LEAST8_MAX
 
INT8_MAX


	)

96 
	#INT_LEAST16_MAX
 
INT16_MAX


	)

97 
	#INT_LEAST32_MAX
 
INT32_MAX


	)

98 
	#INT_LEAST64_MAX
 
INT64_MAX


	)

101 
	#UINT_LEAST8_MAX
 
UINT8_MAX


	)

102 
	#UINT_LEAST16_MAX
 
UINT16_MAX


	)

103 
	#UINT_LEAST32_MAX
 
UINT32_MAX


	)

104 
	#UINT_LEAST64_MAX
 
UINT64_MAX


	)

111 
	#INT_FAST8_MIN
 
INT32_MIN


	)

112 
	#INT_FAST16_MIN
 
INT32_MIN


	)

113 
	#INT_FAST32_MIN
 
INT32_MIN


	)

114 
	#INT_FAST64_MIN
 
INT64_MIN


	)

117 
	#INT_FAST8_MAX
 
INT32_MAX


	)

118 
	#INT_FAST16_MAX
 
INT32_MAX


	)

119 
	#INT_FAST32_MAX
 
INT32_MAX


	)

120 
	#INT_FAST64_MAX
 
INT64_MAX


	)

123 
	#UINT_FAST8_MAX
 
UINT32_MAX


	)

124 
	#UINT_FAST16_MAX
 
UINT32_MAX


	)

125 
	#UINT_FAST32_MAX
 
UINT32_MAX


	)

126 
	#UINT_FAST64_MAX
 
UINT64_MAX


	)

132 
	#INTPTR_MIN
 
INT64_MIN


	)

133 
	#INTPTR_MAX
 
INT64_MAX


	)

134 
	#UINTPTR_MAX
 
UINT64_MAX


	)

140 
	#INTMAX_MIN
 
INT64_MIN


	)

141 
	#INTMAX_MAX
 
INT64_MAX


	)

142 
	#UINTMAX_MAX
 
UINT64_MAX


	)

149 
	#PTRDIFF_MIN
 
INT64_MIN


	)

150 
	#PTRDIFF_MAX
 
INT64_MAX


	)

153 
	#SIG_ATOMIC_MIN
 
INT32_MIN


	)

154 
	#SIG_ATOMIC_MAX
 
INT32_MAX


	)

157 
	#SIZE_MAX
 
UINT64_MAX


	)

159 #i‚de‡
WCHAR_MIN


161 
	#WCHAR_MIN
 
INT32_MIN


	)

162 
	#WCHAR_MAX
 
INT32_MAX


	)

166 
	#WINT_MIN
 
INT32_MIN


	)

167 
	#WINT_MAX
 
INT32_MAX


	)

	@/usr/include/machine/_inttypes.h

33 #i‚de‡
_MACHINE_INTTYPES_H_


34 
	#_MACHINE_INTTYPES_H_


	)

42 
	#PRId8
 "d"

	)

43 
	#PRId16
 "d"

	)

44 
	#PRId32
 "d"

	)

45 
	#PRId64
 "ld"

	)

46 
	#PRIdLEAST8
 "d"

	)

47 
	#PRIdLEAST16
 "d"

	)

48 
	#PRIdLEAST32
 "d"

	)

49 
	#PRIdLEAST64
 "ld"

	)

50 
	#PRIdFAST8
 "d"

	)

51 
	#PRIdFAST16
 "d"

	)

52 
	#PRIdFAST32
 "d"

	)

53 
	#PRIdFAST64
 "ld"

	)

54 
	#PRIdMAX
 "jd"

	)

55 
	#PRIdPTR
 "ld"

	)

57 
	#PRIi8
 "i"

	)

58 
	#PRIi16
 "i"

	)

59 
	#PRIi32
 "i"

	)

60 
	#PRIi64
 "li"

	)

61 
	#PRIiLEAST8
 "i"

	)

62 
	#PRIiLEAST16
 "i"

	)

63 
	#PRIiLEAST32
 "i"

	)

64 
	#PRIiLEAST64
 "li"

	)

65 
	#PRIiFAST8
 "i"

	)

66 
	#PRIiFAST16
 "i"

	)

67 
	#PRIiFAST32
 "i"

	)

68 
	#PRIiFAST64
 "li"

	)

69 
	#PRIiMAX
 "ji"

	)

70 
	#PRIiPTR
 "li"

	)

74 
	#PRIo8
 "o"

	)

75 
	#PRIo16
 "o"

	)

76 
	#PRIo32
 "o"

	)

77 
	#PRIo64
 "lo"

	)

78 
	#PRIoLEAST8
 "o"

	)

79 
	#PRIoLEAST16
 "o"

	)

80 
	#PRIoLEAST32
 "o"

	)

81 
	#PRIoLEAST64
 "lo"

	)

82 
	#PRIoFAST8
 "o"

	)

83 
	#PRIoFAST16
 "o"

	)

84 
	#PRIoFAST32
 "o"

	)

85 
	#PRIoFAST64
 "lo"

	)

86 
	#PRIoMAX
 "jo"

	)

87 
	#PRIoPTR
 "lo"

	)

89 
	#PRIu8
 "u"

	)

90 
	#PRIu16
 "u"

	)

91 
	#PRIu32
 "u"

	)

92 
	#PRIu64
 "lu"

	)

93 
	#PRIuLEAST8
 "u"

	)

94 
	#PRIuLEAST16
 "u"

	)

95 
	#PRIuLEAST32
 "u"

	)

96 
	#PRIuLEAST64
 "lu"

	)

97 
	#PRIuFAST8
 "u"

	)

98 
	#PRIuFAST16
 "u"

	)

99 
	#PRIuFAST32
 "u"

	)

100 
	#PRIuFAST64
 "lu"

	)

101 
	#PRIuMAX
 "ju"

	)

102 
	#PRIuPTR
 "lu"

	)

104 
	#PRIx8
 "x"

	)

105 
	#PRIx16
 "x"

	)

106 
	#PRIx32
 "x"

	)

107 
	#PRIx64
 "lx"

	)

108 
	#PRIxLEAST8
 "x"

	)

109 
	#PRIxLEAST16
 "x"

	)

110 
	#PRIxLEAST32
 "x"

	)

111 
	#PRIxLEAST64
 "lx"

	)

112 
	#PRIxFAST8
 "x"

	)

113 
	#PRIxFAST16
 "x"

	)

114 
	#PRIxFAST32
 "x"

	)

115 
	#PRIxFAST64
 "lx"

	)

116 
	#PRIxMAX
 "jx"

	)

117 
	#PRIxPTR
 "lx"

	)

119 
	#PRIX8
 "X"

	)

120 
	#PRIX16
 "X"

	)

121 
	#PRIX32
 "X"

	)

122 
	#PRIX64
 "lX"

	)

123 
	#PRIXLEAST8
 "X"

	)

124 
	#PRIXLEAST16
 "X"

	)

125 
	#PRIXLEAST32
 "X"

	)

126 
	#PRIXLEAST64
 "lX"

	)

127 
	#PRIXFAST8
 "X"

	)

128 
	#PRIXFAST16
 "X"

	)

129 
	#PRIXFAST32
 "X"

	)

130 
	#PRIXFAST64
 "lX"

	)

131 
	#PRIXMAX
 "jX"

	)

132 
	#PRIXPTR
 "lX"

	)

136 
	#SCNd8
 "hhd"

	)

137 
	#SCNd16
 "hd"

	)

138 
	#SCNd32
 "d"

	)

139 
	#SCNd64
 "ld"

	)

140 
	#SCNdLEAST8
 "hhd"

	)

141 
	#SCNdLEAST16
 "hd"

	)

142 
	#SCNdLEAST32
 "d"

	)

143 
	#SCNdLEAST64
 "ld"

	)

144 
	#SCNdFAST8
 "d"

	)

145 
	#SCNdFAST16
 "d"

	)

146 
	#SCNdFAST32
 "d"

	)

147 
	#SCNdFAST64
 "ld"

	)

148 
	#SCNdMAX
 "jd"

	)

149 
	#SCNdPTR
 "ld"

	)

151 
	#SCNi8
 "hhi"

	)

152 
	#SCNi16
 "hi"

	)

153 
	#SCNi32
 "i"

	)

154 
	#SCNi64
 "li"

	)

155 
	#SCNiLEAST8
 "hhi"

	)

156 
	#SCNiLEAST16
 "hi"

	)

157 
	#SCNiLEAST32
 "i"

	)

158 
	#SCNiLEAST64
 "li"

	)

159 
	#SCNiFAST8
 "i"

	)

160 
	#SCNiFAST16
 "i"

	)

161 
	#SCNiFAST32
 "i"

	)

162 
	#SCNiFAST64
 "li"

	)

163 
	#SCNiMAX
 "ji"

	)

164 
	#SCNiPTR
 "li"

	)

168 
	#SCNo8
 "hho"

	)

169 
	#SCNo16
 "ho"

	)

170 
	#SCNo32
 "o"

	)

171 
	#SCNo64
 "lo"

	)

172 
	#SCNoLEAST8
 "hho"

	)

173 
	#SCNoLEAST16
 "ho"

	)

174 
	#SCNoLEAST32
 "o"

	)

175 
	#SCNoLEAST64
 "lo"

	)

176 
	#SCNoFAST8
 "o"

	)

177 
	#SCNoFAST16
 "o"

	)

178 
	#SCNoFAST32
 "o"

	)

179 
	#SCNoFAST64
 "lo"

	)

180 
	#SCNoMAX
 "jo"

	)

181 
	#SCNoPTR
 "lo"

	)

183 
	#SCNu8
 "hhu"

	)

184 
	#SCNu16
 "hu"

	)

185 
	#SCNu32
 "u"

	)

186 
	#SCNu64
 "lu"

	)

187 
	#SCNuLEAST8
 "hhu"

	)

188 
	#SCNuLEAST16
 "hu"

	)

189 
	#SCNuLEAST32
 "u"

	)

190 
	#SCNuLEAST64
 "lu"

	)

191 
	#SCNuFAST8
 "u"

	)

192 
	#SCNuFAST16
 "u"

	)

193 
	#SCNuFAST32
 "u"

	)

194 
	#SCNuFAST64
 "lu"

	)

195 
	#SCNuMAX
 "ju"

	)

196 
	#SCNuPTR
 "lu"

	)

198 
	#SCNx8
 "hhx"

	)

199 
	#SCNx16
 "hx"

	)

200 
	#SCNx32
 "x"

	)

201 
	#SCNx64
 "lx"

	)

202 
	#SCNxLEAST8
 "hhx"

	)

203 
	#SCNxLEAST16
 "hx"

	)

204 
	#SCNxLEAST32
 "x"

	)

205 
	#SCNxLEAST64
 "lx"

	)

206 
	#SCNxFAST8
 "x"

	)

207 
	#SCNxFAST16
 "x"

	)

208 
	#SCNxFAST32
 "x"

	)

209 
	#SCNxFAST64
 "lx"

	)

210 
	#SCNxMAX
 "jx"

	)

211 
	#SCNxPTR
 "lx"

	)

	@
1
.
1
/usr/include
216
4570
app_rand.c
apps.c
apps.h
ashoke_client.c
asn1pars.c
bnt.c
ca.c
ciphers.c
cms.c
crl.c
crl2p7.c
crlgen.c
dgst.c
dh.c
dhparam.c
dsa.c
dsaparam.c
ec.c
ecparam.c
ect.c
enc.c
engine.c
errstr.c
gendh.c
gendsa.c
genpkey.c
genrsa.c
long2.c
longtest.c
nseq.c
ocsp.c
openssl.c
passwd.c
pkcs12.c
pkcs7.c
pkcs8.c
pkey.c
pkeyparam.c
pkeyutl.c
prime.c
progs.h
rand.c
req.c
rsa.c
rsautl.c
s_apps.h
s_cb.c
s_client.c
s_server.c
s_socket.c
s_time.c
sess_id.c
smime.c
speed.c
spkac.c
srp.c
test.c
testdsa.h
testrsa.h
timeouts.h
ts.c
verify.c
version.c
vms_decc_init.c
winrand.c
x509.c
../crypto/ec/ec_lcl.h
../e_os.h
../e_os2.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/getopt.h
/usr/include/math.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/openssl/aes.h
/usr/include/openssl/asn1.h
/usr/include/openssl/bio.h
/usr/include/openssl/blowfish.h
/usr/include/openssl/bn.h
/usr/include/openssl/buffer.h
/usr/include/openssl/camellia.h
/usr/include/openssl/cast.h
/usr/include/openssl/comp.h
/usr/include/openssl/conf.h
/usr/include/openssl/crypto.h
/usr/include/openssl/des.h
/usr/include/openssl/dh.h
/usr/include/openssl/dsa.h
/usr/include/openssl/e_os2.h
/usr/include/openssl/ec.h
/usr/include/openssl/ecdh.h
/usr/include/openssl/ecdsa.h
/usr/include/openssl/engine.h
/usr/include/openssl/err.h
/usr/include/openssl/evp.h
/usr/include/openssl/fips.h
/usr/include/openssl/hmac.h
/usr/include/openssl/lhash.h
/usr/include/openssl/md2.h
/usr/include/openssl/md4.h
/usr/include/openssl/md5.h
/usr/include/openssl/mdc2.h
/usr/include/openssl/obj_mac.h
/usr/include/openssl/objects.h
/usr/include/openssl/ocsp.h
/usr/include/openssl/opensslconf.h
/usr/include/openssl/opensslv.h
/usr/include/openssl/ossl_typ.h
/usr/include/openssl/pem.h
/usr/include/openssl/pkcs12.h
/usr/include/openssl/pkcs7.h
/usr/include/openssl/rand.h
/usr/include/openssl/rc2.h
/usr/include/openssl/rc4.h
/usr/include/openssl/rc5.h
/usr/include/openssl/ripemd.h
/usr/include/openssl/rsa.h
/usr/include/openssl/safestack.h
/usr/include/openssl/sha.h
/usr/include/openssl/ssl.h
/usr/include/openssl/stack.h
/usr/include/openssl/txt_db.h
/usr/include/openssl/ui.h
/usr/include/openssl/x509.h
/usr/include/openssl/x509_vfy.h
/usr/include/openssl/x509v3.h
/usr/include/signal.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/sys/file.h
/usr/include/sys/resource.h
/usr/include/sys/select.h
/usr/include/sys/socket.h
/usr/include/sys/stat.h
/usr/include/sys/time.h
/usr/include/sys/times.h
/usr/include/sys/types.h
/usr/include/sys/uio.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/_ctype.h
/usr/include/arpa/inet.h
/usr/include/machine/_limits.h
/usr/include/machine/endian.h
/usr/include/machine/param.h
/usr/include/malloc.h
/usr/include/netinet6/in6.h
/usr/include/openssl/des_old.h
/usr/include/openssl/dtls1.h
/usr/include/openssl/ebcdic.h
/usr/include/openssl/kssl.h
/usr/include/openssl/pem2.h
/usr/include/openssl/ssl2.h
/usr/include/openssl/ssl23.h
/usr/include/openssl/ssl3.h
/usr/include/openssl/store.h
/usr/include/openssl/symhacks.h
/usr/include/openssl/tls1.h
/usr/include/stdarg.h
/usr/include/stddef.h
/usr/include/sys/_iovec.h
/usr/include/sys/_lock.h
/usr/include/sys/_mutex.h
/usr/include/sys/_null.h
/usr/include/sys/_pthreadtypes.h
/usr/include/sys/_sigset.h
/usr/include/sys/_timespec.h
/usr/include/sys/_timeval.h
/usr/include/sys/_types.h
/usr/include/sys/cdefs.h
/usr/include/sys/fcntl.h
/usr/include/sys/filio.h
/usr/include/sys/ioctl.h
/usr/include/sys/param.h
/usr/include/sys/queue.h
/usr/include/sys/refcount.h
/usr/include/sys/signal.h
/usr/include/sys/timespec.h
/usr/include/sys/unistd.h
/usr/include/krb5.h
/usr/include/machine/_types.h
/usr/include/machine/atomic.h
/usr/include/machine/signal.h
/usr/include/openssl/pq_compat.h
/usr/include/openssl/pqueue.h
/usr/include/openssl/ui_compat.h
/usr/include/runetype.h
/usr/include/sys/errno.h
/usr/include/sys/ioccom.h
/usr/include/sys/limits.h
/usr/include/sys/priority.h
/usr/include/sys/sockio.h
/usr/include/sys/syslimits.h
/usr/include/sys/systm.h
/usr/include/sys/timeb.h
/usr/include/sys/ttycom.h
/usr/include/asn1_err.h
/usr/include/heim_err.h
/usr/include/k524_err.h
/usr/include/krb5-protos.h
/usr/include/krb5-types.h
/usr/include/krb5_asn1.h
/usr/include/krb5_err.h
/usr/include/machine/cpufunc.h
/usr/include/machine/trap.h
/usr/include/sys/callout.h
/usr/include/sys/libkern.h
/usr/include/sys/stdint.h
/usr/include/inttypes.h
/usr/include/machine/_stdint.h
/usr/include/machine/_inttypes.h
